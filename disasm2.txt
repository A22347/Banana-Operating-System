
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 41 02 c0       	mov    eax,0xc00241c4
c0000025:	3d c4 41 02 c0       	cmp    eax,0xc00241c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 41 02 c0       	push   0xc00241c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 41 02 c0       	mov    eax,0xc00241c4
c0000051:	2d c4 41 02 c0       	sub    eax,0xc00241c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 41 02 c0       	push   0xc00241c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb dc 03 02 c0       	mov    ebx,0xc00203dc
c0000097:	81 eb d8 03 02 c0    	sub    ebx,0xc00203d8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d8 03 02 c0       	mov    esi,0xc00203d8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 41 02 c0       	push   0xc00241c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 c4 41 02 c0       	push   0xc00241c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d7 55 01 00       	call   c0015884 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b5 55 01 00       	call   c0015884 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c2 5a 01 00       	call   c0015db0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 5d 61 01 00       	call   c0016454 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 0b 12 01 00       	jmp    c001158a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc20],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc20],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc20],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc20],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc20],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc20],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 e4 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb1c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 46 7c 01 00       	jmp    c0019a20 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 70 7c 01 00       	jmp    c0019a60 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 91 7c 01 00       	jmp    c0019aa0 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 40 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9c0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 40 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9c0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba e4 2d 02 c0       	mov    edx,0xc0022de4
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba fc 04 02 c0       	mov    edx,0xc00204fc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 02 05 02 c0       	mov    eax,0xc0020502
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf c0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa40]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 0b 05 02 c0       	mov    eax,0xc002050b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 40 06 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf9c0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 90 05 02 c0       	mov    eax,0xc0020590
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 80 05 02 c0       	mov    ebx,0xc0020580
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 60 05 02 c0       	mov    eax,0xc0020560
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 70 05 02 c0       	mov    eax,0xc0020570
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 12 05 02 c0       	mov    edx,0xc0020512
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 1e 05 02 c0       	mov    edx,0xc002051e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 32 05 02 c0       	mov    edx,0xc0020532
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 60 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020960
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 60 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020960
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 60 07 02 c0       	mov    eax,0xc0020760
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 60 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf9a0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 60 0a 02 c0       	push   0xc0020a60
c0006147:	e8 78 42 01 00       	call   c001a3c4 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 6e 0a 02 c0       	push   0xc0020a6e
c000617f:	e8 40 42 01 00       	call   c001a3c4 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 a9 41 01 00       	call   c001a368 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 7d 0a 02 c0       	push   0xc0020a7d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 80 0a 02 c0       	push   0xc0020a80
c000682f:	e8 90 3b 01 00       	call   c001a3c4 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 9e 3b 01 00       	call   c001a3e0 <iso_kprintfd>
c0006842:	c7 04 24 85 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a85
c0006849:	e8 76 3b 01 00       	call   c001a3c4 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 86 3b 01 00       	call   c001a3e0 <iso_kprintfd>
c000685a:	c7 04 24 8b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a8b
c0006861:	e8 5e 3b 01 00       	call   c001a3c4 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 6e 3b 01 00       	call   c001a3e0 <iso_kprintfd>
c0006872:	c7 04 24 91 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a91
c0006879:	e8 46 3b 01 00       	call   c001a3c4 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 56 3b 01 00       	call   c001a3e0 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 7d 0a 02 c0       	push   0xc0020a7d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 9a 0a 02 c0       	push   0xc0020a9a
c0006a52:	e8 6d 39 01 00       	call   c001a3c4 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 a5 0a 02 c0       	push   0xc0020aa5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ac 0a 02 c0       	push   0xc0020aac
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 b3 0a 02 c0       	push   0xc0020ab3
c0006b69:	e8 56 38 01 00       	call   c001a3c4 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 be 0a 02 c0       	push   0xc0020abe
c0006b84:	e8 3b 38 01 00       	call   c001a3c4 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 2e a1 00 00       	call   c0010dc2 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 53 5e 00 00       	call   c000caf6 <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 cf 0a 02 c0       	push   0xc0020acf
c0006cd4:	e8 c8 a1 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 e8 0a 02 c0       	push   0xc0020ae8
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 db ee 00 00       	call   c0015bdc <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 ea f0 00 00       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 c4 68 01 c0       	push   0xc00168c4
c0006d25:	52                   	push   edx
c0006d26:	e8 d5 f0 00 00       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 e4 0b 02 c0       	push   0xc0020be4
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 64 a1 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 0d aa 00 00       	call   c0011756 <KeInitRand()>
c0006d49:	e8 99 ff 00 00       	call   c0016ce7 <Vm::initialise8086()>
c0006d4e:	e8 df 4a 00 00       	call   c000b832 <Fs::initVFS()>
c0006d53:	c7 04 24 f5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020af5
c0006d5a:	e8 42 a1 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 e4 0b 02 c0       	push   0xc0020be4
c0006d7e:	e8 1e a1 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0006d83:	e8 cd 46 00 00       	call   c000b455 <KeInitialiseSymlinks()>
c0006d88:	e8 75 a6 00 00       	call   c0011402 <KeLoadSystemEnv()>
c0006d8d:	e8 d2 a8 00 00       	call   c0011664 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 0f 0b 02 c0       	push   0xc0020b0f
c0006d9c:	68 18 0b 02 c0       	push   0xc0020b18
c0006da1:	e8 38 d0 00 00       	call   c0013dde <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 a2 56 00 00       	call   c000c450 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 08 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c08
c0006db5:	e8 e7 a0 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 28 5d 00 00       	call   c000caf4 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 20 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b20
c0006dd3:	e8 c9 a0 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 31 0b 02 c0       	push   0xc0020b31
c0006de7:	e8 f5 e7 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 2c ea 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 4a f4 00 00       	call   c001624c <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 4d 0b 02 c0       	push   0xc0020b4d
c0006e17:	50                   	push   eax
c0006e18:	e8 53 5d 00 00       	call   c000cb70 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 54 0c 02 c0       	mov    edx,0xc0020c54
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 bf 84 01 00       	call   c001f3d6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 85 93 00 00       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 5e 93 00 00       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 3c 93 00 00       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 1a 93 00 00       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 27 92 00 00       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 02 92 00 00       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 1e 83 01 00       	call   c001f390 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 6c 7f 01 00       	call   c001f000 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 18 92 00 00       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 56 0b 02 c0       	push   0xc0020b56
c0007104:	e8 96 a4 00 00       	call   c001159f <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 5c 0b 02 c0       	push   0xc0020b5c
c0007140:	e8 5a a4 00 00       	call   c001159f <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 1f 8c 00 00       	jmp    c000fdac <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 62 0b 02 c0       	push   0xc0020b62
c00071e3:	0f 94 05 20 36 02 c0 	sete   BYTE PTR ds:0xc0023620
c00071ea:	e8 b2 9c 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 1b 87 00 00       	call   c000f920 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 c4 57 00 00       	call   c000c9d8 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 7a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b7a
c000722d:	e8 6f 9c 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 4a 91 00 00       	call   c0010392 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 81 57 00 00       	call   c000c9d8 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 28 0c 02 c0       	push   0xc0020c28
c0007274:	e8 28 9c 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0007279:	e8 b0 0c 01 00       	call   c0017f2e <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 94 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b94
c0007285:	e8 17 9c 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 92 ec 00 00       	call   c0015f28 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 af 0b 02 c0       	push   0xc0020baf
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 c0 0b 02 c0       	push   0xc0020bc0
c000730d:	e8 8d a2 00 00       	call   c001159f <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 cd 0b 02 c0       	push   0xc0020bcd
c0007322:	e8 78 a2 00 00       	call   c001159f <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 d7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bd7
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 5e a2 00 00       	jmp    c001159f <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 c7 06 01 00       	call   c0017bfa <HalSystemIdle()>
c0007533:	e8 5a 84 01 00       	call   c001f992 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 90 f0 01 c0       	push   0xc001f090
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 a0 f0 01 c0       	push   0xc001f0a0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 aa f0 01 c0       	push   0xc001f0aa
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 b4 f0 01 c0       	push   0xc001f0b4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 be f0 01 c0       	push   0xc001f0be
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 c8 f0 01 c0       	push   0xc001f0c8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 d2 f0 01 c0       	push   0xc001f0d2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 dc f0 01 c0       	push   0xc001f0dc
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 e6 f0 01 c0       	push   0xc001f0e6
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 ee f0 01 c0       	push   0xc001f0ee
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 f8 f0 01 c0       	push   0xc001f0f8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 00 f1 01 c0       	push   0xc001f100
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 08 f1 01 c0       	push   0xc001f108
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 10 f1 01 c0       	push   0xc001f110
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 2a f1 01 c0       	push   0xc001f12a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 32 f1 01 c0       	push   0xc001f132
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 3c f1 01 c0       	push   0xc001f13c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 46 f1 01 c0       	push   0xc001f146
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 50 f1 01 c0       	push   0xc001f150
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 ea f1 01 c0       	push   0xc001f1ea
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 f1 f1 01 c0       	push   0xc001f1f1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 dc f1 01 c0       	push   0xc001f1dc
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 e3 f1 01 c0       	push   0xc001f1e3
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 5a f1 01 c0       	push   0xc001f15a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 64 f1 01 c0       	push   0xc001f164
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 6e f1 01 c0       	push   0xc001f16e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 78 f1 01 c0       	push   0xc001f178
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 82 f1 01 c0       	push   0xc001f182
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 8c f1 01 c0       	push   0xc001f18c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 96 f1 01 c0       	push   0xc001f196
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 a0 f1 01 c0       	push   0xc001f1a0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 aa f1 01 c0       	push   0xc001f1aa
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 b4 f1 01 c0       	push   0xc001f1b4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 be f1 01 c0       	push   0xc001f1be
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 c8 f1 01 c0       	push   0xc001f1c8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 d2 f1 01 c0       	push   0xc001f1d2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 2c f3 01 c0       	push   0xc001f32c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 36 f3 01 c0       	push   0xc001f336
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 40 f3 01 c0       	push   0xc001f340
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 4a f3 01 c0       	push   0xc001f34a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 54 f3 01 c0       	push   0xc001f354
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 5e f3 01 c0       	push   0xc001f35e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 68 f3 01 c0       	push   0xc001f368
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 72 f3 01 c0       	push   0xc001f372
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 e6 f0 01 c0       	push   0xc001f0e6
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 14 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023614
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 14 36 02 c0    	mov    edi,DWORD PTR ds:0xc0023614
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 14 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023614,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 14 36 02 c0       	mov    eax,ds:0xc0023614
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 78 0c 02 c0       	push   0xc0020c78
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 a8 0c 02 c0       	push   0xc0020ca8
c0007a44:	e8 56 9b 00 00       	call   c001159f <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 ad 0c 02 c0       	push   0xc0020cad
c0007a5a:	e8 40 9b 00 00       	call   c001159f <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 b4 0c 02 c0       	push   0xc0020cb4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 9f 92 00 00       	call   c0010e25 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 c8 91 00 00       	call   c0010d6f <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 6d 7d 01 00       	call   c001f92a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 cc 0c 02 c0       	push   0xc0020ccc
c0007c4b:	e8 4f 99 00 00       	call   c001159f <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 cc 0c 02 c0       	push   0xc0020ccc
c0007cc5:	e8 d5 98 00 00       	call   c001159f <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 18 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023618
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 18 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023618
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 18 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023618
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 71 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d71
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 cf 97 00 00       	jmp    c001159f <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 f4 0c 02 c0       	push   0xc0020cf4
c0007e54:	e8 46 97 00 00       	call   c001159f <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 87 0d 02 c0       	push   0xc0020d87
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 24 0d 02 c0       	push   0xc0020d24
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 9f 0d 02 c0       	push   0xc0020d9f
c000810a:	e8 90 94 00 00       	call   c001159f <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 48 0d 02 c0       	push   0xc0020d48
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 ad 0d 02 c0       	push   0xc0020dad
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 c9 0d 02 c0       	push   0xc0020dc9
c0008331:	e8 69 92 00 00       	call   c001159f <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 cd dc 00 00       	call   c001604c <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 03 74 01 00       	call   c001f810 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 e6 0d 02 c0       	push   0xc0020de6
c0008422:	e8 78 91 00 00       	call   c001159f <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 54 0e 02 c0       	mov    edx,0xc0020e54
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 ae 53 00 00       	call   c000d8ba <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 ba 08 01 00       	call   c0018dec <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 40 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9c0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 40 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9c0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 f8 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb08]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 d0 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb30]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 ec 05 01 00       	call   c0018c80 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 49 06 01 00       	jmp    c0018d88 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 20 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e20
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 13 8e 00 00       	jmp    c001159f <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 0e 3b 00 00       	jmp    c000c3f7 <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 2e 0e 02 c0       	mov    esi,0xc0020e2e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 60 01 01 00       	call   c0018d88 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 54 0e 02 c0       	mov    edx,0xc0020e54
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 3f 0e 02 c0       	push   0xc0020e3f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 45 0e 02 c0       	push   0xc0020e45
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 80 36 02 c0    	mov    DWORD PTR ds:0xc0023680,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 0f 68 01 00       	call   c001f9f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 0f 67 01 00       	call   c001facc <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 03 67 01 00       	call   c001fad4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 09 66 01 00       	call   c001f9f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 f4 0e 02 c0       	push   0xc0020ef4
c0009414:	e8 86 81 00 00       	call   c001159f <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 0e 66 01 00       	call   c001facc <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 9b 66 01 00       	call   c001fb76 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 59 64 01 00       	call   c001f9b6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 10 36 02 c0       	push   0xc0023610
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 b4 f9 01 c0       	push   0xc001f9b4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 88 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023688
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 88 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023688
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 84 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023684
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 84 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023684,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 4c 0f 02 c0       	push   0xc0020f4c
c0009674:	e8 26 7f 00 00       	call   c001159f <KePanic(char const*)>
c0009679:	8b 2d 84 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023684
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 84 36 02 c0       	mov    eax,ds:0xc0023684
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 84 36 02 c0       	mov    ds:0xc0023684,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 8c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002368c
c000973e:	8b 0d 94 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023694
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 90 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023690
c0009759:	8b 0d 8c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002368c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 e0 11 02 c0       	push   0xc00211e0
c000979e:	e8 fc 7d 00 00       	call   c001159f <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 f7 11 02 c0       	push   0xc00211f7
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 90 36 02 c0    	mov    DWORD PTR ds:0xc0023690,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 98 36 02 c0 43 	mov    BYTE PTR ds:0xc0023698,0x43
c000984f:	c7 05 8c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002368c,0x8
c0009859:	a3 94 36 02 c0       	mov    ds:0xc0023694,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 90 36 02 c0       	mov    eax,ds:0xc0023690
c0009874:	f7 35 8c 36 02 c0    	div    DWORD PTR ds:0xc002368c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 6c 0f 02 c0       	push   0xc0020f6c
c00098af:	e8 eb 7c 00 00       	call   c001159f <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 0e 12 02 c0       	push   0xc002120e
c0009981:	e8 19 7c 00 00       	call   c001159f <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 90 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f90
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 b6 7b 00 00       	jmp    c001159f <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 2a 12 02 c0       	push   0xc002122a
c00099f6:	e8 a4 7b 00 00       	call   c001159f <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 46 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021246
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 5a 7b 00 00       	jmp    c001159f <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 b4 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fb4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 d8 0f 02 c0       	push   0xc0020fd8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 40 10 02 c0       	push   0xc0021040
c0009d87:	e8 13 78 00 00       	call   c001159f <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 64 10 02 c0       	push   0xc0021064
c0009e7b:	e8 1f 77 00 00       	call   c001159f <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 90 10 02 c0       	push   0xc0021090
c0009fd9:	e8 c1 75 00 00       	call   c001159f <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 5e 2a 00 00       	call   c000cc6c <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 60 12 02 c0       	push   0xc0021260
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 98 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023698
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 3a 3b 00 00       	call   c000de2e <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 8c 36 02 c0    	cmp    DWORD PTR ds:0xc002368c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 b4 10 02 c0       	push   0xc00210b4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 6e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002126e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 91 12 02 c0       	push   0xc0021291
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 7f 12 02 c0       	push   0xc002127f
c000a413:	e8 87 71 00 00       	call   c001159f <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 e4 10 02 c0       	push   0xc00210e4
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 98 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023698
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 f6 38 00 00       	call   c000ddc2 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 8c 36 02 c0    	cmp    DWORD PTR ds:0xc002368c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 a4 12 02 c0       	push   0xc00212a4
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 04 11 02 c0       	push   0xc0021104
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 64 11 02 c0 	mov    DWORD PTR [esp],0xc0021164
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 b9 12 02 c0       	push   0xc00212b9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 cd 12 02 c0       	push   0xc00212cd
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 e0 12 02 c0       	push   0xc00212e0
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 ed 12 02 c0       	push   0xc00212ed
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 06 13 02 c0       	push   0xc0021306
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 06 13 02 c0       	push   0xc0021306
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 0e 13 02 c0 	mov    DWORD PTR [esp],0xc002130e
c000a7ec:	e8 ae 6d 00 00       	call   c001159f <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 26 13 02 c0       	push   0xc0021326
c000a7fe:	e8 9c 6d 00 00       	call   c001159f <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 3c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdecc4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 8c 14 02 c0       	push   0xc002148c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 a0 14 02 c0       	push   0xc00214a0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 aa 14 02 c0       	push   0xc00214aa
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 b4 14 02 c0       	push   0xc00214b4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 f8 15 02 c0       	push   0xc00215f8
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 be 14 02 c0       	push   0xc00214be
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 18 16 02 c0       	push   0xc0021618
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 d3 14 02 c0       	push   0xc00214d3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 ed 14 02 c0       	push   0xc00214ed
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 a0 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc960]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 40 16 02 c0       	push   0xc0021640
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 f8 15 02 c0       	push   0xc00215f8
c000ab78:	e8 22 6a 00 00       	call   c001159f <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 88 16 02 c0       	push   0xc0021688
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 88 16 02 c0       	push   0xc0021688
c000aba7:	e8 f3 69 00 00       	call   c001159f <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 f8 14 02 c0       	push   0xc00214f8
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 f8 14 02 c0       	push   0xc00214f8
c000abd3:	e8 c7 69 00 00       	call   c001159f <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 15 15 02 c0       	push   0xc0021515
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 15 15 02 c0       	push   0xc0021515
c000abff:	e8 9b 69 00 00       	call   c001159f <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 a8 16 02 c0       	push   0xc00216a8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 a8 16 02 c0       	push   0xc00216a8
c000ac2b:	e8 6f 69 00 00       	call   c001159f <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 cc 16 02 c0       	push   0xc00216cc
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 cc 16 02 c0       	push   0xc00216cc
c000ac57:	e8 43 69 00 00       	call   c001159f <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 31 15 02 c0       	push   0xc0021531
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 31 15 02 c0       	push   0xc0021531
c000ac83:	e8 17 69 00 00       	call   c001159f <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 4d 15 02 c0       	push   0xc002154d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 4d 15 02 c0       	push   0xc002154d
c000acaf:	e8 eb 68 00 00       	call   c001159f <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 ec 16 02 c0       	push   0xc00216ec
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 ec 16 02 c0       	push   0xc00216ec
c000acdb:	e8 bf 68 00 00       	call   c001159f <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 10 17 02 c0       	push   0xc0021710
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 10 17 02 c0       	push   0xc0021710
c000ad07:	e8 93 68 00 00       	call   c001159f <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 2f 17 02 c0       	push   0xc002172f
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 d4 0d 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 4d 17 02 c0       	push   0xc002174d
c000ad93:	e8 07 68 00 00       	call   c001159f <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	50                   	push   eax
c000ad9c:	50                   	push   eax
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 d1 0d 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 67 17 02 c0       	push   0xc0021767
c000adb4:	e8 e6 67 00 00       	call   c001159f <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adc8:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000adcf:	83 ec 0c             	sub    esp,0xc
c000add2:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add6:	57                   	push   edi
c000add7:	52                   	push   edx
c000add8:	6a 00                	push   0x0
c000adda:	6a 08                	push   0x8
c000addc:	53                   	push   ebx
c000addd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ade0:	83 c4 20             	add    esp,0x20
c000ade3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ade8:	74 10                	je     c000adfa <KiFlushSymlinkChanges()+0x9c>
c000adea:	83 ec 0c             	sub    esp,0xc
c000aded:	68 81 17 02 c0       	push   0xc0021781
c000adf2:	e8 a8 67 00 00       	call   c001159f <KePanic(char const*)>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 f0                	mov    eax,esi
c000adfc:	83 ec 0c             	sub    esp,0xc
c000adff:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae01:	c1 e0 08             	shl    eax,0x8
c000ae04:	57                   	push   edi
c000ae05:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae0a:	50                   	push   eax
c000ae0b:	6a 00                	push   0x0
c000ae0d:	68 00 01 00 00       	push   0x100
c000ae12:	53                   	push   ebx
c000ae13:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae16:	83 c4 20             	add    esp,0x20
c000ae19:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 9b 17 02 c0       	push   0xc002179b
c000ae2b:	e8 6f 67 00 00       	call   c001159f <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 95 0d 00 00       	call   c000bbd4 <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	5b                   	pop    ebx
c000ae60:	5e                   	pop    esi
c000ae61:	5f                   	pop    edi
c000ae62:	c3                   	ret    

c000ae63 <KiDeinitialiseSymlinks(void*)>:
c000ae63:	e9 f6 fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000ae68 <KiGetSymlinkHash(char const*)>:
c000ae68:	53                   	push   ebx
c000ae69:	89 c3                	mov    ebx,eax
c000ae6b:	83 ec 14             	sub    esp,0x14
c000ae6e:	50                   	push   eax
c000ae6f:	e8 0c 57 ff ff       	call   c0000580 <strlen>
c000ae74:	5a                   	pop    edx
c000ae75:	59                   	pop    ecx
c000ae76:	50                   	push   eax
c000ae77:	53                   	push   ebx
c000ae78:	e8 a4 60 00 00       	call   c0010f21 <KeCalculateCRC32(unsigned char*, int)>
c000ae7d:	83 c4 18             	add    esp,0x18
c000ae80:	5b                   	pop    ebx
c000ae81:	89 c2                	mov    edx,eax
c000ae83:	c1 ea 10             	shr    edx,0x10
c000ae86:	31 d0                	xor    eax,edx
c000ae88:	c3                   	ret    

c000ae89 <KiCreateSymlinkID()>:
c000ae89:	55                   	push   ebp
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	53                   	push   ebx
c000ae8d:	31 db                	xor    ebx,ebx
c000ae8f:	83 ec 1c             	sub    esp,0x1c
c000ae92:	e8 56 68 00 00       	call   c00116ed <KeRand()>
c000ae97:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	43                   	inc    ebx
c000aea0:	31 ff                	xor    edi,edi
c000aea2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aea5:	89 ee                	mov    esi,ebp
c000aea7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aead:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aeb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aeb5:	c1 e0 1b             	shl    eax,0x1b
c000aeb8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec2:	75 10                	jne    c000aed4 <KiCreateSymlinkID()+0x4b>
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	68 b5 17 02 c0       	push   0xc00217b5
c000aecc:	e8 ce 66 00 00       	call   c001159f <KePanic(char const*)>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aed8:	75 06                	jne    c000aee0 <KiCreateSymlinkID()+0x57>
c000aeda:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aede:	74 b2                	je     c000ae92 <KiCreateSymlinkID()+0x9>
c000aee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aee4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee8:	83 c4 1c             	add    esp,0x1c
c000aeeb:	5b                   	pop    ebx
c000aeec:	31 f0                	xor    eax,esi
c000aeee:	5e                   	pop    esi
c000aeef:	31 fa                	xor    edx,edi
c000aef1:	5f                   	pop    edi
c000aef2:	5d                   	pop    ebp
c000aef3:	c3                   	ret    

c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>:
c000aef4:	53                   	push   ebx
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aefc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af00:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af09:	68 00 01 00 00       	push   0x100
c000af0e:	6a 00                	push   0x0
c000af10:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af17:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af1e:	c1 e0 08             	shl    eax,0x8
c000af21:	05 00 70 02 c0       	add    eax,0xc0027000
c000af26:	50                   	push   eax
c000af27:	e8 c4 55 ff ff       	call   c00004f0 <memset>
c000af2c:	58                   	pop    eax
c000af2d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af32:	5a                   	pop    edx
c000af33:	c1 e0 08             	shl    eax,0x8
c000af36:	53                   	push   ebx
c000af37:	05 00 70 02 c0       	add    eax,0xc0027000
c000af3c:	50                   	push   eax
c000af3d:	e8 0e 57 ff ff       	call   c0000650 <strcpy>
c000af42:	89 d8                	mov    eax,ebx
c000af44:	e8 1f ff ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af49:	ba 01 00 00 00       	mov    edx,0x1
c000af4e:	0f b7 c0             	movzx  eax,ax
c000af51:	e8 d8 fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000af56:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	40                   	inc    eax
c000af5f:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af64:	83 f8 03             	cmp    eax,0x3
c000af67:	7e 09                	jle    c000af72 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000af69:	83 c4 08             	add    esp,0x8
c000af6c:	5b                   	pop    ebx
c000af6d:	e9 ec fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000af72:	83 c4 08             	add    esp,0x8
c000af75:	5b                   	pop    ebx
c000af76:	c3                   	ret    

c000af77 <KiIsSymlinkRegistered(char const*)>:
c000af77:	55                   	push   ebp
c000af78:	57                   	push   edi
c000af79:	56                   	push   esi
c000af7a:	53                   	push   ebx
c000af7b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000af81:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000af88:	89 f0                	mov    eax,esi
c000af8a:	e8 d9 fe ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af8f:	0f b7 c0             	movzx  eax,ax
c000af92:	e8 7d fd ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000af97:	31 d2                	xor    edx,edx
c000af99:	88 c1                	mov    cl,al
c000af9b:	31 c0                	xor    eax,eax
c000af9d:	84 c9                	test   cl,cl
c000af9f:	0f 84 4e 01 00 00    	je     c000b0f3 <KiIsSymlinkRegistered(char const*)+0x17c>
c000afa5:	50                   	push   eax
c000afa6:	31 db                	xor    ebx,ebx
c000afa8:	50                   	push   eax
c000afa9:	56                   	push   esi
c000afaa:	68 be 17 02 c0       	push   0xc00217be
c000afaf:	e8 56 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afbd:	7e 30                	jle    c000afef <KiIsSymlinkRegistered(char const*)+0x78>
c000afbf:	89 d8                	mov    eax,ebx
c000afc1:	c1 e0 08             	shl    eax,0x8
c000afc4:	55                   	push   ebp
c000afc5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afca:	55                   	push   ebp
c000afcb:	50                   	push   eax
c000afcc:	56                   	push   esi
c000afcd:	e8 ae 57 ff ff       	call   c0000780 <strcmp>
c000afd2:	83 c4 10             	add    esp,0x10
c000afd5:	85 c0                	test   eax,eax
c000afd7:	75 13                	jne    c000afec <KiIsSymlinkRegistered(char const*)+0x75>
c000afd9:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000afe0:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000afe7:	e9 07 01 00 00       	jmp    c000b0f3 <KiIsSymlinkRegistered(char const*)+0x17c>
c000afec:	43                   	inc    ebx
c000afed:	eb c8                	jmp    c000afb7 <KiIsSymlinkRegistered(char const*)+0x40>
c000afef:	83 ec 0c             	sub    esp,0xc
c000aff2:	68 14 01 00 00       	push   0x114
c000aff7:	e8 d7 ca ff ff       	call   c0007ad3 <malloc>
c000affc:	83 c4 0c             	add    esp,0xc
c000afff:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b005:	68 2f 17 02 c0       	push   0xc002172f
c000b00a:	50                   	push   eax
c000b00b:	89 c3                	mov    ebx,eax
c000b00d:	e8 46 0b 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	85 db                	test   ebx,ebx
c000b017:	75 12                	jne    c000b02b <KiIsSymlinkRegistered(char const*)+0xb4>
c000b019:	83 ec 0c             	sub    esp,0xc
c000b01c:	68 dd 17 02 c0       	push   0xc00217dd
c000b021:	e8 79 65 00 00       	call   c001159f <KePanic(char const*)>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	eb 10                	jmp    c000b03b <KiIsSymlinkRegistered(char const*)+0xc4>
c000b02b:	83 ec 0c             	sub    esp,0xc
c000b02e:	53                   	push   ebx
c000b02f:	e8 06 0e 00 00       	call   c000be3a <File::exists()>
c000b034:	83 c4 10             	add    esp,0x10
c000b037:	84 c0                	test   al,al
c000b039:	74 de                	je     c000b019 <KiIsSymlinkRegistered(char const*)+0xa2>
c000b03b:	57                   	push   edi
c000b03c:	57                   	push   edi
c000b03d:	6a 01                	push   0x1
c000b03f:	53                   	push   ebx
c000b040:	e8 31 0b 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b045:	83 c4 10             	add    esp,0x10
c000b048:	85 c0                	test   eax,eax
c000b04a:	74 10                	je     c000b05c <KiIsSymlinkRegistered(char const*)+0xe5>
c000b04c:	83 ec 0c             	sub    esp,0xc
c000b04f:	68 f8 17 02 c0       	push   0xc00217f8
c000b054:	e8 46 65 00 00       	call   c001159f <KePanic(char const*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b061:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b065:	55                   	push   ebp
c000b066:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b06a:	57                   	push   edi
c000b06b:	6a 00                	push   0x0
c000b06d:	68 00 01 00 00       	push   0x100
c000b072:	53                   	push   ebx
c000b073:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b076:	83 c4 20             	add    esp,0x20
c000b079:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b081:	75 58                	jne    c000b0db <KiIsSymlinkRegistered(char const*)+0x164>
c000b083:	83 ec 0c             	sub    esp,0xc
c000b086:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b088:	55                   	push   ebp
c000b089:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b08d:	52                   	push   edx
c000b08e:	6a 00                	push   0x0
c000b090:	6a 08                	push   0x8
c000b092:	53                   	push   ebx
c000b093:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b096:	83 c4 20             	add    esp,0x20
c000b099:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b09e:	75 3b                	jne    c000b0db <KiIsSymlinkRegistered(char const*)+0x164>
c000b0a0:	50                   	push   eax
c000b0a1:	57                   	push   edi
c000b0a2:	56                   	push   esi
c000b0a3:	68 13 18 02 c0       	push   0xc0021813
c000b0a8:	e8 5d f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0ad:	5a                   	pop    edx
c000b0ae:	59                   	pop    ecx
c000b0af:	57                   	push   edi
c000b0b0:	56                   	push   esi
c000b0b1:	e8 ca 56 ff ff       	call   c0000780 <strcmp>
c000b0b6:	83 c4 10             	add    esp,0x10
c000b0b9:	85 c0                	test   eax,eax
c000b0bb:	75 9f                	jne    c000b05c <KiIsSymlinkRegistered(char const*)+0xe5>
c000b0bd:	83 ec 0c             	sub    esp,0xc
c000b0c0:	53                   	push   ebx
c000b0c1:	e8 0e 0b 00 00       	call   c000bbd4 <File::close()>
c000b0c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	eb 18                	jmp    c000b0f3 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b0db:	83 ec 0c             	sub    esp,0xc
c000b0de:	53                   	push   ebx
c000b0df:	e8 f0 0a 00 00       	call   c000bbd4 <File::close()>
c000b0e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	31 c0                	xor    eax,eax
c000b0f1:	31 d2                	xor    edx,edx
c000b0f3:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b0f9:	5b                   	pop    ebx
c000b0fa:	5e                   	pop    esi
c000b0fb:	5f                   	pop    edi
c000b0fc:	5d                   	pop    ebp
c000b0fd:	c3                   	ret    

c000b0fe <KeDereferenceSymlink(char const*, char*)>:
c000b0fe:	55                   	push   ebp
c000b0ff:	57                   	push   edi
c000b100:	56                   	push   esi
c000b101:	53                   	push   ebx
c000b102:	83 ec 44             	sub    esp,0x44
c000b105:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000b109:	56                   	push   esi
c000b10a:	68 1d 18 02 c0       	push   0xc002181d
c000b10f:	e8 f6 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b114:	89 34 24             	mov    DWORD PTR [esp],esi
c000b117:	e8 5b fe ff ff       	call   c000af77 <KiIsSymlinkRegistered(char const*)>
c000b11c:	83 c4 10             	add    esp,0x10
c000b11f:	89 c7                	mov    edi,eax
c000b121:	89 d0                	mov    eax,edx
c000b123:	09 f8                	or     eax,edi
c000b125:	75 07                	jne    c000b12e <KeDereferenceSymlink(char const*, char*)+0x30>
c000b127:	31 c0                	xor    eax,eax
c000b129:	e9 e3 01 00 00       	jmp    c000b311 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b12e:	53                   	push   ebx
c000b12f:	89 d5                	mov    ebp,edx
c000b131:	53                   	push   ebx
c000b132:	57                   	push   edi
c000b133:	68 37 18 02 c0       	push   0xc0021837
c000b138:	e8 cd f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b13d:	58                   	pop    eax
c000b13e:	5a                   	pop    edx
c000b13f:	55                   	push   ebp
c000b140:	68 45 18 02 c0       	push   0xc0021845
c000b145:	e8 c0 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b14a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b151:	e8 7d c9 ff ff       	call   c0007ad3 <malloc>
c000b156:	83 c4 0c             	add    esp,0xc
c000b159:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b15f:	56                   	push   esi
c000b160:	50                   	push   eax
c000b161:	89 c3                	mov    ebx,eax
c000b163:	e8 f0 09 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	85 db                	test   ebx,ebx
c000b16d:	0f 84 68 01 00 00    	je     c000b2db <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b173:	83 ec 0c             	sub    esp,0xc
c000b176:	68 80 24 02 c0       	push   0xc0022480
c000b17b:	e8 8a f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b180:	5a                   	pop    edx
c000b181:	59                   	pop    ecx
c000b182:	6a 01                	push   0x1
c000b184:	53                   	push   ebx
c000b185:	e8 ec 09 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	85 c0                	test   eax,eax
c000b18f:	74 0b                	je     c000b19c <KeDereferenceSymlink(char const*, char*)+0x9e>
c000b191:	83 ec 0c             	sub    esp,0xc
c000b194:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b196:	53                   	push   ebx
c000b197:	e9 39 01 00 00       	jmp    c000b2d5 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	68 c6 0d 02 c0       	push   0xc0020dc6
c000b1a4:	e8 61 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b1a9:	58                   	pop    eax
c000b1aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ac:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1b0:	56                   	push   esi
c000b1b1:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1b5:	52                   	push   edx
c000b1b6:	6a 00                	push   0x0
c000b1b8:	6a 08                	push   0x8
c000b1ba:	53                   	push   ebx
c000b1bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1be:	83 c4 20             	add    esp,0x20
c000b1c1:	85 c0                	test   eax,eax
c000b1c3:	0f 85 fe 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1c9:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1ce:	0f 85 f3 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	68 b2 24 02 c0       	push   0xc00224b2
c000b1dc:	e8 29 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b1e1:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b1e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e7:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1ea:	52                   	push   edx
c000b1eb:	6a 00                	push   0x0
c000b1ed:	6a 08                	push   0x8
c000b1ef:	53                   	push   ebx
c000b1f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1f3:	83 c4 20             	add    esp,0x20
c000b1f6:	85 c0                	test   eax,eax
c000b1f8:	0f 85 c9 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1fe:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b203:	0f 85 be 00 00 00    	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b209:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b20d:	0f 85 14 ff ff ff    	jne    c000b127 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b213:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b217:	0f 85 0a ff ff ff    	jne    c000b127 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b21d:	83 ec 0c             	sub    esp,0xc
c000b220:	68 53 18 02 c0       	push   0xc0021853
c000b225:	e8 e0 f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b22a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b232:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b23a:	83 c4 0c             	add    esp,0xc
c000b23d:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b241:	50                   	push   eax
c000b242:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b246:	50                   	push   eax
c000b247:	53                   	push   ebx
c000b248:	e8 2b 0c 00 00       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b255:	75 70                	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b257:	b8 0f 00 00 00       	mov    eax,0xf
c000b25c:	31 ff                	xor    edi,edi
c000b25e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b262:	89 f8                	mov    eax,edi
c000b264:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b268:	73 5d                	jae    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b26a:	83 ec 0c             	sub    esp,0xc
c000b26d:	68 53 18 02 c0       	push   0xc0021853
c000b272:	e8 93 f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b277:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b27b:	b9 ff 00 00 00       	mov    ecx,0xff
c000b280:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b284:	83 c0 f0             	add    eax,0xfffffff0
c000b287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28b:	83 d2 ff             	adc    edx,0xffffffff
c000b28e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	39 c1                	cmp    ecx,eax
c000b297:	19 d7                	sbb    edi,edx
c000b299:	72 40                	jb     c000b2db <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b29b:	83 ec 0c             	sub    esp,0xc
c000b29e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b2a0:	56                   	push   esi
c000b2a1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b2a5:	52                   	push   edx
c000b2a6:	50                   	push   eax
c000b2a7:	53                   	push   ebx
c000b2a8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b2ab:	83 c4 20             	add    esp,0x20
c000b2ae:	85 c0                	test   eax,eax
c000b2b0:	75 15                	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2b6:	89 c7                	mov    edi,eax
c000b2b8:	c1 ff 1f             	sar    edi,0x1f
c000b2bb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2bf:	75 06                	jne    c000b2c7 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2c1:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2c5:	74 19                	je     c000b2e0 <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b2c7:	83 ec 0c             	sub    esp,0xc
c000b2ca:	53                   	push   ebx
c000b2cb:	e8 04 09 00 00       	call   c000bbd4 <File::close()>
c000b2d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	83 c8 ff             	or     eax,0xffffffff
c000b2de:	eb 31                	jmp    c000b311 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	68 92 2f 02 c0       	push   0xc0022f92
c000b2e8:	e8 1d f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b2ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2f0:	e8 df 08 00 00       	call   c000bbd4 <File::close()>
c000b2f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fd:	c7 04 24 56 18 02 c0 	mov    DWORD PTR [esp],0xc0021856
c000b304:	e8 01 f6 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	b8 01 00 00 00       	mov    eax,0x1
c000b311:	83 c4 3c             	add    esp,0x3c
c000b314:	5b                   	pop    ebx
c000b315:	5e                   	pop    esi
c000b316:	5f                   	pop    edi
c000b317:	5d                   	pop    ebp
c000b318:	c3                   	ret    

c000b319 <KeCreateSymlink(char const*, char const*)>:
c000b319:	55                   	push   ebp
c000b31a:	57                   	push   edi
c000b31b:	56                   	push   esi
c000b31c:	53                   	push   ebx
c000b31d:	83 ec 38             	sub    esp,0x38
c000b320:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b324:	68 14 01 00 00       	push   0x114
c000b329:	e8 a5 c7 ff ff       	call   c0007ad3 <malloc>
c000b32e:	6a 00                	push   0x0
c000b330:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b336:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b33a:	89 c3                	mov    ebx,eax
c000b33c:	50                   	push   eax
c000b33d:	e8 38 07 00 00       	call   c000ba7a <File::File(char const*, Process*, bool)>
c000b342:	83 c4 20             	add    esp,0x20
c000b345:	85 db                	test   ebx,ebx
c000b347:	b8 01 00 00 00       	mov    eax,0x1
c000b34c:	0f 84 fb 00 00 00    	je     c000b44d <KeCreateSymlink(char const*, char const*)+0x134>
c000b352:	52                   	push   edx
c000b353:	52                   	push   edx
c000b354:	6a 12                	push   0x12
c000b356:	53                   	push   ebx
c000b357:	e8 1a 08 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b35c:	83 c4 10             	add    esp,0x10
c000b35f:	85 c0                	test   eax,eax
c000b361:	74 0b                	je     c000b36e <KeCreateSymlink(char const*, char const*)+0x55>
c000b363:	83 ec 0c             	sub    esp,0xc
c000b366:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b368:	53                   	push   ebx
c000b369:	e9 d4 00 00 00       	jmp    c000b442 <KeCreateSymlink(char const*, char const*)+0x129>
c000b36e:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b372:	be 59 18 02 c0       	mov    esi,0xc0021859
c000b377:	b9 09 00 00 00       	mov    ecx,0x9
c000b37c:	fc                   	cld    
c000b37d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b37f:	83 ec 0c             	sub    esp,0xc
c000b382:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b386:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b388:	56                   	push   esi
c000b389:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b38d:	52                   	push   edx
c000b38e:	6a 00                	push   0x0
c000b390:	6a 08                	push   0x8
c000b392:	53                   	push   ebx
c000b393:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b396:	83 c4 20             	add    esp,0x20
c000b399:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b39e:	0f 85 90 00 00 00    	jne    c000b434 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3a4:	85 c0                	test   eax,eax
c000b3a6:	0f 85 88 00 00 00    	jne    c000b434 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ac:	e8 d8 fa ff ff       	call   c000ae89 <KiCreateSymlinkID()>
c000b3b1:	83 ec 0c             	sub    esp,0xc
c000b3b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3be:	56                   	push   esi
c000b3bf:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b3c3:	52                   	push   edx
c000b3c4:	6a 00                	push   0x0
c000b3c6:	6a 08                	push   0x8
c000b3c8:	53                   	push   ebx
c000b3c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3cc:	83 c4 20             	add    esp,0x20
c000b3cf:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3d4:	75 5e                	jne    c000b434 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	75 5a                	jne    c000b434 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3dc:	83 ec 0c             	sub    esp,0xc
c000b3df:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b3e2:	55                   	push   ebp
c000b3e3:	e8 98 51 ff ff       	call   c0000580 <strlen>
c000b3e8:	31 d2                	xor    edx,edx
c000b3ea:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3ed:	55                   	push   ebp
c000b3ee:	52                   	push   edx
c000b3ef:	50                   	push   eax
c000b3f0:	53                   	push   ebx
c000b3f1:	ff d7                	call   edi
c000b3f3:	83 c4 14             	add    esp,0x14
c000b3f6:	55                   	push   ebp
c000b3f7:	89 c6                	mov    esi,eax
c000b3f9:	e8 82 51 ff ff       	call   c0000580 <strlen>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b405:	75 2d                	jne    c000b434 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b407:	85 f6                	test   esi,esi
c000b409:	75 29                	jne    c000b434 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b40b:	50                   	push   eax
c000b40c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b410:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b414:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b418:	e8 d7 fa ff ff       	call   c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>
c000b41d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b420:	e8 af 07 00 00       	call   c000bbd4 <File::close()>
c000b425:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b427:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b42a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	31 c0                	xor    eax,eax
c000b432:	eb 19                	jmp    c000b44d <KeCreateSymlink(char const*, char const*)+0x134>
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	53                   	push   ebx
c000b438:	e8 97 07 00 00       	call   c000bbd4 <File::close()>
c000b43d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b442:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b445:	83 c4 10             	add    esp,0x10
c000b448:	b8 01 00 00 00       	mov    eax,0x1
c000b44d:	83 c4 2c             	add    esp,0x2c
c000b450:	5b                   	pop    ebx
c000b451:	5e                   	pop    esi
c000b452:	5f                   	pop    edi
c000b453:	5d                   	pop    ebp
c000b454:	c3                   	ret    

c000b455 <KeInitialiseSymlinks()>:
c000b455:	57                   	push   edi
c000b456:	56                   	push   esi
c000b457:	53                   	push   ebx
c000b458:	81 ec 14 01 00 00    	sub    esp,0x114
c000b45e:	68 00 20 00 00       	push   0x2000
c000b463:	6a 00                	push   0x0
c000b465:	68 00 74 02 c0       	push   0xc0027400
c000b46a:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b474:	e8 77 50 ff ff       	call   c00004f0 <memset>
c000b479:	5f                   	pop    edi
c000b47a:	58                   	pop    eax
c000b47b:	6a 00                	push   0x0
c000b47d:	68 63 ae 00 c0       	push   0xc000ae63
c000b482:	e8 07 59 00 00       	call   c0010d8e <KeRegisterAtexit(void (*)(void*), void*)>
c000b487:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b48e:	e8 40 c6 ff ff       	call   c0007ad3 <malloc>
c000b493:	83 c4 0c             	add    esp,0xc
c000b496:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b49c:	68 2f 17 02 c0       	push   0xc002172f
c000b4a1:	50                   	push   eax
c000b4a2:	89 c3                	mov    ebx,eax
c000b4a4:	e8 af 06 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000b4a9:	83 c4 10             	add    esp,0x10
c000b4ac:	85 db                	test   ebx,ebx
c000b4ae:	75 10                	jne    c000b4c0 <KeInitialiseSymlinks()+0x6b>
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	68 62 18 02 c0       	push   0xc0021862
c000b4b8:	e8 e2 60 00 00       	call   c001159f <KePanic(char const*)>
c000b4bd:	83 c4 10             	add    esp,0x10
c000b4c0:	83 ec 0c             	sub    esp,0xc
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 71 09 00 00       	call   c000be3a <File::exists()>
c000b4c9:	83 c4 10             	add    esp,0x10
c000b4cc:	84 c0                	test   al,al
c000b4ce:	75 3a                	jne    c000b50a <KeInitialiseSymlinks()+0xb5>
c000b4d0:	56                   	push   esi
c000b4d1:	56                   	push   esi
c000b4d2:	6a 12                	push   0x12
c000b4d4:	53                   	push   ebx
c000b4d5:	e8 9c 06 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	85 c0                	test   eax,eax
c000b4df:	74 10                	je     c000b4f1 <KeInitialiseSymlinks()+0x9c>
c000b4e1:	83 ec 0c             	sub    esp,0xc
c000b4e4:	68 7f 18 02 c0       	push   0xc002187f
c000b4e9:	e8 b1 60 00 00       	call   c001159f <KePanic(char const*)>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	83 ec 0c             	sub    esp,0xc
c000b4f4:	53                   	push   ebx
c000b4f5:	e8 da 06 00 00       	call   c000bbd4 <File::close()>
c000b4fa:	83 c4 10             	add    esp,0x10
c000b4fd:	85 db                	test   ebx,ebx
c000b4ff:	0f 84 a5 00 00 00    	je     c000b5aa <KeInitialiseSymlinks()+0x155>
c000b505:	e9 94 00 00 00       	jmp    c000b59e <KeInitialiseSymlinks()+0x149>
c000b50a:	51                   	push   ecx
c000b50b:	51                   	push   ecx
c000b50c:	6a 01                	push   0x1
c000b50e:	53                   	push   ebx
c000b50f:	e8 62 06 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b514:	83 c4 10             	add    esp,0x10
c000b517:	85 c0                	test   eax,eax
c000b519:	74 10                	je     c000b52b <KeInitialiseSymlinks()+0xd6>
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	68 9c 18 02 c0       	push   0xc002189c
c000b523:	e8 77 60 00 00       	call   c001159f <KePanic(char const*)>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	83 ec 0c             	sub    esp,0xc
c000b52e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b530:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b534:	57                   	push   edi
c000b535:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b539:	56                   	push   esi
c000b53a:	6a 00                	push   0x0
c000b53c:	68 00 01 00 00       	push   0x100
c000b541:	53                   	push   ebx
c000b542:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b545:	83 c4 20             	add    esp,0x20
c000b548:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b550:	75 40                	jne    c000b592 <KeInitialiseSymlinks()+0x13d>
c000b552:	83 ec 0c             	sub    esp,0xc
c000b555:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b557:	57                   	push   edi
c000b558:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b55c:	52                   	push   edx
c000b55d:	6a 00                	push   0x0
c000b55f:	6a 08                	push   0x8
c000b561:	53                   	push   ebx
c000b562:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b565:	83 c4 20             	add    esp,0x20
c000b568:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b56d:	75 23                	jne    c000b592 <KeInitialiseSymlinks()+0x13d>
c000b56f:	52                   	push   edx
c000b570:	52                   	push   edx
c000b571:	56                   	push   esi
c000b572:	68 b7 18 02 c0       	push   0xc00218b7
c000b577:	e8 8e f3 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b57c:	89 f0                	mov    eax,esi
c000b57e:	e8 e5 f8 ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b583:	ba 01 00 00 00       	mov    edx,0x1
c000b588:	0f b7 c0             	movzx  eax,ax
c000b58b:	e8 9e f7 ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b590:	eb 96                	jmp    c000b528 <KeInitialiseSymlinks()+0xd3>
c000b592:	83 ec 0c             	sub    esp,0xc
c000b595:	53                   	push   ebx
c000b596:	e8 39 06 00 00       	call   c000bbd4 <File::close()>
c000b59b:	83 c4 10             	add    esp,0x10
c000b59e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5a0:	83 ec 0c             	sub    esp,0xc
c000b5a3:	53                   	push   ebx
c000b5a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5a7:	83 c4 10             	add    esp,0x10
c000b5aa:	50                   	push   eax
c000b5ab:	50                   	push   eax
c000b5ac:	68 ef 18 02 c0       	push   0xc00218ef
c000b5b1:	68 fd 18 02 c0       	push   0xc00218fd
c000b5b6:	e8 5e fd ff ff       	call   c000b319 <KeCreateSymlink(char const*, char const*)>
c000b5bb:	81 c4 20 01 00 00    	add    esp,0x120
c000b5c1:	5b                   	pop    ebx
c000b5c2:	5e                   	pop    esi
c000b5c3:	5f                   	pop    edi
c000b5c4:	c3                   	ret    
c000b5c5:	90                   	nop

c000b5c6 <File::read(unsigned long long, void*, int*)>:
c000b5c6:	53                   	push   ebx
c000b5c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5d6:	83 f8 19             	cmp    eax,0x19
c000b5d9:	77 35                	ja     c000b610 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5db:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5e2:	85 c0                	test   eax,eax
c000b5e4:	74 2a                	je     c000b610 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5e6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5ec:	85 c0                	test   eax,eax
c000b5ee:	74 20                	je     c000b610 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5f4:	74 21                	je     c000b617 <File::read(unsigned long long, void*, int*)+0x51>
c000b5f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5fc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b602:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b606:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b60a:	5b                   	pop    ebx
c000b60b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b60e:	ff e0                	jmp    eax
c000b610:	b8 0b 00 00 00       	mov    eax,0xb
c000b615:	eb 05                	jmp    c000b61c <File::read(unsigned long long, void*, int*)+0x56>
c000b617:	b8 05 00 00 00       	mov    eax,0x5
c000b61c:	5b                   	pop    ebx
c000b61d:	c3                   	ret    

c000b61e <File::write(unsigned long long, void*, int*)>:
c000b61e:	53                   	push   ebx
c000b61f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b623:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b627:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b62e:	83 f8 19             	cmp    eax,0x19
c000b631:	77 35                	ja     c000b668 <File::write(unsigned long long, void*, int*)+0x4a>
c000b633:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b63a:	85 c0                	test   eax,eax
c000b63c:	74 2a                	je     c000b668 <File::write(unsigned long long, void*, int*)+0x4a>
c000b63e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b644:	85 c0                	test   eax,eax
c000b646:	74 20                	je     c000b668 <File::write(unsigned long long, void*, int*)+0x4a>
c000b648:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b64c:	74 21                	je     c000b66f <File::write(unsigned long long, void*, int*)+0x51>
c000b64e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b650:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b654:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b65a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b662:	5b                   	pop    ebx
c000b663:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b666:	ff e0                	jmp    eax
c000b668:	b8 0b 00 00 00       	mov    eax,0xb
c000b66d:	eb 05                	jmp    c000b674 <File::write(unsigned long long, void*, int*)+0x56>
c000b66f:	b8 05 00 00 00       	mov    eax,0x5
c000b674:	5b                   	pop    ebx
c000b675:	c3                   	ret    

c000b676 <Directory::read(unsigned long long, void*, int*)>:
c000b676:	53                   	push   ebx
c000b677:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b67b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b67f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b686:	83 f8 19             	cmp    eax,0x19
c000b689:	77 35                	ja     c000b6c0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b68b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b692:	85 c0                	test   eax,eax
c000b694:	74 2a                	je     c000b6c0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b696:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b69c:	85 c0                	test   eax,eax
c000b69e:	74 20                	je     c000b6c0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6a4:	74 21                	je     c000b6c7 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6ac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6ba:	5b                   	pop    ebx
c000b6bb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6be:	ff e0                	jmp    eax
c000b6c0:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c5:	eb 05                	jmp    c000b6cc <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6c7:	b8 05 00 00 00       	mov    eax,0x5
c000b6cc:	5b                   	pop    ebx
c000b6cd:	c3                   	ret    

c000b6ce <Directory::write(unsigned long long, void*, int*)>:
c000b6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b6de:	83 fa 19             	cmp    edx,0x19
c000b6e1:	77 18                	ja     c000b6fb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6e3:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6ea:	85 d2                	test   edx,edx
c000b6ec:	74 0d                	je     c000b6fb <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6ee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6f5:	19 c0                	sbb    eax,eax
c000b6f7:	83 e0 0a             	and    eax,0xa
c000b6fa:	40                   	inc    eax
c000b6fb:	c3                   	ret    

c000b6fc <File::isAtty()>:
c000b6fc:	31 c0                	xor    eax,eax
c000b6fe:	c3                   	ret    
c000b6ff:	90                   	nop

c000b700 <Directory::isAtty()>:
c000b700:	31 c0                	xor    eax,eax
c000b702:	c3                   	ret    
c000b703:	90                   	nop

c000b704 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b704:	b8 0a 00 00 00       	mov    eax,0xa
c000b709:	c3                   	ret    

c000b70a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b70a:	b8 0a 00 00 00       	mov    eax,0xa
c000b70f:	c3                   	ret    

c000b710 <Filesystem::allocateSwapfile(char const*, int)>:
c000b710:	31 c0                	xor    eax,eax
c000b712:	31 d2                	xor    edx,edx
c000b714:	c3                   	ret    
c000b715:	90                   	nop

c000b716 <File::~File()>:
c000b716:	83 ec 0c             	sub    esp,0xc
c000b719:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c000b71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b722:	89 10                	mov    DWORD PTR [eax],edx
c000b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b728:	83 ec 0c             	sub    esp,0xc
c000b72b:	50                   	push   eax
c000b72c:	e8 5b dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b731:	83 c4 10             	add    esp,0x10
c000b734:	90                   	nop
c000b735:	83 c4 0c             	add    esp,0xc
c000b738:	c3                   	ret    
c000b739:	90                   	nop

c000b73a <File::~File()>:
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	83 ec 0c             	sub    esp,0xc
c000b740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b744:	e8 cd ff ff ff       	call   c000b716 <File::~File()>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	83 ec 08             	sub    esp,0x8
c000b74f:	68 14 01 00 00       	push   0x114
c000b754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b758:	e8 af f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b75d:	83 c4 10             	add    esp,0x10
c000b760:	83 c4 0c             	add    esp,0xc
c000b763:	c3                   	ret    

c000b764 <Directory::~Directory()>:
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c000b76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b770:	89 10                	mov    DWORD PTR [eax],edx
c000b772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b776:	83 ec 0c             	sub    esp,0xc
c000b779:	50                   	push   eax
c000b77a:	e8 0d dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b77f:	83 c4 10             	add    esp,0x10
c000b782:	90                   	nop
c000b783:	83 c4 0c             	add    esp,0xc
c000b786:	c3                   	ret    
c000b787:	90                   	nop

c000b788 <Directory::~Directory()>:
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	83 ec 0c             	sub    esp,0xc
c000b78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b792:	e8 cd ff ff ff       	call   c000b764 <Directory::~Directory()>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	83 ec 08             	sub    esp,0x8
c000b79d:	68 14 01 00 00       	push   0x114
c000b7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a6:	e8 61 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	83 c4 0c             	add    esp,0xc
c000b7b1:	c3                   	ret    

c000b7b2 <Filesystem::Filesystem()>:
c000b7b2:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000b7b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7bb:	89 10                	mov    DWORD PTR [eax],edx
c000b7bd:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ce:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7d3:	90                   	nop
c000b7d4:	c3                   	ret    
c000b7d5:	90                   	nop

c000b7d6 <Filesystem::~Filesystem()>:
c000b7d6:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000b7db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7df:	89 10                	mov    DWORD PTR [eax],edx
c000b7e1:	90                   	nop
c000b7e2:	c3                   	ret    
c000b7e3:	90                   	nop

c000b7e4 <Filesystem::~Filesystem()>:
c000b7e4:	83 ec 0c             	sub    esp,0xc
c000b7e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7eb:	e8 e6 ff ff ff       	call   c000b7d6 <Filesystem::~Filesystem()>
c000b7f0:	83 c4 04             	add    esp,0x4
c000b7f3:	83 ec 08             	sub    esp,0x8
c000b7f6:	6a 08                	push   0x8
c000b7f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fc:	e8 0b f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b801:	83 c4 10             	add    esp,0x10
c000b804:	83 c4 0c             	add    esp,0xc
c000b807:	c3                   	ret    

c000b808 <Fs::getcwd(Process*, char*, int)>:
c000b808:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b80c:	31 c0                	xor    eax,eax
c000b80e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b812:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b815:	7d 15                	jge    c000b82c <Fs::getcwd(Process*, char*, int)+0x24>
c000b817:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b81b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b822:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b825:	84 c9                	test   cl,cl
c000b827:	74 06                	je     c000b82f <Fs::getcwd(Process*, char*, int)+0x27>
c000b829:	40                   	inc    eax
c000b82a:	eb e2                	jmp    c000b80e <Fs::getcwd(Process*, char*, int)+0x6>
c000b82c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b82f:	31 c0                	xor    eax,eax
c000b831:	c3                   	ret    

c000b832 <Fs::initVFS()>:
c000b832:	83 ec 18             	sub    esp,0x18
c000b835:	6a 08                	push   0x8
c000b837:	e8 97 c2 ff ff       	call   c0007ad3 <malloc>
c000b83c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b83f:	e8 7c e3 00 00       	call   c0019bc0 <FAT::FAT()>
c000b844:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b84b:	e8 83 c2 ff ff       	call   c0007ad3 <malloc>
c000b850:	89 04 24             	mov    DWORD PTR [esp],eax
c000b853:	e8 96 f2 00 00       	call   c001aaee <ISO9660::ISO9660()>
c000b858:	83 c4 1c             	add    esp,0x1c
c000b85b:	c3                   	ret    

c000b85c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b85c:	55                   	push   ebp
c000b85d:	57                   	push   edi
c000b85e:	56                   	push   esi
c000b85f:	53                   	push   ebx
c000b860:	81 ec 20 04 00 00    	sub    esp,0x420
c000b866:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b86d:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b874:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b87b:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b882:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b886:	68 00 04 00 00       	push   0x400
c000b88b:	6a 00                	push   0x0
c000b88d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b891:	57                   	push   edi
c000b892:	e8 59 4c ff ff       	call   c00004f0 <memset>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b89e:	75 0b                	jne    c000b8ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b8a0:	50                   	push   eax
c000b8a1:	50                   	push   eax
c000b8a2:	56                   	push   esi
c000b8a3:	57                   	push   edi
c000b8a4:	e8 a7 4d ff ff       	call   c0000650 <strcpy>
c000b8a9:	eb 45                	jmp    c000b8f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b8ab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b8ae:	83 f8 2f             	cmp    eax,0x2f
c000b8b1:	74 05                	je     c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b8b3:	83 f8 5c             	cmp    eax,0x5c
c000b8b6:	75 19                	jne    c000b8d1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b8b8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b8bb:	3c 60                	cmp    al,0x60
c000b8bd:	7e 03                	jle    c000b8c2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b8bf:	83 e8 20             	sub    eax,0x20
c000b8c2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8c6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8cd:	50                   	push   eax
c000b8ce:	50                   	push   eax
c000b8cf:	eb 18                	jmp    c000b8e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b8d1:	50                   	push   eax
c000b8d2:	50                   	push   eax
c000b8d3:	55                   	push   ebp
c000b8d4:	57                   	push   edi
c000b8d5:	e8 76 4d ff ff       	call   c0000650 <strcpy>
c000b8da:	58                   	pop    eax
c000b8db:	5a                   	pop    edx
c000b8dc:	68 03 29 02 c0       	push   0xc0022903
c000b8e1:	57                   	push   edi
c000b8e2:	e8 89 4f ff ff       	call   c0000870 <strcat>
c000b8e7:	59                   	pop    ecx
c000b8e8:	5d                   	pop    ebp
c000b8e9:	56                   	push   esi
c000b8ea:	57                   	push   edi
c000b8eb:	e8 80 4f ff ff       	call   c0000870 <strcat>
c000b8f0:	83 c4 10             	add    esp,0x10
c000b8f3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b8f7:	3c 60                	cmp    al,0x60
c000b8f9:	7e 03                	jle    c000b8fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b8fb:	83 e8 20             	sub    eax,0x20
c000b8fe:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b902:	be 03 00 00 00       	mov    esi,0x3
c000b907:	88 03                	mov    BYTE PTR [ebx],al
c000b909:	b8 03 00 00 00       	mov    eax,0x3
c000b90e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b915:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b91b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b91f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b924:	89 fa                	mov    edx,edi
c000b926:	0f be ea             	movsx  ebp,dl
c000b929:	85 ed                	test   ebp,ebp
c000b92b:	0f 84 a1 00 00 00    	je     c000b9d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b931:	8d 56 01             	lea    edx,[esi+0x1]
c000b934:	83 fd 2f             	cmp    ebp,0x2f
c000b937:	74 05                	je     c000b93e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b939:	83 fd 5c             	cmp    ebp,0x5c
c000b93c:	75 12                	jne    c000b950 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b93e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b943:	89 c5                	mov    ebp,eax
c000b945:	74 09                	je     c000b950 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b947:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b94b:	40                   	inc    eax
c000b94c:	89 d6                	mov    esi,edx
c000b94e:	eb cf                	jmp    c000b91f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b950:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b955:	89 f9                	mov    ecx,edi
c000b957:	0f be e9             	movsx  ebp,cl
c000b95a:	75 61                	jne    c000b9bd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b95c:	83 fd 2e             	cmp    ebp,0x2e
c000b95f:	75 5c                	jne    c000b9bd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b961:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b966:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b96b:	74 19                	je     c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b96d:	83 fd 2e             	cmp    ebp,0x2e
c000b970:	74 55                	je     c000b9c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b972:	89 f2                	mov    edx,esi
c000b974:	42                   	inc    edx
c000b975:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b97a:	83 f9 2f             	cmp    ecx,0x2f
c000b97d:	74 f5                	je     c000b974 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b97f:	83 f9 5c             	cmp    ecx,0x5c
c000b982:	74 f0                	je     c000b974 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b984:	eb c6                	jmp    c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b986:	83 fd 2e             	cmp    ebp,0x2e
c000b989:	74 3c                	je     c000b9c7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b98b:	83 f8 03             	cmp    eax,0x3
c000b98e:	74 bc                	je     c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b990:	42                   	inc    edx
c000b991:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b996:	83 f9 2f             	cmp    ecx,0x2f
c000b999:	74 f5                	je     c000b990 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b99b:	83 f9 5c             	cmp    ecx,0x5c
c000b99e:	74 f0                	je     c000b990 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b9a0:	48                   	dec    eax
c000b9a1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9a5:	75 06                	jne    c000b9ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9a7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9ab:	eb f3                	jmp    c000b9a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b9ad:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b9b1:	74 07                	je     c000b9ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b9b3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9b7:	48                   	dec    eax
c000b9b8:	eb f3                	jmp    c000b9ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9ba:	40                   	inc    eax
c000b9bb:	eb 8f                	jmp    c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9bd:	83 fd 2f             	cmp    ebp,0x2f
c000b9c0:	74 8a                	je     c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9c2:	83 fd 5c             	cmp    ebp,0x5c
c000b9c5:	74 85                	je     c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9c7:	89 f9                	mov    ecx,edi
c000b9c9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b9cc:	40                   	inc    eax
c000b9cd:	e9 7a ff ff ff       	jmp    c000b94c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9d2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9d6:	83 ec 0c             	sub    esp,0xc
c000b9d9:	53                   	push   ebx
c000b9da:	e8 a1 4b ff ff       	call   c0000580 <strlen>
c000b9df:	83 c4 10             	add    esp,0x10
c000b9e2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b9e7:	74 1c                	je     c000ba05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9e9:	83 ec 0c             	sub    esp,0xc
c000b9ec:	53                   	push   ebx
c000b9ed:	e8 8e 4b ff ff       	call   c0000580 <strlen>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b9fa:	74 09                	je     c000ba05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9fc:	31 ff                	xor    edi,edi
c000b9fe:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000ba03:	eb 4c                	jmp    c000ba51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000ba05:	83 ec 0c             	sub    esp,0xc
c000ba08:	53                   	push   ebx
c000ba09:	e8 72 4b ff ff       	call   c0000580 <strlen>
c000ba0e:	83 c4 10             	add    esp,0x10
c000ba11:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ba16:	74 e4                	je     c000b9fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000ba18:	83 ec 0c             	sub    esp,0xc
c000ba1b:	53                   	push   ebx
c000ba1c:	e8 5f 4b ff ff       	call   c0000580 <strlen>
c000ba21:	83 c4 10             	add    esp,0x10
c000ba24:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba29:	eb ab                	jmp    c000b9d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba2b:	50                   	push   eax
c000ba2c:	50                   	push   eax
c000ba2d:	53                   	push   ebx
c000ba2e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba32:	55                   	push   ebp
c000ba33:	e8 18 4c ff ff       	call   c0000650 <strcpy>
c000ba38:	5a                   	pop    edx
c000ba39:	59                   	pop    ecx
c000ba3a:	53                   	push   ebx
c000ba3b:	55                   	push   ebp
c000ba3c:	e8 bd f6 ff ff       	call   c000b0fe <KeDereferenceSymlink(char const*, char*)>
c000ba41:	83 c4 10             	add    esp,0x10
c000ba44:	48                   	dec    eax
c000ba45:	75 27                	jne    c000ba6e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000ba47:	8d 47 01             	lea    eax,[edi+0x1]
c000ba4a:	83 ff 14             	cmp    edi,0x14
c000ba4d:	74 08                	je     c000ba57 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000ba4f:	89 c7                	mov    edi,eax
c000ba51:	85 f6                	test   esi,esi
c000ba53:	75 d6                	jne    c000ba2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba55:	eb 17                	jmp    c000ba6e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000ba57:	83 ec 0c             	sub    esp,0xc
c000ba5a:	bf 15 00 00 00       	mov    edi,0x15
c000ba5f:	68 1b 19 02 c0       	push   0xc002191b
c000ba64:	e8 36 5b 00 00       	call   c001159f <KePanic(char const*)>
c000ba69:	83 c4 10             	add    esp,0x10
c000ba6c:	eb e3                	jmp    c000ba51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000ba6e:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba74:	5b                   	pop    ebx
c000ba75:	5e                   	pop    esi
c000ba76:	5f                   	pop    edi
c000ba77:	5d                   	pop    ebp
c000ba78:	c3                   	ret    
c000ba79:	90                   	nop

c000ba7a <File::File(char const*, Process*, bool)>:
c000ba7a:	83 ec 1c             	sub    esp,0x1c
c000ba7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba81:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba89:	83 ec 08             	sub    esp,0x8
c000ba8c:	6a 00                	push   0x0
c000ba8e:	50                   	push   eax
c000ba8f:	e8 12 d7 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000ba94:	83 c4 10             	add    esp,0x10
c000ba97:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c000ba9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa0:	89 10                	mov    DWORD PTR [eax],edx
c000baa2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000baa7:	85 c0                	test   eax,eax
c000baa9:	74 0f                	je     c000baba <File::File(char const*, Process*, bool)+0x40>
c000baab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bab0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bab4:	74 04                	je     c000baba <File::File(char const*, Process*, bool)+0x40>
c000bab6:	b0 01                	mov    al,0x1
c000bab8:	eb 02                	jmp    c000babc <File::File(char const*, Process*, bool)+0x42>
c000baba:	b0 00                	mov    al,0x0
c000babc:	0f b6 c0             	movzx  eax,al
c000babf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bac3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bac9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bacd:	83 c2 0d             	add    edx,0xd
c000bad0:	50                   	push   eax
c000bad1:	51                   	push   ecx
c000bad2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bad6:	52                   	push   edx
c000bad7:	e8 80 fd ff ff       	call   c000b85c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000badc:	83 c4 10             	add    esp,0x10
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bae6:	83 e8 41             	sub    eax,0x41
c000bae9:	88 c2                	mov    dl,al
c000baeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baef:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000baf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb01:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb07:	0f b6 c0             	movzx  eax,al
c000bb0a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb11:	85 c0                	test   eax,eax
c000bb13:	74 3e                	je     c000bb53 <File::File(char const*, Process*, bool)+0xd9>
c000bb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb19:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb1f:	0f b6 c0             	movzx  eax,al
c000bb22:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb29:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb2f:	85 c0                	test   eax,eax
c000bb31:	75 20                	jne    c000bb53 <File::File(char const*, Process*, bool)+0xd9>
c000bb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb37:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb3d:	0f b6 c0             	movzx  eax,al
c000bb40:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb47:	83 ec 0c             	sub    esp,0xc
c000bb4a:	50                   	push   eax
c000bb4b:	e8 b0 21 00 00       	call   c000dd00 <LogicalDisk::mount()>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	90                   	nop
c000bb54:	83 c4 1c             	add    esp,0x1c
c000bb57:	c3                   	ret    

c000bb58 <File::File(char const*, Process*)>:
c000bb58:	83 ec 0c             	sub    esp,0xc
c000bb5b:	6a 01                	push   0x1
c000bb5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb69:	e8 0c ff ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	90                   	nop
c000bb72:	83 c4 0c             	add    esp,0xc
c000bb75:	c3                   	ret    

c000bb76 <File::open(FileOpenMode)>:
c000bb76:	53                   	push   ebx
c000bb77:	b8 0b 00 00 00       	mov    eax,0xb
c000bb7c:	83 ec 08             	sub    esp,0x8
c000bb7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb83:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb8a:	83 fa 19             	cmp    edx,0x19
c000bb8d:	77 40                	ja     c000bbcf <File::open(FileOpenMode)+0x59>
c000bb8f:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb96:	85 d2                	test   edx,edx
c000bb98:	74 35                	je     c000bbcf <File::open(FileOpenMode)+0x59>
c000bb9a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bba0:	85 d2                	test   edx,edx
c000bba2:	74 2b                	je     c000bbcf <File::open(FileOpenMode)+0x59>
c000bba4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bba8:	b8 06 00 00 00       	mov    eax,0x6
c000bbad:	75 20                	jne    c000bbcf <File::open(FileOpenMode)+0x59>
c000bbaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbb1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbbb:	51                   	push   ecx
c000bbbc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbbf:	51                   	push   ecx
c000bbc0:	52                   	push   edx
c000bbc1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbc4:	83 c4 10             	add    esp,0x10
c000bbc7:	85 c0                	test   eax,eax
c000bbc9:	75 04                	jne    c000bbcf <File::open(FileOpenMode)+0x59>
c000bbcb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbcf:	83 c4 08             	add    esp,0x8
c000bbd2:	5b                   	pop    ebx
c000bbd3:	c3                   	ret    

c000bbd4 <File::close()>:
c000bbd4:	53                   	push   ebx
c000bbd5:	b8 0b 00 00 00       	mov    eax,0xb
c000bbda:	83 ec 08             	sub    esp,0x8
c000bbdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbe1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe8:	83 f9 19             	cmp    ecx,0x19
c000bbeb:	77 41                	ja     c000bc2e <File::close()+0x5a>
c000bbed:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbf4:	85 db                	test   ebx,ebx
c000bbf6:	74 36                	je     c000bc2e <File::close()+0x5a>
c000bbf8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbff:	74 2d                	je     c000bc2e <File::close()+0x5a>
c000bc01:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc05:	b8 05 00 00 00       	mov    eax,0x5
c000bc0a:	74 22                	je     c000bc2e <File::close()+0x5a>
c000bc0c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc10:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc17:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc1d:	53                   	push   ebx
c000bc1e:	53                   	push   ebx
c000bc1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc21:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc27:	50                   	push   eax
c000bc28:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc2b:	83 c4 10             	add    esp,0x10
c000bc2e:	83 c4 08             	add    esp,0x8
c000bc31:	5b                   	pop    ebx
c000bc32:	c3                   	ret    
c000bc33:	90                   	nop

c000bc34 <File::seek(unsigned long long)>:
c000bc34:	56                   	push   esi
c000bc35:	b8 0b 00 00 00       	mov    eax,0xb
c000bc3a:	53                   	push   ebx
c000bc3b:	51                   	push   ecx
c000bc3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc48:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc4f:	83 fa 19             	cmp    edx,0x19
c000bc52:	77 31                	ja     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc54:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc5b:	85 d2                	test   edx,edx
c000bc5d:	74 26                	je     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc5f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc65:	85 d2                	test   edx,edx
c000bc67:	74 1c                	je     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc69:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc6d:	b8 05 00 00 00       	mov    eax,0x5
c000bc72:	74 11                	je     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc74:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc76:	53                   	push   ebx
c000bc77:	51                   	push   ecx
c000bc78:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc7e:	52                   	push   edx
c000bc7f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc82:	83 c4 10             	add    esp,0x10
c000bc85:	5a                   	pop    edx
c000bc86:	5b                   	pop    ebx
c000bc87:	5e                   	pop    esi
c000bc88:	c3                   	ret    
c000bc89:	90                   	nop

c000bc8a <File::truncate(unsigned long long)>:
c000bc8a:	56                   	push   esi
c000bc8b:	b8 0b 00 00 00       	mov    eax,0xb
c000bc90:	53                   	push   ebx
c000bc91:	51                   	push   ecx
c000bc92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc9a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc9e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bca5:	83 fa 19             	cmp    edx,0x19
c000bca8:	77 31                	ja     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcaa:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcb1:	85 d2                	test   edx,edx
c000bcb3:	74 26                	je     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcb5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcbb:	85 d2                	test   edx,edx
c000bcbd:	74 1c                	je     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcbf:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcc3:	b8 05 00 00 00       	mov    eax,0x5
c000bcc8:	74 11                	je     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcca:	8b 02                	mov    eax,DWORD PTR [edx]
c000bccc:	53                   	push   ebx
c000bccd:	51                   	push   ecx
c000bcce:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcd4:	52                   	push   edx
c000bcd5:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcd8:	83 c4 10             	add    esp,0x10
c000bcdb:	5a                   	pop    edx
c000bcdc:	5b                   	pop    ebx
c000bcdd:	5e                   	pop    esi
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <File::tell(unsigned long long*)>:
c000bce0:	83 ec 0c             	sub    esp,0xc
c000bce3:	b8 0b 00 00 00       	mov    eax,0xb
c000bce8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bcf3:	83 fa 19             	cmp    edx,0x19
c000bcf6:	77 34                	ja     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bcf8:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcff:	85 d2                	test   edx,edx
c000bd01:	74 29                	je     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bd03:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd09:	85 d2                	test   edx,edx
c000bd0b:	74 1f                	je     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bd0d:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd11:	b8 05 00 00 00       	mov    eax,0x5
c000bd16:	74 14                	je     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bd18:	50                   	push   eax
c000bd19:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd1f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd25:	52                   	push   edx
c000bd26:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd29:	83 c4 10             	add    esp,0x10
c000bd2c:	83 c4 0c             	add    esp,0xc
c000bd2f:	c3                   	ret    

c000bd30 <File::rewind()>:
c000bd30:	83 ec 10             	sub    esp,0x10
c000bd33:	6a 00                	push   0x0
c000bd35:	6a 00                	push   0x0
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 f4 fe ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c000bd40:	83 c4 1c             	add    esp,0x1c
c000bd43:	c3                   	ret    

c000bd44 <File::unlink()>:
c000bd44:	83 ec 0c             	sub    esp,0xc
c000bd47:	b8 0b 00 00 00       	mov    eax,0xb
c000bd4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd57:	83 f9 19             	cmp    ecx,0x19
c000bd5a:	77 2f                	ja     c000bd8b <File::unlink()+0x47>
c000bd5c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd63:	85 c9                	test   ecx,ecx
c000bd65:	74 24                	je     c000bd8b <File::unlink()+0x47>
c000bd67:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd6d:	85 c9                	test   ecx,ecx
c000bd6f:	74 1a                	je     c000bd8b <File::unlink()+0x47>
c000bd71:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd75:	b8 06 00 00 00       	mov    eax,0x6
c000bd7a:	75 0f                	jne    c000bd8b <File::unlink()+0x47>
c000bd7c:	50                   	push   eax
c000bd7d:	83 c2 0d             	add    edx,0xd
c000bd80:	50                   	push   eax
c000bd81:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd83:	52                   	push   edx
c000bd84:	51                   	push   ecx
c000bd85:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd88:	83 c4 10             	add    esp,0x10
c000bd8b:	83 c4 0c             	add    esp,0xc
c000bd8e:	c3                   	ret    
c000bd8f:	90                   	nop

c000bd90 <File::rename(char const*)>:
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	b8 0b 00 00 00       	mov    eax,0xb
c000bd98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bda3:	83 f9 19             	cmp    ecx,0x19
c000bda6:	77 32                	ja     c000bdda <File::rename(char const*)+0x4a>
c000bda8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdaf:	85 c9                	test   ecx,ecx
c000bdb1:	74 27                	je     c000bdda <File::rename(char const*)+0x4a>
c000bdb3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdb9:	85 c9                	test   ecx,ecx
c000bdbb:	74 1d                	je     c000bdda <File::rename(char const*)+0x4a>
c000bdbd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdc1:	b8 06 00 00 00       	mov    eax,0x6
c000bdc6:	75 12                	jne    c000bdda <File::rename(char const*)+0x4a>
c000bdc8:	50                   	push   eax
c000bdc9:	83 c2 0d             	add    edx,0xd
c000bdcc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdd2:	52                   	push   edx
c000bdd3:	51                   	push   ecx
c000bdd4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdd7:	83 c4 10             	add    esp,0x10
c000bdda:	83 c4 0c             	add    esp,0xc
c000bddd:	c3                   	ret    

c000bdde <File::chfatattr(unsigned char, unsigned char)>:
c000bdde:	57                   	push   edi
c000bddf:	b8 0b 00 00 00       	mov    eax,0xb
c000bde4:	56                   	push   esi
c000bde5:	53                   	push   ebx
c000bde6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdf2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdf9:	83 f9 19             	cmp    ecx,0x19
c000bdfc:	77 37                	ja     c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdfe:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be05:	85 c9                	test   ecx,ecx
c000be07:	74 2c                	je     c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be09:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be0f:	85 c9                	test   ecx,ecx
c000be11:	74 22                	je     c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be13:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be17:	b8 06 00 00 00       	mov    eax,0x6
c000be1c:	75 17                	jne    c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be1e:	89 f0                	mov    eax,esi
c000be20:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be22:	0f b6 db             	movzx  ebx,bl
c000be25:	0f b6 f0             	movzx  esi,al
c000be28:	83 c2 0d             	add    edx,0xd
c000be2b:	56                   	push   esi
c000be2c:	53                   	push   ebx
c000be2d:	52                   	push   edx
c000be2e:	51                   	push   ecx
c000be2f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	5b                   	pop    ebx
c000be36:	5e                   	pop    esi
c000be37:	5f                   	pop    edi
c000be38:	c3                   	ret    
c000be39:	90                   	nop

c000be3a <File::exists()>:
c000be3a:	83 ec 0c             	sub    esp,0xc
c000be3d:	31 c0                	xor    eax,eax
c000be3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be43:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be4a:	83 f9 19             	cmp    ecx,0x19
c000be4d:	77 24                	ja     c000be73 <File::exists()+0x39>
c000be4f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be56:	85 c9                	test   ecx,ecx
c000be58:	74 19                	je     c000be73 <File::exists()+0x39>
c000be5a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be60:	85 c9                	test   ecx,ecx
c000be62:	74 0f                	je     c000be73 <File::exists()+0x39>
c000be64:	50                   	push   eax
c000be65:	83 c2 0d             	add    edx,0xd
c000be68:	50                   	push   eax
c000be69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be6b:	52                   	push   edx
c000be6c:	51                   	push   ecx
c000be6d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	83 c4 0c             	add    esp,0xc
c000be76:	c3                   	ret    
c000be77:	90                   	nop

c000be78 <File::stat(unsigned long long*, bool*)>:
c000be78:	56                   	push   esi
c000be79:	53                   	push   ebx
c000be7a:	50                   	push   eax
c000be7b:	b8 0b 00 00 00       	mov    eax,0xb
c000be80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be84:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be88:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be93:	83 f9 19             	cmp    ecx,0x19
c000be96:	77 3d                	ja     c000bed5 <File::stat(unsigned long long*, bool*)+0x5d>
c000be98:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be9f:	85 c9                	test   ecx,ecx
c000bea1:	74 32                	je     c000bed5 <File::stat(unsigned long long*, bool*)+0x5d>
c000bea3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bea9:	85 c9                	test   ecx,ecx
c000beab:	74 28                	je     c000bed5 <File::stat(unsigned long long*, bool*)+0x5d>
c000bead:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beb3:	74 13                	je     c000bec8 <File::stat(unsigned long long*, bool*)+0x50>
c000beb5:	83 ec 04             	sub    esp,0x4
c000beb8:	56                   	push   esi
c000beb9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bebf:	51                   	push   ecx
c000bec0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bec3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bec6:	eb 0a                	jmp    c000bed2 <File::stat(unsigned long long*, bool*)+0x5a>
c000bec8:	53                   	push   ebx
c000bec9:	83 c2 0d             	add    edx,0xd
c000becc:	56                   	push   esi
c000becd:	52                   	push   edx
c000bece:	51                   	push   ecx
c000becf:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bed2:	83 c4 10             	add    esp,0x10
c000bed5:	5a                   	pop    edx
c000bed6:	5b                   	pop    ebx
c000bed7:	5e                   	pop    esi
c000bed8:	c3                   	ret    

c000bed9 <Fs::setcwd(Process*, char*)>:
c000bed9:	55                   	push   ebp
c000beda:	57                   	push   edi
c000bedb:	56                   	push   esi
c000bedc:	53                   	push   ebx
c000bedd:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bee3:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000beea:	6a 00                	push   0x0
c000beec:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bef2:	57                   	push   edi
c000bef3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000befa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000befe:	56                   	push   esi
c000beff:	e8 58 f9 ff ff       	call   c000b85c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf04:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf07:	e8 74 46 ff ff       	call   c0000580 <strlen>
c000bf0c:	83 c4 10             	add    esp,0x10
c000bf0f:	83 f8 02             	cmp    eax,0x2
c000bf12:	77 15                	ja     c000bf29 <Fs::setcwd(Process*, char*)+0x50>
c000bf14:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf19:	83 eb 41             	sub    ebx,0x41
c000bf1c:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf23:	85 c0                	test   eax,eax
c000bf25:	75 1c                	jne    c000bf43 <Fs::setcwd(Process*, char*)+0x6a>
c000bf27:	eb 2f                	jmp    c000bf58 <Fs::setcwd(Process*, char*)+0x7f>
c000bf29:	83 ec 0c             	sub    esp,0xc
c000bf2c:	56                   	push   esi
c000bf2d:	e8 4e 46 ff ff       	call   c0000580 <strlen>
c000bf32:	83 c4 10             	add    esp,0x10
c000bf35:	83 f8 03             	cmp    eax,0x3
c000bf38:	75 57                	jne    c000bf91 <Fs::setcwd(Process*, char*)+0xb8>
c000bf3a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf3f:	75 50                	jne    c000bf91 <Fs::setcwd(Process*, char*)+0xb8>
c000bf41:	eb d1                	jmp    c000bf14 <Fs::setcwd(Process*, char*)+0x3b>
c000bf43:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf4a:	75 0c                	jne    c000bf58 <Fs::setcwd(Process*, char*)+0x7f>
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	50                   	push   eax
c000bf50:	e8 ab 1d 00 00       	call   c000dd00 <LogicalDisk::mount()>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	83 fb 19             	cmp    ebx,0x19
c000bf5b:	b8 03 00 00 00       	mov    eax,0x3
c000bf60:	0f 87 c6 00 00 00    	ja     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bf66:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf6d:	b8 05 00 00 00       	mov    eax,0x5
c000bf72:	85 d2                	test   edx,edx
c000bf74:	0f 84 b2 00 00 00    	je     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bf7a:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf81:	b8 06 00 00 00       	mov    eax,0x6
c000bf86:	0f 85 92 00 00 00    	jne    c000c01e <Fs::setcwd(Process*, char*)+0x145>
c000bf8c:	e9 9b 00 00 00       	jmp    c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bf91:	83 ec 0c             	sub    esp,0xc
c000bf94:	68 14 01 00 00       	push   0x114
c000bf99:	e8 35 bb ff ff       	call   c0007ad3 <malloc>
c000bf9e:	83 c4 0c             	add    esp,0xc
c000bfa1:	55                   	push   ebp
c000bfa2:	56                   	push   esi
c000bfa3:	50                   	push   eax
c000bfa4:	89 c3                	mov    ebx,eax
c000bfa6:	e8 ad fb ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c000bfab:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfb0:	83 c4 0c             	add    esp,0xc
c000bfb3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfb7:	50                   	push   eax
c000bfb8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfbc:	50                   	push   eax
c000bfbd:	53                   	push   ebx
c000bfbe:	e8 b5 fe ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	83 f8 02             	cmp    eax,0x2
c000bfc9:	74 27                	je     c000bff2 <Fs::setcwd(Process*, char*)+0x119>
c000bfcb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfd0:	75 1c                	jne    c000bfee <Fs::setcwd(Process*, char*)+0x115>
c000bfd2:	85 db                	test   ebx,ebx
c000bfd4:	b8 02 00 00 00       	mov    eax,0x2
c000bfd9:	74 51                	je     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bfdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfdd:	83 ec 0c             	sub    esp,0xc
c000bfe0:	53                   	push   ebx
c000bfe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfe4:	83 c4 10             	add    esp,0x10
c000bfe7:	b8 02 00 00 00       	mov    eax,0x2
c000bfec:	eb 3e                	jmp    c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bfee:	85 c0                	test   eax,eax
c000bff0:	74 1c                	je     c000c00e <Fs::setcwd(Process*, char*)+0x135>
c000bff2:	85 db                	test   ebx,ebx
c000bff4:	b8 01 00 00 00       	mov    eax,0x1
c000bff9:	74 31                	je     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bffb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bffd:	83 ec 0c             	sub    esp,0xc
c000c000:	53                   	push   ebx
c000c001:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c004:	83 c4 10             	add    esp,0x10
c000c007:	b8 01 00 00 00       	mov    eax,0x1
c000c00c:	eb 1e                	jmp    c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000c00e:	85 db                	test   ebx,ebx
c000c010:	74 0c                	je     c000c01e <Fs::setcwd(Process*, char*)+0x145>
c000c012:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c014:	83 ec 0c             	sub    esp,0xc
c000c017:	53                   	push   ebx
c000c018:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	50                   	push   eax
c000c01f:	50                   	push   eax
c000c020:	56                   	push   esi
c000c021:	57                   	push   edi
c000c022:	e8 29 46 ff ff       	call   c0000650 <strcpy>
c000c027:	83 c4 10             	add    esp,0x10
c000c02a:	31 c0                	xor    eax,eax
c000c02c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c032:	5b                   	pop    ebx
c000c033:	5e                   	pop    esi
c000c034:	5f                   	pop    edi
c000c035:	5d                   	pop    ebp
c000c036:	c3                   	ret    
c000c037:	90                   	nop

c000c038 <Directory::Directory(char const*, Process*)>:
c000c038:	83 ec 0c             	sub    esp,0xc
c000c03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03f:	83 ec 08             	sub    esp,0x8
c000c042:	6a 00                	push   0x0
c000c044:	50                   	push   eax
c000c045:	e8 5c d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c000c052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c056:	89 10                	mov    DWORD PTR [eax],edx
c000c058:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c05d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c061:	0f 95 c0             	setne  al
c000c064:	0f b6 c0             	movzx  eax,al
c000c067:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c06b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c071:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c075:	83 c2 0d             	add    edx,0xd
c000c078:	50                   	push   eax
c000c079:	51                   	push   ecx
c000c07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c07e:	52                   	push   edx
c000c07f:	e8 d8 f7 ff ff       	call   c000b85c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c084:	83 c4 10             	add    esp,0x10
c000c087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c08e:	83 e8 41             	sub    eax,0x41
c000c091:	88 c2                	mov    dl,al
c000c093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c097:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0af:	0f b6 c0             	movzx  eax,al
c000c0b2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0b9:	85 c0                	test   eax,eax
c000c0bb:	74 3e                	je     c000c0fb <Directory::Directory(char const*, Process*)+0xc3>
c000c0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0c7:	0f b6 c0             	movzx  eax,al
c000c0ca:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0d7:	85 c0                	test   eax,eax
c000c0d9:	75 20                	jne    c000c0fb <Directory::Directory(char const*, Process*)+0xc3>
c000c0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0df:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0e5:	0f b6 c0             	movzx  eax,al
c000c0e8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0ef:	83 ec 0c             	sub    esp,0xc
c000c0f2:	50                   	push   eax
c000c0f3:	e8 08 1c 00 00       	call   c000dd00 <LogicalDisk::mount()>
c000c0f8:	83 c4 10             	add    esp,0x10
c000c0fb:	90                   	nop
c000c0fc:	83 c4 0c             	add    esp,0xc
c000c0ff:	c3                   	ret    

c000c100 <Directory::open()>:
c000c100:	53                   	push   ebx
c000c101:	b8 0b 00 00 00       	mov    eax,0xb
c000c106:	83 ec 08             	sub    esp,0x8
c000c109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c10d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c114:	83 fa 19             	cmp    edx,0x19
c000c117:	77 3d                	ja     c000c156 <Directory::open()+0x56>
c000c119:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c120:	85 d2                	test   edx,edx
c000c122:	74 32                	je     c000c156 <Directory::open()+0x56>
c000c124:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c12a:	85 d2                	test   edx,edx
c000c12c:	74 28                	je     c000c156 <Directory::open()+0x56>
c000c12e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c132:	b8 06 00 00 00       	mov    eax,0x6
c000c137:	75 1d                	jne    c000c156 <Directory::open()+0x56>
c000c139:	50                   	push   eax
c000c13a:	8b 02                	mov    eax,DWORD PTR [edx]
c000c13c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c142:	51                   	push   ecx
c000c143:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c146:	51                   	push   ecx
c000c147:	52                   	push   edx
c000c148:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c14b:	83 c4 10             	add    esp,0x10
c000c14e:	85 c0                	test   eax,eax
c000c150:	75 04                	jne    c000c156 <Directory::open()+0x56>
c000c152:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c156:	83 c4 08             	add    esp,0x8
c000c159:	5b                   	pop    ebx
c000c15a:	c3                   	ret    
c000c15b:	90                   	nop

c000c15c <Directory::close()>:
c000c15c:	53                   	push   ebx
c000c15d:	b8 0b 00 00 00       	mov    eax,0xb
c000c162:	83 ec 08             	sub    esp,0x8
c000c165:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c169:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c170:	83 f9 19             	cmp    ecx,0x19
c000c173:	77 41                	ja     c000c1b6 <Directory::close()+0x5a>
c000c175:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c17c:	85 db                	test   ebx,ebx
c000c17e:	74 36                	je     c000c1b6 <Directory::close()+0x5a>
c000c180:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c187:	74 2d                	je     c000c1b6 <Directory::close()+0x5a>
c000c189:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c18d:	b8 05 00 00 00       	mov    eax,0x5
c000c192:	74 22                	je     c000c1b6 <Directory::close()+0x5a>
c000c194:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c198:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c19f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1a5:	53                   	push   ebx
c000c1a6:	53                   	push   ebx
c000c1a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1a9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1af:	50                   	push   eax
c000c1b0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1b3:	83 c4 10             	add    esp,0x10
c000c1b6:	83 c4 08             	add    esp,0x8
c000c1b9:	5b                   	pop    ebx
c000c1ba:	c3                   	ret    
c000c1bb:	90                   	nop

c000c1bc <Directory::unlink()>:
c000c1bc:	83 ec 0c             	sub    esp,0xc
c000c1bf:	b8 0b 00 00 00       	mov    eax,0xb
c000c1c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1cf:	83 f9 19             	cmp    ecx,0x19
c000c1d2:	77 2f                	ja     c000c203 <Directory::unlink()+0x47>
c000c1d4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1db:	85 c9                	test   ecx,ecx
c000c1dd:	74 24                	je     c000c203 <Directory::unlink()+0x47>
c000c1df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1e5:	85 c9                	test   ecx,ecx
c000c1e7:	74 1a                	je     c000c203 <Directory::unlink()+0x47>
c000c1e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1ed:	b8 06 00 00 00       	mov    eax,0x6
c000c1f2:	75 0f                	jne    c000c203 <Directory::unlink()+0x47>
c000c1f4:	50                   	push   eax
c000c1f5:	83 c2 0d             	add    edx,0xd
c000c1f8:	50                   	push   eax
c000c1f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1fb:	52                   	push   edx
c000c1fc:	51                   	push   ecx
c000c1fd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c200:	83 c4 10             	add    esp,0x10
c000c203:	83 c4 0c             	add    esp,0xc
c000c206:	c3                   	ret    
c000c207:	90                   	nop

c000c208 <Directory::rename(char const*)>:
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	b8 0b 00 00 00       	mov    eax,0xb
c000c210:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c214:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c21b:	83 f9 19             	cmp    ecx,0x19
c000c21e:	77 32                	ja     c000c252 <Directory::rename(char const*)+0x4a>
c000c220:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c227:	85 c9                	test   ecx,ecx
c000c229:	74 27                	je     c000c252 <Directory::rename(char const*)+0x4a>
c000c22b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c231:	85 c9                	test   ecx,ecx
c000c233:	74 1d                	je     c000c252 <Directory::rename(char const*)+0x4a>
c000c235:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c239:	b8 06 00 00 00       	mov    eax,0x6
c000c23e:	75 12                	jne    c000c252 <Directory::rename(char const*)+0x4a>
c000c240:	50                   	push   eax
c000c241:	83 c2 0d             	add    edx,0xd
c000c244:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c246:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c24a:	52                   	push   edx
c000c24b:	51                   	push   ecx
c000c24c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	83 c4 0c             	add    esp,0xc
c000c255:	c3                   	ret    

c000c256 <Directory::exists()>:
c000c256:	83 ec 0c             	sub    esp,0xc
c000c259:	31 c0                	xor    eax,eax
c000c25b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c25f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c266:	83 f9 19             	cmp    ecx,0x19
c000c269:	77 24                	ja     c000c28f <Directory::exists()+0x39>
c000c26b:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c272:	85 c9                	test   ecx,ecx
c000c274:	74 19                	je     c000c28f <Directory::exists()+0x39>
c000c276:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c27c:	85 c9                	test   ecx,ecx
c000c27e:	74 0f                	je     c000c28f <Directory::exists()+0x39>
c000c280:	50                   	push   eax
c000c281:	83 c2 0d             	add    edx,0xd
c000c284:	50                   	push   eax
c000c285:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c287:	52                   	push   edx
c000c288:	51                   	push   ecx
c000c289:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	83 c4 0c             	add    esp,0xc
c000c292:	c3                   	ret    
c000c293:	90                   	nop

c000c294 <Directory::read(dirent*)>:
c000c294:	83 ec 1c             	sub    esp,0x1c
c000c297:	b8 0b 00 00 00       	mov    eax,0xb
c000c29c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2a7:	83 f9 19             	cmp    ecx,0x19
c000c2aa:	77 30                	ja     c000c2dc <Directory::read(dirent*)+0x48>
c000c2ac:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2b3:	85 c9                	test   ecx,ecx
c000c2b5:	74 25                	je     c000c2dc <Directory::read(dirent*)+0x48>
c000c2b7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2be:	74 1c                	je     c000c2dc <Directory::read(dirent*)+0x48>
c000c2c0:	83 ec 0c             	sub    esp,0xc
c000c2c3:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2c5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2c9:	51                   	push   ecx
c000c2ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ce:	6a 00                	push   0x0
c000c2d0:	68 10 01 00 00       	push   0x110
c000c2d5:	52                   	push   edx
c000c2d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2d9:	83 c4 20             	add    esp,0x20
c000c2dc:	83 c4 1c             	add    esp,0x1c
c000c2df:	c3                   	ret    

c000c2e0 <Directory::create()>:
c000c2e0:	83 ec 0c             	sub    esp,0xc
c000c2e3:	b8 0b 00 00 00       	mov    eax,0xb
c000c2e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2f3:	83 f9 19             	cmp    ecx,0x19
c000c2f6:	77 2f                	ja     c000c327 <Directory::create()+0x47>
c000c2f8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2ff:	85 c9                	test   ecx,ecx
c000c301:	74 24                	je     c000c327 <Directory::create()+0x47>
c000c303:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c309:	85 c9                	test   ecx,ecx
c000c30b:	74 1a                	je     c000c327 <Directory::create()+0x47>
c000c30d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c311:	b8 06 00 00 00       	mov    eax,0x6
c000c316:	75 0f                	jne    c000c327 <Directory::create()+0x47>
c000c318:	50                   	push   eax
c000c319:	83 c2 0d             	add    edx,0xd
c000c31c:	50                   	push   eax
c000c31d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c31f:	52                   	push   edx
c000c320:	51                   	push   ecx
c000c321:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c324:	83 c4 10             	add    esp,0x10
c000c327:	83 c4 0c             	add    esp,0xc
c000c32a:	c3                   	ret    
c000c32b:	90                   	nop

c000c32c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c32c:	b8 0a 00 00 00       	mov    eax,0xa
c000c331:	c3                   	ret    
c000c332:	66 90                	xchg   ax,ax

c000c334 <Bus::Bus(char const*)>:
c000c334:	83 ec 0c             	sub    esp,0xc
c000c337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33b:	83 ec 08             	sub    esp,0x8
c000c33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c342:	50                   	push   eax
c000c343:	e8 28 08 00 00       	call   c000cb70 <Device::Device(char const*)>
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	ba f0 19 02 c0       	mov    edx,0xc00219f0
c000c350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c354:	89 10                	mov    DWORD PTR [eax],edx
c000c356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c364:	90                   	nop
c000c365:	83 c4 0c             	add    esp,0xc
c000c368:	c3                   	ret    
c000c369:	90                   	nop
c000c36a:	66 90                	xchg   ax,ax

c000c36c <Bus::~Bus()>:
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	ba f0 19 02 c0       	mov    edx,0xc00219f0
c000c374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c378:	89 10                	mov    DWORD PTR [eax],edx
c000c37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37e:	83 ec 0c             	sub    esp,0xc
c000c381:	50                   	push   eax
c000c382:	e8 53 05 00 00       	call   c000c8da <Device::~Device()>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	90                   	nop
c000c38b:	83 c4 0c             	add    esp,0xc
c000c38e:	c3                   	ret    
c000c38f:	90                   	nop

c000c390 <Bus::~Bus()>:
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	83 ec 0c             	sub    esp,0xc
c000c396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c39a:	e8 cd ff ff ff       	call   c000c36c <Bus::~Bus()>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	83 ec 08             	sub    esp,0x8
c000c3a5:	68 58 01 00 00       	push   0x158
c000c3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ae:	e8 59 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c3b3:	83 c4 10             	add    esp,0x10
c000c3b6:	83 c4 0c             	add    esp,0xc
c000c3b9:	c3                   	ret    

c000c3ba <beepThread(void*)>:
c000c3ba:	83 ec 0c             	sub    esp,0xc
c000c3bd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3c6:	48                   	dec    eax
c000c3c7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3cc:	75 01                	jne    c000c3cf <beepThread(void*)+0x15>
c000c3ce:	fb                   	sti    
c000c3cf:	6b c2 0a             	imul   eax,edx,0xa
c000c3d2:	83 ec 0c             	sub    esp,0xc
c000c3d5:	50                   	push   eax
c000c3d6:	e8 8d 9f 00 00       	call   c0016368 <milliTenthSleep(unsigned int)>
c000c3db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3e2:	e8 da be 00 00       	call   c00182c1 <HalMakeBeep(int)>
c000c3e7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3ef:	83 c4 1c             	add    esp,0x1c
c000c3f2:	e9 55 9e 00 00       	jmp    c001624c <blockTask(TaskState)>

c000c3f7 <Krnl::beep(int, int, bool)>:
c000c3f7:	56                   	push   esi
c000c3f8:	53                   	push   ebx
c000c3f9:	83 ec 10             	sub    esp,0x10
c000c3fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c400:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c408:	e8 b4 be 00 00       	call   c00182c1 <HalMakeBeep(int)>
c000c40d:	89 f0                	mov    eax,esi
c000c40f:	83 c4 10             	add    esp,0x10
c000c412:	84 c0                	test   al,al
c000c414:	74 1e                	je     c000c434 <Krnl::beep(int, int, bool)+0x3d>
c000c416:	6b db 0a             	imul   ebx,ebx,0xa
c000c419:	83 ec 0c             	sub    esp,0xc
c000c41c:	53                   	push   ebx
c000c41d:	e8 46 9f 00 00       	call   c0016368 <milliTenthSleep(unsigned int)>
c000c422:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c42a:	83 c4 14             	add    esp,0x14
c000c42d:	5b                   	pop    ebx
c000c42e:	5e                   	pop    esi
c000c42f:	e9 8d be 00 00       	jmp    c00182c1 <HalMakeBeep(int)>
c000c434:	68 e6 00 00 00       	push   0xe6
c000c439:	53                   	push   ebx
c000c43a:	68 ba c3 00 c0       	push   0xc000c3ba
c000c43f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c445:	e8 b6 99 00 00       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c000c44a:	83 c4 14             	add    esp,0x14
c000c44d:	5b                   	pop    ebx
c000c44e:	5e                   	pop    esi
c000c44f:	c3                   	ret    

c000c450 <User::loadClockSettings(int)>:
c000c450:	53                   	push   ebx
c000c451:	83 ec 14             	sub    esp,0x14
c000c454:	68 14 01 00 00       	push   0x114
c000c459:	e8 75 b6 ff ff       	call   c0007ad3 <malloc>
c000c45e:	83 c4 0c             	add    esp,0xc
c000c461:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c467:	68 14 1a 02 c0       	push   0xc0021a14
c000c46c:	50                   	push   eax
c000c46d:	89 c3                	mov    ebx,eax
c000c46f:	e8 e4 f6 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c000c474:	58                   	pop    eax
c000c475:	5a                   	pop    edx
c000c476:	6a 01                	push   0x1
c000c478:	53                   	push   ebx
c000c479:	e8 f8 f6 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c000c47e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c481:	e8 4e f7 ff ff       	call   c000bbd4 <File::close()>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	85 db                	test   ebx,ebx
c000c48b:	74 0f                	je     c000c49c <User::loadClockSettings(int)+0x4c>
c000c48d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c48f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c493:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c496:	83 c4 08             	add    esp,0x8
c000c499:	5b                   	pop    ebx
c000c49a:	ff e0                	jmp    eax
c000c49c:	83 c4 08             	add    esp,0x8
c000c49f:	5b                   	pop    ebx
c000c4a0:	c3                   	ret    
c000c4a1:	90                   	nop

c000c4a2 <Clock::Clock(char const*)>:
c000c4a2:	83 ec 0c             	sub    esp,0xc
c000c4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a9:	83 ec 08             	sub    esp,0x8
c000c4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b0:	50                   	push   eax
c000c4b1:	e8 ba 06 00 00       	call   c000cb70 <Device::Device(char const*)>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	ba 3c 1a 02 c0       	mov    edx,0xc0021a3c
c000c4be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c2:	89 10                	mov    DWORD PTR [eax],edx
c000c4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4d2:	90                   	nop
c000c4d3:	83 c4 0c             	add    esp,0xc
c000c4d6:	c3                   	ret    
c000c4d7:	90                   	nop

c000c4d8 <Clock::~Clock()>:
c000c4d8:	83 ec 0c             	sub    esp,0xc
c000c4db:	ba 3c 1a 02 c0       	mov    edx,0xc0021a3c
c000c4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e4:	89 10                	mov    DWORD PTR [eax],edx
c000c4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ea:	83 ec 0c             	sub    esp,0xc
c000c4ed:	50                   	push   eax
c000c4ee:	e8 e7 03 00 00       	call   c000c8da <Device::~Device()>
c000c4f3:	83 c4 10             	add    esp,0x10
c000c4f6:	90                   	nop
c000c4f7:	83 c4 0c             	add    esp,0xc
c000c4fa:	c3                   	ret    
c000c4fb:	90                   	nop

c000c4fc <Clock::~Clock()>:
c000c4fc:	83 ec 0c             	sub    esp,0xc
c000c4ff:	83 ec 0c             	sub    esp,0xc
c000c502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c506:	e8 cd ff ff ff       	call   c000c4d8 <Clock::~Clock()>
c000c50b:	83 c4 10             	add    esp,0x10
c000c50e:	83 ec 08             	sub    esp,0x8
c000c511:	68 58 01 00 00       	push   0x158
c000c516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51a:	e8 ed e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	83 c4 0c             	add    esp,0xc
c000c525:	c3                   	ret    

c000c526 <Clock::timeInSecondsLocal()>:
c000c526:	53                   	push   ebx
c000c527:	83 ec 14             	sub    esp,0x14
c000c52a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c52e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c530:	50                   	push   eax
c000c531:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c534:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c53b:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c541:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c547:	89 cb                	mov    ebx,ecx
c000c549:	c1 fb 1f             	sar    ebx,0x1f
c000c54c:	01 c8                	add    eax,ecx
c000c54e:	11 da                	adc    edx,ebx
c000c550:	83 c4 10             	add    esp,0x10
c000c553:	31 c9                	xor    ecx,ecx
c000c555:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c55c:	74 05                	je     c000c563 <Clock::timeInSecondsLocal()+0x3d>
c000c55e:	b9 08 07 00 00       	mov    ecx,0x708
c000c563:	31 db                	xor    ebx,ebx
c000c565:	01 c8                	add    eax,ecx
c000c567:	11 da                	adc    edx,ebx
c000c569:	83 c4 08             	add    esp,0x8
c000c56c:	5b                   	pop    ebx
c000c56d:	c3                   	ret    

c000c56e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c56e:	57                   	push   edi
c000c56f:	56                   	push   esi
c000c570:	53                   	push   ebx
c000c571:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c579:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c57d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c57f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c582:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c589:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c58f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c595:	99                   	cdq    
c000c596:	29 c6                	sub    esi,eax
c000c598:	19 d7                	sbb    edi,edx
c000c59a:	89 f0                	mov    eax,esi
c000c59c:	31 f6                	xor    esi,esi
c000c59e:	89 fa                	mov    edx,edi
c000c5a0:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5a7:	74 05                	je     c000c5ae <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5a9:	be 08 07 00 00       	mov    esi,0x708
c000c5ae:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5b2:	31 ff                	xor    edi,edi
c000c5b4:	29 f0                	sub    eax,esi
c000c5b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5ba:	19 fa                	sbb    edx,edi
c000c5bc:	89 d8                	mov    eax,ebx
c000c5be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5c2:	5b                   	pop    ebx
c000c5c3:	5e                   	pop    esi
c000c5c4:	5f                   	pop    edi
c000c5c5:	ff e0                	jmp    eax

c000c5c7 <datetimeToSeconds(datetime_t)>:
c000c5c7:	55                   	push   ebp
c000c5c8:	57                   	push   edi
c000c5c9:	56                   	push   esi
c000c5ca:	53                   	push   ebx
c000c5cb:	83 ec 0c             	sub    esp,0xc
c000c5ce:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5d6:	89 f7                	mov    edi,esi
c000c5d8:	89 f0                	mov    eax,esi
c000c5da:	0f b6 cf             	movzx  ecx,bh
c000c5dd:	0f b6 c4             	movzx  eax,ah
c000c5e0:	c1 ef 10             	shr    edi,0x10
c000c5e3:	89 da                	mov    edx,ebx
c000c5e5:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c5e8:	89 f9                	mov    ecx,edi
c000c5ea:	0f b6 f9             	movzx  edi,cl
c000c5ed:	89 f1                	mov    ecx,esi
c000c5ef:	6b c0 3c             	imul   eax,eax,0x3c
c000c5f2:	0f b6 f1             	movzx  esi,cl
c000c5f5:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c5fb:	0f b6 db             	movzx  ebx,bl
c000c5fe:	c1 ea 10             	shr    edx,0x10
c000c601:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c607:	01 f8                	add    eax,edi
c000c609:	01 f0                	add    eax,esi
c000c60b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c60e:	c1 f8 1f             	sar    eax,0x1f
c000c611:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c615:	89 e8                	mov    eax,ebp
c000c617:	0f b6 c0             	movzx  eax,al
c000c61a:	8b 0c 85 80 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde580]
c000c621:	83 f8 01             	cmp    eax,0x1
c000c624:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c628:	0f b7 da             	movzx  ebx,dx
c000c62b:	76 27                	jbe    c000c654 <datetimeToSeconds(datetime_t)+0x8d>
c000c62d:	80 e2 03             	and    dl,0x3
c000c630:	75 22                	jne    c000c654 <datetimeToSeconds(datetime_t)+0x8d>
c000c632:	31 d2                	xor    edx,edx
c000c634:	be 64 00 00 00       	mov    esi,0x64
c000c639:	89 d8                	mov    eax,ebx
c000c63b:	f7 f6                	div    esi
c000c63d:	85 d2                	test   edx,edx
c000c63f:	75 12                	jne    c000c653 <datetimeToSeconds(datetime_t)+0x8c>
c000c641:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c647:	be 90 01 00 00       	mov    esi,0x190
c000c64c:	99                   	cdq    
c000c64d:	f7 fe                	idiv   esi
c000c64f:	85 d2                	test   edx,edx
c000c651:	75 01                	jne    c000c654 <datetimeToSeconds(datetime_t)+0x8d>
c000c653:	41                   	inc    ecx
c000c654:	83 fb 46             	cmp    ebx,0x46
c000c657:	76 48                	jbe    c000c6a1 <datetimeToSeconds(datetime_t)+0xda>
c000c659:	be 46 00 00 00       	mov    esi,0x46
c000c65e:	bf 64 00 00 00       	mov    edi,0x64
c000c663:	bd 90 01 00 00       	mov    ebp,0x190
c000c668:	f7 c6 03 00 00 00    	test   esi,0x3
c000c66e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c673:	75 23                	jne    c000c698 <datetimeToSeconds(datetime_t)+0xd1>
c000c675:	89 f0                	mov    eax,esi
c000c677:	99                   	cdq    
c000c678:	f7 ff                	idiv   edi
c000c67a:	b8 6e 01 00 00       	mov    eax,0x16e
c000c67f:	85 d2                	test   edx,edx
c000c681:	75 15                	jne    c000c698 <datetimeToSeconds(datetime_t)+0xd1>
c000c683:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c689:	99                   	cdq    
c000c68a:	f7 fd                	idiv   ebp
c000c68c:	83 fa 01             	cmp    edx,0x1
c000c68f:	19 c0                	sbb    eax,eax
c000c691:	f7 d0                	not    eax
c000c693:	05 6e 01 00 00       	add    eax,0x16e
c000c698:	46                   	inc    esi
c000c699:	01 c1                	add    ecx,eax
c000c69b:	39 de                	cmp    esi,ebx
c000c69d:	7c c9                	jl     c000c668 <datetimeToSeconds(datetime_t)+0xa1>
c000c69f:	eb 34                	jmp    c000c6d5 <datetimeToSeconds(datetime_t)+0x10e>
c000c6a1:	74 32                	je     c000c6d5 <datetimeToSeconds(datetime_t)+0x10e>
c000c6a3:	b8 45 00 00 00       	mov    eax,0x45
c000c6a8:	89 c2                	mov    edx,eax
c000c6aa:	83 e2 03             	and    edx,0x3
c000c6ad:	39 d8                	cmp    eax,ebx
c000c6af:	7e 0f                	jle    c000c6c0 <datetimeToSeconds(datetime_t)+0xf9>
c000c6b1:	83 fa 01             	cmp    edx,0x1
c000c6b4:	19 d2                	sbb    edx,edx
c000c6b6:	48                   	dec    eax
c000c6b7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6be:	eb e8                	jmp    c000c6a8 <datetimeToSeconds(datetime_t)+0xe1>
c000c6c0:	85 d2                	test   edx,edx
c000c6c2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6c7:	75 0a                	jne    c000c6d3 <datetimeToSeconds(datetime_t)+0x10c>
c000c6c9:	83 fb 01             	cmp    ebx,0x1
c000c6cc:	19 c0                	sbb    eax,eax
c000c6ce:	05 6e 01 00 00       	add    eax,0x16e
c000c6d3:	29 c1                	sub    ecx,eax
c000c6d5:	b8 80 51 01 00       	mov    eax,0x15180
c000c6da:	f7 e9                	imul   ecx
c000c6dc:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6df:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6e3:	83 c4 0c             	add    esp,0xc
c000c6e6:	5b                   	pop    ebx
c000c6e7:	5e                   	pop    esi
c000c6e8:	5f                   	pop    edi
c000c6e9:	5d                   	pop    ebp
c000c6ea:	c3                   	ret    
c000c6eb:	90                   	nop

c000c6ec <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6ec:	57                   	push   edi
c000c6ed:	56                   	push   esi
c000c6ee:	53                   	push   ebx
c000c6ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6f3:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6f5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c700:	e8 c2 fe ff ff       	call   c000c5c7 <datetimeToSeconds(datetime_t)>
c000c705:	59                   	pop    ecx
c000c706:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c70d:	5b                   	pop    ebx
c000c70e:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c714:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c71a:	89 cb                	mov    ebx,ecx
c000c71c:	c1 fb 1f             	sar    ebx,0x1f
c000c71f:	29 c8                	sub    eax,ecx
c000c721:	19 da                	sbb    edx,ebx
c000c723:	31 c9                	xor    ecx,ecx
c000c725:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c72c:	74 05                	je     c000c733 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c72e:	b9 08 07 00 00       	mov    ecx,0x708
c000c733:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c737:	31 db                	xor    ebx,ebx
c000c739:	29 c8                	sub    eax,ecx
c000c73b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c73f:	19 da                	sbb    edx,ebx
c000c741:	89 f8                	mov    eax,edi
c000c743:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c747:	5b                   	pop    ebx
c000c748:	5e                   	pop    esi
c000c749:	5f                   	pop    edi
c000c74a:	ff e0                	jmp    eax

c000c74c <secondsToDatetime(unsigned long long)>:
c000c74c:	55                   	push   ebp
c000c74d:	57                   	push   edi
c000c74e:	56                   	push   esi
c000c74f:	53                   	push   ebx
c000c750:	83 ec 1c             	sub    esp,0x1c
c000c753:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c757:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c75b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c75f:	6a 00                	push   0x0
c000c761:	68 80 51 01 00       	push   0x15180
c000c766:	55                   	push   ebp
c000c767:	57                   	push   edi
c000c768:	e8 a3 2f 01 00       	call   c001f710 <__udivdi3>
c000c76d:	83 c4 10             	add    esp,0x10
c000c770:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c774:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c77a:	6a 00                	push   0x0
c000c77c:	68 80 51 01 00       	push   0x15180
c000c781:	55                   	push   ebp
c000c782:	57                   	push   edi
c000c783:	bf 10 0e 00 00       	mov    edi,0xe10
c000c788:	e8 83 30 01 00       	call   c001f810 <__umoddi3>
c000c78d:	83 c4 10             	add    esp,0x10
c000c790:	99                   	cdq    
c000c791:	f7 ff                	idiv   edi
c000c793:	bf 3c 00 00 00       	mov    edi,0x3c
c000c798:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c79b:	89 d0                	mov    eax,edx
c000c79d:	99                   	cdq    
c000c79e:	f7 ff                	idiv   edi
c000c7a0:	85 db                	test   ebx,ebx
c000c7a2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7a5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7a8:	79 11                	jns    c000c7bb <secondsToDatetime(unsigned long long)+0x6f>
c000c7aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7ae:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7b4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7b9:	eb 07                	jmp    c000c7c2 <secondsToDatetime(unsigned long long)+0x76>
c000c7bb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7c0:	89 d8                	mov    eax,ebx
c000c7c2:	99                   	cdq    
c000c7c3:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7c8:	f7 f9                	idiv   ecx
c000c7ca:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7cf:	31 d2                	xor    edx,edx
c000c7d1:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7da:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7e2:	01 c3                	add    ebx,eax
c000c7e4:	89 d8                	mov    eax,ebx
c000c7e6:	f7 f1                	div    ecx
c000c7e8:	31 d2                	xor    edx,edx
c000c7ea:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7ed:	89 d8                	mov    eax,ebx
c000c7ef:	f7 f7                	div    edi
c000c7f1:	31 d2                	xor    edx,edx
c000c7f3:	29 c1                	sub    ecx,eax
c000c7f5:	89 d8                	mov    eax,ebx
c000c7f7:	f7 f5                	div    ebp
c000c7f9:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7fe:	31 d2                	xor    edx,edx
c000c800:	29 c1                	sub    ecx,eax
c000c802:	89 c8                	mov    eax,ecx
c000c804:	f7 f5                	div    ebp
c000c806:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c80b:	31 d2                	xor    edx,edx
c000c80d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c811:	89 c8                	mov    eax,ecx
c000c813:	f7 f5                	div    ebp
c000c815:	31 d2                	xor    edx,edx
c000c817:	01 c3                	add    ebx,eax
c000c819:	89 c8                	mov    eax,ecx
c000c81b:	f7 f7                	div    edi
c000c81d:	bf 99 00 00 00       	mov    edi,0x99
c000c822:	31 d2                	xor    edx,edx
c000c824:	29 c3                	sub    ebx,eax
c000c826:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c82e:	29 c3                	sub    ebx,eax
c000c830:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c833:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c836:	83 c1 02             	add    ecx,0x2
c000c839:	89 c8                	mov    eax,ecx
c000c83b:	bb 05 00 00 00       	mov    ebx,0x5
c000c840:	f7 f7                	div    edi
c000c842:	31 d2                	xor    edx,edx
c000c844:	89 c7                	mov    edi,eax
c000c846:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c84c:	83 c0 02             	add    eax,0x2
c000c84f:	f7 f3                	div    ebx
c000c851:	89 eb                	mov    ebx,ebp
c000c853:	29 c3                	sub    ebx,eax
c000c855:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c85b:	88 1e                	mov    BYTE PTR [esi],bl
c000c85d:	19 c0                	sbb    eax,eax
c000c85f:	31 d2                	xor    edx,edx
c000c861:	83 e0 0c             	and    eax,0xc
c000c864:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c868:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c870:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c874:	83 f9 01             	cmp    ecx,0x1
c000c877:	0f 96 c2             	setbe  dl
c000c87a:	41                   	inc    ecx
c000c87b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c87e:	01 d0                	add    eax,edx
c000c880:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c884:	83 c4 1c             	add    esp,0x1c
c000c887:	89 f0                	mov    eax,esi
c000c889:	5b                   	pop    ebx
c000c88a:	5e                   	pop    esi
c000c88b:	5f                   	pop    edi
c000c88c:	5d                   	pop    ebp
c000c88d:	c2 04 00             	ret    0x4

c000c890 <Clock::timeInDatetimeLocal()>:
c000c890:	53                   	push   ebx
c000c891:	83 ec 14             	sub    esp,0x14
c000c894:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c898:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c89c:	e8 85 fc ff ff       	call   c000c526 <Clock::timeInSecondsLocal()>
c000c8a1:	83 c4 0c             	add    esp,0xc
c000c8a4:	52                   	push   edx
c000c8a5:	50                   	push   eax
c000c8a6:	53                   	push   ebx
c000c8a7:	e8 a0 fe ff ff       	call   c000c74c <secondsToDatetime(unsigned long long)>
c000c8ac:	89 d8                	mov    eax,ebx
c000c8ae:	83 c4 14             	add    esp,0x14
c000c8b1:	5b                   	pop    ebx
c000c8b2:	c2 04 00             	ret    0x4
c000c8b5:	90                   	nop

c000c8b6 <Device::hibernate()>:
c000c8b6:	c3                   	ret    
c000c8b7:	90                   	nop

c000c8b8 <Device::wake()>:
c000c8b8:	c3                   	ret    
c000c8b9:	90                   	nop

c000c8ba <Device::detect()>:
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <Device::disableLegacy()>:
c000c8bc:	c3                   	ret    
c000c8bd:	90                   	nop

c000c8be <Device::powerSaving(PowerSavingLevel)>:
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <DriverlessDevice::close(int, int, void*)>:
c000c8c0:	31 c0                	xor    eax,eax
c000c8c2:	c3                   	ret    
c000c8c3:	90                   	nop

c000c8c4 <DriverlessDevice::detect()>:
c000c8c4:	c3                   	ret    
c000c8c5:	90                   	nop

c000c8c6 <DriverlessDevice::open(int, int, void*)>:
c000c8c6:	83 ec 18             	sub    esp,0x18
c000c8c9:	68 b0 1a 02 c0       	push   0xc0021ab0
c000c8ce:	e8 cc 4c 00 00       	call   c001159f <KePanic(char const*)>
c000c8d3:	83 c8 ff             	or     eax,0xffffffff
c000c8d6:	83 c4 1c             	add    esp,0x1c
c000c8d9:	c3                   	ret    

c000c8da <Device::~Device()>:
c000c8da:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c000c8df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e3:	89 10                	mov    DWORD PTR [eax],edx
c000c8e5:	90                   	nop
c000c8e6:	c3                   	ret    
c000c8e7:	90                   	nop

c000c8e8 <Device::~Device()>:
c000c8e8:	83 ec 0c             	sub    esp,0xc
c000c8eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8ef:	e8 e6 ff ff ff       	call   c000c8da <Device::~Device()>
c000c8f4:	83 c4 04             	add    esp,0x4
c000c8f7:	83 ec 08             	sub    esp,0x8
c000c8fa:	68 58 01 00 00       	push   0x158
c000c8ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c903:	e8 04 df ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c908:	83 c4 10             	add    esp,0x10
c000c90b:	83 c4 0c             	add    esp,0xc
c000c90e:	c3                   	ret    
c000c90f:	90                   	nop

c000c910 <Device::findAndLoadDriver()>:
c000c910:	c7 44 24 04 ce 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ace
c000c918:	e9 ed df ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c91d:	90                   	nop

c000c91e <Device::preOpenPCI(PCIDeviceInfo)>:
c000c91e:	57                   	push   edi
c000c91f:	b9 09 00 00 00       	mov    ecx,0x9
c000c924:	56                   	push   esi
c000c925:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c929:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c92d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c937:	81 c7 18 01 00 00    	add    edi,0x118
c000c93d:	fc                   	cld    
c000c93e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c940:	5e                   	pop    esi
c000c941:	5f                   	pop    edi
c000c942:	c3                   	ret    
c000c943:	90                   	nop

c000c944 <Device::preOpenACPI(void*, char*, char*)>:
c000c944:	57                   	push   edi
c000c945:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c94a:	56                   	push   esi
c000c94b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c94f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c953:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c957:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c961:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c967:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c96d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c96f:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c975:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c979:	b9 0e 00 00 00       	mov    ecx,0xe
c000c97e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c980:	5e                   	pop    esi
c000c981:	5f                   	pop    edi
c000c982:	c3                   	ret    
c000c983:	90                   	nop

c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c984:	53                   	push   ebx
c000c985:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c98d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c991:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c995:	0f b6 c0             	movzx  eax,al
c000c998:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c99c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9a0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9a8:	5b                   	pop    ebx
c000c9a9:	e9 aa 05 00 00       	jmp    c000cf58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9ae <Device::getParent()>:
c000c9ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9b2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9b8:	c3                   	ret    
c000c9b9:	90                   	nop

c000c9ba <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9c2:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9d3:	e9 f7 06 00 00       	jmp    c000d0cf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9d8 <Device::addChild(Device*)>:
c000c9d8:	53                   	push   ebx
c000c9d9:	83 ec 08             	sub    esp,0x8
c000c9dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9e4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9ea:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9f0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9f2:	85 d2                	test   edx,edx
c000c9f4:	74 04                	je     c000c9fa <Device::addChild(Device*)+0x22>
c000c9f6:	89 d3                	mov    ebx,edx
c000c9f8:	eb f6                	jmp    c000c9f0 <Device::addChild(Device*)+0x18>
c000c9fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9fd:	83 ec 0c             	sub    esp,0xc
c000ca00:	6a 08                	push   0x8
c000ca02:	e8 cc b0 ff ff       	call   c0007ad3 <malloc>
c000ca07:	89 03                	mov    DWORD PTR [ebx],eax
c000ca09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca16:	83 c4 18             	add    esp,0x18
c000ca19:	5b                   	pop    ebx
c000ca1a:	c3                   	ret    
c000ca1b:	90                   	nop

c000ca1c <Device::removeAllChildren()>:
c000ca1c:	56                   	push   esi
c000ca1d:	53                   	push   ebx
c000ca1e:	52                   	push   edx
c000ca1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca23:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca29:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca2c:	74 17                	je     c000ca45 <Device::removeAllChildren()+0x29>
c000ca2e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca31:	85 c0                	test   eax,eax
c000ca33:	74 0c                	je     c000ca41 <Device::removeAllChildren()+0x25>
c000ca35:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca37:	83 ec 0c             	sub    esp,0xc
c000ca3a:	50                   	push   eax
c000ca3b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca43:	eb e4                	jmp    c000ca29 <Device::removeAllChildren()+0xd>
c000ca45:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca51:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca5e:	58                   	pop    eax
c000ca5f:	5b                   	pop    ebx
c000ca60:	5e                   	pop    esi
c000ca61:	c3                   	ret    

c000ca62 <Device::hibernateAll()>:
c000ca62:	53                   	push   ebx
c000ca63:	83 ec 14             	sub    esp,0x14
c000ca66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca6c:	53                   	push   ebx
c000ca6d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca70:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca76:	83 c4 10             	add    esp,0x10
c000ca79:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca7c:	74 0f                	je     c000ca8d <Device::hibernateAll()+0x2b>
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca84:	e8 d9 ff ff ff       	call   c000ca62 <Device::hibernateAll()>
c000ca89:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca8b:	eb e9                	jmp    c000ca76 <Device::hibernateAll()+0x14>
c000ca8d:	83 c4 08             	add    esp,0x8
c000ca90:	5b                   	pop    ebx
c000ca91:	c3                   	ret    

c000ca92 <Device::wakeAll()>:
c000ca92:	53                   	push   ebx
c000ca93:	83 ec 14             	sub    esp,0x14
c000ca96:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca9c:	53                   	push   ebx
c000ca9d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000caa0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caa6:	83 c4 10             	add    esp,0x10
c000caa9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caac:	74 0f                	je     c000cabd <Device::wakeAll()+0x2b>
c000caae:	83 ec 0c             	sub    esp,0xc
c000cab1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cab4:	e8 d9 ff ff ff       	call   c000ca92 <Device::wakeAll()>
c000cab9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cabb:	eb e9                	jmp    c000caa6 <Device::wakeAll()+0x14>
c000cabd:	83 c4 08             	add    esp,0x8
c000cac0:	5b                   	pop    ebx
c000cac1:	c3                   	ret    

c000cac2 <Device::detectAll()>:
c000cac2:	53                   	push   ebx
c000cac3:	83 ec 14             	sub    esp,0x14
c000cac6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cacc:	53                   	push   ebx
c000cacd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cad0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cadc:	74 0f                	je     c000caed <Device::detectAll()+0x2b>
c000cade:	83 ec 0c             	sub    esp,0xc
c000cae1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cae4:	e8 d9 ff ff ff       	call   c000cac2 <Device::detectAll()>
c000cae9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caeb:	eb e9                	jmp    c000cad6 <Device::detectAll()+0x14>
c000caed:	83 c4 08             	add    esp,0x8
c000caf0:	5b                   	pop    ebx
c000caf1:	c3                   	ret    

c000caf2 <Device::disableLegacyAll()>:
c000caf2:	c3                   	ret    
c000caf3:	90                   	nop

c000caf4 <Device::loadDriversForAll()>:
c000caf4:	c3                   	ret    
c000caf5:	90                   	nop

c000caf6 <Device::closeAll()>:
c000caf6:	53                   	push   ebx
c000caf7:	83 ec 08             	sub    esp,0x8
c000cafa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cafe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb00:	6a 00                	push   0x0
c000cb02:	6a 00                	push   0x0
c000cb04:	6a 00                	push   0x0
c000cb06:	53                   	push   ebx
c000cb07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb0a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb16:	74 0f                	je     c000cb27 <Device::closeAll()+0x31>
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb1e:	e8 d3 ff ff ff       	call   c000caf6 <Device::closeAll()>
c000cb23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb25:	eb e9                	jmp    c000cb10 <Device::closeAll()+0x1a>
c000cb27:	83 c4 08             	add    esp,0x8
c000cb2a:	5b                   	pop    ebx
c000cb2b:	c3                   	ret    

c000cb2c <Device::powerSavingAll(PowerSavingLevel)>:
c000cb2c:	56                   	push   esi
c000cb2d:	53                   	push   ebx
c000cb2e:	83 ec 0c             	sub    esp,0xc
c000cb31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb39:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb3b:	56                   	push   esi
c000cb3c:	53                   	push   ebx
c000cb3d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb46:	83 c4 10             	add    esp,0x10
c000cb49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb4c:	74 0f                	je     c000cb5d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb4e:	52                   	push   edx
c000cb4f:	52                   	push   edx
c000cb50:	56                   	push   esi
c000cb51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb54:	e8 d3 ff ff ff       	call   c000cb2c <Device::powerSavingAll(PowerSavingLevel)>
c000cb59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb5b:	eb e9                	jmp    c000cb46 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb5d:	58                   	pop    eax
c000cb5e:	5b                   	pop    ebx
c000cb5f:	5e                   	pop    esi
c000cb60:	c3                   	ret    
c000cb61:	90                   	nop

c000cb62 <Device::setName(char const*)>:
c000cb62:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb6a:	e9 e1 3a ff ff       	jmp    c0000650 <strcpy>
c000cb6f:	90                   	nop

c000cb70 <Device::Device(char const*)>:
c000cb70:	83 ec 1c             	sub    esp,0x1c
c000cb73:	ba 10 1b 02 c0       	mov    edx,0xc0021b10
c000cb78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb7c:	89 10                	mov    DWORD PTR [eax],edx
c000cb7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb82:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb90:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbb6:	83 ec 08             	sub    esp,0x8
c000cbb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbc1:	e8 9c ff ff ff       	call   c000cb62 <Device::setName(char const*)>
c000cbc6:	83 c4 10             	add    esp,0x10
c000cbc9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbd1:	83 ec 0c             	sub    esp,0xc
c000cbd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbd8:	e8 f6 ae ff ff       	call   c0007ad3 <malloc>
c000cbdd:	83 c4 10             	add    esp,0x10
c000cbe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbe6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbf1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbfb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc1c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc27:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc32:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc40:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc4e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc5c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc66:	90                   	nop
c000cc67:	83 c4 1c             	add    esp,0x1c
c000cc6a:	c3                   	ret    
c000cc6b:	90                   	nop

c000cc6c <Device::getName()>:
c000cc6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc70:	05 d0 00 00 00       	add    eax,0xd0
c000cc75:	c3                   	ret    

c000cc76 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc76:	83 ec 0c             	sub    esp,0xc
c000cc79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7d:	83 ec 08             	sub    esp,0x8
c000cc80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc84:	50                   	push   eax
c000cc85:	e8 e6 fe ff ff       	call   c000cb70 <Device::Device(char const*)>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c000cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc96:	89 10                	mov    DWORD PTR [eax],edx
c000cc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cca6:	90                   	nop
c000cca7:	83 c4 0c             	add    esp,0xc
c000ccaa:	c3                   	ret    
c000ccab:	90                   	nop

c000ccac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccac:	57                   	push   edi
c000ccad:	56                   	push   esi
c000ccae:	53                   	push   ebx
c000ccaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccb3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccb7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccbb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccc1:	75 0c                	jne    c000cccf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccc3:	52                   	push   edx
c000ccc4:	52                   	push   edx
c000ccc5:	53                   	push   ebx
c000ccc6:	56                   	push   esi
c000ccc7:	e8 f6 2e 01 00       	call   c001fbc2 <LinkedList<Device>::addElement(Device*)>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccd5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccd8:	74 12                	je     c000ccec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccda:	50                   	push   eax
c000ccdb:	57                   	push   edi
c000ccdc:	56                   	push   esi
c000ccdd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cce0:	e8 c7 ff ff ff       	call   c000ccac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cce5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cce7:	83 c4 10             	add    esp,0x10
c000ccea:	eb e9                	jmp    c000ccd5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccec:	5b                   	pop    ebx
c000cced:	5e                   	pop    esi
c000ccee:	5f                   	pop    edi
c000ccef:	c3                   	ret    

c000ccf0 <getDevicesOfType(DeviceType)>:
c000ccf0:	53                   	push   ebx
c000ccf1:	83 ec 14             	sub    esp,0x14
c000ccf4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ccf8:	53                   	push   ebx
c000ccf9:	e8 a0 2f 01 00       	call   c001fc9e <LinkedList<Device>::LinkedList()>
c000ccfe:	83 c4 0c             	add    esp,0xc
c000cd01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd05:	53                   	push   ebx
c000cd06:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd0c:	e8 9b ff ff ff       	call   c000ccac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd11:	83 c4 18             	add    esp,0x18
c000cd14:	89 d8                	mov    eax,ebx
c000cd16:	5b                   	pop    ebx
c000cd17:	c2 04 00             	ret    0x4
c000cd1a:	66 90                	xchg   ax,ax

c000cd1c <HardDiskController::HardDiskController(char const*)>:
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd23:	83 ec 08             	sub    esp,0x8
c000cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2a:	50                   	push   eax
c000cd2b:	e8 40 fe ff ff       	call   c000cb70 <Device::Device(char const*)>
c000cd30:	83 c4 10             	add    esp,0x10
c000cd33:	ba 68 1b 02 c0       	mov    edx,0xc0021b68
c000cd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3c:	89 10                	mov    DWORD PTR [eax],edx
c000cd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd42:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd4c:	90                   	nop
c000cd4d:	83 c4 0c             	add    esp,0xc
c000cd50:	c3                   	ret    
c000cd51:	90                   	nop
c000cd52:	66 90                	xchg   ax,ax

c000cd54 <HardDiskController::~HardDiskController()>:
c000cd54:	83 ec 0c             	sub    esp,0xc
c000cd57:	ba 68 1b 02 c0       	mov    edx,0xc0021b68
c000cd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd60:	89 10                	mov    DWORD PTR [eax],edx
c000cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd66:	83 ec 0c             	sub    esp,0xc
c000cd69:	50                   	push   eax
c000cd6a:	e8 6b fb ff ff       	call   c000c8da <Device::~Device()>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	90                   	nop
c000cd73:	83 c4 0c             	add    esp,0xc
c000cd76:	c3                   	ret    
c000cd77:	90                   	nop

c000cd78 <HardDiskController::~HardDiskController()>:
c000cd78:	83 ec 0c             	sub    esp,0xc
c000cd7b:	83 ec 0c             	sub    esp,0xc
c000cd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd82:	e8 cd ff ff ff       	call   c000cd54 <HardDiskController::~HardDiskController()>
c000cd87:	83 c4 10             	add    esp,0x10
c000cd8a:	83 ec 08             	sub    esp,0x8
c000cd8d:	68 58 01 00 00       	push   0x158
c000cd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd96:	e8 71 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cd9b:	83 c4 10             	add    esp,0x10
c000cd9e:	83 c4 0c             	add    esp,0xc
c000cda1:	c3                   	ret    

c000cda2 <PhysicalDisk::eject()>:
c000cda2:	83 c8 ff             	or     eax,0xffffffff
c000cda5:	c3                   	ret    

c000cda6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cda6:	83 ec 0c             	sub    esp,0xc
c000cda9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdad:	83 ec 08             	sub    esp,0x8
c000cdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb4:	50                   	push   eax
c000cdb5:	e8 b6 fd ff ff       	call   c000cb70 <Device::Device(char const*)>
c000cdba:	83 c4 10             	add    esp,0x10
c000cdbd:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c000cdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc6:	89 10                	mov    DWORD PTR [eax],edx
c000cdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdcc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdf4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce08:	90                   	nop
c000ce09:	83 c4 0c             	add    esp,0xc
c000ce0c:	c3                   	ret    
c000ce0d:	90                   	nop

c000ce0e <PhysicalDisk::startCache()>:
c000ce0e:	56                   	push   esi
c000ce0f:	53                   	push   ebx
c000ce10:	83 ec 10             	sub    esp,0x10
c000ce13:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce17:	6a 44                	push   0x44
c000ce19:	e8 b5 ac ff ff       	call   c0007ad3 <malloc>
c000ce1e:	89 c6                	mov    esi,eax
c000ce20:	58                   	pop    eax
c000ce21:	5a                   	pop    edx
c000ce22:	53                   	push   ebx
c000ce23:	56                   	push   esi
c000ce24:	e8 83 17 00 00       	call   c000e5ac <VCache::VCache(PhysicalDisk*)>
c000ce29:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce2f:	83 c4 14             	add    esp,0x14
c000ce32:	5b                   	pop    ebx
c000ce33:	5e                   	pop    esi
c000ce34:	c3                   	ret    
c000ce35:	90                   	nop

c000ce36 <PhysicalDisk::~PhysicalDisk()>:
c000ce36:	83 ec 0c             	sub    esp,0xc
c000ce39:	ba 94 1b 02 c0       	mov    edx,0xc0021b94
c000ce3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce42:	89 10                	mov    DWORD PTR [eax],edx
c000ce44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce48:	83 ec 0c             	sub    esp,0xc
c000ce4b:	50                   	push   eax
c000ce4c:	e8 89 fa ff ff       	call   c000c8da <Device::~Device()>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	90                   	nop
c000ce55:	83 c4 0c             	add    esp,0xc
c000ce58:	c3                   	ret    
c000ce59:	90                   	nop

c000ce5a <PhysicalDisk::~PhysicalDisk()>:
c000ce5a:	83 ec 0c             	sub    esp,0xc
c000ce5d:	83 ec 0c             	sub    esp,0xc
c000ce60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce64:	e8 cd ff ff ff       	call   c000ce36 <PhysicalDisk::~PhysicalDisk()>
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	83 ec 08             	sub    esp,0x8
c000ce6f:	68 6c 01 00 00       	push   0x16c
c000ce74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce78:	e8 8f d9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ce7d:	83 c4 10             	add    esp,0x10
c000ce80:	83 c4 0c             	add    esp,0xc
c000ce83:	c3                   	ret    

c000ce84 <int_handler>:
c000ce84:	55                   	push   ebp
c000ce85:	57                   	push   edi
c000ce86:	56                   	push   esi
c000ce87:	53                   	push   ebx
c000ce88:	83 ec 0c             	sub    esp,0xc
c000ce8b:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce92:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce96:	74 0b                	je     c000cea3 <int_handler+0x1f>
c000ce98:	fa                   	cli    
c000ce99:	f4                   	hlt    
c000ce9a:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cea1:	75 f5                	jne    c000ce98 <int_handler+0x14>
c000cea3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cea6:	8d 46 e0             	lea    eax,[esi-0x20]
c000cea9:	83 f8 17             	cmp    eax,0x17
c000ceac:	76 40                	jbe    c000ceee <int_handler+0x6a>
c000ceae:	c1 e6 04             	shl    esi,0x4
c000ceb1:	31 db                	xor    ebx,ebx
c000ceb3:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ceb9:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cebf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cec3:	85 c0                	test   eax,eax
c000cec5:	74 13                	je     c000ceda <int_handler+0x56>
c000cec7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cecb:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cece:	74 2c                	je     c000cefc <int_handler+0x78>
c000ced0:	83 ec 08             	sub    esp,0x8
c000ced3:	52                   	push   edx
c000ced4:	57                   	push   edi
c000ced5:	ff d0                	call   eax
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	83 c3 01             	add    ebx,0x1
c000cedd:	83 fb 04             	cmp    ebx,0x4
c000cee0:	75 dd                	jne    c000cebf <int_handler+0x3b>
c000cee2:	83 c4 0c             	add    esp,0xc
c000cee5:	31 c0                	xor    eax,eax
c000cee7:	5b                   	pop    ebx
c000cee8:	31 d2                	xor    edx,edx
c000ceea:	5e                   	pop    esi
c000ceeb:	5f                   	pop    edi
c000ceec:	5d                   	pop    ebp
c000ceed:	c3                   	ret    
c000ceee:	83 ec 0c             	sub    esp,0xc
c000cef1:	50                   	push   eax
c000cef2:	e8 07 b4 00 00       	call   c00182fe <HalEndOfInterrupt(int)>
c000cef7:	83 c4 10             	add    esp,0x10
c000cefa:	eb b2                	jmp    c000ceae <int_handler+0x2a>
c000cefc:	83 ec 08             	sub    esp,0x8
c000ceff:	52                   	push   edx
c000cf00:	57                   	push   edi
c000cf01:	ff d0                	call   eax
c000cf03:	83 c4 10             	add    esp,0x10
c000cf06:	83 c4 0c             	add    esp,0xc
c000cf09:	5b                   	pop    ebx
c000cf0a:	5e                   	pop    esi
c000cf0b:	5f                   	pop    edi
c000cf0c:	5d                   	pop    ebp
c000cf0d:	c3                   	ret    

c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf0e:	56                   	push   esi
c000cf0f:	31 c0                	xor    eax,eax
c000cf11:	53                   	push   ebx
c000cf12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf1a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf1e:	89 ca                	mov    edx,ecx
c000cf20:	c1 e2 04             	shl    edx,0x4
c000cf23:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf2b:	74 17                	je     c000cf44 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf2d:	83 c0 01             	add    eax,0x1
c000cf30:	83 f8 04             	cmp    eax,0x4
c000cf33:	75 ee                	jne    c000cf23 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf35:	c7 44 24 0c c4 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021bc4
c000cf3d:	5b                   	pop    ebx
c000cf3e:	5e                   	pop    esi
c000cf3f:	e9 5b 46 00 00       	jmp    c001159f <KePanic(char const*)>
c000cf44:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf47:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf4e:	5b                   	pop    ebx
c000cf4f:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf56:	5e                   	pop    esi
c000cf57:	c3                   	ret    

c000cf58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf58:	55                   	push   ebp
c000cf59:	57                   	push   edi
c000cf5a:	56                   	push   esi
c000cf5b:	53                   	push   ebx
c000cf5c:	83 ec 0c             	sub    esp,0xc
c000cf5f:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf65:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf6d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf74:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf77:	74 57                	je     c000cfd0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf79:	84 c0                	test   al,al
c000cf7b:	89 c7                	mov    edi,eax
c000cf7d:	74 1d                	je     c000cf9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cf7f:	83 fe 0f             	cmp    esi,0xf
c000cf82:	0f 8f d9 00 00 00    	jg     c000d061 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cf88:	0f b6 b6 c8 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc938]
c000cf8f:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf97:	d1 ef                	shr    edi,1
c000cf99:	83 e7 01             	and    edi,0x1
c000cf9c:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfa1:	83 ec 08             	sub    esp,0x8
c000cfa4:	31 db                	xor    ebx,ebx
c000cfa6:	50                   	push   eax
c000cfa7:	68 d1 1b 02 c0       	push   0xc0021bd1
c000cfac:	e8 59 d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cfb1:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfb6:	83 c4 10             	add    esp,0x10
c000cfb9:	85 c0                	test   eax,eax
c000cfbb:	7f 59                	jg     c000d016 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cfbd:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	68 e8 1b 02 c0       	push   0xc0021be8
c000cfc8:	e8 d2 45 00 00       	call   c001159f <KePanic(char const*)>
c000cfcd:	83 c4 10             	add    esp,0x10
c000cfd0:	89 e8                	mov    eax,ebp
c000cfd2:	31 d2                	xor    edx,edx
c000cfd4:	c1 e0 04             	shl    eax,0x4
c000cfd7:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfde:	85 c9                	test   ecx,ecx
c000cfe0:	0f 84 92 00 00 00    	je     c000d078 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cfe6:	83 c2 01             	add    edx,0x1
c000cfe9:	83 fa 04             	cmp    edx,0x4
c000cfec:	75 e9                	jne    c000cfd7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	68 3c 1c 02 c0       	push   0xc0021c3c
c000cff6:	e8 a4 45 00 00       	call   c001159f <KePanic(char const*)>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d003:	83 c4 0c             	add    esp,0xc
c000d006:	5b                   	pop    ebx
c000d007:	5e                   	pop    esi
c000d008:	5f                   	pop    edi
c000d009:	5d                   	pop    ebp
c000d00a:	c3                   	ret    
c000d00b:	83 c3 01             	add    ebx,0x1
c000d00e:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d014:	7e a7                	jle    c000cfbd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d016:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d01d:	83 ec 08             	sub    esp,0x8
c000d020:	56                   	push   esi
c000d021:	55                   	push   ebp
c000d022:	e8 c1 1a 01 00       	call   c001eae8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d027:	83 c4 10             	add    esp,0x10
c000d02a:	84 c0                	test   al,al
c000d02c:	74 dd                	je     c000d00b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d02e:	89 f8                	mov    eax,edi
c000d030:	83 ec 04             	sub    esp,0x4
c000d033:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d03a:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d03d:	0f b6 f8             	movzx  edi,al
c000d040:	57                   	push   edi
c000d041:	89 e8                	mov    eax,ebp
c000d043:	6a 00                	push   0x0
c000d045:	0f b6 c0             	movzx  eax,al
c000d048:	50                   	push   eax
c000d049:	89 f0                	mov    eax,esi
c000d04b:	6a 00                	push   0x0
c000d04d:	0f b6 c0             	movzx  eax,al
c000d050:	6a 00                	push   0x0
c000d052:	50                   	push   eax
c000d053:	53                   	push   ebx
c000d054:	e8 fb 1b 01 00       	call   c001ec54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d059:	83 c4 20             	add    esp,0x20
c000d05c:	e9 6f ff ff ff       	jmp    c000cfd0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d061:	83 ec 0c             	sub    esp,0xc
c000d064:	31 ff                	xor    edi,edi
c000d066:	68 04 1c 02 c0       	push   0xc0021c04
c000d06b:	e8 2f 45 00 00       	call   c001159f <KePanic(char const*)>
c000d070:	83 c4 10             	add    esp,0x10
c000d073:	e9 24 ff ff ff       	jmp    c000cf9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d078:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d07b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d07f:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d086:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d08a:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d091:	83 c4 0c             	add    esp,0xc
c000d094:	89 f0                	mov    eax,esi
c000d096:	5b                   	pop    ebx
c000d097:	5e                   	pop    esi
c000d098:	5f                   	pop    edi
c000d099:	5d                   	pop    ebp
c000d09a:	c3                   	ret    

c000d09b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d09b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d09f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0a3:	c1 e0 04             	shl    eax,0x4
c000d0a6:	8d 50 10             	lea    edx,[eax+0x10]
c000d0a9:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0af:	74 08                	je     c000d0b9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0b1:	83 c0 04             	add    eax,0x4
c000d0b4:	39 d0                	cmp    eax,edx
c000d0b6:	75 f1                	jne    c000d0a9 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0b8:	c3                   	ret    
c000d0b9:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0c3:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0cd:	eb e2                	jmp    c000d0b1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0cf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0cf:	56                   	push   esi
c000d0d0:	53                   	push   ebx
c000d0d1:	83 ec 04             	sub    esp,0x4
c000d0d4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d0dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d0e1:	74 0e                	je     c000d0f1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d0e3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0e8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0ef:	75 34                	jne    c000d125 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d0f1:	8d 43 20             	lea    eax,[ebx+0x20]
c000d0f4:	c1 e0 04             	shl    eax,0x4
c000d0f7:	8d 50 10             	lea    edx,[eax+0x10]
c000d0fa:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d100:	74 0d                	je     c000d10f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d102:	83 c0 04             	add    eax,0x4
c000d105:	39 d0                	cmp    eax,edx
c000d107:	75 f1                	jne    c000d0fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d109:	83 c4 04             	add    esp,0x4
c000d10c:	5b                   	pop    ebx
c000d10d:	5e                   	pop    esi
c000d10e:	c3                   	ret    
c000d10f:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d119:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d123:	eb dd                	jmp    c000d102 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d125:	83 fb 0f             	cmp    ebx,0xf
c000d128:	7f 09                	jg     c000d133 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d12a:	0f b6 9b c8 36 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc938]
c000d131:	eb be                	jmp    c000d0f1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d133:	83 ec 0c             	sub    esp,0xc
c000d136:	68 f5 1b 02 c0       	push   0xc0021bf5
c000d13b:	e8 5f 44 00 00       	call   c001159f <KePanic(char const*)>
c000d140:	83 c4 10             	add    esp,0x10
c000d143:	eb ac                	jmp    c000d0f1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d145 <setupINTS()>:
c000d145:	31 c0                	xor    eax,eax
c000d147:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d151:	83 c0 10             	add    eax,0x10
c000d154:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d15e:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d168:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d172:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d17c:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d186:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d190:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d19a:	3d 00 10 00 00       	cmp    eax,0x1000
c000d19f:	75 a6                	jne    c000d147 <setupINTS()+0x2>
c000d1a1:	c3                   	ret    

c000d1a2 <convertLegacyIRQNumber(int)>:
c000d1a2:	83 ec 0c             	sub    esp,0xc
c000d1a5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1af:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1b6:	74 0c                	je     c000d1c4 <convertLegacyIRQNumber(int)+0x22>
c000d1b8:	83 f8 0f             	cmp    eax,0xf
c000d1bb:	7f 0b                	jg     c000d1c8 <convertLegacyIRQNumber(int)+0x26>
c000d1bd:	0f b6 80 c8 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc938]
c000d1c4:	83 c4 0c             	add    esp,0xc
c000d1c7:	c3                   	ret    
c000d1c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1cc:	83 ec 0c             	sub    esp,0xc
c000d1cf:	68 04 1c 02 c0       	push   0xc0021c04
c000d1d4:	e8 c6 43 00 00       	call   c001159f <KePanic(char const*)>
c000d1d9:	83 c4 10             	add    esp,0x10
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	83 c4 0c             	add    esp,0xc
c000d1e3:	c3                   	ret    

c000d1e4 <startGUI(void*)>:
c000d1e4:	55                   	push   ebp
c000d1e5:	89 e5                	mov    ebp,esp
c000d1e7:	53                   	push   ebx
c000d1e8:	83 ec 04             	sub    esp,0x4
c000d1eb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1f0:	83 e8 01             	sub    eax,0x1
c000d1f3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1fd:	85 c0                	test   eax,eax
c000d1ff:	75 01                	jne    c000d202 <startGUI(void*)+0x1e>
c000d201:	fb                   	sti    
c000d202:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d208:	83 ec 08             	sub    esp,0x8
c000d20b:	6a 01                	push   0x1
c000d20d:	68 61 1c 02 c0       	push   0xc0021c61
c000d212:	e8 ca 83 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	83 ec 08             	sub    esp,0x8
c000d21d:	53                   	push   ebx
c000d21e:	50                   	push   eax
c000d21f:	e8 fd 85 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c000d224:	83 c4 10             	add    esp,0x10
c000d227:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d22d:	83 ec 08             	sub    esp,0x8
c000d230:	6a 01                	push   0x1
c000d232:	68 7b 1c 02 c0       	push   0xc0021c7b
c000d237:	e8 a5 83 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c000d23c:	83 c4 10             	add    esp,0x10
c000d23f:	83 ec 08             	sub    esp,0x8
c000d242:	53                   	push   ebx
c000d243:	50                   	push   eax
c000d244:	e8 d8 85 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c000d249:	83 c4 10             	add    esp,0x10
c000d24c:	90                   	nop
c000d24d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d250:	c9                   	leave  
c000d251:	c3                   	ret    

c000d252 <startGUIVESA(void*)>:
c000d252:	55                   	push   ebp
c000d253:	89 e5                	mov    ebp,esp
c000d255:	53                   	push   ebx
c000d256:	83 ec 04             	sub    esp,0x4
c000d259:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d25e:	83 e8 01             	sub    eax,0x1
c000d261:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d266:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d26b:	85 c0                	test   eax,eax
c000d26d:	75 01                	jne    c000d270 <startGUIVESA(void*)+0x1e>
c000d26f:	fb                   	sti    
c000d270:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d276:	83 ec 08             	sub    esp,0x8
c000d279:	6a 01                	push   0x1
c000d27b:	68 99 1c 02 c0       	push   0xc0021c99
c000d280:	e8 5c 83 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c000d285:	83 c4 10             	add    esp,0x10
c000d288:	83 ec 08             	sub    esp,0x8
c000d28b:	53                   	push   ebx
c000d28c:	50                   	push   eax
c000d28d:	e8 8f 85 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c000d292:	83 c4 10             	add    esp,0x10
c000d295:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d29b:	83 ec 08             	sub    esp,0x8
c000d29e:	6a 01                	push   0x1
c000d2a0:	68 7b 1c 02 c0       	push   0xc0021c7b
c000d2a5:	e8 37 83 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c000d2aa:	83 c4 10             	add    esp,0x10
c000d2ad:	83 ec 08             	sub    esp,0x8
c000d2b0:	53                   	push   ebx
c000d2b1:	50                   	push   eax
c000d2b2:	e8 6a 85 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	90                   	nop
c000d2bb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2be:	c9                   	leave  
c000d2bf:	c3                   	ret    

c000d2c0 <sendKeyToTerminal(unsigned char)>:
c000d2c0:	55                   	push   ebp
c000d2c1:	89 e5                	mov    ebp,esp
c000d2c3:	83 ec 28             	sub    esp,0x28
c000d2c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2cc:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2d1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2d5:	83 ec 08             	sub    esp,0x8
c000d2d8:	52                   	push   edx
c000d2d9:	50                   	push   eax
c000d2da:	e8 dd ba ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2e6:	83 f8 0a             	cmp    eax,0xa
c000d2e9:	74 16                	je     c000d301 <sendKeyToTerminal(unsigned char)+0x41>
c000d2eb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2ef:	83 f8 03             	cmp    eax,0x3
c000d2f2:	74 0d                	je     c000d301 <sendKeyToTerminal(unsigned char)+0x41>
c000d2f4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2f8:	83 f8 1c             	cmp    eax,0x1c
c000d2fb:	0f 85 97 00 00 00    	jne    c000d398 <sendKeyToTerminal(unsigned char)+0xd8>
c000d301:	fa                   	cli    
c000d302:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d307:	83 c0 01             	add    eax,0x1
c000d30a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d30f:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d314:	83 c0 01             	add    eax,0x1
c000d317:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d31c:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d321:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d324:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d32e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d332:	74 1f                	je     c000d353 <sendKeyToTerminal(unsigned char)+0x93>
c000d334:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d337:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d33a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d33d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d340:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d343:	83 ec 0c             	sub    esp,0xc
c000d346:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d349:	e8 f6 91 00 00       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c000d34e:	83 c4 10             	add    esp,0x10
c000d351:	eb db                	jmp    c000d32e <sendKeyToTerminal(unsigned char)+0x6e>
c000d353:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d358:	83 e8 01             	sub    eax,0x1
c000d35b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d360:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d365:	85 c0                	test   eax,eax
c000d367:	75 18                	jne    c000d381 <sendKeyToTerminal(unsigned char)+0xc1>
c000d369:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d36e:	85 c0                	test   eax,eax
c000d370:	74 0f                	je     c000d381 <sendKeyToTerminal(unsigned char)+0xc1>
c000d372:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d37c:	e8 cb 8c 00 00       	call   c001604c <schedule()>
c000d381:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d386:	83 e8 01             	sub    eax,0x1
c000d389:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d38e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d393:	85 c0                	test   eax,eax
c000d395:	75 01                	jne    c000d398 <sendKeyToTerminal(unsigned char)+0xd8>
c000d397:	fb                   	sti    
c000d398:	90                   	nop
c000d399:	c9                   	leave  
c000d39a:	c3                   	ret    

c000d39b <sendKeyboardToken(KeyboardToken)>:
c000d39b:	55                   	push   ebp
c000d39c:	89 e5                	mov    ebp,esp
c000d39e:	83 ec 18             	sub    esp,0x18
c000d3a1:	e8 49 42 00 00       	call   c00115ef <KeUserIOReceived()>
c000d3a6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ac:	0f b7 c0             	movzx  eax,ax
c000d3af:	83 f2 01             	xor    edx,0x1
c000d3b2:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3b8:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3bd:	85 c0                	test   eax,eax
c000d3bf:	74 24                	je     c000d3e5 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3c1:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d3c7:	83 ec 04             	sub    esp,0x4
c000d3ca:	68 40 b4 02 c0       	push   0xc002b440
c000d3cf:	83 ec 08             	sub    esp,0x8
c000d3d2:	89 e0                	mov    eax,esp
c000d3d4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d3d7:	89 08                	mov    DWORD PTR [eax],ecx
c000d3d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d3dc:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d3e0:	ff d2                	call   edx
c000d3e2:	83 c4 10             	add    esp,0x10
c000d3e5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3e9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3ec:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3f1:	0f b6 d2             	movzx  edx,dl
c000d3f4:	0f b6 c0             	movzx  eax,al
c000d3f7:	39 c2                	cmp    edx,eax
c000d3f9:	74 1c                	je     c000d417 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3fb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3fe:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d403:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d408:	0f b6 c0             	movzx  eax,al
c000d40b:	83 ec 0c             	sub    esp,0xc
c000d40e:	50                   	push   eax
c000d40f:	e8 04 b1 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d414:	83 c4 10             	add    esp,0x10
c000d417:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d41a:	0f b6 c0             	movzx  eax,al
c000d41d:	85 c0                	test   eax,eax
c000d41f:	0f 84 da 00 00 00    	je     c000d4ff <sendKeyboardToken(KeyboardToken)+0x164>
c000d425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d428:	0f b7 c0             	movzx  eax,ax
c000d42b:	3d 18 03 00 00       	cmp    eax,0x318
c000d430:	75 06                	jne    c000d438 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d432:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43b:	0f b7 c0             	movzx  eax,ax
c000d43e:	3d 19 03 00 00       	cmp    eax,0x319
c000d443:	75 06                	jne    c000d44b <sendKeyboardToken(KeyboardToken)+0xb0>
c000d445:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d44b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44e:	0f b7 c0             	movzx  eax,ax
c000d451:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d456:	75 06                	jne    c000d45e <sendKeyboardToken(KeyboardToken)+0xc3>
c000d458:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d45e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d461:	0f b7 c0             	movzx  eax,ax
c000d464:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d469:	75 06                	jne    c000d471 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d46b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d474:	0f b7 c0             	movzx  eax,ax
c000d477:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d47c:	75 06                	jne    c000d484 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d47e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d487:	0f b7 c0             	movzx  eax,ax
c000d48a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d48f:	75 06                	jne    c000d497 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d491:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49a:	0f b7 c0             	movzx  eax,ax
c000d49d:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4a2:	75 06                	jne    c000d4aa <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4a4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ad:	0f b7 c0             	movzx  eax,ax
c000d4b0:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4b5:	75 06                	jne    c000d4bd <sendKeyboardToken(KeyboardToken)+0x122>
c000d4b7:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c0:	0f b7 c0             	movzx  eax,ax
c000d4c3:	3d 20 03 00 00       	cmp    eax,0x320
c000d4c8:	75 06                	jne    c000d4d0 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4ca:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d3:	0f b7 c0             	movzx  eax,ax
c000d4d6:	3d 21 03 00 00       	cmp    eax,0x321
c000d4db:	75 06                	jne    c000d4e3 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4dd:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e6:	0f b7 c0             	movzx  eax,ax
c000d4e9:	3d 22 03 00 00       	cmp    eax,0x322
c000d4ee:	0f 85 f1 00 00 00    	jne    c000d5e5 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4f4:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4fa:	e9 e6 00 00 00       	jmp    c000d5e5 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d502:	0f b7 c0             	movzx  eax,ax
c000d505:	3d 18 03 00 00       	cmp    eax,0x318
c000d50a:	75 0a                	jne    c000d516 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d50c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d512:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d519:	0f b7 c0             	movzx  eax,ax
c000d51c:	3d 19 03 00 00       	cmp    eax,0x319
c000d521:	75 0a                	jne    c000d52d <sendKeyboardToken(KeyboardToken)+0x192>
c000d523:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d529:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d52d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d530:	0f b7 c0             	movzx  eax,ax
c000d533:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d538:	75 0a                	jne    c000d544 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d53a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d540:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d547:	0f b7 c0             	movzx  eax,ax
c000d54a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d54f:	75 0a                	jne    c000d55b <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d551:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d557:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55e:	0f b7 c0             	movzx  eax,ax
c000d561:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d566:	75 0a                	jne    c000d572 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d568:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d56e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d575:	0f b7 c0             	movzx  eax,ax
c000d578:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d57d:	75 0a                	jne    c000d589 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d57f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d585:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58c:	0f b7 c0             	movzx  eax,ax
c000d58f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d594:	75 0a                	jne    c000d5a0 <sendKeyboardToken(KeyboardToken)+0x205>
c000d596:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d59c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a3:	0f b7 c0             	movzx  eax,ax
c000d5a6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5ab:	75 0a                	jne    c000d5b7 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5ad:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ba:	0f b7 c0             	movzx  eax,ax
c000d5bd:	3d 20 03 00 00       	cmp    eax,0x320
c000d5c2:	75 0a                	jne    c000d5ce <sendKeyboardToken(KeyboardToken)+0x233>
c000d5c4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d1:	0f b7 c0             	movzx  eax,ax
c000d5d4:	3d 21 03 00 00       	cmp    eax,0x321
c000d5d9:	75 0a                	jne    c000d5e5 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5db:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5e1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e8:	0f b7 c0             	movzx  eax,ax
c000d5eb:	3d 00 02 00 00       	cmp    eax,0x200
c000d5f0:	75 2f                	jne    c000d621 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5f2:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5f7:	83 f0 01             	xor    eax,0x1
c000d5fa:	0f b6 c0             	movzx  eax,al
c000d5fd:	85 c0                	test   eax,eax
c000d5ff:	74 20                	je     c000d621 <sendKeyboardToken(KeyboardToken)+0x286>
c000d601:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d606:	6a 01                	push   0x1
c000d608:	6a 00                	push   0x0
c000d60a:	68 e4 d1 00 c0       	push   0xc000d1e4
c000d60f:	50                   	push   eax
c000d610:	e8 eb 87 00 00       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c000d615:	83 c4 10             	add    esp,0x10
c000d618:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d61f:	eb 3a                	jmp    c000d65b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d624:	0f b7 c0             	movzx  eax,ax
c000d627:	3d 01 02 00 00       	cmp    eax,0x201
c000d62c:	75 2d                	jne    c000d65b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d62e:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d633:	83 f0 01             	xor    eax,0x1
c000d636:	0f b6 c0             	movzx  eax,al
c000d639:	85 c0                	test   eax,eax
c000d63b:	74 1e                	je     c000d65b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d63d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d642:	6a 01                	push   0x1
c000d644:	6a 00                	push   0x0
c000d646:	68 52 d2 00 c0       	push   0xc000d252
c000d64b:	50                   	push   eax
c000d64c:	e8 af 87 00 00       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c000d651:	83 c4 10             	add    esp,0x10
c000d654:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d65e:	0f b7 c0             	movzx  eax,ax
c000d661:	3d 25 03 00 00       	cmp    eax,0x325
c000d666:	75 06                	jne    c000d66e <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d668:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d671:	0f b7 c0             	movzx  eax,ax
c000d674:	3d 24 03 00 00       	cmp    eax,0x324
c000d679:	75 06                	jne    c000d681 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d67b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d684:	0f b7 c0             	movzx  eax,ax
c000d687:	3d 23 03 00 00       	cmp    eax,0x323
c000d68c:	75 06                	jne    c000d694 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d68e:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d697:	0f b7 c0             	movzx  eax,ax
c000d69a:	3d 26 03 00 00       	cmp    eax,0x326
c000d69f:	75 06                	jne    c000d6a7 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6a1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6aa:	0f b7 c0             	movzx  eax,ax
c000d6ad:	3d 27 03 00 00       	cmp    eax,0x327
c000d6b2:	75 06                	jne    c000d6ba <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6b4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6bd:	0f b7 c0             	movzx  eax,ax
c000d6c0:	3d 22 03 00 00       	cmp    eax,0x322
c000d6c5:	75 06                	jne    c000d6cd <sendKeyboardToken(KeyboardToken)+0x332>
c000d6c7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6cd:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6d4:	83 f0 01             	xor    eax,0x1
c000d6d7:	0f b6 c0             	movzx  eax,al
c000d6da:	85 c0                	test   eax,eax
c000d6dc:	74 7c                	je     c000d75a <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6de:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6e3:	0f b6 c0             	movzx  eax,al
c000d6e6:	85 c0                	test   eax,eax
c000d6e8:	74 43                	je     c000d72d <sendKeyboardToken(KeyboardToken)+0x392>
c000d6ea:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6ee:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6f2:	85 c0                	test   eax,eax
c000d6f4:	74 2b                	je     c000d721 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6f6:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6fc:	89 d0                	mov    eax,edx
c000d6fe:	c1 e0 02             	shl    eax,0x2
c000d701:	01 d0                	add    eax,edx
c000d703:	d1 e0                	shl    eax,1
c000d705:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d70a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70d:	0f b7 c0             	movzx  eax,ax
c000d710:	8d 50 d0             	lea    edx,[eax-0x30]
c000d713:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d718:	01 d0                	add    eax,edx
c000d71a:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d71f:	eb 71                	jmp    c000d792 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d721:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d72b:	eb 65                	jmp    c000d792 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d72d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d732:	85 c0                	test   eax,eax
c000d734:	74 18                	je     c000d74e <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d736:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d73b:	0f b6 c0             	movzx  eax,al
c000d73e:	83 ec 0c             	sub    esp,0xc
c000d741:	50                   	push   eax
c000d742:	e8 79 fb ff ff       	call   c000d2c0 <sendKeyToTerminal(unsigned char)>
c000d747:	83 c4 10             	add    esp,0x10
c000d74a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d74e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d758:	eb 38                	jmp    c000d792 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75d:	0f b7 c0             	movzx  eax,ax
c000d760:	3d 01 01 00 00       	cmp    eax,0x101
c000d765:	75 2b                	jne    c000d792 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d767:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d76c:	85 c0                	test   eax,eax
c000d76e:	74 18                	je     c000d788 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d770:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d775:	0f b6 c0             	movzx  eax,al
c000d778:	83 ec 0c             	sub    esp,0xc
c000d77b:	50                   	push   eax
c000d77c:	e8 3f fb ff ff       	call   c000d2c0 <sendKeyToTerminal(unsigned char)>
c000d781:	83 c4 10             	add    esp,0x10
c000d784:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d788:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d792:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d795:	83 f0 01             	xor    eax,0x1
c000d798:	0f b6 c0             	movzx  eax,al
c000d79b:	85 c0                	test   eax,eax
c000d79d:	74 5a                	je     c000d7f9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d79f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7a2:	83 f0 01             	xor    eax,0x1
c000d7a5:	0f b6 c0             	movzx  eax,al
c000d7a8:	85 c0                	test   eax,eax
c000d7aa:	74 4d                	je     c000d7f9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7ac:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7b1:	83 f0 01             	xor    eax,0x1
c000d7b4:	0f b6 c0             	movzx  eax,al
c000d7b7:	85 c0                	test   eax,eax
c000d7b9:	74 3e                	je     c000d7f9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7be:	0f b7 c0             	movzx  eax,ax
c000d7c1:	83 f8 1f             	cmp    eax,0x1f
c000d7c4:	76 0b                	jbe    c000d7d1 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c9:	0f b7 c0             	movzx  eax,ax
c000d7cc:	83 f8 7e             	cmp    eax,0x7e
c000d7cf:	76 16                	jbe    c000d7e7 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d4:	0f b7 c0             	movzx  eax,ax
c000d7d7:	83 f8 0a             	cmp    eax,0xa
c000d7da:	74 0b                	je     c000d7e7 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7df:	0f b7 c0             	movzx  eax,ax
c000d7e2:	83 f8 08             	cmp    eax,0x8
c000d7e5:	75 12                	jne    c000d7f9 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ea:	0f b6 c0             	movzx  eax,al
c000d7ed:	83 ec 0c             	sub    esp,0xc
c000d7f0:	50                   	push   eax
c000d7f1:	e8 ca fa ff ff       	call   c000d2c0 <sendKeyToTerminal(unsigned char)>
c000d7f6:	83 c4 10             	add    esp,0x10
c000d7f9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7fc:	83 f0 01             	xor    eax,0x1
c000d7ff:	0f b6 c0             	movzx  eax,al
c000d802:	85 c0                	test   eax,eax
c000d804:	74 5d                	je     c000d863 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d806:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d809:	83 f0 01             	xor    eax,0x1
c000d80c:	0f b6 c0             	movzx  eax,al
c000d80f:	85 c0                	test   eax,eax
c000d811:	74 50                	je     c000d863 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d813:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d818:	0f b6 c0             	movzx  eax,al
c000d81b:	85 c0                	test   eax,eax
c000d81d:	74 44                	je     c000d863 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d81f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d822:	0f b7 c0             	movzx  eax,ax
c000d825:	83 f8 3f             	cmp    eax,0x3f
c000d828:	76 39                	jbe    c000d863 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d82a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82d:	0f b7 c0             	movzx  eax,ax
c000d830:	83 f8 7f             	cmp    eax,0x7f
c000d833:	77 2e                	ja     c000d863 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d838:	88 c2                	mov    dl,al
c000d83a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83d:	0f b7 c0             	movzx  eax,ax
c000d840:	83 f8 5f             	cmp    eax,0x5f
c000d843:	76 04                	jbe    c000d849 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d845:	b0 20                	mov    al,0x20
c000d847:	eb 02                	jmp    c000d84b <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d849:	b0 00                	mov    al,0x0
c000d84b:	89 d1                	mov    ecx,edx
c000d84d:	29 c1                	sub    ecx,eax
c000d84f:	89 c8                	mov    eax,ecx
c000d851:	83 e8 40             	sub    eax,0x40
c000d854:	0f b6 c0             	movzx  eax,al
c000d857:	83 ec 0c             	sub    esp,0xc
c000d85a:	50                   	push   eax
c000d85b:	e8 60 fa ff ff       	call   c000d2c0 <sendKeyToTerminal(unsigned char)>
c000d860:	83 c4 10             	add    esp,0x10
c000d863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d866:	0f b7 c0             	movzx  eax,ax
c000d869:	3d 00 03 00 00       	cmp    eax,0x300
c000d86e:	75 12                	jne    c000d882 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d870:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d873:	83 f0 01             	xor    eax,0x1
c000d876:	0f b6 c0             	movzx  eax,al
c000d879:	85 c0                	test   eax,eax
c000d87b:	74 05                	je     c000d882 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d87d:	e8 97 ac ff ff       	call   c0008519 <doTerminalCycle()>
c000d882:	90                   	nop
c000d883:	c9                   	leave  
c000d884:	c3                   	ret    

c000d885 <clearInternalKeybuffer(VgaText*)>:
c000d885:	55                   	push   ebp
c000d886:	89 e5                	mov    ebp,esp
c000d888:	83 ec 08             	sub    esp,0x8
c000d88b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d88e:	05 02 01 00 00       	add    eax,0x102
c000d893:	83 ec 0c             	sub    esp,0xc
c000d896:	50                   	push   eax
c000d897:	e8 e4 2c ff ff       	call   c0000580 <strlen>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8a2:	81 c2 02 01 00 00    	add    edx,0x102
c000d8a8:	83 ec 04             	sub    esp,0x4
c000d8ab:	50                   	push   eax
c000d8ac:	6a 00                	push   0x0
c000d8ae:	52                   	push   edx
c000d8af:	e8 3c 2c ff ff       	call   c00004f0 <memset>
c000d8b4:	83 c4 10             	add    esp,0x10
c000d8b7:	90                   	nop
c000d8b8:	c9                   	leave  
c000d8b9:	c3                   	ret    

c000d8ba <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8ba:	55                   	push   ebp
c000d8bb:	89 e5                	mov    ebp,esp
c000d8bd:	83 ec 18             	sub    esp,0x18
c000d8c0:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8c5:	85 c0                	test   eax,eax
c000d8c7:	74 2a                	je     c000d8f3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8c9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8cf:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d8d5:	83 ec 04             	sub    esp,0x4
c000d8d8:	68 40 b4 02 c0       	push   0xc002b440
c000d8dd:	83 ec 08             	sub    esp,0x8
c000d8e0:	89 e0                	mov    eax,esp
c000d8e2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d8e5:	89 08                	mov    DWORD PTR [eax],ecx
c000d8e7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d8ea:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d8ee:	ff d2                	call   edx
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	fb                   	sti    
c000d8f4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8fb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8ff:	0f 84 0d 01 00 00    	je     c000da12 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d908:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d90e:	0f be c0             	movsx  eax,al
c000d911:	85 c0                	test   eax,eax
c000d913:	75 2c                	jne    c000d941 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d915:	fa                   	cli    
c000d916:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d91b:	83 c0 01             	add    eax,0x1
c000d91e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d923:	e8 24 87 00 00       	call   c001604c <schedule()>
c000d928:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d92d:	83 e8 01             	sub    eax,0x1
c000d930:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d935:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d93a:	85 c0                	test   eax,eax
c000d93c:	75 c7                	jne    c000d905 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d93e:	fb                   	sti    
c000d93f:	eb c4                	jmp    c000d905 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d941:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d944:	8d 50 01             	lea    edx,[eax+0x1]
c000d947:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d94a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d94d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d953:	88 10                	mov    BYTE PTR [eax],dl
c000d955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d958:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d95e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d961:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d965:	83 f8 03             	cmp    eax,0x3
c000d968:	75 1e                	jne    c000d988 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d96a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d96f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d971:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d974:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d97a:	83 ec 08             	sub    esp,0x8
c000d97d:	6a 02                	push   0x2
c000d97f:	50                   	push   eax
c000d980:	e8 b6 40 00 00       	call   c0011a3b <KeRaiseSignal(SigHandlerBlock*, int)>
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d98c:	83 f8 1c             	cmp    eax,0x1c
c000d98f:	75 1e                	jne    c000d9af <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d991:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d996:	8b 00                	mov    eax,DWORD PTR [eax]
c000d998:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d99b:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9a1:	83 ec 08             	sub    esp,0x8
c000d9a4:	6a 09                	push   0x9
c000d9a6:	50                   	push   eax
c000d9a7:	e8 8f 40 00 00       	call   c0011a3b <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9b2:	05 02 01 00 00       	add    eax,0x102
c000d9b7:	83 ec 0c             	sub    esp,0xc
c000d9ba:	50                   	push   eax
c000d9bb:	e8 c0 2b ff ff       	call   c0000580 <strlen>
c000d9c0:	83 c4 10             	add    esp,0x10
c000d9c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9c6:	81 c2 02 01 00 00    	add    edx,0x102
c000d9cc:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9d2:	81 c2 02 01 00 00    	add    edx,0x102
c000d9d8:	83 ec 04             	sub    esp,0x4
c000d9db:	50                   	push   eax
c000d9dc:	51                   	push   ecx
c000d9dd:	52                   	push   edx
c000d9de:	e8 ed 29 ff ff       	call   c00003d0 <memmove>
c000d9e3:	83 c4 10             	add    esp,0x10
c000d9e6:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9ea:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9ee:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9f2:	83 f8 0a             	cmp    eax,0xa
c000d9f5:	74 16                	je     c000da0d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9f7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9fb:	83 f8 03             	cmp    eax,0x3
c000d9fe:	74 0d                	je     c000da0d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da00:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da04:	83 f8 1c             	cmp    eax,0x1c
c000da07:	0f 85 ee fe ff ff    	jne    c000d8fb <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da10:	eb 03                	jmp    c000da15 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da15:	c9                   	leave  
c000da16:	c3                   	ret    
c000da17:	90                   	nop

c000da18 <Keyboard::Keyboard(char const*)>:
c000da18:	83 ec 0c             	sub    esp,0xc
c000da1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1f:	83 ec 08             	sub    esp,0x8
c000da22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da26:	50                   	push   eax
c000da27:	e8 44 f1 ff ff       	call   c000cb70 <Device::Device(char const*)>
c000da2c:	83 c4 10             	add    esp,0x10
c000da2f:	ba bc 1c 02 c0       	mov    edx,0xc0021cbc
c000da34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da38:	89 10                	mov    DWORD PTR [eax],edx
c000da3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da48:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da4f:	90                   	nop
c000da50:	83 c4 0c             	add    esp,0xc
c000da53:	c3                   	ret    

c000da54 <Keyboard::~Keyboard()>:
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	ba bc 1c 02 c0       	mov    edx,0xc0021cbc
c000da5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da60:	89 10                	mov    DWORD PTR [eax],edx
c000da62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da66:	83 ec 0c             	sub    esp,0xc
c000da69:	50                   	push   eax
c000da6a:	e8 6b ee ff ff       	call   c000c8da <Device::~Device()>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	90                   	nop
c000da73:	83 c4 0c             	add    esp,0xc
c000da76:	c3                   	ret    
c000da77:	90                   	nop

c000da78 <Keyboard::~Keyboard()>:
c000da78:	83 ec 0c             	sub    esp,0xc
c000da7b:	83 ec 0c             	sub    esp,0xc
c000da7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da82:	e8 cd ff ff ff       	call   c000da54 <Keyboard::~Keyboard()>
c000da87:	83 c4 10             	add    esp,0x10
c000da8a:	83 ec 08             	sub    esp,0x8
c000da8d:	68 5c 01 00 00       	push   0x15c
c000da92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da96:	e8 71 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da9b:	83 c4 10             	add    esp,0x10
c000da9e:	83 c4 0c             	add    esp,0xc
c000daa1:	c3                   	ret    

c000daa2 <LogicalDisk::close(int, int, void*)>:
c000daa2:	83 c8 ff             	or     eax,0xffffffff
c000daa5:	c3                   	ret    

c000daa6 <LogicalDisk::~LogicalDisk()>:
c000daa6:	83 ec 0c             	sub    esp,0xc
c000daa9:	ba 34 1d 02 c0       	mov    edx,0xc0021d34
c000daae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab2:	89 10                	mov    DWORD PTR [eax],edx
c000dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab8:	83 ec 0c             	sub    esp,0xc
c000dabb:	50                   	push   eax
c000dabc:	e8 19 ee ff ff       	call   c000c8da <Device::~Device()>
c000dac1:	83 c4 10             	add    esp,0x10
c000dac4:	90                   	nop
c000dac5:	83 c4 0c             	add    esp,0xc
c000dac8:	c3                   	ret    
c000dac9:	90                   	nop

c000daca <LogicalDisk::~LogicalDisk()>:
c000daca:	83 ec 0c             	sub    esp,0xc
c000dacd:	83 ec 0c             	sub    esp,0xc
c000dad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad4:	e8 cd ff ff ff       	call   c000daa6 <LogicalDisk::~LogicalDisk()>
c000dad9:	83 c4 10             	add    esp,0x10
c000dadc:	83 ec 08             	sub    esp,0x8
c000dadf:	68 78 01 00 00       	push   0x178
c000dae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae8:	e8 1f cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000daed:	83 c4 10             	add    esp,0x10
c000daf0:	83 c4 0c             	add    esp,0xc
c000daf3:	c3                   	ret    

c000daf4 <LogicalDisk::open(int, int, void*)>:
c000daf4:	83 ec 18             	sub    esp,0x18
c000daf7:	68 e8 1c 02 c0       	push   0xc0021ce8
c000dafc:	e8 9e 3a 00 00       	call   c001159f <KePanic(char const*)>
c000db01:	83 c8 ff             	or     eax,0xffffffff
c000db04:	83 c4 1c             	add    esp,0x1c
c000db07:	c3                   	ret    

c000db08 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db08:	53                   	push   ebx
c000db09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db15:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db1b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db21:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db27:	77 10                	ja     c000db39 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db29:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db2f:	89 d3                	mov    ebx,edx
c000db31:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db37:	72 05                	jb     c000db3e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db39:	83 c8 ff             	or     eax,0xffffffff
c000db3c:	89 c2                	mov    edx,eax
c000db3e:	5b                   	pop    ebx
c000db3f:	c3                   	ret    

c000db40 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db40:	56                   	push   esi
c000db41:	83 c8 ff             	or     eax,0xffffffff
c000db44:	53                   	push   ebx
c000db45:	89 c2                	mov    edx,eax
c000db47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db4b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db53:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db59:	77 27                	ja     c000db82 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db5b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db61:	89 d8                	mov    eax,ebx
c000db63:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db6e:	89 c2                	mov    edx,eax
c000db70:	73 10                	jae    c000db82 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db72:	89 c8                	mov    eax,ecx
c000db74:	89 da                	mov    edx,ebx
c000db76:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db7c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db82:	5b                   	pop    ebx
c000db83:	5e                   	pop    esi
c000db84:	c3                   	ret    
c000db85:	90                   	nop

c000db86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db86:	83 ec 1c             	sub    esp,0x1c
c000db89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dba0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dba4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbac:	83 ec 08             	sub    esp,0x8
c000dbaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbb3:	50                   	push   eax
c000dbb4:	e8 b7 ef ff ff       	call   c000cb70 <Device::Device(char const*)>
c000dbb9:	83 c4 10             	add    esp,0x10
c000dbbc:	ba 34 1d 02 c0       	mov    edx,0xc0021d34
c000dbc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc5:	89 10                	mov    DWORD PTR [eax],edx
c000dbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbec:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbf6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc02:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc08:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc0e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc19:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc1f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc2d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc37:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc41:	90                   	nop
c000dc42:	83 c4 1c             	add    esp,0x1c
c000dc45:	c3                   	ret    

c000dc46 <LogicalDisk::assignDriveLetter()>:
c000dc46:	55                   	push   ebp
c000dc47:	57                   	push   edi
c000dc48:	56                   	push   esi
c000dc49:	53                   	push   ebx
c000dc4a:	83 ec 14             	sub    esp,0x14
c000dc4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc51:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc57:	b0 41                	mov    al,0x41
c000dc59:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc5f:	84 d2                	test   dl,dl
c000dc61:	75 02                	jne    c000dc65 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc63:	b0 43                	mov    al,0x43
c000dc65:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc6b:	0f b6 ca             	movzx  ecx,dl
c000dc6e:	0f be e8             	movsx  ebp,al
c000dc71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc75:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc79:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc7f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc83:	3c 43                	cmp    al,0x43
c000dc85:	75 10                	jne    c000dc97 <LogicalDisk::assignDriveLetter()+0x51>
c000dc87:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc8e:	75 5a                	jne    c000dcea <LogicalDisk::assignDriveLetter()+0xa4>
c000dc90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc95:	75 53                	jne    c000dcea <LogicalDisk::assignDriveLetter()+0xa4>
c000dc97:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc9a:	ba 01 00 00 00       	mov    edx,0x1
c000dc9f:	89 34 24             	mov    DWORD PTR [esp],esi
c000dca2:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dca5:	d3 e2                	shl    edx,cl
c000dca7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcab:	89 d7                	mov    edi,edx
c000dcad:	89 d6                	mov    esi,edx
c000dcaf:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcb3:	c1 ff 1f             	sar    edi,0x1f
c000dcb6:	21 f9                	and    ecx,edi
c000dcb8:	09 d1                	or     ecx,edx
c000dcba:	75 2e                	jne    c000dcea <LogicalDisk::assignDriveLetter()+0xa4>
c000dcbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcc0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcc4:	09 f2                	or     edx,esi
c000dcc6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcc9:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dccf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcd3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcd9:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dce0:	09 fa                	or     edx,edi
c000dce2:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dce8:	eb 0d                	jmp    c000dcf7 <LogicalDisk::assignDriveLetter()+0xb1>
c000dcea:	8d 50 01             	lea    edx,[eax+0x1]
c000dced:	45                   	inc    ebp
c000dcee:	80 fa 5b             	cmp    dl,0x5b
c000dcf1:	88 d0                	mov    al,dl
c000dcf3:	75 8e                	jne    c000dc83 <LogicalDisk::assignDriveLetter()+0x3d>
c000dcf5:	31 c0                	xor    eax,eax
c000dcf7:	83 c4 14             	add    esp,0x14
c000dcfa:	5b                   	pop    ebx
c000dcfb:	5e                   	pop    esi
c000dcfc:	5f                   	pop    edi
c000dcfd:	5d                   	pop    ebp
c000dcfe:	c3                   	ret    
c000dcff:	90                   	nop

c000dd00 <LogicalDisk::mount()>:
c000dd00:	56                   	push   esi
c000dd01:	53                   	push   ebx
c000dd02:	53                   	push   ebx
c000dd03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd07:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd0d:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd17:	85 db                	test   ebx,ebx
c000dd19:	74 27                	je     c000dd42 <LogicalDisk::mount()+0x42>
c000dd1b:	51                   	push   ecx
c000dd1c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd23:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd25:	83 e8 41             	sub    eax,0x41
c000dd28:	50                   	push   eax
c000dd29:	56                   	push   esi
c000dd2a:	53                   	push   ebx
c000dd2b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd2e:	83 c4 10             	add    esp,0x10
c000dd31:	84 c0                	test   al,al
c000dd33:	74 08                	je     c000dd3d <LogicalDisk::mount()+0x3d>
c000dd35:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd3b:	eb 07                	jmp    c000dd44 <LogicalDisk::mount()+0x44>
c000dd3d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd40:	eb d5                	jmp    c000dd17 <LogicalDisk::mount()+0x17>
c000dd42:	31 c0                	xor    eax,eax
c000dd44:	5a                   	pop    edx
c000dd45:	5b                   	pop    ebx
c000dd46:	5e                   	pop    esi
c000dd47:	c3                   	ret    

c000dd48 <LogicalDisk::unmount()>:
c000dd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd4c:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd56:	c3                   	ret    
c000dd57:	90                   	nop

c000dd58 <LogicalDisk::eject()>:
c000dd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd5c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd62:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd68:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd6b:	90                   	nop

c000dd6c <LogicalDisk::unassignDriveLetter()>:
c000dd6c:	57                   	push   edi
c000dd6d:	56                   	push   esi
c000dd6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd72:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd79:	85 c9                	test   ecx,ecx
c000dd7b:	75 0f                	jne    c000dd8c <LogicalDisk::unassignDriveLetter()+0x20>
c000dd7d:	c7 44 24 0c 0c 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d0c
c000dd85:	5e                   	pop    esi
c000dd86:	5f                   	pop    edi
c000dd87:	e9 13 38 00 00       	jmp    c001159f <KePanic(char const*)>
c000dd8c:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd93:	83 e9 41             	sub    ecx,0x41
c000dd96:	b8 01 00 00 00       	mov    eax,0x1
c000dd9b:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dda6:	d3 e0                	shl    eax,cl
c000dda8:	89 c7                	mov    edi,eax
c000ddaa:	f7 d0                	not    eax
c000ddac:	c1 ff 1f             	sar    edi,0x1f
c000ddaf:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddb5:	89 fe                	mov    esi,edi
c000ddb7:	f7 d6                	not    esi
c000ddb9:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddbf:	5e                   	pop    esi
c000ddc0:	5f                   	pop    edi
c000ddc1:	c3                   	ret    

c000ddc2 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddc2:	57                   	push   edi
c000ddc3:	56                   	push   esi
c000ddc4:	53                   	push   ebx
c000ddc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddd5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dddb:	77 41                	ja     c000de1e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dddd:	99                   	cdq    
c000ddde:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dde4:	01 c8                	add    eax,ecx
c000dde6:	11 da                	adc    edx,ebx
c000dde8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddee:	19 d7                	sbb    edi,edx
c000ddf0:	72 33                	jb     c000de25 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddf2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddf8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de02:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de06:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de16:	5b                   	pop    ebx
c000de17:	5e                   	pop    esi
c000de18:	5f                   	pop    edi
c000de19:	e9 d4 0a 00 00       	jmp    c000e8f2 <VCache::read(unsigned long long, int, void*)>
c000de1e:	b8 05 00 00 00       	mov    eax,0x5
c000de23:	eb 05                	jmp    c000de2a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de25:	b8 07 00 00 00       	mov    eax,0x7
c000de2a:	5b                   	pop    ebx
c000de2b:	5e                   	pop    esi
c000de2c:	5f                   	pop    edi
c000de2d:	c3                   	ret    

c000de2e <LogicalDisk::write(unsigned long long, int, void*)>:
c000de2e:	57                   	push   edi
c000de2f:	56                   	push   esi
c000de30:	53                   	push   ebx
c000de31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de41:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de47:	77 41                	ja     c000de8a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de49:	99                   	cdq    
c000de4a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de50:	01 c8                	add    eax,ecx
c000de52:	11 da                	adc    edx,ebx
c000de54:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de5a:	19 d7                	sbb    edi,edx
c000de5c:	72 33                	jb     c000de91 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de5e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de64:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de6e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de72:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de82:	5b                   	pop    ebx
c000de83:	5e                   	pop    esi
c000de84:	5f                   	pop    edi
c000de85:	e9 6e 09 00 00       	jmp    c000e7f8 <VCache::write(unsigned long long, int, void*)>
c000de8a:	b8 05 00 00 00       	mov    eax,0x5
c000de8f:	eb 05                	jmp    c000de96 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de91:	b8 07 00 00 00       	mov    eax,0x7
c000de96:	5b                   	pop    ebx
c000de97:	5e                   	pop    esi
c000de98:	5f                   	pop    edi
c000de99:	c3                   	ret    
c000de9a:	66 90                	xchg   ax,ax

c000de9c <Mouse::Mouse(char const*)>:
c000de9c:	83 ec 0c             	sub    esp,0xc
c000de9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea3:	83 ec 08             	sub    esp,0x8
c000dea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deaa:	50                   	push   eax
c000deab:	e8 c0 ec ff ff       	call   c000cb70 <Device::Device(char const*)>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	ba 60 1d 02 c0       	mov    edx,0xc0021d60
c000deb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000debc:	89 10                	mov    DWORD PTR [eax],edx
c000debe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000decc:	90                   	nop
c000decd:	83 c4 0c             	add    esp,0xc
c000ded0:	c3                   	ret    
c000ded1:	90                   	nop
c000ded2:	66 90                	xchg   ax,ax

c000ded4 <Mouse::~Mouse()>:
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	ba 60 1d 02 c0       	mov    edx,0xc0021d60
c000dedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee0:	89 10                	mov    DWORD PTR [eax],edx
c000dee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee6:	83 ec 0c             	sub    esp,0xc
c000dee9:	50                   	push   eax
c000deea:	e8 eb e9 ff ff       	call   c000c8da <Device::~Device()>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	90                   	nop
c000def3:	83 c4 0c             	add    esp,0xc
c000def6:	c3                   	ret    
c000def7:	90                   	nop

c000def8 <Mouse::~Mouse()>:
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	83 ec 0c             	sub    esp,0xc
c000defe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df02:	e8 cd ff ff ff       	call   c000ded4 <Mouse::~Mouse()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	83 ec 08             	sub    esp,0x8
c000df0d:	68 58 01 00 00       	push   0x158
c000df12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df16:	e8 f1 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	83 c4 0c             	add    esp,0xc
c000df21:	c3                   	ret    

c000df22 <NIC::getMAC()>:
c000df22:	31 c0                	xor    eax,eax
c000df24:	31 d2                	xor    edx,edx
c000df26:	c3                   	ret    
c000df27:	90                   	nop

c000df28 <NIC::write(int, unsigned char*, int*)>:
c000df28:	b8 01 00 00 00       	mov    eax,0x1
c000df2d:	c3                   	ret    

c000df2e <NIC::NIC(char const*)>:
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df35:	83 ec 08             	sub    esp,0x8
c000df38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3c:	50                   	push   eax
c000df3d:	e8 2e ec ff ff       	call   c000cb70 <Device::Device(char const*)>
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	ba 8c 1d 02 c0       	mov    edx,0xc0021d8c
c000df4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4e:	89 10                	mov    DWORD PTR [eax],edx
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df5e:	90                   	nop
c000df5f:	83 c4 0c             	add    esp,0xc
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <NIC::~NIC()>:
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	ba 8c 1d 02 c0       	mov    edx,0xc0021d8c
c000df6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df70:	89 10                	mov    DWORD PTR [eax],edx
c000df72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	50                   	push   eax
c000df7a:	e8 5b e9 ff ff       	call   c000c8da <Device::~Device()>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	90                   	nop
c000df83:	83 c4 0c             	add    esp,0xc
c000df86:	c3                   	ret    
c000df87:	90                   	nop

c000df88 <NIC::~NIC()>:
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	83 ec 0c             	sub    esp,0xc
c000df8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df92:	e8 cd ff ff ff       	call   c000df64 <NIC::~NIC()>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	83 ec 08             	sub    esp,0x8
c000df9d:	68 58 01 00 00       	push   0x158
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	e8 61 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	83 c4 0c             	add    esp,0xc
c000dfb1:	c3                   	ret    

c000dfb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfb2:	55                   	push   ebp
c000dfb3:	57                   	push   edi
c000dfb4:	56                   	push   esi
c000dfb5:	53                   	push   ebx
c000dfb6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfbc:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dfc3:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dfca:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dfd1:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dfd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfdc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfe0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfe7:	e8 80 ec ff ff       	call   c000cc6c <Device::getName()>
c000dfec:	5a                   	pop    edx
c000dfed:	59                   	pop    ecx
c000dfee:	50                   	push   eax
c000dfef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dff3:	55                   	push   ebp
c000dff4:	e8 57 26 ff ff       	call   c0000650 <strcpy>
c000dff9:	5b                   	pop    ebx
c000dffa:	58                   	pop    eax
c000dffb:	68 b8 1d 02 c0       	push   0xc0021db8
c000e000:	55                   	push   ebp
c000e001:	e8 6a 28 ff ff       	call   c0000870 <strcat>
c000e006:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e00d:	e8 c1 9a ff ff       	call   c0007ad3 <malloc>
c000e012:	83 c4 0c             	add    esp,0xc
c000e015:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e019:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e01d:	89 c3                	mov    ebx,eax
c000e01f:	57                   	push   edi
c000e020:	56                   	push   esi
c000e021:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e028:	55                   	push   ebp
c000e029:	50                   	push   eax
c000e02a:	e8 57 fb ff ff       	call   c000db86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e02f:	83 c4 14             	add    esp,0x14
c000e032:	53                   	push   ebx
c000e033:	e8 0e fc ff ff       	call   c000dc46 <LogicalDisk::assignDriveLetter()>
c000e038:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e03b:	e8 c0 fc ff ff       	call   c000dd00 <LogicalDisk::mount()>
c000e040:	58                   	pop    eax
c000e041:	5a                   	pop    edx
c000e042:	53                   	push   ebx
c000e043:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e04a:	e8 89 e9 ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c000e04f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e055:	5b                   	pop    ebx
c000e056:	5e                   	pop    esi
c000e057:	5f                   	pop    edi
c000e058:	5d                   	pop    ebp
c000e059:	c3                   	ret    

c000e05a <createPartitionsForDisk(PhysicalDisk*)>:
c000e05a:	55                   	push   ebp
c000e05b:	57                   	push   edi
c000e05c:	56                   	push   esi
c000e05d:	53                   	push   ebx
c000e05e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e064:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e06b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e071:	3d 00 02 00 00       	cmp    eax,0x200
c000e076:	74 27                	je     c000e09f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e078:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e07e:	83 ec 10             	sub    esp,0x10
c000e081:	99                   	cdq    
c000e082:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e088:	52                   	push   edx
c000e089:	50                   	push   eax
c000e08a:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e08e:	c1 e6 0a             	shl    esi,0xa
c000e091:	89 fd                	mov    ebp,edi
c000e093:	55                   	push   ebp
c000e094:	56                   	push   esi
c000e095:	e8 76 16 01 00       	call   c001f710 <__udivdi3>
c000e09a:	e9 b9 00 00 00       	jmp    c000e158 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e09f:	83 ec 0c             	sub    esp,0xc
c000e0a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0a4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0a8:	56                   	push   esi
c000e0a9:	6a 01                	push   0x1
c000e0ab:	6a 00                	push   0x0
c000e0ad:	6a 00                	push   0x0
c000e0af:	53                   	push   ebx
c000e0b0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0b3:	83 c4 20             	add    esp,0x20
c000e0b6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0be:	75 0a                	jne    c000e0ca <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0c0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0c8:	74 2c                	je     c000e0f6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0d0:	83 ec 10             	sub    esp,0x10
c000e0d3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0d9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0df:	89 f7                	mov    edi,esi
c000e0e1:	c1 ff 1f             	sar    edi,0x1f
c000e0e4:	57                   	push   edi
c000e0e5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0e9:	56                   	push   esi
c000e0ea:	c1 e0 0a             	shl    eax,0xa
c000e0ed:	52                   	push   edx
c000e0ee:	50                   	push   eax
c000e0ef:	e8 1c 16 01 00       	call   c001f710 <__udivdi3>
c000e0f4:	eb 62                	jmp    c000e158 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0f6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0fd:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e104:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e10b:	89 cf                	mov    edi,ecx
c000e10d:	83 e2 7f             	and    edx,0x7f
c000e110:	83 e7 7f             	and    edi,0x7f
c000e113:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e116:	83 e0 7f             	and    eax,0x7f
c000e119:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e11c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e123:	83 e0 7f             	and    eax,0x7f
c000e126:	01 d0                	add    eax,edx
c000e128:	84 c0                	test   al,al
c000e12a:	89 c5                	mov    ebp,eax
c000e12c:	74 41                	je     c000e16f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e12e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e134:	83 ec 10             	sub    esp,0x10
c000e137:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e13d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e143:	89 f7                	mov    edi,esi
c000e145:	c1 ff 1f             	sar    edi,0x1f
c000e148:	57                   	push   edi
c000e149:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e14d:	56                   	push   esi
c000e14e:	c1 e0 0a             	shl    eax,0xa
c000e151:	52                   	push   edx
c000e152:	50                   	push   eax
c000e153:	e8 b8 15 01 00       	call   c001f710 <__udivdi3>
c000e158:	83 c4 14             	add    esp,0x14
c000e15b:	52                   	push   edx
c000e15c:	50                   	push   eax
c000e15d:	6a 00                	push   0x0
c000e15f:	6a 00                	push   0x0
c000e161:	53                   	push   ebx
c000e162:	e8 4b fe ff ff       	call   c000dfb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e167:	83 c4 20             	add    esp,0x20
c000e16a:	e9 73 01 00 00       	jmp    c000e2e2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e16f:	89 f0                	mov    eax,esi
c000e171:	31 c9                	xor    ecx,ecx
c000e173:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e17a:	75 02                	jne    c000e17e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e17c:	89 cd                	mov    ebp,ecx
c000e17e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e186:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e18d:	83 c0 10             	add    eax,0x10
c000e190:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e198:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e19f:	c1 e2 08             	shl    edx,0x8
c000e1a2:	c1 e6 10             	shl    esi,0x10
c000e1a5:	09 f2                	or     edx,esi
c000e1a7:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e1ae:	09 f2                	or     edx,esi
c000e1b0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1b7:	c1 e6 18             	shl    esi,0x18
c000e1ba:	09 f2                	or     edx,esi
c000e1bc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1c3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1c7:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1ce:	c1 e6 10             	shl    esi,0x10
c000e1d1:	c1 e2 08             	shl    edx,0x8
c000e1d4:	09 f2                	or     edx,esi
c000e1d6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1dd:	09 f2                	or     edx,esi
c000e1df:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1e6:	c1 e6 18             	shl    esi,0x18
c000e1e9:	09 f2                	or     edx,esi
c000e1eb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1ef:	41                   	inc    ecx
c000e1f0:	83 f9 04             	cmp    ecx,0x4
c000e1f3:	0f 85 7a ff ff ff    	jne    c000e173 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1fd:	83 f0 01             	xor    eax,0x1
c000e200:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e204:	75 4f                	jne    c000e255 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e20a:	83 f0 01             	xor    eax,0x1
c000e20d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e211:	75 42                	jne    c000e255 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e213:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e219:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e221:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e227:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e22f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e235:	89 f7                	mov    edi,esi
c000e237:	c1 ff 1f             	sar    edi,0x1f
c000e23a:	57                   	push   edi
c000e23b:	56                   	push   esi
c000e23c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e240:	52                   	push   edx
c000e241:	c1 e0 0a             	shl    eax,0xa
c000e244:	50                   	push   eax
c000e245:	e8 c6 14 01 00       	call   c001f710 <__udivdi3>
c000e24a:	83 c4 10             	add    esp,0x10
c000e24d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e251:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e255:	89 e8                	mov    eax,ebp
c000e257:	0f b6 e8             	movzx  ebp,al
c000e25a:	85 ed                	test   ebp,ebp
c000e25c:	74 50                	je     c000e2ae <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e25e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e262:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e26a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e26e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e272:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e276:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e27a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e27e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e28e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e292:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e296:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e29a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e29e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2a2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2a6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2aa:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2ae:	31 ed                	xor    ebp,ebp
c000e2b0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2b4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2b8:	89 f8                	mov    eax,edi
c000e2ba:	09 f0                	or     eax,esi
c000e2bc:	74 1e                	je     c000e2dc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2be:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2c2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2c6:	89 d1                	mov    ecx,edx
c000e2c8:	09 c1                	or     ecx,eax
c000e2ca:	74 10                	je     c000e2dc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2cc:	83 ec 0c             	sub    esp,0xc
c000e2cf:	57                   	push   edi
c000e2d0:	56                   	push   esi
c000e2d1:	52                   	push   edx
c000e2d2:	50                   	push   eax
c000e2d3:	53                   	push   ebx
c000e2d4:	e8 d9 fc ff ff       	call   c000dfb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2d9:	83 c4 20             	add    esp,0x20
c000e2dc:	45                   	inc    ebp
c000e2dd:	83 fd 04             	cmp    ebp,0x4
c000e2e0:	75 ce                	jne    c000e2b0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2e2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2e8:	5b                   	pop    ebx
c000e2e9:	5e                   	pop    esi
c000e2ea:	5f                   	pop    edi
c000e2eb:	5d                   	pop    ebp
c000e2ec:	c3                   	ret    
c000e2ed:	66 90                	xchg   ax,ax
c000e2ef:	90                   	nop

c000e2f0 <Serial::Serial(char const*)>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f7:	83 ec 08             	sub    esp,0x8
c000e2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2fe:	50                   	push   eax
c000e2ff:	e8 6c e8 ff ff       	call   c000cb70 <Device::Device(char const*)>
c000e304:	83 c4 10             	add    esp,0x10
c000e307:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c000e30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e310:	89 10                	mov    DWORD PTR [eax],edx
c000e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e316:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e320:	90                   	nop
c000e321:	83 c4 0c             	add    esp,0xc
c000e324:	c3                   	ret    
c000e325:	90                   	nop
c000e326:	66 90                	xchg   ax,ax

c000e328 <Serial::~Serial()>:
c000e328:	83 ec 0c             	sub    esp,0xc
c000e32b:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c000e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e334:	89 10                	mov    DWORD PTR [eax],edx
c000e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33a:	83 ec 0c             	sub    esp,0xc
c000e33d:	50                   	push   eax
c000e33e:	e8 97 e5 ff ff       	call   c000c8da <Device::~Device()>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	90                   	nop
c000e347:	83 c4 0c             	add    esp,0xc
c000e34a:	c3                   	ret    
c000e34b:	90                   	nop

c000e34c <Serial::~Serial()>:
c000e34c:	83 ec 0c             	sub    esp,0xc
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e356:	e8 cd ff ff ff       	call   c000e328 <Serial::~Serial()>
c000e35b:	83 c4 10             	add    esp,0x10
c000e35e:	83 ec 08             	sub    esp,0x8
c000e361:	68 58 01 00 00       	push   0x158
c000e366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36a:	e8 9d c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	83 c4 0c             	add    esp,0xc
c000e375:	c3                   	ret    
c000e376:	66 90                	xchg   ax,ax

c000e378 <Timer::Timer(char const*)>:
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37f:	83 ec 08             	sub    esp,0x8
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	50                   	push   eax
c000e387:	e8 e4 e7 ff ff       	call   c000cb70 <Device::Device(char const*)>
c000e38c:	83 c4 10             	add    esp,0x10
c000e38f:	ba 10 1e 02 c0       	mov    edx,0xc0021e10
c000e394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e398:	89 10                	mov    DWORD PTR [eax],edx
c000e39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3a8:	90                   	nop
c000e3a9:	83 c4 0c             	add    esp,0xc
c000e3ac:	c3                   	ret    
c000e3ad:	90                   	nop
c000e3ae:	66 90                	xchg   ax,ax

c000e3b0 <Timer::~Timer()>:
c000e3b0:	83 ec 0c             	sub    esp,0xc
c000e3b3:	ba 10 1e 02 c0       	mov    edx,0xc0021e10
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	89 10                	mov    DWORD PTR [eax],edx
c000e3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c2:	83 ec 0c             	sub    esp,0xc
c000e3c5:	50                   	push   eax
c000e3c6:	e8 0f e5 ff ff       	call   c000c8da <Device::~Device()>
c000e3cb:	83 c4 10             	add    esp,0x10
c000e3ce:	90                   	nop
c000e3cf:	83 c4 0c             	add    esp,0xc
c000e3d2:	c3                   	ret    
c000e3d3:	90                   	nop

c000e3d4 <Timer::~Timer()>:
c000e3d4:	83 ec 0c             	sub    esp,0xc
c000e3d7:	83 ec 0c             	sub    esp,0xc
c000e3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3de:	e8 cd ff ff ff       	call   c000e3b0 <Timer::~Timer()>
c000e3e3:	83 c4 10             	add    esp,0x10
c000e3e6:	83 ec 08             	sub    esp,0x8
c000e3e9:	68 5c 01 00 00       	push   0x15c
c000e3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f2:	e8 15 c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e3f7:	83 c4 10             	add    esp,0x10
c000e3fa:	83 c4 0c             	add    esp,0xc
c000e3fd:	c3                   	ret    

c000e3fe <Timer::read()>:
c000e3fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e402:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e408:	c3                   	ret    

c000e409 <setupTimer(int)>:
c000e409:	53                   	push   ebx
c000e40a:	83 ec 14             	sub    esp,0x14
c000e40d:	68 5c 01 00 00       	push   0x15c
c000e412:	e8 bc 96 ff ff       	call   c0007ad3 <malloc>
c000e417:	89 04 24             	mov    DWORD PTR [esp],eax
c000e41a:	89 c3                	mov    ebx,eax
c000e41c:	e8 4f 0b 01 00       	call   c001ef70 <PIT::PIT()>
c000e421:	58                   	pop    eax
c000e422:	5a                   	pop    edx
c000e423:	53                   	push   ebx
c000e424:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e42a:	e8 a9 e5 ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c000e42f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e431:	6a 00                	push   0x0
c000e433:	6a 00                	push   0x0
c000e435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e439:	53                   	push   ebx
c000e43a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e43d:	83 c4 28             	add    esp,0x28
c000e440:	89 d8                	mov    eax,ebx
c000e442:	5b                   	pop    ebx
c000e443:	c3                   	ret    

c000e444 <timerHandler(unsigned int)>:
c000e444:	56                   	push   esi
c000e445:	53                   	push   ebx
c000e446:	51                   	push   ecx
c000e447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e44b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e451:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e458:	0f 84 4a 01 00 00    	je     c000e5a8 <timerHandler(unsigned int)+0x164>
c000e45e:	fa                   	cli    
c000e45f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e465:	83 ec 0c             	sub    esp,0xc
c000e468:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e46d:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e473:	e8 68 18 01 00       	call   c001fce0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e478:	83 c4 10             	add    esp,0x10
c000e47b:	84 c0                	test   al,al
c000e47d:	0f 85 a1 00 00 00    	jne    c000e524 <timerHandler(unsigned int)+0xe0>
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e48b:	e8 6c 18 01 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e490:	83 c4 10             	add    esp,0x10
c000e493:	89 c6                	mov    esi,eax
c000e495:	8d 76 00             	lea    esi,[esi+0x0]
c000e498:	83 ec 0c             	sub    esp,0xc
c000e49b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4a0:	e8 57 18 01 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4a5:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4ac:	89 c3                	mov    ebx,eax
c000e4ae:	e8 51 18 01 00       	call   c001fd04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4bf:	77 23                	ja     c000e4e4 <timerHandler(unsigned int)+0xa0>
c000e4c1:	83 ec 0c             	sub    esp,0xc
c000e4c4:	53                   	push   ebx
c000e4c5:	e8 7a 80 00 00       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c000e4ca:	83 c4 10             	add    esp,0x10
c000e4cd:	39 de                	cmp    esi,ebx
c000e4cf:	75 27                	jne    c000e4f8 <timerHandler(unsigned int)+0xb4>
c000e4d1:	83 ec 0c             	sub    esp,0xc
c000e4d4:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d9:	e8 1e 18 01 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4de:	89 c6                	mov    esi,eax
c000e4e0:	eb 12                	jmp    c000e4f4 <timerHandler(unsigned int)+0xb0>
c000e4e2:	66 90                	xchg   ax,ax
c000e4e4:	52                   	push   edx
c000e4e5:	52                   	push   edx
c000e4e6:	53                   	push   ebx
c000e4e7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4ec:	e8 cf 18 01 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4f4:	83 c4 10             	add    esp,0x10
c000e4f7:	90                   	nop
c000e4f8:	83 ec 0c             	sub    esp,0xc
c000e4fb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e500:	e8 db 17 01 00       	call   c001fce0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e505:	83 c4 10             	add    esp,0x10
c000e508:	84 c0                	test   al,al
c000e50a:	75 18                	jne    c000e524 <timerHandler(unsigned int)+0xe0>
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e514:	e8 e3 17 01 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	39 f0                	cmp    eax,esi
c000e51e:	0f 85 74 ff ff ff    	jne    c000e498 <timerHandler(unsigned int)+0x54>
c000e524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e529:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e52d:	74 41                	je     c000e570 <timerHandler(unsigned int)+0x12c>
c000e52f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e536:	74 38                	je     c000e570 <timerHandler(unsigned int)+0x12c>
c000e538:	fa                   	cli    
c000e539:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e53f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e544:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e54a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e54d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e553:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e556:	72 08                	jb     c000e560 <timerHandler(unsigned int)+0x11c>
c000e558:	e8 ef 7a 00 00       	call   c001604c <schedule()>
c000e55d:	8d 76 00             	lea    esi,[esi+0x0]
c000e560:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e565:	48                   	dec    eax
c000e566:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e56b:	75 03                	jne    c000e570 <timerHandler(unsigned int)+0x12c>
c000e56d:	fb                   	sti    
c000e56e:	66 90                	xchg   ax,ax
c000e570:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e575:	48                   	dec    eax
c000e576:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e57b:	75 1b                	jne    c000e598 <timerHandler(unsigned int)+0x154>
c000e57d:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e584:	74 12                	je     c000e598 <timerHandler(unsigned int)+0x154>
c000e586:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e590:	e8 b7 7a 00 00       	call   c001604c <schedule()>
c000e595:	8d 76 00             	lea    esi,[esi+0x0]
c000e598:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e59d:	48                   	dec    eax
c000e59e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5a3:	75 03                	jne    c000e5a8 <timerHandler(unsigned int)+0x164>
c000e5a5:	fb                   	sti    
c000e5a6:	66 90                	xchg   ax,ax
c000e5a8:	58                   	pop    eax
c000e5a9:	5b                   	pop    ebx
c000e5aa:	5e                   	pop    esi
c000e5ab:	c3                   	ret    

c000e5ac <VCache::VCache(PhysicalDisk*)>:
c000e5ac:	53                   	push   ebx
c000e5ad:	83 ec 18             	sub    esp,0x18
c000e5b0:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c000e5b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b9:	89 10                	mov    DWORD PTR [eax],edx
c000e5bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5bf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ca:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e604:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e613:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e626:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e62a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e636:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e63d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e645:	83 ec 0c             	sub    esp,0xc
c000e648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e64c:	e8 82 94 ff ff       	call   c0007ad3 <malloc>
c000e651:	83 c4 10             	add    esp,0x10
c000e654:	89 c3                	mov    ebx,eax
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	53                   	push   ebx
c000e65a:	e8 8d 77 00 00       	call   c0015dec <Mutex::Mutex()>
c000e65f:	83 c4 10             	add    esp,0x10
c000e662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e666:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e678:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e67f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e683:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e690:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e694:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e69a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6a4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6a7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6bc:	05 00 02 00 00       	add    eax,0x200
c000e6c1:	c1 e0 03             	shl    eax,0x3
c000e6c4:	83 ec 0c             	sub    esp,0xc
c000e6c7:	50                   	push   eax
c000e6c8:	e8 06 94 ff ff       	call   c0007ad3 <malloc>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	89 c2                	mov    edx,eax
c000e6d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6dd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6f6:	89 d0                	mov    eax,edx
c000e6f8:	c1 e0 02             	shl    eax,0x2
c000e6fb:	01 d0                	add    eax,edx
c000e6fd:	c1 e0 04             	shl    eax,0x4
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	50                   	push   eax
c000e704:	e8 ca 93 ff ff       	call   c0007ad3 <malloc>
c000e709:	83 c4 10             	add    esp,0x10
c000e70c:	89 c2                	mov    edx,eax
c000e70e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e712:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e715:	90                   	nop
c000e716:	83 c4 18             	add    esp,0x18
c000e719:	5b                   	pop    ebx
c000e71a:	c3                   	ret    
c000e71b:	90                   	nop

c000e71c <VCache::invalidateReadBuffer()>:
c000e71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e720:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e726:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e72a:	c3                   	ret    
c000e72b:	90                   	nop

c000e72c <VCache::writeWriteBuffer()>:
c000e72c:	53                   	push   ebx
c000e72d:	83 ec 08             	sub    esp,0x8
c000e730:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e734:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e738:	74 1e                	je     c000e758 <VCache::writeWriteBuffer()+0x2c>
c000e73a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e73d:	83 ec 0c             	sub    esp,0xc
c000e740:	8b 10                	mov    edx,DWORD PTR [eax]
c000e742:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e745:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e748:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e74b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e74e:	50                   	push   eax
c000e74f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e752:	83 c4 20             	add    esp,0x20
c000e755:	8d 76 00             	lea    esi,[esi+0x0]
c000e758:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e75f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e766:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e76a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e771:	83 c4 08             	add    esp,0x8
c000e774:	5b                   	pop    ebx
c000e775:	c3                   	ret    
c000e776:	66 90                	xchg   ax,ax

c000e778 <VCache::~VCache()>:
c000e778:	83 ec 0c             	sub    esp,0xc
c000e77b:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c000e780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e784:	89 10                	mov    DWORD PTR [eax],edx
c000e786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e78d:	0f b6 c0             	movzx  eax,al
c000e790:	85 c0                	test   eax,eax
c000e792:	74 10                	je     c000e7a4 <VCache::~VCache()+0x2c>
c000e794:	83 ec 0c             	sub    esp,0xc
c000e797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e79b:	e8 8c ff ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e7a0:	83 c4 10             	add    esp,0x10
c000e7a3:	90                   	nop
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7ab:	83 ec 0c             	sub    esp,0xc
c000e7ae:	50                   	push   eax
c000e7af:	e8 2f 93 ff ff       	call   c0007ae3 <free>
c000e7b4:	83 c4 10             	add    esp,0x10
c000e7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7be:	83 ec 0c             	sub    esp,0xc
c000e7c1:	50                   	push   eax
c000e7c2:	e8 1c 93 ff ff       	call   c0007ae3 <free>
c000e7c7:	83 c4 10             	add    esp,0x10
c000e7ca:	90                   	nop
c000e7cb:	83 c4 0c             	add    esp,0xc
c000e7ce:	c3                   	ret    
c000e7cf:	90                   	nop

c000e7d0 <VCache::~VCache()>:
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	83 ec 0c             	sub    esp,0xc
c000e7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7da:	e8 99 ff ff ff       	call   c000e778 <VCache::~VCache()>
c000e7df:	83 c4 10             	add    esp,0x10
c000e7e2:	83 ec 08             	sub    esp,0x8
c000e7e5:	6a 44                	push   0x44
c000e7e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7eb:	e8 1c c0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e7f0:	83 c4 10             	add    esp,0x10
c000e7f3:	83 c4 0c             	add    esp,0xc
c000e7f6:	c3                   	ret    
c000e7f7:	90                   	nop

c000e7f8 <VCache::write(unsigned long long, int, void*)>:
c000e7f8:	55                   	push   ebp
c000e7f9:	57                   	push   edi
c000e7fa:	56                   	push   esi
c000e7fb:	53                   	push   ebx
c000e7fc:	83 ec 1c             	sub    esp,0x1c
c000e7ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e803:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e807:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e80b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e80f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e817:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e81b:	74 0f                	je     c000e82c <VCache::write(unsigned long long, int, void*)+0x34>
c000e81d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e821:	53                   	push   ebx
c000e822:	e8 f5 fe ff ff       	call   c000e71c <VCache::invalidateReadBuffer()>
c000e827:	58                   	pop    eax
c000e828:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e82c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e830:	74 66                	je     c000e898 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e832:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e839:	99                   	cdq    
c000e83a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e83d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e840:	89 c6                	mov    esi,eax
c000e842:	31 ce                	xor    esi,ecx
c000e844:	89 d0                	mov    eax,edx
c000e846:	31 e8                	xor    eax,ebp
c000e848:	09 c6                	or     esi,eax
c000e84a:	75 38                	jne    c000e884 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e84c:	83 ff 01             	cmp    edi,0x1
c000e84f:	75 33                	jne    c000e884 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e854:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e858:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e85c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e862:	0f af f9             	imul   edi,ecx
c000e865:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e868:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e86a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e86d:	40                   	inc    eax
c000e86e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e871:	83 f8 50             	cmp    eax,0x50
c000e874:	75 72                	jne    c000e8e8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	53                   	push   ebx
c000e87a:	e8 ad fe ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	eb 64                	jmp    c000e8e8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e884:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e888:	83 ec 0c             	sub    esp,0xc
c000e88b:	53                   	push   ebx
c000e88c:	e8 9b fe ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e891:	83 c4 10             	add    esp,0x10
c000e894:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e898:	83 ff 4f             	cmp    edi,0x4f
c000e89b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e89e:	7f 20                	jg     c000e8c0 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e8a0:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8a7:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e8aa:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8ad:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8b0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8b4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8bc:	eb 2a                	jmp    c000e8e8 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8be:	66 90                	xchg   ax,ax
c000e8c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8c6:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8ca:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8d2:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e8d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8da:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8dd:	83 c4 1c             	add    esp,0x1c
c000e8e0:	5b                   	pop    ebx
c000e8e1:	5e                   	pop    esi
c000e8e2:	5f                   	pop    edi
c000e8e3:	5d                   	pop    ebp
c000e8e4:	ff e0                	jmp    eax
c000e8e6:	66 90                	xchg   ax,ax
c000e8e8:	83 c4 1c             	add    esp,0x1c
c000e8eb:	31 c0                	xor    eax,eax
c000e8ed:	5b                   	pop    ebx
c000e8ee:	5e                   	pop    esi
c000e8ef:	5f                   	pop    edi
c000e8f0:	5d                   	pop    ebp
c000e8f1:	c3                   	ret    

c000e8f2 <VCache::read(unsigned long long, int, void*)>:
c000e8f2:	55                   	push   ebp
c000e8f3:	57                   	push   edi
c000e8f4:	56                   	push   esi
c000e8f5:	53                   	push   ebx
c000e8f6:	83 ec 1c             	sub    esp,0x1c
c000e8f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e901:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e905:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e909:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e90d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e911:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e915:	74 0d                	je     c000e924 <VCache::read(unsigned long long, int, void*)+0x32>
c000e917:	83 ec 0c             	sub    esp,0xc
c000e91a:	57                   	push   edi
c000e91b:	e8 0c fe ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c000e920:	83 c4 10             	add    esp,0x10
c000e923:	90                   	nop
c000e924:	83 fd 01             	cmp    ebp,0x1
c000e927:	0f 85 93 00 00 00    	jne    c000e9c0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e92d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e930:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e937:	89 04 24             	mov    DWORD PTR [esp],eax
c000e93a:	0f 85 80 00 00 00    	jne    c000e9c0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e940:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e943:	89 cd                	mov    ebp,ecx
c000e945:	f7 dd                	neg    ebp
c000e947:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e94b:	89 e8                	mov    eax,ebp
c000e94d:	21 dd                	and    ebp,ebx
c000e94f:	c1 f8 1f             	sar    eax,0x1f
c000e952:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e956:	89 e8                	mov    eax,ebp
c000e958:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e95c:	21 f5                	and    ebp,esi
c000e95e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e962:	89 ea                	mov    edx,ebp
c000e964:	74 2e                	je     c000e994 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e966:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e969:	75 29                	jne    c000e994 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e96b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e96e:	75 24                	jne    c000e994 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e970:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e973:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e979:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e97c:	8d 70 ff             	lea    esi,[eax-0x1]
c000e97f:	21 f3                	and    ebx,esi
c000e981:	0f af d9             	imul   ebx,ecx
c000e984:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e987:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e98b:	89 de                	mov    esi,ebx
c000e98d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e98f:	31 c0                	xor    eax,eax
c000e991:	eb 61                	jmp    c000e9f4 <VCache::read(unsigned long long, int, void*)+0x102>
c000e993:	90                   	nop
c000e994:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e99e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9a2:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9a5:	8b 36                	mov    esi,DWORD PTR [esi]
c000e9a7:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9aa:	51                   	push   ecx
c000e9ab:	52                   	push   edx
c000e9ac:	50                   	push   eax
c000e9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9b1:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e9b4:	83 c4 20             	add    esp,0x20
c000e9b7:	85 c0                	test   eax,eax
c000e9b9:	75 39                	jne    c000e9f4 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9bb:	eb b3                	jmp    c000e970 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e9c0:	83 ec 0c             	sub    esp,0xc
c000e9c3:	57                   	push   edi
c000e9c4:	e8 53 fd ff ff       	call   c000e71c <VCache::invalidateReadBuffer()>
c000e9c9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9d2:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9d6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9da:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9de:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9e6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9e9:	83 c4 2c             	add    esp,0x2c
c000e9ec:	5b                   	pop    ebx
c000e9ed:	5e                   	pop    esi
c000e9ee:	5f                   	pop    edi
c000e9ef:	5d                   	pop    ebp
c000e9f0:	ff e0                	jmp    eax
c000e9f2:	66 90                	xchg   ax,ax
c000e9f4:	83 c4 1c             	add    esp,0x1c
c000e9f7:	5b                   	pop    ebx
c000e9f8:	5e                   	pop    esi
c000e9f9:	5f                   	pop    edi
c000e9fa:	5d                   	pop    ebp
c000e9fb:	c3                   	ret    

c000e9fc <Video::putrect(int, int, int, int, unsigned int)>:
c000e9fc:	55                   	push   ebp
c000e9fd:	57                   	push   edi
c000e9fe:	56                   	push   esi
c000e9ff:	53                   	push   ebx
c000ea00:	83 ec 1c             	sub    esp,0x1c
c000ea03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea0b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea0f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea1b:	01 df                	add    edi,ebx
c000ea1d:	39 fb                	cmp    ebx,edi
c000ea1f:	7d 1f                	jge    c000ea40 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea21:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea25:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea29:	7d 12                	jge    c000ea3d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea2b:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea31:	53                   	push   ebx
c000ea32:	55                   	push   ebp
c000ea33:	45                   	inc    ebp
c000ea34:	56                   	push   esi
c000ea35:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea38:	83 c4 10             	add    esp,0x10
c000ea3b:	eb e8                	jmp    c000ea25 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea3d:	43                   	inc    ebx
c000ea3e:	eb dd                	jmp    c000ea1d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea40:	83 c4 1c             	add    esp,0x1c
c000ea43:	5b                   	pop    ebx
c000ea44:	5e                   	pop    esi
c000ea45:	5f                   	pop    edi
c000ea46:	5d                   	pop    ebp
c000ea47:	c3                   	ret    

c000ea48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea48:	55                   	push   ebp
c000ea49:	57                   	push   edi
c000ea4a:	31 ff                	xor    edi,edi
c000ea4c:	56                   	push   esi
c000ea4d:	53                   	push   ebx
c000ea4e:	83 ec 1c             	sub    esp,0x1c
c000ea51:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea55:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea59:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea60:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea6d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea71:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea78:	01 f9                	add    ecx,edi
c000ea7a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea7e:	7d 2f                	jge    c000eaaf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea80:	31 f6                	xor    esi,esi
c000ea82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea86:	01 f2                	add    edx,esi
c000ea88:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea8c:	7d 1a                	jge    c000eaa8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea91:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea94:	46                   	inc    esi
c000ea95:	51                   	push   ecx
c000ea96:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea9a:	52                   	push   edx
c000ea9b:	55                   	push   ebp
c000ea9c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea9f:	83 c4 10             	add    esp,0x10
c000eaa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaa6:	eb da                	jmp    c000ea82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eaa8:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eaac:	47                   	inc    edi
c000eaad:	eb c5                	jmp    c000ea74 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eaaf:	83 c4 1c             	add    esp,0x1c
c000eab2:	5b                   	pop    ebx
c000eab3:	5e                   	pop    esi
c000eab4:	5f                   	pop    edi
c000eab5:	5d                   	pop    ebp
c000eab6:	c3                   	ret    
c000eab7:	90                   	nop

c000eab8 <Video::blit(unsigned int*, int, int, int, int)>:
c000eab8:	55                   	push   ebp
c000eab9:	ba 00 00 00 00       	mov    edx,0x0
c000eabe:	57                   	push   edi
c000eabf:	56                   	push   esi
c000eac0:	53                   	push   ebx
c000eac1:	83 ec 1c             	sub    esp,0x1c
c000eac4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eac8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eacc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ead0:	85 c0                	test   eax,eax
c000ead2:	0f 49 d0             	cmovns edx,eax
c000ead5:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eadc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eae0:	89 eb                	mov    ebx,ebp
c000eae2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eae6:	01 ea                	add    edx,ebp
c000eae8:	39 da                	cmp    edx,ebx
c000eaea:	7e 54                	jle    c000eb40 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eaec:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eaf2:	7c 4c                	jl     c000eb40 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eaf4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eaf8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eafc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb00:	01 c1                	add    ecx,eax
c000eb02:	39 f9                	cmp    ecx,edi
c000eb04:	7e 2f                	jle    c000eb35 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eb06:	83 c2 04             	add    edx,0x4
c000eb09:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb0f:	7c 21                	jl     c000eb32 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eb11:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eb15:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb17:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb1a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb1e:	55                   	push   ebp
c000eb1f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb23:	56                   	push   esi
c000eb24:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb27:	83 c4 10             	add    esp,0x10
c000eb2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb32:	47                   	inc    edi
c000eb33:	eb c7                	jmp    c000eafc <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb39:	43                   	inc    ebx
c000eb3a:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb3e:	eb a2                	jmp    c000eae2 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb40:	83 c4 1c             	add    esp,0x1c
c000eb43:	5b                   	pop    ebx
c000eb44:	5e                   	pop    esi
c000eb45:	5f                   	pop    edi
c000eb46:	5d                   	pop    ebp
c000eb47:	c3                   	ret    

c000eb48 <Video::clearScreen(unsigned int)>:
c000eb48:	57                   	push   edi
c000eb49:	56                   	push   esi
c000eb4a:	53                   	push   ebx
c000eb4b:	31 db                	xor    ebx,ebx
c000eb4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb51:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb57:	7e 1f                	jle    c000eb78 <Video::clearScreen(unsigned int)+0x30>
c000eb59:	31 ff                	xor    edi,edi
c000eb5b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb61:	7e 12                	jle    c000eb75 <Video::clearScreen(unsigned int)+0x2d>
c000eb63:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb69:	53                   	push   ebx
c000eb6a:	57                   	push   edi
c000eb6b:	47                   	inc    edi
c000eb6c:	56                   	push   esi
c000eb6d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb70:	83 c4 10             	add    esp,0x10
c000eb73:	eb e6                	jmp    c000eb5b <Video::clearScreen(unsigned int)+0x13>
c000eb75:	43                   	inc    ebx
c000eb76:	eb d9                	jmp    c000eb51 <Video::clearScreen(unsigned int)+0x9>
c000eb78:	5b                   	pop    ebx
c000eb79:	5e                   	pop    esi
c000eb7a:	5f                   	pop    edi
c000eb7b:	c3                   	ret    

c000eb7c <Video::putpixel(int, int, unsigned int)>:
c000eb7c:	c7 44 24 04 48 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e48
c000eb84:	e9 16 2a 00 00       	jmp    c001159f <KePanic(char const*)>
c000eb89:	90                   	nop

c000eb8a <Video::readPixelApprox(int, int)>:
c000eb8a:	83 ec 18             	sub    esp,0x18
c000eb8d:	68 69 1e 02 c0       	push   0xc0021e69
c000eb92:	e8 08 2a 00 00       	call   c001159f <KePanic(char const*)>
c000eb97:	31 c0                	xor    eax,eax
c000eb99:	83 c4 1c             	add    esp,0x1c
c000eb9c:	c3                   	ret    
c000eb9d:	90                   	nop

c000eb9e <Video::Video(char const*)>:
c000eb9e:	83 ec 0c             	sub    esp,0xc
c000eba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba5:	83 ec 08             	sub    esp,0x8
c000eba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebac:	50                   	push   eax
c000ebad:	e8 be df ff ff       	call   c000cb70 <Device::Device(char const*)>
c000ebb2:	83 c4 10             	add    esp,0x10
c000ebb5:	ba e4 1e 02 c0       	mov    edx,0xc0021ee4
c000ebba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebbe:	89 10                	mov    DWORD PTR [eax],edx
c000ebc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebce:	90                   	nop
c000ebcf:	83 c4 0c             	add    esp,0xc
c000ebd2:	c3                   	ret    
c000ebd3:	90                   	nop

c000ebd4 <Video::~Video()>:
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	ba e4 1e 02 c0       	mov    edx,0xc0021ee4
c000ebdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe0:	89 10                	mov    DWORD PTR [eax],edx
c000ebe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	50                   	push   eax
c000ebea:	e8 eb dc ff ff       	call   c000c8da <Device::~Device()>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	90                   	nop
c000ebf3:	83 c4 0c             	add    esp,0xc
c000ebf6:	c3                   	ret    
c000ebf7:	90                   	nop

c000ebf8 <Video::~Video()>:
c000ebf8:	83 ec 0c             	sub    esp,0xc
c000ebfb:	83 ec 0c             	sub    esp,0xc
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	e8 cd ff ff ff       	call   c000ebd4 <Video::~Video()>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	83 ec 08             	sub    esp,0x8
c000ec0d:	68 64 01 00 00       	push   0x164
c000ec12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec16:	e8 f1 bb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ec1b:	83 c4 10             	add    esp,0x10
c000ec1e:	83 c4 0c             	add    esp,0xc
c000ec21:	c3                   	ret    

c000ec22 <Video::isMonochrome()>:
c000ec22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec26:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec2c:	c3                   	ret    
c000ec2d:	90                   	nop

c000ec2e <Video::getWidth()>:
c000ec2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec32:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec38:	c3                   	ret    
c000ec39:	90                   	nop

c000ec3a <Video::getHeight()>:
c000ec3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec44:	c3                   	ret    
c000ec45:	90                   	nop

c000ec46 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec46:	55                   	push   ebp
c000ec47:	57                   	push   edi
c000ec48:	56                   	push   esi
c000ec49:	53                   	push   ebx
c000ec4a:	83 ec 2c             	sub    esp,0x2c
c000ec4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec51:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec55:	83 f8 01             	cmp    eax,0x1
c000ec58:	19 c9                	sbb    ecx,ecx
c000ec5a:	31 db                	xor    ebx,ebx
c000ec5c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec60:	89 ce                	mov    esi,ecx
c000ec62:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec6a:	f7 d6                	not    esi
c000ec6c:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ec72:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec76:	01 d8                	add    eax,ebx
c000ec78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec7c:	57                   	push   edi
c000ec7d:	e8 b8 ff ff ff       	call   c000ec3a <Video::getHeight()>
c000ec82:	59                   	pop    ecx
c000ec83:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec87:	7e 70                	jle    c000ecf9 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec8d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ec91:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec98:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec9c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000eca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eca7:	89 e8                	mov    eax,ebp
c000eca9:	83 c0 20             	add    eax,0x20
c000ecac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ecb0:	57                   	push   edi
c000ecb1:	e8 78 ff ff ff       	call   c000ec2e <Video::getWidth()>
c000ecb6:	5a                   	pop    edx
c000ecb7:	39 c5                	cmp    ebp,eax
c000ecb9:	7d 34                	jge    c000ecef <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ecbb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecc0:	74 05                	je     c000ecc7 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecc2:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecc4:	56                   	push   esi
c000ecc5:	eb 0d                	jmp    c000ecd4 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecc7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000eccc:	74 12                	je     c000ece0 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecce:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecd4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecd8:	55                   	push   ebp
c000ecd9:	57                   	push   edi
c000ecda:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecdd:	83 c4 10             	add    esp,0x10
c000ece0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ece4:	45                   	inc    ebp
c000ece5:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ece9:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000eced:	75 c1                	jne    c000ecb0 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecef:	43                   	inc    ebx
c000ecf0:	83 fb 20             	cmp    ebx,0x20
c000ecf3:	0f 85 79 ff ff ff    	jne    c000ec72 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecf9:	83 c4 2c             	add    esp,0x2c
c000ecfc:	5b                   	pop    ebx
c000ecfd:	5e                   	pop    esi
c000ecfe:	5f                   	pop    edi
c000ecff:	5d                   	pop    ebp
c000ed00:	c3                   	ret    
c000ed01:	90                   	nop

c000ed02 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed02:	55                   	push   ebp
c000ed03:	57                   	push   edi
c000ed04:	56                   	push   esi
c000ed05:	53                   	push   ebx
c000ed06:	83 ec 28             	sub    esp,0x28
c000ed09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed0d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ed11:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed15:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed19:	c1 e7 08             	shl    edi,0x8
c000ed1c:	01 c7                	add    edi,eax
c000ed1e:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed22:	c1 e6 08             	shl    esi,0x8
c000ed25:	01 f0                	add    eax,esi
c000ed27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed2f:	0f af c7             	imul   eax,edi
c000ed32:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed39:	50                   	push   eax
c000ed3a:	e8 94 8d ff ff       	call   c0007ad3 <malloc>
c000ed3f:	83 c4 10             	add    esp,0x10
c000ed42:	85 c0                	test   eax,eax
c000ed44:	89 c5                	mov    ebp,eax
c000ed46:	75 10                	jne    c000ed58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed48:	83 ec 0c             	sub    esp,0xc
c000ed4b:	68 94 1e 02 c0       	push   0xc0021e94
c000ed50:	e8 4a 28 00 00       	call   c001159f <KePanic(char const*)>
c000ed55:	83 c4 10             	add    esp,0x10
c000ed58:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed5c:	ba 12 00 00 00       	mov    edx,0x12
c000ed61:	85 c0                	test   eax,eax
c000ed63:	74 11                	je     c000ed76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed65:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed69:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed6d:	c1 fa 03             	sar    edx,0x3
c000ed70:	0f af d1             	imul   edx,ecx
c000ed73:	83 c2 12             	add    edx,0x12
c000ed76:	85 ff                	test   edi,edi
c000ed78:	74 06                	je     c000ed80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed7a:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed7e:	75 12                	jne    c000ed92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed80:	83 ec 0c             	sub    esp,0xc
c000ed83:	68 a4 1e 02 c0       	push   0xc0021ea4
c000ed88:	e8 7d bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ed8d:	e9 b8 00 00 00       	jmp    c000ee4a <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed92:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed96:	83 f9 02             	cmp    ecx,0x2
c000ed99:	0f 85 96 00 00 00    	jne    c000ee35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed9f:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eda4:	75 0e                	jne    c000edb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eda6:	85 c0                	test   eax,eax
c000eda8:	75 0a                	jne    c000edb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edaa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000edad:	83 e8 18             	sub    eax,0x18
c000edb0:	a8 f7                	test   al,0xf7
c000edb2:	74 0a                	je     c000edbe <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000edb4:	83 ec 0c             	sub    esp,0xc
c000edb7:	68 b9 1e 02 c0       	push   0xc0021eb9
c000edbc:	eb 7f                	jmp    c000ee3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edbe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edc6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edce:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000edd2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edd6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edde:	75 0c                	jne    c000edec <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ede0:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ede5:	c1 e1 18             	shl    ecx,0x18
c000ede8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000edec:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edf1:	46                   	inc    esi
c000edf2:	89 c8                	mov    eax,ecx
c000edf4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edf9:	c1 e0 10             	shl    eax,0x10
c000edfc:	c1 e1 08             	shl    ecx,0x8
c000edff:	09 c1                	or     ecx,eax
c000ee01:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee05:	09 c1                	or     ecx,eax
c000ee07:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee0b:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ee0f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee13:	c1 f8 03             	sar    eax,0x3
c000ee16:	01 c2                	add    edx,eax
c000ee18:	89 f0                	mov    eax,esi
c000ee1a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee1e:	39 c7                	cmp    edi,eax
c000ee20:	7f b0                	jg     c000edd2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee2a:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee2d:	7e 22                	jle    c000ee51 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee2f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee33:	eb 99                	jmp    c000edce <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee35:	50                   	push   eax
c000ee36:	50                   	push   eax
c000ee37:	51                   	push   ecx
c000ee38:	68 c7 1e 02 c0       	push   0xc0021ec7
c000ee3d:	e8 c8 ba ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ee42:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee45:	e8 99 8c ff ff       	call   c0007ae3 <free>
c000ee4a:	83 c4 10             	add    esp,0x10
c000ee4d:	31 ed                	xor    ebp,ebp
c000ee4f:	eb 0f                	jmp    c000ee60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee55:	89 38                	mov    DWORD PTR [eax],edi
c000ee57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee5b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee5e:	89 38                	mov    DWORD PTR [eax],edi
c000ee60:	83 c4 1c             	add    esp,0x1c
c000ee63:	89 e8                	mov    eax,ebp
c000ee65:	5b                   	pop    ebx
c000ee66:	5e                   	pop    esi
c000ee67:	5f                   	pop    edi
c000ee68:	5d                   	pop    ebp
c000ee69:	c3                   	ret    

c000ee6a <Video::putTGA(int, int, unsigned char*, int)>:
c000ee6a:	55                   	push   ebp
c000ee6b:	57                   	push   edi
c000ee6c:	56                   	push   esi
c000ee6d:	53                   	push   ebx
c000ee6e:	83 ec 28             	sub    esp,0x28
c000ee71:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee75:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee79:	50                   	push   eax
c000ee7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee7e:	50                   	push   eax
c000ee7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee87:	57                   	push   edi
c000ee88:	e8 75 fe ff ff       	call   c000ed02 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee8d:	83 c4 20             	add    esp,0x20
c000ee90:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee94:	85 c0                	test   eax,eax
c000ee96:	74 35                	je     c000eecd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee98:	89 c6                	mov    esi,eax
c000ee9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eea2:	39 d8                	cmp    eax,ebx
c000eea4:	7e 27                	jle    c000eecd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eea6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eeaa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eeae:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eeb2:	39 e9                	cmp    ecx,ebp
c000eeb4:	7e 14                	jle    c000eeca <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eeb6:	83 c6 04             	add    esi,0x4
c000eeb9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eebb:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eebe:	53                   	push   ebx
c000eebf:	55                   	push   ebp
c000eec0:	45                   	inc    ebp
c000eec1:	57                   	push   edi
c000eec2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eec5:	83 c4 10             	add    esp,0x10
c000eec8:	eb e0                	jmp    c000eeaa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eeca:	43                   	inc    ebx
c000eecb:	eb cd                	jmp    c000ee9a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eecd:	83 c4 1c             	add    esp,0x1c
c000eed0:	5b                   	pop    ebx
c000eed1:	5e                   	pop    esi
c000eed2:	5f                   	pop    edi
c000eed3:	5d                   	pop    ebp
c000eed4:	c3                   	ret    
c000eed5:	66 90                	xchg   ax,ax
c000eed7:	90                   	nop

c000eed8 <ACPI::close(int, int, void*)>:
c000eed8:	83 ec 1c             	sub    esp,0x1c
c000eedb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eee3:	74 0b                	je     c000eef0 <ACPI::close(int, int, void*)+0x18>
c000eee5:	b8 00 00 00 00       	mov    eax,0x0
c000eeea:	e9 99 00 00 00       	jmp    c000ef88 <ACPI::close(int, int, void*)+0xb0>
c000eeef:	90                   	nop
c000eef0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eef5:	75 29                	jne    c000ef20 <ACPI::close(int, int, void*)+0x48>
c000eef7:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eefc:	85 c0                	test   eax,eax
c000eefe:	74 08                	je     c000ef08 <ACPI::close(int, int, void*)+0x30>
c000ef00:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef05:	ff d0                	call   eax
c000ef07:	90                   	nop
c000ef08:	83 ec 0c             	sub    esp,0xc
c000ef0b:	68 28 1f 02 c0       	push   0xc0021f28
c000ef10:	e8 8a 26 00 00       	call   c001159f <KePanic(char const*)>
c000ef15:	83 c4 10             	add    esp,0x10
c000ef18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef1d:	eb 69                	jmp    c000ef88 <ACPI::close(int, int, void*)+0xb0>
c000ef1f:	90                   	nop
c000ef20:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef25:	75 59                	jne    c000ef80 <ACPI::close(int, int, void*)+0xa8>
c000ef27:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef2c:	85 c0                	test   eax,eax
c000ef2e:	74 08                	je     c000ef38 <ACPI::close(int, int, void*)+0x60>
c000ef30:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef35:	ff d0                	call   eax
c000ef37:	90                   	nop
c000ef38:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef45:	83 e0 02             	and    eax,0x2
c000ef48:	74 1e                	je     c000ef68 <ACPI::close(int, int, void*)+0x90>
c000ef4a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef55:	89 c2                	mov    edx,eax
c000ef57:	ec                   	in     al,dx
c000ef58:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef5c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef60:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef64:	eb da                	jmp    c000ef40 <ACPI::close(int, int, void*)+0x68>
c000ef66:	66 90                	xchg   ax,ax
c000ef68:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ef6f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef74:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef7c:	ee                   	out    dx,al
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef85:	8d 76 00             	lea    esi,[esi+0x0]
c000ef88:	83 c4 1c             	add    esp,0x1c
c000ef8b:	c3                   	ret    

c000ef8c <findRSDP()>:
c000ef8c:	83 ec 1c             	sub    esp,0x1c
c000ef8f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef94:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef9a:	83 e0 04             	and    eax,0x4
c000ef9d:	0f b6 c0             	movzx  eax,al
c000efa0:	85 c0                	test   eax,eax
c000efa2:	75 08                	jne    c000efac <findRSDP()+0x20>
c000efa4:	b8 00 00 00 00       	mov    eax,0x0
c000efa9:	eb 75                	jmp    c000f020 <findRSDP()+0x94>
c000efab:	90                   	nop
c000efac:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000efb1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000efb6:	7f 1c                	jg     c000efd4 <findRSDP()+0x48>
c000efb8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efbd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000efc3:	83 e2 fb             	and    edx,0xfffffffb
c000efc6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000efcc:	b8 00 00 00 00       	mov    eax,0x0
c000efd1:	eb 4d                	jmp    c000f020 <findRSDP()+0x94>
c000efd3:	90                   	nop
c000efd4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000efdc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000efe4:	77 32                	ja     c000f018 <findRSDP()+0x8c>
c000efe6:	83 ec 04             	sub    esp,0x4
c000efe9:	6a 08                	push   0x8
c000efeb:	68 c3 1f 02 c0       	push   0xc0021fc3
c000eff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eff4:	e8 87 13 ff ff       	call   c0000380 <memcmp>
c000eff9:	83 c4 10             	add    esp,0x10
c000effc:	85 c0                	test   eax,eax
c000effe:	0f 94 c0             	sete   al
c000f001:	0f b6 c0             	movzx  eax,al
c000f004:	85 c0                	test   eax,eax
c000f006:	74 08                	je     c000f010 <findRSDP()+0x84>
c000f008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f00c:	eb 12                	jmp    c000f020 <findRSDP()+0x94>
c000f00e:	66 90                	xchg   ax,ax
c000f010:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f015:	eb c5                	jmp    c000efdc <findRSDP()+0x50>
c000f017:	90                   	nop
c000f018:	b8 00 00 00 00       	mov    eax,0x0
c000f01d:	8d 76 00             	lea    esi,[esi+0x0]
c000f020:	83 c4 1c             	add    esp,0x1c
c000f023:	c3                   	ret    

c000f024 <loadACPITables(unsigned char*)>:
c000f024:	57                   	push   edi
c000f025:	56                   	push   esi
c000f026:	53                   	push   ebx
c000f027:	83 ec 60             	sub    esp,0x60
c000f02a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f02f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f035:	83 e0 04             	and    eax,0x4
c000f038:	0f b6 c0             	movzx  eax,al
c000f03b:	85 c0                	test   eax,eax
c000f03d:	0f 84 41 02 00 00    	je     c000f284 <loadACPITables(unsigned char*)+0x260>
c000f043:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f048:	0f b6 c0             	movzx  eax,al
c000f04b:	85 c0                	test   eax,eax
c000f04d:	74 79                	je     c000f0c8 <loadACPITables(unsigned char*)+0xa4>
c000f04f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f053:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f057:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f05b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f05e:	83 e8 24             	sub    eax,0x24
c000f061:	c1 e8 03             	shr    eax,0x3
c000f064:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f068:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f070:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f074:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f078:	0f 8d ba 00 00 00    	jge    c000f138 <loadACPITables(unsigned char*)+0x114>
c000f07e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f082:	83 c0 24             	add    eax,0x24
c000f085:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f089:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f08d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f091:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f095:	c1 e0 03             	shl    eax,0x3
c000f098:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f09c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a5:	89 c1                	mov    ecx,eax
c000f0a7:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0ac:	8d 50 01             	lea    edx,[eax+0x1]
c000f0af:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0b5:	89 ca                	mov    edx,ecx
c000f0b7:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0be:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f0c3:	eb ab                	jmp    c000f070 <loadACPITables(unsigned char*)+0x4c>
c000f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0cc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0d7:	83 e8 24             	sub    eax,0x24
c000f0da:	c1 e8 02             	shr    eax,0x2
c000f0dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0e1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0f0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f0f4:	7d 42                	jge    c000f138 <loadACPITables(unsigned char*)+0x114>
c000f0f6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0fa:	83 c0 24             	add    eax,0x24
c000f0fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f101:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f105:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f109:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f10d:	c1 e0 02             	shl    eax,0x2
c000f110:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f114:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f118:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f11a:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f11f:	8d 50 01             	lea    edx,[eax+0x1]
c000f122:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f128:	89 ca                	mov    edx,ecx
c000f12a:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f131:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f136:	eb b4                	jmp    c000f0ec <loadACPITables(unsigned char*)+0xc8>
c000f138:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f140:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f145:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f149:	0f 8d 39 01 00 00    	jge    c000f288 <loadACPITables(unsigned char*)+0x264>
c000f14f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f153:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f15a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f15e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f162:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f16a:	25 ff 0f 00 00       	and    eax,0xfff
c000f16f:	89 c6                	mov    esi,eax
c000f171:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f177:	83 ec 0c             	sub    esp,0xc
c000f17a:	6a 01                	push   0x1
c000f17c:	e8 74 a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f181:	83 c4 10             	add    esp,0x10
c000f184:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f188:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f18e:	83 ec 0c             	sub    esp,0xc
c000f191:	6a 01                	push   0x1
c000f193:	6a 01                	push   0x1
c000f195:	50                   	push   eax
c000f196:	52                   	push   edx
c000f197:	53                   	push   ebx
c000f198:	e8 6b ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f19d:	83 c4 20             	add    esp,0x20
c000f1a0:	09 f0                	or     eax,esi
c000f1a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1a6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1aa:	c1 e0 03             	shl    eax,0x3
c000f1ad:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f1b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1be:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f1c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f1ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f1da:	89 c6                	mov    esi,eax
c000f1dc:	89 d7                	mov    edi,edx
c000f1de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1e0:	89 c8                	mov    eax,ecx
c000f1e2:	89 fa                	mov    edx,edi
c000f1e4:	89 f3                	mov    ebx,esi
c000f1e6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f1ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f1ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f201:	05 00 10 00 00       	add    eax,0x1000
c000f206:	c1 e8 0c             	shr    eax,0xc
c000f209:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f20d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f211:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f215:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f219:	25 ff 0f 00 00       	and    eax,0xfff
c000f21e:	89 c6                	mov    esi,eax
c000f220:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f226:	83 ec 0c             	sub    esp,0xc
c000f229:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f22d:	e8 c3 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f232:	83 c4 10             	add    esp,0x10
c000f235:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f239:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f23f:	83 ec 0c             	sub    esp,0xc
c000f242:	6a 01                	push   0x1
c000f244:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f248:	50                   	push   eax
c000f249:	52                   	push   edx
c000f24a:	53                   	push   ebx
c000f24b:	e8 b8 ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f250:	83 c4 20             	add    esp,0x20
c000f253:	09 f0                	or     eax,esi
c000f255:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f25d:	83 ec 0c             	sub    esp,0xc
c000f260:	50                   	push   eax
c000f261:	e8 a3 a6 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f266:	83 c4 10             	add    esp,0x10
c000f269:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f26d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f271:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f278:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f27d:	e9 be fe ff ff       	jmp    c000f140 <loadACPITables(unsigned char*)+0x11c>
c000f282:	66 90                	xchg   ax,ax
c000f284:	90                   	nop
c000f285:	8d 76 00             	lea    esi,[esi+0x0]
c000f288:	83 c4 60             	add    esp,0x60
c000f28b:	5b                   	pop    ebx
c000f28c:	5e                   	pop    esi
c000f28d:	5f                   	pop    edi
c000f28e:	c3                   	ret    
c000f28f:	90                   	nop

c000f290 <findRSDT(unsigned char*)>:
c000f290:	57                   	push   edi
c000f291:	56                   	push   esi
c000f292:	53                   	push   ebx
c000f293:	83 ec 50             	sub    esp,0x50
c000f296:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f29b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f2a1:	83 e0 04             	and    eax,0x4
c000f2a4:	0f b6 c0             	movzx  eax,al
c000f2a7:	85 c0                	test   eax,eax
c000f2a9:	75 0d                	jne    c000f2b8 <findRSDT(unsigned char*)+0x28>
c000f2ab:	b8 00 00 00 00       	mov    eax,0x0
c000f2b0:	e9 2b 01 00 00       	jmp    c000f3e0 <findRSDT(unsigned char*)+0x150>
c000f2b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2b8:	89 e0                	mov    eax,esp
c000f2ba:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2be:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f2c6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f2ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f2da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f2de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	89 d7                	mov    edi,edx
c000f2e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2e8:	89 c8                	mov    eax,ecx
c000f2ea:	89 fa                	mov    edx,edi
c000f2ec:	89 f3                	mov    ebx,esi
c000f2ee:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f2f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2f6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2fa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2fe:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f302:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f30a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f312:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f31a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f31e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f322:	25 ff 0f 00 00       	and    eax,0xfff
c000f327:	89 c6                	mov    esi,eax
c000f329:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f32f:	83 ec 0c             	sub    esp,0xc
c000f332:	6a 02                	push   0x2
c000f334:	e8 bc a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f339:	83 c4 10             	add    esp,0x10
c000f33c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f340:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f346:	83 ec 0c             	sub    esp,0xc
c000f349:	6a 01                	push   0x1
c000f34b:	6a 02                	push   0x2
c000f34d:	50                   	push   eax
c000f34e:	52                   	push   edx
c000f34f:	53                   	push   ebx
c000f350:	e8 b3 ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f355:	83 c4 20             	add    esp,0x20
c000f358:	09 f0                	or     eax,esi
c000f35a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f35e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f362:	25 ff 0f 00 00       	and    eax,0xfff
c000f367:	89 c6                	mov    esi,eax
c000f369:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f36f:	83 ec 0c             	sub    esp,0xc
c000f372:	6a 02                	push   0x2
c000f374:	e8 7c a2 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f380:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f386:	83 ec 0c             	sub    esp,0xc
c000f389:	6a 01                	push   0x1
c000f38b:	6a 02                	push   0x2
c000f38d:	50                   	push   eax
c000f38e:	52                   	push   edx
c000f38f:	53                   	push   ebx
c000f390:	e8 73 ab ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f395:	83 c4 20             	add    esp,0x20
c000f398:	09 f0                	or     eax,esi
c000f39a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f39e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3a3:	85 c0                	test   eax,eax
c000f3a5:	75 11                	jne    c000f3b8 <findRSDT(unsigned char*)+0x128>
c000f3a7:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f3ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3b6:	eb 24                	jmp    c000f3dc <findRSDT(unsigned char*)+0x14c>
c000f3b8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3bd:	83 f8 02             	cmp    eax,0x2
c000f3c0:	75 12                	jne    c000f3d4 <findRSDT(unsigned char*)+0x144>
c000f3c2:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f3c9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3d1:	eb 09                	jmp    c000f3dc <findRSDT(unsigned char*)+0x14c>
c000f3d3:	90                   	nop
c000f3d4:	b8 00 00 00 00       	mov    eax,0x0
c000f3d9:	eb 05                	jmp    c000f3e0 <findRSDT(unsigned char*)+0x150>
c000f3db:	90                   	nop
c000f3dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3e0:	83 c4 50             	add    esp,0x50
c000f3e3:	5b                   	pop    ebx
c000f3e4:	5e                   	pop    esi
c000f3e5:	5f                   	pop    edi
c000f3e6:	c3                   	ret    
c000f3e7:	90                   	nop

c000f3e8 <findDataTable(unsigned char*, char*)>:
c000f3e8:	83 ec 1c             	sub    esp,0x1c
c000f3eb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3f0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3f6:	83 e0 04             	and    eax,0x4
c000f3f9:	0f b6 c0             	movzx  eax,al
c000f3fc:	85 c0                	test   eax,eax
c000f3fe:	75 08                	jne    c000f408 <findDataTable(unsigned char*, char*)+0x20>
c000f400:	b8 00 00 00 00       	mov    eax,0x0
c000f405:	eb 5d                	jmp    c000f464 <findDataTable(unsigned char*, char*)+0x7c>
c000f407:	90                   	nop
c000f408:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f410:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f415:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f419:	7d 41                	jge    c000f45c <findDataTable(unsigned char*, char*)+0x74>
c000f41b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f41f:	c1 e0 03             	shl    eax,0x3
c000f422:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f427:	83 ec 04             	sub    esp,0x4
c000f42a:	6a 04                	push   0x4
c000f42c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f430:	50                   	push   eax
c000f431:	e8 4a 0f ff ff       	call   c0000380 <memcmp>
c000f436:	83 c4 10             	add    esp,0x10
c000f439:	85 c0                	test   eax,eax
c000f43b:	0f 94 c0             	sete   al
c000f43e:	0f b6 c0             	movzx  eax,al
c000f441:	85 c0                	test   eax,eax
c000f443:	74 0f                	je     c000f454 <findDataTable(unsigned char*, char*)+0x6c>
c000f445:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f449:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f450:	eb 12                	jmp    c000f464 <findDataTable(unsigned char*, char*)+0x7c>
c000f452:	66 90                	xchg   ax,ax
c000f454:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f459:	eb b5                	jmp    c000f410 <findDataTable(unsigned char*, char*)+0x28>
c000f45b:	90                   	nop
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	8d 76 00             	lea    esi,[esi+0x0]
c000f464:	83 c4 1c             	add    esp,0x1c
c000f467:	c3                   	ret    

c000f468 <scanMADT()>:
c000f468:	53                   	push   ebx
c000f469:	83 ec 38             	sub    esp,0x38
c000f46c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f471:	25 00 04 00 00       	and    eax,0x400
c000f476:	74 14                	je     c000f48c <scanMADT()+0x24>
c000f478:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f47d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f483:	83 e2 fb             	and    edx,0xfffffffb
c000f486:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f48c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f491:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f497:	83 e0 04             	and    eax,0x4
c000f49a:	0f b6 c0             	movzx  eax,al
c000f49d:	85 c0                	test   eax,eax
c000f49f:	0f 84 6b 04 00 00    	je     c000f910 <scanMADT()+0x4a8>
c000f4a5:	e8 e2 fa ff ff       	call   c000ef8c <findRSDP()>
c000f4aa:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f4af:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4b4:	85 c0                	test   eax,eax
c000f4b6:	75 1c                	jne    c000f4d4 <scanMADT()+0x6c>
c000f4b8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4bd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4c3:	83 e2 fb             	and    edx,0xfffffffb
c000f4c6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4cc:	e9 47 04 00 00       	jmp    c000f918 <scanMADT()+0x4b0>
c000f4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d4:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4d9:	83 ec 0c             	sub    esp,0xc
c000f4dc:	50                   	push   eax
c000f4dd:	e8 ae fd ff ff       	call   c000f290 <findRSDT(unsigned char*)>
c000f4e2:	83 c4 10             	add    esp,0x10
c000f4e5:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f4ea:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4ef:	85 c0                	test   eax,eax
c000f4f1:	75 19                	jne    c000f50c <scanMADT()+0xa4>
c000f4f3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4fe:	83 e2 fb             	and    edx,0xfffffffb
c000f501:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f507:	e9 0c 04 00 00       	jmp    c000f918 <scanMADT()+0x4b0>
c000f50c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f511:	83 ec 0c             	sub    esp,0xc
c000f514:	50                   	push   eax
c000f515:	e8 0a fb ff ff       	call   c000f024 <loadACPITables(unsigned char*)>
c000f51a:	83 c4 10             	add    esp,0x10
c000f51d:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f522:	83 ec 08             	sub    esp,0x8
c000f525:	68 cc 1f 02 c0       	push   0xc0021fcc
c000f52a:	50                   	push   eax
c000f52b:	e8 b8 fe ff ff       	call   c000f3e8 <findDataTable(unsigned char*, char*)>
c000f530:	83 c4 10             	add    esp,0x10
c000f533:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f537:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f53c:	75 1a                	jne    c000f558 <scanMADT()+0xf0>
c000f53e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f543:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f549:	83 e2 fe             	and    edx,0xfffffffe
c000f54c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f552:	e9 c1 03 00 00       	jmp    c000f918 <scanMADT()+0x4b0>
c000f557:	90                   	nop
c000f558:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f560:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f567:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f56b:	0f 87 a7 03 00 00    	ja     c000f918 <scanMADT()+0x4b0>
c000f571:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f579:	0f 87 99 03 00 00    	ja     c000f918 <scanMADT()+0x4b0>
c000f57f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f583:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f587:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f58b:	8d 50 01             	lea    edx,[eax+0x1]
c000f58e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f592:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f596:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f59a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f59e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5b1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f5b5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f5ba:	83 f8 02             	cmp    eax,0x2
c000f5bd:	0f 86 51 03 00 00    	jbe    c000f914 <scanMADT()+0x4ac>
c000f5c3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5c8:	85 c0                	test   eax,eax
c000f5ca:	75 58                	jne    c000f624 <scanMADT()+0x1bc>
c000f5cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d0:	8d 50 01             	lea    edx,[eax+0x1]
c000f5d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5d7:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5dd:	0f b6 d2             	movzx  edx,dl
c000f5e0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5e4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5e8:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f5ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5f9:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5ff:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f602:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f608:	0f b6 d2             	movzx  edx,dl
c000f60b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f60f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f613:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f619:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f61e:	e9 d9 02 00 00       	jmp    c000f8fc <scanMADT()+0x494>
c000f623:	90                   	nop
c000f624:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f629:	83 f8 01             	cmp    eax,0x1
c000f62c:	0f 85 1a 01 00 00    	jne    c000f74c <scanMADT()+0x2e4>
c000f632:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f636:	8d 50 01             	lea    edx,[eax+0x1]
c000f639:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f63d:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f643:	0f b6 d2             	movzx  edx,dl
c000f646:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f64a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f64e:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f654:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f659:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f65d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f661:	01 d0                	add    eax,edx
c000f663:	83 c0 2c             	add    eax,0x2c
c000f666:	8a 00                	mov    al,BYTE PTR [eax]
c000f668:	0f b6 d0             	movzx  edx,al
c000f66b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f672:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f676:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f67a:	0f b6 c0             	movzx  eax,al
c000f67d:	c1 e0 08             	shl    eax,0x8
c000f680:	89 d1                	mov    ecx,edx
c000f682:	09 c1                	or     ecx,eax
c000f684:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f688:	8d 50 02             	lea    edx,[eax+0x2]
c000f68b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f68f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f693:	0f b6 c0             	movzx  eax,al
c000f696:	c1 e0 10             	shl    eax,0x10
c000f699:	09 c1                	or     ecx,eax
c000f69b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69f:	8d 50 03             	lea    edx,[eax+0x3]
c000f6a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6aa:	0f b6 c0             	movzx  eax,al
c000f6ad:	c1 e0 18             	shl    eax,0x18
c000f6b0:	09 c1                	or     ecx,eax
c000f6b2:	89 ca                	mov    edx,ecx
c000f6b4:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6b9:	0f b6 c0             	movzx  eax,al
c000f6bc:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f6c3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d0:	01 d0                	add    eax,edx
c000f6d2:	83 c0 2c             	add    eax,0x2c
c000f6d5:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d7:	0f b6 d0             	movzx  edx,al
c000f6da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6de:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6e9:	0f b6 c0             	movzx  eax,al
c000f6ec:	c1 e0 08             	shl    eax,0x8
c000f6ef:	89 d1                	mov    ecx,edx
c000f6f1:	09 c1                	or     ecx,eax
c000f6f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f7:	8d 50 02             	lea    edx,[eax+0x2]
c000f6fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f702:	0f b6 c0             	movzx  eax,al
c000f705:	c1 e0 10             	shl    eax,0x10
c000f708:	09 c1                	or     ecx,eax
c000f70a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70e:	8d 50 03             	lea    edx,[eax+0x3]
c000f711:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f715:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f719:	0f b6 c0             	movzx  eax,al
c000f71c:	c1 e0 18             	shl    eax,0x18
c000f71f:	09 c1                	or     ecx,eax
c000f721:	89 ca                	mov    edx,ecx
c000f723:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f728:	0f b6 c0             	movzx  eax,al
c000f72b:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f732:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f737:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f73c:	83 c0 01             	add    eax,0x1
c000f73f:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f744:	e9 b3 01 00 00       	jmp    c000f8fc <scanMADT()+0x494>
c000f749:	8d 76 00             	lea    esi,[esi+0x0]
c000f74c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f751:	83 f8 02             	cmp    eax,0x2
c000f754:	0f 85 ea 00 00 00    	jne    c000f844 <scanMADT()+0x3dc>
c000f75a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75e:	8d 50 01             	lea    edx,[eax+0x1]
c000f761:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f765:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f769:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f76d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f771:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f775:	8d 50 01             	lea    edx,[eax+0x1]
c000f778:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f77c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f780:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f784:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f788:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f78c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f790:	01 d0                	add    eax,edx
c000f792:	83 c0 2c             	add    eax,0x2c
c000f795:	8a 00                	mov    al,BYTE PTR [eax]
c000f797:	0f b6 d0             	movzx  edx,al
c000f79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f79e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7a5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7a9:	0f b6 c0             	movzx  eax,al
c000f7ac:	c1 e0 08             	shl    eax,0x8
c000f7af:	89 d1                	mov    ecx,edx
c000f7b1:	09 c1                	or     ecx,eax
c000f7b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b7:	8d 50 02             	lea    edx,[eax+0x2]
c000f7ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7c2:	0f b6 c0             	movzx  eax,al
c000f7c5:	c1 e0 10             	shl    eax,0x10
c000f7c8:	09 c1                	or     ecx,eax
c000f7ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ce:	8d 50 03             	lea    edx,[eax+0x3]
c000f7d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7d5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7d9:	0f b6 c0             	movzx  eax,al
c000f7dc:	c1 e0 18             	shl    eax,0x18
c000f7df:	09 c8                	or     eax,ecx
c000f7e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f7e5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f2:	01 d0                	add    eax,edx
c000f7f4:	83 c0 2c             	add    eax,0x2c
c000f7f7:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f9:	0f b6 d0             	movzx  edx,al
c000f7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f800:	8d 48 01             	lea    ecx,[eax+0x1]
c000f803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f807:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f80b:	0f b6 c0             	movzx  eax,al
c000f80e:	c1 e0 08             	shl    eax,0x8
c000f811:	09 d0                	or     eax,edx
c000f813:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f818:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f81d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f822:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f826:	88 90 c8 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc938],dl
c000f82c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f831:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f836:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f83e:	e9 b9 00 00 00       	jmp    c000f8fc <scanMADT()+0x494>
c000f843:	90                   	nop
c000f844:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f849:	83 f8 04             	cmp    eax,0x4
c000f84c:	0f 85 9a 00 00 00    	jne    c000f8ec <scanMADT()+0x484>
c000f852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f856:	8d 50 01             	lea    edx,[eax+0x1]
c000f859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f85d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f861:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f865:	0f b6 c0             	movzx  eax,al
c000f868:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f86c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f874:	01 d0                	add    eax,edx
c000f876:	83 c0 2c             	add    eax,0x2c
c000f879:	8a 00                	mov    al,BYTE PTR [eax]
c000f87b:	0f b6 d0             	movzx  edx,al
c000f87e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f882:	8d 48 01             	lea    ecx,[eax+0x1]
c000f885:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f889:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f88d:	0f b6 c0             	movzx  eax,al
c000f890:	c1 e0 08             	shl    eax,0x8
c000f893:	09 d0                	or     eax,edx
c000f895:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f899:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f89e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f8a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8b1:	0f b6 c0             	movzx  eax,al
c000f8b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8bc:	c1 e0 08             	shl    eax,0x8
c000f8bf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f8c3:	89 c1                	mov    ecx,eax
c000f8c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8c9:	c1 e0 18             	shl    eax,0x18
c000f8cc:	89 c3                	mov    ebx,eax
c000f8ce:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f8d3:	8d 50 01             	lea    edx,[eax+0x1]
c000f8d6:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f8dc:	09 d9                	or     ecx,ebx
c000f8de:	89 ca                	mov    edx,ecx
c000f8e0:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f8e7:	eb 13                	jmp    c000f8fc <scanMADT()+0x494>
c000f8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8f1:	83 f8 05             	cmp    eax,0x5
c000f8f4:	75 06                	jne    c000f8fc <scanMADT()+0x494>
c000f8f6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f8fb:	90                   	nop
c000f8fc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f901:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f905:	01 d0                	add    eax,edx
c000f907:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f90b:	e9 50 fc ff ff       	jmp    c000f560 <scanMADT()+0xf8>
c000f910:	90                   	nop
c000f911:	eb 05                	jmp    c000f918 <scanMADT()+0x4b0>
c000f913:	90                   	nop
c000f914:	90                   	nop
c000f915:	8d 76 00             	lea    esi,[esi+0x0]
c000f918:	83 c4 38             	add    esp,0x38
c000f91b:	5b                   	pop    ebx
c000f91c:	c3                   	ret    
c000f91d:	90                   	nop
c000f91e:	66 90                	xchg   ax,ax

c000f920 <ACPI::ACPI()>:
c000f920:	83 ec 0c             	sub    esp,0xc
c000f923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f927:	83 ec 08             	sub    esp,0x8
c000f92a:	68 d1 1f 02 c0       	push   0xc0021fd1
c000f92f:	50                   	push   eax
c000f930:	e8 3b d2 ff ff       	call   c000cb70 <Device::Device(char const*)>
c000f935:	83 c4 10             	add    esp,0x10
c000f938:	ba 24 21 02 c0       	mov    edx,0xc0022124
c000f93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f941:	89 10                	mov    DWORD PTR [eax],edx
c000f943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f947:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f952:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f960:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f96a:	e8 f9 fa ff ff       	call   c000f468 <scanMADT()>
c000f96f:	90                   	nop
c000f970:	83 c4 0c             	add    esp,0xc
c000f973:	c3                   	ret    

c000f974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f974:	83 ec 2c             	sub    esp,0x2c
c000f977:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f97b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f97f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f983:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f987:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f98c:	88 c8                	mov    al,cl
c000f98e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f992:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f997:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f99f:	90                   	nop
c000f9a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9a4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f9aa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9ae:	0f 8d b0 00 00 00    	jge    c000fa64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f9b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9bc:	83 c2 2a             	add    edx,0x2a
c000f9bf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f9c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f9c8:	0f b7 c0             	movzx  eax,ax
c000f9cb:	39 c2                	cmp    edx,eax
c000f9cd:	0f 85 85 00 00 00    	jne    c000fa58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9db:	83 c2 2a             	add    edx,0x2a
c000f9de:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f9e2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f9e7:	0f b6 c0             	movzx  eax,al
c000f9ea:	39 c2                	cmp    edx,eax
c000f9ec:	75 6a                	jne    c000fa58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9ee:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9f3:	85 c0                	test   eax,eax
c000f9f5:	74 3d                	je     c000fa34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f9f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9ff:	83 c2 2a             	add    edx,0x2a
c000fa02:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa0d:	39 c2                	cmp    edx,eax
c000fa0f:	74 13                	je     c000fa24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa11:	83 ec 0c             	sub    esp,0xc
c000fa14:	68 4c 1f 02 c0       	push   0xc0021f4c
c000fa19:	e8 81 1b 00 00       	call   c001159f <KePanic(char const*)>
c000fa1e:	83 c4 10             	add    esp,0x10
c000fa21:	8d 76 00             	lea    esi,[esi+0x0]
c000fa24:	83 ec 0c             	sub    esp,0xc
c000fa27:	68 d6 1f 02 c0       	push   0xc0021fd6
c000fa2c:	e8 6e 1b 00 00       	call   c001159f <KePanic(char const*)>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa40:	83 c2 2a             	add    edx,0x2a
c000fa43:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa47:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa49:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa4c:	89 01                	mov    DWORD PTR [ecx],eax
c000fa4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa51:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa56:	66 90                	xchg   ax,ax
c000fa58:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa5d:	e9 3e ff ff ff       	jmp    c000f9a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa62:	66 90                	xchg   ax,ax
c000fa64:	90                   	nop
c000fa65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa69:	83 c4 2c             	add    esp,0x2c
c000fa6c:	c2 04 00             	ret    0x4
c000fa6f:	90                   	nop

c000fa70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fa70:	83 ec 1c             	sub    esp,0x1c
c000fa73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa77:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa7f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa84:	88 c8                	mov    al,cl
c000fa86:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa8a:	88 d0                	mov    al,dl
c000fa8c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa94:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9e:	83 c2 2a             	add    edx,0x2a
c000faa1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000faa5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000faa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faad:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000faba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fabe:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000facd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fad1:	83 c0 01             	add    eax,0x1
c000fad4:	88 c1                	mov    cl,al
c000fad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fada:	83 c2 2a             	add    edx,0x2a
c000fadd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faef:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000faf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000faf6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fafa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fafe:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb04:	8d 50 01             	lea    edx,[eax+0x1]
c000fb07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb0b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb15:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb1b:	3d 00 02 00 00       	cmp    eax,0x200
c000fb20:	75 12                	jne    c000fb34 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb22:	83 ec 0c             	sub    esp,0xc
c000fb25:	68 e5 1f 02 c0       	push   0xc0021fe5
c000fb2a:	e8 70 1a 00 00       	call   c001159f <KePanic(char const*)>
c000fb2f:	83 c4 10             	add    esp,0x10
c000fb32:	66 90                	xchg   ax,ax
c000fb34:	90                   	nop
c000fb35:	83 c4 1c             	add    esp,0x1c
c000fb38:	c3                   	ret    
c000fb39:	90                   	nop
c000fb3a:	66 90                	xchg   ax,ax

c000fb3c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb3c:	b8 00 00 00 00       	mov    eax,0x0
c000fb41:	c3                   	ret    
c000fb42:	66 90                	xchg   ax,ax

c000fb44 <ACPI::detectPCI()>:
c000fb44:	53                   	push   ebx
c000fb45:	83 ec 28             	sub    esp,0x28
c000fb48:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb4d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb57:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb5d:	83 e0 04             	and    eax,0x4
c000fb60:	0f b6 c0             	movzx  eax,al
c000fb63:	85 c0                	test   eax,eax
c000fb65:	74 2d                	je     c000fb94 <ACPI::detectPCI()+0x50>
c000fb67:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fb6c:	83 ec 08             	sub    esp,0x8
c000fb6f:	68 02 20 02 c0       	push   0xc0022002
c000fb74:	50                   	push   eax
c000fb75:	e8 6e f8 ff ff       	call   c000f3e8 <findDataTable(unsigned char*, char*)>
c000fb7a:	83 c4 10             	add    esp,0x10
c000fb7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb81:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb86:	74 0c                	je     c000fb94 <ACPI::detectPCI()+0x50>
c000fb88:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb8d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb92:	66 90                	xchg   ax,ax
c000fb94:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fba0:	8a 00                	mov    al,BYTE PTR [eax]
c000fba2:	0f b6 c0             	movzx  eax,al
c000fba5:	83 f8 01             	cmp    eax,0x1
c000fba8:	75 0e                	jne    c000fbb8 <ACPI::detectPCI()+0x74>
c000fbaa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbaf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbb4:	eb 2e                	jmp    c000fbe4 <ACPI::detectPCI()+0xa0>
c000fbb6:	66 90                	xchg   ax,ax
c000fbb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbbc:	8a 00                	mov    al,BYTE PTR [eax]
c000fbbe:	0f b6 c0             	movzx  eax,al
c000fbc1:	83 f8 02             	cmp    eax,0x2
c000fbc4:	75 1e                	jne    c000fbe4 <ACPI::detectPCI()+0xa0>
c000fbc6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbcb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbd0:	85 c0                	test   eax,eax
c000fbd2:	74 10                	je     c000fbe4 <ACPI::detectPCI()+0xa0>
c000fbd4:	83 ec 0c             	sub    esp,0xc
c000fbd7:	68 7c 1f 02 c0       	push   0xc0021f7c
c000fbdc:	e8 be 19 00 00       	call   c001159f <KePanic(char const*)>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fbe8:	83 f0 01             	xor    eax,0x1
c000fbeb:	0f b6 c0             	movzx  eax,al
c000fbee:	85 c0                	test   eax,eax
c000fbf0:	74 46                	je     c000fc38 <ACPI::detectPCI()+0xf4>
c000fbf2:	e8 39 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fbf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbfb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc00:	75 0e                	jne    c000fc10 <ACPI::detectPCI()+0xcc>
c000fc02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc07:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc0c:	eb 2a                	jmp    c000fc38 <ACPI::detectPCI()+0xf4>
c000fc0e:	66 90                	xchg   ax,ax
c000fc10:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc15:	75 21                	jne    c000fc38 <ACPI::detectPCI()+0xf4>
c000fc17:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc1c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc21:	85 c0                	test   eax,eax
c000fc23:	74 13                	je     c000fc38 <ACPI::detectPCI()+0xf4>
c000fc25:	83 ec 0c             	sub    esp,0xc
c000fc28:	68 7c 1f 02 c0       	push   0xc0021f7c
c000fc2d:	e8 6d 19 00 00       	call   c001159f <KePanic(char const*)>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	8d 76 00             	lea    esi,[esi+0x0]
c000fc38:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc3d:	85 c0                	test   eax,eax
c000fc3f:	0f 84 87 00 00 00    	je     c000fccc <ACPI::detectPCI()+0x188>
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 07 20 02 c0       	push   0xc0022007
c000fc4d:	e8 4f 12 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c000fc52:	83 c4 10             	add    esp,0x10
c000fc55:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc5d:	83 ec 0c             	sub    esp,0xc
c000fc60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc64:	e8 6a 7e ff ff       	call   c0007ad3 <malloc>
c000fc69:	83 c4 10             	add    esp,0x10
c000fc6c:	89 c3                	mov    ebx,eax
c000fc6e:	83 ec 0c             	sub    esp,0xc
c000fc71:	53                   	push   ebx
c000fc72:	e8 c3 b4 00 00       	call   c001b13a <PCI::PCI()>
c000fc77:	83 c4 10             	add    esp,0x10
c000fc7a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc82:	83 ec 08             	sub    esp,0x8
c000fc85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc89:	50                   	push   eax
c000fc8a:	e8 49 cd ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c000fc8f:	83 c4 10             	add    esp,0x10
c000fc92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc96:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc98:	83 c0 08             	add    eax,0x8
c000fc9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc9d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fca2:	85 d2                	test   edx,edx
c000fca4:	74 0a                	je     c000fcb0 <ACPI::detectPCI()+0x16c>
c000fca6:	ba 01 00 00 00       	mov    edx,0x1
c000fcab:	eb 0b                	jmp    c000fcb8 <ACPI::detectPCI()+0x174>
c000fcad:	8d 76 00             	lea    esi,[esi+0x0]
c000fcb0:	ba 02 00 00 00       	mov    edx,0x2
c000fcb5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcb8:	6a 00                	push   0x0
c000fcba:	6a 00                	push   0x0
c000fcbc:	52                   	push   edx
c000fcbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcc1:	ff d0                	call   eax
c000fcc3:	83 c4 10             	add    esp,0x10
c000fcc6:	e9 91 00 00 00       	jmp    c000fd5c <ACPI::detectPCI()+0x218>
c000fccb:	90                   	nop
c000fccc:	83 ec 0c             	sub    esp,0xc
c000fccf:	68 1f 20 02 c0       	push   0xc002201f
c000fcd4:	e8 c8 11 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fce3:	83 ec 0c             	sub    esp,0xc
c000fce6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcea:	e8 e4 7d ff ff       	call   c0007ad3 <malloc>
c000fcef:	83 c4 10             	add    esp,0x10
c000fcf2:	89 c3                	mov    ebx,eax
c000fcf4:	83 ec 0c             	sub    esp,0xc
c000fcf7:	53                   	push   ebx
c000fcf8:	e8 e5 bf 00 00       	call   c001bce2 <IDE::IDE()>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd08:	83 ec 08             	sub    esp,0x8
c000fd0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd0f:	50                   	push   eax
c000fd10:	e8 c3 cc ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd1c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd2a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd37:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd44:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd46:	83 c0 08             	add    eax,0x8
c000fd49:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd4b:	6a 00                	push   0x0
c000fd4d:	6a 00                	push   0x0
c000fd4f:	6a 00                	push   0x0
c000fd51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd55:	ff d0                	call   eax
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	66 90                	xchg   ax,ax
c000fd5c:	90                   	nop
c000fd5d:	83 c4 28             	add    esp,0x28
c000fd60:	5b                   	pop    ebx
c000fd61:	c3                   	ret    
c000fd62:	66 90                	xchg   ax,ax

c000fd64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd64:	83 ec 1c             	sub    esp,0x1c
c000fd67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd6e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd72:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd77:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd7c:	83 ec 08             	sub    esp,0x8
c000fd7f:	52                   	push   edx
c000fd80:	50                   	push   eax
c000fd81:	e8 14 74 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fd86:	83 c4 10             	add    esp,0x10
c000fd89:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd8d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd92:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd97:	83 ec 04             	sub    esp,0x4
c000fd9a:	6a 01                	push   0x1
c000fd9c:	52                   	push   edx
c000fd9d:	50                   	push   eax
c000fd9e:	e8 0f 75 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	90                   	nop
c000fda7:	83 c4 1c             	add    esp,0x1c
c000fdaa:	c3                   	ret    
c000fdab:	90                   	nop

c000fdac <ACPI::sleep()>:
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdb4:	85 c0                	test   eax,eax
c000fdb6:	74 08                	je     c000fdc0 <ACPI::sleep()+0x14>
c000fdb8:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdbd:	ff d0                	call   eax
c000fdbf:	90                   	nop
c000fdc0:	90                   	nop
c000fdc1:	83 c4 0c             	add    esp,0xc
c000fdc4:	c3                   	ret    
c000fdc5:	90                   	nop
c000fdc6:	66 90                	xchg   ax,ax

c000fdc8 <ACPI::open(int, int, void*)>:
c000fdc8:	55                   	push   ebp
c000fdc9:	89 e5                	mov    ebp,esp
c000fdcb:	53                   	push   ebx
c000fdcc:	81 ec 74 01 00 00    	sub    esp,0x174
c000fdd2:	83 ec 0c             	sub    esp,0xc
c000fdd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdd8:	e8 67 fd ff ff       	call   c000fb44 <ACPI::detectPCI()>
c000fddd:	83 c4 10             	add    esp,0x10
c000fde0:	83 ec 0c             	sub    esp,0xc
c000fde3:	68 a4 1f 02 c0       	push   0xc0021fa4
c000fde8:	e8 b4 10 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c000fded:	83 c4 10             	add    esp,0x10
c000fdf0:	b8 4c 05 00 00       	mov    eax,0x54c
c000fdf5:	8a 00                	mov    al,BYTE PTR [eax]
c000fdf7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fdfa:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fdfe:	83 f8 01             	cmp    eax,0x1
c000fe01:	75 15                	jne    c000fe18 <ACPI::open(int, int, void*)+0x50>
c000fe03:	83 ec 0c             	sub    esp,0xc
c000fe06:	68 fd 18 02 c0       	push   0xc00218fd
c000fe0b:	e8 4f 4d 00 00       	call   c0014b5f <Thr::loadKernelSymbolTable(char const*)>
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	eb 33                	jmp    c000fe48 <ACPI::open(int, int, void*)+0x80>
c000fe15:	8d 76 00             	lea    esi,[esi+0x0]
c000fe18:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fe1c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe21:	75 15                	jne    c000fe38 <ACPI::open(int, int, void*)+0x70>
c000fe23:	83 ec 0c             	sub    esp,0xc
c000fe26:	68 34 20 02 c0       	push   0xc0022034
c000fe2b:	e8 2f 4d 00 00       	call   c0014b5f <Thr::loadKernelSymbolTable(char const*)>
c000fe30:	83 c4 10             	add    esp,0x10
c000fe33:	eb 13                	jmp    c000fe48 <ACPI::open(int, int, void*)+0x80>
c000fe35:	8d 76 00             	lea    esi,[esi+0x0]
c000fe38:	83 ec 0c             	sub    esp,0xc
c000fe3b:	68 52 20 02 c0       	push   0xc0022052
c000fe40:	e8 5a 17 00 00       	call   c001159f <KePanic(char const*)>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fe4c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fe53:	83 ec 0c             	sub    esp,0xc
c000fe56:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fe59:	e8 75 7c ff ff       	call   c0007ad3 <malloc>
c000fe5e:	83 c4 10             	add    esp,0x10
c000fe61:	89 c3                	mov    ebx,eax
c000fe63:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe68:	83 ec 04             	sub    esp,0x4
c000fe6b:	50                   	push   eax
c000fe6c:	68 6c 20 02 c0       	push   0xc002206c
c000fe71:	53                   	push   ebx
c000fe72:	e8 e1 bc ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fe7d:	83 ec 08             	sub    esp,0x8
c000fe80:	6a 01                	push   0x1
c000fe82:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe85:	e8 ec bc ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c000fe8a:	83 c4 10             	add    esp,0x10
c000fe8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fe90:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fe94:	75 12                	jne    c000fea8 <ACPI::open(int, int, void*)+0xe0>
c000fe96:	83 ec 0c             	sub    esp,0xc
c000fe99:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe9c:	e8 33 bd ff ff       	call   c000bbd4 <File::close()>
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	eb 06                	jmp    c000feac <ACPI::open(int, int, void*)+0xe4>
c000fea6:	66 90                	xchg   ax,ax
c000fea8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000feac:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000feb0:	74 16                	je     c000fec8 <ACPI::open(int, int, void*)+0x100>
c000feb2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000feb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb7:	83 c0 08             	add    eax,0x8
c000feba:	8b 00                	mov    eax,DWORD PTR [eax]
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fec2:	ff d0                	call   eax
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	90                   	nop
c000fec8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fecb:	83 f0 01             	xor    eax,0x1
c000fece:	0f b6 c0             	movzx  eax,al
c000fed1:	85 c0                	test   eax,eax
c000fed3:	74 3b                	je     c000ff10 <ACPI::open(int, int, void*)+0x148>
c000fed5:	83 ec 0c             	sub    esp,0xc
c000fed8:	68 8a 20 02 c0       	push   0xc002208a
c000fedd:	e8 bf 0f 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	83 ec 04             	sub    esp,0x4
c000fee8:	6a 0c                	push   0xc
c000feea:	68 a5 20 02 c0       	push   0xc00220a5
c000feef:	68 b6 20 02 c0       	push   0xc00220b6
c000fef4:	e8 e5 3e 00 00       	call   c0013dde <Reg::readIntWithDefault(char*, char*, int)>
c000fef9:	83 c4 10             	add    esp,0x10
c000fefc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000feff:	83 ec 0c             	sub    esp,0xc
c000ff02:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ff05:	e8 10 99 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000ff0a:	83 c4 10             	add    esp,0x10
c000ff0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff10:	83 ec 0c             	sub    esp,0xc
c000ff13:	68 f5 0a 02 c0       	push   0xc0020af5
c000ff18:	e8 84 0f 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c000ff1d:	83 c4 10             	add    esp,0x10
c000ff20:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff23:	83 ec 08             	sub    esp,0x8
c000ff26:	6a 13                	push   0x13
c000ff28:	50                   	push   eax
c000ff29:	e8 c2 cd ff ff       	call   c000ccf0 <getDevicesOfType(DeviceType)>
c000ff2e:	83 c4 0c             	add    esp,0xc
c000ff31:	8d 76 00             	lea    esi,[esi+0x0]
c000ff34:	83 ec 0c             	sub    esp,0xc
c000ff37:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff3a:	50                   	push   eax
c000ff3b:	e8 b0 ff 00 00       	call   c001fef0 <LinkedList<Device>::isEmpty()>
c000ff40:	83 c4 10             	add    esp,0x10
c000ff43:	83 f0 01             	xor    eax,0x1
c000ff46:	0f b6 c0             	movzx  eax,al
c000ff49:	85 c0                	test   eax,eax
c000ff4b:	0f 84 1f 01 00 00    	je     c0010070 <ACPI::open(int, int, void*)+0x2a8>
c000ff51:	83 ec 0c             	sub    esp,0xc
c000ff54:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff57:	50                   	push   eax
c000ff58:	e8 af ff 00 00       	call   c001ff0c <LinkedList<Device>::getFirstElement()>
c000ff5d:	83 c4 10             	add    esp,0x10
c000ff60:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000ff63:	83 ec 0c             	sub    esp,0xc
c000ff66:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ff69:	50                   	push   eax
c000ff6a:	e8 a5 ff 00 00       	call   c001ff14 <LinkedList<Device>::removeFirst()>
c000ff6f:	83 c4 10             	add    esp,0x10
c000ff72:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ff75:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ff78:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ff7b:	b8 24 00 00 00       	mov    eax,0x24
c000ff80:	83 e0 fc             	and    eax,0xfffffffc
c000ff83:	89 c3                	mov    ebx,eax
c000ff85:	b8 00 00 00 00       	mov    eax,0x0
c000ff8a:	66 90                	xchg   ax,ax
c000ff8c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ff93:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ff9a:	83 c0 04             	add    eax,0x4
c000ff9d:	39 d8                	cmp    eax,ebx
c000ff9f:	72 eb                	jb     c000ff8c <ACPI::open(int, int, void*)+0x1c4>
c000ffa1:	83 ec 08             	sub    esp,0x8
c000ffa4:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ffaa:	50                   	push   eax
c000ffab:	83 ec 24             	sub    esp,0x24
c000ffae:	89 e1                	mov    ecx,esp
c000ffb0:	b8 24 00 00 00       	mov    eax,0x24
c000ffb5:	83 e0 fc             	and    eax,0xfffffffc
c000ffb8:	89 c3                	mov    ebx,eax
c000ffba:	b8 00 00 00 00       	mov    eax,0x0
c000ffbf:	90                   	nop
c000ffc0:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ffc7:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ffca:	83 c0 04             	add    eax,0x4
c000ffcd:	39 d8                	cmp    eax,ebx
c000ffcf:	72 ef                	jb     c000ffc0 <ACPI::open(int, int, void*)+0x1f8>
c000ffd1:	e8 4c b6 00 00       	call   c001b622 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ffd6:	83 c4 30             	add    esp,0x30
c000ffd9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ffdc:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ffe0:	0f 84 4e ff ff ff    	je     c000ff34 <ACPI::open(int, int, void*)+0x16c>
c000ffe6:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ffed:	83 ec 0c             	sub    esp,0xc
c000fff0:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fff3:	e8 db 7a ff ff       	call   c0007ad3 <malloc>
c000fff8:	83 c4 10             	add    esp,0x10
c000fffb:	89 c3                	mov    ebx,eax
c000fffd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010002:	83 ec 04             	sub    esp,0x4
c0010005:	50                   	push   eax
c0010006:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010009:	53                   	push   ebx
c001000a:	e8 49 bb ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c001000f:	83 c4 10             	add    esp,0x10
c0010012:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0010015:	83 ec 0c             	sub    esp,0xc
c0010018:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001001b:	e8 1a be ff ff       	call   c000be3a <File::exists()>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	0f b6 c0             	movzx  eax,al
c0010026:	85 c0                	test   eax,eax
c0010028:	74 22                	je     c001004c <ACPI::open(int, int, void*)+0x284>
c001002a:	83 ec 08             	sub    esp,0x8
c001002d:	6a 01                	push   0x1
c001002f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0010032:	e8 aa 55 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c0010037:	83 c4 10             	add    esp,0x10
c001003a:	83 ec 08             	sub    esp,0x8
c001003d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0010040:	50                   	push   eax
c0010041:	e8 db 57 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c0010046:	83 c4 10             	add    esp,0x10
c0010049:	8d 76 00             	lea    esi,[esi+0x0]
c001004c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0010050:	0f 84 de fe ff ff    	je     c000ff34 <ACPI::open(int, int, void*)+0x16c>
c0010056:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0010059:	8b 00                	mov    eax,DWORD PTR [eax]
c001005b:	83 c0 08             	add    eax,0x8
c001005e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010060:	83 ec 0c             	sub    esp,0xc
c0010063:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c0010066:	ff d0                	call   eax
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	e9 c4 fe ff ff       	jmp    c000ff34 <ACPI::open(int, int, void*)+0x16c>
c0010070:	83 ec 0c             	sub    esp,0xc
c0010073:	8d 45 b8             	lea    eax,[ebp-0x48]
c0010076:	50                   	push   eax
c0010077:	e8 70 fe 00 00       	call   c001feec <LinkedList<Device>::~LinkedList()>
c001007c:	83 c4 10             	add    esp,0x10
c001007f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010085:	83 ec 08             	sub    esp,0x8
c0010088:	6a 01                	push   0x1
c001008a:	68 bd 20 02 c0       	push   0xc00220bd
c001008f:	e8 4d 55 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 ec 08             	sub    esp,0x8
c001009a:	53                   	push   ebx
c001009b:	50                   	push   eax
c001009c:	e8 80 57 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c00100a1:	83 c4 10             	add    esp,0x10
c00100a4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100a9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100af:	83 e0 04             	and    eax,0x4
c00100b2:	0f b6 c0             	movzx  eax,al
c00100b5:	85 c0                	test   eax,eax
c00100b7:	0f 84 e3 00 00 00    	je     c00101a0 <ACPI::open(int, int, void*)+0x3d8>
c00100bd:	83 ec 0c             	sub    esp,0xc
c00100c0:	68 da 20 02 c0       	push   0xc00220da
c00100c5:	e8 d7 0d 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c00100ca:	83 c4 10             	add    esp,0x10
c00100cd:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c00100d4:	83 ec 0c             	sub    esp,0xc
c00100d7:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c00100da:	e8 f4 79 ff ff       	call   c0007ad3 <malloc>
c00100df:	83 c4 10             	add    esp,0x10
c00100e2:	89 c3                	mov    ebx,eax
c00100e4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100e9:	83 ec 04             	sub    esp,0x4
c00100ec:	50                   	push   eax
c00100ed:	68 f7 20 02 c0       	push   0xc00220f7
c00100f2:	53                   	push   ebx
c00100f3:	e8 60 ba ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c00100f8:	83 c4 10             	add    esp,0x10
c00100fb:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00100fe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010102:	74 1c                	je     c0010120 <ACPI::open(int, int, void*)+0x358>
c0010104:	83 ec 0c             	sub    esp,0xc
c0010107:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001010a:	e8 2b bd ff ff       	call   c000be3a <File::exists()>
c001010f:	83 c4 10             	add    esp,0x10
c0010112:	0f b6 c0             	movzx  eax,al
c0010115:	85 c0                	test   eax,eax
c0010117:	74 07                	je     c0010120 <ACPI::open(int, int, void*)+0x358>
c0010119:	b0 01                	mov    al,0x1
c001011b:	eb 07                	jmp    c0010124 <ACPI::open(int, int, void*)+0x35c>
c001011d:	8d 76 00             	lea    esi,[esi+0x0]
c0010120:	b0 00                	mov    al,0x0
c0010122:	66 90                	xchg   ax,ax
c0010124:	0f b6 c0             	movzx  eax,al
c0010127:	85 c0                	test   eax,eax
c0010129:	74 21                	je     c001014c <ACPI::open(int, int, void*)+0x384>
c001012b:	83 ec 08             	sub    esp,0x8
c001012e:	6a 01                	push   0x1
c0010130:	68 f7 20 02 c0       	push   0xc00220f7
c0010135:	e8 a7 54 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c001013a:	83 c4 10             	add    esp,0x10
c001013d:	83 ec 08             	sub    esp,0x8
c0010140:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010143:	50                   	push   eax
c0010144:	e8 d8 56 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010150:	74 1e                	je     c0010170 <ACPI::open(int, int, void*)+0x3a8>
c0010152:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010156:	74 18                	je     c0010170 <ACPI::open(int, int, void*)+0x3a8>
c0010158:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001015b:	8b 00                	mov    eax,DWORD PTR [eax]
c001015d:	83 c0 08             	add    eax,0x8
c0010160:	8b 00                	mov    eax,DWORD PTR [eax]
c0010162:	83 ec 0c             	sub    esp,0xc
c0010165:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010168:	ff d0                	call   eax
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	8d 76 00             	lea    esi,[esi+0x0]
c0010170:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010175:	83 ec 08             	sub    esp,0x8
c0010178:	68 14 21 02 c0       	push   0xc0022114
c001017d:	50                   	push   eax
c001017e:	e8 65 f2 ff ff       	call   c000f3e8 <findDataTable(unsigned char*, char*)>
c0010183:	83 c4 10             	add    esp,0x10
c0010186:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0010189:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001018d:	74 11                	je     c00101a0 <ACPI::open(int, int, void*)+0x3d8>
c001018f:	83 ec 08             	sub    esp,0x8
c0010192:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0010195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010198:	e8 c7 fb ff ff       	call   c000fd64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	b8 00 00 00 00       	mov    eax,0x0
c00101a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00101a8:	c9                   	leave  
c00101a9:	c3                   	ret    

c00101aa <CPU::close(int, int, void*)>:
c00101aa:	31 c0                	xor    eax,eax
c00101ac:	c3                   	ret    
c00101ad:	90                   	nop

c00101ae <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00101ae:	60                   	pusha  
c00101af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101bb:	9c                   	pushf  
c00101bc:	fa                   	cli    
c00101bd:	0f 09                	wbinvd 
c00101bf:	0f 30                	wrmsr  
c00101c1:	9d                   	popf   
c00101c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101c6:	89 02                	mov    DWORD PTR [edx],eax
c00101c8:	61                   	popa   
c00101c9:	c3                   	ret    

c00101ca <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00101ca:	60                   	pusha  
c00101cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101cf:	9c                   	pushf  
c00101d0:	fa                   	cli    
c00101d1:	0f 09                	wbinvd 
c00101d3:	31 c0                	xor    eax,eax
c00101d5:	31 d2                	xor    edx,edx
c00101d7:	0f 32                	rdmsr  
c00101d9:	9d                   	popf   
c00101da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101de:	89 02                	mov    DWORD PTR [edx],eax
c00101e0:	61                   	popa   
c00101e1:	c3                   	ret    

c00101e2 <CPU::AMD_K6_writeback(int, int, int)>:
c00101e2:	56                   	push   esi
c00101e3:	53                   	push   ebx
c00101e4:	83 ec 10             	sub    esp,0x10
c00101e7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00101ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101f0:	75 5d                	jne    c001024f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00101f2:	83 f8 08             	cmp    eax,0x8
c00101f5:	75 09                	jne    c0010200 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00101f7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00101fc:	7e 13                	jle    c0010211 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00101fe:	eb 30                	jmp    c0010230 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010200:	83 f8 06             	cmp    eax,0x6
c0010203:	7c 4a                	jl     c001024f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010205:	83 f8 07             	cmp    eax,0x7
c0010208:	7e 07                	jle    c0010211 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001020a:	83 f8 09             	cmp    eax,0x9
c001020d:	74 21                	je     c0010230 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001020f:	eb 3e                	jmp    c001024f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010211:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010217:	89 e6                	mov    esi,esp
c0010219:	56                   	push   esi
c001021a:	68 82 00 00 c0       	push   0xc0000082
c001021f:	e8 a6 ff ff ff       	call   c00101ca <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010224:	c1 eb 15             	shr    ebx,0x15
c0010227:	56                   	push   esi
c0010228:	83 e3 7e             	and    ebx,0x7e
c001022b:	6a 00                	push   0x0
c001022d:	53                   	push   ebx
c001022e:	eb 12                	jmp    c0010242 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010230:	89 e3                	mov    ebx,esp
c0010232:	53                   	push   ebx
c0010233:	68 82 00 00 c0       	push   0xc0000082
c0010238:	e8 8d ff ff ff       	call   c00101ca <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001023d:	53                   	push   ebx
c001023e:	6a 00                	push   0x0
c0010240:	6a 00                	push   0x0
c0010242:	68 82 00 00 c0       	push   0xc0000082
c0010247:	e8 62 ff ff ff       	call   c00101ae <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001024c:	83 c4 18             	add    esp,0x18
c001024f:	83 c4 10             	add    esp,0x10
c0010252:	5b                   	pop    ebx
c0010253:	5e                   	pop    esi
c0010254:	c3                   	ret    
c0010255:	90                   	nop

c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010256:	55                   	push   ebp
c0010257:	57                   	push   edi
c0010258:	56                   	push   esi
c0010259:	53                   	push   ebx
c001025a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001025e:	39 05 d8 36 02 c0    	cmp    DWORD PTR ds:0xc00236d8,eax
c0010264:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010268:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001026c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010270:	75 23                	jne    c0010295 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010272:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010277:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001027b:	89 06                	mov    DWORD PTR [esi],eax
c001027d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010282:	89 07                	mov    DWORD PTR [edi],eax
c0010284:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010289:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001028c:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010291:	89 02                	mov    DWORD PTR [edx],eax
c0010293:	eb 3f                	jmp    c00102d4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010295:	31 c9                	xor    ecx,ecx
c0010297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029b:	0f a2                	cpuid  
c001029d:	89 06                	mov    DWORD PTR [esi],eax
c001029f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102a3:	89 1f                	mov    DWORD PTR [edi],ebx
c00102a5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00102a8:	89 10                	mov    DWORD PTR [eax],edx
c00102aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ae:	a3 d8 36 02 c0       	mov    ds:0xc00236d8,eax
c00102b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00102b5:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00102ba:	8b 07                	mov    eax,DWORD PTR [edi]
c00102bc:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00102c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102c4:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00102c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00102cf:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00102d4:	5b                   	pop    ebx
c00102d5:	5e                   	pop    esi
c00102d6:	5f                   	pop    edi
c00102d7:	5d                   	pop    ebp
c00102d8:	c3                   	ret    
c00102d9:	90                   	nop

c00102da <CPU::cpuidCheckEDX(unsigned int)>:
c00102da:	83 ec 10             	sub    esp,0x10
c00102dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e1:	50                   	push   eax
c00102e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e6:	50                   	push   eax
c00102e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102eb:	50                   	push   eax
c00102ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102f0:	50                   	push   eax
c00102f1:	6a 01                	push   0x1
c00102f3:	e8 5e ff ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102fc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010300:	0f 95 c0             	setne  al
c0010303:	83 c4 24             	add    esp,0x24
c0010306:	c3                   	ret    
c0010307:	90                   	nop

c0010308 <CPU::cpuidCheckECX(unsigned int)>:
c0010308:	83 ec 10             	sub    esp,0x10
c001030b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001030f:	50                   	push   eax
c0010310:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010314:	50                   	push   eax
c0010315:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010319:	50                   	push   eax
c001031a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001031e:	50                   	push   eax
c001031f:	6a 01                	push   0x1
c0010321:	e8 30 ff ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010326:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001032a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001032e:	0f 95 c0             	setne  al
c0010331:	83 c4 24             	add    esp,0x24
c0010334:	c3                   	ret    
c0010335:	90                   	nop

c0010336 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010336:	83 ec 10             	sub    esp,0x10
c0010339:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001033d:	50                   	push   eax
c001033e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010342:	50                   	push   eax
c0010343:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010347:	50                   	push   eax
c0010348:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001034c:	50                   	push   eax
c001034d:	6a 07                	push   0x7
c001034f:	e8 02 ff ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010354:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010358:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001035c:	0f 95 c0             	setne  al
c001035f:	83 c4 24             	add    esp,0x24
c0010362:	c3                   	ret    
c0010363:	90                   	nop

c0010364 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010364:	83 ec 10             	sub    esp,0x10
c0010367:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001036b:	50                   	push   eax
c001036c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010370:	50                   	push   eax
c0010371:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010375:	50                   	push   eax
c0010376:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037a:	50                   	push   eax
c001037b:	6a 07                	push   0x7
c001037d:	e8 d4 fe ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010386:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001038a:	0f 95 c0             	setne  al
c001038d:	83 c4 24             	add    esp,0x24
c0010390:	c3                   	ret    
c0010391:	90                   	nop

c0010392 <CPU::CPU()>:
c0010392:	83 ec 0c             	sub    esp,0xc
c0010395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010399:	83 ec 08             	sub    esp,0x8
c001039c:	68 39 22 02 c0       	push   0xc0022239
c00103a1:	50                   	push   eax
c00103a2:	e8 c9 c7 ff ff       	call   c000cb70 <Device::Device(char const*)>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	ba cc 22 02 c0       	mov    edx,0xc00222cc
c00103af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b3:	89 10                	mov    DWORD PTR [eax],edx
c00103b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00103c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103c7:	05 78 01 00 00       	add    eax,0x178
c00103cc:	83 ec 0c             	sub    esp,0xc
c00103cf:	50                   	push   eax
c00103d0:	e8 a7 6f ff ff       	call   c000737c <GDT::GDT()>
c00103d5:	83 c4 10             	add    esp,0x10
c00103d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103dc:	05 7c 09 00 00       	add    eax,0x97c
c00103e1:	83 ec 0c             	sub    esp,0xc
c00103e4:	50                   	push   eax
c00103e5:	e8 e2 71 ff ff       	call   c00075cc <IDT::IDT()>
c00103ea:	83 c4 10             	add    esp,0x10
c00103ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f1:	05 7c 11 00 00       	add    eax,0x117c
c00103f6:	83 ec 0c             	sub    esp,0xc
c00103f9:	50                   	push   eax
c00103fa:	e8 2d 8b ff ff       	call   c0008f2c <TSS::TSS()>
c00103ff:	83 c4 10             	add    esp,0x10
c0010402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010406:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001040d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010411:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001041b:	90                   	nop
c001041c:	83 c4 0c             	add    esp,0xc
c001041f:	c3                   	ret    

c0010420 <CPU::displayFeatures()>:
c0010420:	c3                   	ret    
c0010421:	90                   	nop

c0010422 <CPU::detectFeatures()>:
c0010422:	55                   	push   ebp
c0010423:	57                   	push   edi
c0010424:	56                   	push   esi
c0010425:	53                   	push   ebx
c0010426:	83 ec 30             	sub    esp,0x30
c0010429:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001042d:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010437:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001043d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010444:	6a 0d                	push   0xd
c0010446:	6a 00                	push   0x0
c0010448:	55                   	push   ebp
c0010449:	e8 a2 00 ff ff       	call   c00004f0 <memset>
c001044e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001045d:	0f 84 db 05 00 00    	je     c0010a3e <CPU::detectFeatures()+0x61c>
c0010463:	83 ec 0c             	sub    esp,0xc
c0010466:	89 ef                	mov    edi,ebp
c0010468:	6a 10                	push   0x10
c001046a:	e8 6b fe ff ff       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c001046f:	83 e0 01             	and    eax,0x1
c0010472:	8d 14 00             	lea    edx,[eax+eax*1]
c0010475:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001047b:	83 e0 fd             	and    eax,0xfffffffd
c001047e:	09 d0                	or     eax,edx
c0010480:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010486:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001048d:	e8 48 fe ff ff       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c0010492:	83 e0 01             	and    eax,0x1
c0010495:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001049c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104a2:	83 e0 fb             	and    eax,0xfffffffb
c00104a5:	09 d0                	or     eax,edx
c00104a7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104ad:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00104b4:	e8 21 fe ff ff       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c00104b9:	83 e0 01             	and    eax,0x1
c00104bc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00104c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104c9:	83 e0 f7             	and    eax,0xfffffff7
c00104cc:	09 d0                	or     eax,edx
c00104ce:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104d4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00104db:	e8 fa fd ff ff       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c00104e0:	83 e0 01             	and    eax,0x1
c00104e3:	c1 e0 04             	shl    eax,0x4
c00104e6:	89 c2                	mov    edx,eax
c00104e8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104ee:	83 e0 ef             	and    eax,0xffffffef
c00104f1:	09 d0                	or     eax,edx
c00104f3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104f9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010500:	e8 d5 fd ff ff       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c0010505:	83 e0 01             	and    eax,0x1
c0010508:	c1 e0 05             	shl    eax,0x5
c001050b:	89 c2                	mov    edx,eax
c001050d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010513:	83 e0 df             	and    eax,0xffffffdf
c0010516:	09 d0                	or     eax,edx
c0010518:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001051e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010525:	e8 b0 fd ff ff       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c001052a:	83 e0 01             	and    eax,0x1
c001052d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010530:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010536:	83 e0 fd             	and    eax,0xfffffffd
c0010539:	09 d0                	or     eax,edx
c001053b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010541:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010548:	e8 8d fd ff ff       	call   c00102da <CPU::cpuidCheckEDX(unsigned int)>
c001054d:	83 e0 01             	and    eax,0x1
c0010550:	c1 e0 06             	shl    eax,0x6
c0010553:	89 c2                	mov    edx,eax
c0010555:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001055b:	83 e0 bf             	and    eax,0xffffffbf
c001055e:	09 d0                	or     eax,edx
c0010560:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010566:	58                   	pop    eax
c0010567:	8d 44 24 28          	lea    eax,[esp+0x28]
c001056b:	50                   	push   eax
c001056c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010570:	50                   	push   eax
c0010571:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010575:	56                   	push   esi
c0010576:	8d 44 24 28          	lea    eax,[esp+0x28]
c001057a:	50                   	push   eax
c001057b:	6a 00                	push   0x0
c001057d:	e8 d4 fc ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010582:	b8 04 00 00 00       	mov    eax,0x4
c0010587:	89 c1                	mov    ecx,eax
c0010589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001058b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010591:	89 c1                	mov    ecx,eax
c0010593:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010597:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010599:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001059f:	89 c1                	mov    ecx,eax
c00105a1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00105a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105a7:	83 c4 18             	add    esp,0x18
c00105aa:	68 48 21 02 c0       	push   0xc0022148
c00105af:	55                   	push   ebp
c00105b0:	e8 cb 01 ff ff       	call   c0000780 <strcmp>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	85 c0                	test   eax,eax
c00105ba:	75 0f                	jne    c00105cb <CPU::detectFeatures()+0x1a9>
c00105bc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00105c6:	e9 22 02 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c00105cb:	50                   	push   eax
c00105cc:	50                   	push   eax
c00105cd:	68 55 21 02 c0       	push   0xc0022155
c00105d2:	55                   	push   ebp
c00105d3:	e8 a8 01 ff ff       	call   c0000780 <strcmp>
c00105d8:	83 c4 10             	add    esp,0x10
c00105db:	85 c0                	test   eax,eax
c00105dd:	74 dd                	je     c00105bc <CPU::detectFeatures()+0x19a>
c00105df:	50                   	push   eax
c00105e0:	50                   	push   eax
c00105e1:	68 62 21 02 c0       	push   0xc0022162
c00105e6:	55                   	push   ebp
c00105e7:	e8 94 01 ff ff       	call   c0000780 <strcmp>
c00105ec:	83 c4 10             	add    esp,0x10
c00105ef:	85 c0                	test   eax,eax
c00105f1:	74 2a                	je     c001061d <CPU::detectFeatures()+0x1fb>
c00105f3:	50                   	push   eax
c00105f4:	50                   	push   eax
c00105f5:	68 6f 21 02 c0       	push   0xc002216f
c00105fa:	55                   	push   ebp
c00105fb:	e8 80 01 ff ff       	call   c0000780 <strcmp>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	85 c0                	test   eax,eax
c0010605:	74 16                	je     c001061d <CPU::detectFeatures()+0x1fb>
c0010607:	50                   	push   eax
c0010608:	50                   	push   eax
c0010609:	68 7c 21 02 c0       	push   0xc002217c
c001060e:	55                   	push   ebp
c001060f:	e8 6c 01 ff ff       	call   c0000780 <strcmp>
c0010614:	83 c4 10             	add    esp,0x10
c0010617:	85 c0                	test   eax,eax
c0010619:	74 48                	je     c0010663 <CPU::detectFeatures()+0x241>
c001061b:	eb 0f                	jmp    c001062c <CPU::detectFeatures()+0x20a>
c001061d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010627:	e9 c1 01 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c001062c:	50                   	push   eax
c001062d:	50                   	push   eax
c001062e:	68 89 21 02 c0       	push   0xc0022189
c0010633:	55                   	push   ebp
c0010634:	e8 47 01 ff ff       	call   c0000780 <strcmp>
c0010639:	83 c4 10             	add    esp,0x10
c001063c:	85 c0                	test   eax,eax
c001063e:	74 23                	je     c0010663 <CPU::detectFeatures()+0x241>
c0010640:	57                   	push   edi
c0010641:	57                   	push   edi
c0010642:	68 96 21 02 c0       	push   0xc0022196
c0010647:	55                   	push   ebp
c0010648:	e8 33 01 ff ff       	call   c0000780 <strcmp>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	85 c0                	test   eax,eax
c0010652:	75 1e                	jne    c0010672 <CPU::detectFeatures()+0x250>
c0010654:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001065e:	e9 8a 01 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c0010663:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001066d:	e9 7b 01 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c0010672:	56                   	push   esi
c0010673:	56                   	push   esi
c0010674:	68 a3 21 02 c0       	push   0xc00221a3
c0010679:	55                   	push   ebp
c001067a:	e8 01 01 ff ff       	call   c0000780 <strcmp>
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	85 c0                	test   eax,eax
c0010684:	75 0f                	jne    c0010695 <CPU::detectFeatures()+0x273>
c0010686:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010690:	e9 58 01 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c0010695:	51                   	push   ecx
c0010696:	51                   	push   ecx
c0010697:	68 62 21 02 c0       	push   0xc0022162
c001069c:	55                   	push   ebp
c001069d:	e8 de 00 ff ff       	call   c0000780 <strcmp>
c00106a2:	83 c4 10             	add    esp,0x10
c00106a5:	85 c0                	test   eax,eax
c00106a7:	75 0f                	jne    c00106b8 <CPU::detectFeatures()+0x296>
c00106a9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00106b3:	e9 35 01 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c00106b8:	52                   	push   edx
c00106b9:	52                   	push   edx
c00106ba:	68 b0 21 02 c0       	push   0xc00221b0
c00106bf:	55                   	push   ebp
c00106c0:	e8 bb 00 ff ff       	call   c0000780 <strcmp>
c00106c5:	83 c4 10             	add    esp,0x10
c00106c8:	85 c0                	test   eax,eax
c00106ca:	75 0f                	jne    c00106db <CPU::detectFeatures()+0x2b9>
c00106cc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00106d6:	e9 12 01 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c00106db:	50                   	push   eax
c00106dc:	50                   	push   eax
c00106dd:	68 bd 21 02 c0       	push   0xc00221bd
c00106e2:	55                   	push   ebp
c00106e3:	e8 98 00 ff ff       	call   c0000780 <strcmp>
c00106e8:	83 c4 10             	add    esp,0x10
c00106eb:	85 c0                	test   eax,eax
c00106ed:	75 0f                	jne    c00106fe <CPU::detectFeatures()+0x2dc>
c00106ef:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00106f9:	e9 ef 00 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c00106fe:	50                   	push   eax
c00106ff:	50                   	push   eax
c0010700:	68 ca 21 02 c0       	push   0xc00221ca
c0010705:	55                   	push   ebp
c0010706:	e8 75 00 ff ff       	call   c0000780 <strcmp>
c001070b:	83 c4 10             	add    esp,0x10
c001070e:	85 c0                	test   eax,eax
c0010710:	75 0f                	jne    c0010721 <CPU::detectFeatures()+0x2ff>
c0010712:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001071c:	e9 cc 00 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c0010721:	50                   	push   eax
c0010722:	50                   	push   eax
c0010723:	68 d7 21 02 c0       	push   0xc00221d7
c0010728:	55                   	push   ebp
c0010729:	e8 52 00 ff ff       	call   c0000780 <strcmp>
c001072e:	83 c4 10             	add    esp,0x10
c0010731:	85 c0                	test   eax,eax
c0010733:	75 0f                	jne    c0010744 <CPU::detectFeatures()+0x322>
c0010735:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001073f:	e9 a9 00 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c0010744:	50                   	push   eax
c0010745:	50                   	push   eax
c0010746:	68 e4 21 02 c0       	push   0xc00221e4
c001074b:	55                   	push   ebp
c001074c:	e8 2f 00 ff ff       	call   c0000780 <strcmp>
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	85 c0                	test   eax,eax
c0010756:	75 0f                	jne    c0010767 <CPU::detectFeatures()+0x345>
c0010758:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010762:	e9 86 00 00 00       	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c0010767:	50                   	push   eax
c0010768:	50                   	push   eax
c0010769:	68 f1 21 02 c0       	push   0xc00221f1
c001076e:	55                   	push   ebp
c001076f:	e8 0c 00 ff ff       	call   c0000780 <strcmp>
c0010774:	83 c4 10             	add    esp,0x10
c0010777:	85 c0                	test   eax,eax
c0010779:	75 0c                	jne    c0010787 <CPU::detectFeatures()+0x365>
c001077b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010785:	eb 66                	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c0010787:	50                   	push   eax
c0010788:	50                   	push   eax
c0010789:	68 fe 21 02 c0       	push   0xc00221fe
c001078e:	55                   	push   ebp
c001078f:	e8 ec ff fe ff       	call   c0000780 <strcmp>
c0010794:	83 c4 10             	add    esp,0x10
c0010797:	85 c0                	test   eax,eax
c0010799:	75 0c                	jne    c00107a7 <CPU::detectFeatures()+0x385>
c001079b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00107a5:	eb 46                	jmp    c00107ed <CPU::detectFeatures()+0x3cb>
c00107a7:	57                   	push   edi
c00107a8:	57                   	push   edi
c00107a9:	68 0b 22 02 c0       	push   0xc002220b
c00107ae:	55                   	push   ebp
c00107af:	e8 cc ff fe ff       	call   c0000780 <strcmp>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	85 c0                	test   eax,eax
c00107b9:	74 e0                	je     c001079b <CPU::detectFeatures()+0x379>
c00107bb:	56                   	push   esi
c00107bc:	56                   	push   esi
c00107bd:	68 18 22 02 c0       	push   0xc0022218
c00107c2:	55                   	push   ebp
c00107c3:	e8 b8 ff fe ff       	call   c0000780 <strcmp>
c00107c8:	83 c4 10             	add    esp,0x10
c00107cb:	85 c0                	test   eax,eax
c00107cd:	74 cc                	je     c001079b <CPU::detectFeatures()+0x379>
c00107cf:	51                   	push   ecx
c00107d0:	51                   	push   ecx
c00107d1:	68 25 22 02 c0       	push   0xc0022225
c00107d6:	55                   	push   ebp
c00107d7:	e8 a4 ff fe ff       	call   c0000780 <strcmp>
c00107dc:	83 c4 10             	add    esp,0x10
c00107df:	85 c0                	test   eax,eax
c00107e1:	74 b8                	je     c001079b <CPU::detectFeatures()+0x379>
c00107e3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00107ed:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00107f2:	0f 86 be 00 00 00    	jbe    c00108b6 <CPU::detectFeatures()+0x494>
c00107f8:	83 ec 0c             	sub    esp,0xc
c00107fb:	68 80 00 00 00       	push   0x80
c0010800:	e8 31 fb ff ff       	call   c0010336 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010805:	83 e0 01             	and    eax,0x1
c0010808:	c1 e0 06             	shl    eax,0x6
c001080b:	89 c2                	mov    edx,eax
c001080d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010813:	83 e0 bf             	and    eax,0xffffffbf
c0010816:	09 d0                	or     eax,edx
c0010818:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001081e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010825:	e8 0c fb ff ff       	call   c0010336 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001082a:	83 e0 01             	and    eax,0x1
c001082d:	c1 e0 04             	shl    eax,0x4
c0010830:	89 c2                	mov    edx,eax
c0010832:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010838:	83 e0 ef             	and    eax,0xffffffef
c001083b:	09 d0                	or     eax,edx
c001083d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010843:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001084a:	e8 e7 fa ff ff       	call   c0010336 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001084f:	89 c2                	mov    edx,eax
c0010851:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010857:	c1 e2 07             	shl    edx,0x7
c001085a:	83 e0 7f             	and    eax,0x7f
c001085d:	09 d0                	or     eax,edx
c001085f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010865:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001086c:	e8 f3 fa ff ff       	call   c0010364 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010871:	83 e0 01             	and    eax,0x1
c0010874:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001087b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010881:	83 e0 f7             	and    eax,0xfffffff7
c0010884:	09 d0                	or     eax,edx
c0010886:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001088c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010893:	e8 cc fa ff ff       	call   c0010364 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	83 e0 01             	and    eax,0x1
c001089e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108a5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108ab:	83 e0 fb             	and    eax,0xfffffffb
c00108ae:	09 d0                	or     eax,edx
c00108b0:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108b6:	83 ec 0c             	sub    esp,0xc
c00108b9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108bd:	50                   	push   eax
c00108be:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108c2:	50                   	push   eax
c00108c3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00108c7:	57                   	push   edi
c00108c8:	8d 74 24 28          	lea    esi,[esp+0x28]
c00108cc:	56                   	push   esi
c00108cd:	6a 01                	push   0x1
c00108cf:	e8 82 f9 ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00108d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108d8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00108de:	89 c1                	mov    ecx,eax
c00108e0:	83 e1 0f             	and    ecx,0xf
c00108e3:	83 e2 f0             	and    edx,0xfffffff0
c00108e6:	09 ca                	or     edx,ecx
c00108e8:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00108ee:	89 c2                	mov    edx,eax
c00108f0:	c1 ea 04             	shr    edx,0x4
c00108f3:	83 e2 0f             	and    edx,0xf
c00108f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00108fa:	89 d1                	mov    ecx,edx
c00108fc:	83 c4 20             	add    esp,0x20
c00108ff:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010905:	c1 e1 06             	shl    ecx,0x6
c0010908:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001090e:	09 ca                	or     edx,ecx
c0010910:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010917:	89 c2                	mov    edx,eax
c0010919:	c1 ea 08             	shr    edx,0x8
c001091c:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010922:	83 e2 0f             	and    edx,0xf
c0010925:	89 d5                	mov    ebp,edx
c0010927:	83 e5 03             	and    ebp,0x3
c001092a:	c1 e5 06             	shl    ebp,0x6
c001092d:	83 e1 3f             	and    ecx,0x3f
c0010930:	09 e9                	or     ecx,ebp
c0010932:	89 d5                	mov    ebp,edx
c0010934:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001093a:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010940:	c1 ed 02             	shr    ebp,0x2
c0010943:	83 e1 c0             	and    ecx,0xffffffc0
c0010946:	09 e9                	or     ecx,ebp
c0010948:	89 c5                	mov    ebp,eax
c001094a:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010950:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010956:	c1 ed 08             	shr    ebp,0x8
c0010959:	83 e5 30             	and    ebp,0x30
c001095c:	83 e1 cf             	and    ecx,0xffffffcf
c001095f:	09 e9                	or     ecx,ebp
c0010961:	83 fa 06             	cmp    edx,0x6
c0010964:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001096a:	74 05                	je     c0010971 <CPU::detectFeatures()+0x54f>
c001096c:	83 fa 0f             	cmp    edx,0xf
c001096f:	75 64                	jne    c00109d5 <CPU::detectFeatures()+0x5b3>
c0010971:	89 c1                	mov    ecx,eax
c0010973:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010979:	c1 e9 10             	shr    ecx,0x10
c001097c:	c1 e1 04             	shl    ecx,0x4
c001097f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010983:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010989:	0f b6 c9             	movzx  ecx,cl
c001098c:	c1 e1 06             	shl    ecx,0x6
c001098f:	09 e9                	or     ecx,ebp
c0010991:	83 fa 0f             	cmp    edx,0xf
c0010994:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001099b:	75 38                	jne    c00109d5 <CPU::detectFeatures()+0x5b3>
c001099d:	c1 e8 14             	shr    eax,0x14
c00109a0:	83 c0 0f             	add    eax,0xf
c00109a3:	0f b6 c0             	movzx  eax,al
c00109a6:	89 c2                	mov    edx,eax
c00109a8:	c1 e8 02             	shr    eax,0x2
c00109ab:	83 e2 03             	and    edx,0x3
c00109ae:	89 d1                	mov    ecx,edx
c00109b0:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00109b6:	c1 e1 06             	shl    ecx,0x6
c00109b9:	83 e2 3f             	and    edx,0x3f
c00109bc:	09 ca                	or     edx,ecx
c00109be:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00109c4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00109ca:	83 e2 c0             	and    edx,0xffffffc0
c00109cd:	09 d0                	or     eax,edx
c00109cf:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00109d5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109db:	83 ec 0c             	sub    esp,0xc
c00109de:	83 c8 07             	or     eax,0x7
c00109e1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109e7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109eb:	50                   	push   eax
c00109ec:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00109f0:	55                   	push   ebp
c00109f1:	57                   	push   edi
c00109f2:	56                   	push   esi
c00109f3:	68 00 00 00 80       	push   0x80000000
c00109f8:	e8 59 f8 ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109fd:	83 c4 20             	add    esp,0x20
c0010a00:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a08:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a0c:	76 1e                	jbe    c0010a2c <CPU::detectFeatures()+0x60a>
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	50                   	push   eax
c0010a12:	55                   	push   ebp
c0010a13:	57                   	push   edi
c0010a14:	56                   	push   esi
c0010a15:	68 01 00 00 80       	push   0x80000001
c0010a1a:	e8 37 f8 ff ff       	call   c0010256 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a1f:	83 c4 20             	add    esp,0x20
c0010a22:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a2c:	52                   	push   edx
c0010a2d:	52                   	push   edx
c0010a2e:	68 31 22 02 c0       	push   0xc0022231
c0010a33:	53                   	push   ebx
c0010a34:	e8 29 c1 ff ff       	call   c000cb62 <Device::setName(char const*)>
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	eb 69                	jmp    c0010aa7 <CPU::detectFeatures()+0x685>
c0010a3e:	50                   	push   eax
c0010a3f:	50                   	push   eax
c0010a40:	68 96 21 02 c0       	push   0xc0022196
c0010a45:	55                   	push   ebp
c0010a46:	e8 05 fc fe ff       	call   c0000650 <strcpy>
c0010a4b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a55:	e8 69 f7 fe ff       	call   c00001c3 <is486>
c0010a5a:	83 c4 10             	add    esp,0x10
c0010a5d:	85 c0                	test   eax,eax
c0010a5f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a65:	74 1f                	je     c0010a86 <CPU::detectFeatures()+0x664>
c0010a67:	83 c8 07             	or     eax,0x7
c0010a6a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a70:	0f 20 c0             	mov    eax,cr0
c0010a73:	83 e0 14             	and    eax,0x14
c0010a76:	83 f8 04             	cmp    eax,0x4
c0010a79:	75 10                	jne    c0010a8b <CPU::detectFeatures()+0x669>
c0010a7b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a81:	83 e0 fd             	and    eax,0xfffffffd
c0010a84:	eb 1b                	jmp    c0010aa1 <CPU::detectFeatures()+0x67f>
c0010a86:	83 e0 f8             	and    eax,0xfffffff8
c0010a89:	eb df                	jmp    c0010a6a <CPU::detectFeatures()+0x648>
c0010a8b:	e8 0e f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a90:	83 e0 01             	and    eax,0x1
c0010a93:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a96:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a9c:	83 e0 fd             	and    eax,0xfffffffd
c0010a9f:	09 d0                	or     eax,edx
c0010aa1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010aa7:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010aae:	74 17                	je     c0010ac7 <CPU::detectFeatures()+0x6a5>
c0010ab0:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010ab6:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010abc:	83 c8 10             	or     eax,0x10
c0010abf:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010ac5:	eb 20                	jmp    c0010ae7 <CPU::detectFeatures()+0x6c5>
c0010ac7:	e8 d2 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010acc:	83 e0 01             	and    eax,0x1
c0010acf:	8d 14 00             	lea    edx,[eax+eax*1]
c0010ad2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ad8:	83 e0 fd             	and    eax,0xfffffffd
c0010adb:	09 d0                	or     eax,edx
c0010add:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010ae3:	a8 02                	test   al,0x2
c0010ae5:	75 c9                	jne    c0010ab0 <CPU::detectFeatures()+0x68e>
c0010ae7:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010aee:	83 c4 2c             	add    esp,0x2c
c0010af1:	5b                   	pop    ebx
c0010af2:	5e                   	pop    esi
c0010af3:	5f                   	pop    edi
c0010af4:	5d                   	pop    ebp
c0010af5:	c3                   	ret    

c0010af6 <CPU::setupSMEP()>:
c0010af6:	0f 20 e0             	mov    eax,cr4
c0010af9:	0d 00 00 10 00       	or     eax,0x100000
c0010afe:	0f 22 e0             	mov    cr4,eax
c0010b01:	c3                   	ret    

c0010b02 <CPU::setupUMIP()>:
c0010b02:	0f 20 e0             	mov    eax,cr4
c0010b05:	80 cc 08             	or     ah,0x8
c0010b08:	0f 22 e0             	mov    cr4,eax
c0010b0b:	c3                   	ret    

c0010b0c <CPU::setupTSC()>:
c0010b0c:	0f 20 e0             	mov    eax,cr4
c0010b0f:	83 c8 04             	or     eax,0x4
c0010b12:	0f 22 e0             	mov    cr4,eax
c0010b15:	c3                   	ret    

c0010b16 <CPU::setupLargePages()>:
c0010b16:	0f 20 e0             	mov    eax,cr4
c0010b19:	83 c8 10             	or     eax,0x10
c0010b1c:	0f 22 e0             	mov    cr4,eax
c0010b1f:	c3                   	ret    

c0010b20 <CPU::setupPAT()>:
c0010b20:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b25:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b2c:	74 2c                	je     c0010b5a <CPU::setupPAT()+0x3a>
c0010b2e:	53                   	push   ebx
c0010b2f:	83 ec 10             	sub    esp,0x10
c0010b32:	68 77 02 00 00       	push   0x277
c0010b37:	50                   	push   eax
c0010b38:	e8 a5 65 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010b3d:	83 e2 f8             	and    edx,0xfffffff8
c0010b40:	83 ca 01             	or     edx,0x1
c0010b43:	52                   	push   edx
c0010b44:	50                   	push   eax
c0010b45:	68 77 02 00 00       	push   0x277
c0010b4a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b50:	e8 b9 65 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b55:	83 c4 28             	add    esp,0x28
c0010b58:	5b                   	pop    ebx
c0010b59:	c3                   	ret    
c0010b5a:	c3                   	ret    
c0010b5b:	90                   	nop

c0010b5c <CPU::setupMTRR()>:
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <CPU::setupGlobalPages()>:
c0010b5e:	0f 20 e0             	mov    eax,cr4
c0010b61:	0c 80                	or     al,0x80
c0010b63:	0f 22 e0             	mov    cr4,eax
c0010b66:	c3                   	ret    
c0010b67:	90                   	nop

c0010b68 <CPU::allowUsermodeDataAccess()>:
c0010b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b73:	74 03                	je     c0010b78 <CPU::allowUsermodeDataAccess()+0x10>
c0010b75:	0f 01 cb             	stac   
c0010b78:	c3                   	ret    
c0010b79:	90                   	nop

c0010b7a <CPU::prohibitUsermodeDataAccess()>:
c0010b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b7e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b85:	74 03                	je     c0010b8a <CPU::prohibitUsermodeDataAccess()+0x10>
c0010b87:	0f 01 ca             	clac   
c0010b8a:	c3                   	ret    
c0010b8b:	90                   	nop

c0010b8c <CPU::setupSMAP()>:
c0010b8c:	0f 20 e0             	mov    eax,cr4
c0010b8f:	0d 00 00 20 00       	or     eax,0x200000
c0010b94:	0f 22 e0             	mov    cr4,eax
c0010b97:	eb e1                	jmp    c0010b7a <CPU::prohibitUsermodeDataAccess()>
c0010b99:	90                   	nop

c0010b9a <CPU::setupFeatures()>:
c0010b9a:	53                   	push   ebx
c0010b9b:	83 ec 08             	sub    esp,0x8
c0010b9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba2:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010ba9:	74 18                	je     c0010bc3 <CPU::setupFeatures()+0x29>
c0010bab:	83 ec 0c             	sub    esp,0xc
c0010bae:	68 3d 22 02 c0       	push   0xc002223d
c0010bb3:	e8 52 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bbb:	e8 42 ff ff ff       	call   c0010b02 <CPU::setupUMIP()>
c0010bc0:	83 c4 10             	add    esp,0x10
c0010bc3:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010bca:	74 18                	je     c0010be4 <CPU::setupFeatures()+0x4a>
c0010bcc:	83 ec 0c             	sub    esp,0xc
c0010bcf:	68 47 22 02 c0       	push   0xc0022247
c0010bd4:	e8 31 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bdc:	e8 2b ff ff ff       	call   c0010b0c <CPU::setupTSC()>
c0010be1:	83 c4 10             	add    esp,0x10
c0010be4:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010beb:	74 18                	je     c0010c05 <CPU::setupFeatures()+0x6b>
c0010bed:	83 ec 0c             	sub    esp,0xc
c0010bf0:	68 50 22 02 c0       	push   0xc0022250
c0010bf5:	e8 10 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010bfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bfd:	e8 14 ff ff ff       	call   c0010b16 <CPU::setupLargePages()>
c0010c02:	83 c4 10             	add    esp,0x10
c0010c05:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c0c:	74 18                	je     c0010c26 <CPU::setupFeatures()+0x8c>
c0010c0e:	83 ec 0c             	sub    esp,0xc
c0010c11:	68 59 22 02 c0       	push   0xc0022259
c0010c16:	e8 ef 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c1e:	e8 3b ff ff ff       	call   c0010b5e <CPU::setupGlobalPages()>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c2d:	74 18                	je     c0010c47 <CPU::setupFeatures()+0xad>
c0010c2f:	83 ec 0c             	sub    esp,0xc
c0010c32:	68 6b 22 02 c0       	push   0xc002226b
c0010c37:	e8 ce 9c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010c3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c3f:	e8 dc fe ff ff       	call   c0010b20 <CPU::setupPAT()>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c4e:	74 11                	je     c0010c61 <CPU::setupFeatures()+0xc7>
c0010c50:	c7 44 24 10 74 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022274
c0010c58:	83 c4 08             	add    esp,0x8
c0010c5b:	5b                   	pop    ebx
c0010c5c:	e9 a9 9c ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010c61:	83 c4 08             	add    esp,0x8
c0010c64:	5b                   	pop    ebx
c0010c65:	c3                   	ret    

c0010c66 <CPU::open(int, int, void*)>:
c0010c66:	55                   	push   ebp
c0010c67:	57                   	push   edi
c0010c68:	56                   	push   esi
c0010c69:	53                   	push   ebx
c0010c6a:	83 ec 18             	sub    esp,0x18
c0010c6d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c71:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010c75:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010c79:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010c7f:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010c85:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010c8b:	50                   	push   eax
c0010c8c:	e8 4d 67 ff ff       	call   c00073de <GDT::setup()>
c0010c91:	83 c4 0c             	add    esp,0xc
c0010c94:	6a 00                	push   0x0
c0010c96:	68 ef be ad de       	push   0xdeadbeef
c0010c9b:	55                   	push   ebp
c0010c9c:	e8 cf 82 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010ca1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010ca4:	e8 a7 82 ff ff       	call   c0008f50 <TSS::flush()>
c0010ca9:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010caf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cb2:	e8 8b 69 ff ff       	call   c0007642 <IDT::setup()>
c0010cb7:	b8 00 04 00 00       	mov    eax,0x400
c0010cbc:	0f 23 f8             	mov    db7,eax
c0010cbf:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010cc9:	e8 14 71 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010cce:	83 c4 10             	add    esp,0x10
c0010cd1:	85 f6                	test   esi,esi
c0010cd3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010cd9:	89 38                	mov    DWORD PTR [eax],edi
c0010cdb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010ce1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ce4:	74 10                	je     c0010cf6 <CPU::open(int, int, void*)+0x90>
c0010ce6:	50                   	push   eax
c0010ce7:	50                   	push   eax
c0010ce8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010cee:	56                   	push   esi
c0010cef:	e8 98 8b ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010cf4:	eb 0d                	jmp    c0010d03 <CPU::open(int, int, void*)+0x9d>
c0010cf6:	83 ec 0c             	sub    esp,0xc
c0010cf9:	68 7e 22 02 c0       	push   0xc002227e
c0010cfe:	e8 9c 08 00 00       	call   c001159f <KePanic(char const*)>
c0010d03:	83 c4 10             	add    esp,0x10
c0010d06:	83 ec 0c             	sub    esp,0xc
c0010d09:	68 8c 22 02 c0       	push   0xc002228c
c0010d0e:	e8 8e 01 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0010d13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d16:	e8 07 f7 ff ff       	call   c0010422 <CPU::detectFeatures()>
c0010d1b:	c7 04 24 af 22 02 c0 	mov    DWORD PTR [esp],0xc00222af
c0010d22:	e8 7a 01 00 00       	call   c0010ea1 <KeSetBootMessage(char const*)>
c0010d27:	e8 df 73 00 00       	call   c001810b <HalInitialise()>
c0010d2c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d31:	83 e0 10             	and    eax,0x10
c0010d34:	83 f8 01             	cmp    eax,0x1
c0010d37:	19 c0                	sbb    eax,eax
c0010d39:	83 e0 46             	and    eax,0x46
c0010d3c:	83 c0 1e             	add    eax,0x1e
c0010d3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d42:	e8 c2 d6 ff ff       	call   c000e409 <setupTimer(int)>
c0010d47:	83 c4 10             	add    esp,0x10
c0010d4a:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d51:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d57:	74 0c                	je     c0010d65 <CPU::open(int, int, void*)+0xff>
c0010d59:	83 ec 0c             	sub    esp,0xc
c0010d5c:	53                   	push   ebx
c0010d5d:	e8 38 fe ff ff       	call   c0010b9a <CPU::setupFeatures()>
c0010d62:	83 c4 10             	add    esp,0x10
c0010d65:	83 c4 0c             	add    esp,0xc
c0010d68:	31 c0                	xor    eax,eax
c0010d6a:	5b                   	pop    ebx
c0010d6b:	5e                   	pop    esi
c0010d6c:	5f                   	pop    edi
c0010d6d:	5d                   	pop    ebp
c0010d6e:	c3                   	ret    

c0010d6f <KeInitialiseAtexit()>:
c0010d6f:	83 ec 10             	sub    esp,0x10
c0010d72:	6a 60                	push   0x60
c0010d74:	6a 00                	push   0x0
c0010d76:	68 20 be 02 c0       	push   0xc002be20
c0010d7b:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010d85:	e8 66 f7 fe ff       	call   c00004f0 <memset>
c0010d8a:	83 c4 1c             	add    esp,0x1c
c0010d8d:	c3                   	ret    

c0010d8e <KeRegisterAtexit(void (*)(void*), void*)>:
c0010d8e:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010d93:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010d97:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010d9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010da2:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010da9:	40                   	inc    eax
c0010daa:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010daf:	83 f8 17             	cmp    eax,0x17
c0010db2:	7e 0d                	jle    c0010dc1 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010db4:	c7 44 24 04 f0 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222f0
c0010dbc:	e9 de 07 00 00       	jmp    c001159f <KePanic(char const*)>
c0010dc1:	c3                   	ret    

c0010dc2 <KeExecuteAtexit()>:
c0010dc2:	53                   	push   ebx
c0010dc3:	31 db                	xor    ebx,ebx
c0010dc5:	83 ec 08             	sub    esp,0x8
c0010dc8:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010dce:	7e 50                	jle    c0010e20 <KeExecuteAtexit()+0x5e>
c0010dd0:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010dd7:	85 c0                	test   eax,eax
c0010dd9:	74 42                	je     c0010e1d <KeExecuteAtexit()+0x5b>
c0010ddb:	51                   	push   ecx
c0010ddc:	50                   	push   eax
c0010ddd:	53                   	push   ebx
c0010dde:	68 09 23 02 c0       	push   0xc0022309
c0010de3:	e8 22 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010de8:	58                   	pop    eax
c0010de9:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010df0:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010df7:	c7 04 24 2b 23 02 c0 	mov    DWORD PTR [esp],0xc002232b
c0010dfe:	e8 07 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e03:	c7 04 24 8b 34 02 c0 	mov    DWORD PTR [esp],0xc002348b
c0010e0a:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e15:	e8 f0 9a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	43                   	inc    ebx
c0010e1e:	eb a8                	jmp    c0010dc8 <KeExecuteAtexit()+0x6>
c0010e20:	83 c4 08             	add    esp,0x8
c0010e23:	5b                   	pop    ebx
c0010e24:	c3                   	ret    

c0010e25 <KeDisplaySplashScreen()>:
c0010e25:	55                   	push   ebp
c0010e26:	bd 05 00 00 00       	mov    ebp,0x5
c0010e2b:	57                   	push   edi
c0010e2c:	bf 0a 00 00 00       	mov    edi,0xa
c0010e31:	56                   	push   esi
c0010e32:	31 f6                	xor    esi,esi
c0010e34:	53                   	push   ebx
c0010e35:	31 db                	xor    ebx,ebx
c0010e37:	83 ec 0c             	sub    esp,0xc
c0010e3a:	0f b6 96 e0 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc920]
c0010e41:	85 d2                	test   edx,edx
c0010e43:	89 d0                	mov    eax,edx
c0010e45:	74 52                	je     c0010e99 <KeDisplaySplashScreen()+0x74>
c0010e47:	80 bb 16 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc8ea],0xdb
c0010e4e:	75 13                	jne    c0010e63 <KeDisplaySplashScreen()+0x3e>
c0010e50:	0f b6 8b 15 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc8eb]
c0010e57:	83 e1 fe             	and    ecx,0xfffffffe
c0010e5a:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010e60:	75 01                	jne    c0010e63 <KeDisplaySplashScreen()+0x3e>
c0010e62:	47                   	inc    edi
c0010e63:	83 fa 0d             	cmp    edx,0xd
c0010e66:	74 28                	je     c0010e90 <KeDisplaySplashScreen()+0x6b>
c0010e68:	83 fa 0a             	cmp    edx,0xa
c0010e6b:	75 0a                	jne    c0010e77 <KeDisplaySplashScreen()+0x52>
c0010e6d:	45                   	inc    ebp
c0010e6e:	bf 0a 00 00 00       	mov    edi,0xa
c0010e73:	31 db                	xor    ebx,ebx
c0010e75:	eb 19                	jmp    c0010e90 <KeDisplaySplashScreen()+0x6b>
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	0f be c0             	movsx  eax,al
c0010e7d:	55                   	push   ebp
c0010e7e:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010e81:	43                   	inc    ebx
c0010e82:	52                   	push   edx
c0010e83:	6a 00                	push   0x0
c0010e85:	6a 0e                	push   0xe
c0010e87:	50                   	push   eax
c0010e88:	e8 fb 7e 00 00       	call   c0018d88 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010e8d:	83 c4 20             	add    esp,0x20
c0010e90:	46                   	inc    esi
c0010e91:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010e97:	75 a1                	jne    c0010e3a <KeDisplaySplashScreen()+0x15>
c0010e99:	83 c4 0c             	add    esp,0xc
c0010e9c:	5b                   	pop    ebx
c0010e9d:	5e                   	pop    esi
c0010e9e:	5f                   	pop    edi
c0010e9f:	5d                   	pop    ebp
c0010ea0:	c3                   	ret    

c0010ea1 <KeSetBootMessage(char const*)>:
c0010ea1:	57                   	push   edi
c0010ea2:	56                   	push   esi
c0010ea3:	53                   	push   ebx
c0010ea4:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010eaa:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010eb1:	68 9e 00 00 00       	push   0x9e
c0010eb6:	6a 00                	push   0x0
c0010eb8:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010ebc:	56                   	push   esi
c0010ebd:	e8 2e f6 fe ff       	call   c00004f0 <memset>
c0010ec2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ec5:	e8 b6 f6 fe ff       	call   c0000580 <strlen>
c0010eca:	ba 50 00 00 00       	mov    edx,0x50
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	31 c9                	xor    ecx,ecx
c0010ed4:	29 c2                	sub    edx,eax
c0010ed6:	83 e2 fe             	and    edx,0xfffffffe
c0010ed9:	01 f2                	add    edx,esi
c0010edb:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010ee0:	84 c0                	test   al,al
c0010ee2:	74 0a                	je     c0010eee <KeSetBootMessage(char const*)+0x4d>
c0010ee4:	80 cc 0f             	or     ah,0xf
c0010ee7:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010eeb:	41                   	inc    ecx
c0010eec:	eb ed                	jmp    c0010edb <KeSetBootMessage(char const*)+0x3a>
c0010eee:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010ef3:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010ef8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010efa:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f00:	5b                   	pop    ebx
c0010f01:	5e                   	pop    esi
c0010f02:	5f                   	pop    edi
c0010f03:	c3                   	ret    

c0010f04 <Krnl::handlePowerButton()>:
c0010f04:	83 ec 0c             	sub    esp,0xc
c0010f07:	e8 ee 06 00 00       	call   c00115fa <KeHandlePowerButton()>
c0010f0c:	90                   	nop
c0010f0d:	83 c4 0c             	add    esp,0xc
c0010f10:	c3                   	ret    
c0010f11:	8d 76 00             	lea    esi,[esi+0x0]

c0010f14 <Krnl::handleSleepButton()>:
c0010f14:	83 ec 0c             	sub    esp,0xc
c0010f17:	e8 13 07 00 00       	call   c001162f <KeHandleSleepButton()>
c0010f1c:	90                   	nop
c0010f1d:	83 c4 0c             	add    esp,0xc
c0010f20:	c3                   	ret    

c0010f21 <KeCalculateCRC32(unsigned char*, int)>:
c0010f21:	53                   	push   ebx
c0010f22:	83 c8 ff             	or     eax,0xffffffff
c0010f25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f2d:	01 cb                	add    ebx,ecx
c0010f2f:	39 d9                	cmp    ecx,ebx
c0010f31:	74 15                	je     c0010f48 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f33:	41                   	inc    ecx
c0010f34:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f37:	31 c2                	xor    edx,eax
c0010f39:	c1 e8 08             	shr    eax,0x8
c0010f3c:	0f b6 d2             	movzx  edx,dl
c0010f3f:	33 04 95 40 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc7c0]
c0010f46:	eb e7                	jmp    c0010f2f <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f48:	5b                   	pop    ebx
c0010f49:	f7 d0                	not    eax
c0010f4b:	c3                   	ret    

c0010f4c <EnvVarContainer::getEnv(char const*)>:
c0010f4c:	57                   	push   edi
c0010f4d:	56                   	push   esi
c0010f4e:	53                   	push   ebx
c0010f4f:	31 db                	xor    ebx,ebx
c0010f51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f55:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f57:	7e 2b                	jle    c0010f84 <EnvVarContainer::getEnv(char const*)+0x38>
c0010f59:	50                   	push   eax
c0010f5a:	50                   	push   eax
c0010f5b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f5e:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010f65:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010f68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010f6c:	e8 0f f8 fe ff       	call   c0000780 <strcmp>
c0010f71:	83 c4 10             	add    esp,0x10
c0010f74:	85 c0                	test   eax,eax
c0010f76:	75 09                	jne    c0010f81 <EnvVarContainer::getEnv(char const*)+0x35>
c0010f78:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f7b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010f7f:	eb 05                	jmp    c0010f86 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010f81:	43                   	inc    ebx
c0010f82:	eb d1                	jmp    c0010f55 <EnvVarContainer::getEnv(char const*)+0x9>
c0010f84:	31 c0                	xor    eax,eax
c0010f86:	5b                   	pop    ebx
c0010f87:	5e                   	pop    esi
c0010f88:	5f                   	pop    edi
c0010f89:	c3                   	ret    

c0010f8a <EnvVarContainer::setEnv(char const*, char const*)>:
c0010f8a:	55                   	push   ebp
c0010f8b:	57                   	push   edi
c0010f8c:	56                   	push   esi
c0010f8d:	53                   	push   ebx
c0010f8e:	83 ec 28             	sub    esp,0x28
c0010f91:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f95:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010f99:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f9d:	56                   	push   esi
c0010f9e:	e8 dd f5 fe ff       	call   c0000580 <strlen>
c0010fa3:	40                   	inc    eax
c0010fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fa7:	e8 27 6b ff ff       	call   c0007ad3 <malloc>
c0010fac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010faf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010fb3:	e8 c8 f5 fe ff       	call   c0000580 <strlen>
c0010fb8:	40                   	inc    eax
c0010fb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fbc:	e8 12 6b ff ff       	call   c0007ad3 <malloc>
c0010fc1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fc8:	e8 b3 f5 fe ff       	call   c0000580 <strlen>
c0010fcd:	83 c4 0c             	add    esp,0xc
c0010fd0:	40                   	inc    eax
c0010fd1:	50                   	push   eax
c0010fd2:	6a 00                	push   0x0
c0010fd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010fd8:	e8 13 f5 fe ff       	call   c00004f0 <memset>
c0010fdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fe0:	e8 9b f5 fe ff       	call   c0000580 <strlen>
c0010fe5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010fe9:	8d 48 01             	lea    ecx,[eax+0x1]
c0010fec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ff1:	89 de                	mov    esi,ebx
c0010ff3:	e8 88 f5 fe ff       	call   c0000580 <strlen>
c0010ff8:	83 c4 0c             	add    esp,0xc
c0010ffb:	40                   	inc    eax
c0010ffc:	50                   	push   eax
c0010ffd:	6a 00                	push   0x0
c0010fff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011003:	e8 e8 f4 fe ff       	call   c00004f0 <memset>
c0011008:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001100b:	e8 70 f5 fe ff       	call   c0000580 <strlen>
c0011010:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011014:	8d 48 01             	lea    ecx,[eax+0x1]
c0011017:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011019:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001101c:	40                   	inc    eax
c001101d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011020:	c1 e0 03             	shl    eax,0x3
c0011023:	5a                   	pop    edx
c0011024:	59                   	pop    ecx
c0011025:	50                   	push   eax
c0011026:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011029:	e8 91 6a ff ff       	call   c0007abf <realloc>
c001102e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011031:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011035:	b9 08 00 00 00       	mov    ecx,0x8
c001103a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001103d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011041:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011043:	83 c4 2c             	add    esp,0x2c
c0011046:	5b                   	pop    ebx
c0011047:	5e                   	pop    esi
c0011048:	5f                   	pop    edi
c0011049:	5d                   	pop    ebp
c001104a:	c3                   	ret    
c001104b:	90                   	nop

c001104c <EnvVarContainer::deleteEnv(char const*)>:
c001104c:	c3                   	ret    
c001104d:	90                   	nop

c001104e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001104e:	55                   	push   ebp
c001104f:	57                   	push   edi
c0011050:	56                   	push   esi
c0011051:	53                   	push   ebx
c0011052:	81 ec 38 01 00 00    	sub    esp,0x138
c0011058:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001105f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0011066:	68 14 01 00 00       	push   0x114
c001106b:	e8 63 6a ff ff       	call   c0007ad3 <malloc>
c0011070:	83 c4 0c             	add    esp,0xc
c0011073:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011076:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001107d:	89 c3                	mov    ebx,eax
c001107f:	50                   	push   eax
c0011080:	e8 d3 aa ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0011085:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011088:	e8 ad ad ff ff       	call   c000be3a <File::exists()>
c001108d:	83 c4 10             	add    esp,0x10
c0011090:	84 c0                	test   al,al
c0011092:	75 31                	jne    c00110c5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011094:	50                   	push   eax
c0011095:	50                   	push   eax
c0011096:	6a 12                	push   0x12
c0011098:	53                   	push   ebx
c0011099:	e8 d8 aa ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001109e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110a0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00110a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00110a6:	e8 d5 f4 fe ff       	call   c0000580 <strlen>
c00110ab:	5a                   	pop    edx
c00110ac:	8d 54 24 20          	lea    edx,[esp+0x20]
c00110b0:	52                   	push   edx
c00110b1:	31 d2                	xor    edx,edx
c00110b3:	56                   	push   esi
c00110b4:	52                   	push   edx
c00110b5:	50                   	push   eax
c00110b6:	53                   	push   ebx
c00110b7:	ff d7                	call   edi
c00110b9:	83 c4 14             	add    esp,0x14
c00110bc:	53                   	push   ebx
c00110bd:	e8 12 ab ff ff       	call   c000bbd4 <File::close()>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	56                   	push   esi
c00110c6:	31 f6                	xor    esi,esi
c00110c8:	68 00 01 00 00       	push   0x100
c00110cd:	6a 00                	push   0x0
c00110cf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00110d3:	50                   	push   eax
c00110d4:	e8 17 f4 fe ff       	call   c00004f0 <memset>
c00110d9:	5f                   	pop    edi
c00110da:	58                   	pop    eax
c00110db:	6a 01                	push   0x1
c00110dd:	53                   	push   ebx
c00110de:	e8 93 aa ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c00110e3:	83 c4 10             	add    esp,0x10
c00110e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00110ee:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00110f6:	83 ec 0c             	sub    esp,0xc
c00110f9:	8d 54 24 20          	lea    edx,[esp+0x20]
c00110fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110ff:	52                   	push   edx
c0011100:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0011104:	51                   	push   ecx
c0011105:	6a 00                	push   0x0
c0011107:	6a 01                	push   0x1
c0011109:	53                   	push   ebx
c001110a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001110d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011112:	83 c4 20             	add    esp,0x20
c0011115:	85 c0                	test   eax,eax
c0011117:	89 c1                	mov    ecx,eax
c0011119:	0f 84 36 01 00 00    	je     c0011255 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001111f:	83 f8 0d             	cmp    eax,0xd
c0011122:	0f 84 22 01 00 00    	je     c001124a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011128:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001112d:	0f 84 f0 00 00 00    	je     c0011223 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011133:	83 f8 0a             	cmp    eax,0xa
c0011136:	74 13                	je     c001114b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011138:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001113d:	74 0c                	je     c001114b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001113f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011145:	0f 8e f6 00 00 00    	jle    c0011241 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001114b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001114f:	83 ec 0c             	sub    esp,0xc
c0011152:	8d 78 01             	lea    edi,[eax+0x1]
c0011155:	57                   	push   edi
c0011156:	e8 78 69 ff ff       	call   c0007ad3 <malloc>
c001115b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001115f:	8d 56 04             	lea    edx,[esi+0x4]
c0011162:	89 14 24             	mov    DWORD PTR [esp],edx
c0011165:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001116d:	e8 61 69 ff ff       	call   c0007ad3 <malloc>
c0011172:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011176:	83 c4 0c             	add    esp,0xc
c0011179:	57                   	push   edi
c001117a:	6a 00                	push   0x0
c001117c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011180:	e8 6b f3 fe ff       	call   c00004f0 <memset>
c0011185:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011189:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001118d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011191:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011193:	83 c4 0c             	add    esp,0xc
c0011196:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001119a:	52                   	push   edx
c001119b:	6a 00                	push   0x0
c001119d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111a1:	e8 4a f3 fe ff       	call   c00004f0 <memset>
c00111a6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111aa:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00111ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00111b1:	e8 ca f3 fe ff       	call   c0000580 <strlen>
c00111b6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00111ba:	89 c1                	mov    ecx,eax
c00111bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00111c1:	83 c4 10             	add    esp,0x10
c00111c4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00111c7:	40                   	inc    eax
c00111c8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00111cb:	85 d2                	test   edx,edx
c00111cd:	75 0c                	jne    c00111db <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00111cf:	83 ec 0c             	sub    esp,0xc
c00111d2:	6a 08                	push   0x8
c00111d4:	e8 fa 68 ff ff       	call   c0007ad3 <malloc>
c00111d9:	eb 0c                	jmp    c00111e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00111db:	51                   	push   ecx
c00111dc:	51                   	push   ecx
c00111dd:	c1 e0 03             	shl    eax,0x3
c00111e0:	50                   	push   eax
c00111e1:	52                   	push   edx
c00111e2:	e8 d8 68 ff ff       	call   c0007abf <realloc>
c00111e7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00111ea:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00111ed:	83 c4 10             	add    esp,0x10
c00111f0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00111f3:	8d 74 24 18          	lea    esi,[esp+0x18]
c00111f7:	b9 08 00 00 00       	mov    ecx,0x8
c00111fc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011200:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011202:	50                   	push   eax
c0011203:	31 f6                	xor    esi,esi
c0011205:	68 00 01 00 00       	push   0x100
c001120a:	6a 00                	push   0x0
c001120c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011210:	50                   	push   eax
c0011211:	e8 da f2 fe ff       	call   c00004f0 <memset>
c0011216:	83 c4 10             	add    esp,0x10
c0011219:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011221:	eb 27                	jmp    c001124a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011223:	83 f8 3d             	cmp    eax,0x3d
c0011226:	74 1e                	je     c0011246 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011228:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001122e:	7f 07                	jg     c0011237 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011230:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0011234:	46                   	inc    esi
c0011235:	eb 13                	jmp    c001124a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011237:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001123f:	eb 09                	jmp    c001124a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011241:	83 f8 3d             	cmp    eax,0x3d
c0011244:	75 ea                	jne    c0011230 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011246:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001124a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001124f:	0f 85 99 fe ff ff    	jne    c00110ee <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011255:	83 ec 0c             	sub    esp,0xc
c0011258:	53                   	push   ebx
c0011259:	e8 76 a9 ff ff       	call   c000bbd4 <File::close()>
c001125e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011263:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011266:	81 c4 3c 01 00 00    	add    esp,0x13c
c001126c:	5b                   	pop    ebx
c001126d:	5e                   	pop    esi
c001126e:	5f                   	pop    edi
c001126f:	5d                   	pop    ebp
c0011270:	c3                   	ret    
c0011271:	90                   	nop

c0011272 <EnvVarContainer::__loadSystem()>:
c0011272:	83 ec 10             	sub    esp,0x10
c0011275:	68 40 3c 02 c0       	push   0xc0023c40
c001127a:	68 30 23 02 c0       	push   0xc0022330
c001127f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011283:	e8 c6 fd ff ff       	call   c001104e <EnvVarContainer::loadFrom(char const*, char const*)>
c0011288:	83 c4 1c             	add    esp,0x1c
c001128b:	c3                   	ret    

c001128c <EnvVarContainer::__loadUser()>:
c001128c:	c3                   	ret    
c001128d:	90                   	nop

c001128e <EnvVarContainer::EnvVarContainer(Process*)>:
c001128e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011292:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001129c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ae:	90                   	nop
c00112af:	c3                   	ret    

c00112b0 <EnvVarContainer::~EnvVarContainer()>:
c00112b0:	83 ec 0c             	sub    esp,0xc
c00112b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ba:	85 c0                	test   eax,eax
c00112bc:	74 1d                	je     c00112db <EnvVarContainer::~EnvVarContainer()+0x2b>
c00112be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00112c4:	85 c0                	test   eax,eax
c00112c6:	74 13                	je     c00112db <EnvVarContainer::~EnvVarContainer()+0x2b>
c00112c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cf:	83 ec 0c             	sub    esp,0xc
c00112d2:	50                   	push   eax
c00112d3:	e8 0b 68 ff ff       	call   c0007ae3 <free>
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	90                   	nop
c00112dc:	83 c4 0c             	add    esp,0xc
c00112df:	c3                   	ret    

c00112e0 <KeGetEnv(Process*, char const*)>:
c00112e0:	53                   	push   ebx
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e8:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00112ee:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00112f2:	74 04                	je     c00112f8 <KeGetEnv(Process*, char const*)+0x18>
c00112f4:	85 c0                	test   eax,eax
c00112f6:	75 0b                	jne    c0011303 <KeGetEnv(Process*, char const*)+0x23>
c00112f8:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00112fd:	85 c0                	test   eax,eax
c00112ff:	75 19                	jne    c001131a <KeGetEnv(Process*, char const*)+0x3a>
c0011301:	eb 27                	jmp    c001132a <KeGetEnv(Process*, char const*)+0x4a>
c0011303:	52                   	push   edx
c0011304:	52                   	push   edx
c0011305:	53                   	push   ebx
c0011306:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001130c:	e8 3b fc ff ff       	call   c0010f4c <EnvVarContainer::getEnv(char const*)>
c0011311:	83 c4 10             	add    esp,0x10
c0011314:	85 c0                	test   eax,eax
c0011316:	75 28                	jne    c0011340 <KeGetEnv(Process*, char const*)+0x60>
c0011318:	eb de                	jmp    c00112f8 <KeGetEnv(Process*, char const*)+0x18>
c001131a:	52                   	push   edx
c001131b:	52                   	push   edx
c001131c:	53                   	push   ebx
c001131d:	50                   	push   eax
c001131e:	e8 29 fc ff ff       	call   c0010f4c <EnvVarContainer::getEnv(char const*)>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	85 c0                	test   eax,eax
c0011328:	75 16                	jne    c0011340 <KeGetEnv(Process*, char const*)+0x60>
c001132a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001132e:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011333:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011337:	83 c4 08             	add    esp,0x8
c001133a:	5b                   	pop    ebx
c001133b:	e9 0c fc ff ff       	jmp    c0010f4c <EnvVarContainer::getEnv(char const*)>
c0011340:	83 c4 08             	add    esp,0x8
c0011343:	5b                   	pop    ebx
c0011344:	c3                   	ret    

c0011345 <KeSetEnvSystem(char const*, char const*)>:
c0011345:	83 ec 10             	sub    esp,0x10
c0011348:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001134c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011350:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011356:	e8 2f fc ff ff       	call   c0010f8a <EnvVarContainer::setEnv(char const*, char const*)>
c001135b:	83 c4 1c             	add    esp,0x1c
c001135e:	c3                   	ret    

c001135f <KeSetEnvUser(char const*, char const*)>:
c001135f:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011364:	85 c0                	test   eax,eax
c0011366:	74 15                	je     c001137d <KeSetEnvUser(char const*, char const*)+0x1e>
c0011368:	83 ec 10             	sub    esp,0x10
c001136b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001136f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011373:	50                   	push   eax
c0011374:	e8 11 fc ff ff       	call   c0010f8a <EnvVarContainer::setEnv(char const*, char const*)>
c0011379:	83 c4 1c             	add    esp,0x1c
c001137c:	c3                   	ret    
c001137d:	c3                   	ret    

c001137e <KeSetEnvProcess(Process*, char const*, char const*)>:
c001137e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011382:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011388:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001138c:	e9 f9 fb ff ff       	jmp    c0010f8a <EnvVarContainer::setEnv(char const*, char const*)>

c0011391 <KeDeleteEnvSystem(char const*)>:
c0011391:	c3                   	ret    

c0011392 <KeDeleteEnvUser(char const*)>:
c0011392:	c3                   	ret    

c0011393 <KeDeleteEnvProcess(Process*, char const*)>:
c0011393:	c3                   	ret    

c0011394 <KeNewProcessEnv(Process*)>:
c0011394:	83 ec 28             	sub    esp,0x28
c0011397:	6a 0c                	push   0xc
c0011399:	e8 35 67 ff ff       	call   c0007ad3 <malloc>
c001139e:	5a                   	pop    edx
c001139f:	59                   	pop    ecx
c00113a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113a4:	50                   	push   eax
c00113a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113a9:	e8 e0 fe ff ff       	call   c001128e <EnvVarContainer::EnvVarContainer(Process*)>
c00113ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b2:	83 c4 2c             	add    esp,0x2c
c00113b5:	c3                   	ret    

c00113b6 <KeCopyProcessEnv(Process*, Process*)>:
c00113b6:	57                   	push   edi
c00113b7:	56                   	push   esi
c00113b8:	53                   	push   ebx
c00113b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113bd:	83 ec 0c             	sub    esp,0xc
c00113c0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00113c6:	6a 0c                	push   0xc
c00113c8:	e8 06 67 ff ff       	call   c0007ad3 <malloc>
c00113cd:	89 c3                	mov    ebx,eax
c00113cf:	58                   	pop    eax
c00113d0:	5a                   	pop    edx
c00113d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113d5:	53                   	push   ebx
c00113d6:	e8 b3 fe ff ff       	call   c001128e <EnvVarContainer::EnvVarContainer(Process*)>
c00113db:	8b 07                	mov    eax,DWORD PTR [edi]
c00113dd:	89 03                	mov    DWORD PTR [ebx],eax
c00113df:	c1 e0 03             	shl    eax,0x3
c00113e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00113e5:	e8 e9 66 ff ff       	call   c0007ad3 <malloc>
c00113ea:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00113ed:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00113ef:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00113f2:	89 c7                	mov    edi,eax
c00113f4:	c1 e1 03             	shl    ecx,0x3
c00113f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113f9:	83 c4 10             	add    esp,0x10
c00113fc:	89 d8                	mov    eax,ebx
c00113fe:	5b                   	pop    ebx
c00113ff:	5e                   	pop    esi
c0011400:	5f                   	pop    edi
c0011401:	c3                   	ret    

c0011402 <KeLoadSystemEnv()>:
c0011402:	53                   	push   ebx
c0011403:	83 ec 14             	sub    esp,0x14
c0011406:	6a 0c                	push   0xc
c0011408:	e8 c6 66 ff ff       	call   c0007ad3 <malloc>
c001140d:	89 c3                	mov    ebx,eax
c001140f:	58                   	pop    eax
c0011410:	5a                   	pop    edx
c0011411:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011417:	53                   	push   ebx
c0011418:	e8 71 fe ff ff       	call   c001128e <EnvVarContainer::EnvVarContainer(Process*)>
c001141d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011420:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011426:	e8 47 fe ff ff       	call   c0011272 <EnvVarContainer::__loadSystem()>
c001142b:	83 c4 18             	add    esp,0x18
c001142e:	5b                   	pop    ebx
c001142f:	c3                   	ret    

c0011430 <KeLoadUserEnv()>:
c0011430:	53                   	push   ebx
c0011431:	83 ec 14             	sub    esp,0x14
c0011434:	6a 0c                	push   0xc
c0011436:	e8 98 66 ff ff       	call   c0007ad3 <malloc>
c001143b:	89 c3                	mov    ebx,eax
c001143d:	58                   	pop    eax
c001143e:	5a                   	pop    edx
c001143f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011445:	53                   	push   ebx
c0011446:	e8 43 fe ff ff       	call   c001128e <EnvVarContainer::EnvVarContainer(Process*)>
c001144b:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011451:	83 c4 18             	add    esp,0x18
c0011454:	5b                   	pop    ebx
c0011455:	c3                   	ret    

c0011456 <KeFlushEnv()>:
c0011456:	c3                   	ret    

c0011457 <KeGetProcessTotalEnvCount(Process*)>:
c0011457:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145b:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011461:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011467:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001146c:	8b 00                	mov    eax,DWORD PTR [eax]
c001146e:	03 01                	add    eax,DWORD PTR [ecx]
c0011470:	85 d2                	test   edx,edx
c0011472:	74 02                	je     c0011476 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011474:	03 02                	add    eax,DWORD PTR [edx]
c0011476:	c3                   	ret    

c0011477 <KeGetProcessEnvPair(Process*, int)>:
c0011477:	57                   	push   edi
c0011478:	56                   	push   esi
c0011479:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c001147f:	53                   	push   ebx
c0011480:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011484:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011488:	85 f6                	test   esi,esi
c001148a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001148e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011494:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011496:	75 16                	jne    c00114ae <KeGetProcessEnvPair(Process*, int)+0x37>
c0011498:	39 c2                	cmp    edx,eax
c001149a:	7c 16                	jl     c00114b2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001149c:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00114a2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00114a4:	01 c6                	add    esi,eax
c00114a6:	39 d6                	cmp    esi,edx
c00114a8:	7e 3c                	jle    c00114e6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114aa:	29 c2                	sub    edx,eax
c00114ac:	eb 04                	jmp    c00114b2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114ae:	39 c2                	cmp    edx,eax
c00114b0:	7d 05                	jge    c00114b7 <KeGetProcessEnvPair(Process*, int)+0x40>
c00114b2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00114b5:	eb 20                	jmp    c00114d7 <KeGetProcessEnvPair(Process*, int)+0x60>
c00114b7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00114b9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00114bc:	39 d1                	cmp    ecx,edx
c00114be:	7e 04                	jle    c00114c4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00114c0:	29 c2                	sub    edx,eax
c00114c2:	eb 10                	jmp    c00114d4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00114c4:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00114ca:	03 0e                	add    ecx,DWORD PTR [esi]
c00114cc:	39 d1                	cmp    ecx,edx
c00114ce:	7e 16                	jle    c00114e6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114d0:	29 c2                	sub    edx,eax
c00114d2:	29 fa                	sub    edx,edi
c00114d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00114d7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00114da:	8b 02                	mov    eax,DWORD PTR [edx]
c00114dc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00114df:	89 03                	mov    DWORD PTR [ebx],eax
c00114e1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00114e4:	eb 1d                	jmp    c0011503 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00114e6:	83 ec 0c             	sub    esp,0xc
c00114e9:	68 52 23 02 c0       	push   0xc0022352
c00114ee:	e8 ac 00 00 00       	call   c001159f <KePanic(char const*)>
c00114f3:	83 c4 10             	add    esp,0x10
c00114f6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00114fc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011503:	89 d8                	mov    eax,ebx
c0011505:	5b                   	pop    ebx
c0011506:	5e                   	pop    esi
c0011507:	5f                   	pop    edi
c0011508:	c2 04 00             	ret    0x4

c001150b <CPU::current()>:
c001150b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011510:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011516:	c3                   	ret    

c0011517 <operator new(unsigned long)>:
c0011517:	e9 b7 65 ff ff       	jmp    c0007ad3 <malloc>

c001151c <operator delete(void*)>:
c001151c:	e9 d2 65 ff ff       	jmp    c0007af3 <rfree>

c0011521 <disableIRQs()>:
c0011521:	fa                   	cli    
c0011522:	c3                   	ret    

c0011523 <enableIRQs()>:
c0011523:	fb                   	sti    
c0011524:	c3                   	ret    

c0011525 <lockScheduler()>:
c0011525:	fa                   	cli    
c0011526:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001152c:	c3                   	ret    

c001152d <unlockScheduler()>:
c001152d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011532:	48                   	dec    eax
c0011533:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011538:	75 01                	jne    c001153b <unlockScheduler()+0xe>
c001153a:	fb                   	sti    
c001153b:	c3                   	ret    

c001153c <lockStuff()>:
c001153c:	fa                   	cli    
c001153d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011543:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011549:	c3                   	ret    

c001154a <unlockStuff()>:
c001154a:	83 ec 0c             	sub    esp,0xc
c001154d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011552:	48                   	dec    eax
c0011553:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011558:	75 18                	jne    c0011572 <unlockStuff()+0x28>
c001155a:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011561:	74 0f                	je     c0011572 <unlockStuff()+0x28>
c0011563:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001156d:	e8 da 4a 00 00       	call   c001604c <schedule()>
c0011572:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011577:	48                   	dec    eax
c0011578:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001157d:	75 01                	jne    c0011580 <unlockStuff()+0x36>
c001157f:	fb                   	sti    
c0011580:	83 c4 0c             	add    esp,0xc
c0011583:	c3                   	ret    

c0011584 <Virt::getAKernelVAS()>:
c0011584:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011589:	c3                   	ret    

c001158a <__not_memcpy>:
c001158a:	57                   	push   edi
c001158b:	56                   	push   esi
c001158c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011590:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011594:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011598:	89 c7                	mov    edi,eax
c001159a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001159c:	5e                   	pop    esi
c001159d:	5f                   	pop    edi
c001159e:	c3                   	ret    

c001159f <KePanic(char const*)>:
c001159f:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00115a6:	e9 31 6a 00 00       	jmp    c0017fdc <HalPanic(char const*)>

c00115ab <KePowerThread(void*)>:
c00115ab:	83 ec 0c             	sub    esp,0xc
c00115ae:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115b3:	48                   	dec    eax
c00115b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115b9:	75 01                	jne    c00115bc <KePowerThread(void*)+0x11>
c00115bb:	fb                   	sti    
c00115bc:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00115c3:	83 ec 0c             	sub    esp,0xc
c00115c6:	6a 0a                	push   0xa
c00115c8:	e8 af 4d 00 00       	call   c001637c <sleep(unsigned int)>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00115d7:	eb e3                	jmp    c00115bc <KePowerThread(void*)+0x11>

c00115d9 <KeChangePowerSettings(PowerSettings)>:
c00115d9:	57                   	push   edi
c00115da:	b9 09 00 00 00       	mov    ecx,0x9
c00115df:	56                   	push   esi
c00115e0:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c00115e5:	fc                   	cld    
c00115e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00115ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00115ec:	5e                   	pop    esi
c00115ed:	5f                   	pop    edi
c00115ee:	c3                   	ret    

c00115ef <KeUserIOReceived()>:
c00115ef:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00115f9:	c3                   	ret    

c00115fa <KeHandlePowerButton()>:
c00115fa:	83 ec 0c             	sub    esp,0xc
c00115fd:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011602:	83 f8 02             	cmp    eax,0x2
c0011605:	75 10                	jne    c0011617 <KeHandlePowerButton()+0x1d>
c0011607:	83 ec 0c             	sub    esp,0xc
c001160a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011610:	e8 35 5b ff ff       	call   c000714a <Computer::shutdown()>
c0011615:	eb 11                	jmp    c0011628 <KeHandlePowerButton()+0x2e>
c0011617:	48                   	dec    eax
c0011618:	75 11                	jne    c001162b <KeHandlePowerButton()+0x31>
c001161a:	83 ec 0c             	sub    esp,0xc
c001161d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011623:	e8 52 5b ff ff       	call   c000717a <Computer::sleep()>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	83 c4 0c             	add    esp,0xc
c001162e:	c3                   	ret    

c001162f <KeHandleSleepButton()>:
c001162f:	83 ec 0c             	sub    esp,0xc
c0011632:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011637:	83 f8 02             	cmp    eax,0x2
c001163a:	75 10                	jne    c001164c <KeHandleSleepButton()+0x1d>
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011645:	e8 00 5b ff ff       	call   c000714a <Computer::shutdown()>
c001164a:	eb 11                	jmp    c001165d <KeHandleSleepButton()+0x2e>
c001164c:	48                   	dec    eax
c001164d:	75 11                	jne    c0011660 <KeHandleSleepButton()+0x31>
c001164f:	83 ec 0c             	sub    esp,0xc
c0011652:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011658:	e8 1d 5b ff ff       	call   c000717a <Computer::sleep()>
c001165d:	83 c4 10             	add    esp,0x10
c0011660:	83 c4 0c             	add    esp,0xc
c0011663:	c3                   	ret    

c0011664 <KeSetupPowerManager()>:
c0011664:	83 ec 0c             	sub    esp,0xc
c0011667:	68 f0 00 00 00       	push   0xf0
c001166c:	6a 00                	push   0x0
c001166e:	68 ab 15 01 c0       	push   0xc00115ab
c0011673:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011679:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011683:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001168a:	e8 71 47 00 00       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c001168f:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011699:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00116a3:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00116ad:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00116b7:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00116c1:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00116cb:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00116d5:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00116df:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00116e9:	83 c4 1c             	add    esp,0x1c
c00116ec:	c3                   	ret    

c00116ed <KeRand()>:
c00116ed:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00116f7:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011701:	53                   	push   ebx
c0011702:	01 c1                	add    ecx,eax
c0011704:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011709:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001170f:	01 ca                	add    edx,ecx
c0011711:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011716:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001171b:	83 d2 00             	adc    edx,0x0
c001171e:	0f b7 da             	movzx  ebx,dx
c0011721:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011727:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001172b:	5b                   	pop    ebx
c001172c:	c3                   	ret    

c001172d <KeSeedRand(unsigned int)>:
c001172d:	53                   	push   ebx
c001172e:	83 ec 08             	sub    esp,0x8
c0011731:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011735:	e8 c1 6b 00 00       	call   c00182fb <HalGetRand()>
c001173a:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011744:	31 d8                	xor    eax,ebx
c0011746:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001174b:	e8 9d ff ff ff       	call   c00116ed <KeRand()>
c0011750:	83 c4 08             	add    esp,0x8
c0011753:	5b                   	pop    ebx
c0011754:	eb 97                	jmp    c00116ed <KeRand()>

c0011756 <KeInitRand()>:
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	e8 92 69 00 00       	call   c00180f0 <HalQueryPerformanceCounter()>
c001175e:	0f 20 da             	mov    edx,cr3
c0011761:	0f 22 da             	mov    cr3,edx
c0011764:	0f 20 da             	mov    edx,cr3
c0011767:	0f 22 da             	mov    cr3,edx
c001176a:	0f 20 da             	mov    edx,cr3
c001176d:	0f 22 da             	mov    cr3,edx
c0011770:	0f 20 da             	mov    edx,cr3
c0011773:	0f 22 da             	mov    cr3,edx
c0011776:	83 ec 0c             	sub    esp,0xc
c0011779:	35 03 8a 95 38       	xor    eax,0x38958a03
c001177e:	50                   	push   eax
c001177f:	e8 a9 ff ff ff       	call   c001172d <KeSeedRand(unsigned int)>
c0011784:	83 c4 1c             	add    esp,0x1c
c0011787:	c3                   	ret    

c0011788 <KeResolveCompatibilitySymbol(char*)>:
c0011788:	83 ec 0c             	sub    esp,0xc
c001178b:	83 ec 08             	sub    esp,0x8
c001178e:	68 6c 23 02 c0       	push   0xc002236c
c0011793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011797:	e8 e4 ef fe ff       	call   c0000780 <strcmp>
c001179c:	83 c4 10             	add    esp,0x10
c001179f:	85 c0                	test   eax,eax
c00117a1:	0f 94 c0             	sete   al
c00117a4:	0f b6 c0             	movzx  eax,al
c00117a7:	85 c0                	test   eax,eax
c00117a9:	74 0d                	je     c00117b8 <KeResolveCompatibilitySymbol(char*)+0x30>
c00117ab:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00117b0:	e9 8b 01 00 00       	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117b5:	8d 76 00             	lea    esi,[esi+0x0]
c00117b8:	83 ec 08             	sub    esp,0x8
c00117bb:	68 75 23 02 c0       	push   0xc0022375
c00117c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117c4:	e8 b7 ef fe ff       	call   c0000780 <strcmp>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	85 c0                	test   eax,eax
c00117ce:	0f 94 c0             	sete   al
c00117d1:	0f b6 c0             	movzx  eax,al
c00117d4:	85 c0                	test   eax,eax
c00117d6:	74 0c                	je     c00117e4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00117d8:	b8 10 f7 01 c0       	mov    eax,0xc001f710
c00117dd:	e9 5e 01 00 00       	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117e2:	66 90                	xchg   ax,ax
c00117e4:	83 ec 08             	sub    esp,0x8
c00117e7:	68 7f 23 02 c0       	push   0xc002237f
c00117ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f0:	e8 8b ef fe ff       	call   c0000780 <strcmp>
c00117f5:	83 c4 10             	add    esp,0x10
c00117f8:	85 c0                	test   eax,eax
c00117fa:	0f 94 c0             	sete   al
c00117fd:	0f b6 c0             	movzx  eax,al
c0011800:	85 c0                	test   eax,eax
c0011802:	74 0c                	je     c0011810 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011804:	b8 44 f4 01 c0       	mov    eax,0xc001f444
c0011809:	e9 32 01 00 00       	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001180e:	66 90                	xchg   ax,ax
c0011810:	83 ec 08             	sub    esp,0x8
c0011813:	68 88 23 02 c0       	push   0xc0022388
c0011818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001181c:	e8 5f ef fe ff       	call   c0000780 <strcmp>
c0011821:	83 c4 10             	add    esp,0x10
c0011824:	85 c0                	test   eax,eax
c0011826:	0f 94 c0             	sete   al
c0011829:	0f b6 c0             	movzx  eax,al
c001182c:	85 c0                	test   eax,eax
c001182e:	74 0c                	je     c001183c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011830:	b8 9f 15 01 c0       	mov    eax,0xc001159f
c0011835:	e9 06 01 00 00       	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001183a:	66 90                	xchg   ax,ax
c001183c:	83 ec 08             	sub    esp,0x8
c001183f:	68 9b 23 02 c0       	push   0xc002239b
c0011844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011848:	e8 33 ef fe ff       	call   c0000780 <strcmp>
c001184d:	83 c4 10             	add    esp,0x10
c0011850:	85 c0                	test   eax,eax
c0011852:	0f 94 c0             	sete   al
c0011855:	0f b6 c0             	movzx  eax,al
c0011858:	85 c0                	test   eax,eax
c001185a:	74 0c                	je     c0011868 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001185c:	b8 a1 0e 01 c0       	mov    eax,0xc0010ea1
c0011861:	e9 da 00 00 00       	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011866:	66 90                	xchg   ax,ax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 b8 23 02 c0       	push   0xc00223b8
c0011870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011874:	e8 07 ef fe ff       	call   c0000780 <strcmp>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	85 c0                	test   eax,eax
c001187e:	0f 94 c0             	sete   al
c0011881:	0f b6 c0             	movzx  eax,al
c0011884:	85 c0                	test   eax,eax
c0011886:	74 0c                	je     c0011894 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011888:	b8 10 f8 01 c0       	mov    eax,0xc001f810
c001188d:	e9 ae 00 00 00       	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011892:	66 90                	xchg   ax,ax
c0011894:	83 ec 08             	sub    esp,0x8
c0011897:	68 c2 23 02 c0       	push   0xc00223c2
c001189c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a0:	e8 db ee fe ff       	call   c0000780 <strcmp>
c00118a5:	83 c4 10             	add    esp,0x10
c00118a8:	85 c0                	test   eax,eax
c00118aa:	0f 94 c0             	sete   al
c00118ad:	0f b6 c0             	movzx  eax,al
c00118b0:	85 c0                	test   eax,eax
c00118b2:	74 0c                	je     c00118c0 <KeResolveCompatibilitySymbol(char*)+0x138>
c00118b4:	b8 90 f5 01 c0       	mov    eax,0xc001f590
c00118b9:	e9 82 00 00 00       	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118be:	66 90                	xchg   ax,ax
c00118c0:	83 ec 08             	sub    esp,0x8
c00118c3:	68 cb 23 02 c0       	push   0xc00223cb
c00118c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118cc:	e8 af ee fe ff       	call   c0000780 <strcmp>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	85 c0                	test   eax,eax
c00118d6:	0f 94 c0             	sete   al
c00118d9:	0f b6 c0             	movzx  eax,al
c00118dc:	85 c0                	test   eax,eax
c00118de:	74 08                	je     c00118e8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00118e0:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00118e5:	eb 59                	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118e7:	90                   	nop
c00118e8:	83 ec 08             	sub    esp,0x8
c00118eb:	68 e3 23 02 c0       	push   0xc00223e3
c00118f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f4:	e8 87 ee fe ff       	call   c0000780 <strcmp>
c00118f9:	83 c4 10             	add    esp,0x10
c00118fc:	85 c0                	test   eax,eax
c00118fe:	0f 94 c0             	sete   al
c0011901:	0f b6 c0             	movzx  eax,al
c0011904:	85 c0                	test   eax,eax
c0011906:	74 08                	je     c0011910 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011908:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001190d:	eb 31                	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001190f:	90                   	nop
c0011910:	83 ec 08             	sub    esp,0x8
c0011913:	68 f0 23 02 c0       	push   0xc00223f0
c0011918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191c:	e8 5f ee fe ff       	call   c0000780 <strcmp>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	85 c0                	test   eax,eax
c0011926:	0f 94 c0             	sete   al
c0011929:	0f b6 c0             	movzx  eax,al
c001192c:	85 c0                	test   eax,eax
c001192e:	74 08                	je     c0011938 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011930:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011935:	eb 09                	jmp    c0011940 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011937:	90                   	nop
c0011938:	b8 00 00 00 00       	mov    eax,0x0
c001193d:	8d 76 00             	lea    esi,[esi+0x0]
c0011940:	83 c4 0c             	add    esp,0xc
c0011943:	c3                   	ret    

c0011944 <KiSigKill(int)>:
c0011944:	83 ec 0c             	sub    esp,0xc
c0011947:	6a 00                	push   0x0
c0011949:	6a 00                	push   0x0
c001194b:	6a ff                	push   0xffffffff
c001194d:	6a 01                	push   0x1
c001194f:	e8 fe 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011954:	83 c4 1c             	add    esp,0x1c
c0011957:	c3                   	ret    

c0011958 <KiDefaultSignalHandlerIgnore(int)>:
c0011958:	c3                   	ret    

c0011959 <KiDefaultSignalHandlerPause(int)>:
c0011959:	57                   	push   edi
c001195a:	b9 07 00 00 00       	mov    ecx,0x7
c001195f:	56                   	push   esi
c0011960:	be 39 24 02 c0       	mov    esi,0xc0022439
c0011965:	83 ec 24             	sub    esp,0x24
c0011968:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001196c:	fc                   	cld    
c001196d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001196f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011973:	50                   	push   eax
c0011974:	6a 00                	push   0x0
c0011976:	6a 00                	push   0x0
c0011978:	6a 27                	push   0x27
c001197a:	e8 d3 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001197f:	83 c4 34             	add    esp,0x34
c0011982:	5e                   	pop    esi
c0011983:	5f                   	pop    edi
c0011984:	c3                   	ret    

c0011985 <KiDefaultSignalHandlerResume(int)>:
c0011985:	57                   	push   edi
c0011986:	b9 1d 00 00 00       	mov    ecx,0x1d
c001198b:	56                   	push   esi
c001198c:	be 55 24 02 c0       	mov    esi,0xc0022455
c0011991:	83 ec 24             	sub    esp,0x24
c0011994:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011998:	fc                   	cld    
c0011999:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001199b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001199f:	50                   	push   eax
c00119a0:	6a 00                	push   0x0
c00119a2:	6a 00                	push   0x0
c00119a4:	6a 27                	push   0x27
c00119a6:	e8 a7 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119ab:	83 c4 34             	add    esp,0x34
c00119ae:	5e                   	pop    esi
c00119af:	5f                   	pop    edi
c00119b0:	c3                   	ret    

c00119b1 <KeDeinitSignals(SigHandlerBlock*)>:
c00119b1:	e9 2d 61 ff ff       	jmp    c0007ae3 <free>

c00119b6 <KeInitSignals()>:
c00119b6:	53                   	push   ebx
c00119b7:	83 ec 14             	sub    esp,0x14
c00119ba:	68 c8 00 00 00       	push   0xc8
c00119bf:	e8 0f 61 ff ff       	call   c0007ad3 <malloc>
c00119c4:	83 c4 0c             	add    esp,0xc
c00119c7:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00119d1:	89 c3                	mov    ebx,eax
c00119d3:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00119dd:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00119e3:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c00119e7:	6a 20                	push   0x20
c00119e9:	6a 00                	push   0x0
c00119eb:	50                   	push   eax
c00119ec:	e8 ff ea fe ff       	call   c00004f0 <memset>
c00119f1:	83 c4 0c             	add    esp,0xc
c00119f4:	6a 44                	push   0x44
c00119f6:	6a 00                	push   0x0
c00119f8:	53                   	push   ebx
c00119f9:	e8 f2 ea fe ff       	call   c00004f0 <memset>
c00119fe:	83 c4 18             	add    esp,0x18
c0011a01:	89 d8                	mov    eax,ebx
c0011a03:	5b                   	pop    ebx
c0011a04:	c3                   	ret    

c0011a05 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a05:	53                   	push   ebx
c0011a06:	b8 01 00 00 00       	mov    eax,0x1
c0011a0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a13:	83 f9 10             	cmp    ecx,0x10
c0011a16:	7f 21                	jg     c0011a39 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a1c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a1f:	89 03                	mov    DWORD PTR [ebx],eax
c0011a21:	b8 01 00 00 00       	mov    eax,0x1
c0011a26:	d3 e0                	shl    eax,cl
c0011a28:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a2c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a2f:	31 c0                	xor    eax,eax
c0011a31:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a39:	5b                   	pop    ebx
c0011a3a:	c3                   	ret    

c0011a3b <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a3b:	55                   	push   ebp
c0011a3c:	57                   	push   edi
c0011a3d:	bf 08 00 00 00       	mov    edi,0x8
c0011a42:	56                   	push   esi
c0011a43:	53                   	push   ebx
c0011a44:	83 ec 18             	sub    esp,0x18
c0011a47:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a4b:	68 72 24 02 c0       	push   0xc0022472
c0011a50:	e8 b5 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	31 c9                	xor    ecx,ecx
c0011a5a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011a61:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011a67:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011a6b:	99                   	cdq    
c0011a6c:	f7 ff                	idiv   edi
c0011a6e:	8d 42 24             	lea    eax,[edx+0x24]
c0011a71:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011a75:	85 f6                	test   esi,esi
c0011a77:	75 1a                	jne    c0011a93 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011a79:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a7d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011a81:	50                   	push   eax
c0011a82:	50                   	push   eax
c0011a83:	52                   	push   edx
c0011a84:	68 83 24 02 c0       	push   0xc0022483
c0011a89:	e8 7c 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a8e:	83 c4 10             	add    esp,0x10
c0011a91:	eb 1b                	jmp    c0011aae <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011a93:	41                   	inc    ecx
c0011a94:	83 f9 08             	cmp    ecx,0x8
c0011a97:	75 ce                	jne    c0011a67 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011a99:	83 ec 0c             	sub    esp,0xc
c0011a9c:	be 01 00 00 00       	mov    esi,0x1
c0011aa1:	68 a4 24 02 c0       	push   0xc00224a4
c0011aa6:	e8 5f 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	83 c4 0c             	add    esp,0xc
c0011ab1:	89 f0                	mov    eax,esi
c0011ab3:	5b                   	pop    ebx
c0011ab4:	5e                   	pop    esi
c0011ab5:	5f                   	pop    edi
c0011ab6:	5d                   	pop    ebp
c0011ab7:	c3                   	ret    

c0011ab8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011ab8:	55                   	push   ebp
c0011ab9:	57                   	push   edi
c0011aba:	56                   	push   esi
c0011abb:	53                   	push   ebx
c0011abc:	51                   	push   ecx
c0011abd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ac1:	85 db                	test   ebx,ebx
c0011ac3:	0f 84 bc 00 00 00    	je     c0011b85 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ac9:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011ad0:	0f 84 af 00 00 00    	je     c0011b85 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ad6:	31 c9                	xor    ecx,ecx
c0011ad8:	bf 08 00 00 00       	mov    edi,0x8
c0011add:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011ae3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011ae6:	99                   	cdq    
c0011ae7:	f7 ff                	idiv   edi
c0011ae9:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011af0:	85 ed                	test   ebp,ebp
c0011af2:	0f 84 9e 00 00 00    	je     c0011b96 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011af8:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011afe:	89 e9                	mov    ecx,ebp
c0011b00:	bf 01 00 00 00       	mov    edi,0x1
c0011b05:	d3 e7                	shl    edi,cl
c0011b07:	31 c9                	xor    ecx,ecx
c0011b09:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b0c:	b8 01 00 00 00       	mov    eax,0x1
c0011b11:	d3 e0                	shl    eax,cl
c0011b13:	85 04 24             	test   DWORD PTR [esp],eax
c0011b16:	74 06                	je     c0011b1e <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b18:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b1c:	75 67                	jne    c0011b85 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b1e:	41                   	inc    ecx
c0011b1f:	83 f9 11             	cmp    ecx,0x11
c0011b22:	75 e8                	jne    c0011b0c <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b27:	46                   	inc    esi
c0011b28:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b2e:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b39:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b40:	09 f8                	or     eax,edi
c0011b42:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b48:	31 c0                	xor    eax,eax
c0011b4a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011b52:	74 09                	je     c0011b5d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011b54:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b5b:	eb 06                	jmp    c0011b63 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011b5d:	40                   	inc    eax
c0011b5e:	83 f8 08             	cmp    eax,0x8
c0011b61:	75 e7                	jne    c0011b4a <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011b63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b67:	83 fd 09             	cmp    ebp,0x9
c0011b6a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011b6d:	89 2a                	mov    DWORD PTR [edx],ebp
c0011b6f:	75 07                	jne    c0011b78 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011b71:	b8 44 19 01 c0       	mov    eax,0xc0011944
c0011b76:	eb 31                	jmp    c0011ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b78:	83 f8 01             	cmp    eax,0x1
c0011b7b:	75 0c                	jne    c0011b89 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011b7d:	f7 d7                	not    edi
c0011b7f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011b85:	31 c0                	xor    eax,eax
c0011b87:	eb 20                	jmp    c0011ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b89:	85 c0                	test   eax,eax
c0011b8b:	75 1c                	jne    c0011ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b8d:	8b 04 ad a0 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc360]
c0011b94:	eb 13                	jmp    c0011ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b96:	41                   	inc    ecx
c0011b97:	46                   	inc    esi
c0011b98:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b9e:	83 f9 08             	cmp    ecx,0x8
c0011ba1:	0f 85 36 ff ff ff    	jne    c0011add <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011ba7:	eb dc                	jmp    c0011b85 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ba9:	5a                   	pop    edx
c0011baa:	5b                   	pop    ebx
c0011bab:	5e                   	pop    esi
c0011bac:	5f                   	pop    edi
c0011bad:	5d                   	pop    ebp
c0011bae:	c3                   	ret    

c0011baf <KiCheckSignalZ>:
c0011baf:	83 ec 10             	sub    esp,0x10
c0011bb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011bb6:	50                   	push   eax
c0011bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bbf:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bc5:	e8 ee fe ff ff       	call   c0011ab8 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011bca:	5a                   	pop    edx
c0011bcb:	31 d2                	xor    edx,edx
c0011bcd:	59                   	pop    ecx
c0011bce:	85 c0                	test   eax,eax
c0011bd0:	74 19                	je     c0011beb <KiCheckSignalZ+0x3c>
c0011bd2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011bd8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011bdb:	89 02                	mov    DWORD PTR [edx],eax
c0011bdd:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011be4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011be8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011beb:	89 d0                	mov    eax,edx
c0011bed:	83 c4 10             	add    esp,0x10
c0011bf0:	c3                   	ret    

c0011bf1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011bf1:	56                   	push   esi
c0011bf2:	53                   	push   ebx
c0011bf3:	bb 01 00 00 00       	mov    ebx,0x1
c0011bf8:	52                   	push   edx
c0011bf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011bfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c01:	d3 e3                	shl    ebx,cl
c0011c03:	83 f9 10             	cmp    ecx,0x10
c0011c06:	7f 08                	jg     c0011c10 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c08:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c0e:	75 10                	jne    c0011c20 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c10:	83 ec 0c             	sub    esp,0xc
c0011c13:	68 b5 24 02 c0       	push   0xc00224b5
c0011c18:	e8 82 f9 ff ff       	call   c001159f <KePanic(char const*)>
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	f7 d3                	not    ebx
c0011c22:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c28:	58                   	pop    eax
c0011c29:	5b                   	pop    ebx
c0011c2a:	5e                   	pop    esi
c0011c2b:	c3                   	ret    

c0011c2c <KiFinishSignalZ>:
c0011c2c:	53                   	push   ebx
c0011c2d:	83 ec 10             	sub    esp,0x10
c0011c30:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c34:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c3f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c45:	e8 a7 ff ff ff       	call   c0011bf1 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c4a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011c5e:	83 c4 18             	add    esp,0x18
c0011c61:	5b                   	pop    ebx
c0011c62:	c3                   	ret    

c0011c63 <SysSeekDir(regs*)>:
c0011c63:	31 c0                	xor    eax,eax
c0011c65:	31 d2                	xor    edx,edx
c0011c67:	c3                   	ret    

c0011c68 <SysTellDir(regs*)>:
c0011c68:	31 c0                	xor    eax,eax
c0011c6a:	31 d2                	xor    edx,edx
c0011c6c:	c3                   	ret    

c0011c6d <SysVerify(regs*)>:
c0011c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c71:	31 d2                	xor    edx,edx
c0011c73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c76:	c3                   	ret    

c0011c77 <SysGetArgc(regs*)>:
c0011c77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c7f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011c85:	89 c2                	mov    edx,eax
c0011c87:	c1 fa 1f             	sar    edx,0x1f
c0011c8a:	c3                   	ret    

c0011c8b <SysTTYName(regs*)>:
c0011c8b:	b8 01 00 00 00       	mov    eax,0x1
c0011c90:	31 d2                	xor    edx,edx
c0011c92:	c3                   	ret    

c0011c93 <SysFormatDisk(regs*)>:
c0011c93:	56                   	push   esi
c0011c94:	53                   	push   ebx
c0011c95:	83 ec 04             	sub    esp,0x4
c0011c98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c9c:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011ca2:	eb 2a                	jmp    c0011cce <SysFormatDisk(regs*)+0x3b>
c0011ca4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011ca7:	83 ec 0c             	sub    esp,0xc
c0011caa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011cad:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011caf:	51                   	push   ecx
c0011cb0:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011cb3:	51                   	push   ecx
c0011cb4:	50                   	push   eax
c0011cb5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011cbc:	50                   	push   eax
c0011cbd:	53                   	push   ebx
c0011cbe:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011cc1:	83 c4 20             	add    esp,0x20
c0011cc4:	83 f8 08             	cmp    eax,0x8
c0011cc7:	89 c1                	mov    ecx,eax
c0011cc9:	75 14                	jne    c0011cdf <SysFormatDisk(regs*)+0x4c>
c0011ccb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011cce:	85 db                	test   ebx,ebx
c0011cd0:	75 d2                	jne    c0011ca4 <SysFormatDisk(regs*)+0x11>
c0011cd2:	b8 03 00 00 00       	mov    eax,0x3
c0011cd7:	31 d2                	xor    edx,edx
c0011cd9:	83 c4 04             	add    esp,0x4
c0011cdc:	5b                   	pop    ebx
c0011cdd:	5e                   	pop    esi
c0011cde:	c3                   	ret    
c0011cdf:	85 c0                	test   eax,eax
c0011ce1:	74 13                	je     c0011cf6 <SysFormatDisk(regs*)+0x63>
c0011ce3:	31 d2                	xor    edx,edx
c0011ce5:	83 f9 09             	cmp    ecx,0x9
c0011ce8:	b8 01 00 00 00       	mov    eax,0x1
c0011ced:	74 ea                	je     c0011cd9 <SysFormatDisk(regs*)+0x46>
c0011cef:	b8 02 00 00 00       	mov    eax,0x2
c0011cf4:	eb e1                	jmp    c0011cd7 <SysFormatDisk(regs*)+0x44>
c0011cf6:	31 c0                	xor    eax,eax
c0011cf8:	eb dd                	jmp    c0011cd7 <SysFormatDisk(regs*)+0x44>

c0011cfa <SysSetDiskVolumeLabel(regs*)>:
c0011cfa:	56                   	push   esi
c0011cfb:	53                   	push   ebx
c0011cfc:	83 ec 04             	sub    esp,0x4
c0011cff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d03:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d06:	83 f8 19             	cmp    eax,0x19
c0011d09:	77 33                	ja     c0011d3e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d0b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d12:	85 c9                	test   ecx,ecx
c0011d14:	74 28                	je     c0011d3e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d16:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d19:	85 db                	test   ebx,ebx
c0011d1b:	74 21                	je     c0011d3e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d1d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d23:	85 d2                	test   edx,edx
c0011d25:	74 17                	je     c0011d3e <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d27:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d29:	53                   	push   ebx
c0011d2a:	50                   	push   eax
c0011d2b:	51                   	push   ecx
c0011d2c:	52                   	push   edx
c0011d2d:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	83 c4 04             	add    esp,0x4
c0011d36:	5b                   	pop    ebx
c0011d37:	5e                   	pop    esi
c0011d38:	89 c2                	mov    edx,eax
c0011d3a:	c1 fa 1f             	sar    edx,0x1f
c0011d3d:	c3                   	ret    
c0011d3e:	83 c4 04             	add    esp,0x4
c0011d41:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d46:	5b                   	pop    ebx
c0011d47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d4c:	5e                   	pop    esi
c0011d4d:	c3                   	ret    

c0011d4e <SysGetDiskVolumeLabel(regs*)>:
c0011d4e:	57                   	push   edi
c0011d4f:	56                   	push   esi
c0011d50:	53                   	push   ebx
c0011d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d55:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011d58:	83 fa 19             	cmp    edx,0x19
c0011d5b:	77 3c                	ja     c0011d99 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d5d:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011d64:	85 c9                	test   ecx,ecx
c0011d66:	74 31                	je     c0011d99 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d68:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011d6b:	85 db                	test   ebx,ebx
c0011d6d:	74 2a                	je     c0011d99 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d6f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d72:	85 f6                	test   esi,esi
c0011d74:	74 23                	je     c0011d99 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d76:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011d7c:	85 c0                	test   eax,eax
c0011d7e:	74 19                	je     c0011d99 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d80:	83 ec 0c             	sub    esp,0xc
c0011d83:	8b 38                	mov    edi,DWORD PTR [eax]
c0011d85:	56                   	push   esi
c0011d86:	53                   	push   ebx
c0011d87:	52                   	push   edx
c0011d88:	51                   	push   ecx
c0011d89:	50                   	push   eax
c0011d8a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011d8d:	83 c4 20             	add    esp,0x20
c0011d90:	5b                   	pop    ebx
c0011d91:	5e                   	pop    esi
c0011d92:	89 c2                	mov    edx,eax
c0011d94:	c1 fa 1f             	sar    edx,0x1f
c0011d97:	5f                   	pop    edi
c0011d98:	c3                   	ret    
c0011d99:	5b                   	pop    ebx
c0011d9a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011da4:	5e                   	pop    esi
c0011da5:	5f                   	pop    edi
c0011da6:	c3                   	ret    

c0011da7 <SysShutdown(regs*)>:
c0011da7:	57                   	push   edi
c0011da8:	56                   	push   esi
c0011da9:	83 ec 04             	sub    esp,0x4
c0011dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011db3:	85 c0                	test   eax,eax
c0011db5:	74 1e                	je     c0011dd5 <SysShutdown(regs*)+0x2e>
c0011db7:	83 f8 01             	cmp    eax,0x1
c0011dba:	74 5f                	je     c0011e1b <SysShutdown(regs*)+0x74>
c0011dbc:	83 f8 02             	cmp    eax,0x2
c0011dbf:	be ff ff ff ff       	mov    esi,0xffffffff
c0011dc4:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011dc9:	74 32                	je     c0011dfd <SysShutdown(regs*)+0x56>
c0011dcb:	83 c4 04             	add    esp,0x4
c0011dce:	89 f0                	mov    eax,esi
c0011dd0:	5e                   	pop    esi
c0011dd1:	89 fa                	mov    edx,edi
c0011dd3:	5f                   	pop    edi
c0011dd4:	c3                   	ret    
c0011dd5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011dda:	be ff ff ff ff       	mov    esi,0xffffffff
c0011ddf:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011de4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011de6:	6a 00                	push   0x0
c0011de8:	6a 00                	push   0x0
c0011dea:	6a 00                	push   0x0
c0011dec:	50                   	push   eax
c0011ded:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011df0:	83 c4 10             	add    esp,0x10
c0011df3:	89 f0                	mov    eax,esi
c0011df5:	83 c4 04             	add    esp,0x4
c0011df8:	89 fa                	mov    edx,edi
c0011dfa:	5e                   	pop    esi
c0011dfb:	5f                   	pop    edi
c0011dfc:	c3                   	ret    
c0011dfd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e02:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e04:	6a 00                	push   0x0
c0011e06:	6a 00                	push   0x0
c0011e08:	6a 01                	push   0x1
c0011e0a:	50                   	push   eax
c0011e0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e0e:	83 c4 10             	add    esp,0x10
c0011e11:	89 f0                	mov    eax,esi
c0011e13:	83 c4 04             	add    esp,0x4
c0011e16:	89 fa                	mov    edx,edi
c0011e18:	5e                   	pop    esi
c0011e19:	5f                   	pop    edi
c0011e1a:	c3                   	ret    
c0011e1b:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e20:	85 c0                	test   eax,eax
c0011e22:	74 02                	je     c0011e26 <SysShutdown(regs*)+0x7f>
c0011e24:	ff d0                	call   eax
c0011e26:	31 f6                	xor    esi,esi
c0011e28:	83 c4 04             	add    esp,0x4
c0011e2b:	89 f0                	mov    eax,esi
c0011e2d:	31 ff                	xor    edi,edi
c0011e2f:	5e                   	pop    esi
c0011e30:	89 fa                	mov    edx,edi
c0011e32:	5f                   	pop    edi
c0011e33:	c3                   	ret    

c0011e34 <SysRealpath(regs*)>:
c0011e34:	53                   	push   ebx
c0011e35:	83 ec 08             	sub    esp,0x8
c0011e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3c:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011e3f:	85 c9                	test   ecx,ecx
c0011e41:	74 36                	je     c0011e79 <SysRealpath(regs*)+0x45>
c0011e43:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e46:	31 d2                	xor    edx,edx
c0011e48:	b8 01 00 00 00       	mov    eax,0x1
c0011e4d:	85 db                	test   ebx,ebx
c0011e4f:	75 05                	jne    c0011e56 <SysRealpath(regs*)+0x22>
c0011e51:	83 c4 08             	add    esp,0x8
c0011e54:	5b                   	pop    ebx
c0011e55:	c3                   	ret    
c0011e56:	6a 00                	push   0x0
c0011e58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e60:	05 0c 01 00 00       	add    eax,0x10c
c0011e65:	50                   	push   eax
c0011e66:	51                   	push   ecx
c0011e67:	53                   	push   ebx
c0011e68:	e8 ef 99 ff ff       	call   c000b85c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e6d:	83 c4 10             	add    esp,0x10
c0011e70:	31 c0                	xor    eax,eax
c0011e72:	31 d2                	xor    edx,edx
c0011e74:	83 c4 08             	add    esp,0x8
c0011e77:	5b                   	pop    ebx
c0011e78:	c3                   	ret    
c0011e79:	b8 01 00 00 00       	mov    eax,0x1
c0011e7e:	31 d2                	xor    edx,edx
c0011e80:	eb f2                	jmp    c0011e74 <SysRealpath(regs*)+0x40>

c0011e82 <SysReadDir(regs*)>:
c0011e82:	53                   	push   ebx
c0011e83:	83 ec 18             	sub    esp,0x18
c0011e86:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e8d:	83 f8 02             	cmp    eax,0x2
c0011e90:	76 4f                	jbe    c0011ee1 <SysReadDir(regs*)+0x5f>
c0011e92:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011e99:	77 52                	ja     c0011eed <SysReadDir(regs*)+0x6b>
c0011e9b:	83 ec 0c             	sub    esp,0xc
c0011e9e:	50                   	push   eax
c0011e9f:	e8 f7 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ea4:	83 c4 10             	add    esp,0x10
c0011ea7:	85 c0                	test   eax,eax
c0011ea9:	74 42                	je     c0011eed <SysReadDir(regs*)+0x6b>
c0011eab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011eb3:	83 ec 0c             	sub    esp,0xc
c0011eb6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011eba:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ebc:	51                   	push   ecx
c0011ebd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ec0:	51                   	push   ecx
c0011ec1:	6a 00                	push   0x0
c0011ec3:	68 10 01 00 00       	push   0x110
c0011ec8:	50                   	push   eax
c0011ec9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ecc:	83 c4 20             	add    esp,0x20
c0011ecf:	85 c0                	test   eax,eax
c0011ed1:	89 c1                	mov    ecx,eax
c0011ed3:	74 27                	je     c0011efc <SysReadDir(regs*)+0x7a>
c0011ed5:	31 d2                	xor    edx,edx
c0011ed7:	83 f9 07             	cmp    ecx,0x7
c0011eda:	b8 02 00 00 00       	mov    eax,0x2
c0011edf:	75 16                	jne    c0011ef7 <SysReadDir(regs*)+0x75>
c0011ee1:	b8 01 00 00 00       	mov    eax,0x1
c0011ee6:	31 d2                	xor    edx,edx
c0011ee8:	83 c4 18             	add    esp,0x18
c0011eeb:	5b                   	pop    ebx
c0011eec:	c3                   	ret    
c0011eed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ef2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ef7:	83 c4 18             	add    esp,0x18
c0011efa:	5b                   	pop    ebx
c0011efb:	c3                   	ret    
c0011efc:	31 c0                	xor    eax,eax
c0011efe:	31 d2                	xor    edx,edx
c0011f00:	eb e6                	jmp    c0011ee8 <SysReadDir(regs*)+0x66>

c0011f02 <SysIsATTY(regs*)>:
c0011f02:	83 ec 0c             	sub    esp,0xc
c0011f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f0c:	83 f8 02             	cmp    eax,0x2
c0011f0f:	76 07                	jbe    c0011f18 <SysIsATTY(regs*)+0x16>
c0011f11:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f16:	75 26                	jne    c0011f3e <SysIsATTY(regs*)+0x3c>
c0011f18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f26:	85 c0                	test   eax,eax
c0011f28:	74 24                	je     c0011f4e <SysIsATTY(regs*)+0x4c>
c0011f2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f2c:	83 ec 0c             	sub    esp,0xc
c0011f2f:	50                   	push   eax
c0011f30:	ff 12                	call   DWORD PTR [edx]
c0011f32:	83 c4 10             	add    esp,0x10
c0011f35:	31 d2                	xor    edx,edx
c0011f37:	83 c4 0c             	add    esp,0xc
c0011f3a:	0f b6 c0             	movzx  eax,al
c0011f3d:	c3                   	ret    
c0011f3e:	83 ec 0c             	sub    esp,0xc
c0011f41:	50                   	push   eax
c0011f42:	e8 54 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	85 c0                	test   eax,eax
c0011f4c:	75 dc                	jne    c0011f2a <SysIsATTY(regs*)+0x28>
c0011f4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f58:	83 c4 0c             	add    esp,0xc
c0011f5b:	c3                   	ret    

c0011f5c <SysSeek(regs*)>:
c0011f5c:	56                   	push   esi
c0011f5d:	53                   	push   ebx
c0011f5e:	83 ec 04             	sub    esp,0x4
c0011f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f65:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f68:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011f6b:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011f71:	77 33                	ja     c0011fa6 <SysSeek(regs*)+0x4a>
c0011f73:	83 ec 0c             	sub    esp,0xc
c0011f76:	51                   	push   ecx
c0011f77:	e8 1f 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f7c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f7f:	83 c4 0c             	add    esp,0xc
c0011f82:	31 db                	xor    ebx,ebx
c0011f84:	53                   	push   ebx
c0011f85:	51                   	push   ecx
c0011f86:	50                   	push   eax
c0011f87:	e8 a8 9c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	85 c0                	test   eax,eax
c0011f91:	0f 95 c0             	setne  al
c0011f94:	31 d2                	xor    edx,edx
c0011f96:	0f b6 c0             	movzx  eax,al
c0011f99:	f7 d8                	neg    eax
c0011f9b:	83 d2 00             	adc    edx,0x0
c0011f9e:	83 c4 04             	add    esp,0x4
c0011fa1:	5b                   	pop    ebx
c0011fa2:	f7 da                	neg    edx
c0011fa4:	5e                   	pop    esi
c0011fa5:	c3                   	ret    
c0011fa6:	83 c4 04             	add    esp,0x4
c0011fa9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fae:	5b                   	pop    ebx
c0011faf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fb4:	5e                   	pop    esi
c0011fb5:	c3                   	ret    

c0011fb6 <SysTell(regs*)>:
c0011fb6:	53                   	push   ebx
c0011fb7:	83 ec 08             	sub    esp,0x8
c0011fba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fc1:	83 f8 02             	cmp    eax,0x2
c0011fc4:	76 4e                	jbe    c0012014 <SysTell(regs*)+0x5e>
c0011fc6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fcb:	76 19                	jbe    c0011fe6 <SysTell(regs*)+0x30>
c0011fcd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fd0:	31 d2                	xor    edx,edx
c0011fd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fdf:	83 c4 08             	add    esp,0x8
c0011fe2:	31 c0                	xor    eax,eax
c0011fe4:	5b                   	pop    ebx
c0011fe5:	c3                   	ret    
c0011fe6:	83 ec 0c             	sub    esp,0xc
c0011fe9:	50                   	push   eax
c0011fea:	e8 ac 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fef:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011ff2:	5a                   	pop    edx
c0011ff3:	59                   	pop    ecx
c0011ff4:	53                   	push   ebx
c0011ff5:	50                   	push   eax
c0011ff6:	e8 e5 9c ff ff       	call   c000bce0 <File::tell(unsigned long long*)>
c0011ffb:	83 c4 10             	add    esp,0x10
c0011ffe:	85 c0                	test   eax,eax
c0012000:	0f 95 c0             	setne  al
c0012003:	31 d2                	xor    edx,edx
c0012005:	0f b6 c0             	movzx  eax,al
c0012008:	f7 d8                	neg    eax
c001200a:	83 d2 00             	adc    edx,0x0
c001200d:	83 c4 08             	add    esp,0x8
c0012010:	5b                   	pop    ebx
c0012011:	f7 da                	neg    edx
c0012013:	c3                   	ret    
c0012014:	83 c4 08             	add    esp,0x8
c0012017:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001201c:	5b                   	pop    ebx
c001201d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012022:	c3                   	ret    

c0012023 <SysSize(regs*)>:
c0012023:	53                   	push   ebx
c0012024:	83 ec 18             	sub    esp,0x18
c0012027:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001202b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001202e:	83 f8 02             	cmp    eax,0x2
c0012031:	76 54                	jbe    c0012087 <SysSize(regs*)+0x64>
c0012033:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012038:	76 19                	jbe    c0012053 <SysSize(regs*)+0x30>
c001203a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001203d:	31 d2                	xor    edx,edx
c001203f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012045:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001204c:	83 c4 18             	add    esp,0x18
c001204f:	31 c0                	xor    eax,eax
c0012051:	5b                   	pop    ebx
c0012052:	c3                   	ret    
c0012053:	83 ec 0c             	sub    esp,0xc
c0012056:	50                   	push   eax
c0012057:	e8 3f 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001205c:	83 c4 0c             	add    esp,0xc
c001205f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012063:	52                   	push   edx
c0012064:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012067:	52                   	push   edx
c0012068:	50                   	push   eax
c0012069:	e8 0a 9e ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c001206e:	83 c4 10             	add    esp,0x10
c0012071:	85 c0                	test   eax,eax
c0012073:	0f 95 c0             	setne  al
c0012076:	31 d2                	xor    edx,edx
c0012078:	0f b6 c0             	movzx  eax,al
c001207b:	f7 d8                	neg    eax
c001207d:	83 d2 00             	adc    edx,0x0
c0012080:	83 c4 18             	add    esp,0x18
c0012083:	5b                   	pop    ebx
c0012084:	f7 da                	neg    edx
c0012086:	c3                   	ret    
c0012087:	83 c4 18             	add    esp,0x18
c001208a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001208f:	5b                   	pop    ebx
c0012090:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012095:	c3                   	ret    

c0012096 <SysSizeFromFilename(regs*)>:
c0012096:	55                   	push   ebp
c0012097:	57                   	push   edi
c0012098:	56                   	push   esi
c0012099:	53                   	push   ebx
c001209a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00120a0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00120a7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120aa:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120ad:	85 f6                	test   esi,esi
c00120af:	89 f8                	mov    eax,edi
c00120b1:	74 09                	je     c00120bc <SysSizeFromFilename(regs*)+0x26>
c00120b3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120bc:	83 f8 02             	cmp    eax,0x2
c00120bf:	0f 86 ad 00 00 00    	jbe    c0012172 <SysSizeFromFilename(regs*)+0xdc>
c00120c5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120ca:	76 1f                	jbe    c00120eb <SysSizeFromFilename(regs*)+0x55>
c00120cc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120cf:	31 d2                	xor    edx,edx
c00120d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120de:	31 c0                	xor    eax,eax
c00120e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00120e6:	5b                   	pop    ebx
c00120e7:	5e                   	pop    esi
c00120e8:	5f                   	pop    edi
c00120e9:	5d                   	pop    ebp
c00120ea:	c3                   	ret    
c00120eb:	83 ec 0c             	sub    esp,0xc
c00120ee:	68 14 01 00 00       	push   0x114
c00120f3:	e8 db 59 ff ff       	call   c0007ad3 <malloc>
c00120f8:	6a 01                	push   0x1
c00120fa:	89 c5                	mov    ebp,eax
c00120fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012101:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012104:	50                   	push   eax
c0012105:	57                   	push   edi
c0012106:	55                   	push   ebp
c0012107:	e8 6e 99 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c001210c:	83 c4 1c             	add    esp,0x1c
c001210f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012113:	50                   	push   eax
c0012114:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012117:	52                   	push   edx
c0012118:	55                   	push   ebp
c0012119:	e8 5a 9d ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	85 ed                	test   ebp,ebp
c0012123:	89 c3                	mov    ebx,eax
c0012125:	74 0d                	je     c0012134 <SysSizeFromFilename(regs*)+0x9e>
c0012127:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212a:	83 ec 0c             	sub    esp,0xc
c001212d:	55                   	push   ebp
c001212e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012131:	83 c4 10             	add    esp,0x10
c0012134:	85 db                	test   ebx,ebx
c0012136:	75 3a                	jne    c0012172 <SysSizeFromFilename(regs*)+0xdc>
c0012138:	83 ec 08             	sub    esp,0x8
c001213b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001213f:	50                   	push   eax
c0012140:	57                   	push   edi
c0012141:	e8 b8 8f ff ff       	call   c000b0fe <KeDereferenceSymlink(char const*, char*)>
c0012146:	83 c4 10             	add    esp,0x10
c0012149:	ba 00 00 00 00       	mov    edx,0x0
c001214e:	83 f8 01             	cmp    eax,0x1
c0012151:	b8 00 00 00 00       	mov    eax,0x0
c0012156:	74 2f                	je     c0012187 <SysSizeFromFilename(regs*)+0xf1>
c0012158:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001215d:	74 3b                	je     c001219a <SysSizeFromFilename(regs*)+0x104>
c001215f:	85 f6                	test   esi,esi
c0012161:	0f 84 79 ff ff ff    	je     c00120e0 <SysSizeFromFilename(regs*)+0x4a>
c0012167:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001216d:	e9 6e ff ff ff       	jmp    c00120e0 <SysSizeFromFilename(regs*)+0x4a>
c0012172:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012178:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001217d:	5b                   	pop    ebx
c001217e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012183:	5e                   	pop    esi
c0012184:	5f                   	pop    edi
c0012185:	5d                   	pop    ebp
c0012186:	c3                   	ret    
c0012187:	85 f6                	test   esi,esi
c0012189:	0f 84 51 ff ff ff    	je     c00120e0 <SysSizeFromFilename(regs*)+0x4a>
c001218f:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012195:	e9 46 ff ff ff       	jmp    c00120e0 <SysSizeFromFilename(regs*)+0x4a>
c001219a:	85 f6                	test   esi,esi
c001219c:	0f 84 3e ff ff ff    	je     c00120e0 <SysSizeFromFilename(regs*)+0x4a>
c00121a2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121a8:	e9 33 ff ff ff       	jmp    c00120e0 <SysSizeFromFilename(regs*)+0x4a>

c00121ad <SysSizeFromFilenameNoSymlink(regs*)>:
c00121ad:	55                   	push   ebp
c00121ae:	57                   	push   edi
c00121af:	56                   	push   esi
c00121b0:	53                   	push   ebx
c00121b1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00121b7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00121be:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121c1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121c4:	85 f6                	test   esi,esi
c00121c6:	89 f8                	mov    eax,edi
c00121c8:	74 09                	je     c00121d3 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c00121ca:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121d3:	83 f8 02             	cmp    eax,0x2
c00121d6:	0f 86 ad 00 00 00    	jbe    c0012289 <SysSizeFromFilenameNoSymlink(regs*)+0xdc>
c00121dc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121e1:	76 1f                	jbe    c0012202 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00121e3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121e6:	31 d2                	xor    edx,edx
c00121e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121f5:	31 c0                	xor    eax,eax
c00121f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00121fd:	5b                   	pop    ebx
c00121fe:	5e                   	pop    esi
c00121ff:	5f                   	pop    edi
c0012200:	5d                   	pop    ebp
c0012201:	c3                   	ret    
c0012202:	83 ec 0c             	sub    esp,0xc
c0012205:	68 14 01 00 00       	push   0x114
c001220a:	e8 c4 58 ff ff       	call   c0007ad3 <malloc>
c001220f:	6a 00                	push   0x0
c0012211:	89 c5                	mov    ebp,eax
c0012213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012218:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001221b:	50                   	push   eax
c001221c:	57                   	push   edi
c001221d:	55                   	push   ebp
c001221e:	e8 57 98 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c0012223:	83 c4 1c             	add    esp,0x1c
c0012226:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001222a:	50                   	push   eax
c001222b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001222e:	52                   	push   edx
c001222f:	55                   	push   ebp
c0012230:	e8 43 9c ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0012235:	83 c4 10             	add    esp,0x10
c0012238:	85 ed                	test   ebp,ebp
c001223a:	89 c3                	mov    ebx,eax
c001223c:	74 0d                	je     c001224b <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c001223e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	55                   	push   ebp
c0012245:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	85 db                	test   ebx,ebx
c001224d:	75 3a                	jne    c0012289 <SysSizeFromFilenameNoSymlink(regs*)+0xdc>
c001224f:	83 ec 08             	sub    esp,0x8
c0012252:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012256:	50                   	push   eax
c0012257:	57                   	push   edi
c0012258:	e8 a1 8e ff ff       	call   c000b0fe <KeDereferenceSymlink(char const*, char*)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	ba 00 00 00 00       	mov    edx,0x0
c0012265:	83 f8 01             	cmp    eax,0x1
c0012268:	b8 00 00 00 00       	mov    eax,0x0
c001226d:	74 2f                	je     c001229e <SysSizeFromFilenameNoSymlink(regs*)+0xf1>
c001226f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012274:	74 3b                	je     c00122b1 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0012276:	85 f6                	test   esi,esi
c0012278:	0f 84 79 ff ff ff    	je     c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001227e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012284:	e9 6e ff ff ff       	jmp    c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012289:	81 c4 2c 01 00 00    	add    esp,0x12c
c001228f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012294:	5b                   	pop    ebx
c0012295:	ba ff ff ff ff       	mov    edx,0xffffffff
c001229a:	5e                   	pop    esi
c001229b:	5f                   	pop    edi
c001229c:	5d                   	pop    ebp
c001229d:	c3                   	ret    
c001229e:	85 f6                	test   esi,esi
c00122a0:	0f 84 51 ff ff ff    	je     c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122a6:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122ac:	e9 46 ff ff ff       	jmp    c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122b1:	85 f6                	test   esi,esi
c00122b3:	0f 84 3e ff ff ff    	je     c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00122b9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122bf:	e9 33 ff ff ff       	jmp    c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c00122c4 <SysClose(regs*)>:
c00122c4:	53                   	push   ebx
c00122c5:	83 ec 08             	sub    esp,0x8
c00122c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00122cf:	83 f8 02             	cmp    eax,0x2
c00122d2:	76 41                	jbe    c0012315 <SysClose(regs*)+0x51>
c00122d4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00122da:	83 fa 01             	cmp    edx,0x1
c00122dd:	76 2d                	jbe    c001230c <SysClose(regs*)+0x48>
c00122df:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122e4:	77 2f                	ja     c0012315 <SysClose(regs*)+0x51>
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 ac 71 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00122ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00122f2:	89 c3                	mov    ebx,eax
c00122f4:	e8 db 98 ff ff       	call   c000bbd4 <File::close()>
c00122f9:	83 c4 10             	add    esp,0x10
c00122fc:	85 db                	test   ebx,ebx
c00122fe:	74 0c                	je     c001230c <SysClose(regs*)+0x48>
c0012300:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012302:	83 ec 0c             	sub    esp,0xc
c0012305:	53                   	push   ebx
c0012306:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012309:	83 c4 10             	add    esp,0x10
c001230c:	83 c4 08             	add    esp,0x8
c001230f:	31 c0                	xor    eax,eax
c0012311:	5b                   	pop    ebx
c0012312:	31 d2                	xor    edx,edx
c0012314:	c3                   	ret    
c0012315:	83 c4 08             	add    esp,0x8
c0012318:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001231d:	5b                   	pop    ebx
c001231e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012323:	c3                   	ret    

c0012324 <SysOpenDir(regs*)>:
c0012324:	56                   	push   esi
c0012325:	53                   	push   ebx
c0012326:	83 ec 04             	sub    esp,0x4
c0012329:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001232d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012330:	85 c9                	test   ecx,ecx
c0012332:	74 5d                	je     c0012391 <SysOpenDir(regs*)+0x6d>
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	68 14 01 00 00       	push   0x114
c001233c:	e8 92 57 ff ff       	call   c0007ad3 <malloc>
c0012341:	83 c4 0c             	add    esp,0xc
c0012344:	89 c6                	mov    esi,eax
c0012346:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001234b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001234e:	50                   	push   eax
c001234f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012352:	52                   	push   edx
c0012353:	56                   	push   esi
c0012354:	e8 df 9c ff ff       	call   c000c038 <Directory::Directory(char const*, Process*)>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	85 f6                	test   esi,esi
c001235e:	74 31                	je     c0012391 <SysOpenDir(regs*)+0x6d>
c0012360:	83 ec 0c             	sub    esp,0xc
c0012363:	56                   	push   esi
c0012364:	e8 97 9d ff ff       	call   c000c100 <Directory::open()>
c0012369:	83 c4 10             	add    esp,0x10
c001236c:	85 c0                	test   eax,eax
c001236e:	75 21                	jne    c0012391 <SysOpenDir(regs*)+0x6d>
c0012370:	83 ec 0c             	sub    esp,0xc
c0012373:	56                   	push   esi
c0012374:	e8 25 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012379:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001237c:	83 c4 10             	add    esp,0x10
c001237f:	89 02                	mov    DWORD PTR [edx],eax
c0012381:	c1 f8 1f             	sar    eax,0x1f
c0012384:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012387:	83 c4 04             	add    esp,0x4
c001238a:	31 c0                	xor    eax,eax
c001238c:	5b                   	pop    ebx
c001238d:	31 d2                	xor    edx,edx
c001238f:	5e                   	pop    esi
c0012390:	c3                   	ret    
c0012391:	83 c4 04             	add    esp,0x4
c0012394:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012399:	5b                   	pop    ebx
c001239a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001239f:	5e                   	pop    esi
c00123a0:	c3                   	ret    

c00123a1 <SysMakeDir(regs*)>:
c00123a1:	56                   	push   esi
c00123a2:	53                   	push   ebx
c00123a3:	83 ec 10             	sub    esp,0x10
c00123a6:	68 14 01 00 00       	push   0x114
c00123ab:	e8 23 57 ff ff       	call   c0007ad3 <malloc>
c00123b0:	83 c4 0c             	add    esp,0xc
c00123b3:	89 c3                	mov    ebx,eax
c00123b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123bd:	50                   	push   eax
c00123be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123c2:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00123c5:	52                   	push   edx
c00123c6:	53                   	push   ebx
c00123c7:	e8 6c 9c ff ff       	call   c000c038 <Directory::Directory(char const*, Process*)>
c00123cc:	83 c4 10             	add    esp,0x10
c00123cf:	85 db                	test   ebx,ebx
c00123d1:	74 2c                	je     c00123ff <SysMakeDir(regs*)+0x5e>
c00123d3:	83 ec 0c             	sub    esp,0xc
c00123d6:	53                   	push   ebx
c00123d7:	e8 04 9f ff ff       	call   c000c2e0 <Directory::create()>
c00123dc:	89 c6                	mov    esi,eax
c00123de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123e6:	83 c4 10             	add    esp,0x10
c00123e9:	31 c0                	xor    eax,eax
c00123eb:	85 f6                	test   esi,esi
c00123ed:	0f 95 c0             	setne  al
c00123f0:	31 d2                	xor    edx,edx
c00123f2:	f7 d8                	neg    eax
c00123f4:	83 d2 00             	adc    edx,0x0
c00123f7:	83 c4 04             	add    esp,0x4
c00123fa:	5b                   	pop    ebx
c00123fb:	f7 da                	neg    edx
c00123fd:	5e                   	pop    esi
c00123fe:	c3                   	ret    
c00123ff:	83 c4 04             	add    esp,0x4
c0012402:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012407:	5b                   	pop    ebx
c0012408:	ba ff ff ff ff       	mov    edx,0xffffffff
c001240d:	5e                   	pop    esi
c001240e:	c3                   	ret    

c001240f <SysCloseDir(regs*)>:
c001240f:	53                   	push   ebx
c0012410:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012415:	83 ec 08             	sub    esp,0x8
c0012418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001241c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001241f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012424:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0012427:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001242d:	77 2a                	ja     c0012459 <SysCloseDir(regs*)+0x4a>
c001242f:	83 ec 0c             	sub    esp,0xc
c0012432:	51                   	push   ecx
c0012433:	e8 63 70 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012438:	89 04 24             	mov    DWORD PTR [esp],eax
c001243b:	89 c3                	mov    ebx,eax
c001243d:	e8 1a 9d ff ff       	call   c000c15c <Directory::close()>
c0012442:	83 c4 10             	add    esp,0x10
c0012445:	85 db                	test   ebx,ebx
c0012447:	74 0c                	je     c0012455 <SysCloseDir(regs*)+0x46>
c0012449:	8b 03                	mov    eax,DWORD PTR [ebx]
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	53                   	push   ebx
c001244f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012452:	83 c4 10             	add    esp,0x10
c0012455:	31 c0                	xor    eax,eax
c0012457:	31 d2                	xor    edx,edx
c0012459:	83 c4 08             	add    esp,0x8
c001245c:	5b                   	pop    ebx
c001245d:	c3                   	ret    

c001245e <SysWait(regs*)>:
c001245e:	83 ec 10             	sub    esp,0x10
c0012461:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012465:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012468:	52                   	push   edx
c0012469:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001246c:	51                   	push   ecx
c001246d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012470:	50                   	push   eax
c0012471:	e8 0e 3e 00 00       	call   c0016284 <waitTask(int, int*, int)>
c0012476:	83 c4 1c             	add    esp,0x1c
c0012479:	89 c2                	mov    edx,eax
c001247b:	c1 fa 1f             	sar    edx,0x1f
c001247e:	c3                   	ret    

c001247f <SysNotImpl(regs*)>:
c001247f:	83 ec 18             	sub    esp,0x18
c0012482:	68 c6 24 02 c0       	push   0xc00224c6
c0012487:	e8 13 f1 ff ff       	call   c001159f <KePanic(char const*)>
c001248c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012491:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012496:	83 c4 1c             	add    esp,0x1c
c0012499:	c3                   	ret    

c001249a <SysPanic(regs*)>:
c001249a:	83 ec 18             	sub    esp,0x18
c001249d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124a1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00124a4:	50                   	push   eax
c00124a5:	e8 f5 f0 ff ff       	call   c001159f <KePanic(char const*)>
c00124aa:	b8 01 00 00 00       	mov    eax,0x1
c00124af:	31 d2                	xor    edx,edx
c00124b1:	83 c4 1c             	add    esp,0x1c
c00124b4:	c3                   	ret    

c00124b5 <SysRmdir(regs*)>:
c00124b5:	56                   	push   esi
c00124b6:	53                   	push   ebx
c00124b7:	83 ec 10             	sub    esp,0x10
c00124ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124be:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00124c1:	68 14 01 00 00       	push   0x114
c00124c6:	e8 08 56 ff ff       	call   c0007ad3 <malloc>
c00124cb:	6a 00                	push   0x0
c00124cd:	89 c3                	mov    ebx,eax
c00124cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124d7:	50                   	push   eax
c00124d8:	56                   	push   esi
c00124d9:	53                   	push   ebx
c00124da:	e8 9b 95 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c00124df:	83 c4 14             	add    esp,0x14
c00124e2:	53                   	push   ebx
c00124e3:	e8 5c 98 ff ff       	call   c000bd44 <File::unlink()>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	85 db                	test   ebx,ebx
c00124ed:	89 c6                	mov    esi,eax
c00124ef:	74 0c                	je     c00124fd <SysRmdir(regs*)+0x48>
c00124f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124f3:	83 ec 0c             	sub    esp,0xc
c00124f6:	53                   	push   ebx
c00124f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124fa:	83 c4 10             	add    esp,0x10
c00124fd:	31 c0                	xor    eax,eax
c00124ff:	85 f6                	test   esi,esi
c0012501:	0f 95 c0             	setne  al
c0012504:	31 d2                	xor    edx,edx
c0012506:	f7 d8                	neg    eax
c0012508:	83 d2 00             	adc    edx,0x0
c001250b:	83 c4 04             	add    esp,0x4
c001250e:	5b                   	pop    ebx
c001250f:	f7 da                	neg    edx
c0012511:	5e                   	pop    esi
c0012512:	c3                   	ret    

c0012513 <SysUnlink(regs*)>:
c0012513:	56                   	push   esi
c0012514:	53                   	push   ebx
c0012515:	83 ec 10             	sub    esp,0x10
c0012518:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001251c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001251f:	68 14 01 00 00       	push   0x114
c0012524:	e8 aa 55 ff ff       	call   c0007ad3 <malloc>
c0012529:	6a 00                	push   0x0
c001252b:	89 c3                	mov    ebx,eax
c001252d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012532:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012535:	50                   	push   eax
c0012536:	56                   	push   esi
c0012537:	53                   	push   ebx
c0012538:	e8 3d 95 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c001253d:	83 c4 14             	add    esp,0x14
c0012540:	53                   	push   ebx
c0012541:	e8 fe 97 ff ff       	call   c000bd44 <File::unlink()>
c0012546:	83 c4 10             	add    esp,0x10
c0012549:	85 db                	test   ebx,ebx
c001254b:	89 c6                	mov    esi,eax
c001254d:	74 0c                	je     c001255b <SysUnlink(regs*)+0x48>
c001254f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012551:	83 ec 0c             	sub    esp,0xc
c0012554:	53                   	push   ebx
c0012555:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	31 c0                	xor    eax,eax
c001255d:	85 f6                	test   esi,esi
c001255f:	0f 95 c0             	setne  al
c0012562:	31 d2                	xor    edx,edx
c0012564:	f7 d8                	neg    eax
c0012566:	83 d2 00             	adc    edx,0x0
c0012569:	83 c4 04             	add    esp,0x4
c001256c:	5b                   	pop    ebx
c001256d:	f7 da                	neg    edx
c001256f:	5e                   	pop    esi
c0012570:	c3                   	ret    

c0012571 <SysGetArgv(regs*)>:
c0012571:	83 ec 0c             	sub    esp,0xc
c0012574:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012578:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001257b:	85 c0                	test   eax,eax
c001257d:	78 2c                	js     c00125ab <SysGetArgv(regs*)+0x3a>
c001257f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012585:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012588:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001258e:	7d 1b                	jge    c00125ab <SysGetArgv(regs*)+0x3a>
c0012590:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012597:	85 c0                	test   eax,eax
c0012599:	74 18                	je     c00125b3 <SysGetArgv(regs*)+0x42>
c001259b:	83 ec 08             	sub    esp,0x8
c001259e:	50                   	push   eax
c001259f:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00125a2:	50                   	push   eax
c00125a3:	e8 a8 e0 fe ff       	call   c0000650 <strcpy>
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	31 c0                	xor    eax,eax
c00125ad:	31 d2                	xor    edx,edx
c00125af:	83 c4 0c             	add    esp,0xc
c00125b2:	c3                   	ret    
c00125b3:	b8 01 00 00 00       	mov    eax,0x1
c00125b8:	31 d2                	xor    edx,edx
c00125ba:	83 c4 0c             	add    esp,0xc
c00125bd:	c3                   	ret    

c00125be <SysUSleep(regs*)>:
c00125be:	83 ec 1c             	sub    esp,0x1c
c00125c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125c5:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00125c8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00125cb:	6a 00                	push   0x0
c00125cd:	6a 64                	push   0x64
c00125cf:	52                   	push   edx
c00125d0:	50                   	push   eax
c00125d1:	e8 3a d1 00 00       	call   c001f710 <__udivdi3>
c00125d6:	83 c4 14             	add    esp,0x14
c00125d9:	50                   	push   eax
c00125da:	e8 89 3d 00 00       	call   c0016368 <milliTenthSleep(unsigned int)>
c00125df:	31 c0                	xor    eax,eax
c00125e1:	31 d2                	xor    edx,edx
c00125e3:	83 c4 1c             	add    esp,0x1c
c00125e6:	c3                   	ret    

c00125e7 <SysSpawn(regs*)>:
c00125e7:	56                   	push   esi
c00125e8:	53                   	push   ebx
c00125e9:	83 ec 04             	sub    esp,0x4
c00125ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125f0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00125f3:	85 f6                	test   esi,esi
c00125f5:	75 0a                	jne    c0012601 <SysSpawn(regs*)+0x1a>
c00125f7:	83 c4 04             	add    esp,0x4
c00125fa:	31 c0                	xor    eax,eax
c00125fc:	5b                   	pop    ebx
c00125fd:	31 d2                	xor    edx,edx
c00125ff:	5e                   	pop    esi
c0012600:	c3                   	ret    
c0012601:	83 ec 0c             	sub    esp,0xc
c0012604:	68 24 07 00 00       	push   0x724
c0012609:	e8 c5 54 ff ff       	call   c0007ad3 <malloc>
c001260e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012611:	83 c4 10             	add    esp,0x10
c0012614:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012617:	89 c6                	mov    esi,eax
c0012619:	31 c0                	xor    eax,eax
c001261b:	85 c9                	test   ecx,ecx
c001261d:	75 08                	jne    c0012627 <SysSpawn(regs*)+0x40>
c001261f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012624:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012627:	52                   	push   edx
c0012628:	50                   	push   eax
c0012629:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001262c:	50                   	push   eax
c001262d:	56                   	push   esi
c001262e:	e8 9d 33 00 00       	call   c00159d0 <Process::Process(char const*, Process*, char**)>
c0012633:	83 c4 10             	add    esp,0x10
c0012636:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001263d:	75 b8                	jne    c00125f7 <SysSpawn(regs*)+0x10>
c001263f:	83 ec 0c             	sub    esp,0xc
c0012642:	56                   	push   esi
c0012643:	e8 c0 38 00 00       	call   c0015f08 <Process::createUserThread()>
c0012648:	8b 06                	mov    eax,DWORD PTR [esi]
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	83 c4 04             	add    esp,0x4
c0012650:	5b                   	pop    ebx
c0012651:	89 c2                	mov    edx,eax
c0012653:	c1 fa 1f             	sar    edx,0x1f
c0012656:	5e                   	pop    esi
c0012657:	c3                   	ret    

c0012658 <SysGetEnv(regs*)>:
c0012658:	57                   	push   edi
c0012659:	56                   	push   esi
c001265a:	53                   	push   ebx
c001265b:	83 ec 1c             	sub    esp,0x1c
c001265e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012663:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012667:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001266a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001266d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012670:	51                   	push   ecx
c0012671:	e8 e1 ed ff ff       	call   c0011457 <KeGetProcessTotalEnvCount(Process*)>
c0012676:	83 c4 10             	add    esp,0x10
c0012679:	39 c7                	cmp    edi,eax
c001267b:	7c 12                	jl     c001268f <SysGetEnv(regs*)+0x37>
c001267d:	31 c0                	xor    eax,eax
c001267f:	31 d2                	xor    edx,edx
c0012681:	85 f6                	test   esi,esi
c0012683:	74 03                	je     c0012688 <SysGetEnv(regs*)+0x30>
c0012685:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	5b                   	pop    ebx
c001268c:	5e                   	pop    esi
c001268d:	5f                   	pop    edi
c001268e:	c3                   	ret    
c001268f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012693:	83 ec 04             	sub    esp,0x4
c0012696:	57                   	push   edi
c0012697:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001269d:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00126a0:	57                   	push   edi
c00126a1:	50                   	push   eax
c00126a2:	e8 d0 ed ff ff       	call   c0011477 <KeGetProcessEnvPair(Process*, int)>
c00126a7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126ae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00126b2:	83 c4 0c             	add    esp,0xc
c00126b5:	85 d2                	test   edx,edx
c00126b7:	75 23                	jne    c00126dc <SysGetEnv(regs*)+0x84>
c00126b9:	83 ec 0c             	sub    esp,0xc
c00126bc:	50                   	push   eax
c00126bd:	e8 be de fe ff       	call   c0000580 <strlen>
c00126c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00126c5:	89 c3                	mov    ebx,eax
c00126c7:	e8 b4 de fe ff       	call   c0000580 <strlen>
c00126cc:	83 c4 10             	add    esp,0x10
c00126cf:	31 d2                	xor    edx,edx
c00126d1:	83 c4 10             	add    esp,0x10
c00126d4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00126d8:	5b                   	pop    ebx
c00126d9:	5e                   	pop    esi
c00126da:	5f                   	pop    edi
c00126db:	c3                   	ret    
c00126dc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126df:	83 ec 08             	sub    esp,0x8
c00126e2:	50                   	push   eax
c00126e3:	56                   	push   esi
c00126e4:	e8 67 df fe ff       	call   c0000650 <strcpy>
c00126e9:	58                   	pop    eax
c00126ea:	5a                   	pop    edx
c00126eb:	68 e0 24 02 c0       	push   0xc00224e0
c00126f0:	56                   	push   esi
c00126f1:	e8 7a e1 fe ff       	call   c0000870 <strcat>
c00126f6:	59                   	pop    ecx
c00126f7:	5b                   	pop    ebx
c00126f8:	57                   	push   edi
c00126f9:	56                   	push   esi
c00126fa:	e8 71 e1 fe ff       	call   c0000870 <strcat>
c00126ff:	83 c4 10             	add    esp,0x10
c0012702:	31 c0                	xor    eax,eax
c0012704:	83 c4 10             	add    esp,0x10
c0012707:	31 d2                	xor    edx,edx
c0012709:	5b                   	pop    ebx
c001270a:	5e                   	pop    esi
c001270b:	5f                   	pop    edi
c001270c:	c3                   	ret    

c001270d <SysSetFatAttrib(regs*)>:
c001270d:	57                   	push   edi
c001270e:	56                   	push   esi
c001270f:	53                   	push   ebx
c0012710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012714:	83 ec 0c             	sub    esp,0xc
c0012717:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001271a:	68 14 01 00 00       	push   0x114
c001271f:	e8 af 53 ff ff       	call   c0007ad3 <malloc>
c0012724:	83 c4 0c             	add    esp,0xc
c0012727:	89 c3                	mov    ebx,eax
c0012729:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001272e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012731:	50                   	push   eax
c0012732:	57                   	push   edi
c0012733:	53                   	push   ebx
c0012734:	e8 1f 94 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0012739:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001273c:	83 c4 0c             	add    esp,0xc
c001273f:	0f b6 d4             	movzx  edx,ah
c0012742:	0f b6 c0             	movzx  eax,al
c0012745:	52                   	push   edx
c0012746:	50                   	push   eax
c0012747:	53                   	push   ebx
c0012748:	e8 91 96 ff ff       	call   c000bdde <File::chfatattr(unsigned char, unsigned char)>
c001274d:	83 c4 10             	add    esp,0x10
c0012750:	85 db                	test   ebx,ebx
c0012752:	89 c6                	mov    esi,eax
c0012754:	74 0c                	je     c0012762 <SysSetFatAttrib(regs*)+0x55>
c0012756:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012758:	83 ec 0c             	sub    esp,0xc
c001275b:	53                   	push   ebx
c001275c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001275f:	83 c4 10             	add    esp,0x10
c0012762:	5b                   	pop    ebx
c0012763:	31 c0                	xor    eax,eax
c0012765:	85 f6                	test   esi,esi
c0012767:	0f 95 c0             	setne  al
c001276a:	31 d2                	xor    edx,edx
c001276c:	5e                   	pop    esi
c001276d:	f7 d8                	neg    eax
c001276f:	83 d2 00             	adc    edx,0x0
c0012772:	f7 da                	neg    edx
c0012774:	5f                   	pop    edi
c0012775:	c3                   	ret    

c0012776 <SysPipe(regs*)>:
c0012776:	57                   	push   edi
c0012777:	56                   	push   esi
c0012778:	53                   	push   ebx
c0012779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277d:	83 ec 0c             	sub    esp,0xc
c0012780:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012783:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012786:	6a 20                	push   0x20
c0012788:	e8 46 53 ff ff       	call   c0007ad3 <malloc>
c001278d:	89 c3                	mov    ebx,eax
c001278f:	58                   	pop    eax
c0012790:	5a                   	pop    edx
c0012791:	68 00 50 00 00       	push   0x5000
c0012796:	53                   	push   ebx
c0012797:	e8 a2 5c ff ff       	call   c000843e <Pipe::Pipe(int)>
c001279c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001279f:	e8 fa 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00127a4:	89 07                	mov    DWORD PTR [edi],eax
c00127a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127a9:	e8 f0 69 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	31 d2                	xor    edx,edx
c00127b3:	89 06                	mov    DWORD PTR [esi],eax
c00127b5:	31 c0                	xor    eax,eax
c00127b7:	5b                   	pop    ebx
c00127b8:	5e                   	pop    esi
c00127b9:	5f                   	pop    edi
c00127ba:	c3                   	ret    

c00127bb <SysGetUnixTime(regs*)>:
c00127bb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00127c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127ca:	e9 57 9d ff ff       	jmp    c000c526 <Clock::timeInSecondsLocal()>

c00127cf <string_ends_with(char const*, char const*)>:
c00127cf:	57                   	push   edi
c00127d0:	56                   	push   esi
c00127d1:	53                   	push   ebx
c00127d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127d6:	83 ec 0c             	sub    esp,0xc
c00127d9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00127dd:	53                   	push   ebx
c00127de:	e8 9d dd fe ff       	call   c0000580 <strlen>
c00127e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127e6:	89 c6                	mov    esi,eax
c00127e8:	e8 93 dd fe ff       	call   c0000580 <strlen>
c00127ed:	83 c4 10             	add    esp,0x10
c00127f0:	31 d2                	xor    edx,edx
c00127f2:	39 c6                	cmp    esi,eax
c00127f4:	7d 06                	jge    c00127fc <string_ends_with(char const*, char const*)+0x2d>
c00127f6:	5b                   	pop    ebx
c00127f7:	89 d0                	mov    eax,edx
c00127f9:	5e                   	pop    esi
c00127fa:	5f                   	pop    edi
c00127fb:	c3                   	ret    
c00127fc:	83 ec 08             	sub    esp,0x8
c00127ff:	29 c6                	sub    esi,eax
c0012801:	57                   	push   edi
c0012802:	01 f3                	add    ebx,esi
c0012804:	53                   	push   ebx
c0012805:	e8 76 df fe ff       	call   c0000780 <strcmp>
c001280a:	83 c4 10             	add    esp,0x10
c001280d:	31 d2                	xor    edx,edx
c001280f:	5b                   	pop    ebx
c0012810:	5e                   	pop    esi
c0012811:	85 c0                	test   eax,eax
c0012813:	5f                   	pop    edi
c0012814:	0f 94 c2             	sete   dl
c0012817:	89 d0                	mov    eax,edx
c0012819:	c3                   	ret    

c001281a <SysOpen(regs*)>:
c001281a:	56                   	push   esi
c001281b:	53                   	push   ebx
c001281c:	81 ec 04 01 00 00    	sub    esp,0x104
c0012822:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012829:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001282c:	85 c0                	test   eax,eax
c001282e:	0f 84 c4 01 00 00    	je     c00129f8 <SysOpen(regs*)+0x1de>
c0012834:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012837:	85 c0                	test   eax,eax
c0012839:	0f 84 b9 01 00 00    	je     c00129f8 <SysOpen(regs*)+0x1de>
c001283f:	6a 00                	push   0x0
c0012841:	68 e2 24 02 c0       	push   0xc00224e2
c0012846:	50                   	push   eax
c0012847:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001284b:	56                   	push   esi
c001284c:	e8 0b 90 ff ff       	call   c000b85c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012851:	89 34 24             	mov    DWORD PTR [esp],esi
c0012854:	e8 27 dd fe ff       	call   c0000580 <strlen>
c0012859:	83 c4 10             	add    esp,0x10
c001285c:	83 e8 01             	sub    eax,0x1
c001285f:	74 29                	je     c001288a <SysOpen(regs*)+0x70>
c0012861:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012865:	83 fa 2e             	cmp    edx,0x2e
c0012868:	74 1c                	je     c0012886 <SysOpen(regs*)+0x6c>
c001286a:	83 fa 3a             	cmp    edx,0x3a
c001286d:	74 17                	je     c0012886 <SysOpen(regs*)+0x6c>
c001286f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012873:	83 e8 01             	sub    eax,0x1
c0012876:	74 12                	je     c001288a <SysOpen(regs*)+0x70>
c0012878:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001287c:	83 fa 3a             	cmp    edx,0x3a
c001287f:	74 05                	je     c0012886 <SysOpen(regs*)+0x6c>
c0012881:	83 fa 2e             	cmp    edx,0x2e
c0012884:	75 e9                	jne    c001286f <SysOpen(regs*)+0x55>
c0012886:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001288a:	83 ec 08             	sub    esp,0x8
c001288d:	68 e6 24 02 c0       	push   0xc00224e6
c0012892:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012895:	50                   	push   eax
c0012896:	e8 34 ff ff ff       	call   c00127cf <string_ends_with(char const*, char const*)>
c001289b:	83 c4 10             	add    esp,0x10
c001289e:	85 c0                	test   eax,eax
c00128a0:	74 1d                	je     c00128bf <SysOpen(regs*)+0xa5>
c00128a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128a5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00128ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128b2:	81 c4 04 01 00 00    	add    esp,0x104
c00128b8:	31 c0                	xor    eax,eax
c00128ba:	5b                   	pop    ebx
c00128bb:	31 d2                	xor    edx,edx
c00128bd:	5e                   	pop    esi
c00128be:	c3                   	ret    
c00128bf:	83 ec 08             	sub    esp,0x8
c00128c2:	68 eb 24 02 c0       	push   0xc00224eb
c00128c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128ca:	50                   	push   eax
c00128cb:	e8 ff fe ff ff       	call   c00127cf <string_ends_with(char const*, char const*)>
c00128d0:	83 c4 10             	add    esp,0x10
c00128d3:	85 c0                	test   eax,eax
c00128d5:	75 cb                	jne    c00128a2 <SysOpen(regs*)+0x88>
c00128d7:	83 ec 08             	sub    esp,0x8
c00128da:	68 e7 24 02 c0       	push   0xc00224e7
c00128df:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128e2:	50                   	push   eax
c00128e3:	e8 98 de fe ff       	call   c0000780 <strcmp>
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	85 c0                	test   eax,eax
c00128ed:	74 b3                	je     c00128a2 <SysOpen(regs*)+0x88>
c00128ef:	83 ec 08             	sub    esp,0x8
c00128f2:	68 e6 24 02 c0       	push   0xc00224e6
c00128f7:	56                   	push   esi
c00128f8:	e8 d2 fe ff ff       	call   c00127cf <string_ends_with(char const*, char const*)>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	85 c0                	test   eax,eax
c0012902:	75 9e                	jne    c00128a2 <SysOpen(regs*)+0x88>
c0012904:	83 ec 08             	sub    esp,0x8
c0012907:	68 f0 24 02 c0       	push   0xc00224f0
c001290c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001290f:	50                   	push   eax
c0012910:	e8 ba fe ff ff       	call   c00127cf <string_ends_with(char const*, char const*)>
c0012915:	83 c4 10             	add    esp,0x10
c0012918:	85 c0                	test   eax,eax
c001291a:	0f 85 eb 00 00 00    	jne    c0012a0b <SysOpen(regs*)+0x1f1>
c0012920:	83 ec 08             	sub    esp,0x8
c0012923:	68 f5 24 02 c0       	push   0xc00224f5
c0012928:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001292b:	50                   	push   eax
c001292c:	e8 9e fe ff ff       	call   c00127cf <string_ends_with(char const*, char const*)>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	85 c0                	test   eax,eax
c0012936:	0f 85 cf 00 00 00    	jne    c0012a0b <SysOpen(regs*)+0x1f1>
c001293c:	83 ec 08             	sub    esp,0x8
c001293f:	68 f1 24 02 c0       	push   0xc00224f1
c0012944:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012947:	51                   	push   ecx
c0012948:	e8 33 de fe ff       	call   c0000780 <strcmp>
c001294d:	83 c4 10             	add    esp,0x10
c0012950:	85 c0                	test   eax,eax
c0012952:	0f 84 b3 00 00 00    	je     c0012a0b <SysOpen(regs*)+0x1f1>
c0012958:	83 ec 08             	sub    esp,0x8
c001295b:	68 f0 24 02 c0       	push   0xc00224f0
c0012960:	56                   	push   esi
c0012961:	e8 69 fe ff ff       	call   c00127cf <string_ends_with(char const*, char const*)>
c0012966:	83 c4 10             	add    esp,0x10
c0012969:	85 c0                	test   eax,eax
c001296b:	0f 85 9a 00 00 00    	jne    c0012a0b <SysOpen(regs*)+0x1f1>
c0012971:	83 ec 0c             	sub    esp,0xc
c0012974:	68 14 01 00 00       	push   0x114
c0012979:	e8 55 51 ff ff       	call   c0007ad3 <malloc>
c001297e:	83 c4 0c             	add    esp,0xc
c0012981:	89 c6                	mov    esi,eax
c0012983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001298b:	50                   	push   eax
c001298c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001298f:	52                   	push   edx
c0012990:	56                   	push   esi
c0012991:	e8 c2 91 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	85 f6                	test   esi,esi
c001299b:	74 5b                	je     c00129f8 <SysOpen(regs*)+0x1de>
c001299d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00129a0:	0f b6 c2             	movzx  eax,dl
c00129a3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00129a6:	89 d0                	mov    eax,edx
c00129a8:	83 e0 01             	and    eax,0x1
c00129ab:	f6 c2 02             	test   dl,0x2
c00129ae:	74 03                	je     c00129b3 <SysOpen(regs*)+0x199>
c00129b0:	83 c8 02             	or     eax,0x2
c00129b3:	f6 c2 04             	test   dl,0x4
c00129b6:	74 03                	je     c00129bb <SysOpen(regs*)+0x1a1>
c00129b8:	83 c8 04             	or     eax,0x4
c00129bb:	f6 c2 08             	test   dl,0x8
c00129be:	74 03                	je     c00129c3 <SysOpen(regs*)+0x1a9>
c00129c0:	83 c8 0a             	or     eax,0xa
c00129c3:	80 e2 10             	and    dl,0x10
c00129c6:	74 03                	je     c00129cb <SysOpen(regs*)+0x1b1>
c00129c8:	83 c8 12             	or     eax,0x12
c00129cb:	83 ec 08             	sub    esp,0x8
c00129ce:	50                   	push   eax
c00129cf:	56                   	push   esi
c00129d0:	e8 a1 91 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c00129d5:	83 c4 10             	add    esp,0x10
c00129d8:	85 c0                	test   eax,eax
c00129da:	75 1c                	jne    c00129f8 <SysOpen(regs*)+0x1de>
c00129dc:	83 ec 0c             	sub    esp,0xc
c00129df:	56                   	push   esi
c00129e0:	e8 b9 67 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00129e5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	89 02                	mov    DWORD PTR [edx],eax
c00129ed:	c1 f8 1f             	sar    eax,0x1f
c00129f0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00129f3:	e9 ba fe ff ff       	jmp    c00128b2 <SysOpen(regs*)+0x98>
c00129f8:	81 c4 04 01 00 00    	add    esp,0x104
c00129fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a03:	5b                   	pop    ebx
c0012a04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a09:	5e                   	pop    esi
c0012a0a:	c3                   	ret    
c0012a0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a0e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a14:	e9 92 fe ff ff       	jmp    c00128ab <SysOpen(regs*)+0x91>

c0012a19 <KeSystemCall(regs*, void*)>:
c0012a19:	53                   	push   ebx
c0012a1a:	83 ec 08             	sub    esp,0x8
c0012a1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a24:	83 f8 3e             	cmp    eax,0x3e
c0012a27:	77 16                	ja     c0012a3f <KeSystemCall(regs*, void*)+0x26>
c0012a29:	8b 14 85 00 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc300]
c0012a30:	85 d2                	test   edx,edx
c0012a32:	74 0b                	je     c0012a3f <KeSystemCall(regs*, void*)+0x26>
c0012a34:	83 ec 0c             	sub    esp,0xc
c0012a37:	53                   	push   ebx
c0012a38:	ff d2                	call   edx
c0012a3a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012a3d:	eb 0d                	jmp    c0012a4c <KeSystemCall(regs*, void*)+0x33>
c0012a3f:	52                   	push   edx
c0012a40:	52                   	push   edx
c0012a41:	50                   	push   eax
c0012a42:	68 fa 24 02 c0       	push   0xc00224fa
c0012a47:	e8 be 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012a4c:	83 c4 10             	add    esp,0x10
c0012a4f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012a54:	83 c4 08             	add    esp,0x8
c0012a57:	31 d2                	xor    edx,edx
c0012a59:	5b                   	pop    ebx
c0012a5a:	c3                   	ret    
c0012a5b:	90                   	nop

c0012a5c <KeSwitchEndian16(unsigned short)>:
c0012a5c:	83 ec 04             	sub    esp,0x4
c0012a5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a63:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012a67:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a6b:	c1 f8 08             	sar    eax,0x8
c0012a6e:	89 c2                	mov    edx,eax
c0012a70:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a74:	c1 e0 08             	shl    eax,0x8
c0012a77:	09 d0                	or     eax,edx
c0012a79:	83 c4 04             	add    esp,0x4
c0012a7c:	c3                   	ret    
c0012a7d:	8d 76 00             	lea    esi,[esi+0x0]

c0012a80 <KeSwitchEndian32(unsigned int)>:
c0012a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a84:	c1 e8 18             	shr    eax,0x18
c0012a87:	89 c2                	mov    edx,eax
c0012a89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a8d:	c1 e0 08             	shl    eax,0x8
c0012a90:	25 00 00 ff 00       	and    eax,0xff0000
c0012a95:	09 c2                	or     edx,eax
c0012a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a9b:	c1 e8 08             	shr    eax,0x8
c0012a9e:	25 00 ff 00 00       	and    eax,0xff00
c0012aa3:	09 c2                	or     edx,eax
c0012aa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa9:	c1 e0 18             	shl    eax,0x18
c0012aac:	09 d0                	or     eax,edx
c0012aae:	c3                   	ret    
c0012aaf:	90                   	nop

c0012ab0 <EthernetCRC32(unsigned char*, int)>:
c0012ab0:	83 ec 10             	sub    esp,0x10
c0012ab3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012ab8:	75 0a                	jne    c0012ac4 <EthernetCRC32(unsigned char*, int)+0x14>
c0012aba:	b8 00 00 00 00       	mov    eax,0x0
c0012abf:	e9 8c 00 00 00       	jmp    c0012b50 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012ac4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012ac9:	7f 09                	jg     c0012ad4 <EthernetCRC32(unsigned char*, int)+0x24>
c0012acb:	b8 00 00 00 00       	mov    eax,0x0
c0012ad0:	eb 7e                	jmp    c0012b50 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012ad2:	66 90                	xchg   ax,ax
c0012ad4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012adc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012ae4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ae8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012aec:	7d 5a                	jge    c0012b48 <EthernetCRC32(unsigned char*, int)+0x98>
c0012aee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012af6:	01 d0                	add    eax,edx
c0012af8:	8a 00                	mov    al,BYTE PTR [eax]
c0012afa:	0f b6 c0             	movzx  eax,al
c0012afd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b09:	8d 76 00             	lea    esi,[esi+0x0]
c0012b0c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b11:	7f 2d                	jg     c0012b40 <EthernetCRC32(unsigned char*, int)+0x90>
c0012b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b17:	83 e0 01             	and    eax,0x1
c0012b1a:	74 10                	je     c0012b2c <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b20:	d1 e8                	shr    eax,1
c0012b22:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012b27:	eb 0b                	jmp    c0012b34 <EthernetCRC32(unsigned char*, int)+0x84>
c0012b29:	8d 76 00             	lea    esi,[esi+0x0]
c0012b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b30:	d1 e8                	shr    eax,1
c0012b32:	66 90                	xchg   ax,ax
c0012b34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b38:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012b3d:	eb cd                	jmp    c0012b0c <EthernetCRC32(unsigned char*, int)+0x5c>
c0012b3f:	90                   	nop
c0012b40:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012b45:	eb 9d                	jmp    c0012ae4 <EthernetCRC32(unsigned char*, int)+0x34>
c0012b47:	90                   	nop
c0012b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4c:	f7 d0                	not    eax
c0012b4e:	66 90                	xchg   ax,ax
c0012b50:	83 c4 10             	add    esp,0x10
c0012b53:	c3                   	ret    

c0012b54 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012b54:	83 ec 2c             	sub    esp,0x2c
c0012b57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b6f:	0f b7 c0             	movzx  eax,ax
c0012b72:	3d 06 08 00 00       	cmp    eax,0x806
c0012b77:	75 13                	jne    c0012b8c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012b79:	83 ec 0c             	sub    esp,0xc
c0012b7c:	68 0e 25 02 c0       	push   0xc002250e
c0012b81:	e8 84 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	eb 25                	jmp    c0012bb0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b8b:	90                   	nop
c0012b8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b93:	0f b7 c0             	movzx  eax,ax
c0012b96:	3d 00 08 00 00       	cmp    eax,0x800
c0012b9b:	75 13                	jne    c0012bb0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b9d:	83 ec 0c             	sub    esp,0xc
c0012ba0:	68 24 25 02 c0       	push   0xc0022524
c0012ba5:	e8 60 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	90                   	nop
c0012bb1:	83 c4 2c             	add    esp,0x2c
c0012bb4:	c3                   	ret    

c0012bb5 <CmOpen(char const*)>:
c0012bb5:	57                   	push   edi
c0012bb6:	56                   	push   esi
c0012bb7:	53                   	push   ebx
c0012bb8:	83 ec 1c             	sub    esp,0x1c
c0012bbb:	6a 30                	push   0x30
c0012bbd:	e8 11 4f ff ff       	call   c0007ad3 <malloc>
c0012bc2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012bc9:	89 c3                	mov    ebx,eax
c0012bcb:	e8 03 4f ff ff       	call   c0007ad3 <malloc>
c0012bd0:	83 c4 0c             	add    esp,0xc
c0012bd3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012bd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012bdd:	89 c6                	mov    esi,eax
c0012bdf:	50                   	push   eax
c0012be0:	e8 73 8f ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0012be5:	83 c4 0c             	add    esp,0xc
c0012be8:	89 33                	mov    DWORD PTR [ebx],esi
c0012bea:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012bee:	50                   	push   eax
c0012bef:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bf3:	50                   	push   eax
c0012bf4:	56                   	push   esi
c0012bf5:	e8 7e 92 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0012bfa:	5a                   	pop    edx
c0012bfb:	59                   	pop    ecx
c0012bfc:	6a 01                	push   0x1
c0012bfe:	ff 33                	push   DWORD PTR [ebx]
c0012c00:	e8 71 8f ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0012c05:	5e                   	pop    esi
c0012c06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c0a:	e8 c4 4e ff ff       	call   c0007ad3 <malloc>
c0012c0f:	5a                   	pop    edx
c0012c10:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c14:	89 c7                	mov    edi,eax
c0012c16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c18:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c1a:	56                   	push   esi
c0012c1b:	57                   	push   edi
c0012c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c24:	50                   	push   eax
c0012c25:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c28:	83 c4 14             	add    esp,0x14
c0012c2b:	ff 33                	push   DWORD PTR [ebx]
c0012c2d:	e8 a2 8f ff ff       	call   c000bbd4 <File::close()>
c0012c32:	59                   	pop    ecx
c0012c33:	58                   	pop    eax
c0012c34:	6a 13                	push   0x13
c0012c36:	ff 33                	push   DWORD PTR [ebx]
c0012c38:	e8 39 8f ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0012c3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c41:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c44:	57                   	push   edi
c0012c45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c4d:	50                   	push   eax
c0012c4e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c51:	83 c4 14             	add    esp,0x14
c0012c54:	57                   	push   edi
c0012c55:	e8 89 4e ff ff       	call   c0007ae3 <free>
c0012c5a:	83 c4 10             	add    esp,0x10
c0012c5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012c60:	75 10                	jne    c0012c72 <CmOpen(char const*)+0xbd>
c0012c62:	83 ec 0c             	sub    esp,0xc
c0012c65:	68 39 25 02 c0       	push   0xc0022539
c0012c6a:	e8 30 e9 ff ff       	call   c001159f <KePanic(char const*)>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	50                   	push   eax
c0012c73:	6a 00                	push   0x0
c0012c75:	6a 00                	push   0x0
c0012c77:	ff 33                	push   DWORD PTR [ebx]
c0012c79:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012c7c:	e8 b3 8f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c83:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c85:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c88:	57                   	push   edi
c0012c89:	6a 00                	push   0x0
c0012c8b:	6a 2b                	push   0x2b
c0012c8d:	50                   	push   eax
c0012c8e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c91:	83 c4 1c             	add    esp,0x1c
c0012c94:	6a 00                	push   0x0
c0012c96:	6a 00                	push   0x0
c0012c98:	ff 33                	push   DWORD PTR [ebx]
c0012c9a:	e8 95 8f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012c9f:	83 c4 0c             	add    esp,0xc
c0012ca2:	6a 08                	push   0x8
c0012ca4:	68 4a 25 02 c0       	push   0xc002254a
c0012ca9:	57                   	push   edi
c0012caa:	e8 d1 d6 fe ff       	call   c0000380 <memcmp>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	85 c0                	test   eax,eax
c0012cb4:	74 10                	je     c0012cc6 <CmOpen(char const*)+0x111>
c0012cb6:	83 ec 0c             	sub    esp,0xc
c0012cb9:	68 53 25 02 c0       	push   0xc0022553
c0012cbe:	e8 dc e8 ff ff       	call   c001159f <KePanic(char const*)>
c0012cc3:	83 c4 10             	add    esp,0x10
c0012cc6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	89 d8                	mov    eax,ebx
c0012ccf:	5b                   	pop    ebx
c0012cd0:	5e                   	pop    esi
c0012cd1:	5f                   	pop    edi
c0012cd2:	c3                   	ret    

c0012cd3 <CmClose(Reghive_Tag*)>:
c0012cd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cd7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012cdb:	74 0b                	je     c0012ce8 <CmClose(Reghive_Tag*)+0x15>
c0012cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ce3:	e9 ec 8e ff ff       	jmp    c000bbd4 <File::close()>
c0012ce8:	c3                   	ret    

c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ce9:	53                   	push   ebx
c0012cea:	83 ec 18             	sub    esp,0x18
c0012ced:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cf1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012cf5:	74 29                	je     c0012d20 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012cf7:	50                   	push   eax
c0012cf8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012cfd:	99                   	cdq    
c0012cfe:	52                   	push   edx
c0012cff:	50                   	push   eax
c0012d00:	ff 33                	push   DWORD PTR [ebx]
c0012d02:	e8 2d 8f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012d07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d09:	5a                   	pop    edx
c0012d0a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d10:	51                   	push   ecx
c0012d11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d15:	6a 00                	push   0x0
c0012d17:	6a 2b                	push   0x2b
c0012d19:	50                   	push   eax
c0012d1a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d1d:	83 c4 20             	add    esp,0x20
c0012d20:	83 c4 18             	add    esp,0x18
c0012d23:	5b                   	pop    ebx
c0012d24:	c3                   	ret    

c0012d25 <CmGetString(Reghive_Tag*, int, char*)>:
c0012d25:	55                   	push   ebp
c0012d26:	57                   	push   edi
c0012d27:	56                   	push   esi
c0012d28:	53                   	push   ebx
c0012d29:	31 db                	xor    ebx,ebx
c0012d2b:	83 ec 70             	sub    esp,0x70
c0012d2e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012d32:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012d39:	50                   	push   eax
c0012d3a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012d41:	55                   	push   ebp
c0012d42:	e8 a2 ff ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012d4f:	c1 e0 08             	shl    eax,0x8
c0012d52:	89 c2                	mov    edx,eax
c0012d54:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012d59:	09 d0                	or     eax,edx
c0012d5b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012d60:	c1 e0 08             	shl    eax,0x8
c0012d63:	09 d0                	or     eax,edx
c0012d65:	74 25                	je     c0012d8c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012d67:	52                   	push   edx
c0012d68:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012d6c:	52                   	push   edx
c0012d6d:	6b fb 0d             	imul   edi,ebx,0xd
c0012d70:	50                   	push   eax
c0012d71:	55                   	push   ebp
c0012d72:	e8 72 ff ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d77:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012d7b:	b9 27 00 00 00       	mov    ecx,0x27
c0012d80:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012d87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d89:	83 c4 10             	add    esp,0x10
c0012d8c:	83 c3 03             	add    ebx,0x3
c0012d8f:	83 fb 15             	cmp    ebx,0x15
c0012d92:	75 b6                	jne    c0012d4a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012d94:	83 c4 6c             	add    esp,0x6c
c0012d97:	5b                   	pop    ebx
c0012d98:	5e                   	pop    esi
c0012d99:	5f                   	pop    edi
c0012d9a:	5d                   	pop    ebp
c0012d9b:	c3                   	ret    

c0012d9c <CmEnterDirectory(Reghive_Tag*, int)>:
c0012d9c:	83 ec 40             	sub    esp,0x40
c0012d9f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012da3:	50                   	push   eax
c0012da4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012da8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dac:	e8 38 ff ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012db1:	83 c4 10             	add    esp,0x10
c0012db4:	83 c8 ff             	or     eax,0xffffffff
c0012db7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012dbc:	75 19                	jne    c0012dd7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012dbe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012dc3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012dc8:	c1 e0 08             	shl    eax,0x8
c0012dcb:	09 c2                	or     edx,eax
c0012dcd:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012dd2:	c1 e0 10             	shl    eax,0x10
c0012dd5:	09 d0                	or     eax,edx
c0012dd7:	83 c4 3c             	add    esp,0x3c
c0012dda:	c3                   	ret    

c0012ddb <CmGetNext(Reghive_Tag*, int)>:
c0012ddb:	83 ec 40             	sub    esp,0x40
c0012dde:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012de2:	50                   	push   eax
c0012de3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012de7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012deb:	e8 f9 fe ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012df0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012df5:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012dfa:	c1 e0 08             	shl    eax,0x8
c0012dfd:	09 c2                	or     edx,eax
c0012dff:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e04:	83 c4 4c             	add    esp,0x4c
c0012e07:	c1 e0 10             	shl    eax,0x10
c0012e0a:	09 d0                	or     eax,edx
c0012e0c:	c3                   	ret    

c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e0d:	53                   	push   ebx
c0012e0e:	83 ec 18             	sub    esp,0x18
c0012e11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e15:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e19:	74 29                	je     c0012e44 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e1b:	50                   	push   eax
c0012e1c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e21:	99                   	cdq    
c0012e22:	52                   	push   edx
c0012e23:	50                   	push   eax
c0012e24:	ff 33                	push   DWORD PTR [ebx]
c0012e26:	e8 09 8e ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012e2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e2d:	5a                   	pop    edx
c0012e2e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e32:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e34:	51                   	push   ecx
c0012e35:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e39:	6a 00                	push   0x0
c0012e3b:	6a 2b                	push   0x2b
c0012e3d:	50                   	push   eax
c0012e3e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e41:	83 c4 20             	add    esp,0x20
c0012e44:	83 c4 18             	add    esp,0x18
c0012e47:	5b                   	pop    ebx
c0012e48:	c3                   	ret    

c0012e49 <CmFreeExtent(Reghive_Tag*, int)>:
c0012e49:	53                   	push   ebx
c0012e4a:	83 ec 3c             	sub    esp,0x3c
c0012e4d:	6a 2b                	push   0x2b
c0012e4f:	6a 00                	push   0x0
c0012e51:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012e55:	53                   	push   ebx
c0012e56:	e8 95 d6 fe ff       	call   c00004f0 <memset>
c0012e5b:	83 c4 0c             	add    esp,0xc
c0012e5e:	53                   	push   ebx
c0012e5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e67:	e8 a1 ff ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e6c:	83 c4 48             	add    esp,0x48
c0012e6f:	5b                   	pop    ebx
c0012e70:	c3                   	ret    

c0012e71 <CmUpdateHeader(Reghive_Tag*)>:
c0012e71:	83 ec 0c             	sub    esp,0xc
c0012e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e78:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e7c:	74 10                	je     c0012e8e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012e7e:	52                   	push   edx
c0012e7f:	8d 50 05             	lea    edx,[eax+0x5]
c0012e82:	52                   	push   edx
c0012e83:	6a 00                	push   0x0
c0012e85:	50                   	push   eax
c0012e86:	e8 82 ff ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	83 c4 0c             	add    esp,0xc
c0012e91:	c3                   	ret    

c0012e92 <CmExpand(Reghive_Tag*, int)>:
c0012e92:	55                   	push   ebp
c0012e93:	57                   	push   edi
c0012e94:	83 cf ff             	or     edi,0xffffffff
c0012e97:	56                   	push   esi
c0012e98:	53                   	push   ebx
c0012e99:	83 ec 3c             	sub    esp,0x3c
c0012e9c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012ea0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ea4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ea8:	74 59                	je     c0012f03 <CmExpand(Reghive_Tag*, int)+0x71>
c0012eaa:	50                   	push   eax
c0012eab:	31 d2                	xor    edx,edx
c0012ead:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012eb1:	31 ff                	xor    edi,edi
c0012eb3:	52                   	push   edx
c0012eb4:	50                   	push   eax
c0012eb5:	ff 33                	push   DWORD PTR [ebx]
c0012eb7:	e8 78 8d ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012ebc:	83 c4 0c             	add    esp,0xc
c0012ebf:	6a 2b                	push   0x2b
c0012ec1:	6a 00                	push   0x0
c0012ec3:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012ec7:	55                   	push   ebp
c0012ec8:	e8 23 d6 fe ff       	call   c00004f0 <memset>
c0012ecd:	83 c4 10             	add    esp,0x10
c0012ed0:	39 f7                	cmp    edi,esi
c0012ed2:	7d 1b                	jge    c0012eef <CmExpand(Reghive_Tag*, int)+0x5d>
c0012ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ed6:	83 ec 0c             	sub    esp,0xc
c0012ed9:	47                   	inc    edi
c0012eda:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012ede:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ee0:	51                   	push   ecx
c0012ee1:	55                   	push   ebp
c0012ee2:	6a 00                	push   0x0
c0012ee4:	6a 2b                	push   0x2b
c0012ee6:	50                   	push   eax
c0012ee7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012eea:	83 c4 20             	add    esp,0x20
c0012eed:	eb e1                	jmp    c0012ed0 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012eef:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012ef2:	83 ec 0c             	sub    esp,0xc
c0012ef5:	01 fe                	add    esi,edi
c0012ef7:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012efa:	53                   	push   ebx
c0012efb:	e8 71 ff ff ff       	call   c0012e71 <CmUpdateHeader(Reghive_Tag*)>
c0012f00:	83 c4 10             	add    esp,0x10
c0012f03:	83 c4 3c             	add    esp,0x3c
c0012f06:	89 f8                	mov    eax,edi
c0012f08:	5b                   	pop    ebx
c0012f09:	5e                   	pop    esi
c0012f0a:	5f                   	pop    edi
c0012f0b:	5d                   	pop    ebp
c0012f0c:	c3                   	ret    

c0012f0d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f0d:	55                   	push   ebp
c0012f0e:	57                   	push   edi
c0012f0f:	56                   	push   esi
c0012f10:	53                   	push   ebx
c0012f11:	83 cb ff             	or     ebx,0xffffffff
c0012f14:	83 ec 1c             	sub    esp,0x1c
c0012f17:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f1b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f1f:	74 68                	je     c0012f89 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f21:	51                   	push   ecx
c0012f22:	be 2b 00 00 00       	mov    esi,0x2b
c0012f27:	6a 00                	push   0x0
c0012f29:	31 ff                	xor    edi,edi
c0012f2b:	6a 00                	push   0x0
c0012f2d:	31 db                	xor    ebx,ebx
c0012f2f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f32:	e8 fd 8c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012f3d:	76 3b                	jbe    c0012f7a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012f3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f42:	83 ec 0c             	sub    esp,0xc
c0012f45:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f49:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f4b:	51                   	push   ecx
c0012f4c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012f50:	51                   	push   ecx
c0012f51:	6a 00                	push   0x0
c0012f53:	6a 01                	push   0x1
c0012f55:	50                   	push   eax
c0012f56:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012f59:	83 c4 20             	add    esp,0x20
c0012f5c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012f61:	74 26                	je     c0012f89 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f63:	52                   	push   edx
c0012f64:	43                   	inc    ebx
c0012f65:	57                   	push   edi
c0012f66:	56                   	push   esi
c0012f67:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f6a:	e8 c5 8c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012f6f:	83 c6 2b             	add    esi,0x2b
c0012f72:	83 d7 00             	adc    edi,0x0
c0012f75:	83 c4 10             	add    esp,0x10
c0012f78:	eb c0                	jmp    c0012f3a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012f7a:	50                   	push   eax
c0012f7b:	50                   	push   eax
c0012f7c:	6a 40                	push   0x40
c0012f7e:	55                   	push   ebp
c0012f7f:	e8 0e ff ff ff       	call   c0012e92 <CmExpand(Reghive_Tag*, int)>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	89 c3                	mov    ebx,eax
c0012f89:	83 c4 1c             	add    esp,0x1c
c0012f8c:	89 d8                	mov    eax,ebx
c0012f8e:	5b                   	pop    ebx
c0012f8f:	5e                   	pop    esi
c0012f90:	5f                   	pop    edi
c0012f91:	5d                   	pop    ebp
c0012f92:	c3                   	ret    

c0012f93 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012f93:	55                   	push   ebp
c0012f94:	57                   	push   edi
c0012f95:	56                   	push   esi
c0012f96:	53                   	push   ebx
c0012f97:	81 ec 88 00 00 00    	sub    esp,0x88
c0012f9d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012fa4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012fab:	e8 5d ff ff ff       	call   c0012f0d <CmFindUnusedExtent(Reghive_Tag*)>
c0012fb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fb4:	83 c4 0c             	add    esp,0xc
c0012fb7:	6a 2b                	push   0x2b
c0012fb9:	6a 00                	push   0x0
c0012fbb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012fbf:	55                   	push   ebp
c0012fc0:	e8 2b d5 fe ff       	call   c00004f0 <memset>
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	85 db                	test   ebx,ebx
c0012fca:	74 12                	je     c0012fde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012fcc:	51                   	push   ecx
c0012fcd:	55                   	push   ebp
c0012fce:	53                   	push   ebx
c0012fcf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012fd6:	e8 0e fd ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012fdb:	83 c4 10             	add    esp,0x10
c0012fde:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012fe2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012fe9:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012fee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ff0:	85 db                	test   ebx,ebx
c0012ff2:	74 49                	je     c001303d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ff4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012ff9:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012ffe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013002:	c1 e0 08             	shl    eax,0x8
c0013005:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001300b:	09 c8                	or     eax,ecx
c001300d:	74 11                	je     c0013020 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001300f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013013:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0013017:	c1 e8 10             	shr    eax,0x10
c001301a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001301e:	eb 0f                	jmp    c001302f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013020:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013025:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001302a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001302f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013033:	c1 ea 08             	shr    edx,0x8
c0013036:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001303b:	eb 0f                	jmp    c001304c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001303d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013042:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013047:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001304c:	52                   	push   edx
c001304d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013051:	50                   	push   eax
c0013052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013056:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001305d:	e8 ab fd ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	85 db                	test   ebx,ebx
c0013067:	74 12                	je     c001307b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013069:	50                   	push   eax
c001306a:	55                   	push   ebp
c001306b:	53                   	push   ebx
c001306c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013073:	e8 95 fd ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013078:	83 c4 10             	add    esp,0x10
c001307b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001307f:	83 c4 7c             	add    esp,0x7c
c0013082:	5b                   	pop    ebx
c0013083:	5e                   	pop    esi
c0013084:	5f                   	pop    edi
c0013085:	5d                   	pop    ebp
c0013086:	c3                   	ret    

c0013087 <CmSetString(Reghive_Tag*, int, char const*)>:
c0013087:	55                   	push   ebp
c0013088:	57                   	push   edi
c0013089:	56                   	push   esi
c001308a:	53                   	push   ebx
c001308b:	bb 27 00 00 00       	mov    ebx,0x27
c0013090:	81 ec 88 00 00 00    	sub    esp,0x88
c0013096:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c001309d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00130a4:	e8 d7 d4 fe ff       	call   c0000580 <strlen>
c00130a9:	8d 48 26             	lea    ecx,[eax+0x26]
c00130ac:	89 c8                	mov    eax,ecx
c00130ae:	99                   	cdq    
c00130af:	f7 fb                	idiv   ebx
c00130b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130b5:	83 c4 10             	add    esp,0x10
c00130b8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00130be:	7e 10                	jle    c00130d0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00130c0:	83 ec 0c             	sub    esp,0xc
c00130c3:	68 64 25 02 c0       	push   0xc0022564
c00130c8:	e8 d2 e4 ff ff       	call   c001159f <KePanic(char const*)>
c00130cd:	83 c4 10             	add    esp,0x10
c00130d0:	53                   	push   ebx
c00130d1:	31 ed                	xor    ebp,ebp
c00130d3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00130d7:	53                   	push   ebx
c00130d8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130df:	57                   	push   edi
c00130e0:	e8 04 fc ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00130ec:	89 f0                	mov    eax,esi
c00130ee:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00130f2:	c1 e0 08             	shl    eax,0x8
c00130f5:	09 c6                	or     esi,eax
c00130f7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00130fb:	c1 e6 08             	shl    esi,0x8
c00130fe:	09 c6                	or     esi,eax
c0013100:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0013104:	7e 72                	jle    c0013178 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0013106:	85 f6                	test   esi,esi
c0013108:	75 25                	jne    c001312f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001310a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001310f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013113:	50                   	push   eax
c0013114:	6a 00                	push   0x0
c0013116:	6a 00                	push   0x0
c0013118:	57                   	push   edi
c0013119:	e8 75 fe ff ff       	call   c0012f93 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001311e:	83 c4 10             	add    esp,0x10
c0013121:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013124:	89 c6                	mov    esi,eax
c0013126:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013129:	c1 f8 10             	sar    eax,0x10
c001312c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001312f:	51                   	push   ecx
c0013130:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013134:	52                   	push   edx
c0013135:	56                   	push   esi
c0013136:	57                   	push   edi
c0013137:	e8 ad fb ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001313c:	83 c4 0c             	add    esp,0xc
c001313f:	6a 27                	push   0x27
c0013141:	6a 00                	push   0x0
c0013143:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013147:	51                   	push   ecx
c0013148:	e8 a3 d3 fe ff       	call   c00004f0 <memset>
c001314d:	6b c5 27             	imul   eax,ebp,0x27
c0013150:	83 c4 0c             	add    esp,0xc
c0013153:	6a 27                	push   0x27
c0013155:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001315c:	50                   	push   eax
c001315d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013161:	51                   	push   ecx
c0013162:	e8 29 d5 fe ff       	call   c0000690 <strncpy>
c0013167:	83 c4 0c             	add    esp,0xc
c001316a:	8d 54 24 49          	lea    edx,[esp+0x49]
c001316e:	52                   	push   edx
c001316f:	56                   	push   esi
c0013170:	57                   	push   edi
c0013171:	e8 97 fc ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013176:	eb 19                	jmp    c0013191 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0013178:	85 f6                	test   esi,esi
c001317a:	74 18                	je     c0013194 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c001317c:	52                   	push   edx
c001317d:	52                   	push   edx
c001317e:	56                   	push   esi
c001317f:	57                   	push   edi
c0013180:	e8 c4 fc ff ff       	call   c0012e49 <CmFreeExtent(Reghive_Tag*, int)>
c0013185:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013189:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c001318d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	45                   	inc    ebp
c0013195:	83 c3 03             	add    ebx,0x3
c0013198:	83 fd 07             	cmp    ebp,0x7
c001319b:	0f 85 47 ff ff ff    	jne    c00130e8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00131a1:	50                   	push   eax
c00131a2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00131a6:	50                   	push   eax
c00131a7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131ae:	57                   	push   edi
c00131af:	e8 59 fc ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131b4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00131ba:	5b                   	pop    ebx
c00131bb:	5e                   	pop    esi
c00131bc:	5f                   	pop    edi
c00131bd:	5d                   	pop    ebp
c00131be:	c3                   	ret    

c00131bf <CmGetMatch(char*, char*, bool, bool*)>:
c00131bf:	56                   	push   esi
c00131c0:	53                   	push   ebx
c00131c1:	50                   	push   eax
c00131c2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00131c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00131cb:	74 25                	je     c00131f2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00131cd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00131d0:	31 db                	xor    ebx,ebx
c00131d2:	50                   	push   eax
c00131d3:	50                   	push   eax
c00131d4:	8d 04 9d 00 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc200]
c00131db:	50                   	push   eax
c00131dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e0:	e8 9b d5 fe ff       	call   c0000780 <strcmp>
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	85 c0                	test   eax,eax
c00131ea:	74 2e                	je     c001321a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00131ec:	43                   	inc    ebx
c00131ed:	83 fb 3f             	cmp    ebx,0x3f
c00131f0:	75 e0                	jne    c00131d2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00131f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00131f5:	31 db                	xor    ebx,ebx
c00131f7:	51                   	push   ecx
c00131f8:	51                   	push   ecx
c00131f9:	8d 04 9d 00 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc200]
c0013200:	50                   	push   eax
c0013201:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013205:	e8 76 d5 fe ff       	call   c0000780 <strcmp>
c001320a:	83 c4 10             	add    esp,0x10
c001320d:	85 c0                	test   eax,eax
c001320f:	74 09                	je     c001321a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013211:	43                   	inc    ebx
c0013212:	83 fb 3f             	cmp    ebx,0x3f
c0013215:	75 e0                	jne    c00131f7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0013217:	83 cb ff             	or     ebx,0xffffffff
c001321a:	5a                   	pop    edx
c001321b:	89 d8                	mov    eax,ebx
c001321d:	5b                   	pop    ebx
c001321e:	5e                   	pop    esi
c001321f:	c3                   	ret    

c0013220 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013220:	55                   	push   ebp
c0013221:	31 c0                	xor    eax,eax
c0013223:	57                   	push   edi
c0013224:	56                   	push   esi
c0013225:	53                   	push   ebx
c0013226:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001322a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001322e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013232:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013236:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013238:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001323b:	83 fd 1f             	cmp    ebp,0x1f
c001323e:	7f 0b                	jg     c001324b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013240:	0f b6 c2             	movzx  eax,dl
c0013243:	d3 e0                	shl    eax,cl
c0013245:	09 07                	or     DWORD PTR [edi],eax
c0013247:	b0 01                	mov    al,0x1
c0013249:	01 33                	add    DWORD PTR [ebx],esi
c001324b:	5b                   	pop    ebx
c001324c:	5e                   	pop    esi
c001324d:	5f                   	pop    edi
c001324e:	5d                   	pop    ebp
c001324f:	c3                   	ret    

c0013250 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013250:	57                   	push   edi
c0013251:	56                   	push   esi
c0013252:	53                   	push   ebx
c0013253:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013257:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001325b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001325f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013263:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013265:	7c 17                	jl     c001327e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0013267:	8b 17                	mov    edx,DWORD PTR [edi]
c0013269:	b8 01 00 00 00       	mov    eax,0x1
c001326e:	d3 e0                	shl    eax,cl
c0013270:	48                   	dec    eax
c0013271:	21 d0                	and    eax,edx
c0013273:	d3 ea                	shr    edx,cl
c0013275:	89 17                	mov    DWORD PTR [edi],edx
c0013277:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013279:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001327c:	eb 05                	jmp    c0013283 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001327e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013281:	31 c0                	xor    eax,eax
c0013283:	5b                   	pop    ebx
c0013284:	5e                   	pop    esi
c0013285:	5f                   	pop    edi
c0013286:	c3                   	ret    

c0013287 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013287:	83 ec 40             	sub    esp,0x40
c001328a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001328e:	50                   	push   eax
c001328f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013297:	e8 4d fa ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001329c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00132a0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00132a4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00132a8:	89 10                	mov    DWORD PTR [eax],edx
c00132aa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00132ad:	83 c4 4c             	add    esp,0x4c
c00132b0:	c3                   	ret    

c00132b1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00132b1:	55                   	push   ebp
c00132b2:	57                   	push   edi
c00132b3:	56                   	push   esi
c00132b4:	53                   	push   ebx
c00132b5:	83 ec 40             	sub    esp,0x40
c00132b8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00132bc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00132c0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00132c4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00132c8:	53                   	push   ebx
c00132c9:	56                   	push   esi
c00132ca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132ce:	e8 16 fa ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132d3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00132d7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00132db:	83 c4 0c             	add    esp,0xc
c00132de:	53                   	push   ebx
c00132df:	56                   	push   esi
c00132e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132e4:	e8 24 fb ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132e9:	83 c4 4c             	add    esp,0x4c
c00132ec:	5b                   	pop    ebx
c00132ed:	5e                   	pop    esi
c00132ee:	5f                   	pop    edi
c00132ef:	5d                   	pop    ebp
c00132f0:	c3                   	ret    

c00132f1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00132f1:	55                   	push   ebp
c00132f2:	57                   	push   edi
c00132f3:	56                   	push   esi
c00132f4:	31 f6                	xor    esi,esi
c00132f6:	53                   	push   ebx
c00132f7:	31 db                	xor    ebx,ebx
c00132f9:	83 ec 40             	sub    esp,0x40
c00132fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013304:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001330c:	6a 12                	push   0x12
c001330e:	68 ee 00 00 00       	push   0xee
c0013313:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013317:	e8 d4 d1 fe ff       	call   c00004f0 <memset>
c001331c:	83 c4 10             	add    esp,0x10
c001331f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013323:	6a 08                	push   0x8
c0013325:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013329:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001332d:	50                   	push   eax
c001332e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013332:	55                   	push   ebp
c0013333:	57                   	push   edi
c0013334:	e8 e7 fe ff ff       	call   c0013220 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013339:	83 c4 10             	add    esp,0x10
c001333c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013340:	50                   	push   eax
c0013341:	6a 06                	push   0x6
c0013343:	55                   	push   ebp
c0013344:	57                   	push   edi
c0013345:	e8 06 ff ff ff       	call   c0013250 <CmGetShift(unsigned int*, int*, int, bool*)>
c001334a:	83 c4 10             	add    esp,0x10
c001334d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013352:	74 07                	je     c001335b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013354:	46                   	inc    esi
c0013355:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0013359:	eb e1                	jmp    c001333c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001335b:	43                   	inc    ebx
c001335c:	83 fb 12             	cmp    ebx,0x12
c001335f:	75 c2                	jne    c0013323 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013361:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013365:	31 f6                	xor    esi,esi
c0013367:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001336a:	50                   	push   eax
c001336b:	50                   	push   eax
c001336c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013371:	46                   	inc    esi
c0013372:	8d 04 85 00 3e 02 c0 	lea    eax,[eax*4-0x3ffdc200]
c0013379:	50                   	push   eax
c001337a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001337e:	e8 ed d4 fe ff       	call   c0000870 <strcat>
c0013383:	83 c4 10             	add    esp,0x10
c0013386:	83 fe 18             	cmp    esi,0x18
c0013389:	75 df                	jne    c001336a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001338b:	83 c4 3c             	add    esp,0x3c
c001338e:	31 c0                	xor    eax,eax
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    

c0013395 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013395:	83 ec 40             	sub    esp,0x40
c0013398:	8d 44 24 09          	lea    eax,[esp+0x9]
c001339c:	50                   	push   eax
c001339d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133a5:	e8 3f f9 ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133aa:	58                   	pop    eax
c00133ab:	5a                   	pop    edx
c00133ac:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00133b0:	8d 44 24 15          	lea    eax,[esp+0x15]
c00133b4:	50                   	push   eax
c00133b5:	e8 37 ff ff ff       	call   c00132f1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00133ba:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00133bf:	83 c4 4c             	add    esp,0x4c
c00133c2:	c3                   	ret    

c00133c3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00133c3:	55                   	push   ebp
c00133c4:	57                   	push   edi
c00133c5:	56                   	push   esi
c00133c6:	53                   	push   ebx
c00133c7:	31 db                	xor    ebx,ebx
c00133c9:	83 ec 70             	sub    esp,0x70
c00133cc:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00133d3:	6a 30                	push   0x30
c00133d5:	6a 00                	push   0x0
c00133d7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00133db:	56                   	push   esi
c00133dc:	e8 0f d1 fe ff       	call   c00004f0 <memset>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	83 ec 0c             	sub    esp,0xc
c00133e7:	57                   	push   edi
c00133e8:	e8 93 d1 fe ff       	call   c0000580 <strlen>
c00133ed:	83 c4 10             	add    esp,0x10
c00133f0:	39 d8                	cmp    eax,ebx
c00133f2:	76 16                	jbe    c001340a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00133f4:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	50                   	push   eax
c00133fc:	e8 5f d5 fe ff       	call   c0000960 <toupper>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013407:	43                   	inc    ebx
c0013408:	eb da                	jmp    c00133e4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001340a:	52                   	push   edx
c001340b:	31 db                	xor    ebx,ebx
c001340d:	6a 18                	push   0x18
c001340f:	31 ff                	xor    edi,edi
c0013411:	6a 3f                	push   0x3f
c0013413:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013417:	50                   	push   eax
c0013418:	e8 d3 d0 fe ff       	call   c00004f0 <memset>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0013424:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013428:	84 c0                	test   al,al
c001342a:	0f 84 af 00 00 00    	je     c00134df <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013430:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013434:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013437:	83 ec 0c             	sub    esp,0xc
c001343a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001343f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013443:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0013447:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001344c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013450:	56                   	push   esi
c0013451:	e8 2a d1 fe ff       	call   c0000580 <strlen>
c0013456:	83 c4 10             	add    esp,0x10
c0013459:	85 c0                	test   eax,eax
c001345b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001345f:	74 0b                	je     c001346c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013461:	50                   	push   eax
c0013462:	6a 01                	push   0x1
c0013464:	56                   	push   esi
c0013465:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013469:	50                   	push   eax
c001346a:	eb 0a                	jmp    c0013476 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001346c:	50                   	push   eax
c001346d:	6a 00                	push   0x0
c001346f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013473:	50                   	push   eax
c0013474:	6a 00                	push   0x0
c0013476:	e8 44 fd ff ff       	call   c00131bf <CmGetMatch(char*, char*, bool, bool*)>
c001347b:	83 c4 10             	add    esp,0x10
c001347e:	83 f8 ff             	cmp    eax,0xffffffff
c0013481:	75 1a                	jne    c001349d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013483:	83 ec 0c             	sub    esp,0xc
c0013486:	68 79 25 02 c0       	push   0xc0022579
c001348b:	e8 0f e1 ff ff       	call   c001159f <KePanic(char const*)>
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	b8 02 00 00 00       	mov    eax,0x2
c0013498:	e9 bb 00 00 00       	jmp    c0013558 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001349d:	83 ff 18             	cmp    edi,0x18
c00134a0:	75 1a                	jne    c00134bc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00134a2:	83 ec 0c             	sub    esp,0xc
c00134a5:	68 8e 25 02 c0       	push   0xc002258e
c00134aa:	e8 f0 e0 ff ff       	call   c001159f <KePanic(char const*)>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	b8 01 00 00 00       	mov    eax,0x1
c00134b7:	e9 9c 00 00 00       	jmp    c0013558 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00134bc:	47                   	inc    edi
c00134bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134c2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00134c6:	0f 45 dd             	cmovne ebx,ebp
c00134c9:	83 ec 0c             	sub    esp,0xc
c00134cc:	56                   	push   esi
c00134cd:	e8 ae d0 fe ff       	call   c0000580 <strlen>
c00134d2:	83 c4 10             	add    esp,0x10
c00134d5:	85 c0                	test   eax,eax
c00134d7:	74 06                	je     c00134df <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00134d9:	43                   	inc    ebx
c00134da:	e9 41 ff ff ff       	jmp    c0013420 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00134df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00134e7:	31 db                	xor    ebx,ebx
c00134e9:	31 ff                	xor    edi,edi
c00134eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00134f3:	50                   	push   eax
c00134f4:	6a 12                	push   0x12
c00134f6:	68 ee 00 00 00       	push   0xee
c00134fb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013502:	e8 e9 cf fe ff       	call   c00004f0 <memset>
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001350e:	83 fb 17             	cmp    ebx,0x17
c0013511:	7e 26                	jle    c0013539 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0013513:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013517:	50                   	push   eax
c0013518:	6a 08                	push   0x8
c001351a:	55                   	push   ebp
c001351b:	56                   	push   esi
c001351c:	e8 2f fd ff ff       	call   c0013250 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013521:	83 c4 10             	add    esp,0x10
c0013524:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013529:	74 26                	je     c0013551 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001352b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013532:	4b                   	dec    ebx
c0013533:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013536:	47                   	inc    edi
c0013537:	eb 1c                	jmp    c0013555 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013539:	6a 06                	push   0x6
c001353b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013540:	50                   	push   eax
c0013541:	55                   	push   ebp
c0013542:	56                   	push   esi
c0013543:	e8 d8 fc ff ff       	call   c0013220 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013548:	83 c4 10             	add    esp,0x10
c001354b:	84 c0                	test   al,al
c001354d:	75 06                	jne    c0013555 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001354f:	eb c2                	jmp    c0013513 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013551:	31 c0                	xor    eax,eax
c0013553:	eb 03                	jmp    c0013558 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013555:	43                   	inc    ebx
c0013556:	eb b2                	jmp    c001350a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013558:	83 c4 6c             	add    esp,0x6c
c001355b:	5b                   	pop    ebx
c001355c:	5e                   	pop    esi
c001355d:	5f                   	pop    edi
c001355e:	5d                   	pop    ebp
c001355f:	c3                   	ret    

c0013560 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013560:	53                   	push   ebx
c0013561:	83 ec 3c             	sub    esp,0x3c
c0013564:	6a 2b                	push   0x2b
c0013566:	6a 00                	push   0x0
c0013568:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001356c:	53                   	push   ebx
c001356d:	e8 7e cf fe ff       	call   c00004f0 <memset>
c0013572:	58                   	pop    eax
c0013573:	5a                   	pop    edx
c0013574:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013578:	50                   	push   eax
c0013579:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001357d:	e8 41 fe ff ff       	call   c00133c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013582:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013587:	83 c4 0c             	add    esp,0xc
c001358a:	6a 15                	push   0x15
c001358c:	6a 00                	push   0x0
c001358e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013592:	50                   	push   eax
c0013593:	e8 58 cf fe ff       	call   c00004f0 <memset>
c0013598:	53                   	push   ebx
c0013599:	6a 00                	push   0x0
c001359b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001359f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135a3:	e8 eb f9 ff ff       	call   c0012f93 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00135a8:	83 c4 58             	add    esp,0x58
c00135ab:	5b                   	pop    ebx
c00135ac:	c3                   	ret    

c00135ad <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00135ad:	56                   	push   esi
c00135ae:	53                   	push   ebx
c00135af:	83 ec 48             	sub    esp,0x48
c00135b2:	6a 12                	push   0x12
c00135b4:	68 ff 00 00 00       	push   0xff
c00135b9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00135bd:	56                   	push   esi
c00135be:	e8 2d cf fe ff       	call   c00004f0 <memset>
c00135c3:	5a                   	pop    edx
c00135c4:	59                   	pop    ecx
c00135c5:	56                   	push   esi
c00135c6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00135ca:	e8 f4 fd ff ff       	call   c00133c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00135d6:	85 db                	test   ebx,ebx
c00135d8:	74 42                	je     c001361c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00135da:	50                   	push   eax
c00135db:	8d 44 24 19          	lea    eax,[esp+0x19]
c00135df:	50                   	push   eax
c00135e0:	53                   	push   ebx
c00135e1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135e5:	e8 ff f6 ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00135ea:	83 c4 0c             	add    esp,0xc
c00135ed:	6a 12                	push   0x12
c00135ef:	8d 44 24 21          	lea    eax,[esp+0x21]
c00135f3:	50                   	push   eax
c00135f4:	56                   	push   esi
c00135f5:	e8 86 cd fe ff       	call   c0000380 <memcmp>
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	85 c0                	test   eax,eax
c00135ff:	74 1e                	je     c001361f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013601:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013606:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001360b:	c1 e3 08             	shl    ebx,0x8
c001360e:	09 d8                	or     eax,ebx
c0013610:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013615:	c1 e3 10             	shl    ebx,0x10
c0013618:	09 c3                	or     ebx,eax
c001361a:	eb ba                	jmp    c00135d6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001361c:	83 cb ff             	or     ebx,0xffffffff
c001361f:	83 c4 44             	add    esp,0x44
c0013622:	89 d8                	mov    eax,ebx
c0013624:	5b                   	pop    ebx
c0013625:	5e                   	pop    esi
c0013626:	c3                   	ret    

c0013627 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013627:	57                   	push   edi
c0013628:	56                   	push   esi
c0013629:	53                   	push   ebx
c001362a:	83 ec 34             	sub    esp,0x34
c001362d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013631:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013635:	6a 2b                	push   0x2b
c0013637:	6a 00                	push   0x0
c0013639:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001363d:	53                   	push   ebx
c001363e:	e8 ad ce fe ff       	call   c00004f0 <memset>
c0013643:	58                   	pop    eax
c0013644:	5a                   	pop    edx
c0013645:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013649:	50                   	push   eax
c001364a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001364e:	e8 70 fd ff ff       	call   c00133c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013653:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013657:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001365b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001365f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013663:	53                   	push   ebx
c0013664:	6a 00                	push   0x0
c0013666:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001366a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001366e:	e8 20 f9 ff ff       	call   c0012f93 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013673:	83 c4 50             	add    esp,0x50
c0013676:	5b                   	pop    ebx
c0013677:	5e                   	pop    esi
c0013678:	5f                   	pop    edi
c0013679:	c3                   	ret    

c001367a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001367a:	55                   	push   ebp
c001367b:	57                   	push   edi
c001367c:	56                   	push   esi
c001367d:	53                   	push   ebx
c001367e:	83 ec 40             	sub    esp,0x40
c0013681:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013685:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013689:	6a 2b                	push   0x2b
c001368b:	6a 00                	push   0x0
c001368d:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013691:	56                   	push   esi
c0013692:	e8 59 ce fe ff       	call   c00004f0 <memset>
c0013697:	5f                   	pop    edi
c0013698:	89 ef                	mov    edi,ebp
c001369a:	58                   	pop    eax
c001369b:	8d 44 24 11          	lea    eax,[esp+0x11]
c001369f:	50                   	push   eax
c00136a0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136a4:	e8 1a fd ff ff       	call   c00133c3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136a9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00136ae:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00136b3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00136b8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00136bd:	83 c4 10             	add    esp,0x10
c00136c0:	85 ed                	test   ebp,ebp
c00136c2:	74 14                	je     c00136d8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00136c4:	51                   	push   ecx
c00136c5:	51                   	push   ecx
c00136c6:	57                   	push   edi
c00136c7:	53                   	push   ebx
c00136c8:	e8 0e f7 ff ff       	call   c0012ddb <CmGetNext(Reghive_Tag*, int)>
c00136cd:	83 c4 10             	add    esp,0x10
c00136d0:	85 c0                	test   eax,eax
c00136d2:	74 04                	je     c00136d8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00136d4:	89 c7                	mov    edi,eax
c00136d6:	eb e8                	jmp    c00136c0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00136d8:	56                   	push   esi
c00136d9:	6a 00                	push   0x0
c00136db:	57                   	push   edi
c00136dc:	53                   	push   ebx
c00136dd:	e8 b1 f8 ff ff       	call   c0012f93 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136e2:	83 c4 0c             	add    esp,0xc
c00136e5:	56                   	push   esi
c00136e6:	50                   	push   eax
c00136e7:	89 c7                	mov    edi,eax
c00136e9:	53                   	push   ebx
c00136ea:	e8 fa f5 ff ff       	call   c0012ce9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136ef:	58                   	pop    eax
c00136f0:	5a                   	pop    edx
c00136f1:	6a 6c                	push   0x6c
c00136f3:	6a 00                	push   0x0
c00136f5:	6a 00                	push   0x0
c00136f7:	68 9f 25 02 c0       	push   0xc002259f
c00136fc:	57                   	push   edi
c00136fd:	53                   	push   ebx
c00136fe:	e8 24 ff ff ff       	call   c0013627 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013703:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013707:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001370b:	c1 e8 10             	shr    eax,0x10
c001370e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013712:	83 c4 1c             	add    esp,0x1c
c0013715:	56                   	push   esi
c0013716:	57                   	push   edi
c0013717:	53                   	push   ebx
c0013718:	e8 f0 f6 ff ff       	call   c0012e0d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001371d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013722:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013727:	c1 e0 08             	shl    eax,0x8
c001372a:	09 c2                	or     edx,eax
c001372c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013731:	83 c4 4c             	add    esp,0x4c
c0013734:	5b                   	pop    ebx
c0013735:	5e                   	pop    esi
c0013736:	c1 e0 10             	shl    eax,0x10
c0013739:	09 d0                	or     eax,edx
c001373b:	5f                   	pop    edi
c001373c:	5d                   	pop    ebp
c001373d:	c3                   	ret    

c001373e <zStrtok(char*, char const*)>:
c001373e:	55                   	push   ebp
c001373f:	57                   	push   edi
c0013740:	56                   	push   esi
c0013741:	53                   	push   ebx
c0013742:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001374a:	85 db                	test   ebx,ebx
c001374c:	74 2f                	je     c001377d <zStrtok(char*, char const*)+0x3f>
c001374e:	85 c0                	test   eax,eax
c0013750:	75 09                	jne    c001375b <zStrtok(char*, char const*)+0x1d>
c0013752:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c0013757:	85 c0                	test   eax,eax
c0013759:	74 50                	je     c00137ab <zStrtok(char*, char const*)+0x6d>
c001375b:	31 c9                	xor    ecx,ecx
c001375d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013761:	74 03                	je     c0013766 <zStrtok(char*, char const*)+0x28>
c0013763:	41                   	inc    ecx
c0013764:	eb f7                	jmp    c001375d <zStrtok(char*, char const*)+0x1f>
c0013766:	31 d2                	xor    edx,edx
c0013768:	39 ca                	cmp    edx,ecx
c001376a:	74 15                	je     c0013781 <zStrtok(char*, char const*)+0x43>
c001376c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013770:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013773:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013776:	39 ee                	cmp    esi,ebp
c0013778:	74 13                	je     c001378d <zStrtok(char*, char const*)+0x4f>
c001377a:	42                   	inc    edx
c001377b:	eb eb                	jmp    c0013768 <zStrtok(char*, char const*)+0x2a>
c001377d:	31 c0                	xor    eax,eax
c001377f:	eb 2a                	jmp    c00137ab <zStrtok(char*, char const*)+0x6d>
c0013781:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001378b:	eb 1e                	jmp    c00137ab <zStrtok(char*, char const*)+0x6d>
c001378d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013790:	39 ce                	cmp    esi,ecx
c0013792:	75 0a                	jne    c001379e <zStrtok(char*, char const*)+0x60>
c0013794:	40                   	inc    eax
c0013795:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001379a:	89 d8                	mov    eax,ebx
c001379c:	eb 0d                	jmp    c00137ab <zStrtok(char*, char const*)+0x6d>
c001379e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00137a1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00137a5:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00137ab:	5b                   	pop    ebx
c00137ac:	5e                   	pop    esi
c00137ad:	5f                   	pop    edi
c00137ae:	5d                   	pop    ebp
c00137af:	c3                   	ret    

c00137b0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00137b0:	57                   	push   edi
c00137b1:	56                   	push   esi
c00137b2:	53                   	push   ebx
c00137b3:	81 ec 08 01 00 00    	sub    esp,0x108
c00137b9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00137c0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00137c7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00137cb:	53                   	push   ebx
c00137cc:	e8 7f ce fe ff       	call   c0000650 <strcpy>
c00137d1:	59                   	pop    ecx
c00137d2:	5e                   	pop    esi
c00137d3:	68 03 29 02 c0       	push   0xc0022903
c00137d8:	53                   	push   ebx
c00137d9:	bb 01 00 00 00       	mov    ebx,0x1
c00137de:	e8 5b ff ff ff       	call   c001373e <zStrtok(char*, char const*)>
c00137e3:	83 c4 10             	add    esp,0x10
c00137e6:	85 c0                	test   eax,eax
c00137e8:	74 3b                	je     c0013825 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137ea:	52                   	push   edx
c00137eb:	50                   	push   eax
c00137ec:	6a 01                	push   0x1
c00137ee:	57                   	push   edi
c00137ef:	e8 b9 fd ff ff       	call   c00135ad <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00137f4:	59                   	pop    ecx
c00137f5:	5e                   	pop    esi
c00137f6:	89 c3                	mov    ebx,eax
c00137f8:	68 03 29 02 c0       	push   0xc0022903
c00137fd:	6a 00                	push   0x0
c00137ff:	e8 3a ff ff ff       	call   c001373e <zStrtok(char*, char const*)>
c0013804:	83 c4 10             	add    esp,0x10
c0013807:	85 c0                	test   eax,eax
c0013809:	89 c6                	mov    esi,eax
c001380b:	74 18                	je     c0013825 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001380d:	52                   	push   edx
c001380e:	52                   	push   edx
c001380f:	53                   	push   ebx
c0013810:	57                   	push   edi
c0013811:	e8 86 f5 ff ff       	call   c0012d9c <CmEnterDirectory(Reghive_Tag*, int)>
c0013816:	83 c4 10             	add    esp,0x10
c0013819:	83 f8 ff             	cmp    eax,0xffffffff
c001381c:	89 c3                	mov    ebx,eax
c001381e:	74 05                	je     c0013825 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013820:	50                   	push   eax
c0013821:	56                   	push   esi
c0013822:	53                   	push   ebx
c0013823:	eb c9                	jmp    c00137ee <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013825:	81 c4 00 01 00 00    	add    esp,0x100
c001382b:	89 d8                	mov    eax,ebx
c001382d:	5b                   	pop    ebx
c001382e:	5e                   	pop    esi
c001382f:	5f                   	pop    edi
c0013830:	c3                   	ret    

c0013831 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013831:	55                   	push   ebp
c0013832:	57                   	push   edi
c0013833:	56                   	push   esi
c0013834:	53                   	push   ebx
c0013835:	83 ec 5c             	sub    esp,0x5c
c0013838:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001383c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013840:	85 db                	test   ebx,ebx
c0013842:	0f 8e 84 00 00 00    	jle    c00138cc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013848:	57                   	push   edi
c0013849:	31 ed                	xor    ebp,ebp
c001384b:	6a 32                	push   0x32
c001384d:	6a 00                	push   0x0
c001384f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013853:	57                   	push   edi
c0013854:	e8 97 cc fe ff       	call   c00004f0 <memset>
c0013859:	83 c4 0c             	add    esp,0xc
c001385c:	57                   	push   edi
c001385d:	53                   	push   ebx
c001385e:	56                   	push   esi
c001385f:	e8 31 fb ff ff       	call   c0013395 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013864:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001386f:	7d 13                	jge    c0013884 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	45                   	inc    ebp
c0013875:	68 a7 2c 02 c0       	push   0xc0022ca7
c001387a:	e8 8b 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001387f:	83 c4 10             	add    esp,0x10
c0013882:	eb e7                	jmp    c001386b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013884:	51                   	push   ecx
c0013885:	57                   	push   edi
c0013886:	53                   	push   ebx
c0013887:	68 a5 25 02 c0       	push   0xc00225a5
c001388c:	e8 79 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013891:	83 c4 10             	add    esp,0x10
c0013894:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013899:	75 1e                	jne    c00138b9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001389b:	52                   	push   edx
c001389c:	52                   	push   edx
c001389d:	53                   	push   ebx
c001389e:	56                   	push   esi
c001389f:	e8 f8 f4 ff ff       	call   c0012d9c <CmEnterDirectory(Reghive_Tag*, int)>
c00138a4:	83 c4 0c             	add    esp,0xc
c00138a7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00138ab:	8d 51 04             	lea    edx,[ecx+0x4]
c00138ae:	52                   	push   edx
c00138af:	50                   	push   eax
c00138b0:	56                   	push   esi
c00138b1:	e8 7b ff ff ff       	call   c0013831 <CmDisplayTree(Reghive_Tag*, int, int)>
c00138b6:	83 c4 10             	add    esp,0x10
c00138b9:	50                   	push   eax
c00138ba:	50                   	push   eax
c00138bb:	53                   	push   ebx
c00138bc:	56                   	push   esi
c00138bd:	e8 19 f5 ff ff       	call   c0012ddb <CmGetNext(Reghive_Tag*, int)>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	89 c3                	mov    ebx,eax
c00138c7:	e9 74 ff ff ff       	jmp    c0013840 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00138cc:	83 c4 5c             	add    esp,0x5c
c00138cf:	5b                   	pop    ebx
c00138d0:	5e                   	pop    esi
c00138d1:	5f                   	pop    edi
c00138d2:	5d                   	pop    ebp
c00138d3:	c3                   	ret    

c00138d4 <CmSplitFinalSlashInPlace(char*)>:
c00138d4:	53                   	push   ebx
c00138d5:	83 ec 14             	sub    esp,0x14
c00138d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138dc:	53                   	push   ebx
c00138dd:	e8 9e cc fe ff       	call   c0000580 <strlen>
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	48                   	dec    eax
c00138e6:	85 c0                	test   eax,eax
c00138e8:	74 15                	je     c00138ff <CmSplitFinalSlashInPlace(char*)+0x2b>
c00138ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00138ee:	8d 14 03             	lea    edx,[ebx+eax*1]
c00138f1:	75 09                	jne    c00138fc <CmSplitFinalSlashInPlace(char*)+0x28>
c00138f3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00138f6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00138fa:	eb 05                	jmp    c0013901 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00138fc:	48                   	dec    eax
c00138fd:	eb e7                	jmp    c00138e6 <CmSplitFinalSlashInPlace(char*)+0x12>
c00138ff:	31 c0                	xor    eax,eax
c0013901:	83 c4 08             	add    esp,0x8
c0013904:	5b                   	pop    ebx
c0013905:	c3                   	ret    

c0013906 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013906:	55                   	push   ebp
c0013907:	57                   	push   edi
c0013908:	56                   	push   esi
c0013909:	53                   	push   ebx
c001390a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013910:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013917:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001391a:	8d 43 01             	lea    eax,[ebx+0x1]
c001391d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013921:	89 f0                	mov    eax,esi
c0013923:	3c 40                	cmp    al,0x40
c0013925:	75 1b                	jne    c0013942 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013927:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001392a:	85 c0                	test   eax,eax
c001392c:	74 08                	je     c0013936 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001392e:	83 f8 3a             	cmp    eax,0x3a
c0013931:	74 03                	je     c0013936 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013933:	43                   	inc    ebx
c0013934:	eb f1                	jmp    c0013927 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013936:	85 c0                	test   eax,eax
c0013938:	0f 84 45 01 00 00    	je     c0013a83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001393e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013941:	43                   	inc    ebx
c0013942:	50                   	push   eax
c0013943:	6a 40                	push   0x40
c0013945:	6a 00                	push   0x0
c0013947:	8d 44 24 24          	lea    eax,[esp+0x24]
c001394b:	50                   	push   eax
c001394c:	e8 9f cb fe ff       	call   c00004f0 <memset>
c0013951:	89 f1                	mov    ecx,esi
c0013953:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001395a:	31 c0                	xor    eax,eax
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	0f be f1             	movsx  esi,cl
c0013962:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013965:	85 d2                	test   edx,edx
c0013967:	89 d1                	mov    ecx,edx
c0013969:	0f 84 14 01 00 00    	je     c0013a83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001396f:	3d c7 00 00 00       	cmp    eax,0xc7
c0013974:	0f 8f 09 01 00 00    	jg     c0013a83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001397a:	83 fa 0a             	cmp    edx,0xa
c001397d:	0f 85 f1 00 00 00    	jne    c0013a74 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013983:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013988:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c001398d:	89 c8                	mov    eax,ecx
c001398f:	a8 df                	test   al,0xdf
c0013991:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013996:	83 f9 23             	cmp    ecx,0x23
c0013999:	0f 94 c2             	sete   dl
c001399c:	89 d5                	mov    ebp,edx
c001399e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00139a2:	09 ea                	or     edx,ebp
c00139a4:	80 e2 01             	and    dl,0x1
c00139a7:	75 47                	jne    c00139f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139a9:	83 e8 09             	sub    eax,0x9
c00139ac:	3c 01                	cmp    al,0x1
c00139ae:	76 40                	jbe    c00139f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139b0:	83 f9 5b             	cmp    ecx,0x5b
c00139b3:	75 42                	jne    c00139f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00139b5:	83 fe 40             	cmp    esi,0x40
c00139b8:	75 36                	jne    c00139f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139ba:	83 ec 0c             	sub    esp,0xc
c00139bd:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00139c1:	55                   	push   ebp
c00139c2:	e8 b9 cb fe ff       	call   c0000580 <strlen>
c00139c7:	83 c4 10             	add    esp,0x10
c00139ca:	83 f8 3f             	cmp    eax,0x3f
c00139cd:	0f 87 b0 00 00 00    	ja     c0013a83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139d3:	50                   	push   eax
c00139d4:	50                   	push   eax
c00139d5:	55                   	push   ebp
c00139d6:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c00139da:	55                   	push   ebp
c00139db:	e8 70 cc fe ff       	call   c0000650 <strcpy>
c00139e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00139e3:	e8 98 cb fe ff       	call   c0000580 <strlen>
c00139e8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00139ed:	83 c4 10             	add    esp,0x10
c00139f0:	31 d2                	xor    edx,edx
c00139f2:	e9 84 00 00 00       	jmp    c0013a7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00139f7:	83 fe 40             	cmp    esi,0x40
c00139fa:	74 06                	je     c0013a02 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00139fc:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013a00:	eb 19                	jmp    c0013a1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a02:	51                   	push   ecx
c0013a03:	51                   	push   ecx
c0013a04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a0c:	50                   	push   eax
c0013a0d:	e8 6e cd fe ff       	call   c0000780 <strcmp>
c0013a12:	83 c4 10             	add    esp,0x10
c0013a15:	85 c0                	test   eax,eax
c0013a17:	75 d7                	jne    c00139f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a19:	eb e1                	jmp    c00139fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013a1b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013a1e:	85 c9                	test   ecx,ecx
c0013a20:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a25:	83 f9 3d             	cmp    ecx,0x3d
c0013a28:	0f 94 c0             	sete   al
c0013a2b:	89 c5                	mov    ebp,eax
c0013a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a31:	09 e8                	or     eax,ebp
c0013a33:	a8 01                	test   al,0x1
c0013a35:	89 c5                	mov    ebp,eax
c0013a37:	75 03                	jne    c0013a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013a39:	42                   	inc    edx
c0013a3a:	eb df                	jmp    c0013a1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013a3c:	85 c9                	test   ecx,ecx
c0013a3e:	74 43                	je     c0013a83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a44:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a47:	52                   	push   edx
c0013a48:	52                   	push   edx
c0013a49:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013a4d:	50                   	push   eax
c0013a4e:	53                   	push   ebx
c0013a4f:	e8 2c cd fe ff       	call   c0000780 <strcmp>
c0013a54:	83 c4 10             	add    esp,0x10
c0013a57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a5b:	85 c0                	test   eax,eax
c0013a5d:	75 91                	jne    c00139f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a5f:	50                   	push   eax
c0013a60:	42                   	inc    edx
c0013a61:	50                   	push   eax
c0013a62:	52                   	push   edx
c0013a63:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013a6a:	e8 e1 cb fe ff       	call   c0000650 <strcpy>
c0013a6f:	83 c4 10             	add    esp,0x10
c0013a72:	eb 11                	jmp    c0013a85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013a74:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a78:	8d 50 01             	lea    edx,[eax+0x1]
c0013a7b:	47                   	inc    edi
c0013a7c:	89 d0                	mov    eax,edx
c0013a7e:	e9 df fe ff ff       	jmp    c0013962 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013a83:	31 ed                	xor    ebp,ebp
c0013a85:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013a8b:	89 e8                	mov    eax,ebp
c0013a8d:	5b                   	pop    ebx
c0013a8e:	5e                   	pop    esi
c0013a8f:	5f                   	pop    edi
c0013a90:	5d                   	pop    ebp
c0013a91:	c3                   	ret    

c0013a92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013a92:	57                   	push   edi
c0013a93:	56                   	push   esi
c0013a94:	53                   	push   ebx
c0013a95:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a9b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013aa2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013aa9:	53                   	push   ebx
c0013aaa:	e8 d1 ca fe ff       	call   c0000580 <strlen>
c0013aaf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ab2:	89 c7                	mov    edi,eax
c0013ab4:	e8 c7 ca fe ff       	call   c0000580 <strlen>
c0013ab9:	83 c4 10             	add    esp,0x10
c0013abc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013ac0:	3d ff 00 00 00       	cmp    eax,0xff
c0013ac5:	0f 87 d3 00 00 00    	ja     c0013b9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013acb:	57                   	push   edi
c0013acc:	57                   	push   edi
c0013acd:	56                   	push   esi
c0013ace:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013ad2:	56                   	push   esi
c0013ad3:	e8 78 cb fe ff       	call   c0000650 <strcpy>
c0013ad8:	58                   	pop    eax
c0013ad9:	5a                   	pop    edx
c0013ada:	68 03 29 02 c0       	push   0xc0022903
c0013adf:	56                   	push   esi
c0013ae0:	e8 8b cd fe ff       	call   c0000870 <strcat>
c0013ae5:	59                   	pop    ecx
c0013ae6:	5f                   	pop    edi
c0013ae7:	53                   	push   ebx
c0013ae8:	56                   	push   esi
c0013ae9:	e8 82 cd fe ff       	call   c0000870 <strcat>
c0013aee:	58                   	pop    eax
c0013aef:	5a                   	pop    edx
c0013af0:	68 af 25 02 c0       	push   0xc00225af
c0013af5:	56                   	push   esi
c0013af6:	e8 75 cd fe ff       	call   c0000870 <strcat>
c0013afb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b02:	e8 cc 3f ff ff       	call   c0007ad3 <malloc>
c0013b07:	83 c4 0c             	add    esp,0xc
c0013b0a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b10:	56                   	push   esi
c0013b11:	50                   	push   eax
c0013b12:	89 c3                	mov    ebx,eax
c0013b14:	e8 3f 80 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0013b19:	83 c4 10             	add    esp,0x10
c0013b1c:	85 db                	test   ebx,ebx
c0013b1e:	74 7e                	je     c0013b9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b20:	51                   	push   ecx
c0013b21:	51                   	push   ecx
c0013b22:	6a 01                	push   0x1
c0013b24:	53                   	push   ebx
c0013b25:	e8 4c 80 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	85 c0                	test   eax,eax
c0013b2f:	74 08                	je     c0013b39 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b31:	83 ec 0c             	sub    esp,0xc
c0013b34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b36:	53                   	push   ebx
c0013b37:	eb 5f                	jmp    c0013b98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b39:	52                   	push   edx
c0013b3a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b3e:	50                   	push   eax
c0013b3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b43:	50                   	push   eax
c0013b44:	53                   	push   ebx
c0013b45:	e8 2e 83 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0013b4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b4e:	83 c4 10             	add    esp,0x10
c0013b51:	89 c1                	mov    ecx,eax
c0013b53:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013b57:	74 31                	je     c0013b8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b59:	83 ec 0c             	sub    esp,0xc
c0013b5c:	50                   	push   eax
c0013b5d:	e8 71 3f ff ff       	call   c0007ad3 <malloc>
c0013b62:	89 c6                	mov    esi,eax
c0013b64:	58                   	pop    eax
c0013b65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b67:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013b6b:	52                   	push   edx
c0013b6c:	56                   	push   esi
c0013b6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b75:	53                   	push   ebx
c0013b76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b79:	83 c4 20             	add    esp,0x20
c0013b7c:	85 c0                	test   eax,eax
c0013b7e:	75 0a                	jne    c0013b8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b84:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013b88:	74 18                	je     c0013ba2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013b8a:	83 ec 0c             	sub    esp,0xc
c0013b8d:	53                   	push   ebx
c0013b8e:	e8 41 80 ff ff       	call   c000bbd4 <File::close()>
c0013b93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	31 c0                	xor    eax,eax
c0013ba0:	eb 3b                	jmp    c0013bdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013ba2:	83 ec 0c             	sub    esp,0xc
c0013ba5:	53                   	push   ebx
c0013ba6:	e8 29 80 ff ff       	call   c000bbd4 <File::close()>
c0013bab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bb3:	83 c4 0c             	add    esp,0xc
c0013bb6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013bbd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013bc4:	56                   	push   esi
c0013bc5:	e8 3c fd ff ff       	call   c0013906 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013bca:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bcd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013bd1:	e8 0d 3f ff ff       	call   c0007ae3 <free>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013bdd:	81 c4 20 01 00 00    	add    esp,0x120
c0013be3:	5b                   	pop    ebx
c0013be4:	5e                   	pop    esi
c0013be5:	5f                   	pop    edi
c0013be6:	c3                   	ret    

c0013be7 <Reg::getLine(char*, char*, char*)>:
c0013be7:	57                   	push   edi
c0013be8:	56                   	push   esi
c0013be9:	53                   	push   ebx
c0013bea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013bee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bf6:	57                   	push   edi
c0013bf7:	56                   	push   esi
c0013bf8:	53                   	push   ebx
c0013bf9:	68 b4 25 02 c0       	push   0xc00225b4
c0013bfe:	e8 8f fe ff ff       	call   c0013a92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	84 c0                	test   al,al
c0013c08:	75 10                	jne    c0013c1a <Reg::getLine(char*, char*, char*)+0x33>
c0013c0a:	57                   	push   edi
c0013c0b:	56                   	push   esi
c0013c0c:	53                   	push   ebx
c0013c0d:	68 d9 25 02 c0       	push   0xc00225d9
c0013c12:	e8 7b fe ff ff       	call   c0013a92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c17:	83 c4 10             	add    esp,0x10
c0013c1a:	5b                   	pop    ebx
c0013c1b:	5e                   	pop    esi
c0013c1c:	5f                   	pop    edi
c0013c1d:	c3                   	ret    

c0013c1e <Reg::readInt(char*, char*, int*)>:
c0013c1e:	55                   	push   ebp
c0013c1f:	57                   	push   edi
c0013c20:	56                   	push   esi
c0013c21:	53                   	push   ebx
c0013c22:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013c28:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c2c:	55                   	push   ebp
c0013c2d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c34:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c3b:	e8 a7 ff ff ff       	call   c0013be7 <Reg::getLine(char*, char*, char*)>
c0013c40:	83 c4 10             	add    esp,0x10
c0013c43:	84 c0                	test   al,al
c0013c45:	0f 84 b6 00 00 00    	je     c0013d01 <Reg::readInt(char*, char*, int*)+0xe3>
c0013c4b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013c50:	83 fa 2b             	cmp    edx,0x2b
c0013c53:	74 0c                	je     c0013c61 <Reg::readInt(char*, char*, int*)+0x43>
c0013c55:	83 fa 2d             	cmp    edx,0x2d
c0013c58:	75 0e                	jne    c0013c68 <Reg::readInt(char*, char*, int*)+0x4a>
c0013c5a:	ba 01 00 00 00       	mov    edx,0x1
c0013c5f:	eb 0b                	jmp    c0013c6c <Reg::readInt(char*, char*, int*)+0x4e>
c0013c61:	ba 01 00 00 00       	mov    edx,0x1
c0013c66:	eb 02                	jmp    c0013c6a <Reg::readInt(char*, char*, int*)+0x4c>
c0013c68:	31 d2                	xor    edx,edx
c0013c6a:	31 c0                	xor    eax,eax
c0013c6c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013c71:	be 0a 00 00 00       	mov    esi,0xa
c0013c76:	75 21                	jne    c0013c99 <Reg::readInt(char*, char*, int*)+0x7b>
c0013c78:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013c7d:	83 f9 78             	cmp    ecx,0x78
c0013c80:	75 0a                	jne    c0013c8c <Reg::readInt(char*, char*, int*)+0x6e>
c0013c82:	83 c2 02             	add    edx,0x2
c0013c85:	be 10 00 00 00       	mov    esi,0x10
c0013c8a:	eb 0d                	jmp    c0013c99 <Reg::readInt(char*, char*, int*)+0x7b>
c0013c8c:	83 f9 62             	cmp    ecx,0x62
c0013c8f:	75 08                	jne    c0013c99 <Reg::readInt(char*, char*, int*)+0x7b>
c0013c91:	83 c2 02             	add    edx,0x2
c0013c94:	be 02 00 00 00       	mov    esi,0x2
c0013c99:	01 d5                	add    ebp,edx
c0013c9b:	31 d2                	xor    edx,edx
c0013c9d:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013ca1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013ca5:	85 c9                	test   ecx,ecx
c0013ca7:	0f 94 c3             	sete   bl
c0013caa:	83 f9 0d             	cmp    ecx,0xd
c0013cad:	89 df                	mov    edi,ebx
c0013caf:	0f 94 c3             	sete   bl
c0013cb2:	09 df                	or     edi,ebx
c0013cb4:	89 fb                	mov    ebx,edi
c0013cb6:	83 e7 01             	and    edi,0x1
c0013cb9:	75 35                	jne    c0013cf0 <Reg::readInt(char*, char*, int*)+0xd2>
c0013cbb:	0f af d6             	imul   edx,esi
c0013cbe:	83 fe 10             	cmp    esi,0x10
c0013cc1:	75 26                	jne    c0013ce9 <Reg::readInt(char*, char*, int*)+0xcb>
c0013cc3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013cc7:	83 ef 41             	sub    edi,0x41
c0013cca:	89 fb                	mov    ebx,edi
c0013ccc:	80 fb 05             	cmp    bl,0x5
c0013ccf:	77 06                	ja     c0013cd7 <Reg::readInt(char*, char*, int*)+0xb9>
c0013cd1:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013cd5:	eb 16                	jmp    c0013ced <Reg::readInt(char*, char*, int*)+0xcf>
c0013cd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013cdb:	83 eb 61             	sub    ebx,0x61
c0013cde:	80 fb 05             	cmp    bl,0x5
c0013ce1:	77 06                	ja     c0013ce9 <Reg::readInt(char*, char*, int*)+0xcb>
c0013ce3:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013ce7:	eb 04                	jmp    c0013ced <Reg::readInt(char*, char*, int*)+0xcf>
c0013ce9:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013ced:	45                   	inc    ebp
c0013cee:	eb ad                	jmp    c0013c9d <Reg::readInt(char*, char*, int*)+0x7f>
c0013cf0:	84 c0                	test   al,al
c0013cf2:	74 02                	je     c0013cf6 <Reg::readInt(char*, char*, int*)+0xd8>
c0013cf4:	f7 da                	neg    edx
c0013cf6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013cfd:	89 10                	mov    DWORD PTR [eax],edx
c0013cff:	88 d8                	mov    al,bl
c0013d01:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d07:	5b                   	pop    ebx
c0013d08:	5e                   	pop    esi
c0013d09:	5f                   	pop    edi
c0013d0a:	5d                   	pop    ebp
c0013d0b:	c3                   	ret    

c0013d0c <Reg::readString(char*, char*, char*, int)>:
c0013d0c:	57                   	push   edi
c0013d0d:	56                   	push   esi
c0013d0e:	53                   	push   ebx
c0013d0f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d15:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d19:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d20:	57                   	push   edi
c0013d21:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d28:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d2f:	e8 b3 fe ff ff       	call   c0013be7 <Reg::getLine(char*, char*, char*)>
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	84 c0                	test   al,al
c0013d39:	89 c6                	mov    esi,eax
c0013d3b:	74 44                	je     c0013d81 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d3d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d44:	31 c0                	xor    eax,eax
c0013d46:	4a                   	dec    edx
c0013d47:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013d4a:	84 c9                	test   cl,cl
c0013d4c:	74 0f                	je     c0013d5d <Reg::readString(char*, char*, char*, int)+0x51>
c0013d4e:	39 c2                	cmp    edx,eax
c0013d50:	7e 0b                	jle    c0013d5d <Reg::readString(char*, char*, char*, int)+0x51>
c0013d52:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013d55:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013d5a:	40                   	inc    eax
c0013d5b:	eb ea                	jmp    c0013d47 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013d5d:	83 ec 0c             	sub    esp,0xc
c0013d60:	53                   	push   ebx
c0013d61:	e8 1a c8 fe ff       	call   c0000580 <strlen>
c0013d66:	83 c4 10             	add    esp,0x10
c0013d69:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013d6e:	75 11                	jne    c0013d81 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d70:	83 ec 0c             	sub    esp,0xc
c0013d73:	53                   	push   ebx
c0013d74:	e8 07 c8 fe ff       	call   c0000580 <strlen>
c0013d79:	83 c4 10             	add    esp,0x10
c0013d7c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013d81:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013d87:	89 f0                	mov    eax,esi
c0013d89:	5b                   	pop    ebx
c0013d8a:	5e                   	pop    esi
c0013d8b:	5f                   	pop    edi
c0013d8c:	c3                   	ret    

c0013d8d <Reg::readBool(char*, char*, bool*)>:
c0013d8d:	83 ec 20             	sub    esp,0x20
c0013d90:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d94:	50                   	push   eax
c0013d95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d9d:	e8 7c fe ff ff       	call   c0013c1e <Reg::readInt(char*, char*, int*)>
c0013da2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013da6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013dab:	0f 95 02             	setne  BYTE PTR [edx]
c0013dae:	83 c4 2c             	add    esp,0x2c
c0013db1:	c3                   	ret    

c0013db2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013db2:	53                   	push   ebx
c0013db3:	83 ec 1c             	sub    esp,0x1c
c0013db6:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013dba:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013dbe:	50                   	push   eax
c0013dbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dc7:	e8 c1 ff ff ff       	call   c0013d8d <Reg::readBool(char*, char*, bool*)>
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	84 c0                	test   al,al
c0013dd1:	74 04                	je     c0013dd7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013dd3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013dd7:	83 c4 18             	add    esp,0x18
c0013dda:	88 d8                	mov    al,bl
c0013ddc:	5b                   	pop    ebx
c0013ddd:	c3                   	ret    

c0013dde <Reg::readIntWithDefault(char*, char*, int)>:
c0013dde:	53                   	push   ebx
c0013ddf:	83 ec 1c             	sub    esp,0x1c
c0013de2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013de6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013dea:	50                   	push   eax
c0013deb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013def:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df3:	e8 26 fe ff ff       	call   c0013c1e <Reg::readInt(char*, char*, int*)>
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	84 c0                	test   al,al
c0013dfd:	74 04                	je     c0013e03 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013dff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e03:	83 c4 18             	add    esp,0x18
c0013e06:	89 d8                	mov    eax,ebx
c0013e08:	5b                   	pop    ebx
c0013e09:	c3                   	ret    

c0013e0a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e0a:	57                   	push   edi
c0013e0b:	56                   	push   esi
c0013e0c:	53                   	push   ebx
c0013e0d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e11:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013e19:	56                   	push   esi
c0013e1a:	57                   	push   edi
c0013e1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e23:	e8 e4 fe ff ff       	call   c0013d0c <Reg::readString(char*, char*, char*, int)>
c0013e28:	83 c4 10             	add    esp,0x10
c0013e2b:	84 c0                	test   al,al
c0013e2d:	75 16                	jne    c0013e45 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e2f:	50                   	push   eax
c0013e30:	56                   	push   esi
c0013e31:	6a 00                	push   0x0
c0013e33:	57                   	push   edi
c0013e34:	e8 b7 c6 fe ff       	call   c00004f0 <memset>
c0013e39:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e3c:	89 de                	mov    esi,ebx
c0013e3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e40:	83 c4 10             	add    esp,0x10
c0013e43:	89 df                	mov    edi,ebx
c0013e45:	5b                   	pop    ebx
c0013e46:	89 f8                	mov    eax,edi
c0013e48:	5e                   	pop    esi
c0013e49:	5f                   	pop    edi
c0013e4a:	c3                   	ret    

c0013e4b <SysEject(regs*)>:
c0013e4b:	83 ec 0c             	sub    esp,0xc
c0013e4e:	83 ca ff             	or     edx,0xffffffff
c0013e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e55:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e58:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e5d:	83 e9 41             	sub    ecx,0x41
c0013e60:	83 f9 19             	cmp    ecx,0x19
c0013e63:	77 18                	ja     c0013e7d <SysEject(regs*)+0x32>
c0013e65:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013e6c:	85 c9                	test   ecx,ecx
c0013e6e:	74 0d                	je     c0013e7d <SysEject(regs*)+0x32>
c0013e70:	83 ec 0c             	sub    esp,0xc
c0013e73:	51                   	push   ecx
c0013e74:	e8 df 9e ff ff       	call   c000dd58 <LogicalDisk::eject()>
c0013e79:	83 c4 10             	add    esp,0x10
c0013e7c:	99                   	cdq    
c0013e7d:	83 c4 0c             	add    esp,0xc
c0013e80:	c3                   	ret    

c0013e81 <SysExit(regs*)>:
c0013e81:	83 ec 18             	sub    esp,0x18
c0013e84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e88:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e8b:	e8 3c 2b 00 00       	call   c00169cc <terminateTask(int)>
c0013e90:	83 c8 ff             	or     eax,0xffffffff
c0013e93:	83 c4 1c             	add    esp,0x1c
c0013e96:	89 c2                	mov    edx,eax
c0013e98:	c3                   	ret    

c0013e99 <SysGetCwd(regs*)>:
c0013e99:	83 ec 10             	sub    esp,0x10
c0013e9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013ea3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ea6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013eab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013eae:	e8 55 79 ff ff       	call   c000b808 <Fs::getcwd(Process*, char*, int)>
c0013eb3:	83 c4 1c             	add    esp,0x1c
c0013eb6:	99                   	cdq    
c0013eb7:	c3                   	ret    

c0013eb8 <SysGetPID(regs*)>:
c0013eb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ebd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ec0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ec2:	99                   	cdq    
c0013ec3:	c3                   	ret    

c0013ec4 <SysGetRAMData(regs*)>:
c0013ec4:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013ece:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013ed4:	99                   	cdq    
c0013ed5:	f7 f9                	idiv   ecx
c0013ed7:	c1 e0 18             	shl    eax,0x18
c0013eda:	09 c8                	or     eax,ecx
c0013edc:	99                   	cdq    
c0013edd:	c3                   	ret    

c0013ede <SysGetVGAPtr(regs*)>:
c0013ede:	55                   	push   ebp
c0013edf:	57                   	push   edi
c0013ee0:	56                   	push   esi
c0013ee1:	53                   	push   ebx
c0013ee2:	83 ec 18             	sub    esp,0x18
c0013ee5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ee9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013eec:	e8 a7 25 00 00       	call   c0016498 <Thr::processFromPID(int)>
c0013ef1:	83 c4 10             	add    esp,0x10
c0013ef4:	89 c1                	mov    ecx,eax
c0013ef6:	b8 01 00 00 00       	mov    eax,0x1
c0013efb:	85 c9                	test   ecx,ecx
c0013efd:	74 57                	je     c0013f56 <SysGetVGAPtr(regs*)+0x78>
c0013eff:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f03:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f09:	74 0c                	je     c0013f17 <SysGetVGAPtr(regs*)+0x39>
c0013f0b:	83 ec 0c             	sub    esp,0xc
c0013f0e:	55                   	push   ebp
c0013f0f:	e8 5b 48 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f1a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f1f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f24:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013f27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f2a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f33:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f36:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f3c:	50                   	push   eax
c0013f3d:	50                   	push   eax
c0013f3e:	68 f4 25 02 c0       	push   0xc00225f4
c0013f43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f46:	05 a8 0f 00 00       	add    eax,0xfa8
c0013f4b:	50                   	push   eax
c0013f4c:	e8 ff c6 fe ff       	call   c0000650 <strcpy>
c0013f51:	83 c4 10             	add    esp,0x10
c0013f54:	31 c0                	xor    eax,eax
c0013f56:	83 c4 0c             	add    esp,0xc
c0013f59:	31 d2                	xor    edx,edx
c0013f5b:	5b                   	pop    ebx
c0013f5c:	5e                   	pop    esi
c0013f5d:	5f                   	pop    edi
c0013f5e:	5d                   	pop    ebp
c0013f5f:	c3                   	ret    

c0013f60 <SysKill(regs*)>:
c0013f60:	53                   	push   ebx
c0013f61:	83 ec 08             	sub    esp,0x8
c0013f64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f68:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013f6c:	75 16                	jne    c0013f84 <SysKill(regs*)+0x24>
c0013f6e:	83 ec 0c             	sub    esp,0xc
c0013f71:	68 fe 25 02 c0       	push   0xc00225fe
c0013f76:	e8 24 d6 ff ff       	call   c001159f <KePanic(char const*)>
c0013f7b:	83 c4 10             	add    esp,0x10
c0013f7e:	e9 89 00 00 00       	jmp    c001400c <SysKill(regs*)+0xac>
c0013f83:	90                   	nop
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f8c:	e8 6b bd 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f91:	8d 76 00             	lea    esi,[esi+0x0]
c0013f94:	83 c4 10             	add    esp,0x10
c0013f97:	85 c0                	test   eax,eax
c0013f99:	74 19                	je     c0013fb4 <SysKill(regs*)+0x54>
c0013f9b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f9e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fa1:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fa3:	74 33                	je     c0013fd8 <SysKill(regs*)+0x78>
c0013fa5:	52                   	push   edx
c0013fa6:	52                   	push   edx
c0013fa7:	50                   	push   eax
c0013fa8:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013fad:	e8 6a c0 00 00       	call   c002001c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fb2:	eb e0                	jmp    c0013f94 <SysKill(regs*)+0x34>
c0013fb4:	83 ec 0c             	sub    esp,0xc
c0013fb7:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013fbc:	e8 3b bd 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc4:	83 c4 10             	add    esp,0x10
c0013fc7:	85 c0                	test   eax,eax
c0013fc9:	74 41                	je     c001400c <SysKill(regs*)+0xac>
c0013fcb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013fce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fd1:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fd3:	75 27                	jne    c0013ffc <SysKill(regs*)+0x9c>
c0013fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd8:	51                   	push   ecx
c0013fd9:	51                   	push   ecx
c0013fda:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fe2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fe5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013feb:	e8 4b da ff ff       	call   c0011a3b <KeRaiseSignal(SigHandlerBlock*, int)>
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	31 c0                	xor    eax,eax
c0013ff5:	31 d2                	xor    edx,edx
c0013ff7:	eb 1b                	jmp    c0014014 <SysKill(regs*)+0xb4>
c0013ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ffc:	52                   	push   edx
c0013ffd:	52                   	push   edx
c0013ffe:	50                   	push   eax
c0013fff:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014004:	e8 13 c0 00 00       	call   c002001c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014009:	eb b9                	jmp    c0013fc4 <SysKill(regs*)+0x64>
c001400b:	90                   	nop
c001400c:	83 c8 ff             	or     eax,0xffffffff
c001400f:	89 c2                	mov    edx,eax
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	83 c4 08             	add    esp,0x8
c0014017:	5b                   	pop    ebx
c0014018:	c3                   	ret    

c0014019 <SysLoadDLL(regs*)>:
c0014019:	56                   	push   esi
c001401a:	31 d2                	xor    edx,edx
c001401c:	53                   	push   ebx
c001401d:	b8 01 00 00 00       	mov    eax,0x1
c0014022:	51                   	push   ecx
c0014023:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014027:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001402b:	0f 84 8c 00 00 00    	je     c00140bd <SysLoadDLL(regs*)+0xa4>
c0014031:	83 ec 0c             	sub    esp,0xc
c0014034:	68 14 01 00 00       	push   0x114
c0014039:	e8 95 3a ff ff       	call   c0007ad3 <malloc>
c001403e:	83 c4 0c             	add    esp,0xc
c0014041:	89 c3                	mov    ebx,eax
c0014043:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014048:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001404b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001404e:	53                   	push   ebx
c001404f:	e8 04 7b ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014054:	83 c4 10             	add    esp,0x10
c0014057:	31 d2                	xor    edx,edx
c0014059:	85 db                	test   ebx,ebx
c001405b:	b8 02 00 00 00       	mov    eax,0x2
c0014060:	74 5b                	je     c00140bd <SysLoadDLL(regs*)+0xa4>
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	53                   	push   ebx
c0014066:	e8 cf 7d ff ff       	call   c000be3a <File::exists()>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	84 c0                	test   al,al
c0014070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014072:	75 11                	jne    c0014085 <SysLoadDLL(regs*)+0x6c>
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	53                   	push   ebx
c0014078:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001407b:	83 c4 10             	add    esp,0x10
c001407e:	b8 03 00 00 00       	mov    eax,0x3
c0014083:	eb 36                	jmp    c00140bb <SysLoadDLL(regs*)+0xa2>
c0014085:	83 ec 0c             	sub    esp,0xc
c0014088:	53                   	push   ebx
c0014089:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001408c:	58                   	pop    eax
c001408d:	5a                   	pop    edx
c001408e:	6a 00                	push   0x0
c0014090:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014093:	e8 49 15 00 00       	call   c00155e1 <Thr::loadDLL(char const*, bool)>
c0014098:	83 c4 10             	add    esp,0x10
c001409b:	31 d2                	xor    edx,edx
c001409d:	89 c1                	mov    ecx,eax
c001409f:	b8 04 00 00 00       	mov    eax,0x4
c00140a4:	85 c9                	test   ecx,ecx
c00140a6:	74 15                	je     c00140bd <SysLoadDLL(regs*)+0xa4>
c00140a8:	53                   	push   ebx
c00140a9:	53                   	push   ebx
c00140aa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00140b0:	51                   	push   ecx
c00140b1:	e8 6b 17 00 00       	call   c0015821 <Thr::executeDLL(unsigned long, void*)>
c00140b6:	83 c4 10             	add    esp,0x10
c00140b9:	31 c0                	xor    eax,eax
c00140bb:	31 d2                	xor    edx,edx
c00140bd:	59                   	pop    ecx
c00140be:	5b                   	pop    ebx
c00140bf:	5e                   	pop    esi
c00140c0:	c3                   	ret    

c00140c1 <SysRead(regs*)>:
c00140c1:	57                   	push   edi
c00140c2:	56                   	push   esi
c00140c3:	53                   	push   ebx
c00140c4:	83 ec 10             	sub    esp,0x10
c00140c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00140cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140ce:	83 f8 02             	cmp    eax,0x2
c00140d1:	77 10                	ja     c00140e3 <SysRead(regs*)+0x22>
c00140d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140db:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00140e1:	eb 0e                	jmp    c00140f1 <SysRead(regs*)+0x30>
c00140e3:	83 ec 0c             	sub    esp,0xc
c00140e6:	50                   	push   eax
c00140e7:	e8 af 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140ec:	83 c4 10             	add    esp,0x10
c00140ef:	89 c1                	mov    ecx,eax
c00140f1:	83 c8 ff             	or     eax,0xffffffff
c00140f4:	85 c9                	test   ecx,ecx
c00140f6:	89 c2                	mov    edx,eax
c00140f8:	74 28                	je     c0014122 <SysRead(regs*)+0x61>
c00140fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014102:	83 ec 0c             	sub    esp,0xc
c0014105:	31 ff                	xor    edi,edi
c0014107:	8d 54 24 18          	lea    edx,[esp+0x18]
c001410b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001410d:	52                   	push   edx
c001410e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014111:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014114:	57                   	push   edi
c0014115:	56                   	push   esi
c0014116:	51                   	push   ecx
c0014117:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001411a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001411e:	83 c4 20             	add    esp,0x20
c0014121:	99                   	cdq    
c0014122:	83 c4 10             	add    esp,0x10
c0014125:	5b                   	pop    ebx
c0014126:	5e                   	pop    esi
c0014127:	5f                   	pop    edi
c0014128:	c3                   	ret    

c0014129 <SysRegisterSignal(regs*)>:
c0014129:	83 ec 18             	sub    esp,0x18
c001412c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014130:	6a 00                	push   0x0
c0014132:	6a 00                	push   0x0
c0014134:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014137:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001413a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001413f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014142:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014148:	e8 b8 d8 ff ff       	call   c0011a05 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001414d:	83 c4 2c             	add    esp,0x2c
c0014150:	99                   	cdq    
c0014151:	c3                   	ret    

c0014152 <SysRegistryGetTypeFromPath(regs*)>:
c0014152:	57                   	push   edi
c0014153:	56                   	push   esi
c0014154:	53                   	push   ebx
c0014155:	81 ec 38 01 00 00    	sub    esp,0x138
c001415b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014162:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014165:	68 1f 26 02 c0       	push   0xc002261f
c001416a:	e8 9b 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001416f:	5a                   	pop    edx
c0014170:	59                   	pop    ecx
c0014171:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014174:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014177:	e8 34 f6 ff ff       	call   c00137b0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001417c:	5f                   	pop    edi
c001417d:	5a                   	pop    edx
c001417e:	89 c6                	mov    esi,eax
c0014180:	50                   	push   eax
c0014181:	68 3f 26 02 c0       	push   0xc002263f
c0014186:	e8 7f 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001418b:	83 c4 10             	add    esp,0x10
c001418e:	85 f6                	test   esi,esi
c0014190:	74 28                	je     c00141ba <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014192:	50                   	push   eax
c0014193:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014197:	57                   	push   edi
c0014198:	56                   	push   esi
c0014199:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001419c:	e8 f4 f1 ff ff       	call   c0013395 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00141a1:	83 c4 0c             	add    esp,0xc
c00141a4:	57                   	push   edi
c00141a5:	50                   	push   eax
c00141a6:	89 c3                	mov    ebx,eax
c00141a8:	68 47 26 02 c0       	push   0xc0022647
c00141ad:	e8 58 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141b2:	89 d8                	mov    eax,ebx
c00141b4:	83 c4 10             	add    esp,0x10
c00141b7:	99                   	cdq    
c00141b8:	eb 05                	jmp    c00141bf <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00141ba:	83 c8 ff             	or     eax,0xffffffff
c00141bd:	89 c2                	mov    edx,eax
c00141bf:	81 c4 30 01 00 00    	add    esp,0x130
c00141c5:	5b                   	pop    ebx
c00141c6:	5e                   	pop    esi
c00141c7:	5f                   	pop    edi
c00141c8:	c3                   	ret    

c00141c9 <SysRegistryReadExtent(regs*)>:
c00141c9:	83 ec 1c             	sub    esp,0x1c
c00141cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141d0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00141d3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00141d6:	85 c0                	test   eax,eax
c00141d8:	79 1f                	jns    c00141f9 <SysRegistryReadExtent(regs*)+0x30>
c00141da:	52                   	push   edx
c00141db:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00141e0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141e4:	52                   	push   edx
c00141e5:	50                   	push   eax
c00141e6:	51                   	push   ecx
c00141e7:	e8 9b f0 ff ff       	call   c0013287 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00141ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	eb 14                	jmp    c001420d <SysRegistryReadExtent(regs*)+0x44>
c00141f9:	83 ec 04             	sub    esp,0x4
c00141fc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00141ff:	50                   	push   eax
c0014200:	51                   	push   ecx
c0014201:	e8 1f eb ff ff       	call   c0012d25 <CmGetString(Reghive_Tag*, int, char*)>
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	31 c0                	xor    eax,eax
c001420b:	31 d2                	xor    edx,edx
c001420d:	83 c4 1c             	add    esp,0x1c
c0014210:	c3                   	ret    

c0014211 <SysRegistryPathToExtentLookup(regs*)>:
c0014211:	53                   	push   ebx
c0014212:	83 ec 10             	sub    esp,0x10
c0014215:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014219:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001421c:	68 5d 26 02 c0       	push   0xc002265d
c0014221:	e8 e4 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014226:	58                   	pop    eax
c0014227:	5a                   	pop    edx
c0014228:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001422b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001422e:	e8 7d f5 ff ff       	call   c00137b0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014233:	83 c4 18             	add    esp,0x18
c0014236:	5b                   	pop    ebx
c0014237:	99                   	cdq    
c0014238:	c3                   	ret    

c0014239 <SysRegistryEnterDirectory(regs*)>:
c0014239:	53                   	push   ebx
c001423a:	83 ec 10             	sub    esp,0x10
c001423d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014241:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014244:	68 80 26 02 c0       	push   0xc0022680
c0014249:	e8 bc 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001424e:	58                   	pop    eax
c001424f:	5a                   	pop    edx
c0014250:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014253:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014256:	e8 41 eb ff ff       	call   c0012d9c <CmEnterDirectory(Reghive_Tag*, int)>
c001425b:	83 c4 18             	add    esp,0x18
c001425e:	5b                   	pop    ebx
c001425f:	99                   	cdq    
c0014260:	c3                   	ret    

c0014261 <SysRegistryGetNext(regs*)>:
c0014261:	53                   	push   ebx
c0014262:	83 ec 10             	sub    esp,0x10
c0014265:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014269:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001426c:	68 9e 26 02 c0       	push   0xc002269e
c0014271:	e8 94 66 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014276:	58                   	pop    eax
c0014277:	5a                   	pop    edx
c0014278:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001427b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001427e:	e8 58 eb ff ff       	call   c0012ddb <CmGetNext(Reghive_Tag*, int)>
c0014283:	83 c4 18             	add    esp,0x18
c0014286:	5b                   	pop    ebx
c0014287:	99                   	cdq    
c0014288:	c3                   	ret    

c0014289 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014289:	57                   	push   edi
c001428a:	56                   	push   esi
c001428b:	53                   	push   ebx
c001428c:	81 ec 34 01 00 00    	sub    esp,0x134
c0014292:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014299:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001429d:	57                   	push   edi
c001429e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142a1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142a4:	e8 ec f0 ff ff       	call   c0013395 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142a9:	89 c3                	mov    ebx,eax
c00142ab:	58                   	pop    eax
c00142ac:	5a                   	pop    edx
c00142ad:	57                   	push   edi
c00142ae:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00142b1:	e8 9a c3 fe ff       	call   c0000650 <strcpy>
c00142b6:	81 c4 40 01 00 00    	add    esp,0x140
c00142bc:	89 d8                	mov    eax,ebx
c00142be:	5b                   	pop    ebx
c00142bf:	99                   	cdq    
c00142c0:	5e                   	pop    esi
c00142c1:	5f                   	pop    edi
c00142c2:	c3                   	ret    

c00142c3 <SysRegistryOpen(regs*)>:
c00142c3:	83 ec 18             	sub    esp,0x18
c00142c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142ca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00142cd:	e8 e3 e8 ff ff       	call   c0012bb5 <CmOpen(char const*)>
c00142d2:	83 c4 1c             	add    esp,0x1c
c00142d5:	99                   	cdq    
c00142d6:	c3                   	ret    

c00142d7 <SysRegistryClose(regs*)>:
c00142d7:	83 ec 18             	sub    esp,0x18
c00142da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142de:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142e1:	e8 ed e9 ff ff       	call   c0012cd3 <CmClose(Reghive_Tag*)>
c00142e6:	31 c0                	xor    eax,eax
c00142e8:	31 d2                	xor    edx,edx
c00142ea:	83 c4 1c             	add    esp,0x1c
c00142ed:	c3                   	ret    

c00142ee <SysSbrk(regs*)>:
c00142ee:	56                   	push   esi
c00142ef:	53                   	push   ebx
c00142f0:	50                   	push   eax
c00142f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142fd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014300:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014306:	85 db                	test   ebx,ebx
c0014308:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001430b:	74 02                	je     c001430f <SysSbrk(regs*)+0x21>
c001430d:	79 06                	jns    c0014315 <SysSbrk(regs*)+0x27>
c001430f:	89 f0                	mov    eax,esi
c0014311:	31 d2                	xor    edx,edx
c0014313:	eb 2a                	jmp    c001433f <SysSbrk(regs*)+0x51>
c0014315:	83 c8 ff             	or     eax,0xffffffff
c0014318:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001431e:	89 c2                	mov    edx,eax
c0014320:	77 1d                	ja     c001433f <SysSbrk(regs*)+0x51>
c0014322:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014328:	50                   	push   eax
c0014329:	68 07 0c 00 00       	push   0xc07
c001432e:	c1 ea 0c             	shr    edx,0xc
c0014331:	52                   	push   edx
c0014332:	51                   	push   ecx
c0014333:	e8 ce 5a ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0014338:	89 f0                	mov    eax,esi
c001433a:	31 d2                	xor    edx,edx
c001433c:	83 c4 10             	add    esp,0x10
c001433f:	59                   	pop    ecx
c0014340:	5b                   	pop    ebx
c0014341:	5e                   	pop    esi
c0014342:	c3                   	ret    

c0014343 <SysSetCwd(regs*)>:
c0014343:	83 ec 14             	sub    esp,0x14
c0014346:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001434a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001434d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014352:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014355:	e8 7f 7b ff ff       	call   c000bed9 <Fs::setcwd(Process*, char*)>
c001435a:	83 c4 1c             	add    esp,0x1c
c001435d:	99                   	cdq    
c001435e:	c3                   	ret    

c001435f <SysSetTime(regs*)>:
c001435f:	55                   	push   ebp
c0014360:	31 c9                	xor    ecx,ecx
c0014362:	57                   	push   edi
c0014363:	bd 0c 00 00 00       	mov    ebp,0xc
c0014368:	56                   	push   esi
c0014369:	53                   	push   ebx
c001436a:	31 db                	xor    ebx,ebx
c001436c:	83 ec 10             	sub    esp,0x10
c001436f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014373:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014376:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014379:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001437c:	89 c2                	mov    edx,eax
c001437e:	c1 e8 05             	shr    eax,0x5
c0014381:	83 e2 1f             	and    edx,0x1f
c0014384:	42                   	inc    edx
c0014385:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001438b:	c1 e7 10             	shl    edi,0x10
c001438e:	88 d1                	mov    cl,dl
c0014390:	31 d2                	xor    edx,edx
c0014392:	f7 f5                	div    ebp
c0014394:	89 dd                	mov    ebp,ebx
c0014396:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001439c:	88 d5                	mov    ch,dl
c001439e:	31 d2                	xor    edx,edx
c00143a0:	0f b7 c1             	movzx  eax,cx
c00143a3:	09 f8                	or     eax,edi
c00143a5:	bf 3c 00 00 00       	mov    edi,0x3c
c00143aa:	89 c1                	mov    ecx,eax
c00143ac:	89 f0                	mov    eax,esi
c00143ae:	f7 f7                	div    edi
c00143b0:	c1 e2 10             	shl    edx,0x10
c00143b3:	09 d5                	or     ebp,edx
c00143b5:	31 d2                	xor    edx,edx
c00143b7:	f7 f7                	div    edi
c00143b9:	89 eb                	mov    ebx,ebp
c00143bb:	bf 10 0e 00 00       	mov    edi,0xe10
c00143c0:	89 f0                	mov    eax,esi
c00143c2:	88 d7                	mov    bh,dl
c00143c4:	31 d2                	xor    edx,edx
c00143c6:	f7 f7                	div    edi
c00143c8:	bf 18 00 00 00       	mov    edi,0x18
c00143cd:	31 d2                	xor    edx,edx
c00143cf:	f7 f7                	div    edi
c00143d1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00143d6:	88 d3                	mov    bl,dl
c00143d8:	53                   	push   ebx
c00143d9:	51                   	push   ecx
c00143da:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00143e0:	e8 07 83 ff ff       	call   c000c6ec <Clock::setTimeInDatetimeLocal(datetime_t)>
c00143e5:	83 c4 1c             	add    esp,0x1c
c00143e8:	31 d2                	xor    edx,edx
c00143ea:	5b                   	pop    ebx
c00143eb:	5e                   	pop    esi
c00143ec:	83 f0 01             	xor    eax,0x1
c00143ef:	5f                   	pop    edi
c00143f0:	0f b6 c0             	movzx  eax,al
c00143f3:	5d                   	pop    ebp
c00143f4:	c3                   	ret    

c00143f5 <SysSymlink(regs*)>:
c00143f5:	53                   	push   ebx
c00143f6:	83 c8 ff             	or     eax,0xffffffff
c00143f9:	83 ec 08             	sub    esp,0x8
c00143fc:	89 c2                	mov    edx,eax
c00143fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014402:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014405:	85 c9                	test   ecx,ecx
c0014407:	74 14                	je     c001441d <SysSymlink(regs*)+0x28>
c0014409:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001440c:	85 db                	test   ebx,ebx
c001440e:	74 0d                	je     c001441d <SysSymlink(regs*)+0x28>
c0014410:	50                   	push   eax
c0014411:	50                   	push   eax
c0014412:	53                   	push   ebx
c0014413:	51                   	push   ecx
c0014414:	e8 00 6f ff ff       	call   c000b319 <KeCreateSymlink(char const*, char const*)>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	99                   	cdq    
c001441d:	83 c4 08             	add    esp,0x8
c0014420:	5b                   	pop    ebx
c0014421:	c3                   	ret    

c0014422 <SysTimezone(regs*)>:
c0014422:	53                   	push   ebx
c0014423:	83 ec 08             	sub    esp,0x8
c0014426:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001442a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001442e:	75 17                	jne    c0014447 <SysTimezone(regs*)+0x25>
c0014430:	83 ec 0c             	sub    esp,0xc
c0014433:	68 b5 26 02 c0       	push   0xc00226b5
c0014438:	e8 cd 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001443d:	83 c8 ff             	or     eax,0xffffffff
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	89 c2                	mov    edx,eax
c0014445:	eb 20                	jmp    c0014467 <SysTimezone(regs*)+0x45>
c0014447:	83 ec 0c             	sub    esp,0xc
c001444a:	68 ca 26 02 c0       	push   0xc00226ca
c001444f:	e8 b6 64 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014454:	58                   	pop    eax
c0014455:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014458:	e8 f3 7f ff ff       	call   c000c450 <User::loadClockSettings(int)>
c001445d:	83 c4 10             	add    esp,0x10
c0014460:	b8 01 00 00 00       	mov    eax,0x1
c0014465:	31 d2                	xor    edx,edx
c0014467:	83 c4 08             	add    esp,0x8
c001446a:	5b                   	pop    ebx
c001446b:	c3                   	ret    

c001446c <SysTruncate(regs*)>:
c001446c:	55                   	push   ebp
c001446d:	57                   	push   edi
c001446e:	31 ff                	xor    edi,edi
c0014470:	56                   	push   esi
c0014471:	53                   	push   ebx
c0014472:	83 ec 0c             	sub    esp,0xc
c0014475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014479:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001447c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014480:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014483:	89 ce                	mov    esi,ecx
c0014485:	0f 84 9a 00 00 00    	je     c0014525 <SysTruncate(regs*)+0xb9>
c001448b:	83 ec 0c             	sub    esp,0xc
c001448e:	68 14 01 00 00       	push   0x114
c0014493:	e8 3b 36 ff ff       	call   c0007ad3 <malloc>
c0014498:	83 c4 0c             	add    esp,0xc
c001449b:	89 c3                	mov    ebx,eax
c001449d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144a2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144a5:	55                   	push   ebp
c00144a6:	53                   	push   ebx
c00144a7:	e8 ac 76 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	31 d2                	xor    edx,edx
c00144b1:	85 db                	test   ebx,ebx
c00144b3:	b8 03 00 00 00       	mov    eax,0x3
c00144b8:	0f 84 a2 00 00 00    	je     c0014560 <SysTruncate(regs*)+0xf4>
c00144be:	51                   	push   ecx
c00144bf:	51                   	push   ecx
c00144c0:	6a 02                	push   0x2
c00144c2:	53                   	push   ebx
c00144c3:	e8 ae 76 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c00144c8:	83 c4 10             	add    esp,0x10
c00144cb:	85 c0                	test   eax,eax
c00144cd:	74 13                	je     c00144e2 <SysTruncate(regs*)+0x76>
c00144cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d1:	83 ec 0c             	sub    esp,0xc
c00144d4:	53                   	push   ebx
c00144d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144d8:	83 c4 10             	add    esp,0x10
c00144db:	b8 04 00 00 00       	mov    eax,0x4
c00144e0:	eb 7c                	jmp    c001455e <SysTruncate(regs*)+0xf2>
c00144e2:	52                   	push   edx
c00144e3:	57                   	push   edi
c00144e4:	56                   	push   esi
c00144e5:	53                   	push   ebx
c00144e6:	e8 9f 77 ff ff       	call   c000bc8a <File::truncate(unsigned long long)>
c00144eb:	83 c4 10             	add    esp,0x10
c00144ee:	85 c0                	test   eax,eax
c00144f0:	74 1b                	je     c001450d <SysTruncate(regs*)+0xa1>
c00144f2:	83 ec 0c             	sub    esp,0xc
c00144f5:	53                   	push   ebx
c00144f6:	e8 d9 76 ff ff       	call   c000bbd4 <File::close()>
c00144fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	b8 05 00 00 00       	mov    eax,0x5
c001450b:	eb 51                	jmp    c001455e <SysTruncate(regs*)+0xf2>
c001450d:	83 ec 0c             	sub    esp,0xc
c0014510:	53                   	push   ebx
c0014511:	e8 be 76 ff ff       	call   c000bbd4 <File::close()>
c0014516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014518:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001451b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001451e:	83 c4 10             	add    esp,0x10
c0014521:	31 c0                	xor    eax,eax
c0014523:	eb 39                	jmp    c001455e <SysTruncate(regs*)+0xf2>
c0014525:	31 d2                	xor    edx,edx
c0014527:	83 fd 02             	cmp    ebp,0x2
c001452a:	b8 01 00 00 00       	mov    eax,0x1
c001452f:	7e 2f                	jle    c0014560 <SysTruncate(regs*)+0xf4>
c0014531:	83 ec 0c             	sub    esp,0xc
c0014534:	51                   	push   ecx
c0014535:	e8 61 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001453a:	83 c4 10             	add    esp,0x10
c001453d:	31 d2                	xor    edx,edx
c001453f:	89 c1                	mov    ecx,eax
c0014541:	b8 02 00 00 00       	mov    eax,0x2
c0014546:	85 c9                	test   ecx,ecx
c0014548:	74 16                	je     c0014560 <SysTruncate(regs*)+0xf4>
c001454a:	50                   	push   eax
c001454b:	57                   	push   edi
c001454c:	56                   	push   esi
c001454d:	51                   	push   ecx
c001454e:	e8 37 77 ff ff       	call   c000bc8a <File::truncate(unsigned long long)>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	85 c0                	test   eax,eax
c0014558:	0f 95 c0             	setne  al
c001455b:	0f b6 c0             	movzx  eax,al
c001455e:	31 d2                	xor    edx,edx
c0014560:	83 c4 0c             	add    esp,0xc
c0014563:	5b                   	pop    ebx
c0014564:	5e                   	pop    esi
c0014565:	5f                   	pop    edi
c0014566:	5d                   	pop    ebp
c0014567:	c3                   	ret    

c0014568 <SysWrite(regs*)>:
c0014568:	57                   	push   edi
c0014569:	56                   	push   esi
c001456a:	53                   	push   ebx
c001456b:	83 ec 10             	sub    esp,0x10
c001456e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014572:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014575:	83 f8 02             	cmp    eax,0x2
c0014578:	77 10                	ja     c001458a <SysWrite(regs*)+0x22>
c001457a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001457f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014582:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014588:	eb 0e                	jmp    c0014598 <SysWrite(regs*)+0x30>
c001458a:	83 ec 0c             	sub    esp,0xc
c001458d:	50                   	push   eax
c001458e:	e8 08 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	89 c1                	mov    ecx,eax
c0014598:	83 c8 ff             	or     eax,0xffffffff
c001459b:	85 c9                	test   ecx,ecx
c001459d:	89 c2                	mov    edx,eax
c001459f:	74 28                	je     c00145c9 <SysWrite(regs*)+0x61>
c00145a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145a9:	83 ec 0c             	sub    esp,0xc
c00145ac:	31 ff                	xor    edi,edi
c00145ae:	8d 54 24 18          	lea    edx,[esp+0x18]
c00145b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00145b4:	52                   	push   edx
c00145b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145b8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00145bb:	57                   	push   edi
c00145bc:	56                   	push   esi
c00145bd:	51                   	push   ecx
c00145be:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00145c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00145c5:	83 c4 20             	add    esp,0x20
c00145c8:	99                   	cdq    
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	5b                   	pop    ebx
c00145cd:	5e                   	pop    esi
c00145ce:	5f                   	pop    edi
c00145cf:	c3                   	ret    

c00145d0 <SysWsbe(regs*)>:
c00145d0:	57                   	push   edi
c00145d1:	b9 0b 00 00 00       	mov    ecx,0xb
c00145d6:	56                   	push   esi
c00145d7:	be 09 27 02 c0       	mov    esi,0xc0022709
c00145dc:	53                   	push   ebx
c00145dd:	83 ec 30             	sub    esp,0x30
c00145e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00145e4:	fc                   	cld    
c00145e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00145e7:	83 ec 0c             	sub    esp,0xc
c00145ea:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00145ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145f6:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00145fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00145fe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014601:	57                   	push   edi
c0014602:	e8 79 bf fe ff       	call   c0000580 <strlen>
c0014607:	5a                   	pop    edx
c0014608:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001460c:	52                   	push   edx
c001460d:	31 d2                	xor    edx,edx
c001460f:	57                   	push   edi
c0014610:	52                   	push   edx
c0014611:	50                   	push   eax
c0014612:	56                   	push   esi
c0014613:	ff d3                	call   ebx
c0014615:	83 c4 14             	add    esp,0x14
c0014618:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001461c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001461f:	e8 a8 23 00 00       	call   c00169cc <terminateTask(int)>
c0014624:	83 c4 40             	add    esp,0x40
c0014627:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001462c:	5b                   	pop    ebx
c001462d:	31 d2                	xor    edx,edx
c001462f:	5e                   	pop    esi
c0014630:	5f                   	pop    edi
c0014631:	c3                   	ret    

c0014632 <SysYield(regs*)>:
c0014632:	83 ec 0c             	sub    esp,0xc
c0014635:	fa                   	cli    
c0014636:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001463c:	e8 0b 1a 00 00       	call   c001604c <schedule()>
c0014641:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014646:	48                   	dec    eax
c0014647:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001464c:	75 01                	jne    c001464f <SysYield(regs*)+0x1d>
c001464e:	fb                   	sti    
c001464f:	31 c0                	xor    eax,eax
c0014651:	31 d2                	xor    edx,edx
c0014653:	83 c4 0c             	add    esp,0xc
c0014656:	c3                   	ret    

c0014657 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014657:	55                   	push   ebp
c0014658:	57                   	push   edi
c0014659:	56                   	push   esi
c001465a:	53                   	push   ebx
c001465b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014661:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001466c:	74 3b                	je     c00146a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001466e:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014676:	74 31                	je     c00146a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014678:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014680:	75 27                	jne    c00146a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014682:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014689:	05 00 10 00 00       	add    eax,0x1000
c001468e:	89 c2                	mov    edx,eax
c0014690:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014695:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001469c:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00146a2:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00146a9:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00146b0:	83 ec 0c             	sub    esp,0xc
c00146b3:	6a 01                	push   0x1
c00146b5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00146bb:	e8 35 4f ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c00146c0:	83 c4 10             	add    esp,0x10
c00146c3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00146c9:	89 c3                	mov    ebx,eax
c00146cb:	0f 86 26 01 00 00    	jbe    c00147f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00146d1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146d9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00146e0:	c1 ee 0c             	shr    esi,0xc
c00146e3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00146e7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00146ee:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00146f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146f9:	29 ef                	sub    edi,ebp
c00146fb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00146ff:	0f 83 f9 00 00 00    	jae    c00147fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014705:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001470b:	b8 00 10 00 00       	mov    eax,0x1000
c0014710:	0f 47 f8             	cmova  edi,eax
c0014713:	83 ec 0c             	sub    esp,0xc
c0014716:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001471d:	31 d2                	xor    edx,edx
c001471f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014721:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014725:	50                   	push   eax
c0014726:	8d 74 24 30          	lea    esi,[esp+0x30]
c001472a:	56                   	push   esi
c001472b:	52                   	push   edx
c001472c:	57                   	push   edi
c001472d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014734:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014737:	83 c4 20             	add    esp,0x20
c001473a:	85 c0                	test   eax,eax
c001473c:	75 06                	jne    c0014744 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001473e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014742:	74 13                	je     c0014757 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	53                   	push   ebx
c0014748:	e8 bc 51 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	31 c0                	xor    eax,eax
c0014752:	e9 7c 01 00 00       	jmp    c00148d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014757:	fa                   	cli    
c0014758:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001475e:	e8 7f 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014763:	6a 07                	push   0x7
c0014765:	53                   	push   ebx
c0014766:	50                   	push   eax
c0014767:	89 c7                	mov    edi,eax
c0014769:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001476e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014771:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014777:	e8 82 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001477c:	83 c4 0c             	add    esp,0xc
c001477f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014786:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001478c:	6a 00                	push   0x0
c001478e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014793:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014796:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001479c:	e8 c3 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00147a1:	58                   	pop    eax
c00147a2:	5a                   	pop    edx
c00147a3:	68 07 0c 00 00       	push   0xc07
c00147a8:	55                   	push   ebp
c00147a9:	57                   	push   edi
c00147aa:	89 df                	mov    edi,ebx
c00147ac:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00147b3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147b9:	6a 00                	push   0x0
c00147bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147c3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147c9:	e8 94 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00147ce:	b9 00 10 00 00       	mov    ecx,0x1000
c00147d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147d5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00147da:	83 c4 20             	add    esp,0x20
c00147dd:	48                   	dec    eax
c00147de:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00147e3:	85 c0                	test   eax,eax
c00147e5:	75 01                	jne    c00147e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00147e7:	fb                   	sti    
c00147e8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147ec:	81 c5 00 10 00 00    	add    ebp,0x1000
c00147f2:	e9 f0 fe ff ff       	jmp    c00146e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00147f7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00147fe:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014805:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001480b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014811:	0f 86 ae 00 00 00    	jbe    c00148c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014817:	fa                   	cli    
c0014818:	51                   	push   ecx
c0014819:	31 ff                	xor    edi,edi
c001481b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014822:	c1 ee 0c             	shr    esi,0xc
c0014825:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001482b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014831:	6a 00                	push   0x0
c0014833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014838:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001483b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014841:	e8 1e 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014846:	83 c4 10             	add    esp,0x10
c0014849:	e8 94 35 ff ff       	call   c0007de2 <Phys::allocatePage()>
c001484e:	47                   	inc    edi
c001484f:	6a 07                	push   0x7
c0014851:	53                   	push   ebx
c0014852:	50                   	push   eax
c0014853:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014857:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001485d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014860:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014866:	e8 93 54 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001486b:	58                   	pop    eax
c001486c:	5a                   	pop    edx
c001486d:	68 07 0c 00 00       	push   0xc07
c0014872:	55                   	push   ebp
c0014873:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001487d:	50                   	push   eax
c001487e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014885:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001488b:	6a 00                	push   0x0
c001488d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014892:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014895:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001489b:	e8 c2 56 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148a0:	83 c4 1c             	add    esp,0x1c
c00148a3:	68 00 10 00 00       	push   0x1000
c00148a8:	6a 00                	push   0x0
c00148aa:	53                   	push   ebx
c00148ab:	e8 40 bc fe ff       	call   c00004f0 <memset>
c00148b0:	83 c4 10             	add    esp,0x10
c00148b3:	39 fe                	cmp    esi,edi
c00148b5:	77 92                	ja     c0014849 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00148b7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148bc:	48                   	dec    eax
c00148bd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148c2:	75 01                	jne    c00148c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00148c4:	fb                   	sti    
c00148c5:	83 ec 0c             	sub    esp,0xc
c00148c8:	53                   	push   ebx
c00148c9:	e8 3b 50 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00148ce:	83 c4 10             	add    esp,0x10
c00148d1:	b0 01                	mov    al,0x1
c00148d3:	81 c4 2c 10 00 00    	add    esp,0x102c
c00148d9:	5b                   	pop    ebx
c00148da:	5e                   	pop    esi
c00148db:	5f                   	pop    edi
c00148dc:	5d                   	pop    ebp
c00148dd:	c3                   	ret    

c00148de <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00148de:	55                   	push   ebp
c00148df:	57                   	push   edi
c00148e0:	56                   	push   esi
c00148e1:	53                   	push   ebx
c00148e2:	83 ec 48             	sub    esp,0x48
c00148e5:	68 14 01 00 00       	push   0x114
c00148ea:	e8 e4 31 ff ff       	call   c0007ad3 <malloc>
c00148ef:	83 c4 0c             	add    esp,0xc
c00148f2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00148f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00148fa:	89 c7                	mov    edi,eax
c00148fc:	50                   	push   eax
c00148fd:	e8 56 72 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014902:	58                   	pop    eax
c0014903:	5a                   	pop    edx
c0014904:	6a 01                	push   0x1
c0014906:	57                   	push   edi
c0014907:	e8 6a 72 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001490c:	83 c4 10             	add    esp,0x10
c001490f:	85 c0                	test   eax,eax
c0014911:	0f 85 4c 01 00 00    	jne    c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014917:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001491f:	83 ec 0c             	sub    esp,0xc
c0014922:	6a 34                	push   0x34
c0014924:	e8 aa 31 ff ff       	call   c0007ad3 <malloc>
c0014929:	89 c3                	mov    ebx,eax
c001492b:	58                   	pop    eax
c001492c:	8b 07                	mov    eax,DWORD PTR [edi]
c001492e:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014932:	56                   	push   esi
c0014933:	53                   	push   ebx
c0014934:	6a 00                	push   0x0
c0014936:	6a 34                	push   0x34
c0014938:	57                   	push   edi
c0014939:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001493c:	83 c4 20             	add    esp,0x20
c001493f:	85 c0                	test   eax,eax
c0014941:	0f 85 1c 01 00 00    	jne    c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014947:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001494d:	0f 85 10 01 00 00    	jne    c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014953:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014956:	85 c0                	test   eax,eax
c0014958:	0f 84 05 01 00 00    	je     c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001495e:	31 d2                	xor    edx,edx
c0014960:	55                   	push   ebp
c0014961:	52                   	push   edx
c0014962:	50                   	push   eax
c0014963:	57                   	push   edi
c0014964:	e8 cb 72 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	85 c0                	test   eax,eax
c001496e:	0f 85 ef 00 00 00    	jne    c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014974:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014977:	83 ec 0c             	sub    esp,0xc
c001497a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001497e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014982:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014986:	0f af c2             	imul   eax,edx
c0014989:	50                   	push   eax
c001498a:	e8 44 31 ff ff       	call   c0007ad3 <malloc>
c001498f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014991:	89 34 24             	mov    DWORD PTR [esp],esi
c0014994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014998:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001499c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149a0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149a4:	0f af c2             	imul   eax,edx
c00149a7:	99                   	cdq    
c00149a8:	52                   	push   edx
c00149a9:	50                   	push   eax
c00149aa:	57                   	push   edi
c00149ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00149b1:	83 c4 20             	add    esp,0x20
c00149b4:	85 c0                	test   eax,eax
c00149b6:	0f 84 a7 00 00 00    	je     c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149bc:	31 d2                	xor    edx,edx
c00149be:	51                   	push   ecx
c00149bf:	52                   	push   edx
c00149c0:	50                   	push   eax
c00149c1:	57                   	push   edi
c00149c2:	e8 6d 72 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	85 c0                	test   eax,eax
c00149cc:	0f 85 91 00 00 00    	jne    c0014a63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00149d2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149d6:	83 ec 0c             	sub    esp,0xc
c00149d9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149dd:	0f af c2             	imul   eax,edx
c00149e0:	50                   	push   eax
c00149e1:	e8 ed 30 ff ff       	call   c0007ad3 <malloc>
c00149e6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00149e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00149eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149f3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149f7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149fb:	0f af c2             	imul   eax,edx
c00149fe:	99                   	cdq    
c00149ff:	52                   	push   edx
c0014a00:	50                   	push   eax
c0014a01:	57                   	push   edi
c0014a02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a05:	83 c4 20             	add    esp,0x20
c0014a08:	31 c9                	xor    ecx,ecx
c0014a0a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a12:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014a16:	0f b7 e9             	movzx  ebp,cx
c0014a19:	0f 83 86 00 00 00    	jae    c0014aa5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014a1f:	c1 e5 05             	shl    ebp,0x5
c0014a22:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014a26:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014a2a:	75 73                	jne    c0014a9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014a2c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a33:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014a36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a3a:	52                   	push   edx
c0014a3b:	31 d2                	xor    edx,edx
c0014a3d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a40:	52                   	push   edx
c0014a41:	50                   	push   eax
c0014a42:	57                   	push   edi
c0014a43:	e8 ec 71 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014a48:	83 c4 10             	add    esp,0x10
c0014a4b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a4f:	85 c0                	test   eax,eax
c0014a51:	74 17                	je     c0014a6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014a53:	83 ec 0c             	sub    esp,0xc
c0014a56:	68 35 27 02 c0       	push   0xc0022735
c0014a5b:	e8 aa 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014a60:	83 c4 10             	add    esp,0x10
c0014a63:	31 c0                	xor    eax,eax
c0014a65:	e9 8b 00 00 00       	jmp    c0014af5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014a6a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014a6e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014a71:	83 ec 0c             	sub    esp,0xc
c0014a74:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014a77:	50                   	push   eax
c0014a78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a7c:	56                   	push   esi
c0014a7d:	57                   	push   edi
c0014a7e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a82:	e8 d0 fb ff ff       	call   c0014657 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a87:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014a8b:	83 c4 20             	add    esp,0x20
c0014a8e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014a92:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a96:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014a9b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a9f:	41                   	inc    ecx
c0014aa0:	e9 6d ff ff ff       	jmp    c0014a12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014aa5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014aa9:	83 ec 0c             	sub    esp,0xc
c0014aac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014ab0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ab4:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014aba:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014ac0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014ac5:	05 00 10 00 00       	add    eax,0x1000
c0014aca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014acd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ad1:	e8 0d 30 ff ff       	call   c0007ae3 <free>
c0014ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ad9:	e8 05 30 ff ff       	call   c0007ae3 <free>
c0014ade:	58                   	pop    eax
c0014adf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ae3:	e8 fb 2f ff ff       	call   c0007ae3 <free>
c0014ae8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014aeb:	e8 e4 70 ff ff       	call   c000bbd4 <File::close()>
c0014af0:	83 c4 10             	add    esp,0x10
c0014af3:	b0 01                	mov    al,0x1
c0014af5:	83 c4 3c             	add    esp,0x3c
c0014af8:	5b                   	pop    ebx
c0014af9:	5e                   	pop    esi
c0014afa:	5f                   	pop    edi
c0014afb:	5d                   	pop    ebp
c0014afc:	c3                   	ret    

c0014afd <Thr::runtimeReferenceHelper()>:
c0014afd:	83 ec 18             	sub    esp,0x18
c0014b00:	68 3d 27 02 c0       	push   0xc002273d
c0014b05:	e8 00 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014b0a:	fa                   	cli    
c0014b0b:	83 c4 10             	add    esp,0x10
c0014b0e:	eb fe                	jmp    c0014b0e <Thr::runtimeReferenceHelper()+0x11>

c0014b10 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b10:	57                   	push   edi
c0014b11:	56                   	push   esi
c0014b12:	53                   	push   ebx
c0014b13:	31 db                	xor    ebx,ebx
c0014b15:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b1b:	7e 3c                	jle    c0014b59 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b1d:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014b24:	31 ff                	xor    edi,edi
c0014b26:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b2d:	7e 27                	jle    c0014b56 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b2f:	50                   	push   eax
c0014b30:	50                   	push   eax
c0014b31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b35:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b37:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b3e:	50                   	push   eax
c0014b3f:	e8 3c bc fe ff       	call   c0000780 <strcmp>
c0014b44:	83 c4 10             	add    esp,0x10
c0014b47:	85 c0                	test   eax,eax
c0014b49:	75 05                	jne    c0014b50 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b4e:	eb 0b                	jmp    c0014b5b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b50:	83 c6 10             	add    esi,0x10
c0014b53:	47                   	inc    edi
c0014b54:	eb d0                	jmp    c0014b26 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b56:	43                   	inc    ebx
c0014b57:	eb bc                	jmp    c0014b15 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b59:	31 c0                	xor    eax,eax
c0014b5b:	5b                   	pop    ebx
c0014b5c:	5e                   	pop    esi
c0014b5d:	5f                   	pop    edi
c0014b5e:	c3                   	ret    

c0014b5f <Thr::loadKernelSymbolTable(char const*)>:
c0014b5f:	55                   	push   ebp
c0014b60:	57                   	push   edi
c0014b61:	56                   	push   esi
c0014b62:	53                   	push   ebx
c0014b63:	83 ec 68             	sub    esp,0x68
c0014b66:	68 14 01 00 00       	push   0x114
c0014b6b:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014b71:	e8 5d 2f ff ff       	call   c0007ad3 <malloc>
c0014b76:	83 c4 0c             	add    esp,0xc
c0014b79:	56                   	push   esi
c0014b7a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b7e:	89 c3                	mov    ebx,eax
c0014b80:	50                   	push   eax
c0014b81:	e8 d2 6f ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014b86:	5e                   	pop    esi
c0014b87:	5f                   	pop    edi
c0014b88:	6a 01                	push   0x1
c0014b8a:	53                   	push   ebx
c0014b8b:	e8 e6 6f ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	85 c0                	test   eax,eax
c0014b95:	74 0a                	je     c0014ba1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b97:	83 ec 0c             	sub    esp,0xc
c0014b9a:	68 5f 27 02 c0       	push   0xc002275f
c0014b9f:	eb 34                	jmp    c0014bd5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014ba1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014ba9:	83 ec 0c             	sub    esp,0xc
c0014bac:	6a 34                	push   0x34
c0014bae:	e8 20 2f ff ff       	call   c0007ad3 <malloc>
c0014bb3:	59                   	pop    ecx
c0014bb4:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014bb8:	89 c7                	mov    edi,eax
c0014bba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bbc:	56                   	push   esi
c0014bbd:	57                   	push   edi
c0014bbe:	6a 00                	push   0x0
c0014bc0:	6a 34                	push   0x34
c0014bc2:	53                   	push   ebx
c0014bc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014bc6:	83 c4 20             	add    esp,0x20
c0014bc9:	85 c0                	test   eax,eax
c0014bcb:	74 17                	je     c0014be4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014bcd:	83 ec 0c             	sub    esp,0xc
c0014bd0:	68 76 27 02 c0       	push   0xc0022776
c0014bd5:	e8 c5 c9 ff ff       	call   c001159f <KePanic(char const*)>
c0014bda:	83 c4 10             	add    esp,0x10
c0014bdd:	31 c0                	xor    eax,eax
c0014bdf:	e9 31 02 00 00       	jmp    c0014e15 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014be4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014bea:	75 e1                	jne    c0014bcd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014bef:	85 c0                	test   eax,eax
c0014bf1:	74 da                	je     c0014bcd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bf3:	52                   	push   edx
c0014bf4:	31 d2                	xor    edx,edx
c0014bf6:	52                   	push   edx
c0014bf7:	50                   	push   eax
c0014bf8:	53                   	push   ebx
c0014bf9:	e8 36 70 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014bfe:	83 c4 10             	add    esp,0x10
c0014c01:	85 c0                	test   eax,eax
c0014c03:	75 c8                	jne    c0014bcd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c05:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c09:	83 ec 0c             	sub    esp,0xc
c0014c0c:	31 ed                	xor    ebp,ebp
c0014c0e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c12:	0f af c2             	imul   eax,edx
c0014c15:	50                   	push   eax
c0014c16:	e8 b8 2e ff ff       	call   c0007ad3 <malloc>
c0014c1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c30:	0f af c2             	imul   eax,edx
c0014c33:	99                   	cdq    
c0014c34:	52                   	push   edx
c0014c35:	50                   	push   eax
c0014c36:	53                   	push   ebx
c0014c37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c3a:	83 c4 20             	add    esp,0x20
c0014c3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c5d:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014c61:	0f b7 f5             	movzx  esi,bp
c0014c64:	0f 83 a7 00 00 00    	jae    c0014d11 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c6a:	6b f6 28             	imul   esi,esi,0x28
c0014c6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c71:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c78:	50                   	push   eax
c0014c79:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c81:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c83:	6b c0 28             	imul   eax,eax,0x28
c0014c86:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c8a:	89 d0                	mov    eax,edx
c0014c8c:	31 d2                	xor    edx,edx
c0014c8e:	52                   	push   edx
c0014c8f:	50                   	push   eax
c0014c90:	53                   	push   ebx
c0014c91:	e8 9e 6f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014c96:	83 c4 0c             	add    esp,0xc
c0014c99:	6a 20                	push   0x20
c0014c9b:	6a 00                	push   0x0
c0014c9d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ca1:	52                   	push   edx
c0014ca2:	e8 49 b8 fe ff       	call   c00004f0 <memset>
c0014ca7:	58                   	pop    eax
c0014ca8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014caa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014cae:	51                   	push   ecx
c0014caf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014cb3:	52                   	push   edx
c0014cb4:	6a 00                	push   0x0
c0014cb6:	6a 1f                	push   0x1f
c0014cb8:	53                   	push   ebx
c0014cb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cbc:	83 c4 18             	add    esp,0x18
c0014cbf:	68 8d 27 02 c0       	push   0xc002278d
c0014cc4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cc8:	52                   	push   edx
c0014cc9:	e8 b2 ba fe ff       	call   c0000780 <strcmp>
c0014cce:	83 c4 10             	add    esp,0x10
c0014cd1:	85 c0                	test   eax,eax
c0014cd3:	75 0f                	jne    c0014ce4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014cd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ce0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ce4:	50                   	push   eax
c0014ce5:	50                   	push   eax
c0014ce6:	68 95 27 02 c0       	push   0xc0022795
c0014ceb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014cef:	50                   	push   eax
c0014cf0:	e8 8b ba fe ff       	call   c0000780 <strcmp>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	85 c0                	test   eax,eax
c0014cfa:	75 0f                	jne    c0014d0b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014cfc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d0b:	45                   	inc    ebp
c0014d0c:	e9 4c ff ff ff       	jmp    c0014c5d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d16:	75 10                	jne    c0014d28 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d18:	83 ec 0c             	sub    esp,0xc
c0014d1b:	68 9d 27 02 c0       	push   0xc002279d
c0014d20:	e8 7a c8 ff ff       	call   c001159f <KePanic(char const*)>
c0014d25:	83 c4 10             	add    esp,0x10
c0014d28:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d2d:	75 10                	jne    c0014d3f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d2f:	83 ec 0c             	sub    esp,0xc
c0014d32:	68 9d 27 02 c0       	push   0xc002279d
c0014d37:	e8 63 c8 ff ff       	call   c001159f <KePanic(char const*)>
c0014d3c:	83 c4 10             	add    esp,0x10
c0014d3f:	50                   	push   eax
c0014d40:	31 d2                	xor    edx,edx
c0014d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d46:	52                   	push   edx
c0014d47:	50                   	push   eax
c0014d48:	53                   	push   ebx
c0014d49:	e8 e6 6e ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014d4e:	5a                   	pop    edx
c0014d4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d53:	e8 7b 2d ff ff       	call   c0007ad3 <malloc>
c0014d58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d5c:	31 c9                	xor    ecx,ecx
c0014d5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d64:	5e                   	pop    esi
c0014d65:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d69:	55                   	push   ebp
c0014d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d6e:	51                   	push   ecx
c0014d6f:	52                   	push   edx
c0014d70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d74:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014d78:	53                   	push   ebx
c0014d79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d7c:	83 c4 14             	add    esp,0x14
c0014d7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d83:	e8 4b 2d ff ff       	call   c0007ad3 <malloc>
c0014d88:	89 c6                	mov    esi,eax
c0014d8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d8f:	56                   	push   esi
c0014d90:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d98:	51                   	push   ecx
c0014d99:	52                   	push   edx
c0014d9a:	53                   	push   ebx
c0014d9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014da2:	83 c4 1c             	add    esp,0x1c
c0014da5:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014dab:	c1 e8 04             	shr    eax,0x4
c0014dae:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014db5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014db9:	31 d2                	xor    edx,edx
c0014dbb:	52                   	push   edx
c0014dbc:	50                   	push   eax
c0014dbd:	53                   	push   ebx
c0014dbe:	e8 71 6e ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014dc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014dc5:	31 d2                	xor    edx,edx
c0014dc7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014dca:	56                   	push   esi
c0014dcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dcf:	52                   	push   edx
c0014dd0:	50                   	push   eax
c0014dd1:	53                   	push   ebx
c0014dd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dd5:	83 c4 14             	add    esp,0x14
c0014dd8:	53                   	push   ebx
c0014dd9:	e8 f6 6d ff ff       	call   c000bbd4 <File::close()>
c0014dde:	5d                   	pop    ebp
c0014ddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014de3:	e8 fb 2c ff ff       	call   c0007ae3 <free>
c0014de8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014deb:	e8 f3 2c ff ff       	call   c0007ae3 <free>
c0014df0:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014df5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014df9:	83 c4 10             	add    esp,0x10
c0014dfc:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e03:	8d 50 01             	lea    edx,[eax+0x1]
c0014e06:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e0d:	b0 01                	mov    al,0x1
c0014e0f:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e15:	83 c4 5c             	add    esp,0x5c
c0014e18:	5b                   	pop    ebx
c0014e19:	5e                   	pop    esi
c0014e1a:	5f                   	pop    edi
c0014e1b:	5d                   	pop    ebp
c0014e1c:	c3                   	ret    

c0014e1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e1d:	55                   	push   ebp
c0014e1e:	57                   	push   edi
c0014e1f:	56                   	push   esi
c0014e20:	53                   	push   ebx
c0014e21:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e27:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e2e:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014e34:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014e38:	68 14 01 00 00       	push   0x114
c0014e3d:	e8 91 2c ff ff       	call   c0007ad3 <malloc>
c0014e42:	83 c4 0c             	add    esp,0xc
c0014e45:	56                   	push   esi
c0014e46:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e4d:	50                   	push   eax
c0014e4e:	89 c3                	mov    ebx,eax
c0014e50:	e8 03 6d ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014e55:	5f                   	pop    edi
c0014e56:	5d                   	pop    ebp
c0014e57:	6a 01                	push   0x1
c0014e59:	53                   	push   ebx
c0014e5a:	e8 17 6d ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	85 c0                	test   eax,eax
c0014e64:	0f 85 b3 06 00 00    	jne    c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e6a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e72:	83 ec 0c             	sub    esp,0xc
c0014e75:	6a 34                	push   0x34
c0014e77:	e8 57 2c ff ff       	call   c0007ad3 <malloc>
c0014e7c:	5e                   	pop    esi
c0014e7d:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014e81:	89 c5                	mov    ebp,eax
c0014e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e85:	56                   	push   esi
c0014e86:	55                   	push   ebp
c0014e87:	6a 00                	push   0x0
c0014e89:	6a 34                	push   0x34
c0014e8b:	53                   	push   ebx
c0014e8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e8f:	83 c4 20             	add    esp,0x20
c0014e92:	85 c0                	test   eax,eax
c0014e94:	0f 85 83 06 00 00    	jne    c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e9a:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014ea1:	0f 85 76 06 00 00    	jne    c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ea7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014eaa:	85 c0                	test   eax,eax
c0014eac:	0f 84 6b 06 00 00    	je     c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014eb2:	31 d2                	xor    edx,edx
c0014eb4:	51                   	push   ecx
c0014eb5:	52                   	push   edx
c0014eb6:	50                   	push   eax
c0014eb7:	53                   	push   ebx
c0014eb8:	e8 77 6d ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014ebd:	83 c4 10             	add    esp,0x10
c0014ec0:	85 c0                	test   eax,eax
c0014ec2:	0f 85 55 06 00 00    	jne    c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ec8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014ecb:	83 ec 0c             	sub    esp,0xc
c0014ece:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ed2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ed6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014eda:	0f af c2             	imul   eax,edx
c0014edd:	50                   	push   eax
c0014ede:	e8 f0 2b ff ff       	call   c0007ad3 <malloc>
c0014ee3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ee5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ee8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014eec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ef0:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014ef4:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ef8:	0f af c2             	imul   eax,edx
c0014efb:	99                   	cdq    
c0014efc:	52                   	push   edx
c0014efd:	50                   	push   eax
c0014efe:	53                   	push   ebx
c0014eff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f02:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014f05:	83 c4 20             	add    esp,0x20
c0014f08:	85 c0                	test   eax,eax
c0014f0a:	0f 84 0d 06 00 00    	je     c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f10:	52                   	push   edx
c0014f11:	31 d2                	xor    edx,edx
c0014f13:	52                   	push   edx
c0014f14:	50                   	push   eax
c0014f15:	53                   	push   ebx
c0014f16:	e8 19 6d ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014f1b:	83 c4 10             	add    esp,0x10
c0014f1e:	85 c0                	test   eax,eax
c0014f20:	0f 85 f7 05 00 00    	jne    c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f26:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f2a:	83 ec 0c             	sub    esp,0xc
c0014f2d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f31:	0f af c2             	imul   eax,edx
c0014f34:	50                   	push   eax
c0014f35:	e8 99 2b ff ff       	call   c0007ad3 <malloc>
c0014f3a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f47:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014f4b:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014f4f:	0f af c2             	imul   eax,edx
c0014f52:	99                   	cdq    
c0014f53:	52                   	push   edx
c0014f54:	50                   	push   eax
c0014f55:	53                   	push   ebx
c0014f56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f59:	83 c4 20             	add    esp,0x20
c0014f5c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014f62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014f65:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014f69:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014f6d:	73 78                	jae    c0014fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014f6f:	c1 e7 05             	shl    edi,0x5
c0014f72:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014f76:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014f79:	75 63                	jne    c0014fde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014f7b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014f7e:	31 d2                	xor    edx,edx
c0014f80:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014f83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f87:	50                   	push   eax
c0014f88:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014f8b:	52                   	push   edx
c0014f8c:	50                   	push   eax
c0014f8d:	53                   	push   ebx
c0014f8e:	e8 a1 6c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014f93:	83 c4 10             	add    esp,0x10
c0014f96:	85 c0                	test   eax,eax
c0014f98:	0f 85 7f 05 00 00    	jne    c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f9e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fa5:	83 ec 0c             	sub    esp,0xc
c0014fa8:	31 d2                	xor    edx,edx
c0014faa:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014fae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014fb0:	01 c6                	add    esi,eax
c0014fb2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fb9:	50                   	push   eax
c0014fba:	56                   	push   esi
c0014fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fbf:	52                   	push   edx
c0014fc0:	50                   	push   eax
c0014fc1:	53                   	push   ebx
c0014fc2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fc5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014fc8:	83 c4 1c             	add    esp,0x1c
c0014fcb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014fce:	50                   	push   eax
c0014fcf:	6a 00                	push   0x0
c0014fd1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014fd5:	56                   	push   esi
c0014fd6:	e8 15 b5 fe ff       	call   c00004f0 <memset>
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	66 ff 04 24          	inc    WORD PTR [esp]
c0014fe2:	e9 7b ff ff ff       	jmp    c0014f62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014fe7:	50                   	push   eax
c0014fe8:	68 00 01 00 00       	push   0x100
c0014fed:	6a 00                	push   0x0
c0014fef:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014ff3:	50                   	push   eax
c0014ff4:	e8 f7 b4 fe ff       	call   c00004f0 <memset>
c0014ff9:	83 c4 0c             	add    esp,0xc
c0014ffc:	68 00 01 00 00       	push   0x100
c0015001:	6a 00                	push   0x0
c0015003:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001500a:	50                   	push   eax
c001500b:	e8 e0 b4 fe ff       	call   c00004f0 <memset>
c0015010:	83 c4 10             	add    esp,0x10
c0015013:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c001501a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015021:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015029:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015031:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015039:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015045:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015049:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001504e:	0f 83 16 01 00 00    	jae    c001516a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0015054:	6b ff 28             	imul   edi,edi,0x28
c0015057:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001505b:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001505e:	51                   	push   ecx
c001505f:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0015063:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015067:	8b 07                	mov    eax,DWORD PTR [edi]
c0015069:	6b d2 28             	imul   edx,edx,0x28
c001506c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015070:	31 d2                	xor    edx,edx
c0015072:	52                   	push   edx
c0015073:	50                   	push   eax
c0015074:	53                   	push   ebx
c0015075:	e8 ba 6b ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c001507a:	83 c4 0c             	add    esp,0xc
c001507d:	6a 20                	push   0x20
c001507f:	6a 00                	push   0x0
c0015081:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015088:	51                   	push   ecx
c0015089:	e8 62 b4 fe ff       	call   c00004f0 <memset>
c001508e:	58                   	pop    eax
c001508f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015091:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015095:	52                   	push   edx
c0015096:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001509d:	51                   	push   ecx
c001509e:	6a 00                	push   0x0
c00150a0:	6a 1f                	push   0x1f
c00150a2:	53                   	push   ebx
c00150a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150a6:	83 c4 1c             	add    esp,0x1c
c00150a9:	6a 09                	push   0x9
c00150ab:	68 b7 27 02 c0       	push   0xc00227b7
c00150b0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150b7:	51                   	push   ecx
c00150b8:	e8 c3 b2 fe ff       	call   c0000380 <memcmp>
c00150bd:	83 c4 10             	add    esp,0x10
c00150c0:	85 c0                	test   eax,eax
c00150c2:	75 1a                	jne    c00150de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00150c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150c7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00150ca:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00150ce:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150d1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00150d8:	89 d0                	mov    eax,edx
c00150da:	40                   	inc    eax
c00150db:	89 04 24             	mov    DWORD PTR [esp],eax
c00150de:	52                   	push   edx
c00150df:	6a 09                	push   0x9
c00150e1:	68 c1 27 02 c0       	push   0xc00227c1
c00150e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150ed:	50                   	push   eax
c00150ee:	e8 8d b2 fe ff       	call   c0000380 <memcmp>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	85 c0                	test   eax,eax
c00150f8:	75 1a                	jne    c0015114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00150fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150fd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015100:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015104:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015107:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001510e:	89 c8                	mov    eax,ecx
c0015110:	40                   	inc    eax
c0015111:	89 04 24             	mov    DWORD PTR [esp],eax
c0015114:	50                   	push   eax
c0015115:	50                   	push   eax
c0015116:	68 8d 27 02 c0       	push   0xc002278d
c001511b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015122:	50                   	push   eax
c0015123:	e8 58 b6 fe ff       	call   c0000780 <strcmp>
c0015128:	83 c4 10             	add    esp,0x10
c001512b:	85 c0                	test   eax,eax
c001512d:	75 0b                	jne    c001513a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c001512f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0015133:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001513a:	50                   	push   eax
c001513b:	50                   	push   eax
c001513c:	68 95 27 02 c0       	push   0xc0022795
c0015141:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015148:	50                   	push   eax
c0015149:	e8 32 b6 fe ff       	call   c0000780 <strcmp>
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	85 c0                	test   eax,eax
c0015153:	75 0b                	jne    c0015160 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0015155:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015159:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001515c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015160:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0015165:	e9 d7 fe ff ff       	jmp    c0015041 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001516a:	50                   	push   eax
c001516b:	31 d2                	xor    edx,edx
c001516d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015171:	52                   	push   edx
c0015172:	50                   	push   eax
c0015173:	53                   	push   ebx
c0015174:	e8 bb 6a ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0015179:	58                   	pop    eax
c001517a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001517e:	e8 50 29 ff ff       	call   c0007ad3 <malloc>
c0015183:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015185:	31 d2                	xor    edx,edx
c0015187:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001518b:	58                   	pop    eax
c001518c:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015190:	56                   	push   esi
c0015191:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015199:	52                   	push   edx
c001519a:	50                   	push   eax
c001519b:	53                   	push   ebx
c001519c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001519f:	83 c4 14             	add    esp,0x14
c00151a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151a6:	e8 28 29 ff ff       	call   c0007ad3 <malloc>
c00151ab:	31 d2                	xor    edx,edx
c00151ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00151b1:	83 c4 0c             	add    esp,0xc
c00151b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151b8:	52                   	push   edx
c00151b9:	50                   	push   eax
c00151ba:	53                   	push   ebx
c00151bb:	e8 74 6a ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c00151c0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151c2:	31 d2                	xor    edx,edx
c00151c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00151c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151cf:	52                   	push   edx
c00151d0:	50                   	push   eax
c00151d1:	53                   	push   ebx
c00151d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151d5:	83 c4 20             	add    esp,0x20
c00151d8:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00151dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00151e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00151e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00151ed:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00151f0:	0f 84 2b 03 00 00    	je     c0015521 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00151f6:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00151fd:	31 d2                	xor    edx,edx
c00151ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015203:	c1 e8 03             	shr    eax,0x3
c0015206:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001520a:	51                   	push   ecx
c001520b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001520f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015213:	52                   	push   edx
c0015214:	50                   	push   eax
c0015215:	53                   	push   ebx
c0015216:	e8 19 6a ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c001521b:	5e                   	pop    esi
c001521c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015220:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015227:	e8 a7 28 ff ff       	call   c0007ad3 <malloc>
c001522c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001522e:	31 d2                	xor    edx,edx
c0015230:	89 c7                	mov    edi,eax
c0015232:	58                   	pop    eax
c0015233:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015237:	50                   	push   eax
c0015238:	57                   	push   edi
c0015239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001523d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015244:	52                   	push   edx
c0015245:	50                   	push   eax
c0015246:	53                   	push   ebx
c0015247:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001524a:	83 c4 20             	add    esp,0x20
c001524d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015255:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015259:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001525d:	0f 8d a5 02 00 00    	jge    c0015508 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0015263:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0015268:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001526c:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c001526f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015277:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001527b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001527f:	c1 e8 08             	shr    eax,0x8
c0015282:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015286:	89 c2                	mov    edx,eax
c0015288:	c1 e2 04             	shl    edx,0x4
c001528b:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c001528f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015292:	85 f6                	test   esi,esi
c0015294:	0f 85 cf 00 00 00    	jne    c0015369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001529a:	83 ec 0c             	sub    esp,0xc
c001529d:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00152a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152a5:	03 02                	add    eax,DWORD PTR [edx]
c00152a7:	50                   	push   eax
c00152a8:	e8 63 f8 ff ff       	call   c0014b10 <Thr::getAddressOfKernelSymbol(char const*)>
c00152ad:	83 c4 10             	add    esp,0x10
c00152b0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152b4:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00152b9:	85 c0                	test   eax,eax
c00152bb:	89 c6                	mov    esi,eax
c00152bd:	0f 85 a6 00 00 00    	jne    c0015369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152c3:	83 ec 0c             	sub    esp,0xc
c00152c6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00152ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ce:	03 02                	add    eax,DWORD PTR [edx]
c00152d0:	50                   	push   eax
c00152d1:	e8 b2 c4 ff ff       	call   c0011788 <KeResolveCompatibilitySymbol(char*)>
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00152dd:	85 c0                	test   eax,eax
c00152df:	89 c6                	mov    esi,eax
c00152e1:	0f 85 82 00 00 00    	jne    c0015369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00152e7:	50                   	push   eax
c00152e8:	50                   	push   eax
c00152e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152ed:	03 02                	add    eax,DWORD PTR [edx]
c00152ef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00152f3:	50                   	push   eax
c00152f4:	68 cb 27 02 c0       	push   0xc00227cb
c00152f9:	e8 0c 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152fe:	58                   	pop    eax
c00152ff:	5a                   	pop    edx
c0015300:	68 e5 27 02 c0       	push   0xc00227e5
c0015305:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001530c:	51                   	push   ecx
c001530d:	e8 3e b3 fe ff       	call   c0000650 <strcpy>
c0015312:	59                   	pop    ecx
c0015313:	58                   	pop    eax
c0015314:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015318:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001531c:	03 02                	add    eax,DWORD PTR [edx]
c001531e:	50                   	push   eax
c001531f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015326:	51                   	push   ecx
c0015327:	e8 44 b5 fe ff       	call   c0000870 <strcat>
c001532c:	58                   	pop    eax
c001532d:	5a                   	pop    edx
c001532e:	68 7b 28 02 c0       	push   0xc002287b
c0015333:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001533a:	51                   	push   ecx
c001533b:	e8 30 b5 fe ff       	call   c0000870 <strcat>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015348:	0f 84 77 01 00 00    	je     c00154c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001534e:	83 ec 0c             	sub    esp,0xc
c0015351:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015358:	51                   	push   ecx
c0015359:	e8 41 c2 ff ff       	call   c001159f <KePanic(char const*)>
c001535e:	83 c4 10             	add    esp,0x10
c0015361:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015365:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015369:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001536e:	83 f8 01             	cmp    eax,0x1
c0015371:	0f 85 9b 00 00 00    	jne    c0015412 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0015377:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001537b:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015382:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0015386:	01 d0                	add    eax,edx
c0015388:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015390:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015394:	0f 94 c0             	sete   al
c0015397:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001539f:	0f 94 c1             	sete   cl
c00153a2:	09 c1                	or     ecx,eax
c00153a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153a8:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00153ad:	0f b6 c9             	movzx  ecx,cl
c00153b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b2:	74 41                	je     c00153f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00153b4:	8d 14 06             	lea    edx,[esi+eax*1]
c00153b7:	85 c9                	test   ecx,ecx
c00153b9:	75 15                	jne    c00153d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00153bb:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153bf:	66 83 f8 0c          	cmp    ax,0xc
c00153c3:	76 05                	jbe    c00153ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00153c5:	b8 0c 00 00 00       	mov    eax,0xc
c00153ca:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00153ce:	76 37                	jbe    c0015407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153d0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00153d5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00153d9:	0f 84 e6 00 00 00    	je     c00154c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153df:	83 ec 0c             	sub    esp,0xc
c00153e2:	68 fc 27 02 c0       	push   0xc00227fc
c00153e7:	e8 b3 c1 ff ff       	call   c001159f <KePanic(char const*)>
c00153ec:	83 c4 10             	add    esp,0x10
c00153ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153f3:	eb 12                	jmp    c0015407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153f5:	01 c2                	add    edx,eax
c00153f7:	85 c9                	test   ecx,ecx
c00153f9:	75 0c                	jne    c0015407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00153fb:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00153ff:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015403:	77 02                	ja     c0015407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015405:	01 f2                	add    edx,esi
c0015407:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001540b:	89 10                	mov    DWORD PTR [eax],edx
c001540d:	e9 ed 00 00 00       	jmp    c00154ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015412:	83 f8 02             	cmp    eax,0x2
c0015415:	0f 85 81 00 00 00    	jne    c001549c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001541b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015422:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015426:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001542a:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015432:	74 21                	je     c0015455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015434:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001543c:	74 17                	je     c0015455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001543e:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0015442:	ba 0a 00 00 00       	mov    edx,0xa
c0015447:	83 f9 0e             	cmp    ecx,0xe
c001544a:	77 03                	ja     c001544f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001544c:	8d 51 fc             	lea    edx,[ecx-0x4]
c001544f:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0015453:	76 1f                	jbe    c0015474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0015455:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001545a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001545e:	74 65                	je     c00154c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	68 18 28 02 c0       	push   0xc0022818
c0015468:	e8 32 c1 ff ff       	call   c001159f <KePanic(char const*)>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015474:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015479:	8b 10                	mov    edx,DWORD PTR [eax]
c001547b:	74 15                	je     c0015492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001547d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015481:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015488:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001548c:	01 d1                	add    ecx,edx
c001548e:	01 ce                	add    esi,ecx
c0015490:	eb 06                	jmp    c0015498 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015492:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015496:	01 d6                	add    esi,edx
c0015498:	89 30                	mov    DWORD PTR [eax],esi
c001549a:	eb 63                	jmp    c00154ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001549c:	56                   	push   esi
c001549d:	56                   	push   esi
c001549e:	50                   	push   eax
c001549f:	68 34 28 02 c0       	push   0xc0022834
c00154a4:	e8 61 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00154b1:	74 12                	je     c00154c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00154b3:	83 ec 0c             	sub    esp,0xc
c00154b6:	68 3f 28 02 c0       	push   0xc002283f
c00154bb:	e8 df c0 ff ff       	call   c001159f <KePanic(char const*)>
c00154c0:	83 c4 10             	add    esp,0x10
c00154c3:	eb 3a                	jmp    c00154ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00154c5:	83 ec 0c             	sub    esp,0xc
c00154c8:	53                   	push   ebx
c00154c9:	e8 06 67 ff ff       	call   c000bbd4 <File::close()>
c00154ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154d9:	e8 05 26 ff ff       	call   c0007ae3 <free>
c00154de:	59                   	pop    ecx
c00154df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154e3:	e8 fb 25 ff ff       	call   c0007ae3 <free>
c00154e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154eb:	e8 f3 25 ff ff       	call   c0007ae3 <free>
c00154f0:	5b                   	pop    ebx
c00154f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154f5:	e8 e9 25 ff ff       	call   c0007ae3 <free>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	eb 1e                	jmp    c001551d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00154ff:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015503:	e9 4d fd ff ff       	jmp    c0015255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015508:	83 ec 0c             	sub    esp,0xc
c001550b:	57                   	push   edi
c001550c:	e8 d2 25 ff ff       	call   c0007ae3 <free>
c0015511:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	e9 cc fc ff ff       	jmp    c00151e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c001551d:	31 c0                	xor    eax,eax
c001551f:	eb 32                	jmp    c0015553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015521:	83 ec 0c             	sub    esp,0xc
c0015524:	53                   	push   ebx
c0015525:	e8 aa 66 ff ff       	call   c000bbd4 <File::close()>
c001552a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001552c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001552f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015532:	58                   	pop    eax
c0015533:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015537:	e8 a7 25 ff ff       	call   c0007ae3 <free>
c001553c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001553f:	e8 9f 25 ff ff       	call   c0007ae3 <free>
c0015544:	5a                   	pop    edx
c0015545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015549:	e8 95 25 ff ff       	call   c0007ae3 <free>
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	b0 01                	mov    al,0x1
c0015553:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015559:	5b                   	pop    ebx
c001555a:	5e                   	pop    esi
c001555b:	5f                   	pop    edi
c001555c:	5d                   	pop    ebp
c001555d:	c3                   	ret    

c001555e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001555e:	56                   	push   esi
c001555f:	31 d2                	xor    edx,edx
c0015561:	53                   	push   ebx
c0015562:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001556c:	39 d3                	cmp    ebx,edx
c001556e:	7e 1b                	jle    c001558b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015570:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015577:	39 c8                	cmp    eax,ecx
c0015579:	77 0d                	ja     c0015588 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001557b:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015582:	01 c6                	add    esi,eax
c0015584:	39 ce                	cmp    esi,ecx
c0015586:	77 05                	ja     c001558d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015588:	42                   	inc    edx
c0015589:	eb e1                	jmp    c001556c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001558b:	31 c0                	xor    eax,eax
c001558d:	5b                   	pop    ebx
c001558e:	5e                   	pop    esi
c001558f:	c3                   	ret    

c0015590 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015590:	53                   	push   ebx
c0015591:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015597:	31 c0                	xor    eax,eax
c0015599:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001559d:	39 c3                	cmp    ebx,eax
c001559f:	7e 22                	jle    c00155c3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00155a1:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00155a8:	39 ca                	cmp    edx,ecx
c00155aa:	77 14                	ja     c00155c0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155ac:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00155b3:	39 ca                	cmp    edx,ecx
c00155b5:	76 09                	jbe    c00155c0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155b7:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00155be:	eb 05                	jmp    c00155c5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00155c0:	40                   	inc    eax
c00155c1:	eb da                	jmp    c001559d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00155c3:	31 c0                	xor    eax,eax
c00155c5:	5b                   	pop    ebx
c00155c6:	c3                   	ret    

c00155c7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00155c7:	53                   	push   ebx
c00155c8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00155cc:	53                   	push   ebx
c00155cd:	e8 8c ff ff ff       	call   c001555e <Thr::getDriverBaseFromAddress(unsigned long)>
c00155d2:	5a                   	pop    edx
c00155d3:	31 d2                	xor    edx,edx
c00155d5:	85 c0                	test   eax,eax
c00155d7:	74 04                	je     c00155dd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00155d9:	89 da                	mov    edx,ebx
c00155db:	29 c2                	sub    edx,eax
c00155dd:	5b                   	pop    ebx
c00155de:	89 d0                	mov    eax,edx
c00155e0:	c3                   	ret    

c00155e1 <Thr::loadDLL(char const*, bool)>:
c00155e1:	55                   	push   ebp
c00155e2:	57                   	push   edi
c00155e3:	56                   	push   esi
c00155e4:	53                   	push   ebx
c00155e5:	81 ec 34 01 00 00    	sub    esp,0x134
c00155eb:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00155f2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00155f9:	56                   	push   esi
c00155fa:	68 57 28 02 c0       	push   0xc0022857
c00155ff:	e8 06 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015604:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001560b:	e8 c3 24 ff ff       	call   c0007ad3 <malloc>
c0015610:	83 c4 0c             	add    esp,0xc
c0015613:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015619:	56                   	push   esi
c001561a:	50                   	push   eax
c001561b:	89 c3                	mov    ebx,eax
c001561d:	e8 36 65 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	85 db                	test   ebx,ebx
c0015627:	75 3c                	jne    c0015665 <Thr::loadDLL(char const*, bool)+0x84>
c0015629:	89 e8                	mov    eax,ebp
c001562b:	84 c0                	test   al,al
c001562d:	0f 84 e1 01 00 00    	je     c0015814 <Thr::loadDLL(char const*, bool)+0x233>
c0015633:	50                   	push   eax
c0015634:	50                   	push   eax
c0015635:	68 68 28 02 c0       	push   0xc0022868
c001563a:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001563e:	57                   	push   edi
c001563f:	e8 0c b0 fe ff       	call   c0000650 <strcpy>
c0015644:	58                   	pop    eax
c0015645:	5a                   	pop    edx
c0015646:	56                   	push   esi
c0015647:	57                   	push   edi
c0015648:	e8 23 b2 fe ff       	call   c0000870 <strcat>
c001564d:	59                   	pop    ecx
c001564e:	58                   	pop    eax
c001564f:	68 7b 28 02 c0       	push   0xc002287b
c0015654:	57                   	push   edi
c0015655:	e8 16 b2 fe ff       	call   c0000870 <strcat>
c001565a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001565d:	e8 3d bf ff ff       	call   c001159f <KePanic(char const*)>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	50                   	push   eax
c0015666:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001566a:	50                   	push   eax
c001566b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001566f:	50                   	push   eax
c0015670:	53                   	push   ebx
c0015671:	e8 02 68 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	85 db                	test   ebx,ebx
c001567b:	74 0c                	je     c0015689 <Thr::loadDLL(char const*, bool)+0xa8>
c001567d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001567f:	83 ec 0c             	sub    esp,0xc
c0015682:	53                   	push   ebx
c0015683:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001568e:	75 0a                	jne    c001569a <Thr::loadDLL(char const*, bool)+0xb9>
c0015690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015694:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015698:	75 3e                	jne    c00156d8 <Thr::loadDLL(char const*, bool)+0xf7>
c001569a:	89 e8                	mov    eax,ebp
c001569c:	31 db                	xor    ebx,ebx
c001569e:	84 c0                	test   al,al
c00156a0:	0f 84 6e 01 00 00    	je     c0015814 <Thr::loadDLL(char const*, bool)+0x233>
c00156a6:	50                   	push   eax
c00156a7:	50                   	push   eax
c00156a8:	68 68 28 02 c0       	push   0xc0022868
c00156ad:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156b1:	53                   	push   ebx
c00156b2:	e8 99 af fe ff       	call   c0000650 <strcpy>
c00156b7:	58                   	pop    eax
c00156b8:	5a                   	pop    edx
c00156b9:	56                   	push   esi
c00156ba:	53                   	push   ebx
c00156bb:	e8 b0 b1 fe ff       	call   c0000870 <strcat>
c00156c0:	59                   	pop    ecx
c00156c1:	5f                   	pop    edi
c00156c2:	68 7b 28 02 c0       	push   0xc002287b
c00156c7:	53                   	push   ebx
c00156c8:	e8 a3 b1 fe ff       	call   c0000870 <strcat>
c00156cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156d0:	e8 ca be ff ff       	call   c001159f <KePanic(char const*)>
c00156d5:	83 c4 10             	add    esp,0x10
c00156d8:	53                   	push   ebx
c00156d9:	6a 03                	push   0x3
c00156db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156e3:	05 ff 0f 00 00       	add    eax,0xfff
c00156e8:	83 d2 00             	adc    edx,0x0
c00156eb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00156ef:	50                   	push   eax
c00156f0:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00156f6:	e8 0b 47 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00156fb:	89 c3                	mov    ebx,eax
c00156fd:	58                   	pop    eax
c00156fe:	5a                   	pop    edx
c00156ff:	53                   	push   ebx
c0015700:	68 92 0d 02 c0       	push   0xc0020d92
c0015705:	e8 00 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001570a:	89 34 24             	mov    DWORD PTR [esp],esi
c001570d:	e8 6e ae fe ff       	call   c0000580 <strlen>
c0015712:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c0015718:	40                   	inc    eax
c0015719:	89 04 24             	mov    DWORD PTR [esp],eax
c001571c:	e8 b2 23 ff ff       	call   c0007ad3 <malloc>
c0015721:	59                   	pop    ecx
c0015722:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c0015729:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001572e:	5f                   	pop    edi
c001572f:	56                   	push   esi
c0015730:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015737:	e8 14 af fe ff       	call   c0000650 <strcpy>
c001573c:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015741:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015748:	8d 50 01             	lea    edx,[eax+0x1]
c001574b:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015751:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015755:	83 c4 0c             	add    esp,0xc
c0015758:	6a 01                	push   0x1
c001575a:	53                   	push   ebx
c001575b:	56                   	push   esi
c001575c:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015763:	e8 b5 f6 ff ff       	call   c0014e1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015768:	83 c4 10             	add    esp,0x10
c001576b:	89 c7                	mov    edi,eax
c001576d:	89 f8                	mov    eax,edi
c001576f:	83 f0 01             	xor    eax,0x1
c0015772:	84 c0                	test   al,al
c0015774:	74 18                	je     c001578e <Thr::loadDLL(char const*, bool)+0x1ad>
c0015776:	89 e8                	mov    eax,ebp
c0015778:	84 c0                	test   al,al
c001577a:	74 12                	je     c001578e <Thr::loadDLL(char const*, bool)+0x1ad>
c001577c:	83 ec 0c             	sub    esp,0xc
c001577f:	68 7d 28 02 c0       	push   0xc002287d
c0015784:	e8 16 be ff ff       	call   c001159f <KePanic(char const*)>
c0015789:	83 c4 10             	add    esp,0x10
c001578c:	eb 06                	jmp    c0015794 <Thr::loadDLL(char const*, bool)+0x1b3>
c001578e:	89 f8                	mov    eax,edi
c0015790:	84 c0                	test   al,al
c0015792:	75 10                	jne    c00157a4 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015794:	83 ec 0c             	sub    esp,0xc
c0015797:	68 9c 28 02 c0       	push   0xc002289c
c001579c:	e8 fe bd ff ff       	call   c001159f <KePanic(char const*)>
c00157a1:	83 c4 10             	add    esp,0x10
c00157a4:	31 f6                	xor    esi,esi
c00157a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00157ae:	05 ff 0f 00 00       	add    eax,0xfff
c00157b3:	83 d2 00             	adc    edx,0x0
c00157b6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00157be:	c1 ea 0c             	shr    edx,0xc
c00157c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00157c5:	ba 00 00 00 00       	mov    edx,0x0
c00157ca:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00157ce:	89 d0                	mov    eax,edx
c00157d0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00157d4:	73 32                	jae    c0015808 <Thr::loadDLL(char const*, bool)+0x227>
c00157d6:	50                   	push   eax
c00157d7:	50                   	push   eax
c00157d8:	89 f0                	mov    eax,esi
c00157da:	c1 e0 0c             	shl    eax,0xc
c00157dd:	01 d8                	add    eax,ebx
c00157df:	50                   	push   eax
c00157e0:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157e6:	e8 ff 40 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c00157eb:	83 c4 10             	add    esp,0x10
c00157ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f0:	a8 60                	test   al,0x60
c00157f2:	75 11                	jne    c0015805 <Thr::loadDLL(char const*, bool)+0x224>
c00157f4:	83 ec 0c             	sub    esp,0xc
c00157f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157fc:	50                   	push   eax
c00157fd:	e8 77 25 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015802:	83 c4 10             	add    esp,0x10
c0015805:	46                   	inc    esi
c0015806:	eb 9e                	jmp    c00157a6 <Thr::loadDLL(char const*, bool)+0x1c5>
c0015808:	89 f8                	mov    eax,edi
c001580a:	84 c0                	test   al,al
c001580c:	b8 00 00 00 00       	mov    eax,0x0
c0015811:	0f 44 d8             	cmove  ebx,eax
c0015814:	81 c4 2c 01 00 00    	add    esp,0x12c
c001581a:	89 d8                	mov    eax,ebx
c001581c:	5b                   	pop    ebx
c001581d:	5e                   	pop    esi
c001581e:	5f                   	pop    edi
c001581f:	5d                   	pop    ebp
c0015820:	c3                   	ret    

c0015821 <Thr::executeDLL(unsigned long, void*)>:
c0015821:	56                   	push   esi
c0015822:	53                   	push   ebx
c0015823:	52                   	push   edx
c0015824:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015828:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001582c:	85 db                	test   ebx,ebx
c001582e:	75 10                	jne    c0015840 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015830:	83 ec 0c             	sub    esp,0xc
c0015833:	68 b8 28 02 c0       	push   0xc00228b8
c0015838:	e8 62 bd ff ff       	call   c001159f <KePanic(char const*)>
c001583d:	83 c4 10             	add    esp,0x10
c0015840:	50                   	push   eax
c0015841:	50                   	push   eax
c0015842:	53                   	push   ebx
c0015843:	68 e2 28 02 c0       	push   0xc00228e2
c0015848:	e8 bd 50 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001584d:	89 d8                	mov    eax,ebx
c001584f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015853:	83 c4 14             	add    esp,0x14
c0015856:	5b                   	pop    ebx
c0015857:	5e                   	pop    esi
c0015858:	ff e0                	jmp    eax
c001585a:	66 90                	xchg   ax,ax

c001585c <userModeEntryPoint(void*)>:
c001585c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015861:	83 e8 01             	sub    eax,0x1
c0015864:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015869:	75 01                	jne    c001586c <userModeEntryPoint(void*)+0x10>
c001586b:	fb                   	sti    
c001586c:	fb                   	sti    
c001586d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015872:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015875:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001587b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001587f:	e9 bb a9 fe ff       	jmp    c000023f <goToUsermode>

c0015884 <changeTSS>:
c0015884:	83 ec 14             	sub    esp,0x14
c0015887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001588c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001588f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015894:	c1 e2 15             	shl    edx,0x15
c0015897:	29 d0                	sub    eax,edx
c0015899:	50                   	push   eax
c001589a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001589f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00158a5:	05 7c 11 00 00       	add    eax,0x117c
c00158aa:	50                   	push   eax
c00158ab:	e8 8c 36 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00158b0:	83 c4 1c             	add    esp,0x1c
c00158b3:	c3                   	ret    

c00158b4 <switchToThread(ThreadControlBlock*)>:
c00158b4:	57                   	push   edi
c00158b5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00158bb:	56                   	push   esi
c00158bc:	53                   	push   ebx
c00158bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158c1:	85 c9                	test   ecx,ecx
c00158c3:	0f 85 8b 00 00 00    	jne    c0015954 <switchToThread(ThreadControlBlock*)+0xa0>
c00158c9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00158cd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00158d3:	74 7b                	je     c0015950 <switchToThread(ThreadControlBlock*)+0x9c>
c00158d5:	b8 00 04 00 00       	mov    eax,0x400
c00158da:	29 d0                	sub    eax,edx
c00158dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00158df:	d1 f8                	sar    eax,1
c00158e1:	01 d0                	add    eax,edx
c00158e3:	90                   	nop
c00158e4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00158e7:	e8 04 28 00 00       	call   c00180f0 <HalQueryPerformanceCounter()>
c00158ec:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00158f1:	89 c6                	mov    esi,eax
c00158f3:	89 d7                	mov    edi,edx
c00158f5:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00158fb:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015900:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015906:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c001590c:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015912:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015918:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c001591e:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015924:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015927:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001592a:	01 c6                	add    esi,eax
c001592c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001592f:	11 d7                	adc    edi,edx
c0015931:	83 ec 0c             	sub    esp,0xc
c0015934:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015937:	53                   	push   ebx
c0015938:	e8 3a a9 fe ff       	call   c0000277 <switchToThreadASM>
c001593d:	0f 20 c0             	mov    eax,cr0
c0015940:	83 c8 08             	or     eax,0x8
c0015943:	0f 22 c0             	mov    cr0,eax
c0015946:	83 c4 10             	add    esp,0x10
c0015949:	5b                   	pop    ebx
c001594a:	5e                   	pop    esi
c001594b:	5f                   	pop    edi
c001594c:	c3                   	ret    
c001594d:	8d 76 00             	lea    esi,[esi+0x0]
c0015950:	31 c0                	xor    eax,eax
c0015952:	eb 90                	jmp    c00158e4 <switchToThread(ThreadControlBlock*)+0x30>
c0015954:	5b                   	pop    ebx
c0015955:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001595f:	5e                   	pop    esi
c0015960:	5f                   	pop    edi
c0015961:	c3                   	ret    
c0015962:	66 90                	xchg   ax,ax

c0015964 <Process::addArgs(char**)>:
c0015964:	57                   	push   edi
c0015965:	56                   	push   esi
c0015966:	53                   	push   ebx
c0015967:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001596b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001596f:	85 f6                	test   esi,esi
c0015971:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001597b:	74 4f                	je     c00159cc <Process::addArgs(char**)+0x68>
c001597d:	8b 06                	mov    eax,DWORD PTR [esi]
c001597f:	85 c0                	test   eax,eax
c0015981:	74 49                	je     c00159cc <Process::addArgs(char**)+0x68>
c0015983:	31 db                	xor    ebx,ebx
c0015985:	8d 76 00             	lea    esi,[esi+0x0]
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	50                   	push   eax
c001598c:	e8 ef ab fe ff       	call   c0000580 <strlen>
c0015991:	83 c0 01             	add    eax,0x1
c0015994:	89 04 24             	mov    DWORD PTR [esp],eax
c0015997:	e8 37 21 ff ff       	call   c0007ad3 <malloc>
c001599c:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00159a3:	5a                   	pop    edx
c00159a4:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00159a7:	83 c3 01             	add    ebx,0x1
c00159aa:	59                   	pop    ecx
c00159ab:	52                   	push   edx
c00159ac:	50                   	push   eax
c00159ad:	e8 9e ac fe ff       	call   c0000650 <strcpy>
c00159b2:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	83 c1 01             	add    ecx,0x1
c00159be:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00159c4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00159c7:	85 c0                	test   eax,eax
c00159c9:	75 bd                	jne    c0015988 <Process::addArgs(char**)+0x24>
c00159cb:	90                   	nop
c00159cc:	5b                   	pop    ebx
c00159cd:	5e                   	pop    esi
c00159ce:	5f                   	pop    edi
c00159cf:	c3                   	ret    

c00159d0 <Process::Process(char const*, Process*, char**)>:
c00159d0:	56                   	push   esi
c00159d1:	53                   	push   ebx
c00159d2:	83 ec 14             	sub    esp,0x14
c00159d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159d9:	05 0c 02 00 00       	add    eax,0x20c
c00159de:	bb 07 00 00 00       	mov    ebx,0x7
c00159e3:	89 c6                	mov    esi,eax
c00159e5:	8d 76 00             	lea    esi,[esi+0x0]
c00159e8:	85 db                	test   ebx,ebx
c00159ea:	78 14                	js     c0015a00 <Process::Process(char const*, Process*, char**)+0x30>
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	56                   	push   esi
c00159f0:	e8 33 a6 00 00       	call   c0020028 <ThreadControlBlock::ThreadControlBlock()>
c00159f5:	83 c4 10             	add    esp,0x10
c00159f8:	83 c6 5f             	add    esi,0x5f
c00159fb:	83 eb 01             	sub    ebx,0x1
c00159fe:	eb e8                	jmp    c00159e8 <Process::Process(char const*, Process*, char**)+0x18>
c0015a00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a04:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a0f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a16:	83 ec 0c             	sub    esp,0xc
c0015a19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a1d:	e8 72 b9 ff ff       	call   c0011394 <KeNewProcessEnv(Process*)>
c0015a22:	83 c4 10             	add    esp,0x10
c0015a25:	89 c2                	mov    edx,eax
c0015a27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a2b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a35:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a3e:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0015a43:	8d 50 01             	lea    edx,[eax+0x1]
c0015a46:	89 15 00 3f 02 c0    	mov    DWORD PTR ds:0xc0023f00,edx
c0015a4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a50:	89 02                	mov    DWORD PTR [edx],eax
c0015a52:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a5a:	83 ec 0c             	sub    esp,0xc
c0015a5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a61:	e8 6d 20 ff ff       	call   c0007ad3 <malloc>
c0015a66:	83 c4 10             	add    esp,0x10
c0015a69:	89 c3                	mov    ebx,eax
c0015a6b:	83 ec 08             	sub    esp,0x8
c0015a6e:	6a 00                	push   0x0
c0015a70:	53                   	push   ebx
c0015a71:	e8 dc 45 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015a76:	83 c4 10             	add    esp,0x10
c0015a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a7d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a87:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a99:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a9f:	e8 12 bf ff ff       	call   c00119b6 <KeInitSignals()>
c0015aa4:	89 c2                	mov    edx,eax
c0015aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aaa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015aba:	85 c0                	test   eax,eax
c0015abc:	74 42                	je     c0015b00 <Process::Process(char const*, Process*, char**)+0x130>
c0015abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ac8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015adc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ae2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aec:	05 0c 01 00 00       	add    eax,0x10c
c0015af1:	83 ec 08             	sub    esp,0x8
c0015af4:	52                   	push   edx
c0015af5:	50                   	push   eax
c0015af6:	e8 55 ab fe ff       	call   c0000650 <strcpy>
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	eb 64                	jmp    c0015b64 <Process::Process(char const*, Process*, char**)+0x194>
c0015b00:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b08:	83 ec 0c             	sub    esp,0xc
c0015b0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b0f:	e8 bf 1f ff ff       	call   c0007ad3 <malloc>
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	89 c3                	mov    ebx,eax
c0015b19:	83 ec 08             	sub    esp,0x8
c0015b1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b20:	53                   	push   ebx
c0015b21:	e8 46 31 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b3d:	83 ec 0c             	sub    esp,0xc
c0015b40:	50                   	push   eax
c0015b41:	e8 d4 29 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015b46:	83 c4 10             	add    esp,0x10
c0015b49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b4d:	05 0c 01 00 00       	add    eax,0x10c
c0015b52:	83 ec 08             	sub    esp,0x8
c0015b55:	68 01 29 02 c0       	push   0xc0022901
c0015b5a:	50                   	push   eax
c0015b5b:	e8 f0 aa fe ff       	call   c0000650 <strcpy>
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	90                   	nop
c0015b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b68:	83 c0 0c             	add    eax,0xc
c0015b6b:	83 ec 08             	sub    esp,0x8
c0015b6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b72:	50                   	push   eax
c0015b73:	e8 d8 aa fe ff       	call   c0000650 <strcpy>
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	83 ec 08             	sub    esp,0x8
c0015b7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b86:	e8 d9 fd ff ff       	call   c0015964 <Process::addArgs(char**)>
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	83 ec 08             	sub    esp,0x8
c0015b91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b99:	e8 40 ed ff ff       	call   c00148de <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015ba5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ba9:	83 f0 01             	xor    eax,0x1
c0015bac:	88 c2                	mov    dl,al
c0015bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015bb8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015bbd:	83 ec 04             	sub    esp,0x4
c0015bc0:	50                   	push   eax
c0015bc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc5:	68 58 29 02 c0       	push   0xc0022958
c0015bca:	e8 3b 4d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	90                   	nop
c0015bd3:	83 c4 14             	add    esp,0x14
c0015bd6:	5b                   	pop    ebx
c0015bd7:	5e                   	pop    esi
c0015bd8:	c3                   	ret    
c0015bd9:	90                   	nop
c0015bda:	66 90                	xchg   ax,ax

c0015bdc <Process::Process(bool, char const*, Process*, char**)>:
c0015bdc:	56                   	push   esi
c0015bdd:	53                   	push   ebx
c0015bde:	83 ec 24             	sub    esp,0x24
c0015be1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015be5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015be9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bed:	05 0c 02 00 00       	add    eax,0x20c
c0015bf2:	bb 07 00 00 00       	mov    ebx,0x7
c0015bf7:	89 c6                	mov    esi,eax
c0015bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bfc:	85 db                	test   ebx,ebx
c0015bfe:	78 14                	js     c0015c14 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c00:	83 ec 0c             	sub    esp,0xc
c0015c03:	56                   	push   esi
c0015c04:	e8 1f a4 00 00       	call   c0020028 <ThreadControlBlock::ThreadControlBlock()>
c0015c09:	83 c4 10             	add    esp,0x10
c0015c0c:	83 c6 5f             	add    esi,0x5f
c0015c0f:	83 eb 01             	sub    ebx,0x1
c0015c12:	eb e8                	jmp    c0015bfc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c23:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c2a:	83 ec 0c             	sub    esp,0xc
c0015c2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c31:	e8 5e b7 ff ff       	call   c0011394 <KeNewProcessEnv(Process*)>
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	89 c2                	mov    edx,eax
c0015c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c3f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c49:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c52:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0015c57:	8d 50 01             	lea    edx,[eax+0x1]
c0015c5a:	89 15 00 3f 02 c0    	mov    DWORD PTR ds:0xc0023f00,edx
c0015c60:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c64:	89 02                	mov    DWORD PTR [edx],eax
c0015c66:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c6e:	83 ec 0c             	sub    esp,0xc
c0015c71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015c75:	e8 59 1e ff ff       	call   c0007ad3 <malloc>
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	89 c3                	mov    ebx,eax
c0015c7f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c84:	83 ec 08             	sub    esp,0x8
c0015c87:	50                   	push   eax
c0015c88:	53                   	push   ebx
c0015c89:	e8 c4 43 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c95:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c9f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cad:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015cb1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015cb7:	e8 fa bc ff ff       	call   c00119b6 <KeInitSignals()>
c0015cbc:	89 c2                	mov    edx,eax
c0015cbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015cc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cd2:	85 c0                	test   eax,eax
c0015cd4:	74 42                	je     c0015d18 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cda:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ce0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cea:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015cf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cfa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d04:	05 0c 01 00 00       	add    eax,0x10c
c0015d09:	83 ec 08             	sub    esp,0x8
c0015d0c:	52                   	push   edx
c0015d0d:	50                   	push   eax
c0015d0e:	e8 3d a9 fe ff       	call   c0000650 <strcpy>
c0015d13:	83 c4 10             	add    esp,0x10
c0015d16:	eb 64                	jmp    c0015d7c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d18:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d27:	e8 a7 1d ff ff       	call   c0007ad3 <malloc>
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	89 c3                	mov    ebx,eax
c0015d31:	83 ec 08             	sub    esp,0x8
c0015d34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d38:	53                   	push   ebx
c0015d39:	e8 2e 2f ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d45:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d55:	83 ec 0c             	sub    esp,0xc
c0015d58:	50                   	push   eax
c0015d59:	e8 bc 27 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015d5e:	83 c4 10             	add    esp,0x10
c0015d61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d65:	05 0c 01 00 00       	add    eax,0x10c
c0015d6a:	83 ec 08             	sub    esp,0x8
c0015d6d:	68 01 29 02 c0       	push   0xc0022901
c0015d72:	50                   	push   eax
c0015d73:	e8 d8 a8 fe ff       	call   c0000650 <strcpy>
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	90                   	nop
c0015d7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d80:	83 c0 0c             	add    eax,0xc
c0015d83:	83 ec 08             	sub    esp,0x8
c0015d86:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d8a:	50                   	push   eax
c0015d8b:	e8 c0 a8 fe ff       	call   c0000650 <strcpy>
c0015d90:	83 c4 10             	add    esp,0x10
c0015d93:	83 ec 08             	sub    esp,0x8
c0015d96:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d9e:	e8 c1 fb ff ff       	call   c0015964 <Process::addArgs(char**)>
c0015da3:	83 c4 10             	add    esp,0x10
c0015da6:	90                   	nop
c0015da7:	83 c4 24             	add    esp,0x24
c0015daa:	5b                   	pop    ebx
c0015dab:	5e                   	pop    esi
c0015dac:	c3                   	ret    
c0015dad:	8d 76 00             	lea    esi,[esi+0x0]

c0015db0 <taskStartupFunction>:
c0015db0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015db5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015db8:	c3                   	ret    
c0015db9:	90                   	nop
c0015dba:	66 90                	xchg   ax,ax

c0015dbc <Semaphore::Semaphore(int)>:
c0015dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015dc4:	89 10                	mov    DWORD PTR [eax],edx
c0015dc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dca:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015dd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015de0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015de7:	90                   	nop
c0015de8:	c3                   	ret    
c0015de9:	90                   	nop
c0015dea:	66 90                	xchg   ax,ax

c0015dec <Mutex::Mutex()>:
c0015dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df0:	6a 01                	push   0x1
c0015df2:	50                   	push   eax
c0015df3:	e8 c4 ff ff ff       	call   c0015dbc <Semaphore::Semaphore(int)>
c0015df8:	83 c4 08             	add    esp,0x8
c0015dfb:	90                   	nop
c0015dfc:	c3                   	ret    
c0015dfd:	90                   	nop
c0015dfe:	66 90                	xchg   ax,ax

c0015e00 <Process::createThread(void (*)(void*), void*, int)>:
c0015e00:	57                   	push   edi
c0015e01:	31 c9                	xor    ecx,ecx
c0015e03:	56                   	push   esi
c0015e04:	53                   	push   ebx
c0015e05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e09:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e10:	89 f2                	mov    edx,esi
c0015e12:	66 90                	xchg   ax,ax
c0015e14:	0f b7 c2             	movzx  eax,dx
c0015e17:	80 e2 01             	and    dl,0x1
c0015e1a:	74 14                	je     c0015e30 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e1c:	d1 f8                	sar    eax,1
c0015e1e:	83 c1 01             	add    ecx,0x1
c0015e21:	83 f9 10             	cmp    ecx,0x10
c0015e24:	89 c2                	mov    edx,eax
c0015e26:	75 ec                	jne    c0015e14 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e28:	31 db                	xor    ebx,ebx
c0015e2a:	89 d8                	mov    eax,ebx
c0015e2c:	5b                   	pop    ebx
c0015e2d:	5e                   	pop    esi
c0015e2e:	5f                   	pop    edi
c0015e2f:	c3                   	ret    
c0015e30:	b8 01 00 00 00       	mov    eax,0x1
c0015e35:	d3 e0                	shl    eax,cl
c0015e37:	09 c6                	or     esi,eax
c0015e39:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e40:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015e43:	c1 e0 05             	shl    eax,0x5
c0015e46:	29 c8                	sub    eax,ecx
c0015e48:	01 d8                	add    eax,ebx
c0015e4a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e51:	75 0d                	jne    c0015e60 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e53:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e60:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e66:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015e69:	83 ec 0c             	sub    esp,0xc
c0015e6c:	c1 e6 05             	shl    esi,0x5
c0015e6f:	29 ce                	sub    esi,ecx
c0015e71:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015e74:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015e77:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015e7d:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015e83:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015e89:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015e90:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015e96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e9a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ea0:	89 ca                	mov    edx,ecx
c0015ea2:	f7 da                	neg    edx
c0015ea4:	c1 e2 15             	shl    edx,0x15
c0015ea7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015ead:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015eb3:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015eb7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015ec1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015ec7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ecb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015ed1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015edb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015ee5:	68 00 01 00 00       	push   0x100
c0015eea:	e8 e4 1b ff ff       	call   c0007ad3 <malloc>
c0015eef:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015ef2:	58                   	pop    eax
c0015ef3:	5a                   	pop    edx
c0015ef4:	53                   	push   ebx
c0015ef5:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015efa:	e8 c1 9e 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	89 d8                	mov    eax,ebx
c0015f04:	5b                   	pop    ebx
c0015f05:	5e                   	pop    esi
c0015f06:	5f                   	pop    edi
c0015f07:	c3                   	ret    

c0015f08 <Process::createUserThread()>:
c0015f08:	83 ec 0c             	sub    esp,0xc
c0015f0b:	68 80 00 00 00       	push   0x80
c0015f10:	6a 00                	push   0x0
c0015f12:	68 5c 58 01 c0       	push   0xc001585c
c0015f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f1b:	50                   	push   eax
c0015f1c:	e8 df fe ff ff       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c0015f21:	83 c4 1c             	add    esp,0x1c
c0015f24:	c3                   	ret    
c0015f25:	8d 76 00             	lea    esi,[esi+0x0]

c0015f28 <setupMultitasking(void (*)())>:
c0015f28:	56                   	push   esi
c0015f29:	53                   	push   ebx
c0015f2a:	83 ec 04             	sub    esp,0x4
c0015f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f31:	eb 11                	jmp    c0015f44 <setupMultitasking(void (*)())+0x1c>
c0015f33:	90                   	nop
c0015f34:	83 ec 0c             	sub    esp,0xc
c0015f37:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f3c:	e8 c3 9d 00 00       	call   c001fd04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f41:	83 c4 10             	add    esp,0x10
c0015f44:	83 ec 0c             	sub    esp,0xc
c0015f47:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f4c:	e8 8f 9d 00 00       	call   c001fce0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	84 c0                	test   al,al
c0015f56:	74 dc                	je     c0015f34 <setupMultitasking(void (*)())+0xc>
c0015f58:	83 ec 0c             	sub    esp,0xc
c0015f5b:	68 24 07 00 00       	push   0x724
c0015f60:	e8 6e 1b ff ff       	call   c0007ad3 <malloc>
c0015f65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015f6c:	6a 00                	push   0x0
c0015f6e:	68 05 29 02 c0       	push   0xc0022905
c0015f73:	6a 01                	push   0x1
c0015f75:	50                   	push   eax
c0015f76:	89 c3                	mov    ebx,eax
c0015f78:	e8 5f fc ff ff       	call   c0015bdc <Process::Process(bool, char const*, Process*, char**)>
c0015f7d:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015f83:	83 c4 14             	add    esp,0x14
c0015f86:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015f8c:	50                   	push   eax
c0015f8d:	e8 dd 27 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015f92:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015f99:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015fa3:	83 c8 01             	or     eax,0x1
c0015fa6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015fad:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015fb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015fb6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015fc0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015fc6:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015fd0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015fd6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015fe0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015fea:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015ff0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015ff6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016000:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001600a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016011:	e8 bd 1a ff ff       	call   c0007ad3 <malloc>
c0016016:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001601c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016022:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016028:	5a                   	pop    edx
c0016029:	59                   	pop    ecx
c001602a:	68 01 29 02 c0       	push   0xc0022901
c001602f:	50                   	push   eax
c0016030:	e8 1b a6 fe ff       	call   c0000650 <strcpy>
c0016035:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001603c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016040:	83 c4 14             	add    esp,0x14
c0016043:	5b                   	pop    ebx
c0016044:	5e                   	pop    esi
c0016045:	e9 1f a2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001604a:	66 90                	xchg   ax,ax

c001604c <schedule()>:
c001604c:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016052:	85 d2                	test   edx,edx
c0016054:	74 0e                	je     c0016064 <schedule()+0x18>
c0016056:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016060:	c3                   	ret    
c0016061:	8d 76 00             	lea    esi,[esi+0x0]
c0016064:	53                   	push   ebx
c0016065:	83 ec 14             	sub    esp,0x14
c0016068:	68 e4 c6 02 c0       	push   0xc002c6e4
c001606d:	e8 6e 9c 00 00       	call   c001fce0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016072:	83 c4 10             	add    esp,0x10
c0016075:	84 c0                	test   al,al
c0016077:	75 3f                	jne    c00160b8 <schedule()+0x6c>
c0016079:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001607e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016081:	83 fa 01             	cmp    edx,0x1
c0016084:	74 3a                	je     c00160c0 <schedule()+0x74>
c0016086:	66 90                	xchg   ax,ax
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016090:	e8 67 9c 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016095:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001609c:	89 c3                	mov    ebx,eax
c001609e:	e8 61 9c 00 00       	call   c001fd04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160a3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00160aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160ad:	e8 02 f8 ff ff       	call   c00158b4 <switchToThread(ThreadControlBlock*)>
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	8d 76 00             	lea    esi,[esi+0x0]
c00160b8:	83 c4 08             	add    esp,0x8
c00160bb:	5b                   	pop    ebx
c00160bc:	c3                   	ret    
c00160bd:	8d 76 00             	lea    esi,[esi+0x0]
c00160c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00160c7:	83 ec 08             	sub    esp,0x8
c00160ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160cf:	50                   	push   eax
c00160d0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160d5:	e8 e6 9c 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160da:	83 c4 10             	add    esp,0x10
c00160dd:	eb a9                	jmp    c0016088 <schedule()+0x3c>
c00160df:	90                   	nop

c00160e0 <Semaphore::tryAcquire()>:
c00160e0:	53                   	push   ebx
c00160e1:	83 ec 08             	sub    esp,0x8
c00160e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160e8:	fa                   	cli    
c00160e9:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00160ef:	8d 42 01             	lea    eax,[edx+0x1]
c00160f2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00160f7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00160fc:	8d 58 01             	lea    ebx,[eax+0x1]
c00160ff:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016105:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016108:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001610a:	7c 2c                	jl     c0016138 <Semaphore::tryAcquire()+0x58>
c001610c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016111:	85 c0                	test   eax,eax
c0016113:	75 0b                	jne    c0016120 <Semaphore::tryAcquire()+0x40>
c0016115:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001611a:	85 c0                	test   eax,eax
c001611c:	75 5a                	jne    c0016178 <Semaphore::tryAcquire()+0x98>
c001611e:	66 90                	xchg   ax,ax
c0016120:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016126:	31 c0                	xor    eax,eax
c0016128:	85 d2                	test   edx,edx
c001612a:	75 04                	jne    c0016130 <Semaphore::tryAcquire()+0x50>
c001612c:	fb                   	sti    
c001612d:	8d 76 00             	lea    esi,[esi+0x0]
c0016130:	83 c4 08             	add    esp,0x8
c0016133:	5b                   	pop    ebx
c0016134:	c3                   	ret    
c0016135:	8d 76 00             	lea    esi,[esi+0x0]
c0016138:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001613d:	83 c3 01             	add    ebx,0x1
c0016140:	85 c0                	test   eax,eax
c0016142:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016145:	75 21                	jne    c0016168 <Semaphore::tryAcquire()+0x88>
c0016147:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001614d:	85 c9                	test   ecx,ecx
c001614f:	74 17                	je     c0016168 <Semaphore::tryAcquire()+0x88>
c0016151:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001615b:	e8 ec fe ff ff       	call   c001604c <schedule()>
c0016160:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016165:	8d 50 ff             	lea    edx,[eax-0x1]
c0016168:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001616e:	85 d2                	test   edx,edx
c0016170:	b0 01                	mov    al,0x1
c0016172:	75 bc                	jne    c0016130 <Semaphore::tryAcquire()+0x50>
c0016174:	eb b6                	jmp    c001612c <Semaphore::tryAcquire()+0x4c>
c0016176:	66 90                	xchg   ax,ax
c0016178:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016182:	e8 c5 fe ff ff       	call   c001604c <schedule()>
c0016187:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001618c:	8d 50 ff             	lea    edx,[eax-0x1]
c001618f:	31 c0                	xor    eax,eax
c0016191:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016197:	85 d2                	test   edx,edx
c0016199:	75 95                	jne    c0016130 <Semaphore::tryAcquire()+0x50>
c001619b:	eb 8f                	jmp    c001612c <Semaphore::tryAcquire()+0x4c>
c001619d:	90                   	nop
c001619e:	66 90                	xchg   ax,ax

c00161a0 <Semaphore::assertLocked(char const*)>:
c00161a0:	83 ec 0c             	sub    esp,0xc
c00161a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161a7:	fa                   	cli    
c00161a8:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00161ae:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161b3:	83 c1 01             	add    ecx,0x1
c00161b6:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00161bc:	8d 48 01             	lea    ecx,[eax+0x1]
c00161bf:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00161c5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00161c7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00161ca:	7c 28                	jl     c00161f4 <Semaphore::assertLocked(char const*)+0x54>
c00161cc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161d1:	85 c0                	test   eax,eax
c00161d3:	75 0b                	jne    c00161e0 <Semaphore::assertLocked(char const*)+0x40>
c00161d5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00161da:	85 c0                	test   eax,eax
c00161dc:	75 32                	jne    c0016210 <Semaphore::assertLocked(char const*)+0x70>
c00161de:	66 90                	xchg   ax,ax
c00161e0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161e5:	83 e8 01             	sub    eax,0x1
c00161e8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161ed:	75 01                	jne    c00161f0 <Semaphore::assertLocked(char const*)+0x50>
c00161ef:	fb                   	sti    
c00161f0:	83 c4 0c             	add    esp,0xc
c00161f3:	c3                   	ret    
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161fb:	52                   	push   edx
c00161fc:	e8 9e b3 ff ff       	call   c001159f <KePanic(char const*)>
c0016201:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016206:	83 c4 10             	add    esp,0x10
c0016209:	83 e8 01             	sub    eax,0x1
c001620c:	eb be                	jmp    c00161cc <Semaphore::assertLocked(char const*)+0x2c>
c001620e:	66 90                	xchg   ax,ax
c0016210:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001621a:	e8 2d fe ff ff       	call   c001604c <schedule()>
c001621f:	eb bf                	jmp    c00161e0 <Semaphore::assertLocked(char const*)+0x40>
c0016221:	8d 76 00             	lea    esi,[esi+0x0]

c0016224 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016224:	83 ec 0c             	sub    esp,0xc
c0016227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016230:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016233:	e8 14 fe ff ff       	call   c001604c <schedule()>
c0016238:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001623d:	83 e8 01             	sub    eax,0x1
c0016240:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016245:	75 01                	jne    c0016248 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016247:	fb                   	sti    
c0016248:	83 c4 0c             	add    esp,0xc
c001624b:	c3                   	ret    

c001624c <blockTask(TaskState)>:
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	fa                   	cli    
c0016250:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016255:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016259:	83 c0 01             	add    eax,0x1
c001625c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016266:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016269:	e8 de fd ff ff       	call   c001604c <schedule()>
c001626e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016273:	83 e8 01             	sub    eax,0x1
c0016276:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001627b:	75 03                	jne    c0016280 <blockTask(TaskState)+0x34>
c001627d:	fb                   	sti    
c001627e:	66 90                	xchg   ax,ax
c0016280:	83 c4 0c             	add    esp,0xc
c0016283:	c3                   	ret    

c0016284 <waitTask(int, int*, int)>:
c0016284:	83 ec 18             	sub    esp,0x18
c0016287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001628c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016290:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016293:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016297:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001629c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001629f:	6a 07                	push   0x7
c00162a1:	e8 a6 ff ff ff       	call   c001624c <blockTask(TaskState)>
c00162a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00162b1:	85 d2                	test   edx,edx
c00162b3:	74 0b                	je     c00162c0 <waitTask(int, int*, int)+0x3c>
c00162b5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00162b8:	89 02                	mov    DWORD PTR [edx],eax
c00162ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162bf:	90                   	nop
c00162c0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00162c3:	83 c4 0c             	add    esp,0xc
c00162c6:	c3                   	ret    
c00162c7:	90                   	nop

c00162c8 <milliTenthSleepUntil(unsigned int)>:
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162cf:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00162d5:	76 05                	jbe    c00162dc <milliTenthSleepUntil(unsigned int)+0x14>
c00162d7:	90                   	nop
c00162d8:	83 c4 0c             	add    esp,0xc
c00162db:	c3                   	ret    
c00162dc:	fa                   	cli    
c00162dd:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00162e3:	83 ec 08             	sub    esp,0x8
c00162e6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00162ec:	83 c2 01             	add    edx,0x1
c00162ef:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162f5:	83 c1 01             	add    ecx,0x1
c00162f8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162fe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016304:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630c:	50                   	push   eax
c001630d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016312:	e8 a9 9a 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016317:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001631e:	e8 29 ff ff ff       	call   c001624c <blockTask(TaskState)>
c0016323:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016328:	83 c4 10             	add    esp,0x10
c001632b:	83 e8 01             	sub    eax,0x1
c001632e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016333:	85 c0                	test   eax,eax
c0016335:	75 09                	jne    c0016340 <milliTenthSleepUntil(unsigned int)+0x78>
c0016337:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001633c:	85 c0                	test   eax,eax
c001633e:	75 14                	jne    c0016354 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016340:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016345:	83 e8 01             	sub    eax,0x1
c0016348:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001634d:	75 89                	jne    c00162d8 <milliTenthSleepUntil(unsigned int)+0x10>
c001634f:	fb                   	sti    
c0016350:	83 c4 0c             	add    esp,0xc
c0016353:	c3                   	ret    
c0016354:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001635e:	e8 e9 fc ff ff       	call   c001604c <schedule()>
c0016363:	eb db                	jmp    c0016340 <milliTenthSleepUntil(unsigned int)+0x78>
c0016365:	8d 76 00             	lea    esi,[esi+0x0]

c0016368 <milliTenthSleep(unsigned int)>:
c0016368:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001636c:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016371:	01 c2                	add    edx,eax
c0016373:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016377:	e9 4c ff ff ff       	jmp    c00162c8 <milliTenthSleepUntil(unsigned int)>

c001637c <sleep(unsigned int)>:
c001637c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016384:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016388:	eb de                	jmp    c0016368 <milliTenthSleep(unsigned int)>
c001638a:	66 90                	xchg   ax,ax

c001638c <Semaphore::acquire()>:
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016393:	fa                   	cli    
c0016394:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016399:	83 c0 01             	add    eax,0x1
c001639c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163a1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00163a9:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163af:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00163b2:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00163b4:	7d 2e                	jge    c00163e4 <Semaphore::acquire()+0x58>
c00163b6:	83 c1 01             	add    ecx,0x1
c00163b9:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00163bc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163c1:	85 c0                	test   eax,eax
c00163c3:	75 0b                	jne    c00163d0 <Semaphore::acquire()+0x44>
c00163c5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163ca:	85 c0                	test   eax,eax
c00163cc:	75 66                	jne    c0016434 <Semaphore::acquire()+0xa8>
c00163ce:	66 90                	xchg   ax,ax
c00163d0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163d5:	83 e8 01             	sub    eax,0x1
c00163d8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163dd:	75 01                	jne    c00163e0 <Semaphore::acquire()+0x54>
c00163df:	fb                   	sti    
c00163e0:	83 c4 0c             	add    esp,0xc
c00163e3:	c3                   	ret    
c00163e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163f0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00163f3:	85 c9                	test   ecx,ecx
c00163f5:	74 51                	je     c0016448 <Semaphore::acquire()+0xbc>
c00163f7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00163fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016400:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016403:	90                   	nop
c0016404:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016409:	83 ec 0c             	sub    esp,0xc
c001640c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001640f:	68 84 29 02 c0       	push   0xc0022984
c0016414:	e8 f1 44 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016419:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016420:	e8 27 fe ff ff       	call   c001624c <blockTask(TaskState)>
c0016425:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001642a:	83 c4 10             	add    esp,0x10
c001642d:	83 e8 01             	sub    eax,0x1
c0016430:	eb 8a                	jmp    c00163bc <Semaphore::acquire()+0x30>
c0016432:	66 90                	xchg   ax,ax
c0016434:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001643e:	e8 09 fc ff ff       	call   c001604c <schedule()>
c0016443:	eb 8b                	jmp    c00163d0 <Semaphore::acquire()+0x44>
c0016445:	8d 76 00             	lea    esi,[esi+0x0]
c0016448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016450:	eb b2                	jmp    c0016404 <Semaphore::acquire()+0x78>
c0016452:	66 90                	xchg   ax,ax

c0016454 <taskReturned>:
c0016454:	83 ec 18             	sub    esp,0x18
c0016457:	68 a4 29 02 c0       	push   0xc00229a4
c001645c:	e8 3e b1 ff ff       	call   c001159f <KePanic(char const*)>
c0016461:	83 c4 10             	add    esp,0x10
c0016464:	83 ec 0c             	sub    esp,0xc
c0016467:	6a 02                	push   0x2
c0016469:	e8 de fd ff ff       	call   c001624c <blockTask(TaskState)>
c001646e:	fa                   	cli    
c001646f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016474:	83 c0 01             	add    eax,0x1
c0016477:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001647c:	e8 cb fb ff ff       	call   c001604c <schedule()>
c0016481:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016486:	83 c4 10             	add    esp,0x10
c0016489:	83 e8 01             	sub    eax,0x1
c001648c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016491:	85 c0                	test   eax,eax
c0016493:	75 cf                	jne    c0016464 <taskReturned+0x10>
c0016495:	fb                   	sti    
c0016496:	eb cc                	jmp    c0016464 <taskReturned+0x10>

c0016498 <Thr::processFromPID(int)>:
c0016498:	57                   	push   edi
c0016499:	56                   	push   esi
c001649a:	53                   	push   ebx
c001649b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001649f:	fa                   	cli    
c00164a0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164ae:	83 c1 01             	add    ecx,0x1
c00164b1:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00164b7:	e8 40 98 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164bc:	83 c4 10             	add    esp,0x10
c00164bf:	89 c7                	mov    edi,eax
c00164c1:	eb 15                	jmp    c00164d8 <Thr::processFromPID(int)+0x40>
c00164c3:	90                   	nop
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164cc:	e8 2b 98 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164d1:	83 c4 10             	add    esp,0x10
c00164d4:	39 f8                	cmp    eax,edi
c00164d6:	74 50                	je     c0016528 <Thr::processFromPID(int)+0x90>
c00164d8:	83 ec 0c             	sub    esp,0xc
c00164db:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164e0:	e8 17 98 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164e5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00164ec:	89 c3                	mov    ebx,eax
c00164ee:	e8 11 98 00 00       	call   c001fd04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164f3:	58                   	pop    eax
c00164f4:	5a                   	pop    edx
c00164f5:	53                   	push   ebx
c00164f6:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164fb:	e8 c0 98 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016500:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	39 30                	cmp    DWORD PTR [eax],esi
c0016508:	75 ba                	jne    c00164c4 <Thr::processFromPID(int)+0x2c>
c001650a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001650f:	83 e8 01             	sub    eax,0x1
c0016512:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016517:	74 0b                	je     c0016524 <Thr::processFromPID(int)+0x8c>
c0016519:	8d 76 00             	lea    esi,[esi+0x0]
c001651c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001651f:	90                   	nop
c0016520:	5b                   	pop    ebx
c0016521:	5e                   	pop    esi
c0016522:	5f                   	pop    edi
c0016523:	c3                   	ret    
c0016524:	fb                   	sti    
c0016525:	eb f5                	jmp    c001651c <Thr::processFromPID(int)+0x84>
c0016527:	90                   	nop
c0016528:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001652d:	8d 50 ff             	lea    edx,[eax-0x1]
c0016530:	31 c0                	xor    eax,eax
c0016532:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016538:	85 d2                	test   edx,edx
c001653a:	75 e4                	jne    c0016520 <Thr::processFromPID(int)+0x88>
c001653c:	fb                   	sti    
c001653d:	5b                   	pop    ebx
c001653e:	5e                   	pop    esi
c001653f:	5f                   	pop    edi
c0016540:	c3                   	ret    
c0016541:	8d 76 00             	lea    esi,[esi+0x0]

c0016544 <unblockTask(ThreadControlBlock*)>:
c0016544:	53                   	push   ebx
c0016545:	83 ec 08             	sub    esp,0x8
c0016548:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001654c:	fa                   	cli    
c001654d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016552:	83 c0 01             	add    eax,0x1
c0016555:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001655a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001655d:	85 c0                	test   eax,eax
c001655f:	74 67                	je     c00165c8 <unblockTask(ThreadControlBlock*)+0x84>
c0016561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016564:	83 f8 01             	cmp    eax,0x1
c0016567:	74 37                	je     c00165a0 <unblockTask(ThreadControlBlock*)+0x5c>
c0016569:	83 ec 0c             	sub    esp,0xc
c001656c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016571:	e8 86 97 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016576:	83 c4 10             	add    esp,0x10
c0016579:	85 c0                	test   eax,eax
c001657b:	75 1b                	jne    c0016598 <unblockTask(ThreadControlBlock*)+0x54>
c001657d:	eb 5d                	jmp    c00165dc <unblockTask(ThreadControlBlock*)+0x98>
c001657f:	90                   	nop
c0016580:	83 ec 08             	sub    esp,0x8
c0016583:	50                   	push   eax
c0016584:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016589:	e8 8e 9a 00 00       	call   c002001c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001658e:	83 c4 10             	add    esp,0x10
c0016591:	85 c0                	test   eax,eax
c0016593:	74 47                	je     c00165dc <unblockTask(ThreadControlBlock*)+0x98>
c0016595:	8d 76 00             	lea    esi,[esi+0x0]
c0016598:	39 c3                	cmp    ebx,eax
c001659a:	75 e4                	jne    c0016580 <unblockTask(ThreadControlBlock*)+0x3c>
c001659c:	eb 12                	jmp    c00165b0 <unblockTask(ThreadControlBlock*)+0x6c>
c001659e:	66 90                	xchg   ax,ax
c00165a0:	83 ec 0c             	sub    esp,0xc
c00165a3:	68 23 29 02 c0       	push   0xc0022923
c00165a8:	e8 5d 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00165ad:	83 c4 10             	add    esp,0x10
c00165b0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165b5:	83 e8 01             	sub    eax,0x1
c00165b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165bd:	75 01                	jne    c00165c0 <unblockTask(ThreadControlBlock*)+0x7c>
c00165bf:	fb                   	sti    
c00165c0:	83 c4 08             	add    esp,0x8
c00165c3:	5b                   	pop    ebx
c00165c4:	c3                   	ret    
c00165c5:	8d 76 00             	lea    esi,[esi+0x0]
c00165c8:	83 ec 0c             	sub    esp,0xc
c00165cb:	68 0c 29 02 c0       	push   0xc002290c
c00165d0:	e8 35 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	eb d6                	jmp    c00165b0 <unblockTask(ThreadControlBlock*)+0x6c>
c00165da:	66 90                	xchg   ax,ax
c00165dc:	83 ec 08             	sub    esp,0x8
c00165df:	53                   	push   ebx
c00165e0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165e5:	e8 d6 97 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	eb c1                	jmp    c00165b0 <unblockTask(ThreadControlBlock*)+0x6c>
c00165ef:	90                   	nop

c00165f0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00165f0:	55                   	push   ebp
c00165f1:	57                   	push   edi
c00165f2:	56                   	push   esi
c00165f3:	53                   	push   ebx
c00165f4:	83 ec 1c             	sub    esp,0x1c
c00165f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00165fb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165fe:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016604:	85 ed                	test   ebp,ebp
c0016606:	7e 28                	jle    c0016630 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016608:	31 f6                	xor    esi,esi
c001660a:	66 90                	xchg   ax,ax
c001660c:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016613:	83 ec 0c             	sub    esp,0xc
c0016616:	83 c6 01             	add    esi,0x1
c0016619:	57                   	push   edi
c001661a:	e8 c4 14 ff ff       	call   c0007ae3 <free>
c001661f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016622:	83 c4 10             	add    esp,0x10
c0016625:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001662b:	7f df                	jg     c001660c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001662d:	8d 76 00             	lea    esi,[esi+0x0]
c0016630:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001663a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001663f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016642:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016645:	d3 c0                	rol    eax,cl
c0016647:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001664e:	21 c8                	and    eax,ecx
c0016650:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016657:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001665a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016662:	89 f7                	mov    edi,esi
c0016664:	0f 85 72 01 00 00    	jne    c00167dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001666a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016670:	85 ed                	test   ebp,ebp
c0016672:	74 1c                	je     c0016690 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	55                   	push   ebp
c0016678:	e8 33 ac ff ff       	call   c00112b0 <EnvVarContainer::~EnvVarContainer()>
c001667d:	59                   	pop    ecx
c001667e:	5e                   	pop    esi
c001667f:	6a 0c                	push   0xc
c0016681:	55                   	push   ebp
c0016682:	e8 85 41 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016687:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	89 f7                	mov    edi,esi
c001668f:	90                   	nop
c0016690:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016696:	85 c0                	test   eax,eax
c0016698:	0f 84 b2 00 00 00    	je     c0016750 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001669e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00166a5:	31 c9                	xor    ecx,ecx
c00166a7:	eb 17                	jmp    c00166c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00166a9:	8d 76 00             	lea    esi,[esi+0x0]
c00166ac:	83 c1 01             	add    ecx,0x1
c00166af:	83 f9 10             	cmp    ecx,0x10
c00166b2:	0f 84 98 00 00 00    	je     c0016750 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166be:	66 90                	xchg   ax,ax
c00166c0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00166c7:	d3 fa                	sar    edx,cl
c00166c9:	80 e2 01             	and    dl,0x1
c00166cc:	74 de                	je     c00166ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166ce:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00166d1:	c1 e2 05             	shl    edx,0x5
c00166d4:	29 ca                	sub    edx,ecx
c00166d6:	01 d0                	add    eax,edx
c00166d8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00166de:	83 fd 07             	cmp    ebp,0x7
c00166e1:	75 c9                	jne    c00166ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166e3:	05 40 02 00 00       	add    eax,0x240
c00166e8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00166eb:	83 fd ff             	cmp    ebp,0xffffffff
c00166ee:	0f 8c f0 00 00 00    	jl     c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00166f4:	0f 84 ae 01 00 00    	je     c00168a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00166fa:	85 ed                	test   ebp,ebp
c00166fc:	0f 84 92 01 00 00    	je     c0016894 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016702:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016704:	75 a6                	jne    c00166ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016706:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001670a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016710:	01 d0                	add    eax,edx
c0016712:	66 90                	xchg   ax,ax
c0016714:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016718:	83 ec 0c             	sub    esp,0xc
c001671b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016721:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016724:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001672a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016731:	50                   	push   eax
c0016732:	e8 0d fe ff ff       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001673d:	89 f7                	mov    edi,esi
c001673f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016743:	83 c1 01             	add    ecx,0x1
c0016746:	83 f9 10             	cmp    ecx,0x10
c0016749:	0f 85 69 ff ff ff    	jne    c00166b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001674f:	90                   	nop
c0016750:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016756:	85 c0                	test   eax,eax
c0016758:	74 62                	je     c00167bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001675a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016760:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016766:	74 54                	je     c00167bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016770:	e8 87 95 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016775:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001677c:	89 c7                	mov    edi,eax
c001677e:	e8 5d 95 00 00       	call   c001fce0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016783:	83 c4 10             	add    esp,0x10
c0016786:	84 c0                	test   al,al
c0016788:	0f 84 ce 00 00 00    	je     c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001678e:	66 90                	xchg   ax,ax
c0016790:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016793:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016799:	85 d2                	test   edx,edx
c001679b:	74 0f                	je     c00167ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001679d:	8b 02                	mov    eax,DWORD PTR [edx]
c001679f:	83 ec 0c             	sub    esp,0xc
c00167a2:	52                   	push   edx
c00167a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167a6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00167b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00167b9:	8d 76 00             	lea    esi,[esi+0x0]
c00167bc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00167c2:	85 db                	test   ebx,ebx
c00167c4:	74 16                	je     c00167dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00167c6:	83 ec 0c             	sub    esp,0xc
c00167c9:	53                   	push   ebx
c00167ca:	e8 c1 33 ff ff       	call   c0009b90 <VAS::~VAS()>
c00167cf:	58                   	pop    eax
c00167d0:	5a                   	pop    edx
c00167d1:	6a 14                	push   0x14
c00167d3:	53                   	push   ebx
c00167d4:	e8 33 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00167d9:	83 c4 10             	add    esp,0x10
c00167dc:	83 c4 1c             	add    esp,0x1c
c00167df:	5b                   	pop    ebx
c00167e0:	5e                   	pop    esi
c00167e1:	5f                   	pop    edi
c00167e2:	5d                   	pop    ebp
c00167e3:	c3                   	ret    
c00167e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167e8:	83 ec 0c             	sub    esp,0xc
c00167eb:	68 d8 29 02 c0       	push   0xc00229d8
c00167f0:	e8 aa ad ff ff       	call   c001159f <KePanic(char const*)>
c00167f5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167f8:	83 c4 10             	add    esp,0x10
c00167fb:	89 f7                	mov    edi,esi
c00167fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016801:	e9 a6 fe ff ff       	jmp    c00166ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016806:	66 90                	xchg   ax,ax
c0016808:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001680e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016814:	75 1e                	jne    c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016816:	83 ec 0c             	sub    esp,0xc
c0016819:	68 40 2a 02 c0       	push   0xc0022a40
c001681e:	e8 e7 40 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016823:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001682a:	e8 1d fa ff ff       	call   c001624c <blockTask(TaskState)>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	66 90                	xchg   ax,ax
c0016834:	83 ec 08             	sub    esp,0x8
c0016837:	56                   	push   esi
c0016838:	68 e4 c6 02 c0       	push   0xc002c6e4
c001683d:	e8 7e 95 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016842:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016849:	e8 ae 94 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	39 f8                	cmp    eax,edi
c0016853:	0f 84 37 ff ff ff    	je     c0016790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016859:	8d 76 00             	lea    esi,[esi+0x0]
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016864:	e8 93 94 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016869:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016870:	89 c6                	mov    esi,eax
c0016872:	e8 8d 94 00 00       	call   c001fd04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	39 f3                	cmp    ebx,esi
c001687c:	74 b6                	je     c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001687e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016881:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016884:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001688a:	75 a8                	jne    c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001688c:	e9 77 ff ff ff       	jmp    c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016891:	8d 76 00             	lea    esi,[esi+0x0]
c0016894:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	68 0c 2a 02 c0       	push   0xc0022a0c
c00168a0:	e9 4b ff ff ff       	jmp    c00167f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00168a5:	8d 76 00             	lea    esi,[esi+0x0]
c00168a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00168ae:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00168b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168b4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00168ba:	01 d7                	add    edi,edx
c00168bc:	89 f8                	mov    eax,edi
c00168be:	e9 51 fe ff ff       	jmp    c0016714 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00168c3:	90                   	nop

c00168c4 <cleanerTaskFunction(void*)>:
c00168c4:	53                   	push   ebx
c00168c5:	83 ec 08             	sub    esp,0x8
c00168c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168cd:	83 e8 01             	sub    eax,0x1
c00168d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168d5:	75 01                	jne    c00168d8 <cleanerTaskFunction(void*)+0x14>
c00168d7:	fb                   	sti    
c00168d8:	fa                   	cli    
c00168d9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168de:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00168e5:	8d 50 01             	lea    edx,[eax+0x1]
c00168e8:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168ee:	0f 84 c4 00 00 00    	je     c00169b8 <cleanerTaskFunction(void*)+0xf4>
c00168f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168f9:	85 c0                	test   eax,eax
c00168fb:	75 03                	jne    c0016900 <cleanerTaskFunction(void*)+0x3c>
c00168fd:	fb                   	sti    
c00168fe:	66 90                	xchg   ax,ax
c0016900:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016907:	fa                   	cli    
c0016908:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001690e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016914:	83 c2 01             	add    edx,0x1
c0016917:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001691d:	83 c1 01             	add    ecx,0x1
c0016920:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016926:	fa                   	cli    
c0016927:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c001692d:	83 c3 01             	add    ebx,0x1
c0016930:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016936:	eb 28                	jmp    c0016960 <cleanerTaskFunction(void*)+0x9c>
c0016938:	83 ec 0c             	sub    esp,0xc
c001693b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016940:	e8 b7 93 00 00       	call   c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016945:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c001694c:	89 c3                	mov    ebx,eax
c001694e:	e8 b1 93 00 00       	call   c001fd04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016956:	e8 95 fc ff ff       	call   c00165f0 <cleanupTerminatedTask(ThreadControlBlock*)>
c001695b:	83 c4 10             	add    esp,0x10
c001695e:	66 90                	xchg   ax,ax
c0016960:	83 ec 0c             	sub    esp,0xc
c0016963:	68 cc c6 02 c0       	push   0xc002c6cc
c0016968:	e8 73 93 00 00       	call   c001fce0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001696d:	83 c4 10             	add    esp,0x10
c0016970:	84 c0                	test   al,al
c0016972:	74 c4                	je     c0016938 <cleanerTaskFunction(void*)+0x74>
c0016974:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016979:	83 e8 01             	sub    eax,0x1
c001697c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016981:	75 01                	jne    c0016984 <cleanerTaskFunction(void*)+0xc0>
c0016983:	fb                   	sti    
c0016984:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016989:	83 e8 01             	sub    eax,0x1
c001698c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016991:	0f 85 31 ff ff ff    	jne    c00168c8 <cleanerTaskFunction(void*)+0x4>
c0016997:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001699c:	85 c0                	test   eax,eax
c001699e:	0f 84 24 ff ff ff    	je     c00168c8 <cleanerTaskFunction(void*)+0x4>
c00169a4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00169ae:	e8 99 f6 ff ff       	call   c001604c <schedule()>
c00169b3:	e9 10 ff ff ff       	jmp    c00168c8 <cleanerTaskFunction(void*)+0x4>
c00169b8:	83 ec 0c             	sub    esp,0xc
c00169bb:	6a 02                	push   0x2
c00169bd:	e8 62 f8 ff ff       	call   c0016224 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	e9 36 ff ff ff       	jmp    c0016900 <cleanerTaskFunction(void*)+0x3c>
c00169ca:	66 90                	xchg   ax,ax

c00169cc <terminateTask(int)>:
c00169cc:	83 ec 14             	sub    esp,0x14
c00169cf:	fa                   	cli    
c00169d0:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169d6:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169dc:	83 c2 01             	add    edx,0x1
c00169df:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169e5:	83 c1 01             	add    ecx,0x1
c00169e8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169ee:	fa                   	cli    
c00169ef:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00169f8:	83 c0 01             	add    eax,0x1
c00169fb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a05:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a0d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a10:	50                   	push   eax
c0016a11:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a16:	e8 a5 93 00 00       	call   c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a20:	83 c4 10             	add    esp,0x10
c0016a23:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a2a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a2f:	85 c0                	test   eax,eax
c0016a31:	74 65                	je     c0016a98 <terminateTask(int)+0xcc>
c0016a33:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	50                   	push   eax
c0016a3e:	e8 01 fb ff ff       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	66 90                	xchg   ax,ax
c0016a48:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a4d:	83 e8 01             	sub    eax,0x1
c0016a50:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a55:	75 01                	jne    c0016a58 <terminateTask(int)+0x8c>
c0016a57:	fb                   	sti    
c0016a58:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a5d:	83 e8 01             	sub    eax,0x1
c0016a60:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a65:	75 09                	jne    c0016a70 <terminateTask(int)+0xa4>
c0016a67:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016a6e:	75 3c                	jne    c0016aac <terminateTask(int)+0xe0>
c0016a70:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a75:	83 e8 01             	sub    eax,0x1
c0016a78:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a7d:	75 01                	jne    c0016a80 <terminateTask(int)+0xb4>
c0016a7f:	fb                   	sti    
c0016a80:	fa                   	cli    
c0016a81:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a86:	83 c0 01             	add    eax,0x1
c0016a89:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a8e:	66 90                	xchg   ax,ax
c0016a90:	e8 b7 f5 ff ff       	call   c001604c <schedule()>
c0016a95:	eb d9                	jmp    c0016a70 <terminateTask(int)+0xa4>
c0016a97:	90                   	nop
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	68 3a 29 02 c0       	push   0xc002293a
c0016aa0:	e8 65 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016aa5:	83 c4 10             	add    esp,0x10
c0016aa8:	eb 9e                	jmp    c0016a48 <terminateTask(int)+0x7c>
c0016aaa:	66 90                	xchg   ax,ax
c0016aac:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ab6:	eb d8                	jmp    c0016a90 <terminateTask(int)+0xc4>

c0016ab8 <Thr::terminateFromIRQ(int)>:
c0016ab8:	83 ec 18             	sub    esp,0x18
c0016abb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016abf:	50                   	push   eax
c0016ac0:	e8 07 ff ff ff       	call   c00169cc <terminateTask(int)>
c0016ac5:	90                   	nop
c0016ac6:	66 90                	xchg   ax,ax

c0016ac8 <Semaphore::release()>:
c0016ac8:	83 ec 0c             	sub    esp,0xc
c0016acb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016acf:	fa                   	cli    
c0016ad0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ad5:	83 c0 01             	add    eax,0x1
c0016ad8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016add:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ae2:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ae5:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016aeb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016aee:	85 c9                	test   ecx,ecx
c0016af0:	74 42                	je     c0016b34 <Semaphore::release()+0x6c>
c0016af2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016af5:	83 ec 0c             	sub    esp,0xc
c0016af8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016afb:	51                   	push   ecx
c0016afc:	e8 43 fa ff ff       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c0016b01:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	83 e8 01             	sub    eax,0x1
c0016b0c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b11:	85 c0                	test   eax,eax
c0016b13:	75 0b                	jne    c0016b20 <Semaphore::release()+0x58>
c0016b15:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b1a:	85 c0                	test   eax,eax
c0016b1c:	75 22                	jne    c0016b40 <Semaphore::release()+0x78>
c0016b1e:	66 90                	xchg   ax,ax
c0016b20:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b25:	83 e8 01             	sub    eax,0x1
c0016b28:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b2d:	75 01                	jne    c0016b30 <Semaphore::release()+0x68>
c0016b2f:	fb                   	sti    
c0016b30:	83 c4 0c             	add    esp,0xc
c0016b33:	c3                   	ret    
c0016b34:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b37:	83 e9 01             	sub    ecx,0x1
c0016b3a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b3d:	eb cd                	jmp    c0016b0c <Semaphore::release()+0x44>
c0016b3f:	90                   	nop
c0016b40:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b4a:	e8 fd f4 ff ff       	call   c001604c <schedule()>
c0016b4f:	eb cf                	jmp    c0016b20 <Semaphore::release()+0x58>
c0016b51:	8d 76 00             	lea    esi,[esi+0x0]

c0016b54 <__static_initialization_and_destruction_0(int, int)>:
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b5c:	0f 85 8e 00 00 00    	jne    c0016bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b62:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b6a:	0f 85 80 00 00 00    	jne    c0016bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b78:	e8 f7 94 00 00       	call   c0020074 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	83 ec 04             	sub    esp,0x4
c0016b83:	68 10 36 02 c0       	push   0xc0023610
c0016b88:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b8d:	68 24 00 02 c0       	push   0xc0020024
c0016b92:	e8 25 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b97:	83 c4 10             	add    esp,0x10
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016ba2:	e8 cd 94 00 00       	call   c0020074 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ba7:	83 c4 10             	add    esp,0x10
c0016baa:	83 ec 04             	sub    esp,0x4
c0016bad:	68 10 36 02 c0       	push   0xc0023610
c0016bb2:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016bb7:	68 24 00 02 c0       	push   0xc0020024
c0016bbc:	e8 fb 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016bc1:	83 c4 10             	add    esp,0x10
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	68 cc c6 02 c0       	push   0xc002c6cc
c0016bcc:	e8 a3 94 00 00       	call   c0020074 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	83 ec 04             	sub    esp,0x4
c0016bd7:	68 10 36 02 c0       	push   0xc0023610
c0016bdc:	68 cc c6 02 c0       	push   0xc002c6cc
c0016be1:	68 24 00 02 c0       	push   0xc0020024
c0016be6:	e8 d1 3b ff ff       	call   c000a7bc <__cxa_atexit>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	66 90                	xchg   ax,ax
c0016bf0:	90                   	nop
c0016bf1:	83 c4 0c             	add    esp,0xc
c0016bf4:	c3                   	ret    
c0016bf5:	8d 76 00             	lea    esi,[esi+0x0]

c0016bf8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	83 ec 08             	sub    esp,0x8
c0016bfe:	68 ff ff 00 00       	push   0xffff
c0016c03:	6a 01                	push   0x1
c0016c05:	e8 4a ff ff ff       	call   c0016b54 <__static_initialization_and_destruction_0(int, int)>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	83 c4 0c             	add    esp,0xc
c0016c10:	c3                   	ret    

c0016c11 <Vm::inbv(unsigned short)>:
c0016c11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c15:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c1a:	75 06                	jne    c0016c22 <Vm::inbv(unsigned short)+0x11>
c0016c1c:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016c21:	c3                   	ret    
c0016c22:	ec                   	in     al,dx
c0016c23:	c3                   	ret    

c0016c24 <Vm::outbv(unsigned short, unsigned char)>:
c0016c24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c2c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c31:	75 25                	jne    c0016c58 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c33:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c39:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c3f:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c42:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016c48:	83 fa 20             	cmp    edx,0x20
c0016c4b:	75 0c                	jne    c0016c59 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c4d:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016c57:	c3                   	ret    
c0016c58:	ee                   	out    dx,al
c0016c59:	c3                   	ret    

c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c64:	c1 e0 04             	shl    eax,0x4
c0016c67:	01 d0                	add    eax,edx
c0016c69:	c3                   	ret    

c0016c6a <Vm::getSegment(unsigned int)>:
c0016c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c6e:	c1 e8 10             	shr    eax,0x10
c0016c71:	c3                   	ret    

c0016c72 <Vm::getOffset(unsigned int)>:
c0016c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c76:	c3                   	ret    

c0016c77 <Vm::mainloop2()>:
c0016c77:	83 ec 18             	sub    esp,0x18
c0016c7a:	fa                   	cli    
c0016c7b:	6a 02                	push   0x2
c0016c7d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c83:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016c8a:	e8 95 f5 ff ff       	call   c0016224 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c94:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016c98:	52                   	push   edx
c0016c99:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016c9d:	52                   	push   edx
c0016c9e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016ca2:	52                   	push   edx
c0016ca3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016ca7:	50                   	push   eax
c0016ca8:	e8 62 95 fe ff       	call   c000020f <goToVM86>
c0016cad:	83 c4 2c             	add    esp,0x2c
c0016cb0:	c3                   	ret    

c0016cb1 <Vm::mainVm8086Loop(void*)>:
c0016cb1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016cb6:	48                   	dec    eax
c0016cb7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016cbc:	75 01                	jne    c0016cbf <Vm::mainVm8086Loop(void*)+0xe>
c0016cbe:	fb                   	sti    
c0016cbf:	eb b6                	jmp    c0016c77 <Vm::mainloop2()>

c0016cc1 <Vm::mainloop3(unsigned long)>:
c0016cc1:	83 ec 18             	sub    esp,0x18
c0016cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cc8:	fa                   	cli    
c0016cc9:	6a 02                	push   0x2
c0016ccb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016cd1:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016cd8:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016cdd:	e8 42 f5 ff ff       	call   c0016224 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ce2:	83 c4 1c             	add    esp,0x1c
c0016ce5:	eb 90                	jmp    c0016c77 <Vm::mainloop2()>

c0016ce7 <Vm::initialise8086()>:
c0016ce7:	83 ec 0c             	sub    esp,0xc
c0016cea:	68 80 00 00 00       	push   0x80
c0016cef:	6a 00                	push   0x0
c0016cf1:	68 b1 6c 01 c0       	push   0xc0016cb1
c0016cf6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016cfc:	e8 ff f0 ff ff       	call   c0015e00 <Process::createThread(void (*)(void*), void*, int)>
c0016d01:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d08:	68 00 01 00 00       	push   0x100
c0016d0d:	6a 00                	push   0x0
c0016d0f:	6a 00                	push   0x0
c0016d11:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d16:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016d1b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d21:	e8 e2 31 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d26:	83 c4 2c             	add    esp,0x2c
c0016d29:	c3                   	ret    

c0016d2a <Vm::finish8086()>:
c0016d2a:	53                   	push   ebx
c0016d2b:	83 ec 08             	sub    esp,0x8
c0016d2e:	fa                   	cli    
c0016d2f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d35:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d3c:	75 15                	jne    c0016d53 <Vm::finish8086()+0x29>
c0016d3e:	e8 09 f3 ff ff       	call   c001604c <schedule()>
c0016d43:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d48:	48                   	dec    eax
c0016d49:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d4e:	75 de                	jne    c0016d2e <Vm::finish8086()+0x4>
c0016d50:	fb                   	sti    
c0016d51:	eb db                	jmp    c0016d2e <Vm::finish8086()+0x4>
c0016d53:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016d5a:	83 ec 0c             	sub    esp,0xc
c0016d5d:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016d63:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016d69:	e8 d6 f7 ff ff       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c0016d6e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	8d 50 ff             	lea    edx,[eax-0x1]
c0016d79:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016d7f:	85 d2                	test   edx,edx
c0016d81:	75 01                	jne    c0016d84 <Vm::finish8086()+0x5a>
c0016d83:	fb                   	sti    
c0016d84:	83 c4 08             	add    esp,0x8
c0016d87:	89 d8                	mov    eax,ebx
c0016d89:	5b                   	pop    ebx
c0016d8a:	c3                   	ret    

c0016d8b <Vm::getOutput8086(unsigned char*)>:
c0016d8b:	57                   	push   edi
c0016d8c:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d92:	56                   	push   esi
c0016d93:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016d98:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016d9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d9e:	5e                   	pop    esi
c0016d9f:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016da4:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016dae:	5f                   	pop    edi
c0016daf:	c3                   	ret    

c0016db0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016db0:	55                   	push   ebp
c0016db1:	57                   	push   edi
c0016db2:	56                   	push   esi
c0016db3:	53                   	push   ebx
c0016db4:	83 ec 0c             	sub    esp,0xc
c0016db7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016dbb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016dbf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016dc3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016dc7:	fa                   	cli    
c0016dc8:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dce:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016dd5:	75 15                	jne    c0016dec <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016dd7:	e8 70 f2 ff ff       	call   c001604c <schedule()>
c0016ddc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016de1:	48                   	dec    eax
c0016de2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016de7:	75 de                	jne    c0016dc7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016de9:	fb                   	sti    
c0016dea:	eb db                	jmp    c0016dc7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016dec:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016df6:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016dfb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016dff:	0f b7 ff             	movzx  edi,di
c0016e02:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e06:	0f b7 f6             	movzx  esi,si
c0016e09:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e0d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e11:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e15:	50                   	push   eax
c0016e16:	6a 20                	push   0x20
c0016e18:	6a 00                	push   0x0
c0016e1a:	68 40 c7 02 c0       	push   0xc002c740
c0016e1f:	e8 cc 96 fe ff       	call   c00004f0 <memset>
c0016e24:	5a                   	pop    edx
c0016e25:	59                   	pop    ecx
c0016e26:	57                   	push   edi
c0016e27:	56                   	push   esi
c0016e28:	e8 2d fe ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016e2d:	83 c4 10             	add    esp,0x10
c0016e30:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e38:	89 c7                	mov    edi,eax
c0016e3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e3c:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e43:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e48:	48                   	dec    eax
c0016e49:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e4e:	75 01                	jne    c0016e51 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016e50:	fb                   	sti    
c0016e51:	83 ec 0c             	sub    esp,0xc
c0016e54:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e5a:	e8 e5 f6 ff ff       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c0016e5f:	83 c4 1c             	add    esp,0x1c
c0016e62:	b0 01                	mov    al,0x1
c0016e64:	5b                   	pop    ebx
c0016e65:	5e                   	pop    esi
c0016e66:	5f                   	pop    edi
c0016e67:	5d                   	pop    ebp
c0016e68:	c3                   	ret    

c0016e69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e69:	55                   	push   ebp
c0016e6a:	57                   	push   edi
c0016e6b:	56                   	push   esi
c0016e6c:	53                   	push   ebx
c0016e6d:	83 ec 34             	sub    esp,0x34
c0016e70:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016e74:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016e78:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016e7c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016e80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e84:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e88:	68 68 2a 02 c0       	push   0xc0022a68
c0016e8d:	e8 78 3a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016e92:	83 c4 10             	add    esp,0x10
c0016e95:	fa                   	cli    
c0016e96:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016e9c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ea2:	84 db                	test   bl,bl
c0016ea4:	75 15                	jne    c0016ebb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016ea6:	e8 a1 f1 ff ff       	call   c001604c <schedule()>
c0016eab:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016eb0:	48                   	dec    eax
c0016eb1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016eb6:	75 dd                	jne    c0016e95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016eb8:	fb                   	sti    
c0016eb9:	eb da                	jmp    c0016e95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ebb:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ec5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ec9:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ece:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016ed2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ed6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016eda:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ede:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ee2:	50                   	push   eax
c0016ee3:	6a 20                	push   0x20
c0016ee5:	6a 00                	push   0x0
c0016ee7:	68 40 c7 02 c0       	push   0xc002c740
c0016eec:	e8 ff 95 fe ff       	call   c00004f0 <memset>
c0016ef1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ef8:	e8 d6 0b ff ff       	call   c0007ad3 <malloc>
c0016efd:	83 c4 0c             	add    esp,0xc
c0016f00:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f06:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f0a:	89 c5                	mov    ebp,eax
c0016f0c:	50                   	push   eax
c0016f0d:	e8 46 4c ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0016f12:	83 c4 10             	add    esp,0x10
c0016f15:	85 ed                	test   ebp,ebp
c0016f17:	75 0a                	jne    c0016f23 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016f19:	83 ec 0c             	sub    esp,0xc
c0016f1c:	68 8a 2a 02 c0       	push   0xc0022a8a
c0016f21:	eb 2b                	jmp    c0016f4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016f23:	50                   	push   eax
c0016f24:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f28:	50                   	push   eax
c0016f29:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f2d:	50                   	push   eax
c0016f2e:	55                   	push   ebp
c0016f2f:	e8 44 4f ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0016f34:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f38:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f3c:	83 c4 10             	add    esp,0x10
c0016f3f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016f44:	74 27                	je     c0016f6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016f46:	83 ec 0c             	sub    esp,0xc
c0016f49:	68 9e 2a 02 c0       	push   0xc0022a9e
c0016f4e:	e8 4c a6 ff ff       	call   c001159f <KePanic(char const*)>
c0016f53:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f58:	83 c4 10             	add    esp,0x10
c0016f5b:	48                   	dec    eax
c0016f5c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f61:	85 c0                	test   eax,eax
c0016f63:	75 01                	jne    c0016f66 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f65:	fb                   	sti    
c0016f66:	31 db                	xor    ebx,ebx
c0016f68:	e9 90 00 00 00       	jmp    c0016ffd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f6d:	51                   	push   ecx
c0016f6e:	51                   	push   ecx
c0016f6f:	6a 01                	push   0x1
c0016f71:	55                   	push   ebp
c0016f72:	e8 ff 4b ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0016f77:	83 c4 10             	add    esp,0x10
c0016f7a:	85 c0                	test   eax,eax
c0016f7c:	74 26                	je     c0016fa4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016f7e:	83 ec 0c             	sub    esp,0xc
c0016f81:	68 b7 2a 02 c0       	push   0xc0022ab7
c0016f86:	e8 14 a6 ff ff       	call   c001159f <KePanic(char const*)>
c0016f8b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f90:	83 c4 10             	add    esp,0x10
c0016f93:	48                   	dec    eax
c0016f94:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f99:	85 c0                	test   eax,eax
c0016f9b:	75 c9                	jne    c0016f66 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f9d:	fb                   	sti    
c0016f9e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016fa2:	eb 59                	jmp    c0016ffd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016fa4:	50                   	push   eax
c0016fa5:	0f b7 ff             	movzx  edi,di
c0016fa8:	50                   	push   eax
c0016fa9:	0f b7 f6             	movzx  esi,si
c0016fac:	57                   	push   edi
c0016fad:	56                   	push   esi
c0016fae:	e8 a7 fc ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016fb3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fb6:	5a                   	pop    edx
c0016fb7:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016fbb:	56                   	push   esi
c0016fbc:	50                   	push   eax
c0016fbd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fc5:	55                   	push   ebp
c0016fc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fc9:	83 c4 14             	add    esp,0x14
c0016fcc:	55                   	push   ebp
c0016fcd:	e8 02 4c ff ff       	call   c000bbd4 <File::close()>
c0016fd2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016fe1:	48                   	dec    eax
c0016fe2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fe7:	85 c0                	test   eax,eax
c0016fe9:	75 01                	jne    c0016fec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016feb:	fb                   	sti    
c0016fec:	83 ec 0c             	sub    esp,0xc
c0016fef:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016ff5:	e8 4a f5 ff ff       	call   c0016544 <unblockTask(ThreadControlBlock*)>
c0016ffa:	83 c4 10             	add    esp,0x10
c0016ffd:	83 c4 2c             	add    esp,0x2c
c0017000:	88 d8                	mov    al,bl
c0017002:	5b                   	pop    ebx
c0017003:	5e                   	pop    esi
c0017004:	5f                   	pop    edi
c0017005:	5d                   	pop    ebp
c0017006:	c3                   	ret    

c0017007 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017007:	57                   	push   edi
c0017008:	56                   	push   esi
c0017009:	53                   	push   ebx
c001700a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017012:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017016:	83 e8 06             	sub    eax,0x6
c0017019:	0f b7 c0             	movzx  eax,ax
c001701c:	50                   	push   eax
c001701d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017022:	50                   	push   eax
c0017023:	e8 32 fc ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0017028:	5a                   	pop    edx
c0017029:	59                   	pop    ecx
c001702a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001702d:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017030:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017033:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017039:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001703c:	8d 51 02             	lea    edx,[ecx+0x2]
c001703f:	66 89 10             	mov    WORD PTR [eax],dx
c0017042:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017046:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001704a:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001704e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017051:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017055:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001705b:	89 f1                	mov    ecx,esi
c001705d:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017061:	89 f2                	mov    edx,esi
c0017063:	0f b6 d6             	movzx  edx,dh
c0017066:	0f b6 f1             	movzx  esi,cl
c0017069:	74 0a                	je     c0017075 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001706b:	c1 e2 08             	shl    edx,0x8
c001706e:	09 f2                	or     edx,esi
c0017070:	80 ce 02             	or     dh,0x2
c0017073:	eb 08                	jmp    c001707d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0017075:	c1 e2 08             	shl    edx,0x8
c0017078:	09 f2                	or     edx,esi
c001707a:	80 e6 fd             	and    dh,0xfd
c001707d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017081:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017086:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001708a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017092:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017095:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001709d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00170a0:	5b                   	pop    ebx
c00170a1:	5e                   	pop    esi
c00170a2:	5f                   	pop    edi
c00170a3:	c3                   	ret    

c00170a4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00170a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170ae:	c1 e0 04             	shl    eax,0x4
c00170b1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00170b4:	c3                   	ret    

c00170b5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00170b5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170ba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170bf:	c1 e0 04             	shl    eax,0x4
c00170c2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00170c6:	c3                   	ret    

c00170c7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00170c7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170cc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170d1:	c1 e0 04             	shl    eax,0x4
c00170d4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00170d7:	c3                   	ret    

c00170d8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00170d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170dd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170e2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00170e6:	c1 e0 04             	shl    eax,0x4
c00170e9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00170ec:	c3                   	ret    

c00170ed <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00170ed:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170f2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170fb:	c1 e0 04             	shl    eax,0x4
c00170fe:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017102:	c3                   	ret    

c0017103 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017103:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017108:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001710d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017111:	c1 e0 04             	shl    eax,0x4
c0017114:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017117:	c3                   	ret    

c0017118 <Vm::faultHandler(regs*)>:
c0017118:	55                   	push   ebp
c0017119:	57                   	push   edi
c001711a:	56                   	push   esi
c001711b:	53                   	push   ebx
c001711c:	83 ec 2c             	sub    esp,0x2c
c001711f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017123:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017126:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001712a:	0f b7 f8             	movzx  edi,ax
c001712d:	0f b7 c0             	movzx  eax,ax
c0017130:	52                   	push   edx
c0017131:	50                   	push   eax
c0017132:	e8 23 fb ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0017137:	5a                   	pop    edx
c0017138:	59                   	pop    ecx
c0017139:	89 c1                	mov    ecx,eax
c001713b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001713e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017142:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017147:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001714b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001714e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017152:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017157:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001715b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001715f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017163:	e8 f2 fa ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0017168:	5e                   	pop    esi
c0017169:	be 06 00 00 00       	mov    esi,0x6
c001716e:	5d                   	pop    ebp
c001716f:	31 ed                	xor    ebp,ebp
c0017171:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017176:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017179:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001717f:	0f 84 74 02 00 00    	je     c00173f9 <Vm::faultHandler(regs*)+0x2e1>
c0017185:	0f 87 94 00 00 00    	ja     c001721f <Vm::faultHandler(regs*)+0x107>
c001718b:	83 fa 66             	cmp    edx,0x66
c001718e:	0f 84 e2 01 00 00    	je     c0017376 <Vm::faultHandler(regs*)+0x25e>
c0017194:	77 47                	ja     c00171dd <Vm::faultHandler(regs*)+0xc5>
c0017196:	83 fa 36             	cmp    edx,0x36
c0017199:	0f 84 ca 01 00 00    	je     c0017369 <Vm::faultHandler(regs*)+0x251>
c001719f:	77 1a                	ja     c00171bb <Vm::faultHandler(regs*)+0xa3>
c00171a1:	83 fa 26             	cmp    edx,0x26
c00171a4:	0f 84 98 01 00 00    	je     c0017342 <Vm::faultHandler(regs*)+0x22a>
c00171aa:	83 fa 2e             	cmp    edx,0x2e
c00171ad:	0f 85 27 06 00 00    	jne    c00177da <Vm::faultHandler(regs*)+0x6c2>
c00171b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171b6:	31 f6                	xor    esi,esi
c00171b8:	41                   	inc    ecx
c00171b9:	eb bb                	jmp    c0017176 <Vm::faultHandler(regs*)+0x5e>
c00171bb:	83 fa 64             	cmp    edx,0x64
c00171be:	0f 84 8b 01 00 00    	je     c001734f <Vm::faultHandler(regs*)+0x237>
c00171c4:	0f 87 92 01 00 00    	ja     c001735c <Vm::faultHandler(regs*)+0x244>
c00171ca:	83 fa 3e             	cmp    edx,0x3e
c00171cd:	0f 85 07 06 00 00    	jne    c00177da <Vm::faultHandler(regs*)+0x6c2>
c00171d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171d6:	be 01 00 00 00       	mov    esi,0x1
c00171db:	eb db                	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c00171dd:	83 fa 6d             	cmp    edx,0x6d
c00171e0:	0f 84 34 03 00 00    	je     c001751a <Vm::faultHandler(regs*)+0x402>
c00171e6:	77 17                	ja     c00171ff <Vm::faultHandler(regs*)+0xe7>
c00171e8:	83 fa 67             	cmp    edx,0x67
c00171eb:	0f 84 92 01 00 00    	je     c0017383 <Vm::faultHandler(regs*)+0x26b>
c00171f1:	83 fa 6c             	cmp    edx,0x6c
c00171f4:	0f 84 b1 02 00 00    	je     c00174ab <Vm::faultHandler(regs*)+0x393>
c00171fa:	e9 db 05 00 00       	jmp    c00177da <Vm::faultHandler(regs*)+0x6c2>
c00171ff:	83 fa 6f             	cmp    edx,0x6f
c0017202:	0f 84 40 04 00 00    	je     c0017648 <Vm::faultHandler(regs*)+0x530>
c0017208:	0f 82 a2 03 00 00    	jb     c00175b0 <Vm::faultHandler(regs*)+0x498>
c001720e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017214:	0f 84 76 01 00 00    	je     c0017390 <Vm::faultHandler(regs*)+0x278>
c001721a:	e9 bb 05 00 00       	jmp    c00177da <Vm::faultHandler(regs*)+0x6c2>
c001721f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017225:	0f 84 57 05 00 00    	je     c0017782 <Vm::faultHandler(regs*)+0x66a>
c001722b:	0f 87 a9 00 00 00    	ja     c00172da <Vm::faultHandler(regs*)+0x1c2>
c0017231:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017237:	0f 84 d6 04 00 00    	je     c0017713 <Vm::faultHandler(regs*)+0x5fb>
c001723d:	77 78                	ja     c00172b7 <Vm::faultHandler(regs*)+0x19f>
c001723f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017245:	0f 84 0e 02 00 00    	je     c0017459 <Vm::faultHandler(regs*)+0x341>
c001724b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017251:	0f 85 83 05 00 00    	jne    c00177da <Vm::faultHandler(regs*)+0x6c2>
c0017257:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001725b:	89 d1                	mov    ecx,edx
c001725d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017260:	c1 e1 08             	shl    ecx,0x8
c0017263:	09 ca                	or     edx,ecx
c0017265:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017268:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001726c:	89 d1                	mov    ecx,edx
c001726e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017272:	c1 e1 08             	shl    ecx,0x8
c0017275:	09 ca                	or     edx,ecx
c0017277:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001727a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001727e:	89 d1                	mov    ecx,edx
c0017280:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017284:	c1 e1 08             	shl    ecx,0x8
c0017287:	09 ca                	or     edx,ecx
c0017289:	81 ca 00 02 02 00    	or     edx,0x20200
c001728f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017292:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017296:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001729c:	d1 e8                	shr    eax,1
c001729e:	83 e0 01             	and    eax,0x1
c00172a1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172a4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172a7:	83 c0 06             	add    eax,0x6
c00172aa:	25 ff ff 00 00       	and    eax,0xffff
c00172af:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00172b2:	e9 1f 05 00 00       	jmp    c00177d6 <Vm::faultHandler(regs*)+0x6be>
c00172b7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00172bd:	0f 84 95 04 00 00    	je     c0017758 <Vm::faultHandler(regs*)+0x640>
c00172c3:	0f 82 66 04 00 00    	jb     c001772f <Vm::faultHandler(regs*)+0x617>
c00172c9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00172cf:	0f 84 9a 04 00 00    	je     c001776f <Vm::faultHandler(regs*)+0x657>
c00172d5:	e9 00 05 00 00       	jmp    c00177da <Vm::faultHandler(regs*)+0x6c2>
c00172da:	81 fa ef 00 00 00    	cmp    edx,0xef
c00172e0:	0f 84 dd 04 00 00    	je     c00177c3 <Vm::faultHandler(regs*)+0x6ab>
c00172e6:	77 2e                	ja     c0017316 <Vm::faultHandler(regs*)+0x1fe>
c00172e8:	81 fa ed 00 00 00    	cmp    edx,0xed
c00172ee:	0f 84 aa 04 00 00    	je     c001779e <Vm::faultHandler(regs*)+0x686>
c00172f4:	81 fa ee 00 00 00    	cmp    edx,0xee
c00172fa:	0f 85 da 04 00 00    	jne    c00177da <Vm::faultHandler(regs*)+0x6c2>
c0017300:	50                   	push   eax
c0017301:	50                   	push   eax
c0017302:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017306:	50                   	push   eax
c0017307:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001730b:	50                   	push   eax
c001730c:	e8 13 f9 ff ff       	call   c0016c24 <Vm::outbv(unsigned short, unsigned char)>
c0017311:	e9 a5 04 00 00       	jmp    c00177bb <Vm::faultHandler(regs*)+0x6a3>
c0017316:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001731c:	0f 84 6d 01 00 00    	je     c001748f <Vm::faultHandler(regs*)+0x377>
c0017322:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017328:	0f 84 6f 01 00 00    	je     c001749d <Vm::faultHandler(regs*)+0x385>
c001732e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017334:	0f 85 a0 04 00 00    	jne    c00177da <Vm::faultHandler(regs*)+0x6c2>
c001733a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001733d:	e9 76 fe ff ff       	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c0017342:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017345:	be 02 00 00 00       	mov    esi,0x2
c001734a:	e9 69 fe ff ff       	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c001734f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017352:	be 03 00 00 00       	mov    esi,0x3
c0017357:	e9 5c fe ff ff       	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c001735c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001735f:	be 04 00 00 00       	mov    esi,0x4
c0017364:	e9 4f fe ff ff       	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c0017369:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001736c:	be 05 00 00 00       	mov    esi,0x5
c0017371:	e9 42 fe ff ff       	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c0017376:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017379:	bd 01 00 00 00       	mov    ebp,0x1
c001737e:	e9 35 fe ff ff       	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c0017383:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017386:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001738b:	e9 28 fe ff ff       	jmp    c00171b8 <Vm::faultHandler(regs*)+0xa0>
c0017390:	83 e5 01             	and    ebp,0x1
c0017393:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017396:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001739a:	74 30                	je     c00173cc <Vm::faultHandler(regs*)+0x2b4>
c001739c:	83 e9 04             	sub    ecx,0x4
c001739f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173a5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00173ab:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00173ae:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00173b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173b7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00173bb:	0f 84 12 04 00 00    	je     c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c00173c1:	80 ce 02             	or     dh,0x2
c00173c4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00173c7:	e9 07 04 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c00173cc:	83 e9 02             	sub    ecx,0x2
c00173cf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00173d5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00173d8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173dc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173e2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00173e6:	74 05                	je     c00173ed <Vm::faultHandler(regs*)+0x2d5>
c00173e8:	80 ce 02             	or     dh,0x2
c00173eb:	eb 03                	jmp    c00173f0 <Vm::faultHandler(regs*)+0x2d8>
c00173ed:	80 e6 fd             	and    dh,0xfd
c00173f0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173f4:	e9 da 03 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c00173f9:	83 e5 01             	and    ebp,0x1
c00173fc:	74 2a                	je     c0017428 <Vm::faultHandler(regs*)+0x310>
c00173fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0017400:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017406:	81 ca 00 02 02 00    	or     edx,0x20200
c001740c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001740f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017411:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017417:	c1 e8 09             	shr    eax,0x9
c001741a:	83 e0 01             	and    eax,0x1
c001741d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017420:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017423:	83 c0 04             	add    eax,0x4
c0017426:	eb 24                	jmp    c001744c <Vm::faultHandler(regs*)+0x334>
c0017428:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001742b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017431:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017434:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017437:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001743d:	c1 e8 09             	shr    eax,0x9
c0017440:	83 e0 01             	and    eax,0x1
c0017443:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017446:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017449:	83 c0 02             	add    eax,0x2
c001744c:	25 ff ff 00 00       	and    eax,0xffff
c0017451:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017454:	e9 7a 03 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c0017459:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001745d:	3d ee 00 00 00       	cmp    eax,0xee
c0017462:	75 10                	jne    c0017474 <Vm::faultHandler(regs*)+0x35c>
c0017464:	83 ec 0c             	sub    esp,0xc
c0017467:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001746a:	e8 52 f8 ff ff       	call   c0016cc1 <Vm::mainloop3(unsigned long)>
c001746f:	e9 4a 03 00 00       	jmp    c00177be <Vm::faultHandler(regs*)+0x6a6>
c0017474:	83 ec 0c             	sub    esp,0xc
c0017477:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001747b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001747f:	51                   	push   ecx
c0017480:	50                   	push   eax
c0017481:	53                   	push   ebx
c0017482:	e8 80 fb ff ff       	call   c0017007 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017487:	83 c4 20             	add    esp,0x20
c001748a:	e9 47 03 00 00       	jmp    c00177d6 <Vm::faultHandler(regs*)+0x6be>
c001748f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017494:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017498:	e9 36 03 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c001749d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174a2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00174a6:	e9 28 03 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c00174ab:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00174b0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174b3:	74 2b                	je     c00174e0 <Vm::faultHandler(regs*)+0x3c8>
c00174b5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00174bc:	76 22                	jbe    c00174e0 <Vm::faultHandler(regs*)+0x3c8>
c00174be:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174c2:	50                   	push   eax
c00174c3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174c7:	50                   	push   eax
c00174c8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174cc:	50                   	push   eax
c00174cd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174d1:	50                   	push   eax
c00174d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174d6:	50                   	push   eax
c00174d7:	6a 6c                	push   0x6c
c00174d9:	6a 6c                	push   0x6c
c00174db:	e9 c0 01 00 00       	jmp    c00176a0 <Vm::faultHandler(regs*)+0x588>
c00174e0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174e4:	83 ec 0c             	sub    esp,0xc
c00174e7:	0f b7 f6             	movzx  esi,si
c00174ea:	50                   	push   eax
c00174eb:	e8 21 f7 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c00174f0:	83 c4 0c             	add    esp,0xc
c00174f3:	0f b6 c0             	movzx  eax,al
c00174f6:	50                   	push   eax
c00174f7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00174fb:	50                   	push   eax
c00174fc:	56                   	push   esi
c00174fd:	e8 d6 fb ff ff       	call   c00170d8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017502:	83 c4 10             	add    esp,0x10
c0017505:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017508:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001750c:	74 03                	je     c0017511 <Vm::faultHandler(regs*)+0x3f9>
c001750e:	48                   	dec    eax
c001750f:	eb 01                	jmp    c0017512 <Vm::faultHandler(regs*)+0x3fa>
c0017511:	40                   	inc    eax
c0017512:	0f b7 c0             	movzx  eax,ax
c0017515:	e9 8e 00 00 00       	jmp    c00175a8 <Vm::faultHandler(regs*)+0x490>
c001751a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001751f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017522:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017525:	74 29                	je     c0017550 <Vm::faultHandler(regs*)+0x438>
c0017527:	3d ff ff 00 00       	cmp    eax,0xffff
c001752c:	76 22                	jbe    c0017550 <Vm::faultHandler(regs*)+0x438>
c001752e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017532:	50                   	push   eax
c0017533:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017537:	50                   	push   eax
c0017538:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001753c:	50                   	push   eax
c001753d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017541:	50                   	push   eax
c0017542:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017546:	50                   	push   eax
c0017547:	6a 6d                	push   0x6d
c0017549:	6a 6d                	push   0x6d
c001754b:	e9 50 01 00 00       	jmp    c00176a0 <Vm::faultHandler(regs*)+0x588>
c0017550:	83 e5 01             	and    ebp,0x1
c0017553:	0f b7 c8             	movzx  ecx,ax
c0017556:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017559:	0f b7 f6             	movzx  esi,si
c001755c:	74 1e                	je     c001757c <Vm::faultHandler(regs*)+0x464>
c001755e:	ed                   	in     eax,dx
c001755f:	55                   	push   ebp
c0017560:	50                   	push   eax
c0017561:	51                   	push   ecx
c0017562:	56                   	push   esi
c0017563:	e8 9b fb ff ff       	call   c0017103 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	8d 50 04             	lea    edx,[eax+0x4]
c0017571:	83 e8 04             	sub    eax,0x4
c0017574:	81 e2 ff ff 00 00    	and    edx,0xffff
c001757a:	eb 20                	jmp    c001759c <Vm::faultHandler(regs*)+0x484>
c001757c:	66 ed                	in     ax,dx
c001757e:	57                   	push   edi
c001757f:	0f b7 c0             	movzx  eax,ax
c0017582:	50                   	push   eax
c0017583:	51                   	push   ecx
c0017584:	56                   	push   esi
c0017585:	e8 63 fb ff ff       	call   c00170ed <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001758a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	8d 50 02             	lea    edx,[eax+0x2]
c0017593:	83 e8 02             	sub    eax,0x2
c0017596:	81 e2 ff ff 00 00    	and    edx,0xffff
c001759c:	25 ff ff 00 00       	and    eax,0xffff
c00175a1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175a5:	0f 44 c2             	cmove  eax,edx
c00175a8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00175ab:	e9 23 02 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c00175b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00175b3:	0f b6 f0             	movzx  esi,al
c00175b6:	83 fe 05             	cmp    esi,0x5
c00175b9:	77 23                	ja     c00175de <Vm::faultHandler(regs*)+0x4c6>
c00175bb:	ff 24 b5 2c 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd4d4]
c00175c2:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00175c7:	eb 15                	jmp    c00175de <Vm::faultHandler(regs*)+0x4c6>
c00175c9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00175cd:	eb 0f                	jmp    c00175de <Vm::faultHandler(regs*)+0x4c6>
c00175cf:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00175d3:	eb 09                	jmp    c00175de <Vm::faultHandler(regs*)+0x4c6>
c00175d5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00175d9:	eb 03                	jmp    c00175de <Vm::faultHandler(regs*)+0x4c6>
c00175db:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00175de:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175e6:	74 29                	je     c0017611 <Vm::faultHandler(regs*)+0x4f9>
c00175e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00175ed:	76 22                	jbe    c0017611 <Vm::faultHandler(regs*)+0x4f9>
c00175ef:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175f3:	50                   	push   eax
c00175f4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175f8:	50                   	push   eax
c00175f9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175fd:	50                   	push   eax
c00175fe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017602:	50                   	push   eax
c0017603:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017607:	50                   	push   eax
c0017608:	6a 6e                	push   0x6e
c001760a:	6a 6e                	push   0x6e
c001760c:	e9 8f 00 00 00       	jmp    c00176a0 <Vm::faultHandler(regs*)+0x588>
c0017611:	52                   	push   edx
c0017612:	0f b7 c0             	movzx  eax,ax
c0017615:	52                   	push   edx
c0017616:	50                   	push   eax
c0017617:	57                   	push   edi
c0017618:	e8 87 fa ff ff       	call   c00170a4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001761d:	59                   	pop    ecx
c001761e:	5e                   	pop    esi
c001761f:	0f b6 c0             	movzx  eax,al
c0017622:	50                   	push   eax
c0017623:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017627:	50                   	push   eax
c0017628:	e8 f7 f5 ff ff       	call   c0016c24 <Vm::outbv(unsigned short, unsigned char)>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017633:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017637:	74 03                	je     c001763c <Vm::faultHandler(regs*)+0x524>
c0017639:	48                   	dec    eax
c001763a:	eb 01                	jmp    c001763d <Vm::faultHandler(regs*)+0x525>
c001763c:	40                   	inc    eax
c001763d:	0f b7 c0             	movzx  eax,ax
c0017640:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017643:	e9 8b 01 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c0017648:	8d 46 ff             	lea    eax,[esi-0x1]
c001764b:	0f b6 f0             	movzx  esi,al
c001764e:	83 fe 05             	cmp    esi,0x5
c0017651:	77 1e                	ja     c0017671 <Vm::faultHandler(regs*)+0x559>
c0017653:	ff 24 b5 44 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd4bc]
c001765a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001765e:	eb 11                	jmp    c0017671 <Vm::faultHandler(regs*)+0x559>
c0017660:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017663:	eb 0c                	jmp    c0017671 <Vm::faultHandler(regs*)+0x559>
c0017665:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017668:	eb 07                	jmp    c0017671 <Vm::faultHandler(regs*)+0x559>
c001766a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001766d:	eb 02                	jmp    c0017671 <Vm::faultHandler(regs*)+0x559>
c001766f:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017671:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017676:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017679:	74 37                	je     c00176b2 <Vm::faultHandler(regs*)+0x59a>
c001767b:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017681:	76 2f                	jbe    c00176b2 <Vm::faultHandler(regs*)+0x59a>
c0017683:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017687:	50                   	push   eax
c0017688:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001768c:	50                   	push   eax
c001768d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017691:	50                   	push   eax
c0017692:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017696:	50                   	push   eax
c0017697:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001769b:	50                   	push   eax
c001769c:	6a 6f                	push   0x6f
c001769e:	6a 6f                	push   0x6f
c00176a0:	68 d0 2a 02 c0       	push   0xc0022ad0
c00176a5:	e8 60 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00176aa:	83 c4 20             	add    esp,0x20
c00176ad:	e9 86 01 00 00       	jmp    c0017838 <Vm::faultHandler(regs*)+0x720>
c00176b2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00176b5:	0f b7 d7             	movzx  edx,di
c00176b8:	0f b7 c6             	movzx  eax,si
c00176bb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00176be:	81 e1 00 04 00 00    	and    ecx,0x400
c00176c4:	83 e5 01             	and    ebp,0x1
c00176c7:	74 1c                	je     c00176e5 <Vm::faultHandler(regs*)+0x5cd>
c00176c9:	55                   	push   ebp
c00176ca:	55                   	push   ebp
c00176cb:	50                   	push   eax
c00176cc:	52                   	push   edx
c00176cd:	e8 f5 f9 ff ff       	call   c00170c7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00176d2:	83 c4 10             	add    esp,0x10
c00176d5:	89 fa                	mov    edx,edi
c00176d7:	ef                   	out    dx,eax
c00176d8:	8d 46 04             	lea    eax,[esi+0x4]
c00176db:	83 ee 04             	sub    esi,0x4
c00176de:	25 ff ff 00 00       	and    eax,0xffff
c00176e3:	eb 1b                	jmp    c0017700 <Vm::faultHandler(regs*)+0x5e8>
c00176e5:	55                   	push   ebp
c00176e6:	55                   	push   ebp
c00176e7:	50                   	push   eax
c00176e8:	52                   	push   edx
c00176e9:	e8 c7 f9 ff ff       	call   c00170b5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00176ee:	83 c4 10             	add    esp,0x10
c00176f1:	89 fa                	mov    edx,edi
c00176f3:	66 ef                	out    dx,ax
c00176f5:	8d 46 02             	lea    eax,[esi+0x2]
c00176f8:	83 ee 02             	sub    esi,0x2
c00176fb:	25 ff ff 00 00       	and    eax,0xffff
c0017700:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017706:	85 c9                	test   ecx,ecx
c0017708:	0f 44 f0             	cmove  esi,eax
c001770b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001770e:	e9 c0 00 00 00       	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c0017713:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001771a:	83 ec 0c             	sub    esp,0xc
c001771d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017721:	50                   	push   eax
c0017722:	e8 ea f4 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c0017727:	0f b6 c0             	movzx  eax,al
c001772a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001772d:	eb 3a                	jmp    c0017769 <Vm::faultHandler(regs*)+0x651>
c001772f:	83 e5 01             	and    ebp,0x1
c0017732:	74 07                	je     c001773b <Vm::faultHandler(regs*)+0x623>
c0017734:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017738:	ed                   	in     eax,dx
c0017739:	eb 14                	jmp    c001774f <Vm::faultHandler(regs*)+0x637>
c001773b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001773e:	66 31 f6             	xor    si,si
c0017741:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017744:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017748:	66 ed                	in     ax,dx
c001774a:	0f b7 c0             	movzx  eax,ax
c001774d:	09 f0                	or     eax,esi
c001774f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017752:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017756:	eb 7e                	jmp    c00177d6 <Vm::faultHandler(regs*)+0x6be>
c0017758:	52                   	push   edx
c0017759:	52                   	push   edx
c001775a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001775e:	50                   	push   eax
c001775f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017763:	50                   	push   eax
c0017764:	e8 bb f4 ff ff       	call   c0016c24 <Vm::outbv(unsigned short, unsigned char)>
c0017769:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001776d:	eb 4f                	jmp    c00177be <Vm::faultHandler(regs*)+0x6a6>
c001776f:	83 e5 01             	and    ebp,0x1
c0017772:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017775:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017779:	74 03                	je     c001777e <Vm::faultHandler(regs*)+0x666>
c001777b:	ef                   	out    dx,eax
c001777c:	eb d4                	jmp    c0017752 <Vm::faultHandler(regs*)+0x63a>
c001777e:	66 ef                	out    dx,ax
c0017780:	eb d0                	jmp    c0017752 <Vm::faultHandler(regs*)+0x63a>
c0017782:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017786:	83 ec 0c             	sub    esp,0xc
c0017789:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017790:	50                   	push   eax
c0017791:	e8 7b f4 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c0017796:	0f b6 c0             	movzx  eax,al
c0017799:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001779c:	eb 1d                	jmp    c00177bb <Vm::faultHandler(regs*)+0x6a3>
c001779e:	83 e5 01             	and    ebp,0x1
c00177a1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177a4:	74 03                	je     c00177a9 <Vm::faultHandler(regs*)+0x691>
c00177a6:	ed                   	in     eax,dx
c00177a7:	eb 0d                	jmp    c00177b6 <Vm::faultHandler(regs*)+0x69e>
c00177a9:	66 ed                	in     ax,dx
c00177ab:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00177ae:	0f b7 c0             	movzx  eax,ax
c00177b1:	66 31 d2             	xor    dx,dx
c00177b4:	09 d0                	or     eax,edx
c00177b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177b9:	eb 18                	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c00177bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00177be:	83 c4 10             	add    esp,0x10
c00177c1:	eb 13                	jmp    c00177d6 <Vm::faultHandler(regs*)+0x6be>
c00177c3:	83 e5 01             	and    ebp,0x1
c00177c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177c9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177cc:	74 03                	je     c00177d1 <Vm::faultHandler(regs*)+0x6b9>
c00177ce:	ef                   	out    dx,eax
c00177cf:	eb 02                	jmp    c00177d3 <Vm::faultHandler(regs*)+0x6bb>
c00177d1:	66 ef                	out    dx,ax
c00177d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00177d6:	b0 01                	mov    al,0x1
c00177d8:	eb 60                	jmp    c001783a <Vm::faultHandler(regs*)+0x722>
c00177da:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177de:	50                   	push   eax
c00177df:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177e3:	50                   	push   eax
c00177e4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177e8:	50                   	push   eax
c00177e9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177ed:	50                   	push   eax
c00177ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177f2:	50                   	push   eax
c00177f3:	52                   	push   edx
c00177f4:	52                   	push   edx
c00177f5:	68 fd 2a 02 c0       	push   0xc0022afd
c00177fa:	e8 0b 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00177ff:	83 c4 20             	add    esp,0x20
c0017802:	83 ec 0c             	sub    esp,0xc
c0017805:	6a 60                	push   0x60
c0017807:	e8 05 f4 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	0f b6 d0             	movzx  edx,al
c0017812:	83 fa 1c             	cmp    edx,0x1c
c0017815:	74 05                	je     c001781c <Vm::faultHandler(regs*)+0x704>
c0017817:	83 fa 5a             	cmp    edx,0x5a
c001781a:	75 e6                	jne    c0017802 <Vm::faultHandler(regs*)+0x6ea>
c001781c:	0f b6 c0             	movzx  eax,al
c001781f:	83 f8 1c             	cmp    eax,0x1c
c0017822:	74 05                	je     c0017829 <Vm::faultHandler(regs*)+0x711>
c0017824:	83 f8 5a             	cmp    eax,0x5a
c0017827:	75 0f                	jne    c0017838 <Vm::faultHandler(regs*)+0x720>
c0017829:	83 ec 0c             	sub    esp,0xc
c001782c:	6a 60                	push   0x60
c001782e:	e8 de f3 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	eb e4                	jmp    c001781c <Vm::faultHandler(regs*)+0x704>
c0017838:	31 c0                	xor    eax,eax
c001783a:	83 c4 2c             	add    esp,0x2c
c001783d:	5b                   	pop    ebx
c001783e:	5e                   	pop    esi
c001783f:	5f                   	pop    edi
c0017840:	5d                   	pop    ebp
c0017841:	c3                   	ret    

c0017842 <noCopro(unsigned long)>:
c0017842:	c3                   	ret    

c0017843 <nmiHandler(regs*, void*)>:
c0017843:	83 ec 0c             	sub    esp,0xc
c0017846:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001784b:	83 ec 0c             	sub    esp,0xc
c001784e:	50                   	push   eax
c001784f:	e8 82 fa fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017854:	83 c4 10             	add    esp,0x10
c0017857:	90                   	nop
c0017858:	83 c4 0c             	add    esp,0xc
c001785b:	c3                   	ret    

c001785c <doubleFault(regs*, void*)>:
c001785c:	55                   	push   ebp
c001785d:	89 e5                	mov    ebp,esp
c001785f:	83 ec 08             	sub    esp,0x8
c0017862:	83 ec 0c             	sub    esp,0xc
c0017865:	68 5c 2b 02 c0       	push   0xc0022b5c
c001786a:	e8 30 9d ff ff       	call   c001159f <KePanic(char const*)>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	90                   	nop
c0017873:	c9                   	leave  
c0017874:	c3                   	ret    

c0017875 <displayDebugInfo(regs*)>:
c0017875:	83 ec 1c             	sub    esp,0x1c
c0017878:	0f 20 c0             	mov    eax,cr0
c001787b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001787f:	0f 20 d0             	mov    eax,cr2
c0017882:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017886:	0f 20 d8             	mov    eax,cr3
c0017889:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001788d:	0f 20 e0             	mov    eax,cr4
c0017890:	89 04 24             	mov    DWORD PTR [esp],eax
c0017893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017897:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001789a:	83 ec 08             	sub    esp,0x8
c001789d:	50                   	push   eax
c001789e:	68 78 2b 02 c0       	push   0xc0022b78
c00178a3:	e8 62 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178a8:	83 c4 10             	add    esp,0x10
c00178ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178af:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00178b2:	83 ec 08             	sub    esp,0x8
c00178b5:	50                   	push   eax
c00178b6:	68 69 2b 02 c0       	push   0xc0022b69
c00178bb:	e8 4a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178c0:	83 c4 10             	add    esp,0x10
c00178c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00178ca:	83 ec 08             	sub    esp,0x8
c00178cd:	50                   	push   eax
c00178ce:	68 74 2b 02 c0       	push   0xc0022b74
c00178d3:	e8 32 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178d8:	83 c4 10             	add    esp,0x10
c00178db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178e2:	83 ec 08             	sub    esp,0x8
c00178e5:	50                   	push   eax
c00178e6:	68 83 2b 02 c0       	push   0xc0022b83
c00178eb:	e8 1a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178f0:	83 c4 10             	add    esp,0x10
c00178f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00178fa:	83 ec 08             	sub    esp,0x8
c00178fd:	50                   	push   eax
c00178fe:	68 8e 2b 02 c0       	push   0xc0022b8e
c0017903:	e8 02 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017908:	83 c4 10             	add    esp,0x10
c001790b:	83 ec 08             	sub    esp,0x8
c001790e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017912:	68 99 2b 02 c0       	push   0xc0022b99
c0017917:	e8 ee 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001791c:	83 c4 10             	add    esp,0x10
c001791f:	83 ec 08             	sub    esp,0x8
c0017922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017926:	68 a4 2b 02 c0       	push   0xc0022ba4
c001792b:	e8 da 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017930:	83 c4 10             	add    esp,0x10
c0017933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017937:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001793a:	c1 e0 05             	shl    eax,0x5
c001793d:	8d 90 20 3f 02 c0    	lea    edx,[eax-0x3ffdc0e0]
c0017943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017947:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001794a:	83 ec 04             	sub    esp,0x4
c001794d:	52                   	push   edx
c001794e:	50                   	push   eax
c001794f:	68 af 2b 02 c0       	push   0xc0022baf
c0017954:	e8 b1 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017961:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017967:	83 ec 0c             	sub    esp,0xc
c001796a:	50                   	push   eax
c001796b:	e8 ff 0d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017970:	83 c4 10             	add    esp,0x10
c0017973:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017978:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001797e:	83 ec 08             	sub    esp,0x8
c0017981:	68 be 2b 02 c0       	push   0xc0022bbe
c0017986:	50                   	push   eax
c0017987:	e8 20 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001798c:	83 c4 10             	add    esp,0x10
c001798f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017994:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001799a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001799e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00179a1:	83 ec 08             	sub    esp,0x8
c00179a4:	52                   	push   edx
c00179a5:	50                   	push   eax
c00179a6:	e8 bb 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179b9:	83 ec 08             	sub    esp,0x8
c00179bc:	68 cc 2b 02 c0       	push   0xc0022bcc
c00179c1:	50                   	push   eax
c00179c2:	e8 e5 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00179da:	8b 12                	mov    edx,DWORD PTR [edx]
c00179dc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00179df:	83 c2 0c             	add    edx,0xc
c00179e2:	83 ec 08             	sub    esp,0x8
c00179e5:	52                   	push   edx
c00179e6:	50                   	push   eax
c00179e7:	e8 c0 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179ec:	83 c4 10             	add    esp,0x10
c00179ef:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179fa:	83 ec 08             	sub    esp,0x8
c00179fd:	68 d5 2b 02 c0       	push   0xc0022bd5
c0017a02:	50                   	push   eax
c0017a03:	e8 a4 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a08:	83 c4 10             	add    esp,0x10
c0017a0b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a1a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a1d:	83 ec 08             	sub    esp,0x8
c0017a20:	52                   	push   edx
c0017a21:	50                   	push   eax
c0017a22:	e8 3f 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a35:	83 ec 08             	sub    esp,0x8
c0017a38:	68 dd 2b 02 c0       	push   0xc0022bdd
c0017a3d:	50                   	push   eax
c0017a3e:	e8 69 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a43:	83 c4 10             	add    esp,0x10
c0017a46:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a55:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017a58:	83 ec 08             	sub    esp,0x8
c0017a5b:	52                   	push   edx
c0017a5c:	50                   	push   eax
c0017a5d:	e8 04 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a70:	83 ec 08             	sub    esp,0x8
c0017a73:	68 e5 2b 02 c0       	push   0xc0022be5
c0017a78:	50                   	push   eax
c0017a79:	e8 2e 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a90:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017a93:	83 ec 08             	sub    esp,0x8
c0017a96:	52                   	push   edx
c0017a97:	50                   	push   eax
c0017a98:	e8 c9 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a9d:	83 c4 10             	add    esp,0x10
c0017aa0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aab:	83 ec 08             	sub    esp,0x8
c0017aae:	68 ed 2b 02 c0       	push   0xc0022bed
c0017ab3:	50                   	push   eax
c0017ab4:	e8 f3 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ab9:	83 c4 10             	add    esp,0x10
c0017abc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ac1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017acb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017ace:	83 ec 08             	sub    esp,0x8
c0017ad1:	52                   	push   edx
c0017ad2:	50                   	push   eax
c0017ad3:	e8 8e 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ae0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae6:	83 ec 08             	sub    esp,0x8
c0017ae9:	68 f5 2b 02 c0       	push   0xc0022bf5
c0017aee:	50                   	push   eax
c0017aef:	e8 b8 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017af4:	83 c4 10             	add    esp,0x10
c0017af7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017afc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b06:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b09:	83 ec 08             	sub    esp,0x8
c0017b0c:	52                   	push   edx
c0017b0d:	50                   	push   eax
c0017b0e:	e8 53 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b21:	83 ec 08             	sub    esp,0x8
c0017b24:	68 fd 2b 02 c0       	push   0xc0022bfd
c0017b29:	50                   	push   eax
c0017b2a:	e8 7d 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b41:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b44:	83 ec 08             	sub    esp,0x8
c0017b47:	52                   	push   edx
c0017b48:	50                   	push   eax
c0017b49:	e8 18 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5c:	83 ec 08             	sub    esp,0x8
c0017b5f:	68 05 2c 02 c0       	push   0xc0022c05
c0017b64:	50                   	push   eax
c0017b65:	e8 42 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b78:	83 ec 08             	sub    esp,0x8
c0017b7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b7f:	50                   	push   eax
c0017b80:	e8 e1 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b93:	83 ec 08             	sub    esp,0x8
c0017b96:	68 0e 2c 02 c0       	push   0xc0022c0e
c0017b9b:	50                   	push   eax
c0017b9c:	e8 0b 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017baf:	83 ec 08             	sub    esp,0x8
c0017bb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bb6:	50                   	push   eax
c0017bb7:	e8 aa 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bc4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bca:	83 ec 08             	sub    esp,0x8
c0017bcd:	68 16 2c 02 c0       	push   0xc0022c16
c0017bd2:	50                   	push   eax
c0017bd3:	e8 d4 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017be0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be6:	83 ec 08             	sub    esp,0x8
c0017be9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017bed:	50                   	push   eax
c0017bee:	e8 73 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	fa                   	cli    
c0017bf7:	f4                   	hlt    
c0017bf8:	eb fe                	jmp    c0017bf8 <displayDebugInfo(regs*)+0x383>

c0017bfa <HalSystemIdle()>:
c0017bfa:	56                   	push   esi
c0017bfb:	53                   	push   ebx
c0017bfc:	83 ec 14             	sub    esp,0x14
c0017bff:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c0a:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c10:	83 e0 04             	and    eax,0x4
c0017c13:	0f b6 c0             	movzx  eax,al
c0017c16:	85 c0                	test   eax,eax
c0017c18:	0f 95 c0             	setne  al
c0017c1b:	0f b6 c0             	movzx  eax,al
c0017c1e:	85 c0                	test   eax,eax
c0017c20:	74 4c                	je     c0017c6e <HalSystemIdle()+0x74>
c0017c22:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c27:	83 ec 08             	sub    esp,0x8
c0017c2a:	68 e1 00 00 00       	push   0xe1
c0017c2f:	50                   	push   eax
c0017c30:	e8 ad f4 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c40:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c49:	83 e2 02             	and    edx,0x2
c0017c4c:	89 d3                	mov    ebx,edx
c0017c4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c52:	83 e2 00             	and    edx,0x0
c0017c55:	89 d6                	mov    esi,edx
c0017c57:	56                   	push   esi
c0017c58:	53                   	push   ebx
c0017c59:	68 e1 00 00 00       	push   0xe1
c0017c5e:	50                   	push   eax
c0017c5f:	e8 aa f4 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c64:	83 c4 10             	add    esp,0x10
c0017c67:	e8 28 85 fe ff       	call   c0000194 <doTPAUSE>
c0017c6c:	eb 01                	jmp    c0017c6f <HalSystemIdle()+0x75>
c0017c6e:	f4                   	hlt    
c0017c6f:	90                   	nop
c0017c70:	83 c4 14             	add    esp,0x14
c0017c73:	5b                   	pop    ebx
c0017c74:	5e                   	pop    esi
c0017c75:	c3                   	ret    

c0017c76 <displayProgramFault(char const*)>:
c0017c76:	83 ec 0c             	sub    esp,0xc
c0017c79:	83 ec 0c             	sub    esp,0xc
c0017c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c80:	e8 85 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c85:	83 c4 10             	add    esp,0x10
c0017c88:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c98:	85 c0                	test   eax,eax
c0017c9a:	74 21                	je     c0017cbd <displayProgramFault(char const*)+0x47>
c0017c9c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ca3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ca6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cac:	6a 04                	push   0x4
c0017cae:	6a 0f                	push   0xf
c0017cb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cb4:	50                   	push   eax
c0017cb5:	e8 64 0e ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017cba:	83 c4 10             	add    esp,0x10
c0017cbd:	90                   	nop
c0017cbe:	83 c4 0c             	add    esp,0xc
c0017cc1:	c3                   	ret    

c0017cc2 <gpFault(regs*, void*)>:
c0017cc2:	83 ec 1c             	sub    esp,0x1c
c0017cc5:	c7 05 74 c7 02 c0 18 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017118
c0017ccf:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017cd4:	85 c0                	test   eax,eax
c0017cd6:	74 1e                	je     c0017cf6 <gpFault(regs*, void*)+0x34>
c0017cd8:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017cdd:	83 ec 0c             	sub    esp,0xc
c0017ce0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ce4:	ff d0                	call   eax
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ced:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017cf2:	85 c0                	test   eax,eax
c0017cf4:	75 2e                	jne    c0017d24 <gpFault(regs*, void*)+0x62>
c0017cf6:	83 ec 0c             	sub    esp,0xc
c0017cf9:	68 1e 2c 02 c0       	push   0xc0022c1e
c0017cfe:	e8 73 ff ff ff       	call   c0017c76 <displayProgramFault(char const*)>
c0017d03:	83 c4 10             	add    esp,0x10
c0017d06:	83 ec 0c             	sub    esp,0xc
c0017d09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d0d:	e8 63 fb ff ff       	call   c0017875 <displayDebugInfo(regs*)>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	83 ec 0c             	sub    esp,0xc
c0017d18:	6a 00                	push   0x0
c0017d1a:	e8 99 ed ff ff       	call   c0016ab8 <Thr::terminateFromIRQ(int)>
c0017d1f:	83 c4 10             	add    esp,0x10
c0017d22:	eb 01                	jmp    c0017d25 <gpFault(regs*, void*)+0x63>
c0017d24:	90                   	nop
c0017d25:	83 c4 1c             	add    esp,0x1c
c0017d28:	c3                   	ret    

c0017d29 <pgFault(regs*, void*)>:
c0017d29:	83 ec 1c             	sub    esp,0x1c
c0017d2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d30:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d33:	0f 20 d0             	mov    eax,cr2
c0017d36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d3e:	83 ec 04             	sub    esp,0x4
c0017d41:	52                   	push   edx
c0017d42:	50                   	push   eax
c0017d43:	68 fc 2c 02 c0       	push   0xc0022cfc
c0017d48:	e8 bd 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d4d:	83 c4 10             	add    esp,0x10
c0017d50:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d55:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d5a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d60:	0f 20 d2             	mov    edx,cr2
c0017d63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d6b:	83 ec 08             	sub    esp,0x8
c0017d6e:	52                   	push   edx
c0017d6f:	50                   	push   eax
c0017d70:	e8 05 26 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017d75:	83 c4 10             	add    esp,0x10
c0017d78:	0f b6 c0             	movzx  eax,al
c0017d7b:	85 c0                	test   eax,eax
c0017d7d:	75 2e                	jne    c0017dad <pgFault(regs*, void*)+0x84>
c0017d7f:	83 ec 0c             	sub    esp,0xc
c0017d82:	68 37 2c 02 c0       	push   0xc0022c37
c0017d87:	e8 ea fe ff ff       	call   c0017c76 <displayProgramFault(char const*)>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	83 ec 0c             	sub    esp,0xc
c0017d92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d96:	e8 da fa ff ff       	call   c0017875 <displayDebugInfo(regs*)>
c0017d9b:	83 c4 10             	add    esp,0x10
c0017d9e:	83 ec 0c             	sub    esp,0xc
c0017da1:	6a 00                	push   0x0
c0017da3:	e8 10 ed ff ff       	call   c0016ab8 <Thr::terminateFromIRQ(int)>
c0017da8:	83 c4 10             	add    esp,0x10
c0017dab:	eb 01                	jmp    c0017dae <pgFault(regs*, void*)+0x85>
c0017dad:	90                   	nop
c0017dae:	83 c4 1c             	add    esp,0x1c
c0017db1:	c3                   	ret    

c0017db2 <otherISRHandler(regs*, void*)>:
c0017db2:	83 ec 0c             	sub    esp,0xc
c0017db5:	83 ec 0c             	sub    esp,0xc
c0017db8:	68 24 2d 02 c0       	push   0xc0022d24
c0017dbd:	e8 b4 fe ff ff       	call   c0017c76 <displayProgramFault(char const*)>
c0017dc2:	83 c4 10             	add    esp,0x10
c0017dc5:	83 ec 0c             	sub    esp,0xc
c0017dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dcc:	e8 a4 fa ff ff       	call   c0017875 <displayDebugInfo(regs*)>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	83 ec 0c             	sub    esp,0xc
c0017dd7:	6a 00                	push   0x0
c0017dd9:	e8 da ec ff ff       	call   c0016ab8 <Thr::terminateFromIRQ(int)>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	90                   	nop
c0017de2:	83 c4 0c             	add    esp,0xc
c0017de5:	c3                   	ret    

c0017de6 <opcodeFault(regs*, void*)>:
c0017de6:	55                   	push   ebp
c0017de7:	89 e5                	mov    ebp,esp
c0017de9:	83 ec 08             	sub    esp,0x8
c0017dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017def:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017df2:	83 ec 08             	sub    esp,0x8
c0017df5:	50                   	push   eax
c0017df6:	68 42 2c 02 c0       	push   0xc0022c42
c0017dfb:	e8 0a 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e0e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e14:	0f b6 c0             	movzx  eax,al
c0017e17:	85 c0                	test   eax,eax
c0017e19:	74 21                	je     c0017e3c <opcodeFault(regs*, void*)+0x56>
c0017e1b:	83 ec 0c             	sub    esp,0xc
c0017e1e:	68 4c 2d 02 c0       	push   0xc0022d4c
c0017e23:	e8 e2 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e31:	8d 50 19             	lea    edx,[eax+0x19]
c0017e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e3a:	eb 2b                	jmp    c0017e67 <opcodeFault(regs*, void*)+0x81>
c0017e3c:	83 ec 0c             	sub    esp,0xc
c0017e3f:	68 50 2c 02 c0       	push   0xc0022c50
c0017e44:	e8 2d fe ff ff       	call   c0017c76 <displayProgramFault(char const*)>
c0017e49:	83 c4 10             	add    esp,0x10
c0017e4c:	83 ec 0c             	sub    esp,0xc
c0017e4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017e52:	e8 1e fa ff ff       	call   c0017875 <displayDebugInfo(regs*)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	83 ec 0c             	sub    esp,0xc
c0017e5d:	6a 00                	push   0x0
c0017e5f:	e8 54 ec ff ff       	call   c0016ab8 <Thr::terminateFromIRQ(int)>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	c9                   	leave  
c0017e68:	c3                   	ret    

c0017e69 <i386SaveCoprocessor(void*)>:
c0017e69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e6d:	83 c0 3f             	add    eax,0x3f
c0017e70:	83 e0 c0             	and    eax,0xffffffc0
c0017e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e77:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017e7d <i386LoadCoprocessor(void*)>:
c0017e7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e81:	83 c0 3f             	add    eax,0x3f
c0017e84:	83 e0 c0             	and    eax,0xffffffc0
c0017e87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e8b:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017e91 <x87EmulHandler(regs*, void*)>:
c0017e91:	53                   	push   ebx
c0017e92:	83 ec 08             	sub    esp,0x8
c0017e95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e9a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017e9e:	74 10                	je     c0017eb0 <x87EmulHandler(regs*, void*)+0x1f>
c0017ea0:	83 ec 0c             	sub    esp,0xc
c0017ea3:	68 5d 2c 02 c0       	push   0xc0022c5d
c0017ea8:	e8 f2 96 ff ff       	call   c001159f <KePanic(char const*)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	0f 20 c0             	mov    eax,cr0
c0017eb3:	a8 08                	test   al,0x8
c0017eb5:	74 59                	je     c0017f10 <x87EmulHandler(regs*, void*)+0x7f>
c0017eb7:	0f 06                	clts   
c0017eb9:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017ebe:	85 c0                	test   eax,eax
c0017ec0:	74 0e                	je     c0017ed0 <x87EmulHandler(regs*, void*)+0x3f>
c0017ec2:	83 ec 0c             	sub    esp,0xc
c0017ec5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ec8:	e8 9c ff ff ff       	call   c0017e69 <i386SaveCoprocessor(void*)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017ed6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017eda:	75 12                	jne    c0017eee <x87EmulHandler(regs*, void*)+0x5d>
c0017edc:	83 ec 0c             	sub    esp,0xc
c0017edf:	68 40 02 00 00       	push   0x240
c0017ee4:	e8 ea fb fe ff       	call   c0007ad3 <malloc>
c0017ee9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017eec:	eb 10                	jmp    c0017efe <x87EmulHandler(regs*, void*)+0x6d>
c0017eee:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017ef3:	83 ec 0c             	sub    esp,0xc
c0017ef6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ef9:	e8 7f ff ff ff       	call   c0017e7d <i386LoadCoprocessor(void*)>
c0017efe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f03:	83 c4 10             	add    esp,0x10
c0017f06:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f0b:	83 c4 08             	add    esp,0x8
c0017f0e:	5b                   	pop    ebx
c0017f0f:	c3                   	ret    
c0017f10:	83 ec 0c             	sub    esp,0xc
c0017f13:	68 71 2c 02 c0       	push   0xc0022c71
c0017f18:	e8 ed 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017f1d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f25:	83 c4 18             	add    esp,0x18
c0017f28:	5b                   	pop    ebx
c0017f29:	e9 8a eb ff ff       	jmp    c0016ab8 <Thr::terminateFromIRQ(int)>

c0017f2e <HalInitialiseCoprocessor()>:
c0017f2e:	83 ec 10             	sub    esp,0x10
c0017f31:	6a 00                	push   0x0
c0017f33:	68 91 7e 01 c0       	push   0xc0017e91
c0017f38:	6a 07                	push   0x7
c0017f3a:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f44:	e8 c5 4f ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f49:	e8 b2 70 00 00       	call   c001f000 <avxDetect>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	85 c0                	test   eax,eax
c0017f53:	74 1c                	je     c0017f71 <HalInitialiseCoprocessor()+0x43>
c0017f55:	c7 05 70 c7 02 c0 2a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f02a
c0017f5f:	c7 05 6c c7 02 c0 3b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f03b
c0017f69:	83 c4 0c             	add    esp,0xc
c0017f6c:	e9 db 70 00 00       	jmp    c001f04c <avxInit>
c0017f71:	e8 1a 74 00 00       	call   c001f390 <absolutelyNoChanceInHell>
c0017f76:	85 c0                	test   eax,eax
c0017f78:	74 1c                	je     c0017f96 <HalInitialiseCoprocessor()+0x68>
c0017f7a:	c7 05 70 c7 02 c0 a8 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3a8
c0017f84:	c7 05 6c c7 02 c0 b0 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3b0
c0017f8e:	83 c4 0c             	add    esp,0xc
c0017f91:	e9 22 74 00 00       	jmp    c001f3b8 <sseInit>
c0017f96:	e8 3b 74 00 00       	call   c001f3d6 <x87Detect>
c0017f9b:	85 c0                	test   eax,eax
c0017f9d:	74 1c                	je     c0017fbb <HalInitialiseCoprocessor()+0x8d>
c0017f9f:	c7 05 70 c7 02 c0 f1 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3f1
c0017fa9:	c7 05 6c c7 02 c0 f8 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3f8
c0017fb3:	83 c4 0c             	add    esp,0xc
c0017fb6:	e9 44 74 00 00       	jmp    c001f3ff <x87Init>
c0017fbb:	c7 05 70 c7 02 c0 42 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017842
c0017fc5:	c7 05 6c c7 02 c0 42 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017842
c0017fcf:	0f 20 c0             	mov    eax,cr0
c0017fd2:	83 c8 04             	or     eax,0x4
c0017fd5:	0f 22 c0             	mov    cr0,eax
c0017fd8:	83 c4 0c             	add    esp,0xc
c0017fdb:	c3                   	ret    

c0017fdc <HalPanic(char const*)>:
c0017fdc:	53                   	push   ebx
c0017fdd:	83 ec 10             	sub    esp,0x10
c0017fe0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017fe4:	fa                   	cli    
c0017fe5:	53                   	push   ebx
c0017fe6:	68 87 2c 02 c0       	push   0xc0022c87
c0017feb:	e8 1a 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ff0:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0017ff5:	83 c4 10             	add    esp,0x10
c0017ff8:	85 c0                	test   eax,eax
c0017ffa:	74 09                	je     c0018005 <HalPanic(char const*)+0x29>
c0017ffc:	83 ec 0c             	sub    esp,0xc
c0017fff:	53                   	push   ebx
c0018000:	ff d0                	call   eax
c0018002:	83 c4 10             	add    esp,0x10
c0018005:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c001800a:	85 c0                	test   eax,eax
c001800c:	0f 84 dc 00 00 00    	je     c00180ee <HalPanic(char const*)+0x112>
c0018012:	52                   	push   edx
c0018013:	6a 01                	push   0x1
c0018015:	6a 0f                	push   0xf
c0018017:	50                   	push   eax
c0018018:	e8 ad 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001801d:	59                   	pop    ecx
c001801e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018024:	e8 91 07 ff ff       	call   c00087ba <VgaText::clearScreen()>
c0018029:	58                   	pop    eax
c001802a:	5a                   	pop    edx
c001802b:	68 44 0e 02 c0       	push   0xc0020e44
c0018030:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018036:	e8 c7 05 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c001803b:	83 c4 0c             	add    esp,0xc
c001803e:	6a 01                	push   0x1
c0018040:	6a 0f                	push   0xf
c0018042:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018048:	e8 7d 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001804d:	59                   	pop    ecx
c001804e:	58                   	pop    eax
c001804f:	68 a0 2c 02 c0       	push   0xc0022ca0
c0018054:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001805a:	e8 4d 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001805f:	83 c4 0c             	add    esp,0xc
c0018062:	6a 0f                	push   0xf
c0018064:	6a 01                	push   0x1
c0018066:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001806c:	e8 59 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018071:	58                   	pop    eax
c0018072:	5a                   	pop    edx
c0018073:	68 a9 2c 02 c0       	push   0xc0022ca9
c0018078:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001807e:	e8 29 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018083:	83 c4 0c             	add    esp,0xc
c0018086:	6a 01                	push   0x1
c0018088:	6a 0f                	push   0xf
c001808a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018090:	e8 35 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018095:	59                   	pop    ecx
c0018096:	58                   	pop    eax
c0018097:	68 ed 2c 02 c0       	push   0xc0022ced
c001809c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180a2:	e8 05 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180a7:	58                   	pop    eax
c00180a8:	5a                   	pop    edx
c00180a9:	68 b6 2c 02 c0       	push   0xc0022cb6
c00180ae:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180b4:	e8 f3 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180b9:	59                   	pop    ecx
c00180ba:	58                   	pop    eax
c00180bb:	68 f0 2c 02 c0       	push   0xc0022cf0
c00180c0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180c6:	e8 e1 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180cb:	58                   	pop    eax
c00180cc:	5a                   	pop    edx
c00180cd:	53                   	push   ebx
c00180ce:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180d4:	e8 d3 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180d9:	59                   	pop    ecx
c00180da:	5b                   	pop    ebx
c00180db:	68 ed 2c 02 c0       	push   0xc0022ced
c00180e0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180e6:	e8 c1 09 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00180eb:	83 c4 10             	add    esp,0x10
c00180ee:	eb fe                	jmp    c00180ee <HalPanic(char const*)+0x112>

c00180f0 <HalQueryPerformanceCounter()>:
c00180f0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180f5:	31 d2                	xor    edx,edx
c00180f7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00180fd:	31 c0                	xor    eax,eax
c00180ff:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018106:	74 02                	je     c001810a <HalQueryPerformanceCounter()+0x1a>
c0018108:	0f 31                	rdtsc  
c001810a:	c3                   	ret    

c001810b <HalInitialise()>:
c001810b:	53                   	push   ebx
c001810c:	83 ec 08             	sub    esp,0x8
c001810f:	e8 31 50 ff ff       	call   c000d145 <setupINTS()>
c0018114:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018119:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018120:	75 0f                	jne    c0018131 <HalInitialise()+0x26>
c0018122:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018128:	83 e2 fe             	and    edx,0xfffffffe
c001812b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018131:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018138:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001813e:	83 e2 fe             	and    edx,0xfffffffe
c0018141:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018147:	e8 a0 02 00 00       	call   c00183ec <picOpen()>
c001814c:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018153:	74 0a                	je     c001815f <HalInitialise()+0x54>
c0018155:	e8 e2 01 00 00       	call   c001833c <picDisable()>
c001815a:	e8 0d 68 00 00       	call   c001e96c <apicOpen()>
c001815f:	50                   	push   eax
c0018160:	bb 0f 00 00 00       	mov    ebx,0xf
c0018165:	6a 00                	push   0x0
c0018167:	68 b2 7d 01 c0       	push   0xc0017db2
c001816c:	6a 00                	push   0x0
c001816e:	e8 9b 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018173:	83 c4 0c             	add    esp,0xc
c0018176:	6a 00                	push   0x0
c0018178:	68 b2 7d 01 c0       	push   0xc0017db2
c001817d:	6a 01                	push   0x1
c001817f:	e8 8a 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018184:	83 c4 0c             	add    esp,0xc
c0018187:	6a 00                	push   0x0
c0018189:	68 43 78 01 c0       	push   0xc0017843
c001818e:	6a 02                	push   0x2
c0018190:	e8 79 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018195:	83 c4 0c             	add    esp,0xc
c0018198:	6a 00                	push   0x0
c001819a:	68 b2 7d 01 c0       	push   0xc0017db2
c001819f:	6a 03                	push   0x3
c00181a1:	e8 68 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181a6:	83 c4 0c             	add    esp,0xc
c00181a9:	6a 00                	push   0x0
c00181ab:	68 b2 7d 01 c0       	push   0xc0017db2
c00181b0:	6a 04                	push   0x4
c00181b2:	e8 57 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181b7:	83 c4 0c             	add    esp,0xc
c00181ba:	6a 00                	push   0x0
c00181bc:	68 b2 7d 01 c0       	push   0xc0017db2
c00181c1:	6a 05                	push   0x5
c00181c3:	e8 46 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181c8:	83 c4 0c             	add    esp,0xc
c00181cb:	6a 00                	push   0x0
c00181cd:	68 e6 7d 01 c0       	push   0xc0017de6
c00181d2:	6a 06                	push   0x6
c00181d4:	e8 35 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181d9:	83 c4 0c             	add    esp,0xc
c00181dc:	6a 00                	push   0x0
c00181de:	68 5c 78 01 c0       	push   0xc001785c
c00181e3:	6a 08                	push   0x8
c00181e5:	e8 24 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181ea:	83 c4 0c             	add    esp,0xc
c00181ed:	6a 00                	push   0x0
c00181ef:	68 b2 7d 01 c0       	push   0xc0017db2
c00181f4:	6a 09                	push   0x9
c00181f6:	e8 13 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181fb:	83 c4 0c             	add    esp,0xc
c00181fe:	6a 00                	push   0x0
c0018200:	68 b2 7d 01 c0       	push   0xc0017db2
c0018205:	6a 0a                	push   0xa
c0018207:	e8 02 4d ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001820c:	83 c4 0c             	add    esp,0xc
c001820f:	6a 00                	push   0x0
c0018211:	68 b2 7d 01 c0       	push   0xc0017db2
c0018216:	6a 0b                	push   0xb
c0018218:	e8 f1 4c ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001821d:	83 c4 0c             	add    esp,0xc
c0018220:	6a 00                	push   0x0
c0018222:	68 c2 7c 01 c0       	push   0xc0017cc2
c0018227:	6a 0d                	push   0xd
c0018229:	e8 e0 4c ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001822e:	83 c4 0c             	add    esp,0xc
c0018231:	6a 00                	push   0x0
c0018233:	68 29 7d 01 c0       	push   0xc0017d29
c0018238:	6a 0e                	push   0xe
c001823a:	e8 cf 4c ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001823f:	83 c4 10             	add    esp,0x10
c0018242:	50                   	push   eax
c0018243:	6a 00                	push   0x0
c0018245:	68 b2 7d 01 c0       	push   0xc0017db2
c001824a:	53                   	push   ebx
c001824b:	43                   	inc    ebx
c001824c:	e8 bd 4c ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018251:	83 c4 10             	add    esp,0x10
c0018254:	83 fb 1e             	cmp    ebx,0x1e
c0018257:	75 e9                	jne    c0018242 <HalInitialise()+0x137>
c0018259:	50                   	push   eax
c001825a:	6a 00                	push   0x0
c001825c:	68 19 2a 01 c0       	push   0xc0012a19
c0018261:	6a 60                	push   0x60
c0018263:	e8 a6 4c ff ff       	call   c000cf0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001826d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018277:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001827e:	e8 50 f8 fe ff       	call   c0007ad3 <malloc>
c0018283:	89 04 24             	mov    DWORD PTR [esp],eax
c0018286:	89 c3                	mov    ebx,eax
c0018288:	e8 37 09 00 00       	call   c0018bc4 <RTC::RTC()>
c001828d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018297:	5a                   	pop    edx
c0018298:	59                   	pop    ecx
c0018299:	53                   	push   ebx
c001829a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182a0:	e8 33 47 ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c00182a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182a7:	6a 00                	push   0x0
c00182a9:	6a 00                	push   0x0
c00182ab:	6a 00                	push   0x0
c00182ad:	53                   	push   ebx
c00182ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182b1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182b6:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00182bc:	83 c4 28             	add    esp,0x28
c00182bf:	5b                   	pop    ebx
c00182c0:	c3                   	ret    

c00182c1 <HalMakeBeep(int)>:
c00182c1:	53                   	push   ebx
c00182c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00182c6:	85 db                	test   ebx,ebx
c00182c8:	75 07                	jne    c00182d1 <HalMakeBeep(int)+0x10>
c00182ca:	e4 61                	in     al,0x61
c00182cc:	83 e0 fc             	and    eax,0xfffffffc
c00182cf:	eb 26                	jmp    c00182f7 <HalMakeBeep(int)+0x36>
c00182d1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00182d6:	99                   	cdq    
c00182d7:	f7 fb                	idiv   ebx
c00182d9:	89 c1                	mov    ecx,eax
c00182db:	b0 b6                	mov    al,0xb6
c00182dd:	e6 43                	out    0x43,al
c00182df:	88 c8                	mov    al,cl
c00182e1:	e6 42                	out    0x42,al
c00182e3:	89 c8                	mov    eax,ecx
c00182e5:	c1 e8 08             	shr    eax,0x8
c00182e8:	e6 42                	out    0x42,al
c00182ea:	e4 61                	in     al,0x61
c00182ec:	89 c2                	mov    edx,eax
c00182ee:	83 ca 03             	or     edx,0x3
c00182f1:	38 d0                	cmp    al,dl
c00182f3:	74 04                	je     c00182f9 <HalMakeBeep(int)+0x38>
c00182f5:	88 d0                	mov    al,dl
c00182f7:	e6 61                	out    0x61,al
c00182f9:	5b                   	pop    ebx
c00182fa:	c3                   	ret    

c00182fb <HalGetRand()>:
c00182fb:	31 c0                	xor    eax,eax
c00182fd:	c3                   	ret    

c00182fe <HalEndOfInterrupt(int)>:
c00182fe:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018305:	74 23                	je     c001832a <HalEndOfInterrupt(int)+0x2c>
c0018307:	83 ec 14             	sub    esp,0x14
c001830a:	6a 1b                	push   0x1b
c001830c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018312:	e8 cb ed fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0018317:	25 00 f0 ff ff       	and    eax,0xfffff000
c001831c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018326:	83 c4 1c             	add    esp,0x1c
c0018329:	c3                   	ret    
c001832a:	e9 41 02 00 00       	jmp    c0018570 <picEOI(int)>

c001832f <HalRestart()>:
c001832f:	c3                   	ret    

c0018330 <HalShutdown()>:
c0018330:	c3                   	ret    

c0018331 <HalSleep()>:
c0018331:	c3                   	ret    
c0018332:	66 90                	xchg   ax,ax

c0018334 <picIoWait()>:
c0018334:	eb 00                	jmp    c0018336 <picIoWait()+0x2>
c0018336:	eb 00                	jmp    c0018338 <picIoWait()+0x4>
c0018338:	90                   	nop
c0018339:	c3                   	ret    
c001833a:	66 90                	xchg   ax,ax

c001833c <picDisable()>:
c001833c:	83 ec 10             	sub    esp,0x10
c001833f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018346:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001834b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001834f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018354:	ee                   	out    dx,al
c0018355:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001835c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018361:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018365:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001836a:	ee                   	out    dx,al
c001836b:	90                   	nop
c001836c:	83 c4 10             	add    esp,0x10
c001836f:	c3                   	ret    

c0018370 <picGetIRQReg(int)>:
c0018370:	83 ec 10             	sub    esp,0x10
c0018373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018377:	0f b6 c0             	movzx  eax,al
c001837a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018381:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018385:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018389:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001838e:	ee                   	out    dx,al
c001838f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018393:	0f b6 c0             	movzx  eax,al
c0018396:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001839d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00183a1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00183a5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00183aa:	ee                   	out    dx,al
c00183ab:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00183b2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00183b7:	89 c2                	mov    edx,eax
c00183b9:	ec                   	in     al,dx
c00183ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00183be:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183c2:	0f b6 c0             	movzx  eax,al
c00183c5:	c1 e0 08             	shl    eax,0x8
c00183c8:	89 c1                	mov    ecx,eax
c00183ca:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00183d1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00183d6:	89 c2                	mov    edx,eax
c00183d8:	ec                   	in     al,dx
c00183d9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00183dd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183e1:	0f b6 c0             	movzx  eax,al
c00183e4:	09 c8                	or     eax,ecx
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	c3                   	ret    
c00183ea:	66 90                	xchg   ax,ax

c00183ec <picOpen()>:
c00183ec:	83 ec 50             	sub    esp,0x50
c00183ef:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00183f6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00183fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00183ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018403:	ee                   	out    dx,al
c0018404:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001840b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018410:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018414:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018418:	ee                   	out    dx,al
c0018419:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018421:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018429:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018430:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018434:	89 c2                	mov    edx,eax
c0018436:	ec                   	in     al,dx
c0018437:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001843b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001843f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018443:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001844a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001844e:	89 c2                	mov    edx,eax
c0018450:	ec                   	in     al,dx
c0018451:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018455:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018459:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001845d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018464:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018469:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001846d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018471:	ee                   	out    dx,al
c0018472:	e8 bd fe ff ff       	call   c0018334 <picIoWait()>
c0018477:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001847e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018483:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018487:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001848b:	ee                   	out    dx,al
c001848c:	e8 a3 fe ff ff       	call   c0018334 <picIoWait()>
c0018491:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018495:	0f b6 c0             	movzx  eax,al
c0018498:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001849f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00184a3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00184a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184ab:	ee                   	out    dx,al
c00184ac:	e8 83 fe ff ff       	call   c0018334 <picIoWait()>
c00184b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00184b5:	0f b6 c0             	movzx  eax,al
c00184b8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00184bf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00184c3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00184c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00184cb:	ee                   	out    dx,al
c00184cc:	e8 63 fe ff ff       	call   c0018334 <picIoWait()>
c00184d1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00184d8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00184dd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00184e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184e5:	ee                   	out    dx,al
c00184e6:	e8 49 fe ff ff       	call   c0018334 <picIoWait()>
c00184eb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00184f2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00184f7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00184fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00184ff:	ee                   	out    dx,al
c0018500:	e8 2f fe ff ff       	call   c0018334 <picIoWait()>
c0018505:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001850c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018511:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018515:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018519:	ee                   	out    dx,al
c001851a:	e8 15 fe ff ff       	call   c0018334 <picIoWait()>
c001851f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018526:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001852b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001852f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018533:	ee                   	out    dx,al
c0018534:	e8 fb fd ff ff       	call   c0018334 <picIoWait()>
c0018539:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001853e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018545:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018549:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001854d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018551:	ee                   	out    dx,al
c0018552:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018557:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001855e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018562:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018566:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001856a:	ee                   	out    dx,al
c001856b:	90                   	nop
c001856c:	83 c4 50             	add    esp,0x50
c001856f:	c3                   	ret    

c0018570 <picEOI(int)>:
c0018570:	83 ec 10             	sub    esp,0x10
c0018573:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018578:	75 1e                	jne    c0018598 <picEOI(int)+0x28>
c001857a:	6a 0b                	push   0xb
c001857c:	e8 ef fd ff ff       	call   c0018370 <picGetIRQReg(int)>
c0018581:	83 c4 04             	add    esp,0x4
c0018584:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018589:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001858e:	25 80 00 00 00       	and    eax,0x80
c0018593:	74 73                	je     c0018608 <picEOI(int)+0x98>
c0018595:	8d 76 00             	lea    esi,[esi+0x0]
c0018598:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001859d:	75 31                	jne    c00185d0 <picEOI(int)+0x60>
c001859f:	6a 0b                	push   0xb
c00185a1:	e8 ca fd ff ff       	call   c0018370 <picGetIRQReg(int)>
c00185a6:	83 c4 04             	add    esp,0x4
c00185a9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00185ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185b2:	98                   	cwde   
c00185b3:	85 c0                	test   eax,eax
c00185b5:	78 19                	js     c00185d0 <picEOI(int)+0x60>
c00185b7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00185be:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00185c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00185c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00185cc:	ee                   	out    dx,al
c00185cd:	eb 3d                	jmp    c001860c <picEOI(int)+0x9c>
c00185cf:	90                   	nop
c00185d0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185d5:	7e 19                	jle    c00185f0 <picEOI(int)+0x80>
c00185d7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00185de:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00185e3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00185e7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00185ec:	ee                   	out    dx,al
c00185ed:	8d 76 00             	lea    esi,[esi+0x0]
c00185f0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00185f7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00185fc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018600:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018605:	ee                   	out    dx,al
c0018606:	eb 04                	jmp    c001860c <picEOI(int)+0x9c>
c0018608:	90                   	nop
c0018609:	8d 76 00             	lea    esi,[esi+0x0]
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	c3                   	ret    

c0018610 <RTC::open(int, int, void*)>:
c0018610:	31 c0                	xor    eax,eax
c0018612:	c3                   	ret    
c0018613:	90                   	nop

c0018614 <RTC::close(int, int, void*)>:
c0018614:	31 c0                	xor    eax,eax
c0018616:	c3                   	ret    
c0018617:	90                   	nop

c0018618 <RTC::timeInSecondsUTC()>:
c0018618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001861c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018622:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018628:	c3                   	ret    
c0018629:	90                   	nop

c001862a <RTC::timeInDatetimeUTC()>:
c001862a:	53                   	push   ebx
c001862b:	83 ec 14             	sub    esp,0x14
c001862e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018632:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018636:	8b 10                	mov    edx,DWORD PTR [eax]
c0018638:	50                   	push   eax
c0018639:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001863c:	83 c4 0c             	add    esp,0xc
c001863f:	52                   	push   edx
c0018640:	50                   	push   eax
c0018641:	53                   	push   ebx
c0018642:	e8 05 41 ff ff       	call   c000c74c <secondsToDatetime(unsigned long long)>
c0018647:	89 d8                	mov    eax,ebx
c0018649:	83 c4 14             	add    esp,0x14
c001864c:	5b                   	pop    ebx
c001864d:	c2 04 00             	ret    0x4

c0018650 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018650:	56                   	push   esi
c0018651:	53                   	push   ebx
c0018652:	83 ec 14             	sub    esp,0x14
c0018655:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018659:	8b 03                	mov    eax,DWORD PTR [ebx]
c001865b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001865e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018662:	52                   	push   edx
c0018663:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018667:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001866b:	50                   	push   eax
c001866c:	e8 db 40 ff ff       	call   c000c74c <secondsToDatetime(unsigned long long)>
c0018671:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001867d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018681:	89 f0                	mov    eax,esi
c0018683:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018687:	83 c4 20             	add    esp,0x20
c001868a:	5b                   	pop    ebx
c001868b:	5e                   	pop    esi
c001868c:	ff e0                	jmp    eax

c001868e <RTC::~RTC()>:
c001868e:	83 ec 0c             	sub    esp,0xc
c0018691:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0018696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001869a:	89 10                	mov    DWORD PTR [eax],edx
c001869c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a0:	83 ec 0c             	sub    esp,0xc
c00186a3:	50                   	push   eax
c00186a4:	e8 2f 3e ff ff       	call   c000c4d8 <Clock::~Clock()>
c00186a9:	83 c4 10             	add    esp,0x10
c00186ac:	90                   	nop
c00186ad:	83 c4 0c             	add    esp,0xc
c00186b0:	c3                   	ret    
c00186b1:	90                   	nop

c00186b2 <RTC::~RTC()>:
c00186b2:	83 ec 0c             	sub    esp,0xc
c00186b5:	83 ec 0c             	sub    esp,0xc
c00186b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186bc:	e8 cd ff ff ff       	call   c001868e <RTC::~RTC()>
c00186c1:	83 c4 10             	add    esp,0x10
c00186c4:	83 ec 08             	sub    esp,0x8
c00186c7:	68 60 01 00 00       	push   0x160
c00186cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186d0:	e8 37 21 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	83 c4 0c             	add    esp,0xc
c00186db:	c3                   	ret    

c00186dc <RTC::get_update_in_progress_flag()>:
c00186dc:	83 ec 14             	sub    esp,0x14
c00186df:	6a 0a                	push   0xa
c00186e1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186e7:	e8 ae ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186ec:	83 c4 1c             	add    esp,0x1c
c00186ef:	0f b6 c0             	movzx  eax,al
c00186f2:	c1 e8 07             	shr    eax,0x7
c00186f5:	c3                   	ret    

c00186f6 <RTC::completeRTCRefresh()>:
c00186f6:	55                   	push   ebp
c00186f7:	57                   	push   edi
c00186f8:	56                   	push   esi
c00186f9:	53                   	push   ebx
c00186fa:	83 ec 3c             	sub    esp,0x3c
c00186fd:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018703:	83 ec 0c             	sub    esp,0xc
c0018706:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001870a:	e8 cd ff ff ff       	call   c00186dc <RTC::get_update_in_progress_flag()>
c001870f:	83 c4 10             	add    esp,0x10
c0018712:	84 c0                	test   al,al
c0018714:	74 0e                	je     c0018724 <RTC::completeRTCRefresh()+0x2e>
c0018716:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001871c:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018722:	73 df                	jae    c0018703 <RTC::completeRTCRefresh()+0xd>
c0018724:	50                   	push   eax
c0018725:	50                   	push   eax
c0018726:	6a 00                	push   0x0
c0018728:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001872e:	e8 67 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018733:	89 c7                	mov    edi,eax
c0018735:	58                   	pop    eax
c0018736:	5a                   	pop    edx
c0018737:	6a 02                	push   0x2
c0018739:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001873f:	e8 56 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018744:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018748:	59                   	pop    ecx
c0018749:	5b                   	pop    ebx
c001874a:	6a 04                	push   0x4
c001874c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018752:	e8 43 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018757:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001875b:	5e                   	pop    esi
c001875c:	5d                   	pop    ebp
c001875d:	6a 07                	push   0x7
c001875f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018765:	e8 30 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001876a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001876e:	58                   	pop    eax
c001876f:	5a                   	pop    edx
c0018770:	6a 08                	push   0x8
c0018772:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018778:	e8 1d ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001877d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018781:	59                   	pop    ecx
c0018782:	5b                   	pop    ebx
c0018783:	6a 09                	push   0x9
c0018785:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001878b:	e8 0a ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018790:	0f b6 c0             	movzx  eax,al
c0018793:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187a7:	e8 30 ff ff ff       	call   c00186dc <RTC::get_update_in_progress_flag()>
c00187ac:	83 c4 10             	add    esp,0x10
c00187af:	84 c0                	test   al,al
c00187b1:	74 0e                	je     c00187c1 <RTC::completeRTCRefresh()+0xcb>
c00187b3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187b9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187bf:	73 df                	jae    c00187a0 <RTC::completeRTCRefresh()+0xaa>
c00187c1:	51                   	push   ecx
c00187c2:	51                   	push   ecx
c00187c3:	6a 00                	push   0x0
c00187c5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187cb:	e8 ca e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187d0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00187d4:	5b                   	pop    ebx
c00187d5:	5e                   	pop    esi
c00187d6:	6a 02                	push   0x2
c00187d8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187de:	e8 b7 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187e3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00187e7:	5d                   	pop    ebp
c00187e8:	58                   	pop    eax
c00187e9:	6a 04                	push   0x4
c00187eb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187f1:	e8 a4 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187f6:	88 c3                	mov    bl,al
c00187f8:	58                   	pop    eax
c00187f9:	5a                   	pop    edx
c00187fa:	6a 07                	push   0x7
c00187fc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018802:	e8 93 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018807:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001880b:	59                   	pop    ecx
c001880c:	5e                   	pop    esi
c001880d:	6a 08                	push   0x8
c001880f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018815:	e8 80 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001881a:	5d                   	pop    ebp
c001881b:	89 c6                	mov    esi,eax
c001881d:	58                   	pop    eax
c001881e:	6a 09                	push   0x9
c0018820:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018826:	e8 6f e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001882b:	89 f9                	mov    ecx,edi
c001882d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018831:	83 c4 10             	add    esp,0x10
c0018834:	0f b6 e8             	movzx  ebp,al
c0018837:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001883c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018840:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018844:	74 27                	je     c001886d <RTC::completeRTCRefresh()+0x177>
c0018846:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001884a:	89 f0                	mov    eax,esi
c001884c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018850:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018854:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018858:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001885c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018860:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018864:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018868:	e9 2d ff ff ff       	jmp    c001879a <RTC::completeRTCRefresh()+0xa4>
c001886d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018872:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018876:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001887a:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001887e:	75 c6                	jne    c0018846 <RTC::completeRTCRefresh()+0x150>
c0018880:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018885:	89 f1                	mov    ecx,esi
c0018887:	0f b6 fb             	movzx  edi,bl
c001888a:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001888e:	0f b6 c9             	movzx  ecx,cl
c0018891:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018895:	89 f1                	mov    ecx,esi
c0018897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001889b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001889f:	0f 94 c2             	sete   dl
c00188a2:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00188a6:	0f 94 c0             	sete   al
c00188a9:	21 d0                	and    eax,edx
c00188ab:	31 d2                	xor    edx,edx
c00188ad:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00188b1:	0f 94 c2             	sete   dl
c00188b4:	85 c2                	test   edx,eax
c00188b6:	74 8e                	je     c0018846 <RTC::completeRTCRefresh()+0x150>
c00188b8:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00188bc:	75 88                	jne    c0018846 <RTC::completeRTCRefresh()+0x150>
c00188be:	52                   	push   edx
c00188bf:	52                   	push   edx
c00188c0:	6a 0b                	push   0xb
c00188c2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188c8:	e8 cd e8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00188cd:	83 c4 10             	add    esp,0x10
c00188d0:	a8 04                	test   al,0x4
c00188d2:	75 7a                	jne    c001894e <RTC::completeRTCRefresh()+0x258>
c00188d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188d8:	c1 ef 04             	shr    edi,0x4
c00188db:	83 e6 0f             	and    esi,0xf
c00188de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00188e2:	c1 ed 04             	shr    ebp,0x4
c00188e5:	6b ed 0a             	imul   ebp,ebp,0xa
c00188e8:	c1 ea 04             	shr    edx,0x4
c00188eb:	6b d2 0a             	imul   edx,edx,0xa
c00188ee:	83 e1 0f             	and    ecx,0xf
c00188f1:	01 d1                	add    ecx,edx
c00188f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00188f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00188fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00188ff:	c1 ea 04             	shr    edx,0x4
c0018902:	6b d2 0a             	imul   edx,edx,0xa
c0018905:	83 e1 0f             	and    ecx,0xf
c0018908:	01 d1                	add    ecx,edx
c001890a:	89 fa                	mov    edx,edi
c001890c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018910:	83 e2 07             	and    edx,0x7
c0018913:	89 d9                	mov    ecx,ebx
c0018915:	6b d2 0a             	imul   edx,edx,0xa
c0018918:	83 e1 0f             	and    ecx,0xf
c001891b:	83 e3 80             	and    ebx,0xffffff80
c001891e:	01 d1                	add    ecx,edx
c0018920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018924:	09 cb                	or     ebx,ecx
c0018926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001892a:	c1 ea 04             	shr    edx,0x4
c001892d:	6b d2 0a             	imul   edx,edx,0xa
c0018930:	83 e1 0f             	and    ecx,0xf
c0018933:	01 d1                	add    ecx,edx
c0018935:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018939:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001893d:	c1 ea 04             	shr    edx,0x4
c0018940:	6b d2 0a             	imul   edx,edx,0xa
c0018943:	01 d6                	add    esi,edx
c0018945:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018949:	83 e2 0f             	and    edx,0xf
c001894c:	01 d5                	add    ebp,edx
c001894e:	a8 02                	test   al,0x2
c0018950:	75 15                	jne    c0018967 <RTC::completeRTCRefresh()+0x271>
c0018952:	f6 c3 80             	test   bl,0x80
c0018955:	74 10                	je     c0018967 <RTC::completeRTCRefresh()+0x271>
c0018957:	83 e3 7f             	and    ebx,0x7f
c001895a:	b9 18 00 00 00       	mov    ecx,0x18
c001895f:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018962:	99                   	cdq    
c0018963:	f7 f9                	idiv   ecx
c0018965:	88 d3                	mov    bl,dl
c0018967:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001896d:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018973:	77 06                	ja     c001897b <RTC::completeRTCRefresh()+0x285>
c0018975:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001897b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018980:	31 c9                	xor    ecx,ecx
c0018982:	31 d2                	xor    edx,edx
c0018984:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018988:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001898c:	89 cd                	mov    ebp,ecx
c001898e:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018992:	c1 e7 10             	shl    edi,0x10
c0018995:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001899b:	c1 e0 10             	shl    eax,0x10
c001899e:	09 c5                	or     ebp,eax
c00189a0:	89 e9                	mov    ecx,ebp
c00189a2:	0f b7 c2             	movzx  eax,dx
c00189a5:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00189a9:	09 f8                	or     eax,edi
c00189ab:	89 c2                	mov    edx,eax
c00189ad:	50                   	push   eax
c00189ae:	50                   	push   eax
c00189af:	88 d9                	mov    cl,bl
c00189b1:	51                   	push   ecx
c00189b2:	52                   	push   edx
c00189b3:	e8 0f 3c ff ff       	call   c000c5c7 <datetimeToSeconds(datetime_t)>
c00189b8:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00189bc:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00189c2:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00189c8:	83 c4 4c             	add    esp,0x4c
c00189cb:	5b                   	pop    ebx
c00189cc:	5e                   	pop    esi
c00189cd:	5f                   	pop    edi
c00189ce:	5d                   	pop    ebp
c00189cf:	c3                   	ret    

c00189d0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00189d0:	55                   	push   ebp
c00189d1:	57                   	push   edi
c00189d2:	56                   	push   esi
c00189d3:	53                   	push   ebx
c00189d4:	83 ec 30             	sub    esp,0x30
c00189d7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00189db:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00189df:	6a 00                	push   0x0
c00189e1:	6a 00                	push   0x0
c00189e3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189e9:	e8 c4 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189ee:	83 c4 0c             	add    esp,0xc
c00189f1:	6a 00                	push   0x0
c00189f3:	6a 02                	push   0x2
c00189f5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189fb:	e8 b2 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a00:	89 f8                	mov    eax,edi
c0018a02:	89 f9                	mov    ecx,edi
c0018a04:	0f b6 c4             	movzx  eax,ah
c0018a07:	31 d2                	xor    edx,edx
c0018a09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a0d:	c1 e9 10             	shr    ecx,0x10
c0018a10:	89 f0                	mov    eax,esi
c0018a12:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018a16:	89 f0                	mov    eax,esi
c0018a18:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a1c:	0f b6 c4             	movzx  eax,ah
c0018a1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a23:	89 f0                	mov    eax,esi
c0018a25:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a29:	c1 e8 10             	shr    eax,0x10
c0018a2c:	b9 64 00 00 00       	mov    ecx,0x64
c0018a31:	f7 f1                	div    ecx
c0018a33:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a37:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a3b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a3f:	59                   	pop    ecx
c0018a40:	5b                   	pop    ebx
c0018a41:	89 fb                	mov    ebx,edi
c0018a43:	6a 0b                	push   0xb
c0018a45:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a4b:	e8 4a e7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018a50:	83 c4 10             	add    esp,0x10
c0018a53:	a8 04                	test   al,0x4
c0018a55:	89 c5                	mov    ebp,eax
c0018a57:	75 6e                	jne    c0018ac7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018a59:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a5d:	31 d2                	xor    edx,edx
c0018a5f:	0f b6 c1             	movzx  eax,cl
c0018a62:	b9 0a 00 00 00       	mov    ecx,0xa
c0018a67:	f7 f1                	div    ecx
c0018a69:	c1 e0 04             	shl    eax,0x4
c0018a6c:	09 d0                	or     eax,edx
c0018a6e:	31 d2                	xor    edx,edx
c0018a70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a74:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018a79:	f7 f1                	div    ecx
c0018a7b:	c1 e0 04             	shl    eax,0x4
c0018a7e:	09 d0                	or     eax,edx
c0018a80:	31 d2                	xor    edx,edx
c0018a82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a86:	0f b6 c3             	movzx  eax,bl
c0018a89:	f7 f1                	div    ecx
c0018a8b:	c1 e0 04             	shl    eax,0x4
c0018a8e:	09 d0                	or     eax,edx
c0018a90:	31 d2                	xor    edx,edx
c0018a92:	89 c3                	mov    ebx,eax
c0018a94:	89 f0                	mov    eax,esi
c0018a96:	0f b6 c0             	movzx  eax,al
c0018a99:	f7 f1                	div    ecx
c0018a9b:	c1 e0 04             	shl    eax,0x4
c0018a9e:	09 d0                	or     eax,edx
c0018aa0:	31 d2                	xor    edx,edx
c0018aa2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018aa6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aab:	f7 f1                	div    ecx
c0018aad:	c1 e0 04             	shl    eax,0x4
c0018ab0:	09 d0                	or     eax,edx
c0018ab2:	31 d2                	xor    edx,edx
c0018ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ab8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018abc:	f7 f1                	div    ecx
c0018abe:	c1 e0 04             	shl    eax,0x4
c0018ac1:	09 d0                	or     eax,edx
c0018ac3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ac7:	83 e5 02             	and    ebp,0x2
c0018aca:	75 1e                	jne    c0018aea <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018acc:	0f b6 c3             	movzx  eax,bl
c0018acf:	83 f8 0b             	cmp    eax,0xb
c0018ad2:	76 10                	jbe    c0018ae4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018ad4:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018ad7:	84 d2                	test   dl,dl
c0018ad9:	88 d3                	mov    bl,dl
c0018adb:	75 02                	jne    c0018adf <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018add:	b3 0c                	mov    bl,0xc
c0018adf:	83 cb 80             	or     ebx,0xffffff80
c0018ae2:	eb 06                	jmp    c0018aea <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018ae4:	85 c0                	test   eax,eax
c0018ae6:	75 02                	jne    c0018aea <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018ae8:	b3 0c                	mov    bl,0xc
c0018aea:	50                   	push   eax
c0018aeb:	0f b6 db             	movzx  ebx,bl
c0018aee:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018af3:	52                   	push   edx
c0018af4:	6a 00                	push   0x0
c0018af6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018afc:	e8 b1 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b01:	83 c4 0c             	add    esp,0xc
c0018b04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b09:	50                   	push   eax
c0018b0a:	6a 02                	push   0x2
c0018b0c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b12:	e8 9b e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b17:	83 c4 0c             	add    esp,0xc
c0018b1a:	53                   	push   ebx
c0018b1b:	6a 04                	push   0x4
c0018b1d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b23:	e8 8a e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b28:	83 c4 0c             	add    esp,0xc
c0018b2b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b30:	52                   	push   edx
c0018b31:	6a 07                	push   0x7
c0018b33:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b39:	e8 74 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b3e:	83 c4 0c             	add    esp,0xc
c0018b41:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b46:	50                   	push   eax
c0018b47:	6a 08                	push   0x8
c0018b49:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b4f:	e8 5e e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b54:	83 c4 0c             	add    esp,0xc
c0018b57:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018b5c:	55                   	push   ebp
c0018b5d:	6a 09                	push   0x9
c0018b5f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b65:	e8 48 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b6a:	5a                   	pop    edx
c0018b6b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b6f:	e8 82 fb ff ff       	call   c00186f6 <RTC::completeRTCRefresh()>
c0018b74:	83 c4 3c             	add    esp,0x3c
c0018b77:	b0 01                	mov    al,0x1
c0018b79:	5b                   	pop    ebx
c0018b7a:	5e                   	pop    esi
c0018b7b:	5f                   	pop    edi
c0018b7c:	5d                   	pop    ebp
c0018b7d:	c3                   	ret    

c0018b7e <rtcIRQHandler(regs*, void*)>:
c0018b7e:	53                   	push   ebx
c0018b7f:	83 ec 10             	sub    esp,0x10
c0018b82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018b86:	6a 0c                	push   0xc
c0018b88:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b8e:	e8 07 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018b93:	83 c4 10             	add    esp,0x10
c0018b96:	a8 80                	test   al,0x80
c0018b98:	74 24                	je     c0018bbe <rtcIRQHandler(regs*, void*)+0x40>
c0018b9a:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018ba1:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018ba8:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018baf:	75 0d                	jne    c0018bbe <rtcIRQHandler(regs*, void*)+0x40>
c0018bb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018bb5:	83 c4 08             	add    esp,0x8
c0018bb8:	5b                   	pop    ebx
c0018bb9:	e9 38 fb ff ff       	jmp    c00186f6 <RTC::completeRTCRefresh()>
c0018bbe:	83 c4 08             	add    esp,0x8
c0018bc1:	5b                   	pop    ebx
c0018bc2:	c3                   	ret    
c0018bc3:	90                   	nop

c0018bc4 <RTC::RTC()>:
c0018bc4:	83 ec 1c             	sub    esp,0x1c
c0018bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bcb:	83 ec 08             	sub    esp,0x8
c0018bce:	68 6f 2d 02 c0       	push   0xc0022d6f
c0018bd3:	50                   	push   eax
c0018bd4:	e8 c9 38 ff ff       	call   c000c4a2 <Clock::Clock(char const*)>
c0018bd9:	83 c4 10             	add    esp,0x10
c0018bdc:	ba 8c 2d 02 c0       	mov    edx,0xc0022d8c
c0018be1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018be5:	89 10                	mov    DWORD PTR [eax],edx
c0018be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018beb:	83 ec 0c             	sub    esp,0xc
c0018bee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018bf2:	6a 01                	push   0x1
c0018bf4:	68 7e 8b 01 c0       	push   0xc0018b7e
c0018bf9:	6a 08                	push   0x8
c0018bfb:	50                   	push   eax
c0018bfc:	e8 83 3d ff ff       	call   c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c01:	83 c4 20             	add    esp,0x20
c0018c04:	89 c2                	mov    edx,eax
c0018c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c0a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c10:	fa                   	cli    
c0018c11:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c16:	83 c0 01             	add    eax,0x1
c0018c19:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c1e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c23:	83 ec 08             	sub    esp,0x8
c0018c26:	6a 0b                	push   0xb
c0018c28:	50                   	push   eax
c0018c29:	e8 6c e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018c2e:	83 c4 10             	add    esp,0x10
c0018c31:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c35:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c3a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c3e:	83 ca 10             	or     edx,0x10
c0018c41:	0f b6 d2             	movzx  edx,dl
c0018c44:	83 ec 04             	sub    esp,0x4
c0018c47:	52                   	push   edx
c0018c48:	6a 0b                	push   0xb
c0018c4a:	50                   	push   eax
c0018c4b:	e8 62 e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c50:	83 c4 10             	add    esp,0x10
c0018c53:	83 ec 0c             	sub    esp,0xc
c0018c56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c5a:	e8 97 fa ff ff       	call   c00186f6 <RTC::completeRTCRefresh()>
c0018c5f:	83 c4 10             	add    esp,0x10
c0018c62:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c67:	83 e8 01             	sub    eax,0x1
c0018c6a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c6f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c74:	85 c0                	test   eax,eax
c0018c76:	75 01                	jne    c0018c79 <RTC::RTC()+0xb5>
c0018c78:	fb                   	sti    
c0018c79:	90                   	nop
c0018c7a:	83 c4 1c             	add    esp,0x1c
c0018c7d:	c3                   	ret    
c0018c7e:	66 90                	xchg   ax,ax

c0018c80 <HalConsoleScroll(int, int)>:
c0018c80:	83 ec 10             	sub    esp,0x10
c0018c83:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018c8b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018c93:	90                   	nop
c0018c94:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018c99:	0f 8f e1 00 00 00    	jg     c0018d80 <HalConsoleScroll(int, int)+0x100>
c0018c9f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018ca7:	90                   	nop
c0018ca8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018cb0:	0f 8f be 00 00 00    	jg     c0018d74 <HalConsoleScroll(int, int)+0xf4>
c0018cb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cba:	89 d0                	mov    eax,edx
c0018cbc:	c1 e0 02             	shl    eax,0x2
c0018cbf:	01 d0                	add    eax,edx
c0018cc1:	c1 e0 05             	shl    eax,0x5
c0018cc4:	89 c2                	mov    edx,eax
c0018cc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cca:	01 d0                	add    eax,edx
c0018ccc:	89 c2                	mov    edx,eax
c0018cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cd2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cd9:	89 d0                	mov    eax,edx
c0018cdb:	c1 e0 02             	shl    eax,0x2
c0018cde:	01 d0                	add    eax,edx
c0018ce0:	c1 e0 05             	shl    eax,0x5
c0018ce3:	89 c2                	mov    edx,eax
c0018ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ce9:	01 d0                	add    eax,edx
c0018ceb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cf5:	01 d0                	add    eax,edx
c0018cf7:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018cf9:	88 10                	mov    BYTE PTR [eax],dl
c0018cfb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d00:	75 66                	jne    c0018d68 <HalConsoleScroll(int, int)+0xe8>
c0018d02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d06:	83 e0 01             	and    eax,0x1
c0018d09:	74 39                	je     c0018d44 <HalConsoleScroll(int, int)+0xc4>
c0018d0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d0f:	83 e0 0f             	and    eax,0xf
c0018d12:	88 c2                	mov    dl,al
c0018d14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d18:	c1 e0 04             	shl    eax,0x4
c0018d1b:	09 d0                	or     eax,edx
c0018d1d:	88 c1                	mov    cl,al
c0018d1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d23:	89 d0                	mov    eax,edx
c0018d25:	c1 e0 02             	shl    eax,0x2
c0018d28:	01 d0                	add    eax,edx
c0018d2a:	c1 e0 05             	shl    eax,0x5
c0018d2d:	89 c2                	mov    edx,eax
c0018d2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d33:	01 d0                	add    eax,edx
c0018d35:	89 c2                	mov    edx,eax
c0018d37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d3b:	01 d0                	add    eax,edx
c0018d3d:	88 ca                	mov    dl,cl
c0018d3f:	88 10                	mov    BYTE PTR [eax],dl
c0018d41:	eb 25                	jmp    c0018d68 <HalConsoleScroll(int, int)+0xe8>
c0018d43:	90                   	nop
c0018d44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d48:	89 d0                	mov    eax,edx
c0018d4a:	c1 e0 02             	shl    eax,0x2
c0018d4d:	01 d0                	add    eax,edx
c0018d4f:	c1 e0 05             	shl    eax,0x5
c0018d52:	89 c2                	mov    edx,eax
c0018d54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d58:	01 d0                	add    eax,edx
c0018d5a:	89 c2                	mov    edx,eax
c0018d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d60:	01 d0                	add    eax,edx
c0018d62:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018d65:	8d 76 00             	lea    esi,[esi+0x0]
c0018d68:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018d6d:	e9 36 ff ff ff       	jmp    c0018ca8 <HalConsoleScroll(int, int)+0x28>
c0018d72:	66 90                	xchg   ax,ax
c0018d74:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018d79:	e9 16 ff ff ff       	jmp    c0018c94 <HalConsoleScroll(int, int)+0x14>
c0018d7e:	66 90                	xchg   ax,ax
c0018d80:	90                   	nop
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	c3                   	ret    
c0018d85:	8d 76 00             	lea    esi,[esi+0x0]

c0018d88 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018d88:	83 ec 14             	sub    esp,0x14
c0018d8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d8f:	88 04 24             	mov    BYTE PTR [esp],al
c0018d92:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018d95:	0f b6 c0             	movzx  eax,al
c0018d98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d9c:	89 d1                	mov    ecx,edx
c0018d9e:	83 e1 0f             	and    ecx,0xf
c0018da1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018da5:	c1 e2 04             	shl    edx,0x4
c0018da8:	0f b6 d2             	movzx  edx,dl
c0018dab:	09 ca                	or     edx,ecx
c0018dad:	c1 e2 08             	shl    edx,0x8
c0018db0:	09 d0                	or     eax,edx
c0018db2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018db7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018dbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018dc3:	89 d0                	mov    eax,edx
c0018dc5:	c1 e0 02             	shl    eax,0x2
c0018dc8:	01 d0                	add    eax,edx
c0018dca:	c1 e0 04             	shl    eax,0x4
c0018dcd:	89 c2                	mov    edx,eax
c0018dcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dd3:	01 d0                	add    eax,edx
c0018dd5:	d1 e0                	shl    eax,1
c0018dd7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018ddb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ddf:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018de4:	66 89 10             	mov    WORD PTR [eax],dx
c0018de7:	90                   	nop
c0018de8:	83 c4 14             	add    esp,0x14
c0018deb:	c3                   	ret    

c0018dec <HalConsoleCursorUpdate(int, int)>:
c0018dec:	83 ec 20             	sub    esp,0x20
c0018def:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018df3:	89 c2                	mov    edx,eax
c0018df5:	c1 e2 02             	shl    edx,0x2
c0018df8:	01 d0                	add    eax,edx
c0018dfa:	c1 e0 04             	shl    eax,0x4
c0018dfd:	89 c2                	mov    edx,eax
c0018dff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e03:	01 d0                	add    eax,edx
c0018e05:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e0a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e11:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e1e:	ee                   	out    dx,al
c0018e1f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e24:	0f b6 c0             	movzx  eax,al
c0018e27:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e2e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e32:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e3a:	ee                   	out    dx,al
c0018e3b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e42:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e47:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018e4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e4f:	ee                   	out    dx,al
c0018e50:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018e55:	c1 e8 08             	shr    eax,0x8
c0018e58:	0f b6 c0             	movzx  eax,al
c0018e5b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018e62:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018e66:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018e6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e6e:	ee                   	out    dx,al
c0018e6f:	90                   	nop
c0018e70:	83 c4 20             	add    esp,0x20
c0018e73:	c3                   	ret    

c0018e74 <FAT::getName()>:
c0018e74:	b8 c0 2d 02 c0       	mov    eax,0xc0022dc0
c0018e79:	c3                   	ret    
c0018e7a:	66 90                	xchg   ax,ax

c0018e7c <FAT::tell(void*, unsigned long long*)>:
c0018e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e81:	75 09                	jne    c0018e8c <FAT::tell(void*, unsigned long long*)+0x10>
c0018e83:	b8 04 00 00 00       	mov    eax,0x4
c0018e88:	c3                   	ret    
c0018e89:	8d 76 00             	lea    esi,[esi+0x0]
c0018e8c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e91:	75 09                	jne    c0018e9c <FAT::tell(void*, unsigned long long*)+0x20>
c0018e93:	b8 04 00 00 00       	mov    eax,0x4
c0018e98:	c3                   	ret    
c0018e99:	8d 76 00             	lea    esi,[esi+0x0]
c0018e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ea0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ea3:	ba 00 00 00 00       	mov    edx,0x0
c0018ea8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018eac:	89 01                	mov    DWORD PTR [ecx],eax
c0018eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018eb1:	b8 00 00 00 00       	mov    eax,0x0
c0018eb6:	c3                   	ret    
c0018eb7:	90                   	nop

c0018eb8 <FAT::stat(void*, unsigned long long*)>:
c0018eb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ebd:	75 09                	jne    c0018ec8 <FAT::stat(void*, unsigned long long*)+0x10>
c0018ebf:	b8 04 00 00 00       	mov    eax,0x4
c0018ec4:	c3                   	ret    
c0018ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ecd:	75 09                	jne    c0018ed8 <FAT::stat(void*, unsigned long long*)+0x20>
c0018ecf:	b8 04 00 00 00       	mov    eax,0x4
c0018ed4:	c3                   	ret    
c0018ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018edc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018edf:	ba 00 00 00 00       	mov    edx,0x0
c0018ee4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ee8:	89 01                	mov    DWORD PTR [ecx],eax
c0018eea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018eed:	b8 00 00 00 00       	mov    eax,0x0
c0018ef2:	c3                   	ret    
c0018ef3:	90                   	nop

c0018ef4 <FAT::~FAT()>:
c0018ef4:	83 ec 0c             	sub    esp,0xc
c0018ef7:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c0018efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f00:	89 10                	mov    DWORD PTR [eax],edx
c0018f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f06:	83 ec 0c             	sub    esp,0xc
c0018f09:	50                   	push   eax
c0018f0a:	e8 c7 28 ff ff       	call   c000b7d6 <Filesystem::~Filesystem()>
c0018f0f:	83 c4 10             	add    esp,0x10
c0018f12:	90                   	nop
c0018f13:	83 c4 0c             	add    esp,0xc
c0018f16:	c3                   	ret    
c0018f17:	90                   	nop

c0018f18 <FAT::~FAT()>:
c0018f18:	83 ec 0c             	sub    esp,0xc
c0018f1b:	83 ec 0c             	sub    esp,0xc
c0018f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f22:	e8 cd ff ff ff       	call   c0018ef4 <FAT::~FAT()>
c0018f27:	83 c4 10             	add    esp,0x10
c0018f2a:	83 ec 08             	sub    esp,0x8
c0018f2d:	6a 08                	push   0x8
c0018f2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f33:	e8 d4 18 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	83 c4 0c             	add    esp,0xc
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop

c0018f40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f40:	83 ec 1c             	sub    esp,0x1c
c0018f43:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f4a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f53:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f5a:	83 f8 ff             	cmp    eax,0xffffffff
c0018f5d:	75 35                	jne    c0018f94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018f5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f63:	88 c2                	mov    dl,al
c0018f65:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f6a:	01 d0                	add    eax,edx
c0018f6c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f70:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018f76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f7a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018f81:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f8a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018f91:	eb 19                	jmp    c0018fac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018f93:	90                   	nop
c0018f94:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f98:	88 c2                	mov    dl,al
c0018f9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f9e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fa5:	01 d0                	add    eax,edx
c0018fa7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fab:	90                   	nop
c0018fac:	83 ec 04             	sub    esp,0x4
c0018faf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fb7:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018fbb:	50                   	push   eax
c0018fbc:	e8 32 c0 fe ff       	call   c0004ff3 <f_getlabel>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fc8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fcd:	75 09                	jne    c0018fd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018fcf:	b8 00 00 00 00       	mov    eax,0x0
c0018fd4:	eb 0a                	jmp    c0018fe0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018fd6:	66 90                	xchg   ax,ax
c0018fd8:	b8 01 00 00 00       	mov    eax,0x1
c0018fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe0:	83 c4 1c             	add    esp,0x1c
c0018fe3:	c3                   	ret    

c0018fe4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018fe4:	53                   	push   ebx
c0018fe5:	83 ec 58             	sub    esp,0x58
c0018fe8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018ff0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ff4:	b9 00 00 00 00       	mov    ecx,0x0
c0018ff9:	b8 3c 00 00 00       	mov    eax,0x3c
c0018ffe:	83 e0 f8             	and    eax,0xfffffff8
c0019001:	89 c3                	mov    ebx,eax
c0019003:	b8 00 00 00 00       	mov    eax,0x0
c0019008:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001900c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019010:	83 c0 08             	add    eax,0x8
c0019013:	39 d8                	cmp    eax,ebx
c0019015:	72 f1                	jb     c0019008 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0019017:	01 c2                	add    edx,eax
c0019019:	89 0a                	mov    DWORD PTR [edx],ecx
c001901b:	83 c2 04             	add    edx,0x4
c001901e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019022:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019029:	83 f8 ff             	cmp    eax,0xffffffff
c001902c:	75 36                	jne    c0019064 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001902e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019032:	88 c2                	mov    dl,al
c0019034:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019039:	01 d0                	add    eax,edx
c001903b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001903f:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019045:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019049:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019050:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019055:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019059:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019060:	eb 1a                	jmp    c001907c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0019062:	66 90                	xchg   ax,ax
c0019064:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019068:	88 c2                	mov    dl,al
c001906a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001906e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019075:	01 d0                	add    eax,edx
c0019077:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001907b:	90                   	nop
c001907c:	83 ec 08             	sub    esp,0x8
c001907f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019083:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019087:	50                   	push   eax
c0019088:	e8 e3 77 fe ff       	call   c0000870 <strcat>
c001908d:	83 c4 10             	add    esp,0x10
c0019090:	83 ec 0c             	sub    esp,0xc
c0019093:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019097:	50                   	push   eax
c0019098:	e8 aa c0 fe ff       	call   c0005147 <f_setlabel>
c001909d:	83 c4 10             	add    esp,0x10
c00190a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190a4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00190a9:	75 09                	jne    c00190b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00190ab:	b8 00 00 00 00       	mov    eax,0x0
c00190b0:	eb 0a                	jmp    c00190bc <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00190b2:	66 90                	xchg   ax,ax
c00190b4:	b8 01 00 00 00       	mov    eax,0x1
c00190b9:	8d 76 00             	lea    esi,[esi+0x0]
c00190bc:	83 c4 58             	add    esp,0x58
c00190bf:	5b                   	pop    ebx
c00190c0:	c3                   	ret    
c00190c1:	90                   	nop
c00190c2:	66 90                	xchg   ax,ax

c00190c4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00190c4:	83 ec 2c             	sub    esp,0x2c
c00190c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190cf:	83 ec 08             	sub    esp,0x8
c00190d2:	68 e4 2d 02 c0       	push   0xc0022de4
c00190d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190db:	e8 a0 76 fe ff       	call   c0000780 <strcmp>
c00190e0:	83 c4 10             	add    esp,0x10
c00190e3:	85 c0                	test   eax,eax
c00190e5:	0f 94 c0             	sete   al
c00190e8:	0f b6 c0             	movzx  eax,al
c00190eb:	85 c0                	test   eax,eax
c00190ed:	74 0d                	je     c00190fc <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00190ef:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190f7:	e9 c0 00 00 00       	jmp    c00191bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190fc:	83 ec 08             	sub    esp,0x8
c00190ff:	68 d6 2d 02 c0       	push   0xc0022dd6
c0019104:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019108:	e8 73 76 fe ff       	call   c0000780 <strcmp>
c001910d:	83 c4 10             	add    esp,0x10
c0019110:	85 c0                	test   eax,eax
c0019112:	0f 94 c0             	sete   al
c0019115:	0f b6 c0             	movzx  eax,al
c0019118:	85 c0                	test   eax,eax
c001911a:	74 10                	je     c001912c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001911c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019124:	e9 93 00 00 00       	jmp    c00191bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019129:	8d 76 00             	lea    esi,[esi+0x0]
c001912c:	83 ec 08             	sub    esp,0x8
c001912f:	68 dc 2d 02 c0       	push   0xc0022ddc
c0019134:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019138:	e8 43 76 fe ff       	call   c0000780 <strcmp>
c001913d:	83 c4 10             	add    esp,0x10
c0019140:	85 c0                	test   eax,eax
c0019142:	0f 94 c0             	sete   al
c0019145:	0f b6 c0             	movzx  eax,al
c0019148:	85 c0                	test   eax,eax
c001914a:	74 0c                	je     c0019158 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001914c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019154:	eb 66                	jmp    c00191bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019156:	66 90                	xchg   ax,ax
c0019158:	83 ec 08             	sub    esp,0x8
c001915b:	68 fc 04 02 c0       	push   0xc00204fc
c0019160:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019164:	e8 17 76 fe ff       	call   c0000780 <strcmp>
c0019169:	83 c4 10             	add    esp,0x10
c001916c:	85 c0                	test   eax,eax
c001916e:	0f 94 c0             	sete   al
c0019171:	0f b6 c0             	movzx  eax,al
c0019174:	85 c0                	test   eax,eax
c0019176:	74 0c                	je     c0019184 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019178:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019180:	eb 3a                	jmp    c00191bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019182:	66 90                	xchg   ax,ax
c0019184:	83 ec 08             	sub    esp,0x8
c0019187:	68 e2 2d 02 c0       	push   0xc0022de2
c001918c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019190:	e8 eb 75 fe ff       	call   c0000780 <strcmp>
c0019195:	83 c4 10             	add    esp,0x10
c0019198:	85 c0                	test   eax,eax
c001919a:	0f 94 c0             	sete   al
c001919d:	0f b6 c0             	movzx  eax,al
c00191a0:	85 c0                	test   eax,eax
c00191a2:	74 0c                	je     c00191b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00191a4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00191ac:	eb 0e                	jmp    c00191bc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ae:	66 90                	xchg   ax,ax
c00191b0:	b8 08 00 00 00       	mov    eax,0x8
c00191b5:	e9 ea 00 00 00       	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00191ba:	66 90                	xchg   ax,ax
c00191bc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00191c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00191c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191cc:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191d3:	83 f8 ff             	cmp    eax,0xffffffff
c00191d6:	75 34                	jne    c001920c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00191d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191dc:	88 c2                	mov    dl,al
c00191de:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191e3:	01 d0                	add    eax,edx
c00191e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191e9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191f3:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191fa:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019203:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001920a:	eb 18                	jmp    c0019224 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001920c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019210:	88 c2                	mov    dl,al
c0019212:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019216:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001921d:	01 d0                	add    eax,edx
c001921f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019223:	90                   	nop
c0019224:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019228:	88 04 24             	mov    BYTE PTR [esp],al
c001922b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001922f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019233:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001923b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019240:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019248:	83 ec 0c             	sub    esp,0xc
c001924b:	68 00 20 00 00       	push   0x2000
c0019250:	e8 7e e8 fe ff       	call   c0007ad3 <malloc>
c0019255:	83 c4 10             	add    esp,0x10
c0019258:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001925c:	68 00 20 00 00       	push   0x2000
c0019261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019265:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019269:	50                   	push   eax
c001926a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001926e:	50                   	push   eax
c001926f:	e8 d0 c1 fe ff       	call   c0005444 <f_mkfs>
c0019274:	83 c4 10             	add    esp,0x10
c0019277:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001927b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019280:	75 0a                	jne    c001928c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019282:	b8 00 00 00 00       	mov    eax,0x0
c0019287:	eb 1b                	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019289:	8d 76 00             	lea    esi,[esi+0x0]
c001928c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019291:	75 09                	jne    c001929c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019293:	b8 09 00 00 00       	mov    eax,0x9
c0019298:	eb 0a                	jmp    c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001929a:	66 90                	xchg   ax,ax
c001929c:	b8 01 00 00 00       	mov    eax,0x1
c00192a1:	8d 76 00             	lea    esi,[esi+0x0]
c00192a4:	83 c4 2c             	add    esp,0x2c
c00192a7:	c3                   	ret    

c00192a8 <FAT::tryMount(LogicalDisk*, int)>:
c00192a8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00192ae:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192b3:	83 f8 14             	cmp    eax,0x14
c00192b6:	75 18                	jne    c00192d0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00192b8:	83 ec 0c             	sub    esp,0xc
c00192bb:	68 e8 2d 02 c0       	push   0xc0022de8
c00192c0:	e8 da 82 ff ff       	call   c001159f <KePanic(char const*)>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	b0 00                	mov    al,0x0
c00192ca:	e9 ed 01 00 00       	jmp    c00194bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192cf:	90                   	nop
c00192d0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00192d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00192dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00192e3:	3d 00 02 00 00       	cmp    eax,0x200
c00192e8:	74 0a                	je     c00192f4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00192ea:	b0 00                	mov    al,0x0
c00192ec:	e9 cb 01 00 00       	jmp    c00194bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192f1:	8d 76 00             	lea    esi,[esi+0x0]
c00192f4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00192fc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019303:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001930a:	83 f8 ff             	cmp    eax,0xffffffff
c001930d:	74 09                	je     c0019318 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001930f:	b0 01                	mov    al,0x1
c0019311:	e9 a6 01 00 00       	jmp    c00194bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019316:	66 90                	xchg   ax,ax
c0019318:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019322:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001932a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019331:	88 c2                	mov    dl,al
c0019333:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019338:	01 d0                	add    eax,edx
c001933a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019341:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019347:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001934e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019355:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001935a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019361:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019368:	83 ec 0c             	sub    esp,0xc
c001936b:	68 34 02 00 00       	push   0x234
c0019370:	e8 5e e7 fe ff       	call   c0007ad3 <malloc>
c0019375:	83 c4 10             	add    esp,0x10
c0019378:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001937f:	83 ec 04             	sub    esp,0x4
c0019382:	6a 00                	push   0x0
c0019384:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001938b:	50                   	push   eax
c001938c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019393:	e8 a6 a8 fe ff       	call   c0003c3e <f_mount>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193a2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00193aa:	74 1c                	je     c00193c8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00193ac:	83 ec 0c             	sub    esp,0xc
c00193af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193b6:	e8 38 e7 fe ff       	call   c0007af3 <rfree>
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	b0 00                	mov    al,0x0
c00193c0:	e9 f7 00 00 00       	jmp    c00194bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193c5:	8d 76 00             	lea    esi,[esi+0x0]
c00193c8:	83 ec 04             	sub    esp,0x4
c00193cb:	68 00 01 00 00       	push   0x100
c00193d0:	6a 00                	push   0x0
c00193d2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193d9:	50                   	push   eax
c00193da:	e8 11 71 fe ff       	call   c00004f0 <memset>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	83 ec 08             	sub    esp,0x8
c00193e5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193ec:	50                   	push   eax
c00193ed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193f4:	50                   	push   eax
c00193f5:	e8 76 74 fe ff       	call   c0000870 <strcat>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	83 ec 08             	sub    esp,0x8
c0019400:	68 f6 2d 02 c0       	push   0xc0022df6
c0019405:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001940c:	50                   	push   eax
c001940d:	e8 5e 74 fe ff       	call   c0000870 <strcat>
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	83 ec 04             	sub    esp,0x4
c0019418:	6a 01                	push   0x1
c001941a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019421:	50                   	push   eax
c0019422:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019426:	50                   	push   eax
c0019427:	e8 74 a8 fe ff       	call   c0003ca0 <f_open>
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019436:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001943d:	85 c0                	test   eax,eax
c001943f:	74 0b                	je     c001944c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019441:	78 31                	js     c0019474 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019443:	83 e8 04             	sub    eax,0x4
c0019446:	83 f8 01             	cmp    eax,0x1
c0019449:	77 29                	ja     c0019474 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001944b:	90                   	nop
c001944c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019454:	83 ec 0c             	sub    esp,0xc
c0019457:	8d 44 24 14          	lea    eax,[esp+0x14]
c001945b:	50                   	push   eax
c001945c:	e8 ef af fe ff       	call   c0004450 <f_close>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	90                   	nop
c0019465:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001946d:	85 c0                	test   eax,eax
c001946f:	74 43                	je     c00194b4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019471:	eb 31                	jmp    c00194a4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019473:	90                   	nop
c0019474:	83 ec 0c             	sub    esp,0xc
c0019477:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001947e:	e8 70 e6 fe ff       	call   c0007af3 <rfree>
c0019483:	83 c4 10             	add    esp,0x10
c0019486:	83 ec 04             	sub    esp,0x4
c0019489:	6a 00                	push   0x0
c001948b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019492:	50                   	push   eax
c0019493:	6a 00                	push   0x0
c0019495:	e8 a4 a7 fe ff       	call   c0003c3e <f_mount>
c001949a:	83 c4 10             	add    esp,0x10
c001949d:	b0 00                	mov    al,0x0
c001949f:	eb 1b                	jmp    c00194bc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194a1:	8d 76 00             	lea    esi,[esi+0x0]
c00194a4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194a9:	83 c0 01             	add    eax,0x1
c00194ac:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00194b1:	8d 76 00             	lea    esi,[esi+0x0]
c00194b4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00194bb:	90                   	nop
c00194bc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00194c2:	c3                   	ret    
c00194c3:	90                   	nop

c00194c4 <FAT::allocateSwapfile(char const*, int)>:
c00194c4:	55                   	push   ebp
c00194c5:	57                   	push   edi
c00194c6:	56                   	push   esi
c00194c7:	53                   	push   ebx
c00194c8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00194ce:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00194d9:	83 ec 0c             	sub    esp,0xc
c00194dc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00194e3:	e8 eb e5 fe ff       	call   c0007ad3 <malloc>
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	89 c7                	mov    edi,eax
c00194ed:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00194f2:	83 ec 04             	sub    esp,0x4
c00194f5:	50                   	push   eax
c00194f6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00194fd:	57                   	push   edi
c00194fe:	e8 55 26 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0019503:	83 c4 10             	add    esp,0x10
c0019506:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001950d:	83 ec 04             	sub    esp,0x4
c0019510:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019514:	50                   	push   eax
c0019515:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019519:	50                   	push   eax
c001951a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019521:	e8 52 29 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019530:	c1 e0 14             	shl    eax,0x14
c0019533:	89 c7                	mov    edi,eax
c0019535:	89 c5                	mov    ebp,eax
c0019537:	c1 fd 1f             	sar    ebp,0x1f
c001953a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001953e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019542:	89 f9                	mov    ecx,edi
c0019544:	31 c1                	xor    ecx,eax
c0019546:	89 cb                	mov    ebx,ecx
c0019548:	89 e9                	mov    ecx,ebp
c001954a:	31 d1                	xor    ecx,edx
c001954c:	89 ce                	mov    esi,ecx
c001954e:	89 f0                	mov    eax,esi
c0019550:	09 d8                	or     eax,ebx
c0019552:	0f 84 9c 00 00 00    	je     c00195f4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019562:	e8 dd 27 ff ff       	call   c000bd44 <File::unlink()>
c0019567:	83 c4 10             	add    esp,0x10
c001956a:	83 ec 08             	sub    esp,0x8
c001956d:	6a 12                	push   0x12
c001956f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019576:	e8 fb 25 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001957b:	83 c4 10             	add    esp,0x10
c001957e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019585:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001958b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019592:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019599:	c1 e0 14             	shl    eax,0x14
c001959c:	83 ec 04             	sub    esp,0x4
c001959f:	6a 01                	push   0x1
c00195a1:	50                   	push   eax
c00195a2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00195a9:	e8 29 bd fe ff       	call   c00052d7 <f_expand>
c00195ae:	83 c4 10             	add    esp,0x10
c00195b1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00195ba:	83 c0 10             	add    eax,0x10
c00195bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00195bf:	83 ec 0c             	sub    esp,0xc
c00195c2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195c6:	52                   	push   edx
c00195c7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00195cb:	52                   	push   edx
c00195cc:	6a 00                	push   0x0
c00195ce:	68 00 04 00 00       	push   0x400
c00195d3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00195da:	ff d0                	call   eax
c00195dc:	83 c4 20             	add    esp,0x20
c00195df:	83 ec 0c             	sub    esp,0xc
c00195e2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195e9:	e8 e6 25 ff ff       	call   c000bbd4 <File::close()>
c00195ee:	83 c4 10             	add    esp,0x10
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]
c00195f4:	83 ec 08             	sub    esp,0x8
c00195f7:	6a 01                	push   0x1
c00195f9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019600:	e8 71 25 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0019605:	83 c4 10             	add    esp,0x10
c0019608:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001960f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019611:	83 c0 0c             	add    eax,0xc
c0019614:	8b 00                	mov    eax,DWORD PTR [eax]
c0019616:	83 ec 0c             	sub    esp,0xc
c0019619:	8d 54 24 24          	lea    edx,[esp+0x24]
c001961d:	52                   	push   edx
c001961e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019622:	52                   	push   edx
c0019623:	6a 00                	push   0x0
c0019625:	6a 04                	push   0x4
c0019627:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001962e:	ff d0                	call   eax
c0019630:	83 c4 20             	add    esp,0x20
c0019633:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001963a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019640:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019647:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001964e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019651:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019658:	83 ec 0c             	sub    esp,0xc
c001965b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019662:	e8 6d 25 ff ff       	call   c000bbd4 <File::close()>
c0019667:	83 c4 10             	add    esp,0x10
c001966a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019671:	ba 00 00 00 00       	mov    edx,0x0
c0019676:	81 c4 3c 04 00 00    	add    esp,0x43c
c001967c:	5b                   	pop    ebx
c001967d:	5e                   	pop    esi
c001967e:	5f                   	pop    edi
c001967f:	5d                   	pop    ebp
c0019680:	c3                   	ret    
c0019681:	90                   	nop
c0019682:	66 90                	xchg   ax,ax

c0019684 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019684:	57                   	push   edi
c0019685:	56                   	push   esi
c0019686:	53                   	push   ebx
c0019687:	81 ec 50 02 00 00    	sub    esp,0x250
c001968d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019695:	74 0d                	je     c00196a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019697:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001969f:	75 0f                	jne    c00196b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00196a1:	8d 76 00             	lea    esi,[esi+0x0]
c00196a4:	b8 04 00 00 00       	mov    eax,0x4
c00196a9:	e9 3a 01 00 00       	jmp    c00197e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00196ae:	66 90                	xchg   ax,ax
c00196b0:	83 ec 08             	sub    esp,0x8
c00196b3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196ba:	50                   	push   eax
c00196bb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00196c2:	e8 55 b0 fe ff       	call   c000471c <f_readdir>
c00196c7:	83 c4 10             	add    esp,0x10
c00196ca:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00196d1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00196d8:	83 ec 0c             	sub    esp,0xc
c00196db:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00196e2:	83 c0 16             	add    eax,0x16
c00196e5:	50                   	push   eax
c00196e6:	e8 95 6e fe ff       	call   c0000580 <strlen>
c00196eb:	83 c4 10             	add    esp,0x10
c00196ee:	ba 00 00 00 00       	mov    edx,0x0
c00196f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196f7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00196fb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019702:	0f b6 c0             	movzx  eax,al
c0019705:	83 e0 10             	and    eax,0x10
c0019708:	74 0a                	je     c0019714 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001970a:	b8 02 00 00 00       	mov    eax,0x2
c001970f:	eb 0b                	jmp    c001971c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019711:	8d 76 00             	lea    esi,[esi+0x0]
c0019714:	b8 01 00 00 00       	mov    eax,0x1
c0019719:	8d 76 00             	lea    esi,[esi+0x0]
c001971c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019720:	83 ec 08             	sub    esp,0x8
c0019723:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001972a:	83 c0 16             	add    eax,0x16
c001972d:	50                   	push   eax
c001972e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019732:	83 c0 10             	add    eax,0x10
c0019735:	50                   	push   eax
c0019736:	e8 15 6f fe ff       	call   c0000650 <strcpy>
c001973b:	83 c4 10             	add    esp,0x10
c001973e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019745:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001974c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019750:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019757:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001975e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019765:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001976c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019773:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001977a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019781:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019788:	89 c6                	mov    esi,eax
c001978a:	89 d7                	mov    edi,edx
c001978c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001978e:	89 c8                	mov    eax,ecx
c0019790:	89 fa                	mov    edx,edi
c0019792:	89 f3                	mov    ebx,esi
c0019794:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001979b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00197a2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00197a9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00197b0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00197b6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00197bd:	0f be c0             	movsx  eax,al
c00197c0:	85 c0                	test   eax,eax
c00197c2:	75 08                	jne    c00197cc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00197c4:	b8 07 00 00 00       	mov    eax,0x7
c00197c9:	eb 1d                	jmp    c00197e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197cb:	90                   	nop
c00197cc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00197d3:	85 c0                	test   eax,eax
c00197d5:	75 09                	jne    c00197e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00197d7:	b8 00 00 00 00       	mov    eax,0x0
c00197dc:	eb 0a                	jmp    c00197e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197de:	66 90                	xchg   ax,ax
c00197e0:	b8 01 00 00 00       	mov    eax,0x1
c00197e5:	8d 76 00             	lea    esi,[esi+0x0]
c00197e8:	81 c4 50 02 00 00    	add    esp,0x250
c00197ee:	5b                   	pop    ebx
c00197ef:	5e                   	pop    esi
c00197f0:	5f                   	pop    edi
c00197f1:	c3                   	ret    
c00197f2:	66 90                	xchg   ax,ax

c00197f4 <FAT::read(void*, unsigned long, void*, int*)>:
c00197f4:	83 ec 1c             	sub    esp,0x1c
c00197f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00197fc:	74 0a                	je     c0019808 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00197fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019803:	75 0b                	jne    c0019810 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019805:	8d 76 00             	lea    esi,[esi+0x0]
c0019808:	b8 04 00 00 00       	mov    eax,0x4
c001980d:	eb 41                	jmp    c0019850 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001980f:	90                   	nop
c0019810:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019814:	50                   	push   eax
c0019815:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001981d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019821:	e8 3d a7 fe ff       	call   c0003f63 <f_read>
c0019826:	83 c4 10             	add    esp,0x10
c0019829:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001982d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019831:	89 c2                	mov    edx,eax
c0019833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019837:	89 10                	mov    DWORD PTR [eax],edx
c0019839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001983d:	85 c0                	test   eax,eax
c001983f:	75 07                	jne    c0019848 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019841:	b8 00 00 00 00       	mov    eax,0x0
c0019846:	eb 08                	jmp    c0019850 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019848:	b8 01 00 00 00       	mov    eax,0x1
c001984d:	8d 76 00             	lea    esi,[esi+0x0]
c0019850:	83 c4 1c             	add    esp,0x1c
c0019853:	c3                   	ret    

c0019854 <FAT::write(void*, unsigned long, void*, int*)>:
c0019854:	83 ec 1c             	sub    esp,0x1c
c0019857:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001985c:	74 0a                	je     c0019868 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001985e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019863:	75 0b                	jne    c0019870 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019865:	8d 76 00             	lea    esi,[esi+0x0]
c0019868:	b8 04 00 00 00       	mov    eax,0x4
c001986d:	eb 41                	jmp    c00198b0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001986f:	90                   	nop
c0019870:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019874:	50                   	push   eax
c0019875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019879:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001987d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019881:	e8 be a8 fe ff       	call   c0004144 <f_write>
c0019886:	83 c4 10             	add    esp,0x10
c0019889:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001988d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019891:	89 c2                	mov    edx,eax
c0019893:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019897:	89 10                	mov    DWORD PTR [eax],edx
c0019899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001989d:	85 c0                	test   eax,eax
c001989f:	75 07                	jne    c00198a8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00198a1:	b8 00 00 00 00       	mov    eax,0x0
c00198a6:	eb 08                	jmp    c00198b0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198a8:	b8 01 00 00 00       	mov    eax,0x1
c00198ad:	8d 76 00             	lea    esi,[esi+0x0]
c00198b0:	83 c4 1c             	add    esp,0x1c
c00198b3:	c3                   	ret    

c00198b4 <FAT::close(void*)>:
c00198b4:	83 ec 1c             	sub    esp,0x1c
c00198b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198bc:	75 0a                	jne    c00198c8 <FAT::close(void*)+0x14>
c00198be:	b8 04 00 00 00       	mov    eax,0x4
c00198c3:	eb 3f                	jmp    c0019904 <FAT::close(void*)+0x50>
c00198c5:	8d 76 00             	lea    esi,[esi+0x0]
c00198c8:	83 ec 0c             	sub    esp,0xc
c00198cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198cf:	e8 7c ab fe ff       	call   c0004450 <f_close>
c00198d4:	83 c4 10             	add    esp,0x10
c00198d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198db:	83 ec 0c             	sub    esp,0xc
c00198de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198e2:	e8 fc e1 fe ff       	call   c0007ae3 <free>
c00198e7:	83 c4 10             	add    esp,0x10
c00198ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198ee:	85 c0                	test   eax,eax
c00198f0:	75 0a                	jne    c00198fc <FAT::close(void*)+0x48>
c00198f2:	b8 00 00 00 00       	mov    eax,0x0
c00198f7:	eb 0b                	jmp    c0019904 <FAT::close(void*)+0x50>
c00198f9:	8d 76 00             	lea    esi,[esi+0x0]
c00198fc:	b8 01 00 00 00       	mov    eax,0x1
c0019901:	8d 76 00             	lea    esi,[esi+0x0]
c0019904:	83 c4 1c             	add    esp,0x1c
c0019907:	c3                   	ret    

c0019908 <FAT::closeDir(void*)>:
c0019908:	83 ec 1c             	sub    esp,0x1c
c001990b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019910:	75 0a                	jne    c001991c <FAT::closeDir(void*)+0x14>
c0019912:	b8 04 00 00 00       	mov    eax,0x4
c0019917:	eb 3f                	jmp    c0019958 <FAT::closeDir(void*)+0x50>
c0019919:	8d 76 00             	lea    esi,[esi+0x0]
c001991c:	83 ec 0c             	sub    esp,0xc
c001991f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019923:	e8 d2 ad fe ff       	call   c00046fa <f_closedir>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001992f:	83 ec 0c             	sub    esp,0xc
c0019932:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019936:	e8 a8 e1 fe ff       	call   c0007ae3 <free>
c001993b:	83 c4 10             	add    esp,0x10
c001993e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019942:	85 c0                	test   eax,eax
c0019944:	75 0a                	jne    c0019950 <FAT::closeDir(void*)+0x48>
c0019946:	b8 00 00 00 00       	mov    eax,0x0
c001994b:	eb 0b                	jmp    c0019958 <FAT::closeDir(void*)+0x50>
c001994d:	8d 76 00             	lea    esi,[esi+0x0]
c0019950:	b8 01 00 00 00       	mov    eax,0x1
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	83 c4 1c             	add    esp,0x1c
c001995b:	c3                   	ret    

c001995c <FAT::truncate(void*, unsigned long long)>:
c001995c:	83 ec 2c             	sub    esp,0x2c
c001995f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019963:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019967:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001996b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001996f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019974:	75 0a                	jne    c0019980 <FAT::truncate(void*, unsigned long long)+0x24>
c0019976:	b8 04 00 00 00       	mov    eax,0x4
c001997b:	eb 47                	jmp    c00199c4 <FAT::truncate(void*, unsigned long long)+0x68>
c001997d:	8d 76 00             	lea    esi,[esi+0x0]
c0019980:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019984:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019987:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001998b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019993:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019997:	83 ec 08             	sub    esp,0x8
c001999a:	50                   	push   eax
c001999b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001999f:	e8 db aa fe ff       	call   c000447f <f_lseek>
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199af:	85 c0                	test   eax,eax
c00199b1:	75 09                	jne    c00199bc <FAT::truncate(void*, unsigned long long)+0x60>
c00199b3:	b8 00 00 00 00       	mov    eax,0x0
c00199b8:	eb 0a                	jmp    c00199c4 <FAT::truncate(void*, unsigned long long)+0x68>
c00199ba:	66 90                	xchg   ax,ax
c00199bc:	b8 01 00 00 00       	mov    eax,0x1
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]
c00199c4:	83 c4 2c             	add    esp,0x2c
c00199c7:	c3                   	ret    

c00199c8 <FAT::seek(void*, unsigned long long)>:
c00199c8:	83 ec 2c             	sub    esp,0x2c
c00199cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199db:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199e0:	75 0a                	jne    c00199ec <FAT::seek(void*, unsigned long long)+0x24>
c00199e2:	b8 04 00 00 00       	mov    eax,0x4
c00199e7:	eb 33                	jmp    c0019a1c <FAT::seek(void*, unsigned long long)+0x54>
c00199e9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199f0:	83 ec 08             	sub    esp,0x8
c00199f3:	50                   	push   eax
c00199f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199f8:	e8 82 aa fe ff       	call   c000447f <f_lseek>
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a08:	85 c0                	test   eax,eax
c0019a0a:	75 08                	jne    c0019a14 <FAT::seek(void*, unsigned long long)+0x4c>
c0019a0c:	b8 00 00 00 00       	mov    eax,0x0
c0019a11:	eb 09                	jmp    c0019a1c <FAT::seek(void*, unsigned long long)+0x54>
c0019a13:	90                   	nop
c0019a14:	b8 01 00 00 00       	mov    eax,0x1
c0019a19:	8d 76 00             	lea    esi,[esi+0x0]
c0019a1c:	83 c4 2c             	add    esp,0x2c
c0019a1f:	c3                   	ret    

c0019a20 <fatWrapperReadDisk>:
c0019a20:	53                   	push   ebx
c0019a21:	83 ec 18             	sub    esp,0x18
c0019a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a31:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a38:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a40:	ba 00 00 00 00       	mov    edx,0x0
c0019a45:	83 ec 0c             	sub    esp,0xc
c0019a48:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a4c:	53                   	push   ebx
c0019a4d:	52                   	push   edx
c0019a4e:	50                   	push   eax
c0019a4f:	51                   	push   ecx
c0019a50:	e8 6d 43 ff ff       	call   c000ddc2 <LogicalDisk::read(unsigned long long, int, void*)>
c0019a55:	83 c4 20             	add    esp,0x20
c0019a58:	83 c4 18             	add    esp,0x18
c0019a5b:	5b                   	pop    ebx
c0019a5c:	c3                   	ret    
c0019a5d:	8d 76 00             	lea    esi,[esi+0x0]

c0019a60 <fatWrapperWriteDisk>:
c0019a60:	53                   	push   ebx
c0019a61:	83 ec 18             	sub    esp,0x18
c0019a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a71:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a80:	ba 00 00 00 00       	mov    edx,0x0
c0019a85:	83 ec 0c             	sub    esp,0xc
c0019a88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a8c:	53                   	push   ebx
c0019a8d:	52                   	push   edx
c0019a8e:	50                   	push   eax
c0019a8f:	51                   	push   ecx
c0019a90:	e8 99 43 ff ff       	call   c000de2e <LogicalDisk::write(unsigned long long, int, void*)>
c0019a95:	83 c4 20             	add    esp,0x20
c0019a98:	83 c4 18             	add    esp,0x18
c0019a9b:	5b                   	pop    ebx
c0019a9c:	c3                   	ret    
c0019a9d:	8d 76 00             	lea    esi,[esi+0x0]

c0019aa0 <fatWrapperIoctl>:
c0019aa0:	53                   	push   ebx
c0019aa1:	83 ec 28             	sub    esp,0x28
c0019aa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019aa8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019aac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ab0:	88 d0                	mov    al,dl
c0019ab2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ab6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019abb:	83 f8 02             	cmp    eax,0x2
c0019abe:	75 34                	jne    c0019af4 <fatWrapperIoctl+0x54>
c0019ac0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ac4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ac8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019acd:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019ad4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019ada:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ae0:	89 c2                	mov    edx,eax
c0019ae2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ae6:	66 89 10             	mov    WORD PTR [eax],dx
c0019ae9:	b8 00 00 00 00       	mov    eax,0x0
c0019aee:	e9 c5 00 00 00       	jmp    c0019bb8 <fatWrapperIoctl+0x118>
c0019af3:	90                   	nop
c0019af4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019af9:	83 f8 01             	cmp    eax,0x1
c0019afc:	75 6a                	jne    c0019b68 <fatWrapperIoctl+0xc8>
c0019afe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b0b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b12:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b18:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b1e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b24:	89 c8                	mov    eax,ecx
c0019b26:	89 da                	mov    edx,ebx
c0019b28:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b2c:	c1 e0 0a             	shl    eax,0xa
c0019b2f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b34:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b3b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b41:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b47:	89 cb                	mov    ebx,ecx
c0019b49:	c1 fb 1f             	sar    ebx,0x1f
c0019b4c:	53                   	push   ebx
c0019b4d:	51                   	push   ecx
c0019b4e:	52                   	push   edx
c0019b4f:	50                   	push   eax
c0019b50:	e8 bb 5b 00 00       	call   c001f710 <__udivdi3>
c0019b55:	83 c4 10             	add    esp,0x10
c0019b58:	89 c2                	mov    edx,eax
c0019b5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b5e:	89 10                	mov    DWORD PTR [eax],edx
c0019b60:	b8 00 00 00 00       	mov    eax,0x0
c0019b65:	eb 51                	jmp    c0019bb8 <fatWrapperIoctl+0x118>
c0019b67:	90                   	nop
c0019b68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b6d:	85 c0                	test   eax,eax
c0019b6f:	75 07                	jne    c0019b78 <fatWrapperIoctl+0xd8>
c0019b71:	b8 00 00 00 00       	mov    eax,0x0
c0019b76:	eb 40                	jmp    c0019bb8 <fatWrapperIoctl+0x118>
c0019b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b7d:	83 f8 03             	cmp    eax,0x3
c0019b80:	75 1a                	jne    c0019b9c <fatWrapperIoctl+0xfc>
c0019b82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b8e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019b94:	b8 00 00 00 00       	mov    eax,0x0
c0019b99:	eb 1d                	jmp    c0019bb8 <fatWrapperIoctl+0x118>
c0019b9b:	90                   	nop
c0019b9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba1:	83 f8 04             	cmp    eax,0x4
c0019ba4:	75 0a                	jne    c0019bb0 <fatWrapperIoctl+0x110>
c0019ba6:	b8 00 00 00 00       	mov    eax,0x0
c0019bab:	eb 0b                	jmp    c0019bb8 <fatWrapperIoctl+0x118>
c0019bad:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb0:	b8 04 00 00 00       	mov    eax,0x4
c0019bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bb8:	83 c4 28             	add    esp,0x28
c0019bbb:	5b                   	pop    ebx
c0019bbc:	c3                   	ret    
c0019bbd:	90                   	nop
c0019bbe:	66 90                	xchg   ax,ax

c0019bc0 <FAT::FAT()>:
c0019bc0:	83 ec 1c             	sub    esp,0x1c
c0019bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc7:	83 ec 0c             	sub    esp,0xc
c0019bca:	50                   	push   eax
c0019bcb:	e8 e2 1b ff ff       	call   c000b7b2 <Filesystem::Filesystem()>
c0019bd0:	83 c4 10             	add    esp,0x10
c0019bd3:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c0019bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bdc:	89 10                	mov    DWORD PTR [eax],edx
c0019bde:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019be8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019bf0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019bf5:	7f 19                	jg     c0019c10 <FAT::FAT()+0x50>
c0019bf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bfb:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c06:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c0b:	eb e3                	jmp    c0019bf0 <FAT::FAT()+0x30>
c0019c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c10:	90                   	nop
c0019c11:	83 c4 1c             	add    esp,0x1c
c0019c14:	c3                   	ret    
c0019c15:	90                   	nop
c0019c16:	66 90                	xchg   ax,ax

c0019c18 <FAT::fixFilepath(char*)>:
c0019c18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c1c:	8a 00                	mov    al,BYTE PTR [eax]
c0019c1e:	0f be c0             	movsx  eax,al
c0019c21:	83 f8 40             	cmp    eax,0x40
c0019c24:	7e 2e                	jle    c0019c54 <FAT::fixFilepath(char*)+0x3c>
c0019c26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c2a:	8a 00                	mov    al,BYTE PTR [eax]
c0019c2c:	83 e8 41             	sub    eax,0x41
c0019c2f:	88 c2                	mov    dl,al
c0019c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c35:	88 10                	mov    BYTE PTR [eax],dl
c0019c37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c3b:	8a 00                	mov    al,BYTE PTR [eax]
c0019c3d:	0f be c0             	movsx  eax,al
c0019c40:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c47:	83 c0 30             	add    eax,0x30
c0019c4a:	88 c2                	mov    dl,al
c0019c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c50:	88 10                	mov    BYTE PTR [eax],dl
c0019c52:	66 90                	xchg   ax,ax
c0019c54:	90                   	nop
c0019c55:	c3                   	ret    
c0019c56:	66 90                	xchg   ax,ax

c0019c58 <FAT::open(char const*, void**, FileOpenMode)>:
c0019c58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c66:	74 0c                	je     c0019c74 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c68:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c70:	75 0e                	jne    c0019c80 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019c72:	66 90                	xchg   ax,ax
c0019c74:	b8 04 00 00 00       	mov    eax,0x4
c0019c79:	e9 46 01 00 00       	jmp    c0019dc4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019c7e:	66 90                	xchg   ax,ax
c0019c80:	83 ec 08             	sub    esp,0x8
c0019c83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c8e:	50                   	push   eax
c0019c8f:	e8 bc 69 fe ff       	call   c0000650 <strcpy>
c0019c94:	83 c4 10             	add    esp,0x10
c0019c97:	83 ec 08             	sub    esp,0x8
c0019c9a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c9e:	50                   	push   eax
c0019c9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ca6:	e8 6d ff ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c0019cab:	83 c4 10             	add    esp,0x10
c0019cae:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019cb6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cbd:	83 e0 01             	and    eax,0x1
c0019cc0:	74 12                	je     c0019cd4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019cc2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cc9:	83 c8 01             	or     eax,0x1
c0019ccc:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cd3:	90                   	nop
c0019cd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cdb:	83 e0 04             	and    eax,0x4
c0019cde:	74 24                	je     c0019d04 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019ce0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ce7:	83 c8 30             	or     eax,0x30
c0019cea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cf1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cf8:	83 c8 02             	or     eax,0x2
c0019cfb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d02:	66 90                	xchg   ax,ax
c0019d04:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d0b:	83 e0 02             	and    eax,0x2
c0019d0e:	74 14                	je     c0019d24 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d10:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d17:	83 c8 02             	or     eax,0x2
c0019d1a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d21:	8d 76 00             	lea    esi,[esi+0x0]
c0019d24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d2b:	83 e0 08             	and    eax,0x8
c0019d2e:	74 14                	je     c0019d44 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d30:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d37:	83 c8 04             	or     eax,0x4
c0019d3a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d41:	8d 76 00             	lea    esi,[esi+0x0]
c0019d44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d4b:	83 e0 10             	and    eax,0x10
c0019d4e:	74 14                	je     c0019d64 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d50:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d57:	83 c8 08             	or     eax,0x8
c0019d5a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d61:	8d 76 00             	lea    esi,[esi+0x0]
c0019d64:	83 ec 0c             	sub    esp,0xc
c0019d67:	68 28 02 00 00       	push   0x228
c0019d6c:	e8 62 dd fe ff       	call   c0007ad3 <malloc>
c0019d71:	83 c4 10             	add    esp,0x10
c0019d74:	89 c2                	mov    edx,eax
c0019d76:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d7d:	89 10                	mov    DWORD PTR [eax],edx
c0019d7f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019d87:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d90:	83 ec 04             	sub    esp,0x4
c0019d93:	52                   	push   edx
c0019d94:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d98:	52                   	push   edx
c0019d99:	50                   	push   eax
c0019d9a:	e8 01 9f fe ff       	call   c0003ca0 <f_open>
c0019d9f:	83 c4 10             	add    esp,0x10
c0019da2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019da9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019db1:	74 09                	je     c0019dbc <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019db3:	b8 01 00 00 00       	mov    eax,0x1
c0019db8:	eb 0a                	jmp    c0019dc4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019dba:	66 90                	xchg   ax,ax
c0019dbc:	b8 00 00 00 00       	mov    eax,0x0
c0019dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <FAT::openDir(char const*, void**)>:
c0019dcc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dd2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dda:	74 0c                	je     c0019de8 <FAT::openDir(char const*, void**)+0x1c>
c0019ddc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019de4:	75 0e                	jne    c0019df4 <FAT::openDir(char const*, void**)+0x28>
c0019de6:	66 90                	xchg   ax,ax
c0019de8:	b8 04 00 00 00       	mov    eax,0x4
c0019ded:	e9 82 00 00 00       	jmp    c0019e74 <FAT::openDir(char const*, void**)+0xa8>
c0019df2:	66 90                	xchg   ax,ax
c0019df4:	83 ec 08             	sub    esp,0x8
c0019df7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dfe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e02:	50                   	push   eax
c0019e03:	e8 48 68 fe ff       	call   c0000650 <strcpy>
c0019e08:	83 c4 10             	add    esp,0x10
c0019e0b:	83 ec 08             	sub    esp,0x8
c0019e0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e12:	50                   	push   eax
c0019e13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e1a:	e8 f9 fd ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c0019e1f:	83 c4 10             	add    esp,0x10
c0019e22:	83 ec 0c             	sub    esp,0xc
c0019e25:	6a 30                	push   0x30
c0019e27:	e8 a7 dc fe ff       	call   c0007ad3 <malloc>
c0019e2c:	83 c4 10             	add    esp,0x10
c0019e2f:	89 c2                	mov    edx,eax
c0019e31:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e38:	89 10                	mov    DWORD PTR [eax],edx
c0019e3a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e41:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e43:	83 ec 08             	sub    esp,0x8
c0019e46:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e4a:	52                   	push   edx
c0019e4b:	50                   	push   eax
c0019e4c:	e8 de a7 fe ff       	call   c000462f <f_opendir>
c0019e51:	83 c4 10             	add    esp,0x10
c0019e54:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e5b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e63:	74 07                	je     c0019e6c <FAT::openDir(char const*, void**)+0xa0>
c0019e65:	b8 01 00 00 00       	mov    eax,0x1
c0019e6a:	eb 08                	jmp    c0019e74 <FAT::openDir(char const*, void**)+0xa8>
c0019e6c:	b8 00 00 00 00       	mov    eax,0x0
c0019e71:	8d 76 00             	lea    esi,[esi+0x0]
c0019e74:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e7a:	c3                   	ret    
c0019e7b:	90                   	nop

c0019e7c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019e7c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e82:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019e8a:	75 0c                	jne    c0019e98 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019e8c:	b8 04 00 00 00       	mov    eax,0x4
c0019e91:	e9 d6 00 00 00       	jmp    c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e96:	66 90                	xchg   ax,ax
c0019e98:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ea0:	75 0a                	jne    c0019eac <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ea2:	b8 04 00 00 00       	mov    eax,0x4
c0019ea7:	e9 c0 00 00 00       	jmp    c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019eac:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019eb4:	75 0a                	jne    c0019ec0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019eb6:	b8 04 00 00 00       	mov    eax,0x4
c0019ebb:	e9 ac 00 00 00       	jmp    c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ec0:	83 ec 08             	sub    esp,0x8
c0019ec3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019eca:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ed1:	50                   	push   eax
c0019ed2:	e8 79 67 fe ff       	call   c0000650 <strcpy>
c0019ed7:	83 c4 10             	add    esp,0x10
c0019eda:	83 ec 08             	sub    esp,0x8
c0019edd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ee4:	50                   	push   eax
c0019ee5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019eec:	e8 27 fd ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c0019ef1:	83 c4 10             	add    esp,0x10
c0019ef4:	83 ec 08             	sub    esp,0x8
c0019ef7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019efb:	50                   	push   eax
c0019efc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f03:	50                   	push   eax
c0019f04:	e8 a5 a8 fe ff       	call   c00047ae <f_stat>
c0019f09:	83 c4 10             	add    esp,0x10
c0019f0c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f13:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f1a:	85 c0                	test   eax,eax
c0019f1c:	74 0a                	je     c0019f28 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f1e:	83 f8 04             	cmp    eax,0x4
c0019f21:	74 39                	je     c0019f5c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f23:	eb 3f                	jmp    c0019f64 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f25:	8d 76 00             	lea    esi,[esi+0x0]
c0019f28:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f2c:	0f b6 c0             	movzx  eax,al
c0019f2f:	83 e0 10             	and    eax,0x10
c0019f32:	0f 95 c2             	setne  dl
c0019f35:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f3c:	88 10                	mov    BYTE PTR [eax],dl
c0019f3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f42:	ba 00 00 00 00       	mov    edx,0x0
c0019f47:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f4e:	89 01                	mov    DWORD PTR [ecx],eax
c0019f50:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f53:	b8 00 00 00 00       	mov    eax,0x0
c0019f58:	eb 12                	jmp    c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f5a:	66 90                	xchg   ax,ax
c0019f5c:	b8 02 00 00 00       	mov    eax,0x2
c0019f61:	eb 09                	jmp    c0019f6c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f63:	90                   	nop
c0019f64:	b8 01 00 00 00       	mov    eax,0x1
c0019f69:	8d 76 00             	lea    esi,[esi+0x0]
c0019f6c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f72:	c3                   	ret    
c0019f73:	90                   	nop

c0019f74 <FAT::unlink(char const*)>:
c0019f74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f82:	75 08                	jne    c0019f8c <FAT::unlink(char const*)+0x18>
c0019f84:	b8 04 00 00 00       	mov    eax,0x4
c0019f89:	eb 61                	jmp    c0019fec <FAT::unlink(char const*)+0x78>
c0019f8b:	90                   	nop
c0019f8c:	83 ec 08             	sub    esp,0x8
c0019f8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f96:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f9a:	50                   	push   eax
c0019f9b:	e8 b0 66 fe ff       	call   c0000650 <strcpy>
c0019fa0:	83 c4 10             	add    esp,0x10
c0019fa3:	83 ec 08             	sub    esp,0x8
c0019fa6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019faa:	50                   	push   eax
c0019fab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fb2:	e8 61 fc ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c0019fb7:	83 c4 10             	add    esp,0x10
c0019fba:	83 ec 0c             	sub    esp,0xc
c0019fbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fc1:	50                   	push   eax
c0019fc2:	e8 59 aa fe ff       	call   c0004a20 <f_unlink>
c0019fc7:	83 c4 10             	add    esp,0x10
c0019fca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fd1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019fd8:	85 c0                	test   eax,eax
c0019fda:	75 08                	jne    c0019fe4 <FAT::unlink(char const*)+0x70>
c0019fdc:	b8 00 00 00 00       	mov    eax,0x0
c0019fe1:	eb 09                	jmp    c0019fec <FAT::unlink(char const*)+0x78>
c0019fe3:	90                   	nop
c0019fe4:	b8 01 00 00 00       	mov    eax,0x1
c0019fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fec:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ff2:	c3                   	ret    
c0019ff3:	90                   	nop

c0019ff4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ff4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ffa:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a001:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a008:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a00c:	88 d0                	mov    al,dl
c001a00e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a012:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a01a:	75 0c                	jne    c001a028 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a01c:	b8 04 00 00 00       	mov    eax,0x4
c001a021:	e9 7e 01 00 00       	jmp    c001a1a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a026:	66 90                	xchg   ax,ax
c001a028:	83 ec 08             	sub    esp,0x8
c001a02b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a032:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a036:	50                   	push   eax
c001a037:	e8 14 66 fe ff       	call   c0000650 <strcpy>
c001a03c:	83 c4 10             	add    esp,0x10
c001a03f:	83 ec 08             	sub    esp,0x8
c001a042:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a046:	50                   	push   eax
c001a047:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a04e:	e8 c5 fb ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c001a053:	83 c4 10             	add    esp,0x10
c001a056:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a05e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a066:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a06b:	83 e0 01             	and    eax,0x1
c001a06e:	74 14                	je     c001a084 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a070:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a077:	83 c8 01             	or     eax,0x1
c001a07a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a081:	8d 76 00             	lea    esi,[esi+0x0]
c001a084:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a089:	83 e0 02             	and    eax,0x2
c001a08c:	74 12                	je     c001a0a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a08e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a095:	83 c8 20             	or     eax,0x20
c001a098:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a09f:	90                   	nop
c001a0a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0a5:	83 e0 04             	and    eax,0x4
c001a0a8:	74 12                	je     c001a0bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a0aa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0b1:	83 c8 04             	or     eax,0x4
c001a0b4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0bb:	90                   	nop
c001a0bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0c1:	83 e0 08             	and    eax,0x8
c001a0c4:	74 12                	je     c001a0d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a0c6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0cd:	83 c8 02             	or     eax,0x2
c001a0d0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0d7:	90                   	nop
c001a0d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0dd:	83 e0 01             	and    eax,0x1
c001a0e0:	74 12                	je     c001a0f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a0e2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0e9:	83 c8 01             	or     eax,0x1
c001a0ec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0f3:	90                   	nop
c001a0f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0f9:	83 e0 02             	and    eax,0x2
c001a0fc:	74 12                	je     c001a110 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a0fe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a105:	83 c8 20             	or     eax,0x20
c001a108:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a10f:	90                   	nop
c001a110:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a115:	83 e0 04             	and    eax,0x4
c001a118:	74 12                	je     c001a12c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a11a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a121:	83 c8 04             	or     eax,0x4
c001a124:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a12b:	90                   	nop
c001a12c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a131:	83 e0 08             	and    eax,0x8
c001a134:	74 12                	je     c001a148 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a136:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a13d:	83 c8 02             	or     eax,0x2
c001a140:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a147:	90                   	nop
c001a148:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a14f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a156:	09 d0                	or     eax,edx
c001a158:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a15f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a167:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a16f:	83 ec 04             	sub    esp,0x4
c001a172:	52                   	push   edx
c001a173:	50                   	push   eax
c001a174:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a178:	50                   	push   eax
c001a179:	e8 15 ad fe ff       	call   c0004e93 <f_chmod>
c001a17e:	83 c4 10             	add    esp,0x10
c001a181:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a188:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a18f:	85 c0                	test   eax,eax
c001a191:	75 09                	jne    c001a19c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a193:	b8 00 00 00 00       	mov    eax,0x0
c001a198:	eb 0a                	jmp    c001a1a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a19a:	66 90                	xchg   ax,ax
c001a19c:	b8 01 00 00 00       	mov    eax,0x1
c001a1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1aa:	c3                   	ret    
c001a1ab:	90                   	nop

c001a1ac <FAT::rename(char const*, char const*)>:
c001a1ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1b2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1ba:	74 0c                	je     c001a1c8 <FAT::rename(char const*, char const*)+0x1c>
c001a1bc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1c4:	75 0e                	jne    c001a1d4 <FAT::rename(char const*, char const*)+0x28>
c001a1c6:	66 90                	xchg   ax,ax
c001a1c8:	b8 04 00 00 00       	mov    eax,0x4
c001a1cd:	e9 9e 00 00 00       	jmp    c001a270 <FAT::rename(char const*, char const*)+0xc4>
c001a1d2:	66 90                	xchg   ax,ax
c001a1d4:	83 ec 08             	sub    esp,0x8
c001a1d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1de:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1e5:	50                   	push   eax
c001a1e6:	e8 65 64 fe ff       	call   c0000650 <strcpy>
c001a1eb:	83 c4 10             	add    esp,0x10
c001a1ee:	83 ec 08             	sub    esp,0x8
c001a1f1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a1f8:	50                   	push   eax
c001a1f9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a200:	e8 13 fa ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c001a205:	83 c4 10             	add    esp,0x10
c001a208:	83 ec 08             	sub    esp,0x8
c001a20b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a212:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a216:	50                   	push   eax
c001a217:	e8 34 64 fe ff       	call   c0000650 <strcpy>
c001a21c:	83 c4 10             	add    esp,0x10
c001a21f:	83 ec 08             	sub    esp,0x8
c001a222:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a226:	50                   	push   eax
c001a227:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a22e:	e8 e5 f9 ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c001a233:	83 c4 10             	add    esp,0x10
c001a236:	83 ec 08             	sub    esp,0x8
c001a239:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a23d:	50                   	push   eax
c001a23e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a245:	50                   	push   eax
c001a246:	e8 90 aa fe ff       	call   c0004cdb <f_rename>
c001a24b:	83 c4 10             	add    esp,0x10
c001a24e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a255:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a25c:	85 c0                	test   eax,eax
c001a25e:	75 08                	jne    c001a268 <FAT::rename(char const*, char const*)+0xbc>
c001a260:	b8 00 00 00 00       	mov    eax,0x0
c001a265:	eb 09                	jmp    c001a270 <FAT::rename(char const*, char const*)+0xc4>
c001a267:	90                   	nop
c001a268:	b8 01 00 00 00       	mov    eax,0x1
c001a26d:	8d 76 00             	lea    esi,[esi+0x0]
c001a270:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a276:	c3                   	ret    
c001a277:	90                   	nop

c001a278 <FAT::mkdir(char const*)>:
c001a278:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a27e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a286:	75 08                	jne    c001a290 <FAT::mkdir(char const*)+0x18>
c001a288:	b8 04 00 00 00       	mov    eax,0x4
c001a28d:	eb 61                	jmp    c001a2f0 <FAT::mkdir(char const*)+0x78>
c001a28f:	90                   	nop
c001a290:	83 ec 08             	sub    esp,0x8
c001a293:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a29a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a29e:	50                   	push   eax
c001a29f:	e8 ac 63 fe ff       	call   c0000650 <strcpy>
c001a2a4:	83 c4 10             	add    esp,0x10
c001a2a7:	83 ec 08             	sub    esp,0x8
c001a2aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2ae:	50                   	push   eax
c001a2af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2b6:	e8 5d f9 ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c001a2bb:	83 c4 10             	add    esp,0x10
c001a2be:	83 ec 0c             	sub    esp,0xc
c001a2c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2c5:	50                   	push   eax
c001a2c6:	e8 75 a8 fe ff       	call   c0004b40 <f_mkdir>
c001a2cb:	83 c4 10             	add    esp,0x10
c001a2ce:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2d5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a2dc:	85 c0                	test   eax,eax
c001a2de:	75 08                	jne    c001a2e8 <FAT::mkdir(char const*)+0x70>
c001a2e0:	b8 00 00 00 00       	mov    eax,0x0
c001a2e5:	eb 09                	jmp    c001a2f0 <FAT::mkdir(char const*)+0x78>
c001a2e7:	90                   	nop
c001a2e8:	b8 01 00 00 00       	mov    eax,0x1
c001a2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2f6:	c3                   	ret    
c001a2f7:	90                   	nop

c001a2f8 <FAT::exists(char const*)>:
c001a2f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2fe:	83 ec 08             	sub    esp,0x8
c001a301:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a308:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a30c:	50                   	push   eax
c001a30d:	e8 3e 63 fe ff       	call   c0000650 <strcpy>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	83 ec 08             	sub    esp,0x8
c001a318:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a31c:	50                   	push   eax
c001a31d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a324:	e8 ef f8 ff ff       	call   c0019c18 <FAT::fixFilepath(char*)>
c001a329:	83 c4 10             	add    esp,0x10
c001a32c:	83 ec 08             	sub    esp,0x8
c001a32f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a336:	50                   	push   eax
c001a337:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a33b:	50                   	push   eax
c001a33c:	e8 6d a4 fe ff       	call   c00047ae <f_stat>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a34b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a352:	85 c0                	test   eax,eax
c001a354:	75 06                	jne    c001a35c <FAT::exists(char const*)+0x64>
c001a356:	b0 01                	mov    al,0x1
c001a358:	eb 06                	jmp    c001a360 <FAT::exists(char const*)+0x68>
c001a35a:	66 90                	xchg   ax,ax
c001a35c:	b0 00                	mov    al,0x0
c001a35e:	66 90                	xchg   ax,ax
c001a360:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a366:	c3                   	ret    
c001a367:	90                   	nop

c001a368 <isoReadDiscSectorHelper>:
c001a368:	83 ec 2c             	sub    esp,0x2c
c001a36b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a36f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a373:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a378:	83 e8 41             	sub    eax,0x41
c001a37b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a382:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a386:	ba 00 00 00 00       	mov    edx,0x0
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a392:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a396:	52                   	push   edx
c001a397:	50                   	push   eax
c001a398:	51                   	push   ecx
c001a399:	e8 24 3a ff ff       	call   c000ddc2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a39e:	83 c4 20             	add    esp,0x20
c001a3a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3a5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3aa:	74 0c                	je     c001a3b8 <isoReadDiscSectorHelper+0x50>
c001a3ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3b0:	c1 e0 0b             	shl    eax,0xb
c001a3b3:	eb 0b                	jmp    c001a3c0 <isoReadDiscSectorHelper+0x58>
c001a3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b8:	b8 00 00 00 00       	mov    eax,0x0
c001a3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c0:	83 c4 2c             	add    esp,0x2c
c001a3c3:	c3                   	ret    

c001a3c4 <iso_kprintf>:
c001a3c4:	83 ec 0c             	sub    esp,0xc
c001a3c7:	83 ec 08             	sub    esp,0x8
c001a3ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ce:	68 ba 2b 02 c0       	push   0xc0022bba
c001a3d3:	e8 32 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	90                   	nop
c001a3dc:	83 c4 0c             	add    esp,0xc
c001a3df:	c3                   	ret    

c001a3e0 <iso_kprintfd>:
c001a3e0:	83 ec 0c             	sub    esp,0xc
c001a3e3:	83 ec 08             	sub    esp,0x8
c001a3e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ea:	68 da 12 02 c0       	push   0xc00212da
c001a3ef:	e8 16 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	90                   	nop
c001a3f8:	83 c4 0c             	add    esp,0xc
c001a3fb:	c3                   	ret    

c001a3fc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a3fc:	b8 08 00 00 00       	mov    eax,0x8
c001a401:	c3                   	ret    

c001a402 <ISO9660::truncate(void*, unsigned long long)>:
c001a402:	b8 01 00 00 00       	mov    eax,0x1
c001a407:	c3                   	ret    

c001a408 <ISO9660::getName()>:
c001a408:	b8 70 2e 02 c0       	mov    eax,0xc0022e70
c001a40d:	c3                   	ret    

c001a40e <ISO9660::closeDir(void*)>:
c001a40e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a412:	8b 00                	mov    eax,DWORD PTR [eax]
c001a414:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a417:	90                   	nop

c001a418 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a418:	b8 01 00 00 00       	mov    eax,0x1
c001a41d:	c3                   	ret    

c001a41e <ISO9660::unlink(char const*)>:
c001a41e:	b8 01 00 00 00       	mov    eax,0x1
c001a423:	c3                   	ret    

c001a424 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a424:	b8 03 00 00 00       	mov    eax,0x3
c001a429:	c3                   	ret    

c001a42a <ISO9660::rename(char const*, char const*)>:
c001a42a:	b8 01 00 00 00       	mov    eax,0x1
c001a42f:	c3                   	ret    

c001a430 <ISO9660::mkdir(char const*)>:
c001a430:	b8 01 00 00 00       	mov    eax,0x1
c001a435:	c3                   	ret    

c001a436 <ISO9660::~ISO9660()>:
c001a436:	83 ec 0c             	sub    esp,0xc
c001a439:	ba b0 2f 02 c0       	mov    edx,0xc0022fb0
c001a43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a442:	89 10                	mov    DWORD PTR [eax],edx
c001a444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a448:	83 ec 0c             	sub    esp,0xc
c001a44b:	50                   	push   eax
c001a44c:	e8 85 13 ff ff       	call   c000b7d6 <Filesystem::~Filesystem()>
c001a451:	83 c4 10             	add    esp,0x10
c001a454:	90                   	nop
c001a455:	83 c4 0c             	add    esp,0xc
c001a458:	c3                   	ret    
c001a459:	90                   	nop

c001a45a <ISO9660::~ISO9660()>:
c001a45a:	83 ec 0c             	sub    esp,0xc
c001a45d:	83 ec 0c             	sub    esp,0xc
c001a460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a464:	e8 cd ff ff ff       	call   c001a436 <ISO9660::~ISO9660()>
c001a469:	83 c4 10             	add    esp,0x10
c001a46c:	83 ec 08             	sub    esp,0x8
c001a46f:	6a 08                	push   0x8
c001a471:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a475:	e8 92 03 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	83 c4 0c             	add    esp,0xc
c001a480:	c3                   	ret    
c001a481:	90                   	nop

c001a482 <ISO9660::exists(char const*)>:
c001a482:	83 ec 18             	sub    esp,0x18
c001a485:	68 8b 2e 02 c0       	push   0xc0022e8b
c001a48a:	e8 10 71 ff ff       	call   c001159f <KePanic(char const*)>
c001a48f:	31 c0                	xor    eax,eax
c001a491:	83 c4 1c             	add    esp,0x1c
c001a494:	c3                   	ret    
c001a495:	90                   	nop

c001a496 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a496:	56                   	push   esi
c001a497:	53                   	push   ebx
c001a498:	53                   	push   ebx
c001a499:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a49d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4a1:	85 db                	test   ebx,ebx
c001a4a3:	0f 84 ca 00 00 00    	je     c001a573 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4a9:	85 f6                	test   esi,esi
c001a4ab:	0f 84 c2 00 00 00    	je     c001a573 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4b1:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a4b6:	b8 03 00 00 00       	mov    eax,0x3
c001a4bb:	0f 85 b7 00 00 00    	jne    c001a578 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4c1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a4c3:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a4c9:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4d0:	74 1b                	je     c001a4ed <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a4d2:	85 c0                	test   eax,eax
c001a4d4:	74 10                	je     c001a4e6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a4d6:	83 ec 0c             	sub    esp,0xc
c001a4d9:	68 a9 2e 02 c0       	push   0xc0022ea9
c001a4de:	e8 bc 70 ff ff       	call   c001159f <KePanic(char const*)>
c001a4e3:	83 c4 10             	add    esp,0x10
c001a4e6:	8a 03                	mov    al,BYTE PTR [ebx]
c001a4e8:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a4ed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4f0:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4f7:	85 c0                	test   eax,eax
c001a4f9:	74 09                	je     c001a504 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a4fb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a502:	74 48                	je     c001a54c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	68 b9 2e 02 c0       	push   0xc0022eb9
c001a50c:	e8 f9 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a511:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a514:	83 c4 10             	add    esp,0x10
c001a517:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a51e:	85 c0                	test   eax,eax
c001a520:	74 17                	je     c001a539 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a522:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a529:	83 ec 0c             	sub    esp,0xc
c001a52c:	68 d9 2e 02 c0       	push   0xc0022ed9
c001a531:	e8 d4 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a540:	83 ec 0c             	sub    esp,0xc
c001a543:	50                   	push   eax
c001a544:	e8 1e c5 fe ff       	call   c0006a67 <init_percd>
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	51                   	push   ecx
c001a54d:	83 c3 03             	add    ebx,0x3
c001a550:	51                   	push   ecx
c001a551:	6a 00                	push   0x0
c001a553:	53                   	push   ebx
c001a554:	e8 d1 bf fe ff       	call   c000652a <iso_open>
c001a559:	83 c4 10             	add    esp,0x10
c001a55c:	89 c2                	mov    edx,eax
c001a55e:	b8 01 00 00 00       	mov    eax,0x1
c001a563:	83 fa ff             	cmp    edx,0xffffffff
c001a566:	74 10                	je     c001a578 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a568:	83 c2 32             	add    edx,0x32
c001a56b:	31 c0                	xor    eax,eax
c001a56d:	01 d2                	add    edx,edx
c001a56f:	89 16                	mov    DWORD PTR [esi],edx
c001a571:	eb 05                	jmp    c001a578 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a573:	b8 04 00 00 00       	mov    eax,0x4
c001a578:	5a                   	pop    edx
c001a579:	5b                   	pop    ebx
c001a57a:	5e                   	pop    esi
c001a57b:	c3                   	ret    

c001a57c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a57c:	53                   	push   ebx
c001a57d:	83 ec 08             	sub    esp,0x8
c001a580:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a588:	85 c0                	test   eax,eax
c001a58a:	74 2d                	je     c001a5b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a58c:	85 db                	test   ebx,ebx
c001a58e:	74 29                	je     c001a5b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a590:	52                   	push   edx
c001a591:	b9 02 00 00 00       	mov    ecx,0x2
c001a596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a59a:	99                   	cdq    
c001a59b:	f7 f9                	idiv   ecx
c001a59d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5a1:	83 e8 32             	sub    eax,0x32
c001a5a4:	50                   	push   eax
c001a5a5:	e8 28 c0 fe ff       	call   c00065d2 <iso_read>
c001a5aa:	83 c4 10             	add    esp,0x10
c001a5ad:	89 03                	mov    DWORD PTR [ebx],eax
c001a5af:	09 d0                	or     eax,edx
c001a5b1:	0f 94 c0             	sete   al
c001a5b4:	0f b6 c0             	movzx  eax,al
c001a5b7:	eb 05                	jmp    c001a5be <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a5b9:	b8 04 00 00 00       	mov    eax,0x4
c001a5be:	83 c4 08             	add    esp,0x8
c001a5c1:	5b                   	pop    ebx
c001a5c2:	c3                   	ret    
c001a5c3:	90                   	nop

c001a5c4 <ISO9660::seek(void*, unsigned long long)>:
c001a5c4:	57                   	push   edi
c001a5c5:	b8 04 00 00 00       	mov    eax,0x4
c001a5ca:	56                   	push   esi
c001a5cb:	51                   	push   ecx
c001a5cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a5d8:	85 d2                	test   edx,edx
c001a5da:	74 26                	je     c001a602 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a5dc:	89 d0                	mov    eax,edx
c001a5de:	b9 02 00 00 00       	mov    ecx,0x2
c001a5e3:	6a 00                	push   0x0
c001a5e5:	99                   	cdq    
c001a5e6:	f7 f9                	idiv   ecx
c001a5e8:	57                   	push   edi
c001a5e9:	56                   	push   esi
c001a5ea:	83 e8 32             	sub    eax,0x32
c001a5ed:	50                   	push   eax
c001a5ee:	e8 f5 c0 fe ff       	call   c00066e8 <iso_seek>
c001a5f3:	83 c4 10             	add    esp,0x10
c001a5f6:	31 f0                	xor    eax,esi
c001a5f8:	31 fa                	xor    edx,edi
c001a5fa:	09 d0                	or     eax,edx
c001a5fc:	0f 95 c0             	setne  al
c001a5ff:	0f b6 c0             	movzx  eax,al
c001a602:	5a                   	pop    edx
c001a603:	5e                   	pop    esi
c001a604:	5f                   	pop    edi
c001a605:	c3                   	ret    

c001a606 <ISO9660::tell(void*, unsigned long long*)>:
c001a606:	53                   	push   ebx
c001a607:	83 ec 08             	sub    esp,0x8
c001a60a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a60e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a612:	85 c0                	test   eax,eax
c001a614:	74 24                	je     c001a63a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a616:	85 db                	test   ebx,ebx
c001a618:	74 20                	je     c001a63a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a61a:	b9 02 00 00 00       	mov    ecx,0x2
c001a61f:	99                   	cdq    
c001a620:	f7 f9                	idiv   ecx
c001a622:	83 ec 0c             	sub    esp,0xc
c001a625:	83 e8 32             	sub    eax,0x32
c001a628:	50                   	push   eax
c001a629:	e8 3e c1 fe ff       	call   c000676c <iso_tell>
c001a62e:	83 c4 10             	add    esp,0x10
c001a631:	89 03                	mov    DWORD PTR [ebx],eax
c001a633:	31 c0                	xor    eax,eax
c001a635:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a638:	eb 05                	jmp    c001a63f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a63a:	b8 04 00 00 00       	mov    eax,0x4
c001a63f:	83 c4 08             	add    esp,0x8
c001a642:	5b                   	pop    ebx
c001a643:	c3                   	ret    

c001a644 <ISO9660::stat(void*, unsigned long long*)>:
c001a644:	56                   	push   esi
c001a645:	53                   	push   ebx
c001a646:	83 ec 10             	sub    esp,0x10
c001a649:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a64d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a651:	68 fd 2e 02 c0       	push   0xc0022efd
c001a656:	e8 af 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a65b:	83 c4 10             	add    esp,0x10
c001a65e:	85 db                	test   ebx,ebx
c001a660:	74 2a                	je     c001a68c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a662:	85 f6                	test   esi,esi
c001a664:	74 26                	je     c001a68c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a666:	89 d8                	mov    eax,ebx
c001a668:	b9 02 00 00 00       	mov    ecx,0x2
c001a66d:	99                   	cdq    
c001a66e:	83 ec 0c             	sub    esp,0xc
c001a671:	f7 f9                	idiv   ecx
c001a673:	83 e8 32             	sub    eax,0x32
c001a676:	50                   	push   eax
c001a677:	e8 21 c1 fe ff       	call   c000679d <iso_total>
c001a67c:	83 c4 10             	add    esp,0x10
c001a67f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a686:	89 06                	mov    DWORD PTR [esi],eax
c001a688:	31 c0                	xor    eax,eax
c001a68a:	eb 05                	jmp    c001a691 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a68c:	b8 04 00 00 00       	mov    eax,0x4
c001a691:	5a                   	pop    edx
c001a692:	5b                   	pop    ebx
c001a693:	5e                   	pop    esi
c001a694:	c3                   	ret    
c001a695:	90                   	nop

c001a696 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a696:	55                   	push   ebp
c001a697:	57                   	push   edi
c001a698:	56                   	push   esi
c001a699:	53                   	push   ebx
c001a69a:	83 ec 18             	sub    esp,0x18
c001a69d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a6a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a6a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a6a9:	68 05 2f 02 c0       	push   0xc0022f05
c001a6ae:	e8 57 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6b3:	83 c4 10             	add    esp,0x10
c001a6b6:	85 ff                	test   edi,edi
c001a6b8:	0f 94 c0             	sete   al
c001a6bb:	85 f6                	test   esi,esi
c001a6bd:	0f 94 c2             	sete   dl
c001a6c0:	09 d0                	or     eax,edx
c001a6c2:	a8 01                	test   al,0x1
c001a6c4:	0f 85 dd 00 00 00    	jne    c001a7a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6ca:	85 db                	test   ebx,ebx
c001a6cc:	0f 84 d5 00 00 00    	je     c001a7a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a6d5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a6db:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a6e2:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6e9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a6eb:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a6f1:	74 1b                	je     c001a70e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a6f3:	85 c0                	test   eax,eax
c001a6f5:	74 10                	je     c001a707 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a6f7:	83 ec 0c             	sub    esp,0xc
c001a6fa:	68 a9 2e 02 c0       	push   0xc0022ea9
c001a6ff:	e8 9b 6e ff ff       	call   c001159f <KePanic(char const*)>
c001a704:	83 c4 10             	add    esp,0x10
c001a707:	8a 03                	mov    al,BYTE PTR [ebx]
c001a709:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a70e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a711:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a718:	85 c0                	test   eax,eax
c001a71a:	74 09                	je     c001a725 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a71c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a723:	74 51                	je     c001a776 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a725:	83 ec 0c             	sub    esp,0xc
c001a728:	68 0d 2f 02 c0       	push   0xc0022f0d
c001a72d:	e8 d8 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a732:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a735:	83 c4 10             	add    esp,0x10
c001a738:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a740:	74 21                	je     c001a763 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a742:	83 ec 0c             	sub    esp,0xc
c001a745:	68 2d 2f 02 c0       	push   0xc0022f2d
c001a74a:	e8 bb 01 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a74f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a752:	83 c4 10             	add    esp,0x10
c001a755:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a75c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a763:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	50                   	push   eax
c001a76e:	e8 f4 c2 fe ff       	call   c0006a67 <init_percd>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	52                   	push   edx
c001a777:	83 c3 03             	add    ebx,0x3
c001a77a:	52                   	push   edx
c001a77b:	6a 00                	push   0x0
c001a77d:	53                   	push   ebx
c001a77e:	e8 a7 bd fe ff       	call   c000652a <iso_open>
c001a783:	83 c4 10             	add    esp,0x10
c001a786:	83 f8 ff             	cmp    eax,0xffffffff
c001a789:	89 c5                	mov    ebp,eax
c001a78b:	75 21                	jne    c001a7ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a78d:	50                   	push   eax
c001a78e:	50                   	push   eax
c001a78f:	6a 01                	push   0x1
c001a791:	53                   	push   ebx
c001a792:	e8 93 bd fe ff       	call   c000652a <iso_open>
c001a797:	83 c4 10             	add    esp,0x10
c001a79a:	ba 02 00 00 00       	mov    edx,0x2
c001a79f:	40                   	inc    eax
c001a7a0:	74 2b                	je     c001a7cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7a2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a7a5:	eb 24                	jmp    c001a7cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a7a7:	ba 04 00 00 00       	mov    edx,0x4
c001a7ac:	eb 1f                	jmp    c001a7cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7ae:	83 ec 0c             	sub    esp,0xc
c001a7b1:	50                   	push   eax
c001a7b2:	e8 e6 bf fe ff       	call   c000679d <iso_total>
c001a7b7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7be:	89 07                	mov    DWORD PTR [edi],eax
c001a7c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a7c3:	e8 ec bd fe ff       	call   c00065b4 <iso_close>
c001a7c8:	83 c4 10             	add    esp,0x10
c001a7cb:	31 d2                	xor    edx,edx
c001a7cd:	83 c4 0c             	add    esp,0xc
c001a7d0:	89 d0                	mov    eax,edx
c001a7d2:	5b                   	pop    ebx
c001a7d3:	5e                   	pop    esi
c001a7d4:	5f                   	pop    edi
c001a7d5:	5d                   	pop    ebp
c001a7d6:	c3                   	ret    
c001a7d7:	90                   	nop

c001a7d8 <ISO9660::close(void*)>:
c001a7d8:	83 ec 0c             	sub    esp,0xc
c001a7db:	b8 04 00 00 00       	mov    eax,0x4
c001a7e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7e4:	85 d2                	test   edx,edx
c001a7e6:	74 1b                	je     c001a803 <ISO9660::close(void*)+0x2b>
c001a7e8:	89 d0                	mov    eax,edx
c001a7ea:	b9 02 00 00 00       	mov    ecx,0x2
c001a7ef:	99                   	cdq    
c001a7f0:	83 ec 0c             	sub    esp,0xc
c001a7f3:	f7 f9                	idiv   ecx
c001a7f5:	83 e8 32             	sub    eax,0x32
c001a7f8:	50                   	push   eax
c001a7f9:	e8 b6 bd fe ff       	call   c00065b4 <iso_close>
c001a7fe:	83 c4 10             	add    esp,0x10
c001a801:	31 c0                	xor    eax,eax
c001a803:	83 c4 0c             	add    esp,0xc
c001a806:	c3                   	ret    
c001a807:	90                   	nop

c001a808 <ISO9660::openDir(char const*, void**)>:
c001a808:	56                   	push   esi
c001a809:	53                   	push   ebx
c001a80a:	50                   	push   eax
c001a80b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a80f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a813:	85 db                	test   ebx,ebx
c001a815:	0f 84 bd 00 00 00    	je     c001a8d8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a81b:	85 f6                	test   esi,esi
c001a81d:	0f 84 b5 00 00 00    	je     c001a8d8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a823:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a825:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a82b:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a832:	74 1b                	je     c001a84f <ISO9660::openDir(char const*, void**)+0x47>
c001a834:	85 c0                	test   eax,eax
c001a836:	74 10                	je     c001a848 <ISO9660::openDir(char const*, void**)+0x40>
c001a838:	83 ec 0c             	sub    esp,0xc
c001a83b:	68 a9 2e 02 c0       	push   0xc0022ea9
c001a840:	e8 5a 6d ff ff       	call   c001159f <KePanic(char const*)>
c001a845:	83 c4 10             	add    esp,0x10
c001a848:	8a 03                	mov    al,BYTE PTR [ebx]
c001a84a:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a84f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a852:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a859:	85 c0                	test   eax,eax
c001a85b:	74 10                	je     c001a86d <ISO9660::openDir(char const*, void**)+0x65>
c001a85d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a864:	74 1a                	je     c001a880 <ISO9660::openDir(char const*, void**)+0x78>
c001a866:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a86d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	50                   	push   eax
c001a878:	e8 ea c1 fe ff       	call   c0006a67 <init_percd>
c001a87d:	83 c4 10             	add    esp,0x10
c001a880:	50                   	push   eax
c001a881:	83 c3 03             	add    ebx,0x3
c001a884:	50                   	push   eax
c001a885:	6a 01                	push   0x1
c001a887:	53                   	push   ebx
c001a888:	e8 9d bc fe ff       	call   c000652a <iso_open>
c001a88d:	83 c4 10             	add    esp,0x10
c001a890:	83 f8 ff             	cmp    eax,0xffffffff
c001a893:	89 c3                	mov    ebx,eax
c001a895:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a89a:	75 1c                	jne    c001a8b8 <ISO9660::openDir(char const*, void**)+0xb0>
c001a89c:	53                   	push   ebx
c001a89d:	53                   	push   ebx
c001a89e:	68 51 2f 02 c0       	push   0xc0022f51
c001a8a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8a9:	e8 fe e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a8ae:	83 c4 10             	add    esp,0x10
c001a8b1:	b8 01 00 00 00       	mov    eax,0x1
c001a8b6:	eb 25                	jmp    c001a8dd <ISO9660::openDir(char const*, void**)+0xd5>
c001a8b8:	51                   	push   ecx
c001a8b9:	01 db                	add    ebx,ebx
c001a8bb:	51                   	push   ecx
c001a8bc:	83 c3 65             	add    ebx,0x65
c001a8bf:	68 64 2f 02 c0       	push   0xc0022f64
c001a8c4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8ca:	e8 dd e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	31 c0                	xor    eax,eax
c001a8d4:	89 1e                	mov    DWORD PTR [esi],ebx
c001a8d6:	eb 05                	jmp    c001a8dd <ISO9660::openDir(char const*, void**)+0xd5>
c001a8d8:	b8 04 00 00 00       	mov    eax,0x4
c001a8dd:	5a                   	pop    edx
c001a8de:	5b                   	pop    ebx
c001a8df:	5e                   	pop    esi
c001a8e0:	c3                   	ret    
c001a8e1:	90                   	nop

c001a8e2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a8e2:	55                   	push   ebp
c001a8e3:	57                   	push   edi
c001a8e4:	56                   	push   esi
c001a8e5:	53                   	push   ebx
c001a8e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8ec:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a8f3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a8fa:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a901:	85 db                	test   ebx,ebx
c001a903:	0f 84 e4 00 00 00    	je     c001a9ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a909:	85 ed                	test   ebp,ebp
c001a90b:	0f 84 dc 00 00 00    	je     c001a9ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a911:	83 ec 0c             	sub    esp,0xc
c001a914:	68 77 2f 02 c0       	push   0xc0022f77
c001a919:	e8 ec ff fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a91e:	89 d8                	mov    eax,ebx
c001a920:	b9 02 00 00 00       	mov    ecx,0x2
c001a925:	99                   	cdq    
c001a926:	f7 f9                	idiv   ecx
c001a928:	83 e8 32             	sub    eax,0x32
c001a92b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a92e:	e8 bc be fe ff       	call   c00067ef <iso_readdir>
c001a933:	83 c4 10             	add    esp,0x10
c001a936:	85 c0                	test   eax,eax
c001a938:	89 c3                	mov    ebx,eax
c001a93a:	75 38                	jne    c001a974 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a93c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a941:	53                   	push   ebx
c001a942:	53                   	push   ebx
c001a943:	68 82 2f 02 c0       	push   0xc0022f82
c001a948:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a94e:	e8 59 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a953:	83 c4 0c             	add    esp,0xc
c001a956:	68 10 01 00 00       	push   0x110
c001a95b:	6a 00                	push   0x0
c001a95d:	57                   	push   edi
c001a95e:	e8 8d 5b fe ff       	call   c00004f0 <memset>
c001a963:	83 c4 10             	add    esp,0x10
c001a966:	b8 01 00 00 00       	mov    eax,0x1
c001a96b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a972:	eb 7e                	jmp    c001a9f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a974:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a97a:	8d 70 08             	lea    esi,[eax+0x8]
c001a97d:	83 ec 0c             	sub    esp,0xc
c001a980:	56                   	push   esi
c001a981:	e8 fa 5b fe ff       	call   c0000580 <strlen>
c001a986:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a98e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a992:	83 c4 10             	add    esp,0x10
c001a995:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a999:	75 0a                	jne    c001a9a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a99b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a99e:	b8 02 00 00 00       	mov    eax,0x2
c001a9a3:	74 05                	je     c001a9aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a9a5:	b8 01 00 00 00       	mov    eax,0x1
c001a9aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9ae:	50                   	push   eax
c001a9af:	50                   	push   eax
c001a9b0:	56                   	push   esi
c001a9b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9b5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a9b9:	50                   	push   eax
c001a9ba:	e8 91 5c fe ff       	call   c0000650 <strcpy>
c001a9bf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a9c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9c8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a9cf:	5a                   	pop    edx
c001a9d0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9d5:	59                   	pop    ecx
c001a9d6:	68 95 2f 02 c0       	push   0xc0022f95
c001a9db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9e1:	e8 c6 e0 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a9e6:	83 c4 10             	add    esp,0x10
c001a9e9:	31 c0                	xor    eax,eax
c001a9eb:	eb 05                	jmp    c001a9f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a9ed:	b8 04 00 00 00       	mov    eax,0x4
c001a9f2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9f8:	5b                   	pop    ebx
c001a9f9:	5e                   	pop    esi
c001a9fa:	5f                   	pop    edi
c001a9fb:	5d                   	pop    ebp
c001a9fc:	c3                   	ret    

c001a9fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a9fd:	57                   	push   edi
c001a9fe:	56                   	push   esi
c001a9ff:	53                   	push   ebx
c001aa00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa08:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa0e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa12:	0f be cb             	movsx  ecx,bl
c001aa15:	75 0b                	jne    c001aa22 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa17:	0f be 05 c0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241c0
c001aa1e:	39 c8                	cmp    eax,ecx
c001aa20:	74 47                	je     c001aa69 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa22:	83 ec 0c             	sub    esp,0xc
c001aa25:	31 d2                	xor    edx,edx
c001aa27:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa2c:	6a 01                	push   0x1
c001aa2e:	52                   	push   edx
c001aa2f:	56                   	push   esi
c001aa30:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa37:	e8 86 33 ff ff       	call   c000ddc2 <LogicalDisk::read(unsigned long long, int, void*)>
c001aa3c:	83 c4 20             	add    esp,0x20
c001aa3f:	85 c0                	test   eax,eax
c001aa41:	75 0e                	jne    c001aa51 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa43:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa49:	88 1d c0 41 02 c0    	mov    BYTE PTR ds:0xc00241c0,bl
c001aa4f:	eb 18                	jmp    c001aa69 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa51:	50                   	push   eax
c001aa52:	68 00 08 00 00       	push   0x800
c001aa57:	6a 00                	push   0x0
c001aa59:	57                   	push   edi
c001aa5a:	e8 91 5a fe ff       	call   c00004f0 <memset>
c001aa5f:	83 c4 10             	add    esp,0x10
c001aa62:	b8 01 00 00 00       	mov    eax,0x1
c001aa67:	eb 0e                	jmp    c001aa77 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa69:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aa6e:	b9 00 08 00 00       	mov    ecx,0x800
c001aa73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa75:	31 c0                	xor    eax,eax
c001aa77:	5b                   	pop    ebx
c001aa78:	5e                   	pop    esi
c001aa79:	5f                   	pop    edi
c001aa7a:	c3                   	ret    
c001aa7b:	90                   	nop

c001aa7c <ISO9660::tryMount(LogicalDisk*, int)>:
c001aa7c:	53                   	push   ebx
c001aa7d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aa83:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aa8d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aa94:	8d 58 41             	lea    ebx,[eax+0x41]
c001aa97:	0f be db             	movsx  ebx,bl
c001aa9a:	53                   	push   ebx
c001aa9b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa9f:	50                   	push   eax
c001aaa0:	6a 10                	push   0x10
c001aaa2:	e8 56 ff ff ff       	call   c001a9fd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aaa7:	83 c4 10             	add    esp,0x10
c001aaaa:	31 d2                	xor    edx,edx
c001aaac:	85 c0                	test   eax,eax
c001aaae:	75 33                	jne    c001aae3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aab0:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aab5:	75 2c                	jne    c001aae3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aab7:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aabc:	75 25                	jne    c001aae3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aabe:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aac3:	75 1e                	jne    c001aae3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aac5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aaca:	75 17                	jne    c001aae3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aacc:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aad1:	75 10                	jne    c001aae3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aad3:	83 ec 0c             	sub    esp,0xc
c001aad6:	53                   	push   ebx
c001aad7:	e8 8b bf fe ff       	call   c0006a67 <init_percd>
c001aadc:	83 c4 10             	add    esp,0x10
c001aadf:	40                   	inc    eax
c001aae0:	0f 95 c2             	setne  dl
c001aae3:	81 c4 08 08 00 00    	add    esp,0x808
c001aae9:	88 d0                	mov    al,dl
c001aaeb:	5b                   	pop    ebx
c001aaec:	c3                   	ret    
c001aaed:	90                   	nop

c001aaee <ISO9660::ISO9660()>:
c001aaee:	83 ec 0c             	sub    esp,0xc
c001aaf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaf5:	83 ec 0c             	sub    esp,0xc
c001aaf8:	50                   	push   eax
c001aaf9:	e8 b4 0c ff ff       	call   c000b7b2 <Filesystem::Filesystem()>
c001aafe:	83 c4 10             	add    esp,0x10
c001ab01:	ba b0 2f 02 c0       	mov    edx,0xc0022fb0
c001ab06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab0a:	89 10                	mov    DWORD PTR [eax],edx
c001ab0c:	e8 68 c0 fe ff       	call   c0006b79 <fs_iso9660_init>
c001ab11:	90                   	nop
c001ab12:	83 c4 0c             	add    esp,0xc
c001ab15:	c3                   	ret    

c001ab16 <SoundCard::beginPlayback()>:
c001ab16:	c7 44 24 04 14 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023014
c001ab1e:	e9 7c 6a ff ff       	jmp    c001159f <KePanic(char const*)>
c001ab23:	90                   	nop

c001ab24 <SoundCard::stopPlayback()>:
c001ab24:	c7 44 24 04 14 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023014
c001ab2c:	e9 6e 6a ff ff       	jmp    c001159f <KePanic(char const*)>
c001ab31:	90                   	nop

c001ab32 <SoundCard::SoundCard(char const*)>:
c001ab32:	83 ec 1c             	sub    esp,0x1c
c001ab35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab39:	83 ec 08             	sub    esp,0x8
c001ab3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab40:	50                   	push   eax
c001ab41:	e8 2a 20 ff ff       	call   c000cb70 <Device::Device(char const*)>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	ba 60 30 02 c0       	mov    edx,0xc0023060
c001ab4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab52:	89 10                	mov    DWORD PTR [eax],edx
c001ab54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab58:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab63:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab71:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ab7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab7f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ab89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab9f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001aba4:	7f 1a                	jg     c001abc0 <SoundCard::SoundCard(char const*)+0x8e>
c001aba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001abae:	83 c2 54             	add    edx,0x54
c001abb1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001abb9:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001abbe:	eb df                	jmp    c001ab9f <SoundCard::SoundCard(char const*)+0x6d>
c001abc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abcb:	90                   	nop
c001abcc:	83 c4 1c             	add    esp,0x1c
c001abcf:	c3                   	ret    

c001abd0 <SoundCard::~SoundCard()>:
c001abd0:	83 ec 0c             	sub    esp,0xc
c001abd3:	ba 60 30 02 c0       	mov    edx,0xc0023060
c001abd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdc:	89 10                	mov    DWORD PTR [eax],edx
c001abde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe2:	83 ec 0c             	sub    esp,0xc
c001abe5:	50                   	push   eax
c001abe6:	e8 ef 1c ff ff       	call   c000c8da <Device::~Device()>
c001abeb:	83 c4 10             	add    esp,0x10
c001abee:	90                   	nop
c001abef:	83 c4 0c             	add    esp,0xc
c001abf2:	c3                   	ret    
c001abf3:	90                   	nop

c001abf4 <SoundCard::~SoundCard()>:
c001abf4:	83 ec 0c             	sub    esp,0xc
c001abf7:	83 ec 0c             	sub    esp,0xc
c001abfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abfe:	e8 cd ff ff ff       	call   c001abd0 <SoundCard::~SoundCard()>
c001ac03:	83 c4 10             	add    esp,0x10
c001ac06:	83 ec 08             	sub    esp,0x8
c001ac09:	68 e8 01 00 00       	push   0x1e8
c001ac0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac12:	e8 f5 fb fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ac17:	83 c4 10             	add    esp,0x10
c001ac1a:	83 c4 0c             	add    esp,0xc
c001ac1d:	c3                   	ret    

c001ac1e <SoundCard::configureRates(int, int, int)>:
c001ac1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac22:	31 c0                	xor    eax,eax
c001ac24:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac2b:	75 20                	jne    c001ac4d <SoundCard::configureRates(int, int, int)+0x2f>
c001ac2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac31:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac3b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac45:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac4b:	b0 01                	mov    al,0x1
c001ac4d:	c3                   	ret    

c001ac4e <SoundCard::getSamples16(int, short*)>:
c001ac4e:	55                   	push   ebp
c001ac4f:	57                   	push   edi
c001ac50:	31 ff                	xor    edi,edi
c001ac52:	56                   	push   esi
c001ac53:	53                   	push   ebx
c001ac54:	31 db                	xor    ebx,ebx
c001ac56:	83 ec 10             	sub    esp,0x10
c001ac59:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac5d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac61:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac64:	50                   	push   eax
c001ac65:	6a 00                	push   0x0
c001ac67:	55                   	push   ebp
c001ac68:	e8 83 58 fe ff       	call   c00004f0 <memset>
c001ac6d:	83 c4 10             	add    esp,0x10
c001ac70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac74:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001ac7b:	85 c0                	test   eax,eax
c001ac7d:	74 1a                	je     c001ac99 <SoundCard::getSamples16(int, short*)+0x4b>
c001ac7f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac83:	75 14                	jne    c001ac99 <SoundCard::getSamples16(int, short*)+0x4b>
c001ac85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac89:	55                   	push   ebp
c001ac8a:	56                   	push   esi
c001ac8b:	50                   	push   eax
c001ac8c:	e8 f3 02 00 00       	call   c001af84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	39 c3                	cmp    ebx,eax
c001ac96:	0f 4c d8             	cmovl  ebx,eax
c001ac99:	47                   	inc    edi
c001ac9a:	83 ff 20             	cmp    edi,0x20
c001ac9d:	75 d1                	jne    c001ac70 <SoundCard::getSamples16(int, short*)+0x22>
c001ac9f:	83 c4 0c             	add    esp,0xc
c001aca2:	89 d8                	mov    eax,ebx
c001aca4:	5b                   	pop    ebx
c001aca5:	5e                   	pop    esi
c001aca6:	5f                   	pop    edi
c001aca7:	5d                   	pop    ebp
c001aca8:	c3                   	ret    
c001aca9:	90                   	nop

c001acaa <SoundCard::getSamples32(int, int*)>:
c001acaa:	55                   	push   ebp
c001acab:	57                   	push   edi
c001acac:	31 ff                	xor    edi,edi
c001acae:	56                   	push   esi
c001acaf:	31 f6                	xor    esi,esi
c001acb1:	53                   	push   ebx
c001acb2:	83 ec 10             	sub    esp,0x10
c001acb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001acb9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acbd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001acc1:	c1 e0 02             	shl    eax,0x2
c001acc4:	50                   	push   eax
c001acc5:	6a 00                	push   0x0
c001acc7:	55                   	push   ebp
c001acc8:	e8 23 58 fe ff       	call   c00004f0 <memset>
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001acd7:	85 c0                	test   eax,eax
c001acd9:	74 1a                	je     c001acf5 <SoundCard::getSamples32(int, int*)+0x4b>
c001acdb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acdf:	75 14                	jne    c001acf5 <SoundCard::getSamples32(int, int*)+0x4b>
c001ace1:	53                   	push   ebx
c001ace2:	55                   	push   ebp
c001ace3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ace7:	50                   	push   eax
c001ace8:	e8 67 03 00 00       	call   c001b054 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	39 c6                	cmp    esi,eax
c001acf2:	0f 4c f0             	cmovl  esi,eax
c001acf5:	47                   	inc    edi
c001acf6:	83 ff 20             	cmp    edi,0x20
c001acf9:	75 d5                	jne    c001acd0 <SoundCard::getSamples32(int, int*)+0x26>
c001acfb:	85 f6                	test   esi,esi
c001acfd:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad04:	75 0f                	jne    c001ad15 <SoundCard::getSamples32(int, int*)+0x6b>
c001ad06:	85 c0                	test   eax,eax
c001ad08:	74 1b                	je     c001ad25 <SoundCard::getSamples32(int, int*)+0x7b>
c001ad0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad0c:	83 ec 0c             	sub    esp,0xc
c001ad0f:	53                   	push   ebx
c001ad10:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad13:	eb 0d                	jmp    c001ad22 <SoundCard::getSamples32(int, int*)+0x78>
c001ad15:	85 c0                	test   eax,eax
c001ad17:	75 0c                	jne    c001ad25 <SoundCard::getSamples32(int, int*)+0x7b>
c001ad19:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad1b:	83 ec 0c             	sub    esp,0xc
c001ad1e:	53                   	push   ebx
c001ad1f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad22:	83 c4 10             	add    esp,0x10
c001ad25:	83 c4 0c             	add    esp,0xc
c001ad28:	89 f0                	mov    eax,esi
c001ad2a:	5b                   	pop    ebx
c001ad2b:	5e                   	pop    esi
c001ad2c:	5f                   	pop    edi
c001ad2d:	5d                   	pop    ebp
c001ad2e:	c3                   	ret    
c001ad2f:	90                   	nop

c001ad30 <SoundCard::addChannel(SoundPort*)>:
c001ad30:	83 ec 0c             	sub    esp,0xc
c001ad33:	31 c0                	xor    eax,eax
c001ad35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad39:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad41:	74 1b                	je     c001ad5e <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad43:	40                   	inc    eax
c001ad44:	83 f8 20             	cmp    eax,0x20
c001ad47:	75 f0                	jne    c001ad39 <SoundCard::addChannel(SoundPort*)+0x9>
c001ad49:	83 ec 0c             	sub    esp,0xc
c001ad4c:	68 39 30 02 c0       	push   0xc0023039
c001ad51:	e8 49 68 ff ff       	call   c001159f <KePanic(char const*)>
c001ad56:	83 c4 10             	add    esp,0x10
c001ad59:	83 c8 ff             	or     eax,0xffffffff
c001ad5c:	eb 0b                	jmp    c001ad69 <SoundCard::addChannel(SoundPort*)+0x39>
c001ad5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad62:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad69:	83 c4 0c             	add    esp,0xc
c001ad6c:	c3                   	ret    
c001ad6d:	90                   	nop

c001ad6e <SoundCard::removeChannel(int)>:
c001ad6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad76:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ad81:	c3                   	ret    
c001ad82:	66 90                	xchg   ax,ax

c001ad84 <SoundPort::SoundPort(int, int, int, int)>:
c001ad84:	83 ec 0c             	sub    esp,0xc
c001ad87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ad92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad96:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ad9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ada2:	89 10                	mov    DWORD PTR [eax],edx
c001ada4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001adac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001adaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adb7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001adba:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001adbf:	75 13                	jne    c001add4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001adc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001adc7:	05 a0 0f 00 00       	add    eax,0xfa0
c001adcc:	d1 e0                	shl    eax,1
c001adce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001add2:	66 90                	xchg   ax,ax
c001add4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001addc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001adea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001adf1:	c1 e0 02             	shl    eax,0x2
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	50                   	push   eax
c001adf8:	e8 d6 cc fe ff       	call   c0007ad3 <malloc>
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	89 c2                	mov    edx,eax
c001ae02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae09:	90                   	nop
c001ae0a:	83 c4 0c             	add    esp,0xc
c001ae0d:	c3                   	ret    
c001ae0e:	66 90                	xchg   ax,ax

c001ae10 <SoundPort::~SoundPort()>:
c001ae10:	83 ec 0c             	sub    esp,0xc
c001ae13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae17:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae1a:	85 c0                	test   eax,eax
c001ae1c:	74 1e                	je     c001ae3c <SoundPort::~SoundPort()+0x2c>
c001ae1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae25:	83 ec 0c             	sub    esp,0xc
c001ae28:	50                   	push   eax
c001ae29:	e8 b5 cc fe ff       	call   c0007ae3 <free>
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae35:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae3c:	90                   	nop
c001ae3d:	83 c4 0c             	add    esp,0xc
c001ae40:	c3                   	ret    
c001ae41:	90                   	nop
c001ae42:	66 90                	xchg   ax,ax

c001ae44 <SoundPort::unpause()>:
c001ae44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae48:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae4c:	c3                   	ret    
c001ae4d:	90                   	nop
c001ae4e:	66 90                	xchg   ax,ax

c001ae50 <SoundPort::pause()>:
c001ae50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae54:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae58:	c3                   	ret    
c001ae59:	90                   	nop
c001ae5a:	66 90                	xchg   ax,ax

c001ae5c <SoundPort::getBufferUsed()>:
c001ae5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae63:	c3                   	ret    

c001ae64 <SoundPort::getBufferSize()>:
c001ae64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae6b:	c3                   	ret    

c001ae6c <SoundPort::buffer16(short*, int)>:
c001ae6c:	55                   	push   ebp
c001ae6d:	57                   	push   edi
c001ae6e:	56                   	push   esi
c001ae6f:	53                   	push   ebx
c001ae70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae74:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ae78:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ae7b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ae7e:	74 68                	je     c001aee8 <SoundPort::buffer16(short*, int)+0x7c>
c001ae80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae84:	85 c9                	test   ecx,ecx
c001ae86:	7e 60                	jle    c001aee8 <SoundPort::buffer16(short*, int)+0x7c>
c001ae88:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ae8c:	8d 70 01             	lea    esi,[eax+0x1]
c001ae8f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ae92:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ae95:	c1 e1 0f             	shl    ecx,0xf
c001ae98:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ae9b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae9e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aea1:	74 4d                	je     c001aef0 <SoundPort::buffer16(short*, int)+0x84>
c001aea3:	31 f6                	xor    esi,esi
c001aea5:	eb 21                	jmp    c001aec8 <SoundPort::buffer16(short*, int)+0x5c>
c001aea7:	90                   	nop
c001aea8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aead:	8d 79 01             	lea    edi,[ecx+0x1]
c001aeb0:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aeb3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aeb6:	c1 e3 0f             	shl    ebx,0xf
c001aeb9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aebc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aebf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aec2:	74 1c                	je     c001aee0 <SoundPort::buffer16(short*, int)+0x74>
c001aec4:	89 c6                	mov    esi,eax
c001aec6:	66 90                	xchg   ax,ax
c001aec8:	8d 46 01             	lea    eax,[esi+0x1]
c001aecb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aecf:	75 d7                	jne    c001aea8 <SoundPort::buffer16(short*, int)+0x3c>
c001aed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aed5:	8d 76 00             	lea    esi,[esi+0x0]
c001aed8:	5b                   	pop    ebx
c001aed9:	5e                   	pop    esi
c001aeda:	5f                   	pop    edi
c001aedb:	5d                   	pop    ebp
c001aedc:	c3                   	ret    
c001aedd:	8d 76 00             	lea    esi,[esi+0x0]
c001aee0:	5b                   	pop    ebx
c001aee1:	8d 46 02             	lea    eax,[esi+0x2]
c001aee4:	5e                   	pop    esi
c001aee5:	5f                   	pop    edi
c001aee6:	5d                   	pop    ebp
c001aee7:	c3                   	ret    
c001aee8:	5b                   	pop    ebx
c001aee9:	31 c0                	xor    eax,eax
c001aeeb:	5e                   	pop    esi
c001aeec:	5f                   	pop    edi
c001aeed:	5d                   	pop    ebp
c001aeee:	c3                   	ret    
c001aeef:	90                   	nop
c001aef0:	b8 01 00 00 00       	mov    eax,0x1
c001aef5:	eb e1                	jmp    c001aed8 <SoundPort::buffer16(short*, int)+0x6c>
c001aef7:	90                   	nop

c001aef8 <SoundPort::buffer32(int*, int)>:
c001aef8:	55                   	push   ebp
c001aef9:	57                   	push   edi
c001aefa:	56                   	push   esi
c001aefb:	53                   	push   ebx
c001aefc:	83 ec 04             	sub    esp,0x4
c001aeff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af0b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af0e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af11:	89 04 24             	mov    DWORD PTR [esp],eax
c001af14:	74 5a                	je     c001af70 <SoundPort::buffer32(int*, int)+0x78>
c001af16:	85 c0                	test   eax,eax
c001af18:	7e 56                	jle    c001af70 <SoundPort::buffer32(int*, int)+0x78>
c001af1a:	8d 71 01             	lea    esi,[ecx+0x1]
c001af1d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af20:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af23:	8b 37                	mov    esi,DWORD PTR [edi]
c001af25:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af28:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af2b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af2e:	74 4c                	je     c001af7c <SoundPort::buffer32(int*, int)+0x84>
c001af30:	31 f6                	xor    esi,esi
c001af32:	eb 1c                	jmp    c001af50 <SoundPort::buffer32(int*, int)+0x58>
c001af34:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af37:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af3a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af3d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af40:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af4a:	74 18                	je     c001af64 <SoundPort::buffer32(int*, int)+0x6c>
c001af4c:	89 de                	mov    esi,ebx
c001af4e:	66 90                	xchg   ax,ax
c001af50:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af53:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af56:	75 dc                	jne    c001af34 <SoundPort::buffer32(int*, int)+0x3c>
c001af58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af5b:	90                   	nop
c001af5c:	83 c4 04             	add    esp,0x4
c001af5f:	5b                   	pop    ebx
c001af60:	5e                   	pop    esi
c001af61:	5f                   	pop    edi
c001af62:	5d                   	pop    ebp
c001af63:	c3                   	ret    
c001af64:	8d 46 02             	lea    eax,[esi+0x2]
c001af67:	83 c4 04             	add    esp,0x4
c001af6a:	5b                   	pop    ebx
c001af6b:	5e                   	pop    esi
c001af6c:	5f                   	pop    edi
c001af6d:	5d                   	pop    ebp
c001af6e:	c3                   	ret    
c001af6f:	90                   	nop
c001af70:	83 c4 04             	add    esp,0x4
c001af73:	31 c0                	xor    eax,eax
c001af75:	5b                   	pop    ebx
c001af76:	5e                   	pop    esi
c001af77:	5f                   	pop    edi
c001af78:	5d                   	pop    ebp
c001af79:	c3                   	ret    
c001af7a:	66 90                	xchg   ax,ax
c001af7c:	b8 01 00 00 00       	mov    eax,0x1
c001af81:	eb d9                	jmp    c001af5c <SoundPort::buffer32(int*, int)+0x64>
c001af83:	90                   	nop

c001af84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001af84:	55                   	push   ebp
c001af85:	57                   	push   edi
c001af86:	56                   	push   esi
c001af87:	53                   	push   ebx
c001af88:	83 ec 0c             	sub    esp,0xc
c001af8b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001af8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af93:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af97:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001af9b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001afa1:	39 03                	cmp    DWORD PTR [ebx],eax
c001afa3:	74 13                	je     c001afb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001afa5:	83 ec 0c             	sub    esp,0xc
c001afa8:	68 8c 30 02 c0       	push   0xc002308c
c001afad:	e8 ed 65 ff ff       	call   c001159f <KePanic(char const*)>
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	8d 76 00             	lea    esi,[esi+0x0]
c001afb8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001afbe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001afc1:	74 11                	je     c001afd4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001afc3:	83 ec 0c             	sub    esp,0xc
c001afc6:	68 cb 30 02 c0       	push   0xc00230cb
c001afcb:	e8 cf 65 ff ff       	call   c001159f <KePanic(char const*)>
c001afd0:	83 c4 10             	add    esp,0x10
c001afd3:	90                   	nop
c001afd4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001afda:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001afdd:	74 11                	je     c001aff0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001afdf:	83 ec 0c             	sub    esp,0xc
c001afe2:	68 cb 30 02 c0       	push   0xc00230cb
c001afe7:	e8 b3 65 ff ff       	call   c001159f <KePanic(char const*)>
c001afec:	83 c4 10             	add    esp,0x10
c001afef:	90                   	nop
c001aff0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001aff3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001aff7:	85 f6                	test   esi,esi
c001aff9:	7e 2d                	jle    c001b028 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001affb:	31 c0                	xor    eax,eax
c001affd:	8d 76 00             	lea    esi,[esi+0x0]
c001b000:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b003:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b006:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b00c:	85 c9                	test   ecx,ecx
c001b00e:	0f 49 d1             	cmovns edx,ecx
c001b011:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b015:	c1 fa 0f             	sar    edx,0xf
c001b018:	01 d1                	add    ecx,edx
c001b01a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b01e:	83 c0 01             	add    eax,0x1
c001b021:	39 f0                	cmp    eax,esi
c001b023:	75 db                	jne    c001b000 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b025:	8d 76 00             	lea    esi,[esi+0x0]
c001b028:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b02b:	83 ec 04             	sub    esp,0x4
c001b02e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b031:	29 f0                	sub    eax,esi
c001b033:	c1 e0 02             	shl    eax,0x2
c001b036:	50                   	push   eax
c001b037:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b03a:	50                   	push   eax
c001b03b:	52                   	push   edx
c001b03c:	e8 8f 53 fe ff       	call   c00003d0 <memmove>
c001b041:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b044:	29 f0                	sub    eax,esi
c001b046:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b049:	83 c4 1c             	add    esp,0x1c
c001b04c:	89 f0                	mov    eax,esi
c001b04e:	5b                   	pop    ebx
c001b04f:	5e                   	pop    esi
c001b050:	5f                   	pop    edi
c001b051:	5d                   	pop    ebp
c001b052:	c3                   	ret    
c001b053:	90                   	nop

c001b054 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b054:	55                   	push   ebp
c001b055:	57                   	push   edi
c001b056:	56                   	push   esi
c001b057:	53                   	push   ebx
c001b058:	83 ec 0c             	sub    esp,0xc
c001b05b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b05f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b063:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b067:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b06b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b071:	39 03                	cmp    DWORD PTR [ebx],eax
c001b073:	74 13                	je     c001b088 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b075:	83 ec 0c             	sub    esp,0xc
c001b078:	68 ac 30 02 c0       	push   0xc00230ac
c001b07d:	e8 1d 65 ff ff       	call   c001159f <KePanic(char const*)>
c001b082:	83 c4 10             	add    esp,0x10
c001b085:	8d 76 00             	lea    esi,[esi+0x0]
c001b088:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b08e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b091:	74 11                	je     c001b0a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b093:	83 ec 0c             	sub    esp,0xc
c001b096:	68 e7 30 02 c0       	push   0xc00230e7
c001b09b:	e8 ff 64 ff ff       	call   c001159f <KePanic(char const*)>
c001b0a0:	83 c4 10             	add    esp,0x10
c001b0a3:	90                   	nop
c001b0a4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b0aa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0ad:	74 11                	je     c001b0c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b0af:	83 ec 0c             	sub    esp,0xc
c001b0b2:	68 e7 30 02 c0       	push   0xc00230e7
c001b0b7:	e8 e3 64 ff ff       	call   c001159f <KePanic(char const*)>
c001b0bc:	83 c4 10             	add    esp,0x10
c001b0bf:	90                   	nop
c001b0c0:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b0c3:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b0c7:	85 ff                	test   edi,edi
c001b0c9:	7e 21                	jle    c001b0ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b0cb:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b0d2:	31 c0                	xor    eax,eax
c001b0d4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0d7:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b0da:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b0dd:	01 d5                	add    ebp,edx
c001b0df:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b0e2:	83 c0 04             	add    eax,0x4
c001b0e5:	39 c1                	cmp    ecx,eax
c001b0e7:	75 eb                	jne    c001b0d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0ef:	83 ec 04             	sub    esp,0x4
c001b0f2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b0f5:	29 f8                	sub    eax,edi
c001b0f7:	c1 e0 02             	shl    eax,0x2
c001b0fa:	50                   	push   eax
c001b0fb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b0fe:	50                   	push   eax
c001b0ff:	52                   	push   edx
c001b100:	e8 cb 52 fe ff       	call   c00003d0 <memmove>
c001b105:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b108:	29 f8                	sub    eax,edi
c001b10a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b10d:	83 c4 1c             	add    esp,0x1c
c001b110:	89 f8                	mov    eax,edi
c001b112:	5b                   	pop    ebx
c001b113:	5e                   	pop    esi
c001b114:	5f                   	pop    edi
c001b115:	5d                   	pop    ebp
c001b116:	c3                   	ret    
c001b117:	90                   	nop

c001b118 <PCI::open(int, int, void*)>:
c001b118:	83 ec 18             	sub    esp,0x18
c001b11b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b11f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b123:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b129:	8b 10                	mov    edx,DWORD PTR [eax]
c001b12b:	50                   	push   eax
c001b12c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b12f:	31 c0                	xor    eax,eax
c001b131:	83 c4 1c             	add    esp,0x1c
c001b134:	c3                   	ret    
c001b135:	90                   	nop

c001b136 <PCI::close(int, int, void*)>:
c001b136:	31 c0                	xor    eax,eax
c001b138:	c3                   	ret    
c001b139:	90                   	nop

c001b13a <PCI::PCI()>:
c001b13a:	83 ec 0c             	sub    esp,0xc
c001b13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b141:	83 ec 08             	sub    esp,0x8
c001b144:	68 03 31 02 c0       	push   0xc0023103
c001b149:	50                   	push   eax
c001b14a:	e8 e5 11 ff ff       	call   c000c334 <Bus::Bus(char const*)>
c001b14f:	83 c4 10             	add    esp,0x10
c001b152:	ba ac 31 02 c0       	mov    edx,0xc00231ac
c001b157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15b:	89 10                	mov    DWORD PTR [eax],edx
c001b15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b161:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b16f:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b178:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b17e:	0f b6 d0             	movzx  edx,al
c001b181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b185:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b190:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b196:	0f b6 d0             	movzx  edx,al
c001b199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b19d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1ac:	8d 50 01             	lea    edx,[eax+0x1]
c001b1af:	88 d1                	mov    cl,dl
c001b1b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1b5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b1bb:	0f b6 d0             	movzx  edx,al
c001b1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b1c6:	83 c9 c0             	or     ecx,0xffffffc0
c001b1c9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1cd:	90                   	nop
c001b1ce:	83 c4 0c             	add    esp,0xc
c001b1d1:	c3                   	ret    

c001b1d2 <PCI::readBAR8(unsigned int, int)>:
c001b1d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1da:	f6 c2 01             	test   dl,0x1
c001b1dd:	74 07                	je     c001b1e6 <PCI::readBAR8(unsigned int, int)+0x14>
c001b1df:	83 e2 fc             	and    edx,0xfffffffc
c001b1e2:	01 c2                	add    edx,eax
c001b1e4:	ec                   	in     al,dx
c001b1e5:	c3                   	ret    
c001b1e6:	83 e2 f0             	and    edx,0xfffffff0
c001b1e9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b1ec:	c3                   	ret    
c001b1ed:	90                   	nop

c001b1ee <PCI::readBAR16(unsigned int, int)>:
c001b1ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1f6:	f6 c2 01             	test   dl,0x1
c001b1f9:	74 08                	je     c001b203 <PCI::readBAR16(unsigned int, int)+0x15>
c001b1fb:	83 e2 fc             	and    edx,0xfffffffc
c001b1fe:	01 c2                	add    edx,eax
c001b200:	66 ed                	in     ax,dx
c001b202:	c3                   	ret    
c001b203:	83 e2 f0             	and    edx,0xfffffff0
c001b206:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b20a:	c3                   	ret    
c001b20b:	90                   	nop

c001b20c <PCI::readBAR32(unsigned int, int)>:
c001b20c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b214:	f6 c2 01             	test   dl,0x1
c001b217:	74 07                	je     c001b220 <PCI::readBAR32(unsigned int, int)+0x14>
c001b219:	83 e2 fc             	and    edx,0xfffffffc
c001b21c:	01 c2                	add    edx,eax
c001b21e:	ed                   	in     eax,dx
c001b21f:	c3                   	ret    
c001b220:	83 e2 f0             	and    edx,0xfffffff0
c001b223:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b226:	c3                   	ret    
c001b227:	90                   	nop

c001b228 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b228:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b22c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b230:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b234:	f6 c2 01             	test   dl,0x1
c001b237:	74 07                	je     c001b240 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b239:	83 e2 fc             	and    edx,0xfffffffc
c001b23c:	01 ca                	add    edx,ecx
c001b23e:	ee                   	out    dx,al
c001b23f:	c3                   	ret    
c001b240:	83 e2 f0             	and    edx,0xfffffff0
c001b243:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b246:	c3                   	ret    
c001b247:	90                   	nop

c001b248 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b24c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b254:	f6 c2 01             	test   dl,0x1
c001b257:	74 08                	je     c001b261 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b259:	83 e2 fc             	and    edx,0xfffffffc
c001b25c:	01 ca                	add    edx,ecx
c001b25e:	66 ef                	out    dx,ax
c001b260:	c3                   	ret    
c001b261:	83 e2 f0             	and    edx,0xfffffff0
c001b264:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b268:	c3                   	ret    
c001b269:	90                   	nop

c001b26a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b26a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b26e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b272:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b276:	f6 c2 01             	test   dl,0x1
c001b279:	74 07                	je     c001b282 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b27b:	83 e2 fc             	and    edx,0xfffffffc
c001b27e:	01 ca                	add    edx,ecx
c001b280:	ef                   	out    dx,eax
c001b281:	c3                   	ret    
c001b282:	83 e2 f0             	and    edx,0xfffffff0
c001b285:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b288:	c3                   	ret    
c001b289:	90                   	nop

c001b28a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b28a:	55                   	push   ebp
c001b28b:	57                   	push   edi
c001b28c:	56                   	push   esi
c001b28d:	53                   	push   ebx
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b296:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b29a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b29e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2a2:	83 fe 07             	cmp    esi,0x7
c001b2a5:	76 10                	jbe    c001b2b7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	68 0b 31 02 c0       	push   0xc002310b
c001b2af:	e8 eb 62 ff ff       	call   c001159f <KePanic(char const*)>
c001b2b4:	83 c4 10             	add    esp,0x10
c001b2b7:	0f b6 db             	movzx  ebx,bl
c001b2ba:	83 fb 0f             	cmp    ebx,0xf
c001b2bd:	76 10                	jbe    c001b2cf <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b2bf:	83 ec 0c             	sub    esp,0xc
c001b2c2:	68 3b 31 02 c0       	push   0xc002313b
c001b2c7:	e8 d3 62 ff ff       	call   c001159f <KePanic(char const*)>
c001b2cc:	83 c4 10             	add    esp,0x10
c001b2cf:	8d 04 36             	lea    eax,[esi+esi*1]
c001b2d2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2d7:	83 c8 f0             	or     eax,0xfffffff0
c001b2da:	ee                   	out    dx,al
c001b2db:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b2e0:	89 e8                	mov    eax,ebp
c001b2e2:	ee                   	out    dx,al
c001b2e3:	89 f9                	mov    ecx,edi
c001b2e5:	89 d8                	mov    eax,ebx
c001b2e7:	0f b6 d9             	movzx  ebx,cl
c001b2ea:	83 c4 0c             	add    esp,0xc
c001b2ed:	c1 e0 08             	shl    eax,0x8
c001b2f0:	83 e3 fc             	and    ebx,0xfffffffc
c001b2f3:	09 d8                	or     eax,ebx
c001b2f5:	5b                   	pop    ebx
c001b2f6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b2fb:	5e                   	pop    esi
c001b2fc:	5f                   	pop    edi
c001b2fd:	5d                   	pop    ebp
c001b2fe:	c3                   	ret    
c001b2ff:	90                   	nop

c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b300:	57                   	push   edi
c001b301:	56                   	push   esi
c001b302:	53                   	push   ebx
c001b303:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b30b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b30f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b313:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b319:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b31d:	83 ff 01             	cmp    edi,0x1
c001b320:	75 3f                	jne    c001b361 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b322:	89 de                	mov    esi,ebx
c001b324:	0f b6 c0             	movzx  eax,al
c001b327:	c1 e0 10             	shl    eax,0x10
c001b32a:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b330:	0f b6 c9             	movzx  ecx,cl
c001b333:	09 f0                	or     eax,esi
c001b335:	c1 e1 08             	shl    ecx,0x8
c001b338:	0f b6 d2             	movzx  edx,dl
c001b33b:	c1 e2 0b             	shl    edx,0xb
c001b33e:	09 c8                	or     eax,ecx
c001b340:	09 d0                	or     eax,edx
c001b342:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b347:	0d 00 00 00 80       	or     eax,0x80000000
c001b34c:	ef                   	out    dx,eax
c001b34d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b352:	ed                   	in     eax,dx
c001b353:	83 e3 02             	and    ebx,0x2
c001b356:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b35d:	d3 e8                	shr    eax,cl
c001b35f:	eb 44                	jmp    c001b3a5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b361:	83 ff 02             	cmp    edi,0x2
c001b364:	75 2d                	jne    c001b393 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b366:	83 ec 0c             	sub    esp,0xc
c001b369:	0f b6 fb             	movzx  edi,bl
c001b36c:	57                   	push   edi
c001b36d:	0f b6 c9             	movzx  ecx,cl
c001b370:	51                   	push   ecx
c001b371:	0f b6 d2             	movzx  edx,dl
c001b374:	52                   	push   edx
c001b375:	0f b6 c0             	movzx  eax,al
c001b378:	50                   	push   eax
c001b379:	56                   	push   esi
c001b37a:	e8 0b ff ff ff       	call   c001b28a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b37f:	89 c2                	mov    edx,eax
c001b381:	ed                   	in     eax,dx
c001b382:	83 e3 02             	and    ebx,0x2
c001b385:	83 c4 20             	add    esp,0x20
c001b388:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b38f:	d3 e8                	shr    eax,cl
c001b391:	eb 12                	jmp    c001b3a5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b393:	83 ec 0c             	sub    esp,0xc
c001b396:	68 6b 31 02 c0       	push   0xc002316b
c001b39b:	e8 ff 61 ff ff       	call   c001159f <KePanic(char const*)>
c001b3a0:	83 c4 10             	add    esp,0x10
c001b3a3:	31 c0                	xor    eax,eax
c001b3a5:	5b                   	pop    ebx
c001b3a6:	5e                   	pop    esi
c001b3a7:	5f                   	pop    edi
c001b3a8:	c3                   	ret    
c001b3a9:	90                   	nop

c001b3aa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b3aa:	83 ec 18             	sub    esp,0x18
c001b3ad:	6a 00                	push   0x0
c001b3af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3b4:	50                   	push   eax
c001b3b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3ba:	50                   	push   eax
c001b3bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3c0:	50                   	push   eax
c001b3c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3c5:	e8 36 ff ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3ca:	83 c4 2c             	add    esp,0x2c
c001b3cd:	c3                   	ret    

c001b3ce <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b3ce:	83 ec 18             	sub    esp,0x18
c001b3d1:	6a 0e                	push   0xe
c001b3d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3d8:	50                   	push   eax
c001b3d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3de:	50                   	push   eax
c001b3df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3e4:	50                   	push   eax
c001b3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3e9:	e8 12 ff ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3ee:	83 c4 2c             	add    esp,0x2c
c001b3f1:	0f b6 c0             	movzx  eax,al
c001b3f4:	c3                   	ret    
c001b3f5:	90                   	nop

c001b3f6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b3f6:	55                   	push   ebp
c001b3f7:	57                   	push   edi
c001b3f8:	56                   	push   esi
c001b3f9:	53                   	push   ebx
c001b3fa:	83 ec 18             	sub    esp,0x18
c001b3fd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b402:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b407:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b40c:	6a 0a                	push   0xa
c001b40e:	56                   	push   esi
c001b40f:	55                   	push   ebp
c001b410:	57                   	push   edi
c001b411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b415:	e8 e6 fe ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b41a:	83 c4 14             	add    esp,0x14
c001b41d:	6a 0a                	push   0xa
c001b41f:	56                   	push   esi
c001b420:	55                   	push   ebp
c001b421:	57                   	push   edi
c001b422:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b426:	89 c3                	mov    ebx,eax
c001b428:	0f b6 db             	movzx  ebx,bl
c001b42b:	e8 d0 fe ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b430:	83 c4 2c             	add    esp,0x2c
c001b433:	25 00 ff 00 00       	and    eax,0xff00
c001b438:	09 d8                	or     eax,ebx
c001b43a:	5b                   	pop    ebx
c001b43b:	5e                   	pop    esi
c001b43c:	5f                   	pop    edi
c001b43d:	5d                   	pop    ebp
c001b43e:	c3                   	ret    
c001b43f:	90                   	nop

c001b440 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b440:	83 ec 18             	sub    esp,0x18
c001b443:	6a 08                	push   0x8
c001b445:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b44a:	50                   	push   eax
c001b44b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b450:	50                   	push   eax
c001b451:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b456:	50                   	push   eax
c001b457:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b45b:	e8 a0 fe ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b460:	83 c4 2c             	add    esp,0x2c
c001b463:	0f b6 c4             	movzx  eax,ah
c001b466:	c3                   	ret    
c001b467:	90                   	nop

c001b468 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b468:	83 ec 18             	sub    esp,0x18
c001b46b:	6a 08                	push   0x8
c001b46d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b472:	50                   	push   eax
c001b473:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b478:	50                   	push   eax
c001b479:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47e:	50                   	push   eax
c001b47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b483:	e8 78 fe ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b488:	83 c4 2c             	add    esp,0x2c
c001b48b:	c3                   	ret    

c001b48c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b48c:	83 ec 18             	sub    esp,0x18
c001b48f:	6a 3c                	push   0x3c
c001b491:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b496:	50                   	push   eax
c001b497:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49c:	50                   	push   eax
c001b49d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a2:	50                   	push   eax
c001b4a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4a7:	e8 54 fe ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ac:	83 c4 2c             	add    esp,0x2c
c001b4af:	c3                   	ret    

c001b4b0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b4b0:	83 ec 18             	sub    esp,0x18
c001b4b3:	6a 18                	push   0x18
c001b4b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ba:	50                   	push   eax
c001b4bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c0:	50                   	push   eax
c001b4c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c6:	50                   	push   eax
c001b4c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4cb:	e8 30 fe ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d0:	83 c4 2c             	add    esp,0x2c
c001b4d3:	0f b6 c4             	movzx  eax,ah
c001b4d6:	c3                   	ret    
c001b4d7:	90                   	nop

c001b4d8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b4d8:	55                   	push   ebp
c001b4d9:	57                   	push   edi
c001b4da:	56                   	push   esi
c001b4db:	53                   	push   ebx
c001b4dc:	83 ec 28             	sub    esp,0x28
c001b4df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b4e3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b4e8:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b4ed:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b4f2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b4f9:	8d 43 12             	lea    eax,[ebx+0x12]
c001b4fc:	83 c3 10             	add    ebx,0x10
c001b4ff:	0f b6 c0             	movzx  eax,al
c001b502:	0f b6 db             	movzx  ebx,bl
c001b505:	50                   	push   eax
c001b506:	51                   	push   ecx
c001b507:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b50b:	57                   	push   edi
c001b50c:	55                   	push   ebp
c001b50d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b511:	e8 ea fd ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b516:	83 c4 14             	add    esp,0x14
c001b519:	53                   	push   ebx
c001b51a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b51e:	51                   	push   ecx
c001b51f:	89 c6                	mov    esi,eax
c001b521:	57                   	push   edi
c001b522:	55                   	push   ebp
c001b523:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b527:	c1 e6 10             	shl    esi,0x10
c001b52a:	e8 d1 fd ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b52f:	83 c4 3c             	add    esp,0x3c
c001b532:	5b                   	pop    ebx
c001b533:	0f b7 c0             	movzx  eax,ax
c001b536:	09 f0                	or     eax,esi
c001b538:	5e                   	pop    esi
c001b539:	5f                   	pop    edi
c001b53a:	5d                   	pop    ebp
c001b53b:	c3                   	ret    

c001b53c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b53c:	55                   	push   ebp
c001b53d:	57                   	push   edi
c001b53e:	56                   	push   esi
c001b53f:	53                   	push   ebx
c001b540:	83 ec 0c             	sub    esp,0xc
c001b543:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b547:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b54b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b54f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b553:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b559:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b55d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b561:	83 f9 01             	cmp    ecx,0x1
c001b564:	75 5d                	jne    c001b5c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b566:	0f b6 c8             	movzx  ecx,al
c001b569:	89 f0                	mov    eax,esi
c001b56b:	25 fc 00 00 00       	and    eax,0xfc
c001b570:	0f b6 d2             	movzx  edx,dl
c001b573:	c1 e1 10             	shl    ecx,0x10
c001b576:	c1 e2 0b             	shl    edx,0xb
c001b579:	09 c1                	or     ecx,eax
c001b57b:	89 f8                	mov    eax,edi
c001b57d:	0f b6 f8             	movzx  edi,al
c001b580:	c1 e7 08             	shl    edi,0x8
c001b583:	09 f9                	or     ecx,edi
c001b585:	09 d1                	or     ecx,edx
c001b587:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b58c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b592:	89 c8                	mov    eax,ecx
c001b594:	ef                   	out    dx,eax
c001b595:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b59a:	ed                   	in     eax,dx
c001b59b:	83 e6 02             	and    esi,0x2
c001b59e:	0f b7 db             	movzx  ebx,bx
c001b5a1:	74 0a                	je     c001b5ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b5a3:	c1 e3 10             	shl    ebx,0x10
c001b5a6:	0f b7 d0             	movzx  edx,ax
c001b5a9:	09 d3                	or     ebx,edx
c001b5ab:	eb 05                	jmp    c001b5b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b5ad:	66 31 c0             	xor    ax,ax
c001b5b0:	09 c3                	or     ebx,eax
c001b5b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5b7:	89 c8                	mov    eax,ecx
c001b5b9:	ef                   	out    dx,eax
c001b5ba:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5bf:	89 d8                	mov    eax,ebx
c001b5c1:	eb 41                	jmp    c001b604 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b5c3:	83 f9 02             	cmp    ecx,0x2
c001b5c6:	75 45                	jne    c001b60d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b5c8:	89 f1                	mov    ecx,esi
c001b5ca:	83 ec 0c             	sub    esp,0xc
c001b5cd:	0f b6 f1             	movzx  esi,cl
c001b5d0:	89 f9                	mov    ecx,edi
c001b5d2:	56                   	push   esi
c001b5d3:	0f b6 f9             	movzx  edi,cl
c001b5d6:	57                   	push   edi
c001b5d7:	0f b6 d2             	movzx  edx,dl
c001b5da:	52                   	push   edx
c001b5db:	0f b6 c0             	movzx  eax,al
c001b5de:	50                   	push   eax
c001b5df:	55                   	push   ebp
c001b5e0:	e8 a5 fc ff ff       	call   c001b28a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5e5:	89 c2                	mov    edx,eax
c001b5e7:	ed                   	in     eax,dx
c001b5e8:	83 c4 20             	add    esp,0x20
c001b5eb:	f6 c2 02             	test   dl,0x2
c001b5ee:	0f b7 db             	movzx  ebx,bx
c001b5f1:	74 0c                	je     c001b5ff <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b5f3:	0f b7 c8             	movzx  ecx,ax
c001b5f6:	89 d8                	mov    eax,ebx
c001b5f8:	c1 e0 10             	shl    eax,0x10
c001b5fb:	09 c8                	or     eax,ecx
c001b5fd:	eb 05                	jmp    c001b604 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b5ff:	66 31 c0             	xor    ax,ax
c001b602:	09 d8                	or     eax,ebx
c001b604:	ef                   	out    dx,eax
c001b605:	83 c4 0c             	add    esp,0xc
c001b608:	5b                   	pop    ebx
c001b609:	5e                   	pop    esi
c001b60a:	5f                   	pop    edi
c001b60b:	5d                   	pop    ebp
c001b60c:	c3                   	ret    
c001b60d:	c7 44 24 20 6b 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc002316b
c001b615:	83 c4 0c             	add    esp,0xc
c001b618:	5b                   	pop    ebx
c001b619:	5e                   	pop    esi
c001b61a:	5f                   	pop    edi
c001b61b:	5d                   	pop    ebp
c001b61c:	e9 7e 5f ff ff       	jmp    c001159f <KePanic(char const*)>
c001b621:	90                   	nop

c001b622 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b622:	55                   	push   ebp
c001b623:	57                   	push   edi
c001b624:	56                   	push   esi
c001b625:	53                   	push   ebx
c001b626:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b62c:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b633:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b63a:	0f 85 bd 00 00 00    	jne    c001b6fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b640:	83 ec 0c             	sub    esp,0xc
c001b643:	68 14 01 00 00       	push   0x114
c001b648:	e8 86 c4 fe ff       	call   c0007ad3 <malloc>
c001b64d:	83 c4 0c             	add    esp,0xc
c001b650:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b656:	68 71 31 02 c0       	push   0xc0023171
c001b65b:	50                   	push   eax
c001b65c:	89 c3                	mov    ebx,eax
c001b65e:	e8 f5 04 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c001b663:	83 c4 10             	add    esp,0x10
c001b666:	85 db                	test   ebx,ebx
c001b668:	0f 84 6b 02 00 00    	je     c001b8d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b66e:	57                   	push   edi
c001b66f:	57                   	push   edi
c001b670:	6a 01                	push   0x1
c001b672:	53                   	push   ebx
c001b673:	e8 fe 04 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001b678:	83 c4 10             	add    esp,0x10
c001b67b:	85 c0                	test   eax,eax
c001b67d:	0f 85 56 02 00 00    	jne    c001b8d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b683:	52                   	push   edx
c001b684:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b688:	50                   	push   eax
c001b689:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b68d:	50                   	push   eax
c001b68e:	53                   	push   ebx
c001b68f:	e8 e4 07 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c001b694:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b698:	40                   	inc    eax
c001b699:	89 04 24             	mov    DWORD PTR [esp],eax
c001b69c:	e8 32 c4 fe ff       	call   c0007ad3 <malloc>
c001b6a1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b6a5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b6a9:	59                   	pop    ecx
c001b6aa:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b6af:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6b1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b6b5:	51                   	push   ecx
c001b6b6:	50                   	push   eax
c001b6b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6bb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6bf:	53                   	push   ebx
c001b6c0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6c3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b6c7:	83 c4 20             	add    esp,0x20
c001b6ca:	89 c8                	mov    eax,ecx
c001b6cc:	99                   	cdq    
c001b6cd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b6d1:	0f 85 02 02 00 00    	jne    c001b8d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6d7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b6db:	0f 85 f8 01 00 00    	jne    c001b8d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6e1:	83 ec 0c             	sub    esp,0xc
c001b6e4:	53                   	push   ebx
c001b6e5:	e8 ea 04 ff ff       	call   c000bbd4 <File::close()>
c001b6ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6ee:	83 c4 10             	add    esp,0x10
c001b6f1:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b6f8:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b6fd:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b705:	31 c9                	xor    ecx,ecx
c001b707:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b70e:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b714:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b71b:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b721:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b726:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b72e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b733:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b73b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b73f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b747:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b74b:	39 cd                	cmp    ebp,ecx
c001b74d:	0f 8e 86 01 00 00    	jle    c001b8d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b753:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b756:	d4 40                	aam    0x40
c001b758:	d5 39                	aad    0x39
c001b75a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b75e:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b762:	d4 40                	aam    0x40
c001b764:	d5 39                	aad    0x39
c001b766:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b76a:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b76e:	d4 40                	aam    0x40
c001b770:	d5 39                	aad    0x39
c001b772:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b776:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b77a:	d4 40                	aam    0x40
c001b77c:	d5 39                	aad    0x39
c001b77e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b782:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b786:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b78a:	3c 56                	cmp    al,0x56
c001b78c:	74 47                	je     c001b7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b78e:	d4 40                	aam    0x40
c001b790:	d5 39                	aad    0x39
c001b792:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b795:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b799:	0f b6 db             	movzx  ebx,bl
c001b79c:	c1 e3 04             	shl    ebx,0x4
c001b79f:	d4 40                	aam    0x40
c001b7a1:	d5 39                	aad    0x39
c001b7a3:	83 e8 30             	sub    eax,0x30
c001b7a6:	0f b6 c0             	movzx  eax,al
c001b7a9:	09 c3                	or     ebx,eax
c001b7ab:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b7af:	c1 e3 04             	shl    ebx,0x4
c001b7b2:	d4 40                	aam    0x40
c001b7b4:	d5 39                	aad    0x39
c001b7b6:	83 e8 30             	sub    eax,0x30
c001b7b9:	0f b6 c0             	movzx  eax,al
c001b7bc:	09 c3                	or     ebx,eax
c001b7be:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b7c2:	c1 e3 04             	shl    ebx,0x4
c001b7c5:	d4 40                	aam    0x40
c001b7c7:	d5 39                	aad    0x39
c001b7c9:	83 e8 30             	sub    eax,0x30
c001b7cc:	0f b6 c0             	movzx  eax,al
c001b7cf:	09 c3                	or     ebx,eax
c001b7d1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b7d5:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b7d9:	80 fb 58             	cmp    bl,0x58
c001b7dc:	74 49                	je     c001b827 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b7de:	88 d8                	mov    al,bl
c001b7e0:	d4 40                	aam    0x40
c001b7e2:	d5 39                	aad    0x39
c001b7e4:	83 e8 30             	sub    eax,0x30
c001b7e7:	0f b6 f8             	movzx  edi,al
c001b7ea:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b7ee:	c1 e7 04             	shl    edi,0x4
c001b7f1:	d4 40                	aam    0x40
c001b7f3:	d5 39                	aad    0x39
c001b7f5:	83 e8 30             	sub    eax,0x30
c001b7f8:	0f b6 c0             	movzx  eax,al
c001b7fb:	09 c7                	or     edi,eax
c001b7fd:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b801:	c1 e7 04             	shl    edi,0x4
c001b804:	d4 40                	aam    0x40
c001b806:	d5 39                	aad    0x39
c001b808:	83 e8 30             	sub    eax,0x30
c001b80b:	0f b6 c0             	movzx  eax,al
c001b80e:	09 c7                	or     edi,eax
c001b810:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b814:	c1 e7 04             	shl    edi,0x4
c001b817:	d4 40                	aam    0x40
c001b819:	d5 39                	aad    0x39
c001b81b:	83 e8 30             	sub    eax,0x30
c001b81e:	0f b6 c0             	movzx  eax,al
c001b821:	09 c7                	or     edi,eax
c001b823:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b827:	8d 41 10             	lea    eax,[ecx+0x10]
c001b82a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b82e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b832:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b836:	83 f9 0a             	cmp    ecx,0xa
c001b839:	74 07                	je     c001b842 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b83b:	47                   	inc    edi
c001b83c:	39 c5                	cmp    ebp,eax
c001b83e:	75 16                	jne    c001b856 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b840:	89 e8                	mov    eax,ebp
c001b842:	83 f9 0a             	cmp    ecx,0xa
c001b845:	0f 94 c1             	sete   cl
c001b848:	0f b6 c9             	movzx  ecx,cl
c001b84b:	01 c1                	add    ecx,eax
c001b84d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b852:	75 0f                	jne    c001b863 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b854:	eb 1c                	jmp    c001b872 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b856:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b859:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b85d:	40                   	inc    eax
c001b85e:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b861:	eb cb                	jmp    c001b82e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b863:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b867:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b86c:	0f 85 d9 fe ff ff    	jne    c001b74b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b872:	80 fb 58             	cmp    bl,0x58
c001b875:	74 10                	je     c001b887 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b877:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b87c:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b881:	0f 85 c4 fe ff ff    	jne    c001b74b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b88b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b88f:	83 e8 30             	sub    eax,0x30
c001b892:	c1 e0 04             	shl    eax,0x4
c001b895:	83 eb 30             	sub    ebx,0x30
c001b898:	09 d8                	or     eax,ebx
c001b89a:	0f b6 c0             	movzx  eax,al
c001b89d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8a1:	0f 85 a4 fe ff ff    	jne    c001b74b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8ab:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b8af:	83 e8 30             	sub    eax,0x30
c001b8b2:	c1 e0 04             	shl    eax,0x4
c001b8b5:	83 eb 30             	sub    ebx,0x30
c001b8b8:	09 d8                	or     eax,ebx
c001b8ba:	0f b6 c0             	movzx  eax,al
c001b8bd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b8c1:	0f 85 84 fe ff ff    	jne    c001b74b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b8c7:	50                   	push   eax
c001b8c8:	50                   	push   eax
c001b8c9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b8cd:	50                   	push   eax
c001b8ce:	56                   	push   esi
c001b8cf:	e8 7c 4d fe ff       	call   c0000650 <strcpy>
c001b8d4:	83 c4 10             	add    esp,0x10
c001b8d7:	eb 05                	jmp    c001b8de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b8d9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8dc:	31 f6                	xor    esi,esi
c001b8de:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b8e4:	89 f0                	mov    eax,esi
c001b8e6:	5b                   	pop    ebx
c001b8e7:	5e                   	pop    esi
c001b8e8:	5f                   	pop    edi
c001b8e9:	5d                   	pop    ebp
c001b8ea:	c3                   	ret    
c001b8eb:	90                   	nop

c001b8ec <PCI::checkBus(unsigned char)>:
c001b8ec:	56                   	push   esi
c001b8ed:	53                   	push   ebx
c001b8ee:	31 db                	xor    ebx,ebx
c001b8f0:	51                   	push   ecx
c001b8f1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b8f6:	52                   	push   edx
c001b8f7:	53                   	push   ebx
c001b8f8:	43                   	inc    ebx
c001b8f9:	56                   	push   esi
c001b8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8fe:	e8 0f 03 00 00       	call   c001bc12 <PCI::checkDevice(unsigned char, unsigned char)>
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	83 fb 20             	cmp    ebx,0x20
c001b909:	75 eb                	jne    c001b8f6 <PCI::checkBus(unsigned char)+0xa>
c001b90b:	58                   	pop    eax
c001b90c:	5b                   	pop    ebx
c001b90d:	5e                   	pop    esi
c001b90e:	c3                   	ret    
c001b90f:	90                   	nop

c001b910 <PCI::foundDevice(PCIDeviceInfo)>:
c001b910:	55                   	push   ebp
c001b911:	57                   	push   edi
c001b912:	56                   	push   esi
c001b913:	53                   	push   ebx
c001b914:	83 ec 1c             	sub    esp,0x1c
c001b917:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b91c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b920:	3d ff ff 00 00       	cmp    eax,0xffff
c001b925:	0f 84 63 01 00 00    	je     c001ba8e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b92b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b930:	66 3d 06 04          	cmp    ax,0x406
c001b934:	75 2c                	jne    c001b962 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b936:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b93b:	50                   	push   eax
c001b93c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b941:	50                   	push   eax
c001b942:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b947:	50                   	push   eax
c001b948:	53                   	push   ebx
c001b949:	e8 62 fb ff ff       	call   c001b4b0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b94e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b952:	0f b6 c0             	movzx  eax,al
c001b955:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b959:	83 c4 2c             	add    esp,0x2c
c001b95c:	5b                   	pop    ebx
c001b95d:	5e                   	pop    esi
c001b95e:	5f                   	pop    edi
c001b95f:	5d                   	pop    ebp
c001b960:	eb 8a                	jmp    c001b8ec <PCI::checkBus(unsigned char)>
c001b962:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b967:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b96d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b971:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b975:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b979:	85 d2                	test   edx,edx
c001b97b:	74 34                	je     c001b9b1 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b97d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b980:	85 c9                	test   ecx,ecx
c001b982:	74 29                	je     c001b9ad <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b984:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b98a:	31 f5                	xor    ebp,esi
c001b98c:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b992:	75 19                	jne    c001b9ad <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b994:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b99a:	75 11                	jne    c001b9ad <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b99c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b9a7:	0f 84 e1 00 00 00    	je     c001ba8e <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b9ad:	8b 12                	mov    edx,DWORD PTR [edx]
c001b9af:	eb c8                	jmp    c001b979 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b9b1:	3d 01 06 00 00       	cmp    eax,0x601
c001b9b6:	75 19                	jne    c001b9d1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b9b8:	83 ec 0c             	sub    esp,0xc
c001b9bb:	68 64 01 00 00       	push   0x164
c001b9c0:	e8 0e c1 fe ff       	call   c0007ad3 <malloc>
c001b9c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9c8:	89 c5                	mov    ebp,eax
c001b9ca:	e8 ab 0e 00 00       	call   c001c87a <SATABus::SATABus()>
c001b9cf:	eb 1e                	jmp    c001b9ef <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b9d1:	3d 01 01 00 00       	cmp    eax,0x101
c001b9d6:	75 62                	jne    c001ba3a <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	68 70 02 00 00       	push   0x270
c001b9e0:	e8 ee c0 fe ff       	call   c0007ad3 <malloc>
c001b9e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9e8:	89 c5                	mov    ebp,eax
c001b9ea:	e8 f3 02 00 00       	call   c001bce2 <IDE::IDE()>
c001b9ef:	58                   	pop    eax
c001b9f0:	5a                   	pop    edx
c001b9f1:	55                   	push   ebp
c001b9f2:	53                   	push   ebx
c001b9f3:	e8 e0 0f ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c001b9f8:	83 ec 1c             	sub    esp,0x1c
c001b9fb:	b9 09 00 00 00       	mov    ecx,0x9
c001ba00:	fc                   	cld    
c001ba01:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba05:	89 e7                	mov    edi,esp
c001ba07:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba09:	55                   	push   ebp
c001ba0a:	e8 0f 0f ff ff       	call   c000c91e <Device::preOpenPCI(PCIDeviceInfo)>
c001ba0f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba12:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba16:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba1e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba26:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba2e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba31:	83 c4 4c             	add    esp,0x4c
c001ba34:	5b                   	pop    ebx
c001ba35:	5e                   	pop    esi
c001ba36:	5f                   	pop    edi
c001ba37:	5d                   	pop    ebp
c001ba38:	ff e0                	jmp    eax
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	68 58 01 00 00       	push   0x158
c001ba42:	e8 8c c0 fe ff       	call   c0007ad3 <malloc>
c001ba47:	5a                   	pop    edx
c001ba48:	59                   	pop    ecx
c001ba49:	68 8a 31 02 c0       	push   0xc002318a
c001ba4e:	50                   	push   eax
c001ba4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba53:	e8 1e 12 ff ff       	call   c000cc76 <DriverlessDevice::DriverlessDevice(char const*)>
c001ba58:	5e                   	pop    esi
c001ba59:	5f                   	pop    edi
c001ba5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba5e:	50                   	push   eax
c001ba5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba63:	53                   	push   ebx
c001ba64:	e8 6f 0f ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c001ba69:	83 c4 10             	add    esp,0x10
c001ba6c:	b9 09 00 00 00       	mov    ecx,0x9
c001ba71:	fc                   	cld    
c001ba72:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba76:	89 fe                	mov    esi,edi
c001ba78:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba82:	83 c4 1c             	add    esp,0x1c
c001ba85:	5b                   	pop    ebx
c001ba86:	5e                   	pop    esi
c001ba87:	5f                   	pop    edi
c001ba88:	5d                   	pop    ebp
c001ba89:	e9 90 0e ff ff       	jmp    c000c91e <Device::preOpenPCI(PCIDeviceInfo)>
c001ba8e:	83 c4 1c             	add    esp,0x1c
c001ba91:	5b                   	pop    ebx
c001ba92:	5e                   	pop    esi
c001ba93:	5f                   	pop    edi
c001ba94:	5d                   	pop    ebp
c001ba95:	c3                   	ret    

c001ba96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ba96:	55                   	push   ebp
c001ba97:	57                   	push   edi
c001ba98:	56                   	push   esi
c001ba99:	53                   	push   ebx
c001ba9a:	83 ec 68             	sub    esp,0x68
c001ba9d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001baa4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001baa8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001baac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bab3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bab8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001babc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bac3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bac8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bacc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bad1:	6a 0c                	push   0xc
c001bad3:	57                   	push   edi
c001bad4:	53                   	push   ebx
c001bad5:	56                   	push   esi
c001bad6:	55                   	push   ebp
c001bad7:	e8 24 f8 ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001badc:	83 c4 20             	add    esp,0x20
c001badf:	57                   	push   edi
c001bae0:	53                   	push   ebx
c001bae1:	56                   	push   esi
c001bae2:	55                   	push   ebp
c001bae3:	e8 0e f9 ff ff       	call   c001b3f6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bae8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001baed:	57                   	push   edi
c001baee:	53                   	push   ebx
c001baef:	56                   	push   esi
c001baf0:	55                   	push   ebp
c001baf1:	e8 96 f9 ff ff       	call   c001b48c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001baf6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bafa:	83 c4 14             	add    esp,0x14
c001bafd:	6a 3c                	push   0x3c
c001baff:	57                   	push   edi
c001bb00:	53                   	push   ebx
c001bb01:	56                   	push   esi
c001bb02:	55                   	push   ebp
c001bb03:	e8 f8 f7 ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb08:	0f b6 c4             	movzx  eax,ah
c001bb0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb0f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb13:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb17:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb1c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb22:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb2c:	83 c4 20             	add    esp,0x20
c001bb2f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb34:	74 30                	je     c001bb66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb36:	31 c0                	xor    eax,eax
c001bb38:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb3c:	7e 28                	jle    c001bb66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb3e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb46:	39 cb                	cmp    ebx,ecx
c001bb48:	75 19                	jne    c001bb63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb4a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb52:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb56:	75 0b                	jne    c001bb63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb58:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb5f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb63:	40                   	inc    eax
c001bb64:	eb d2                	jmp    c001bb38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb66:	31 d2                	xor    edx,edx
c001bb68:	83 ec 0c             	sub    esp,0xc
c001bb6b:	57                   	push   edi
c001bb6c:	53                   	push   ebx
c001bb6d:	56                   	push   esi
c001bb6e:	52                   	push   edx
c001bb6f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb73:	55                   	push   ebp
c001bb74:	e8 5f f9 ff ff       	call   c001b4d8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb7d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb81:	42                   	inc    edx
c001bb82:	83 c4 20             	add    esp,0x20
c001bb85:	83 fa 06             	cmp    edx,0x6
c001bb88:	75 de                	jne    c001bb68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bb8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb8e:	83 ec 0c             	sub    esp,0xc
c001bb91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb95:	c1 e2 08             	shl    edx,0x8
c001bb98:	0f b6 c4             	movzx  eax,ah
c001bb9b:	09 d0                	or     eax,edx
c001bb9d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bba2:	6a 02                	push   0x2
c001bba4:	57                   	push   edi
c001bba5:	53                   	push   ebx
c001bba6:	56                   	push   esi
c001bba7:	55                   	push   ebp
c001bba8:	e8 53 f7 ff ff       	call   c001b300 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbad:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bbb2:	83 c4 20             	add    esp,0x20
c001bbb5:	57                   	push   edi
c001bbb6:	53                   	push   ebx
c001bbb7:	56                   	push   esi
c001bbb8:	55                   	push   ebp
c001bbb9:	e8 82 f8 ff ff       	call   c001b440 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bbbe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bbc2:	57                   	push   edi
c001bbc3:	53                   	push   ebx
c001bbc4:	56                   	push   esi
c001bbc5:	55                   	push   ebp
c001bbc6:	e8 df f7 ff ff       	call   c001b3aa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbcb:	b9 09 00 00 00       	mov    ecx,0x9
c001bbd0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bbd5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bbd9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bbdd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bbe1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bbe5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bbe9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bbed:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bbf1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bbf5:	83 ec 0c             	sub    esp,0xc
c001bbf8:	fc                   	cld    
c001bbf9:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bbfd:	89 e7                	mov    edi,esp
c001bbff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc01:	55                   	push   ebp
c001bc02:	e8 09 fd ff ff       	call   c001b910 <PCI::foundDevice(PCIDeviceInfo)>
c001bc07:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc0d:	5b                   	pop    ebx
c001bc0e:	5e                   	pop    esi
c001bc0f:	5f                   	pop    edi
c001bc10:	5d                   	pop    ebp
c001bc11:	c3                   	ret    

c001bc12 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc12:	55                   	push   ebp
c001bc13:	57                   	push   edi
c001bc14:	56                   	push   esi
c001bc15:	53                   	push   ebx
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc1e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc23:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc27:	6a 00                	push   0x0
c001bc29:	56                   	push   esi
c001bc2a:	57                   	push   edi
c001bc2b:	55                   	push   ebp
c001bc2c:	e8 79 f7 ff ff       	call   c001b3aa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc31:	6a 00                	push   0x0
c001bc33:	56                   	push   esi
c001bc34:	57                   	push   edi
c001bc35:	55                   	push   ebp
c001bc36:	e8 5b fe ff ff       	call   c001ba96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc3b:	83 c4 20             	add    esp,0x20
c001bc3e:	6a 00                	push   0x0
c001bc40:	56                   	push   esi
c001bc41:	57                   	push   edi
c001bc42:	55                   	push   ebp
c001bc43:	e8 86 f7 ff ff       	call   c001b3ce <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc48:	83 c4 10             	add    esp,0x10
c001bc4b:	a8 80                	test   al,0x80
c001bc4d:	74 2d                	je     c001bc7c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc4f:	bb 01 00 00 00       	mov    ebx,0x1
c001bc54:	53                   	push   ebx
c001bc55:	56                   	push   esi
c001bc56:	57                   	push   edi
c001bc57:	55                   	push   ebp
c001bc58:	e8 4d f7 ff ff       	call   c001b3aa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc5d:	83 c4 10             	add    esp,0x10
c001bc60:	0f b7 c0             	movzx  eax,ax
c001bc63:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc68:	74 0c                	je     c001bc76 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc6a:	53                   	push   ebx
c001bc6b:	56                   	push   esi
c001bc6c:	57                   	push   edi
c001bc6d:	55                   	push   ebp
c001bc6e:	e8 23 fe ff ff       	call   c001ba96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc73:	83 c4 10             	add    esp,0x10
c001bc76:	43                   	inc    ebx
c001bc77:	83 fb 08             	cmp    ebx,0x8
c001bc7a:	75 d8                	jne    c001bc54 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc7c:	83 c4 0c             	add    esp,0xc
c001bc7f:	5b                   	pop    ebx
c001bc80:	5e                   	pop    esi
c001bc81:	5f                   	pop    edi
c001bc82:	5d                   	pop    ebp
c001bc83:	c3                   	ret    

c001bc84 <PCI::detect()>:
c001bc84:	56                   	push   esi
c001bc85:	53                   	push   ebx
c001bc86:	53                   	push   ebx
c001bc87:	31 db                	xor    ebx,ebx
c001bc89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc8d:	6a 00                	push   0x0
c001bc8f:	6a 00                	push   0x0
c001bc91:	6a 00                	push   0x0
c001bc93:	56                   	push   esi
c001bc94:	e8 35 f7 ff ff       	call   c001b3ce <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	a8 80                	test   al,0x80
c001bc9e:	75 21                	jne    c001bcc1 <PCI::detect()+0x3d>
c001bca0:	51                   	push   ecx
c001bca1:	51                   	push   ecx
c001bca2:	6a 00                	push   0x0
c001bca4:	56                   	push   esi
c001bca5:	e8 42 fc ff ff       	call   c001b8ec <PCI::checkBus(unsigned char)>
c001bcaa:	83 c4 10             	add    esp,0x10
c001bcad:	eb 2a                	jmp    c001bcd9 <PCI::detect()+0x55>
c001bcaf:	52                   	push   edx
c001bcb0:	52                   	push   edx
c001bcb1:	53                   	push   ebx
c001bcb2:	43                   	inc    ebx
c001bcb3:	56                   	push   esi
c001bcb4:	e8 33 fc ff ff       	call   c001b8ec <PCI::checkBus(unsigned char)>
c001bcb9:	83 c4 10             	add    esp,0x10
c001bcbc:	83 fb 08             	cmp    ebx,0x8
c001bcbf:	74 18                	je     c001bcd9 <PCI::detect()+0x55>
c001bcc1:	53                   	push   ebx
c001bcc2:	6a 00                	push   0x0
c001bcc4:	6a 00                	push   0x0
c001bcc6:	56                   	push   esi
c001bcc7:	e8 de f6 ff ff       	call   c001b3aa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bccc:	83 c4 10             	add    esp,0x10
c001bccf:	0f b7 c0             	movzx  eax,ax
c001bcd2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcd7:	74 d6                	je     c001bcaf <PCI::detect()+0x2b>
c001bcd9:	58                   	pop    eax
c001bcda:	5b                   	pop    ebx
c001bcdb:	5e                   	pop    esi
c001bcdc:	c3                   	ret    
c001bcdd:	90                   	nop

c001bcde <IDE::close(int, int, void*)>:
c001bcde:	83 c8 ff             	or     eax,0xffffffff
c001bce1:	c3                   	ret    

c001bce2 <IDE::IDE()>:
c001bce2:	83 ec 0c             	sub    esp,0xc
c001bce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce9:	83 ec 08             	sub    esp,0x8
c001bcec:	68 d0 31 02 c0       	push   0xc00231d0
c001bcf1:	50                   	push   eax
c001bcf2:	e8 25 10 ff ff       	call   c000cd1c <HardDiskController::HardDiskController(char const*)>
c001bcf7:	83 c4 10             	add    esp,0x10
c001bcfa:	ba 60 32 02 c0       	mov    edx,0xc0023260
c001bcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd03:	89 10                	mov    DWORD PTR [eax],edx
c001bd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd09:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd10:	90                   	nop
c001bd11:	83 c4 0c             	add    esp,0xc
c001bd14:	c3                   	ret    
c001bd15:	90                   	nop

c001bd16 <IDE::prepareInterrupt(unsigned char)>:
c001bd16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd1f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd27:	c3                   	ret    

c001bd28 <selectDrive(unsigned char, unsigned char)>:
c001bd28:	c3                   	ret    
c001bd29:	90                   	nop

c001bd2a <IDE::getBase(unsigned char)>:
c001bd2a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd33:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd3b:	c3                   	ret    

c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd3c:	55                   	push   ebp
c001bd3d:	57                   	push   edi
c001bd3e:	56                   	push   esi
c001bd3f:	53                   	push   ebx
c001bd40:	83 ec 1c             	sub    esp,0x1c
c001bd43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd47:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bd4b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd53:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd56:	80 f9 03             	cmp    cl,0x3
c001bd59:	77 4f                	ja     c001bdaa <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd5f:	0f b6 f2             	movzx  esi,dl
c001bd62:	0f b6 db             	movzx  ebx,bl
c001bd65:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bd68:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd6d:	80 ca 80             	or     dl,0x80
c001bd70:	52                   	push   edx
c001bd71:	6a 0c                	push   0xc
c001bd73:	56                   	push   esi
c001bd74:	57                   	push   edi
c001bd75:	e8 c2 ff ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd7a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bd7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd83:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd87:	ee                   	out    dx,al
c001bd88:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bd8d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bd91:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bd95:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bd9d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bda1:	83 c4 2c             	add    esp,0x2c
c001bda4:	5b                   	pop    ebx
c001bda5:	5e                   	pop    esi
c001bda6:	5f                   	pop    edi
c001bda7:	5d                   	pop    ebp
c001bda8:	eb 92                	jmp    c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdaa:	0f b6 cb             	movzx  ecx,bl
c001bdad:	83 f9 07             	cmp    ecx,0x7
c001bdb0:	77 12                	ja     c001bdc4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bdb2:	0f b6 d2             	movzx  edx,dl
c001bdb5:	0f b6 db             	movzx  ebx,bl
c001bdb8:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bdc0:	01 da                	add    edx,ebx
c001bdc2:	eb 2f                	jmp    c001bdf3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdc4:	83 f9 0d             	cmp    ecx,0xd
c001bdc7:	77 13                	ja     c001bddc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bdc9:	0f b6 d2             	movzx  edx,dl
c001bdcc:	0f b6 db             	movzx  ebx,bl
c001bdcf:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bdd6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bdda:	eb 17                	jmp    c001bdf3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bddc:	83 f9 15             	cmp    ecx,0x15
c001bddf:	77 13                	ja     c001bdf4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bde1:	0f b6 d2             	movzx  edx,dl
c001bde4:	0f b6 db             	movzx  ebx,bl
c001bde7:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bdef:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bdf3:	ee                   	out    dx,al
c001bdf4:	83 c4 1c             	add    esp,0x1c
c001bdf7:	5b                   	pop    ebx
c001bdf8:	5e                   	pop    esi
c001bdf9:	5f                   	pop    edi
c001bdfa:	5d                   	pop    ebp
c001bdfb:	c3                   	ret    

c001bdfc <IDE::read(unsigned char, unsigned char)>:
c001bdfc:	57                   	push   edi
c001bdfd:	56                   	push   esi
c001bdfe:	53                   	push   ebx
c001bdff:	83 ec 10             	sub    esp,0x10
c001be02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be0a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001be0e:	8d 42 f8             	lea    eax,[edx-0x8]
c001be11:	3c 03                	cmp    al,0x3
c001be13:	77 48                	ja     c001be5d <IDE::read(unsigned char, unsigned char)+0x61>
c001be15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be19:	0f b6 f1             	movzx  esi,cl
c001be1c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001be1f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001be24:	0c 80                	or     al,0x80
c001be26:	50                   	push   eax
c001be27:	6a 0c                	push   0xc
c001be29:	56                   	push   esi
c001be2a:	53                   	push   ebx
c001be2b:	e8 0c ff ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be34:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001be39:	0f b6 d2             	movzx  edx,dl
c001be3c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be40:	ec                   	in     al,dx
c001be41:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001be45:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001be4a:	52                   	push   edx
c001be4b:	6a 0c                	push   0xc
c001be4d:	56                   	push   esi
c001be4e:	53                   	push   ebx
c001be4f:	e8 e8 fe ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be54:	83 c4 20             	add    esp,0x20
c001be57:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001be5b:	eb 4c                	jmp    c001bea9 <IDE::read(unsigned char, unsigned char)+0xad>
c001be5d:	0f b6 f2             	movzx  esi,dl
c001be60:	83 fe 07             	cmp    esi,0x7
c001be63:	77 12                	ja     c001be77 <IDE::read(unsigned char, unsigned char)+0x7b>
c001be65:	0f b6 c9             	movzx  ecx,cl
c001be68:	0f b6 d2             	movzx  edx,dl
c001be6b:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001be73:	01 c2                	add    edx,eax
c001be75:	eb 31                	jmp    c001bea8 <IDE::read(unsigned char, unsigned char)+0xac>
c001be77:	83 fe 0d             	cmp    esi,0xd
c001be7a:	77 13                	ja     c001be8f <IDE::read(unsigned char, unsigned char)+0x93>
c001be7c:	0f b6 c9             	movzx  ecx,cl
c001be7f:	0f b6 d2             	movzx  edx,dl
c001be82:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001be89:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be8d:	eb 19                	jmp    c001bea8 <IDE::read(unsigned char, unsigned char)+0xac>
c001be8f:	31 c0                	xor    eax,eax
c001be91:	83 fe 15             	cmp    esi,0x15
c001be94:	77 13                	ja     c001bea9 <IDE::read(unsigned char, unsigned char)+0xad>
c001be96:	0f b6 c9             	movzx  ecx,cl
c001be99:	0f b6 d2             	movzx  edx,dl
c001be9c:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bea4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bea8:	ec                   	in     al,dx
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	5b                   	pop    ebx
c001bead:	5e                   	pop    esi
c001beae:	5f                   	pop    edi
c001beaf:	c3                   	ret    

c001beb0 <IDE::waitInterrupt(unsigned char)>:
c001beb0:	55                   	push   ebp
c001beb1:	57                   	push   edi
c001beb2:	56                   	push   esi
c001beb3:	53                   	push   ebx
c001beb4:	31 db                	xor    ebx,ebx
c001beb6:	83 ec 0c             	sub    esp,0xc
c001beb9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bebd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bec2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001beca:	89 e8                	mov    eax,ebp
c001becc:	84 c0                	test   al,al
c001bece:	75 30                	jne    c001bf00 <IDE::waitInterrupt(unsigned char)+0x50>
c001bed0:	50                   	push   eax
c001bed1:	6a 0c                	push   0xc
c001bed3:	56                   	push   esi
c001bed4:	57                   	push   edi
c001bed5:	e8 22 ff ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001beda:	83 c4 10             	add    esp,0x10
c001bedd:	a8 01                	test   al,0x1
c001bedf:	75 27                	jne    c001bf08 <IDE::waitInterrupt(unsigned char)+0x58>
c001bee1:	f6 c3 04             	test   bl,0x4
c001bee4:	75 12                	jne    c001bef8 <IDE::waitInterrupt(unsigned char)+0x48>
c001bee6:	83 fb 32             	cmp    ebx,0x32
c001bee9:	7e 0d                	jle    c001bef8 <IDE::waitInterrupt(unsigned char)+0x48>
c001beeb:	83 ec 0c             	sub    esp,0xc
c001beee:	6a 64                	push   0x64
c001bef0:	e8 73 a4 ff ff       	call   c0016368 <milliTenthSleep(unsigned int)>
c001bef5:	83 c4 10             	add    esp,0x10
c001bef8:	83 fb 3c             	cmp    ebx,0x3c
c001befb:	74 0b                	je     c001bf08 <IDE::waitInterrupt(unsigned char)+0x58>
c001befd:	43                   	inc    ebx
c001befe:	eb c2                	jmp    c001bec2 <IDE::waitInterrupt(unsigned char)+0x12>
c001bf00:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf08:	83 c4 0c             	add    esp,0xc
c001bf0b:	89 e8                	mov    eax,ebp
c001bf0d:	5b                   	pop    ebx
c001bf0e:	5e                   	pop    esi
c001bf0f:	5f                   	pop    edi
c001bf10:	5d                   	pop    ebp
c001bf11:	c3                   	ret    

c001bf12 <ideChannel0IRQHandler(regs*, void*)>:
c001bf12:	83 ec 10             	sub    esp,0x10
c001bf15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf19:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf20:	6a 07                	push   0x7
c001bf22:	6a 00                	push   0x0
c001bf24:	50                   	push   eax
c001bf25:	e8 d2 fe ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001bf2a:	83 c4 1c             	add    esp,0x1c
c001bf2d:	c3                   	ret    

c001bf2e <ideChannel1IRQHandler(regs*, void*)>:
c001bf2e:	83 ec 10             	sub    esp,0x10
c001bf31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf35:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf3c:	6a 07                	push   0x7
c001bf3e:	6a 01                	push   0x1
c001bf40:	50                   	push   eax
c001bf41:	e8 b6 fe ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001bf46:	83 c4 1c             	add    esp,0x1c
c001bf49:	c3                   	ret    

c001bf4a <IDE::enableIRQs(unsigned char, bool)>:
c001bf4a:	57                   	push   edi
c001bf4b:	b8 02 00 00 00       	mov    eax,0x2
c001bf50:	56                   	push   esi
c001bf51:	53                   	push   ebx
c001bf52:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf5f:	74 02                	je     c001bf63 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf61:	31 c0                	xor    eax,eax
c001bf63:	0f b6 db             	movzx  ebx,bl
c001bf66:	bf 04 00 00 00       	mov    edi,0x4
c001bf6b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf72:	50                   	push   eax
c001bf73:	6a 0c                	push   0xc
c001bf75:	53                   	push   ebx
c001bf76:	56                   	push   esi
c001bf77:	e8 c0 fd ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf7c:	83 c4 10             	add    esp,0x10
c001bf7f:	50                   	push   eax
c001bf80:	6a 0c                	push   0xc
c001bf82:	53                   	push   ebx
c001bf83:	56                   	push   esi
c001bf84:	e8 73 fe ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	4f                   	dec    edi
c001bf8d:	75 f0                	jne    c001bf7f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bf8f:	5b                   	pop    ebx
c001bf90:	5e                   	pop    esi
c001bf91:	5f                   	pop    edi
c001bf92:	c3                   	ret    
c001bf93:	90                   	nop

c001bf94 <IDE::open(int, int, void*)>:
c001bf94:	55                   	push   ebp
c001bf95:	57                   	push   edi
c001bf96:	56                   	push   esi
c001bf97:	53                   	push   ebx
c001bf98:	83 ec 1c             	sub    esp,0x1c
c001bf9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf9f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bfa6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bfaf:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bfb8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bfbf:	0f 85 da 02 00 00    	jne    c001c29f <IDE::open(int, int, void*)+0x30b>
c001bfc5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bfcb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bfcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfd3:	83 e0 7f             	and    eax,0x7f
c001bfd6:	83 f8 05             	cmp    eax,0x5
c001bfd9:	74 05                	je     c001bfe0 <IDE::open(int, int, void*)+0x4c>
c001bfdb:	83 f8 0f             	cmp    eax,0xf
c001bfde:	75 32                	jne    c001c012 <IDE::open(int, int, void*)+0x7e>
c001bfe0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bfe6:	83 e0 fc             	and    eax,0xfffffffc
c001bfe9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bff0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bff6:	83 e0 fc             	and    eax,0xfffffffc
c001bff9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c000:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c006:	83 e0 fc             	and    eax,0xfffffffc
c001c009:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c010:	eb 14                	jmp    c001c026 <IDE::open(int, int, void*)+0x92>
c001c012:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c01c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c026:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c02d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c032:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c039:	89 fa                	mov    edx,edi
c001c03b:	89 f1                	mov    ecx,esi
c001c03d:	c1 e1 10             	shl    ecx,0x10
c001c040:	89 e8                	mov    eax,ebp
c001c042:	c1 e0 0b             	shl    eax,0xb
c001c045:	09 c1                	or     ecx,eax
c001c047:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c04e:	c1 e0 08             	shl    eax,0x8
c001c051:	09 c1                	or     ecx,eax
c001c053:	89 c8                	mov    eax,ecx
c001c055:	0d 08 00 00 80       	or     eax,0x80000008
c001c05a:	ef                   	out    dx,eax
c001c05b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c060:	ed                   	in     eax,dx
c001c061:	c1 e8 10             	shr    eax,0x10
c001c064:	3d ff ff 00 00       	cmp    eax,0xffff
c001c069:	0f 84 f9 00 00 00    	je     c001c168 <IDE::open(int, int, void*)+0x1d4>
c001c06f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c075:	89 fa                	mov    edx,edi
c001c077:	89 c8                	mov    eax,ecx
c001c079:	ef                   	out    dx,eax
c001c07a:	b0 fe                	mov    al,0xfe
c001c07c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c081:	ee                   	out    dx,al
c001c082:	89 c8                	mov    eax,ecx
c001c084:	89 fa                	mov    edx,edi
c001c086:	ef                   	out    dx,eax
c001c087:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c08c:	ed                   	in     eax,dx
c001c08d:	3c fe                	cmp    al,0xfe
c001c08f:	0f 85 a4 00 00 00    	jne    c001c139 <IDE::open(int, int, void*)+0x1a5>
c001c095:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c09b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0a2:	74 30                	je     c001c0d4 <IDE::open(int, int, void*)+0x140>
c001c0a4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c0aa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c0ae:	83 ec 0c             	sub    esp,0xc
c001c0b1:	40                   	inc    eax
c001c0b2:	0f b6 c0             	movzx  eax,al
c001c0b5:	50                   	push   eax
c001c0b6:	55                   	push   ebp
c001c0b7:	56                   	push   esi
c001c0b8:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c0be:	51                   	push   ecx
c001c0bf:	e8 b0 38 ff ff       	call   c000f974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c0c4:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c0c9:	83 c4 1c             	add    esp,0x1c
c001c0cc:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0d2:	eb 0a                	jmp    c001c0de <IDE::open(int, int, void*)+0x14a>
c001c0d4:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c0de:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c0e5:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c0ea:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0f1:	89 ea                	mov    edx,ebp
c001c0f3:	c1 e1 10             	shl    ecx,0x10
c001c0f6:	c1 e0 08             	shl    eax,0x8
c001c0f9:	09 c1                	or     ecx,eax
c001c0fb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c102:	c1 e0 0b             	shl    eax,0xb
c001c105:	09 c1                	or     ecx,eax
c001c107:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c10d:	89 c8                	mov    eax,ecx
c001c10f:	ef                   	out    dx,eax
c001c110:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c116:	be fc 0c 00 00       	mov    esi,0xcfc
c001c11b:	89 f2                	mov    edx,esi
c001c11d:	89 f8                	mov    eax,edi
c001c11f:	ee                   	out    dx,al
c001c120:	89 c8                	mov    eax,ecx
c001c122:	89 ea                	mov    edx,ebp
c001c124:	ef                   	out    dx,eax
c001c125:	89 f2                	mov    edx,esi
c001c127:	ed                   	in     eax,dx
c001c128:	0f b6 c0             	movzx  eax,al
c001c12b:	39 f8                	cmp    eax,edi
c001c12d:	74 49                	je     c001c178 <IDE::open(int, int, void*)+0x1e4>
c001c12f:	83 ec 0c             	sub    esp,0xc
c001c132:	68 e8 31 02 c0       	push   0xc00231e8
c001c137:	eb 37                	jmp    c001c170 <IDE::open(int, int, void*)+0x1dc>
c001c139:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c142:	75 1a                	jne    c001c15e <IDE::open(int, int, void*)+0x1ca>
c001c144:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c149:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c14e:	74 05                	je     c001c155 <IDE::open(int, int, void*)+0x1c1>
c001c150:	83 c0 80             	add    eax,0xffffff80
c001c153:	75 09                	jne    c001c15e <IDE::open(int, int, void*)+0x1ca>
c001c155:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c15c:	eb 1a                	jmp    c001c178 <IDE::open(int, int, void*)+0x1e4>
c001c15e:	83 ec 0c             	sub    esp,0xc
c001c161:	68 f0 31 02 c0       	push   0xc00231f0
c001c166:	eb 08                	jmp    c001c170 <IDE::open(int, int, void*)+0x1dc>
c001c168:	83 ec 0c             	sub    esp,0xc
c001c16b:	68 21 32 02 c0       	push   0xc0023221
c001c170:	e8 2a 54 ff ff       	call   c001159f <KePanic(char const*)>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c17f:	74 1a                	je     c001c19b <IDE::open(int, int, void*)+0x207>
c001c181:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c187:	83 e0 fc             	and    eax,0xfffffffc
c001c18a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c191:	83 c0 08             	add    eax,0x8
c001c194:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c19b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1a1:	89 c2                	mov    edx,eax
c001c1a3:	83 e2 0f             	and    edx,0xf
c001c1a6:	83 fa 08             	cmp    edx,0x8
c001c1a9:	75 0a                	jne    c001c1b5 <IDE::open(int, int, void*)+0x221>
c001c1ab:	83 e8 02             	sub    eax,0x2
c001c1ae:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c1b5:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c1bb:	89 c2                	mov    edx,eax
c001c1bd:	83 e2 0f             	and    edx,0xf
c001c1c0:	83 fa 08             	cmp    edx,0x8
c001c1c3:	75 0a                	jne    c001c1cf <IDE::open(int, int, void*)+0x23b>
c001c1c5:	83 e8 02             	sub    eax,0x2
c001c1c8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c1cf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c1d6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c1dd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1e0:	89 d0                	mov    eax,edx
c001c1e2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1e6:	8d 7a 01             	lea    edi,[edx+0x1]
c001c1e9:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c1ed:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1f1:	83 e1 3f             	and    ecx,0x3f
c001c1f4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c1f8:	89 f9                	mov    ecx,edi
c001c1fa:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c201:	8d 78 02             	lea    edi,[eax+0x2]
c001c204:	0f b6 c9             	movzx  ecx,cl
c001c207:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c20a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c20e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c212:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c216:	83 e2 3f             	and    edx,0x3f
c001c219:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c21d:	89 f9                	mov    ecx,edi
c001c21f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c225:	8d 78 03             	lea    edi,[eax+0x3]
c001c228:	0f b6 d1             	movzx  edx,cl
c001c22b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c22e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c232:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c236:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c23a:	83 e1 3f             	and    ecx,0x3f
c001c23d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c241:	89 f9                	mov    ecx,edi
c001c243:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c249:	8d 78 04             	lea    edi,[eax+0x4]
c001c24c:	0f b6 c9             	movzx  ecx,cl
c001c24f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c252:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c256:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c25a:	89 fa                	mov    edx,edi
c001c25c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c262:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c266:	83 e2 3f             	and    edx,0x3f
c001c269:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c26d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c274:	66 85 f6             	test   si,si
c001c277:	74 65                	je     c001c2de <IDE::open(int, int, void*)+0x34a>
c001c279:	89 f9                	mov    ecx,edi
c001c27b:	83 c0 05             	add    eax,0x5
c001c27e:	0f b6 d1             	movzx  edx,cl
c001c281:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c284:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c288:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c28c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c292:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c296:	83 e0 3f             	and    eax,0x3f
c001c299:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c29d:	eb 3f                	jmp    c001c2de <IDE::open(int, int, void*)+0x34a>
c001c29f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2a6:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c2ac:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c2b3:	05 06 02 00 00       	add    eax,0x206
c001c2b8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2bf:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c2c6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c2cd:	05 06 02 00 00       	add    eax,0x206
c001c2d2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2d9:	e9 bd fe ff ff       	jmp    c001c19b <IDE::open(int, int, void*)+0x207>
c001c2de:	50                   	push   eax
c001c2df:	50                   	push   eax
c001c2e0:	6a 00                	push   0x0
c001c2e2:	53                   	push   ebx
c001c2e3:	e8 2e fa ff ff       	call   c001bd16 <IDE::prepareInterrupt(unsigned char)>
c001c2e8:	5a                   	pop    edx
c001c2e9:	59                   	pop    ecx
c001c2ea:	6a 01                	push   0x1
c001c2ec:	53                   	push   ebx
c001c2ed:	e8 24 fa ff ff       	call   c001bd16 <IDE::prepareInterrupt(unsigned char)>
c001c2f2:	83 c4 0c             	add    esp,0xc
c001c2f5:	6a 00                	push   0x0
c001c2f7:	6a 00                	push   0x0
c001c2f9:	53                   	push   ebx
c001c2fa:	e8 4b fc ff ff       	call   c001bf4a <IDE::enableIRQs(unsigned char, bool)>
c001c2ff:	83 c4 0c             	add    esp,0xc
c001c302:	6a 00                	push   0x0
c001c304:	6a 01                	push   0x1
c001c306:	53                   	push   ebx
c001c307:	e8 3e fc ff ff       	call   c001bf4a <IDE::enableIRQs(unsigned char, bool)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c316:	74 34                	je     c001c34c <IDE::open(int, int, void*)+0x3b8>
c001c318:	83 ec 0c             	sub    esp,0xc
c001c31b:	53                   	push   ebx
c001c31c:	6a 01                	push   0x1
c001c31e:	68 12 bf 01 c0       	push   0xc001bf12
c001c323:	6a 0e                	push   0xe
c001c325:	53                   	push   ebx
c001c326:	e8 59 06 ff ff       	call   c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c32b:	83 c4 14             	add    esp,0x14
c001c32e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c334:	53                   	push   ebx
c001c335:	6a 01                	push   0x1
c001c337:	68 2e bf 01 c0       	push   0xc001bf2e
c001c33c:	6a 0f                	push   0xf
c001c33e:	53                   	push   ebx
c001c33f:	e8 40 06 ff ff       	call   c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c344:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c34a:	eb 38                	jmp    c001c384 <IDE::open(int, int, void*)+0x3f0>
c001c34c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c356:	83 ec 0c             	sub    esp,0xc
c001c359:	53                   	push   ebx
c001c35a:	6a 00                	push   0x0
c001c35c:	68 12 bf 01 c0       	push   0xc001bf12
c001c361:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c367:	53                   	push   ebx
c001c368:	e8 17 06 ff ff       	call   c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c36d:	83 c4 14             	add    esp,0x14
c001c370:	53                   	push   ebx
c001c371:	6a 00                	push   0x0
c001c373:	68 2e bf 01 c0       	push   0xc001bf2e
c001c378:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c37e:	53                   	push   ebx
c001c37f:	e8 00 06 ff ff       	call   c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c384:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c386:	83 c4 20             	add    esp,0x20
c001c389:	83 ec 0c             	sub    esp,0xc
c001c38c:	53                   	push   ebx
c001c38d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c390:	83 c4 0c             	add    esp,0xc
c001c393:	6a 07                	push   0x7
c001c395:	6a 00                	push   0x0
c001c397:	53                   	push   ebx
c001c398:	e8 5f fa ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c39d:	83 c4 0c             	add    esp,0xc
c001c3a0:	6a 07                	push   0x7
c001c3a2:	6a 01                	push   0x1
c001c3a4:	53                   	push   ebx
c001c3a5:	e8 52 fa ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c3aa:	83 c4 0c             	add    esp,0xc
c001c3ad:	6a 01                	push   0x1
c001c3af:	6a 00                	push   0x0
c001c3b1:	53                   	push   ebx
c001c3b2:	e8 93 fb ff ff       	call   c001bf4a <IDE::enableIRQs(unsigned char, bool)>
c001c3b7:	83 c4 0c             	add    esp,0xc
c001c3ba:	6a 01                	push   0x1
c001c3bc:	6a 01                	push   0x1
c001c3be:	53                   	push   ebx
c001c3bf:	e8 86 fb ff ff       	call   c001bf4a <IDE::enableIRQs(unsigned char, bool)>
c001c3c4:	83 c4 2c             	add    esp,0x2c
c001c3c7:	31 c0                	xor    eax,eax
c001c3c9:	5b                   	pop    ebx
c001c3ca:	5e                   	pop    esi
c001c3cb:	5f                   	pop    edi
c001c3cc:	5d                   	pop    ebp
c001c3cd:	c3                   	ret    

c001c3ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c3ce:	55                   	push   ebp
c001c3cf:	57                   	push   edi
c001c3d0:	56                   	push   esi
c001c3d1:	53                   	push   ebx
c001c3d2:	83 ec 1c             	sub    esp,0x1c
c001c3d5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c3d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c3e5:	8d 42 f8             	lea    eax,[edx-0x8]
c001c3e8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c3ec:	3c 03                	cmp    al,0x3
c001c3ee:	77 5a                	ja     c001c44a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c3f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c3f4:	0f b6 db             	movzx  ebx,bl
c001c3f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c3fb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c3fe:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c403:	0c 80                	or     al,0x80
c001c405:	50                   	push   eax
c001c406:	6a 0c                	push   0xc
c001c408:	53                   	push   ebx
c001c409:	56                   	push   esi
c001c40a:	e8 2d f9 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c40f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c413:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c418:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c41c:	0f b6 d2             	movzx  edx,dl
c001c41f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c423:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c425:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c42a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c42e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c432:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c43a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c43e:	83 c4 2c             	add    esp,0x2c
c001c441:	5b                   	pop    ebx
c001c442:	5e                   	pop    esi
c001c443:	5f                   	pop    edi
c001c444:	5d                   	pop    ebp
c001c445:	e9 f2 f8 ff ff       	jmp    c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c44a:	0f b6 c2             	movzx  eax,dl
c001c44d:	83 f8 07             	cmp    eax,0x7
c001c450:	77 12                	ja     c001c464 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c452:	0f b6 db             	movzx  ebx,bl
c001c455:	0f b6 c2             	movzx  eax,dl
c001c458:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c460:	01 c2                	add    edx,eax
c001c462:	eb 2f                	jmp    c001c493 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c464:	83 f8 0d             	cmp    eax,0xd
c001c467:	77 13                	ja     c001c47c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c469:	0f b6 db             	movzx  ebx,bl
c001c46c:	0f b6 d2             	movzx  edx,dl
c001c46f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c476:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c47a:	eb 17                	jmp    c001c493 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c47c:	83 f8 15             	cmp    eax,0x15
c001c47f:	77 14                	ja     c001c495 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c481:	0f b6 db             	movzx  ebx,bl
c001c484:	0f b6 d2             	movzx  edx,dl
c001c487:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c48f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c493:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c495:	83 c4 1c             	add    esp,0x1c
c001c498:	5b                   	pop    ebx
c001c499:	5e                   	pop    esi
c001c49a:	5f                   	pop    edi
c001c49b:	5d                   	pop    ebp
c001c49c:	c3                   	ret    
c001c49d:	90                   	nop

c001c49e <IDE::detect()>:
c001c49e:	55                   	push   ebp
c001c49f:	57                   	push   edi
c001c4a0:	56                   	push   esi
c001c4a1:	53                   	push   ebx
c001c4a2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c4a8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c4af:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c4b6:	0f 85 9e 02 00 00    	jne    c001c75a <IDE::detect()+0x2bc>
c001c4bc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c4c3:	31 f6                	xor    esi,esi
c001c4c5:	31 ff                	xor    edi,edi
c001c4c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4cf:	89 f8                	mov    eax,edi
c001c4d1:	c1 e0 06             	shl    eax,0x6
c001c4d4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c4dc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4e0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e8:	c1 e0 04             	shl    eax,0x4
c001c4eb:	83 c8 a0             	or     eax,0xffffffa0
c001c4ee:	0f b6 c0             	movzx  eax,al
c001c4f1:	50                   	push   eax
c001c4f2:	6a 06                	push   0x6
c001c4f4:	56                   	push   esi
c001c4f5:	53                   	push   ebx
c001c4f6:	e8 41 f8 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4fb:	83 c4 0c             	add    esp,0xc
c001c4fe:	6a 0c                	push   0xc
c001c500:	56                   	push   esi
c001c501:	53                   	push   ebx
c001c502:	e8 f5 f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c507:	83 c4 0c             	add    esp,0xc
c001c50a:	6a 0c                	push   0xc
c001c50c:	56                   	push   esi
c001c50d:	53                   	push   ebx
c001c50e:	e8 e9 f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c513:	83 c4 0c             	add    esp,0xc
c001c516:	6a 0c                	push   0xc
c001c518:	56                   	push   esi
c001c519:	53                   	push   ebx
c001c51a:	e8 dd f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c51f:	83 c4 0c             	add    esp,0xc
c001c522:	6a 0c                	push   0xc
c001c524:	56                   	push   esi
c001c525:	53                   	push   ebx
c001c526:	e8 d1 f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c52b:	68 ec 00 00 00       	push   0xec
c001c530:	6a 07                	push   0x7
c001c532:	56                   	push   esi
c001c533:	53                   	push   ebx
c001c534:	e8 03 f8 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c539:	83 c4 1c             	add    esp,0x1c
c001c53c:	6a 0c                	push   0xc
c001c53e:	56                   	push   esi
c001c53f:	53                   	push   ebx
c001c540:	e8 b7 f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c545:	83 c4 0c             	add    esp,0xc
c001c548:	6a 0c                	push   0xc
c001c54a:	56                   	push   esi
c001c54b:	53                   	push   ebx
c001c54c:	e8 ab f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c551:	83 c4 0c             	add    esp,0xc
c001c554:	6a 0c                	push   0xc
c001c556:	56                   	push   esi
c001c557:	53                   	push   ebx
c001c558:	e8 9f f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c55d:	83 c4 0c             	add    esp,0xc
c001c560:	6a 0c                	push   0xc
c001c562:	56                   	push   esi
c001c563:	53                   	push   ebx
c001c564:	e8 93 f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c569:	83 c4 0c             	add    esp,0xc
c001c56c:	6a 0c                	push   0xc
c001c56e:	56                   	push   esi
c001c56f:	53                   	push   ebx
c001c570:	e8 87 f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c575:	83 c4 10             	add    esp,0x10
c001c578:	84 c0                	test   al,al
c001c57a:	0f 84 61 01 00 00    	je     c001c6e1 <IDE::detect()+0x243>
c001c580:	31 ed                	xor    ebp,ebp
c001c582:	50                   	push   eax
c001c583:	6a 0c                	push   0xc
c001c585:	56                   	push   esi
c001c586:	53                   	push   ebx
c001c587:	e8 70 f8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c58c:	83 c4 10             	add    esp,0x10
c001c58f:	a8 01                	test   al,0x1
c001c591:	0f 85 6b 01 00 00    	jne    c001c702 <IDE::detect()+0x264>
c001c597:	a8 80                	test   al,0x80
c001c599:	75 04                	jne    c001c59f <IDE::detect()+0x101>
c001c59b:	a8 08                	test   al,0x8
c001c59d:	75 23                	jne    c001c5c2 <IDE::detect()+0x124>
c001c59f:	45                   	inc    ebp
c001c5a0:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c5a6:	7e da                	jle    c001c582 <IDE::detect()+0xe4>
c001c5a8:	83 ec 0c             	sub    esp,0xc
c001c5ab:	6a 32                	push   0x32
c001c5ad:	e8 b6 9d ff ff       	call   c0016368 <milliTenthSleep(unsigned int)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c5bb:	75 c5                	jne    c001c582 <IDE::detect()+0xe4>
c001c5bd:	e9 40 01 00 00       	jmp    c001c702 <IDE::detect()+0x264>
c001c5c2:	31 c9                	xor    ecx,ecx
c001c5c4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c5c8:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c5cc:	83 ec 0c             	sub    esp,0xc
c001c5cf:	68 80 00 00 00       	push   0x80
c001c5d4:	55                   	push   ebp
c001c5d5:	6a 00                	push   0x0
c001c5d7:	56                   	push   esi
c001c5d8:	53                   	push   ebx
c001c5d9:	e8 f0 fd ff ff       	call   c001c3ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c5de:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c5e3:	89 f8                	mov    eax,edi
c001c5e5:	c1 e0 06             	shl    eax,0x6
c001c5e8:	01 d8                	add    eax,ebx
c001c5ea:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c5f1:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c5f8:	89 d1                	mov    ecx,edx
c001c5fa:	89 f2                	mov    edx,esi
c001c5fc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c602:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c606:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c60c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c610:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c617:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c61f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c626:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c62e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c634:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c63b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c641:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c645:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c649:	83 c4 20             	add    esp,0x20
c001c64c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c64f:	83 c5 02             	add    ebp,0x2
c001c652:	83 c0 02             	add    eax,0x2
c001c655:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c65b:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c65e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c664:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c668:	75 e2                	jne    c001c64c <IDE::detect()+0x1ae>
c001c66a:	89 f8                	mov    eax,edi
c001c66c:	c1 e0 06             	shl    eax,0x6
c001c66f:	01 d8                	add    eax,ebx
c001c671:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c678:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c67f:	c1 ea 09             	shr    edx,0x9
c001c682:	83 e2 01             	and    edx,0x1
c001c685:	80 e1 01             	and    cl,0x1
c001c688:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c68e:	75 22                	jne    c001c6b2 <IDE::detect()+0x214>
c001c690:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c697:	74 47                	je     c001c6e0 <IDE::detect()+0x242>
c001c699:	83 ec 0c             	sub    esp,0xc
c001c69c:	68 7c 01 00 00       	push   0x17c
c001c6a1:	e8 2d b4 fe ff       	call   c0007ad3 <malloc>
c001c6a6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6a9:	89 c5                	mov    ebp,eax
c001c6ab:	e8 16 05 00 00       	call   c001cbc6 <ATA::ATA()>
c001c6b0:	eb 17                	jmp    c001c6c9 <IDE::detect()+0x22b>
c001c6b2:	83 ec 0c             	sub    esp,0xc
c001c6b5:	68 84 01 00 00       	push   0x184
c001c6ba:	e8 14 b4 fe ff       	call   c0007ad3 <malloc>
c001c6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6c2:	89 c5                	mov    ebp,eax
c001c6c4:	e8 6f 0e 00 00       	call   c001d538 <ATAPI::ATAPI()>
c001c6c9:	5a                   	pop    edx
c001c6ca:	59                   	pop    ecx
c001c6cb:	55                   	push   ebp
c001c6cc:	53                   	push   ebx
c001c6cd:	e8 06 03 ff ff       	call   c000c9d8 <Device::addChild(Device*)>
c001c6d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6d5:	53                   	push   ebx
c001c6d6:	57                   	push   edi
c001c6d7:	6a 00                	push   0x0
c001c6d9:	55                   	push   ebp
c001c6da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6dd:	83 c4 20             	add    esp,0x20
c001c6e0:	47                   	inc    edi
c001c6e1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c6e6:	74 0d                	je     c001c6f5 <IDE::detect()+0x257>
c001c6e8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c6f0:	e9 da fd ff ff       	jmp    c001c4cf <IDE::detect()+0x31>
c001c6f5:	4e                   	dec    esi
c001c6f6:	74 62                	je     c001c75a <IDE::detect()+0x2bc>
c001c6f8:	be 01 00 00 00       	mov    esi,0x1
c001c6fd:	e9 c5 fd ff ff       	jmp    c001c4c7 <IDE::detect()+0x29>
c001c702:	50                   	push   eax
c001c703:	6a 04                	push   0x4
c001c705:	56                   	push   esi
c001c706:	53                   	push   ebx
c001c707:	e8 f0 f6 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c70c:	83 c4 0c             	add    esp,0xc
c001c70f:	6a 05                	push   0x5
c001c711:	56                   	push   esi
c001c712:	53                   	push   ebx
c001c713:	89 c5                	mov    ebp,eax
c001c715:	e8 e2 f6 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c71a:	89 e9                	mov    ecx,ebp
c001c71c:	83 c4 10             	add    esp,0x10
c001c71f:	0f b6 e9             	movzx  ebp,cl
c001c722:	83 fd 14             	cmp    ebp,0x14
c001c725:	74 2d                	je     c001c754 <IDE::detect()+0x2b6>
c001c727:	83 fd 69             	cmp    ebp,0x69
c001c72a:	75 b5                	jne    c001c6e1 <IDE::detect()+0x243>
c001c72c:	3c 96                	cmp    al,0x96
c001c72e:	75 b1                	jne    c001c6e1 <IDE::detect()+0x243>
c001c730:	68 a1 00 00 00       	push   0xa1
c001c735:	6a 07                	push   0x7
c001c737:	56                   	push   esi
c001c738:	53                   	push   ebx
c001c739:	e8 fe f5 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c73e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c745:	e8 1e 9c ff ff       	call   c0016368 <milliTenthSleep(unsigned int)>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	b1 01                	mov    cl,0x1
c001c74f:	e9 70 fe ff ff       	jmp    c001c5c4 <IDE::detect()+0x126>
c001c754:	3c eb                	cmp    al,0xeb
c001c756:	75 cf                	jne    c001c727 <IDE::detect()+0x289>
c001c758:	eb d6                	jmp    c001c730 <IDE::detect()+0x292>
c001c75a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c760:	5b                   	pop    ebx
c001c761:	5e                   	pop    esi
c001c762:	5f                   	pop    edi
c001c763:	5d                   	pop    ebp
c001c764:	c3                   	ret    
c001c765:	90                   	nop

c001c766 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c766:	55                   	push   ebp
c001c767:	57                   	push   edi
c001c768:	56                   	push   esi
c001c769:	53                   	push   ebx
c001c76a:	83 ec 1c             	sub    esp,0x1c
c001c76d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c771:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c775:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c77d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c781:	88 c3                	mov    bl,al
c001c783:	25 ff 00 00 00       	and    eax,0xff
c001c788:	0f 84 88 00 00 00    	je     c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c78e:	83 ec 0c             	sub    esp,0xc
c001c791:	89 c7                	mov    edi,eax
c001c793:	68 4b 32 02 c0       	push   0xc002324b
c001c798:	e8 6d e1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c79d:	83 c4 10             	add    esp,0x10
c001c7a0:	83 ff 01             	cmp    edi,0x1
c001c7a3:	74 6b                	je     c001c810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7a5:	83 ff 02             	cmp    edi,0x2
c001c7a8:	75 58                	jne    c001c802 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c7aa:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c7af:	50                   	push   eax
c001c7b0:	6a 01                	push   0x1
c001c7b2:	01 ff                	add    edi,edi
c001c7b4:	09 fe                	or     esi,edi
c001c7b6:	89 f0                	mov    eax,esi
c001c7b8:	0f b6 f0             	movzx  esi,al
c001c7bb:	c1 e6 06             	shl    esi,0x6
c001c7be:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c7c6:	50                   	push   eax
c001c7c7:	55                   	push   ebp
c001c7c8:	e8 2f f6 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	a8 01                	test   al,0x1
c001c7d2:	74 02                	je     c001c7d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c7d4:	b3 07                	mov    bl,0x7
c001c7d6:	a8 02                	test   al,0x2
c001c7d8:	74 02                	je     c001c7dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c7da:	b3 03                	mov    bl,0x3
c001c7dc:	a8 04                	test   al,0x4
c001c7de:	74 02                	je     c001c7e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c7e0:	b3 14                	mov    bl,0x14
c001c7e2:	a8 08                	test   al,0x8
c001c7e4:	74 02                	je     c001c7e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c7e6:	b3 03                	mov    bl,0x3
c001c7e8:	a8 10                	test   al,0x10
c001c7ea:	74 02                	je     c001c7ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c7ec:	b3 15                	mov    bl,0x15
c001c7ee:	a8 20                	test   al,0x20
c001c7f0:	74 02                	je     c001c7f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c7f2:	b3 03                	mov    bl,0x3
c001c7f4:	a8 40                	test   al,0x40
c001c7f6:	74 02                	je     c001c7fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c7f8:	b3 16                	mov    bl,0x16
c001c7fa:	a8 80                	test   al,0x80
c001c7fc:	74 18                	je     c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7fe:	b3 0d                	mov    bl,0xd
c001c800:	eb 14                	jmp    c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c802:	83 ff 03             	cmp    edi,0x3
c001c805:	74 0d                	je     c001c814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c807:	83 ff 04             	cmp    edi,0x4
c001c80a:	75 0a                	jne    c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c80c:	b3 08                	mov    bl,0x8
c001c80e:	eb 06                	jmp    c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c810:	b3 13                	mov    bl,0x13
c001c812:	eb 02                	jmp    c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c814:	b3 17                	mov    bl,0x17
c001c816:	83 c4 1c             	add    esp,0x1c
c001c819:	88 d8                	mov    al,bl
c001c81b:	5b                   	pop    ebx
c001c81c:	5e                   	pop    esi
c001c81d:	5f                   	pop    edi
c001c81e:	5d                   	pop    ebp
c001c81f:	c3                   	ret    

c001c820 <IDE::polling(unsigned char, unsigned int)>:
c001c820:	57                   	push   edi
c001c821:	56                   	push   esi
c001c822:	53                   	push   ebx
c001c823:	bb 04 00 00 00       	mov    ebx,0x4
c001c828:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c82c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c831:	52                   	push   edx
c001c832:	6a 0c                	push   0xc
c001c834:	56                   	push   esi
c001c835:	57                   	push   edi
c001c836:	e8 c1 f5 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	4b                   	dec    ebx
c001c83f:	75 f0                	jne    c001c831 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c841:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c846:	50                   	push   eax
c001c847:	6a 0c                	push   0xc
c001c849:	56                   	push   esi
c001c84a:	57                   	push   edi
c001c84b:	e8 ac f5 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	a8 01                	test   al,0x1
c001c855:	75 17                	jne    c001c86e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c857:	a8 20                	test   al,0x20
c001c859:	75 0f                	jne    c001c86a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c85b:	4b                   	dec    ebx
c001c85c:	74 10                	je     c001c86e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c85e:	a8 80                	test   al,0x80
c001c860:	75 e4                	jne    c001c846 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c862:	a8 08                	test   al,0x8
c001c864:	74 e0                	je     c001c846 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c866:	31 c0                	xor    eax,eax
c001c868:	eb 06                	jmp    c001c870 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c86a:	b0 01                	mov    al,0x1
c001c86c:	eb 02                	jmp    c001c870 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c86e:	b0 02                	mov    al,0x2
c001c870:	5b                   	pop    ebx
c001c871:	5e                   	pop    esi
c001c872:	5f                   	pop    edi
c001c873:	c3                   	ret    

c001c874 <SATABus::close(int, int, void*)>:
c001c874:	31 c0                	xor    eax,eax
c001c876:	c3                   	ret    
c001c877:	90                   	nop

c001c878 <SATABus::detect()>:
c001c878:	c3                   	ret    
c001c879:	90                   	nop

c001c87a <SATABus::SATABus()>:
c001c87a:	83 ec 0c             	sub    esp,0xc
c001c87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c881:	83 ec 08             	sub    esp,0x8
c001c884:	68 84 32 02 c0       	push   0xc0023284
c001c889:	50                   	push   eax
c001c88a:	e8 8d 04 ff ff       	call   c000cd1c <HardDiskController::HardDiskController(char const*)>
c001c88f:	83 c4 10             	add    esp,0x10
c001c892:	ba b0 32 02 c0       	mov    edx,0xc00232b0
c001c897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89b:	89 10                	mov    DWORD PTR [eax],edx
c001c89d:	83 ec 0c             	sub    esp,0xc
c001c8a0:	6a 50                	push   0x50
c001c8a2:	e8 0a b6 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	89 c2                	mov    edx,eax
c001c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	6a 50                	push   0x50
c001c8bb:	e8 35 cd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	89 c2                	mov    edx,eax
c001c8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8cf:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c8d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8d8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c8de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8e2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c8e8:	83 ec 0c             	sub    esp,0xc
c001c8eb:	6a 03                	push   0x3
c001c8ed:	6a 50                	push   0x50
c001c8ef:	51                   	push   ecx
c001c8f0:	52                   	push   edx
c001c8f1:	50                   	push   eax
c001c8f2:	e8 11 d6 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c8f7:	83 c4 20             	add    esp,0x20
c001c8fa:	90                   	nop
c001c8fb:	83 c4 0c             	add    esp,0xc
c001c8fe:	c3                   	ret    
c001c8ff:	90                   	nop

c001c900 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c904:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c907:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c90a:	09 c2                	or     edx,eax
c001c90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c910:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c916:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c918:	31 c0                	xor    eax,eax
c001c91a:	c1 e9 08             	shr    ecx,0x8
c001c91d:	83 e1 0f             	and    ecx,0xf
c001c920:	39 c8                	cmp    eax,ecx
c001c922:	74 0a                	je     c001c92e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c924:	f6 c2 01             	test   dl,0x1
c001c927:	74 08                	je     c001c931 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c929:	d1 ea                	shr    edx,1
c001c92b:	40                   	inc    eax
c001c92c:	eb f2                	jmp    c001c920 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c92e:	83 c8 ff             	or     eax,0xffffffff
c001c931:	c3                   	ret    

c001c932 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c932:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c936:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c939:	89 c2                	mov    edx,eax
c001c93b:	c1 ea 08             	shr    edx,0x8
c001c93e:	83 e2 0f             	and    edx,0xf
c001c941:	4a                   	dec    edx
c001c942:	75 32                	jne    c001c976 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c944:	83 e0 0f             	and    eax,0xf
c001c947:	83 f8 03             	cmp    eax,0x3
c001c94a:	75 2a                	jne    c001c976 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c94c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c94f:	b8 02 00 00 00       	mov    eax,0x2
c001c954:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c95a:	74 1c                	je     c001c978 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c95c:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c962:	b8 04 00 00 00       	mov    eax,0x4
c001c967:	74 0f                	je     c001c978 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c969:	31 c0                	xor    eax,eax
c001c96b:	83 fa 03             	cmp    edx,0x3
c001c96e:	0f 94 c0             	sete   al
c001c971:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c975:	c3                   	ret    
c001c976:	31 c0                	xor    eax,eax
c001c978:	c3                   	ret    
c001c979:	90                   	nop

c001c97a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c97a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c97e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c981:	0f ba e2 0f          	bt     edx,0xf
c001c985:	72 f7                	jb     c001c97e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c987:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c98a:	83 ca 10             	or     edx,0x10
c001c98d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c990:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c993:	83 ca 01             	or     edx,0x1
c001c996:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c999:	c3                   	ret    

c001c99a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c99a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c99e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9a1:	83 e2 fe             	and    edx,0xfffffffe
c001c9a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9a7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9aa:	83 e2 ef             	and    edx,0xffffffef
c001c9ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9b3:	0f ba e2 0e          	bt     edx,0xe
c001c9b7:	72 f7                	jb     c001c9b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9b9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9bc:	0f ba e2 0f          	bt     edx,0xf
c001c9c0:	72 ee                	jb     c001c9b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9c2:	c3                   	ret    
c001c9c3:	90                   	nop

c001c9c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c9c4:	55                   	push   ebp
c001c9c5:	57                   	push   edi
c001c9c6:	56                   	push   esi
c001c9c7:	53                   	push   ebx
c001c9c8:	83 ec 1c             	sub    esp,0x1c
c001c9cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9d3:	53                   	push   ebx
c001c9d4:	57                   	push   edi
c001c9d5:	e8 c0 ff ff ff       	call   c001c99a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c9da:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c9de:	83 ec 0c             	sub    esp,0xc
c001c9e1:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9e7:	c1 e5 0a             	shl    ebp,0xa
c001c9ea:	01 e8                	add    eax,ebp
c001c9ec:	89 03                	mov    DWORD PTR [ebx],eax
c001c9ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9f0:	68 00 04 00 00       	push   0x400
c001c9f5:	6a 00                	push   0x0
c001c9f7:	50                   	push   eax
c001c9f8:	e8 f3 3a fe ff       	call   c00004f0 <memset>
c001c9fd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca03:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ca07:	83 c4 1c             	add    esp,0x1c
c001ca0a:	01 e8                	add    eax,ebp
c001ca0c:	89 03                	mov    DWORD PTR [ebx],eax
c001ca0e:	c1 e6 08             	shl    esi,0x8
c001ca11:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca18:	81 c6 00 80 00 00    	add    esi,0x8000
c001ca1e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca24:	01 f0                	add    eax,esi
c001ca26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca2c:	68 00 01 00 00       	push   0x100
c001ca31:	6a 00                	push   0x0
c001ca33:	50                   	push   eax
c001ca34:	e8 b7 3a fe ff       	call   c00004f0 <memset>
c001ca39:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca3f:	31 d2                	xor    edx,edx
c001ca41:	01 f0                	add    eax,esi
c001ca43:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca46:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca4d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001ca53:	01 ee                	add    esi,ebp
c001ca55:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ca59:	83 c4 10             	add    esp,0x10
c001ca5c:	c1 e5 0d             	shl    ebp,0xd
c001ca5f:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001ca65:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001ca6b:	83 c6 20             	add    esi,0x20
c001ca6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca72:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001ca78:	01 e8                	add    eax,ebp
c001ca7a:	01 d0                	add    eax,edx
c001ca7c:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca7f:	52                   	push   edx
c001ca80:	68 00 01 00 00       	push   0x100
c001ca85:	6a 00                	push   0x0
c001ca87:	50                   	push   eax
c001ca88:	e8 63 3a fe ff       	call   c00004f0 <memset>
c001ca8d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca93:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001ca9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca9e:	83 c4 10             	add    esp,0x10
c001caa1:	01 e8                	add    eax,ebp
c001caa3:	01 d0                	add    eax,edx
c001caa5:	81 c2 00 01 00 00    	add    edx,0x100
c001caab:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001caae:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cab4:	75 af                	jne    c001ca65 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cab6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cabd:	50                   	push   eax
c001cabe:	50                   	push   eax
c001cabf:	53                   	push   ebx
c001cac0:	57                   	push   edi
c001cac1:	e8 b4 fe ff ff       	call   c001c97a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cac6:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cacd:	83 c4 2c             	add    esp,0x2c
c001cad0:	5b                   	pop    ebx
c001cad1:	5e                   	pop    esi
c001cad2:	5f                   	pop    edi
c001cad3:	5d                   	pop    ebp
c001cad4:	c3                   	ret    
c001cad5:	90                   	nop

c001cad6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cad6:	55                   	push   ebp
c001cad7:	57                   	push   edi
c001cad8:	56                   	push   esi
c001cad9:	53                   	push   ebx
c001cada:	31 db                	xor    ebx,ebx
c001cadc:	83 ec 0c             	sub    esp,0xc
c001cadf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cae3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cae7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001caea:	f7 c7 01 00 00 00    	test   edi,0x1
c001caf0:	74 7a                	je     c001cb6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001caf2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001caf6:	89 d8                	mov    eax,ebx
c001caf8:	c1 e0 07             	shl    eax,0x7
c001cafb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb02:	55                   	push   ebp
c001cb03:	56                   	push   esi
c001cb04:	e8 29 fe ff ff       	call   c001c932 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb09:	5a                   	pop    edx
c001cb0a:	59                   	pop    ecx
c001cb0b:	83 f8 01             	cmp    eax,0x1
c001cb0e:	75 21                	jne    c001cb31 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb10:	50                   	push   eax
c001cb11:	53                   	push   ebx
c001cb12:	55                   	push   ebp
c001cb13:	56                   	push   esi
c001cb14:	e8 ab fe ff ff       	call   c001c9c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb19:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb20:	e8 ae af fe ff       	call   c0007ad3 <malloc>
c001cb25:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb28:	89 c5                	mov    ebp,eax
c001cb2a:	e8 c1 10 00 00       	call   c001dbf0 <SATA::SATA()>
c001cb2f:	eb 24                	jmp    c001cb55 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb31:	83 f8 04             	cmp    eax,0x4
c001cb34:	75 36                	jne    c001cb6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb36:	51                   	push   ecx
c001cb37:	53                   	push   ebx
c001cb38:	55                   	push   ebp
c001cb39:	56                   	push   esi
c001cb3a:	e8 85 fe ff ff       	call   c001c9c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb3f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb46:	e8 88 af fe ff       	call   c0007ad3 <malloc>
c001cb4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb4e:	89 c5                	mov    ebp,eax
c001cb50:	e8 f5 17 00 00       	call   c001e34a <SATAPI::SATAPI()>
c001cb55:	58                   	pop    eax
c001cb56:	5a                   	pop    edx
c001cb57:	55                   	push   ebp
c001cb58:	56                   	push   esi
c001cb59:	e8 7a fe fe ff       	call   c000c9d8 <Device::addChild(Device*)>
c001cb5e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb61:	56                   	push   esi
c001cb62:	6a 00                	push   0x0
c001cb64:	53                   	push   ebx
c001cb65:	55                   	push   ebp
c001cb66:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb69:	83 c4 20             	add    esp,0x20
c001cb6c:	d1 ef                	shr    edi,1
c001cb6e:	43                   	inc    ebx
c001cb6f:	83 fb 20             	cmp    ebx,0x20
c001cb72:	0f 85 72 ff ff ff    	jne    c001caea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb78:	83 c4 0c             	add    esp,0xc
c001cb7b:	5b                   	pop    ebx
c001cb7c:	5e                   	pop    esi
c001cb7d:	5f                   	pop    edi
c001cb7e:	5d                   	pop    ebp
c001cb7f:	c3                   	ret    

c001cb80 <SATABus::open(int, int, void*)>:
c001cb80:	83 ec 14             	sub    esp,0x14
c001cb83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb87:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cb8d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cb93:	52                   	push   edx
c001cb94:	50                   	push   eax
c001cb95:	e8 3c ff ff ff       	call   c001cad6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cb9a:	31 c0                	xor    eax,eax
c001cb9c:	83 c4 1c             	add    esp,0x1c
c001cb9f:	c3                   	ret    

c001cba0 <ATA::close(int, int, void*)>:
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbad:	85 c0                	test   eax,eax
c001cbaf:	74 0c                	je     c001cbbd <ATA::close(int, int, void*)+0x1d>
c001cbb1:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbb3:	83 ec 0c             	sub    esp,0xc
c001cbb6:	50                   	push   eax
c001cbb7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cbba:	83 c4 10             	add    esp,0x10
c001cbbd:	31 c0                	xor    eax,eax
c001cbbf:	83 c4 0c             	add    esp,0xc
c001cbc2:	c3                   	ret    
c001cbc3:	90                   	nop

c001cbc4 <ATA::powerSaving(PowerSavingLevel)>:
c001cbc4:	c3                   	ret    
c001cbc5:	90                   	nop

c001cbc6 <ATA::ATA()>:
c001cbc6:	83 ec 0c             	sub    esp,0xc
c001cbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbcd:	83 ec 04             	sub    esp,0x4
c001cbd0:	68 00 02 00 00       	push   0x200
c001cbd5:	68 7d 33 02 c0       	push   0xc002337d
c001cbda:	50                   	push   eax
c001cbdb:	e8 c6 01 ff ff       	call   c000cda6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cbe0:	83 c4 10             	add    esp,0x10
c001cbe3:	ba f0 32 02 c0       	mov    edx,0xc00232f0
c001cbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbec:	89 10                	mov    DWORD PTR [eax],edx
c001cbee:	90                   	nop
c001cbef:	83 c4 0c             	add    esp,0xc
c001cbf2:	c3                   	ret    
c001cbf3:	90                   	nop

c001cbf4 <ATA::flush(bool)>:
c001cbf4:	53                   	push   ebx
c001cbf5:	83 ec 08             	sub    esp,0x8
c001cbf8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cbfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc01:	83 f8 01             	cmp    eax,0x1
c001cc04:	19 c0                	sbb    eax,eax
c001cc06:	83 e0 fd             	and    eax,0xfffffffd
c001cc09:	05 ea 00 00 00       	add    eax,0xea
c001cc0e:	50                   	push   eax
c001cc0f:	6a 07                	push   0x7
c001cc11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc18:	50                   	push   eax
c001cc19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc1f:	e8 18 f1 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc24:	83 c4 0c             	add    esp,0xc
c001cc27:	6a 00                	push   0x0
c001cc29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc30:	50                   	push   eax
c001cc31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc37:	e8 e4 fb ff ff       	call   c001c820 <IDE::polling(unsigned char, unsigned int)>
c001cc3c:	83 c4 18             	add    esp,0x18
c001cc3f:	5b                   	pop    ebx
c001cc40:	c3                   	ret    
c001cc41:	90                   	nop

c001cc42 <ATA::readyForCommand()>:
c001cc42:	56                   	push   esi
c001cc43:	53                   	push   ebx
c001cc44:	53                   	push   ebx
c001cc45:	31 db                	xor    ebx,ebx
c001cc47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc4b:	51                   	push   ecx
c001cc4c:	6a 0c                	push   0xc
c001cc4e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc55:	50                   	push   eax
c001cc56:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc5c:	e8 9b f1 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001cc61:	83 c4 10             	add    esp,0x10
c001cc64:	a8 88                	test   al,0x88
c001cc66:	74 1f                	je     c001cc87 <ATA::readyForCommand()+0x45>
c001cc68:	43                   	inc    ebx
c001cc69:	83 fb 63             	cmp    ebx,0x63
c001cc6c:	7e dd                	jle    c001cc4b <ATA::readyForCommand()+0x9>
c001cc6e:	83 ec 0c             	sub    esp,0xc
c001cc71:	6a 0a                	push   0xa
c001cc73:	e8 f0 96 ff ff       	call   c0016368 <milliTenthSleep(unsigned int)>
c001cc78:	83 c4 10             	add    esp,0x10
c001cc7b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc81:	75 c8                	jne    c001cc4b <ATA::readyForCommand()+0x9>
c001cc83:	31 c0                	xor    eax,eax
c001cc85:	eb 02                	jmp    c001cc89 <ATA::readyForCommand()+0x47>
c001cc87:	b0 01                	mov    al,0x1
c001cc89:	5a                   	pop    edx
c001cc8a:	5b                   	pop    ebx
c001cc8b:	5e                   	pop    esi
c001cc8c:	c3                   	ret    
c001cc8d:	90                   	nop

c001cc8e <ATA::access(unsigned long long, int, void*, bool)>:
c001cc8e:	55                   	push   ebp
c001cc8f:	57                   	push   edi
c001cc90:	56                   	push   esi
c001cc91:	53                   	push   ebx
c001cc92:	83 ec 2c             	sub    esp,0x2c
c001cc95:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cc99:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cc9d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cca1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cca5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cca9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ccad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ccb1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ccb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccbb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ccc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ccc5:	c1 e0 06             	shl    eax,0x6
c001ccc8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ccd0:	74 5b                	je     c001cd2d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001ccd2:	89 fa                	mov    edx,edi
c001ccd4:	89 f0                	mov    eax,esi
c001ccd6:	c1 ea 1c             	shr    edx,0x1c
c001ccd9:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001ccdd:	89 d1                	mov    ecx,edx
c001ccdf:	09 c1                	or     ecx,eax
c001cce1:	74 25                	je     c001cd08 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cce3:	31 ed                	xor    ebp,ebp
c001cce5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ccec:	89 fa                	mov    edx,edi
c001ccee:	89 f0                	mov    eax,esi
c001ccf0:	0f ad d0             	shrd   eax,edx,cl
c001ccf3:	d3 ea                	shr    edx,cl
c001ccf5:	f6 c1 20             	test   cl,0x20
c001ccf8:	74 02                	je     c001ccfc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ccfa:	89 d0                	mov    eax,edx
c001ccfc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd00:	45                   	inc    ebp
c001cd01:	83 fd 06             	cmp    ebp,0x6
c001cd04:	75 df                	jne    c001cce5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd06:	eb 71                	jmp    c001cd79 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cd08:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd0d:	89 f0                	mov    eax,esi
c001cd0f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd16:	0f ac f8 10          	shrd   eax,edi,0x10
c001cd1a:	bf 01 00 00 00       	mov    edi,0x1
c001cd1f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd23:	c1 ee 18             	shr    esi,0x18
c001cd26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd2b:	eb 53                	jmp    c001cd80 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd2d:	6a 00                	push   0x0
c001cd2f:	6a 3f                	push   0x3f
c001cd31:	57                   	push   edi
c001cd32:	56                   	push   esi
c001cd33:	e8 d8 2a 00 00       	call   c001f810 <__umoddi3>
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	40                   	inc    eax
c001cd3c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd40:	6a 00                	push   0x0
c001cd42:	68 f0 03 00 00       	push   0x3f0
c001cd47:	57                   	push   edi
c001cd48:	56                   	push   esi
c001cd49:	e8 c2 29 00 00       	call   c001f710 <__udivdi3>
c001cd4e:	83 c4 10             	add    esp,0x10
c001cd51:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd56:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd5d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd62:	6a 00                	push   0x0
c001cd64:	6a 3f                	push   0x3f
c001cd66:	57                   	push   edi
c001cd67:	31 ff                	xor    edi,edi
c001cd69:	56                   	push   esi
c001cd6a:	e8 a1 29 00 00       	call   c001f710 <__udivdi3>
c001cd6f:	83 c4 10             	add    esp,0x10
c001cd72:	83 e0 0f             	and    eax,0xf
c001cd75:	89 c6                	mov    esi,eax
c001cd77:	eb 07                	jmp    c001cd80 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001cd79:	31 f6                	xor    esi,esi
c001cd7b:	bf 02 00 00 00       	mov    edi,0x2
c001cd80:	50                   	push   eax
c001cd81:	6a 00                	push   0x0
c001cd83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd8a:	50                   	push   eax
c001cd8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd8f:	e8 b6 f1 ff ff       	call   c001bf4a <IDE::enableIRQs(unsigned char, bool)>
c001cd94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd97:	e8 a6 fe ff ff       	call   c001cc42 <ATA::readyForCommand()>
c001cd9c:	83 c4 10             	add    esp,0x10
c001cd9f:	84 c0                	test   al,al
c001cda1:	75 0a                	jne    c001cdad <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cda3:	be 01 00 00 00       	mov    esi,0x1
c001cda8:	e9 9b 02 00 00       	jmp    c001d048 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cdad:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cdb3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cdb9:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cdc0:	c1 e0 04             	shl    eax,0x4
c001cdc3:	09 c6                	or     esi,eax
c001cdc5:	f7 c7 03 00 00 00    	test   edi,0x3
c001cdcb:	75 05                	jne    c001cdd2 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cdcd:	83 ce a0             	or     esi,0xffffffa0
c001cdd0:	eb 03                	jmp    c001cdd5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cdd2:	83 ce e0             	or     esi,0xffffffe0
c001cdd5:	89 f0                	mov    eax,esi
c001cdd7:	0f b6 f0             	movzx  esi,al
c001cdda:	56                   	push   esi
c001cddb:	6a 06                	push   0x6
c001cddd:	51                   	push   ecx
c001cdde:	52                   	push   edx
c001cddf:	e8 58 ef ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cde4:	83 c4 10             	add    esp,0x10
c001cde7:	6a 00                	push   0x0
c001cde9:	6a 01                	push   0x1
c001cdeb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdf2:	50                   	push   eax
c001cdf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdf9:	e8 3e ef ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdfe:	89 f8                	mov    eax,edi
c001ce00:	83 c4 10             	add    esp,0x10
c001ce03:	0f b6 f0             	movzx  esi,al
c001ce06:	83 fe 02             	cmp    esi,0x2
c001ce09:	75 6e                	jne    c001ce79 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ce0b:	6a 00                	push   0x0
c001ce0d:	6a 08                	push   0x8
c001ce0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce16:	50                   	push   eax
c001ce17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce1d:	e8 1a ef ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce22:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce27:	50                   	push   eax
c001ce28:	6a 09                	push   0x9
c001ce2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce31:	50                   	push   eax
c001ce32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce38:	e8 ff ee ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce3d:	83 c4 20             	add    esp,0x20
c001ce40:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce45:	50                   	push   eax
c001ce46:	6a 0a                	push   0xa
c001ce48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce4f:	50                   	push   eax
c001ce50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce56:	e8 e1 ee ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce5b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce60:	50                   	push   eax
c001ce61:	6a 0b                	push   0xb
c001ce63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce6a:	50                   	push   eax
c001ce6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce71:	e8 c6 ee ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce76:	83 c4 20             	add    esp,0x20
c001ce79:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce7e:	50                   	push   eax
c001ce7f:	6a 02                	push   0x2
c001ce81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce88:	50                   	push   eax
c001ce89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce8f:	e8 a8 ee ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce94:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ce99:	50                   	push   eax
c001ce9a:	6a 03                	push   0x3
c001ce9c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cea3:	50                   	push   eax
c001cea4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceaa:	e8 8d ee ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceaf:	83 c4 20             	add    esp,0x20
c001ceb2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ceb7:	50                   	push   eax
c001ceb8:	6a 04                	push   0x4
c001ceba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cec1:	50                   	push   eax
c001cec2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cec8:	e8 6f ee ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cecd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ced2:	50                   	push   eax
c001ced3:	6a 05                	push   0x5
c001ced5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cedc:	50                   	push   eax
c001cedd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee3:	e8 54 ee ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee8:	83 c4 20             	add    esp,0x20
c001ceeb:	83 fe 02             	cmp    esi,0x2
c001ceee:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001cef3:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001cef8:	85 c9                	test   ecx,ecx
c001cefa:	74 07                	je     c001cf03 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cefc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf01:	75 47                	jne    c001cf4a <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001cf03:	89 f8                	mov    eax,edi
c001cf05:	0f b6 f8             	movzx  edi,al
c001cf08:	31 c0                	xor    eax,eax
c001cf0a:	83 ff 02             	cmp    edi,0x2
c001cf0d:	0f 95 c0             	setne  al
c001cf10:	89 c6                	mov    esi,eax
c001cf12:	74 0c                	je     c001cf20 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cf14:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf19:	b8 30 00 00 00       	mov    eax,0x30
c001cf1e:	75 2f                	jne    c001cf4f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf24:	83 f2 01             	xor    edx,0x1
c001cf27:	85 c9                	test   ecx,ecx
c001cf29:	74 09                	je     c001cf34 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cf2b:	84 d2                	test   dl,dl
c001cf2d:	b8 24 00 00 00       	mov    eax,0x24
c001cf32:	75 1b                	jne    c001cf4f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf34:	85 f6                	test   esi,esi
c001cf36:	0f 84 67 fe ff ff    	je     c001cda3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf3c:	84 d2                	test   dl,dl
c001cf3e:	b8 20 00 00 00       	mov    eax,0x20
c001cf43:	75 0a                	jne    c001cf4f <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cf45:	e9 59 fe ff ff       	jmp    c001cda3 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cf4a:	b8 34 00 00 00       	mov    eax,0x34
c001cf4f:	50                   	push   eax
c001cf50:	6a 07                	push   0x7
c001cf52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf59:	50                   	push   eax
c001cf5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf60:	e8 d7 ed ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf65:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cf71:	85 f6                	test   esi,esi
c001cf73:	0f 84 b5 00 00 00    	je     c001d02e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cf79:	50                   	push   eax
c001cf7a:	6a 01                	push   0x1
c001cf7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf83:	50                   	push   eax
c001cf84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8a:	e8 91 f8 ff ff       	call   c001c820 <IDE::polling(unsigned char, unsigned int)>
c001cf8f:	83 c4 10             	add    esp,0x10
c001cf92:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf98:	0f b6 c0             	movzx  eax,al
c001cf9b:	85 c0                	test   eax,eax
c001cf9d:	74 1f                	je     c001cfbe <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cf9f:	50                   	push   eax
c001cfa0:	89 c6                	mov    esi,eax
c001cfa2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cfa9:	0f b6 d2             	movzx  edx,dl
c001cfac:	50                   	push   eax
c001cfad:	52                   	push   edx
c001cfae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb4:	e8 ad f7 ff ff       	call   c001c766 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfb9:	e9 87 00 00 00       	jmp    c001d045 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cfbe:	85 ed                	test   ebp,ebp
c001cfc0:	74 3b                	je     c001cffd <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cfc2:	31 ff                	xor    edi,edi
c001cfc4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cfc8:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cfcc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cfd1:	50                   	push   eax
c001cfd2:	50                   	push   eax
c001cfd3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfda:	50                   	push   eax
c001cfdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe1:	e8 44 ed ff ff       	call   c001bd2a <IDE::getBase(unsigned char)>
c001cfe6:	89 c2                	mov    edx,eax
c001cfe8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cfed:	66 ef                	out    dx,ax
c001cfef:	47                   	inc    edi
c001cff0:	83 c4 10             	add    esp,0x10
c001cff3:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cff9:	75 c9                	jne    c001cfc4 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cffb:	eb 23                	jmp    c001d020 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cffd:	51                   	push   ecx
c001cffe:	0f b6 d2             	movzx  edx,dl
c001d001:	51                   	push   ecx
c001d002:	52                   	push   edx
c001d003:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d009:	e8 1c ed ff ff       	call   c001bd2a <IDE::getBase(unsigned char)>
c001d00e:	b9 00 01 00 00       	mov    ecx,0x100
c001d013:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d017:	89 c2                	mov    edx,eax
c001d019:	fc                   	cld    
c001d01a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d01d:	83 c4 10             	add    esp,0x10
c001d020:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d028:	4e                   	dec    esi
c001d029:	e9 43 ff ff ff       	jmp    c001cf71 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d02e:	31 f6                	xor    esi,esi
c001d030:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d035:	74 11                	je     c001d048 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d037:	50                   	push   eax
c001d038:	50                   	push   eax
c001d039:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d03e:	50                   	push   eax
c001d03f:	53                   	push   ebx
c001d040:	e8 af fb ff ff       	call   c001cbf4 <ATA::flush(bool)>
c001d045:	83 c4 10             	add    esp,0x10
c001d048:	83 c4 2c             	add    esp,0x2c
c001d04b:	89 f0                	mov    eax,esi
c001d04d:	5b                   	pop    ebx
c001d04e:	5e                   	pop    esi
c001d04f:	5f                   	pop    edi
c001d050:	5d                   	pop    ebp
c001d051:	c3                   	ret    

c001d052 <ATA::detectCHS()>:
c001d052:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d056:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d05c:	c1 e0 06             	shl    eax,0x6
c001d05f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d065:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d06f:	c7 44 24 04 d4 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232d4
c001d077:	e9 23 45 ff ff       	jmp    c001159f <KePanic(char const*)>

c001d07c <ATA::open(int, int, void*)>:
c001d07c:	53                   	push   ebx
c001d07d:	83 ec 08             	sub    esp,0x8
c001d080:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d084:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d088:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d08c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d092:	c1 e0 06             	shl    eax,0x6
c001d095:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d09b:	01 d0                	add    eax,edx
c001d09d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d0a4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d0aa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d0b1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d0bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d0c2:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d0c8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0cf:	75 0c                	jne    c001d0dd <ATA::open(int, int, void*)+0x61>
c001d0d1:	83 ec 0c             	sub    esp,0xc
c001d0d4:	53                   	push   ebx
c001d0d5:	e8 78 ff ff ff       	call   c001d052 <ATA::detectCHS()>
c001d0da:	83 c4 10             	add    esp,0x10
c001d0dd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d0e3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0e9:	c1 e0 06             	shl    eax,0x6
c001d0ec:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d0f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0fd:	d1 e8                	shr    eax,1
c001d0ff:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d105:	6a 04                	push   0x4
c001d107:	6a 0c                	push   0xc
c001d109:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d110:	50                   	push   eax
c001d111:	52                   	push   edx
c001d112:	e8 25 ec ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d117:	90                   	nop
c001d118:	90                   	nop
c001d119:	6a 00                	push   0x0
c001d11b:	6a 0c                	push   0xc
c001d11d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d124:	50                   	push   eax
c001d125:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d12b:	e8 0c ec ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d130:	83 c4 14             	add    esp,0x14
c001d133:	53                   	push   ebx
c001d134:	e8 d5 fc fe ff       	call   c000ce0e <PhysicalDisk::startCache()>
c001d139:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d13c:	e8 19 0f ff ff       	call   c000e05a <createPartitionsForDisk(PhysicalDisk*)>
c001d141:	83 c4 18             	add    esp,0x18
c001d144:	31 c0                	xor    eax,eax
c001d146:	5b                   	pop    ebx
c001d147:	c3                   	ret    

c001d148 <combineCharAndColour(char, unsigned char)>:
c001d148:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d14d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d153:	c1 e0 08             	shl    eax,0x8
c001d156:	09 d0                	or     eax,edx
c001d158:	c3                   	ret    

c001d159 <combineColours(unsigned char, unsigned char)>:
c001d159:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d15e:	c1 e0 04             	shl    eax,0x4
c001d161:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d165:	c3                   	ret    

c001d166 <ATA::read(unsigned long long, int, void*)>:
c001d166:	55                   	push   ebp
c001d167:	57                   	push   edi
c001d168:	56                   	push   esi
c001d169:	be 04 00 00 00       	mov    esi,0x4
c001d16e:	53                   	push   ebx
c001d16f:	83 ec 0c             	sub    esp,0xc
c001d172:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d176:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d17a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d17e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d182:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d185:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d18b:	0f 87 a1 01 00 00    	ja     c001d332 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d191:	85 c9                	test   ecx,ecx
c001d193:	be 06 00 00 00       	mov    esi,0x6
c001d198:	0f 84 94 01 00 00    	je     c001d332 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d19e:	55                   	push   ebp
c001d19f:	55                   	push   ebp
c001d1a0:	6a 00                	push   0x0
c001d1a2:	51                   	push   ecx
c001d1a3:	53                   	push   ebx
c001d1a4:	52                   	push   edx
c001d1a5:	50                   	push   eax
c001d1a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1aa:	e8 df fa ff ff       	call   c001cc8e <ATA::access(unsigned long long, int, void*, bool)>
c001d1af:	83 c4 20             	add    esp,0x20
c001d1b2:	85 c0                	test   eax,eax
c001d1b4:	89 c6                	mov    esi,eax
c001d1b6:	0f 85 71 01 00 00    	jne    c001d32d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d1bc:	50                   	push   eax
c001d1bd:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1c2:	50                   	push   eax
c001d1c3:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d1c9:	6a 0f                	push   0xf
c001d1cb:	6a 00                	push   0x0
c001d1cd:	89 da                	mov    edx,ebx
c001d1cf:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d1d5:	e8 7f ff ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001d1da:	59                   	pop    ecx
c001d1db:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1e0:	5b                   	pop    ebx
c001d1e1:	0f b6 d8             	movzx  ebx,al
c001d1e4:	89 d0                	mov    eax,edx
c001d1e6:	53                   	push   ebx
c001d1e7:	99                   	cdq    
c001d1e8:	f7 fd                	idiv   ebp
c001d1ea:	99                   	cdq    
c001d1eb:	f7 f9                	idiv   ecx
c001d1ed:	83 c2 30             	add    edx,0x30
c001d1f0:	0f b6 d2             	movzx  edx,dl
c001d1f3:	52                   	push   edx
c001d1f4:	e8 4f ff ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d1f9:	5f                   	pop    edi
c001d1fa:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1ff:	5a                   	pop    edx
c001d200:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d206:	53                   	push   ebx
c001d207:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d20c:	99                   	cdq    
c001d20d:	f7 ff                	idiv   edi
c001d20f:	99                   	cdq    
c001d210:	f7 f9                	idiv   ecx
c001d212:	8d 42 30             	lea    eax,[edx+0x30]
c001d215:	0f b6 c0             	movzx  eax,al
c001d218:	50                   	push   eax
c001d219:	e8 2a ff ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d21e:	5f                   	pop    edi
c001d21f:	bf 64 00 00 00       	mov    edi,0x64
c001d224:	5a                   	pop    edx
c001d225:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d22b:	53                   	push   ebx
c001d22c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d231:	99                   	cdq    
c001d232:	f7 ff                	idiv   edi
c001d234:	99                   	cdq    
c001d235:	f7 f9                	idiv   ecx
c001d237:	8d 42 30             	lea    eax,[edx+0x30]
c001d23a:	0f b6 c0             	movzx  eax,al
c001d23d:	50                   	push   eax
c001d23e:	e8 05 ff ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d243:	5a                   	pop    edx
c001d244:	5a                   	pop    edx
c001d245:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d24b:	53                   	push   ebx
c001d24c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d251:	99                   	cdq    
c001d252:	f7 f9                	idiv   ecx
c001d254:	99                   	cdq    
c001d255:	f7 f9                	idiv   ecx
c001d257:	8d 42 30             	lea    eax,[edx+0x30]
c001d25a:	0f b6 c0             	movzx  eax,al
c001d25d:	50                   	push   eax
c001d25e:	e8 e5 fe ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d263:	5a                   	pop    edx
c001d264:	5a                   	pop    edx
c001d265:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d26b:	53                   	push   ebx
c001d26c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d271:	99                   	cdq    
c001d272:	f7 f9                	idiv   ecx
c001d274:	83 c2 30             	add    edx,0x30
c001d277:	0f b6 d2             	movzx  edx,dl
c001d27a:	52                   	push   edx
c001d27b:	e8 c8 fe ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d280:	5a                   	pop    edx
c001d281:	5a                   	pop    edx
c001d282:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d288:	53                   	push   ebx
c001d289:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d28e:	99                   	cdq    
c001d28f:	f7 fd                	idiv   ebp
c001d291:	99                   	cdq    
c001d292:	f7 f9                	idiv   ecx
c001d294:	8d 42 30             	lea    eax,[edx+0x30]
c001d297:	0f b6 c0             	movzx  eax,al
c001d29a:	50                   	push   eax
c001d29b:	e8 a8 fe ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d2a0:	5d                   	pop    ebp
c001d2a1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d2a6:	5a                   	pop    edx
c001d2a7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2ad:	53                   	push   ebx
c001d2ae:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2b3:	99                   	cdq    
c001d2b4:	f7 fd                	idiv   ebp
c001d2b6:	99                   	cdq    
c001d2b7:	f7 f9                	idiv   ecx
c001d2b9:	8d 42 30             	lea    eax,[edx+0x30]
c001d2bc:	0f b6 c0             	movzx  eax,al
c001d2bf:	50                   	push   eax
c001d2c0:	e8 83 fe ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d2c5:	5d                   	pop    ebp
c001d2c6:	5a                   	pop    edx
c001d2c7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2cd:	53                   	push   ebx
c001d2ce:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2d3:	99                   	cdq    
c001d2d4:	f7 ff                	idiv   edi
c001d2d6:	99                   	cdq    
c001d2d7:	f7 f9                	idiv   ecx
c001d2d9:	8d 42 30             	lea    eax,[edx+0x30]
c001d2dc:	0f b6 c0             	movzx  eax,al
c001d2df:	50                   	push   eax
c001d2e0:	e8 63 fe ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d2e5:	5f                   	pop    edi
c001d2e6:	5d                   	pop    ebp
c001d2e7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2ed:	53                   	push   ebx
c001d2ee:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2f3:	99                   	cdq    
c001d2f4:	f7 f9                	idiv   ecx
c001d2f6:	99                   	cdq    
c001d2f7:	f7 f9                	idiv   ecx
c001d2f9:	8d 42 30             	lea    eax,[edx+0x30]
c001d2fc:	0f b6 c0             	movzx  eax,al
c001d2ff:	50                   	push   eax
c001d300:	e8 43 fe ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d305:	5a                   	pop    edx
c001d306:	5f                   	pop    edi
c001d307:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d30d:	53                   	push   ebx
c001d30e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d313:	99                   	cdq    
c001d314:	f7 f9                	idiv   ecx
c001d316:	83 c2 30             	add    edx,0x30
c001d319:	0f b6 d2             	movzx  edx,dl
c001d31c:	52                   	push   edx
c001d31d:	e8 26 fe ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d322:	83 c4 10             	add    esp,0x10
c001d325:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d32b:	eb 05                	jmp    c001d332 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d32d:	be 01 00 00 00       	mov    esi,0x1
c001d332:	83 c4 0c             	add    esp,0xc
c001d335:	89 f0                	mov    eax,esi
c001d337:	5b                   	pop    ebx
c001d338:	5e                   	pop    esi
c001d339:	5f                   	pop    edi
c001d33a:	5d                   	pop    ebp
c001d33b:	c3                   	ret    

c001d33c <ATA::write(unsigned long long, int, void*)>:
c001d33c:	55                   	push   ebp
c001d33d:	57                   	push   edi
c001d33e:	56                   	push   esi
c001d33f:	be 04 00 00 00       	mov    esi,0x4
c001d344:	53                   	push   ebx
c001d345:	83 ec 0c             	sub    esp,0xc
c001d348:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d34c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d350:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d354:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d358:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d35b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d361:	0f 87 9c 01 00 00    	ja     c001d503 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d367:	85 c9                	test   ecx,ecx
c001d369:	be 06 00 00 00       	mov    esi,0x6
c001d36e:	0f 84 8f 01 00 00    	je     c001d503 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d374:	55                   	push   ebp
c001d375:	55                   	push   ebp
c001d376:	6a 01                	push   0x1
c001d378:	51                   	push   ecx
c001d379:	53                   	push   ebx
c001d37a:	52                   	push   edx
c001d37b:	50                   	push   eax
c001d37c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d380:	e8 09 f9 ff ff       	call   c001cc8e <ATA::access(unsigned long long, int, void*, bool)>
c001d385:	83 c4 20             	add    esp,0x20
c001d388:	85 c0                	test   eax,eax
c001d38a:	89 c6                	mov    esi,eax
c001d38c:	0f 85 6c 01 00 00    	jne    c001d4fe <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d392:	50                   	push   eax
c001d393:	bd 10 27 00 00       	mov    ebp,0x2710
c001d398:	50                   	push   eax
c001d399:	6a 0f                	push   0xf
c001d39b:	6a 00                	push   0x0
c001d39d:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d3a3:	e8 b1 fd ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001d3a8:	5a                   	pop    edx
c001d3a9:	59                   	pop    ecx
c001d3aa:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3af:	0f b6 d8             	movzx  ebx,al
c001d3b2:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3b7:	53                   	push   ebx
c001d3b8:	99                   	cdq    
c001d3b9:	f7 fd                	idiv   ebp
c001d3bb:	99                   	cdq    
c001d3bc:	f7 f9                	idiv   ecx
c001d3be:	8d 42 30             	lea    eax,[edx+0x30]
c001d3c1:	0f b6 c0             	movzx  eax,al
c001d3c4:	50                   	push   eax
c001d3c5:	e8 7e fd ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d3ca:	5f                   	pop    edi
c001d3cb:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3d0:	5a                   	pop    edx
c001d3d1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3d7:	53                   	push   ebx
c001d3d8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3dd:	99                   	cdq    
c001d3de:	f7 ff                	idiv   edi
c001d3e0:	99                   	cdq    
c001d3e1:	f7 f9                	idiv   ecx
c001d3e3:	8d 42 30             	lea    eax,[edx+0x30]
c001d3e6:	0f b6 c0             	movzx  eax,al
c001d3e9:	50                   	push   eax
c001d3ea:	e8 59 fd ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d3ef:	5f                   	pop    edi
c001d3f0:	bf 64 00 00 00       	mov    edi,0x64
c001d3f5:	5a                   	pop    edx
c001d3f6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3fc:	53                   	push   ebx
c001d3fd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d402:	99                   	cdq    
c001d403:	f7 ff                	idiv   edi
c001d405:	99                   	cdq    
c001d406:	f7 f9                	idiv   ecx
c001d408:	8d 42 30             	lea    eax,[edx+0x30]
c001d40b:	0f b6 c0             	movzx  eax,al
c001d40e:	50                   	push   eax
c001d40f:	e8 34 fd ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d414:	5a                   	pop    edx
c001d415:	5a                   	pop    edx
c001d416:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d41c:	53                   	push   ebx
c001d41d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d422:	99                   	cdq    
c001d423:	f7 f9                	idiv   ecx
c001d425:	99                   	cdq    
c001d426:	f7 f9                	idiv   ecx
c001d428:	8d 42 30             	lea    eax,[edx+0x30]
c001d42b:	0f b6 c0             	movzx  eax,al
c001d42e:	50                   	push   eax
c001d42f:	e8 14 fd ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d434:	5a                   	pop    edx
c001d435:	5a                   	pop    edx
c001d436:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d43c:	53                   	push   ebx
c001d43d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d442:	99                   	cdq    
c001d443:	f7 f9                	idiv   ecx
c001d445:	83 c2 30             	add    edx,0x30
c001d448:	0f b6 d2             	movzx  edx,dl
c001d44b:	52                   	push   edx
c001d44c:	e8 f7 fc ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d451:	5a                   	pop    edx
c001d452:	5a                   	pop    edx
c001d453:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d459:	53                   	push   ebx
c001d45a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d45f:	99                   	cdq    
c001d460:	f7 fd                	idiv   ebp
c001d462:	99                   	cdq    
c001d463:	f7 f9                	idiv   ecx
c001d465:	8d 42 30             	lea    eax,[edx+0x30]
c001d468:	0f b6 c0             	movzx  eax,al
c001d46b:	50                   	push   eax
c001d46c:	e8 d7 fc ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d471:	5d                   	pop    ebp
c001d472:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d477:	5a                   	pop    edx
c001d478:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d47e:	53                   	push   ebx
c001d47f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d484:	99                   	cdq    
c001d485:	f7 fd                	idiv   ebp
c001d487:	99                   	cdq    
c001d488:	f7 f9                	idiv   ecx
c001d48a:	8d 42 30             	lea    eax,[edx+0x30]
c001d48d:	0f b6 c0             	movzx  eax,al
c001d490:	50                   	push   eax
c001d491:	e8 b2 fc ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d496:	5d                   	pop    ebp
c001d497:	5a                   	pop    edx
c001d498:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d49e:	53                   	push   ebx
c001d49f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4a4:	99                   	cdq    
c001d4a5:	f7 ff                	idiv   edi
c001d4a7:	99                   	cdq    
c001d4a8:	f7 f9                	idiv   ecx
c001d4aa:	8d 42 30             	lea    eax,[edx+0x30]
c001d4ad:	0f b6 c0             	movzx  eax,al
c001d4b0:	50                   	push   eax
c001d4b1:	e8 92 fc ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d4b6:	5f                   	pop    edi
c001d4b7:	5d                   	pop    ebp
c001d4b8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d4be:	53                   	push   ebx
c001d4bf:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4c4:	99                   	cdq    
c001d4c5:	f7 f9                	idiv   ecx
c001d4c7:	99                   	cdq    
c001d4c8:	f7 f9                	idiv   ecx
c001d4ca:	8d 42 30             	lea    eax,[edx+0x30]
c001d4cd:	0f b6 c0             	movzx  eax,al
c001d4d0:	50                   	push   eax
c001d4d1:	e8 72 fc ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d4d6:	5a                   	pop    edx
c001d4d7:	5f                   	pop    edi
c001d4d8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4de:	53                   	push   ebx
c001d4df:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4e4:	99                   	cdq    
c001d4e5:	f7 f9                	idiv   ecx
c001d4e7:	83 c2 30             	add    edx,0x30
c001d4ea:	0f b6 d2             	movzx  edx,dl
c001d4ed:	52                   	push   edx
c001d4ee:	e8 55 fc ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001d4f3:	83 c4 10             	add    esp,0x10
c001d4f6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4fc:	eb 05                	jmp    c001d503 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4fe:	be 01 00 00 00       	mov    esi,0x1
c001d503:	83 c4 0c             	add    esp,0xc
c001d506:	89 f0                	mov    eax,esi
c001d508:	5b                   	pop    ebx
c001d509:	5e                   	pop    esi
c001d50a:	5f                   	pop    edi
c001d50b:	5d                   	pop    ebp
c001d50c:	c3                   	ret    
c001d50d:	90                   	nop

c001d50e <ATAPI::write(unsigned long long, int, void*)>:
c001d50e:	b8 03 00 00 00       	mov    eax,0x3
c001d513:	c3                   	ret    

c001d514 <ATAPI::close(int, int, void*)>:
c001d514:	83 ec 0c             	sub    esp,0xc
c001d517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d51b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d521:	85 c0                	test   eax,eax
c001d523:	74 0c                	je     c001d531 <ATAPI::close(int, int, void*)+0x1d>
c001d525:	8b 10                	mov    edx,DWORD PTR [eax]
c001d527:	83 ec 0c             	sub    esp,0xc
c001d52a:	50                   	push   eax
c001d52b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	31 c0                	xor    eax,eax
c001d533:	83 c4 0c             	add    esp,0xc
c001d536:	c3                   	ret    
c001d537:	90                   	nop

c001d538 <ATAPI::ATAPI()>:
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53f:	83 ec 04             	sub    esp,0x4
c001d542:	68 00 08 00 00       	push   0x800
c001d547:	68 1d 34 02 c0       	push   0xc002341d
c001d54c:	50                   	push   eax
c001d54d:	e8 54 f8 fe ff       	call   c000cda6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d552:	83 c4 10             	add    esp,0x10
c001d555:	ba 38 33 02 c0       	mov    edx,0xc0023338
c001d55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55e:	89 10                	mov    DWORD PTR [eax],edx
c001d560:	90                   	nop
c001d561:	83 c4 0c             	add    esp,0xc
c001d564:	c3                   	ret    
c001d565:	90                   	nop

c001d566 <ATAPI::readyForCommand()>:
c001d566:	56                   	push   esi
c001d567:	53                   	push   ebx
c001d568:	53                   	push   ebx
c001d569:	31 db                	xor    ebx,ebx
c001d56b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d56f:	51                   	push   ecx
c001d570:	6a 0c                	push   0xc
c001d572:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d579:	50                   	push   eax
c001d57a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d580:	e8 77 e8 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001d585:	83 c4 10             	add    esp,0x10
c001d588:	a8 88                	test   al,0x88
c001d58a:	74 25                	je     c001d5b1 <ATAPI::readyForCommand()+0x4b>
c001d58c:	43                   	inc    ebx
c001d58d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d593:	7e da                	jle    c001d56f <ATAPI::readyForCommand()+0x9>
c001d595:	83 ec 0c             	sub    esp,0xc
c001d598:	68 5e 01 00 00       	push   0x15e
c001d59d:	e8 c6 8d ff ff       	call   c0016368 <milliTenthSleep(unsigned int)>
c001d5a2:	83 c4 10             	add    esp,0x10
c001d5a5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d5ab:	75 c2                	jne    c001d56f <ATAPI::readyForCommand()+0x9>
c001d5ad:	31 c0                	xor    eax,eax
c001d5af:	eb 02                	jmp    c001d5b3 <ATAPI::readyForCommand()+0x4d>
c001d5b1:	b0 01                	mov    al,0x1
c001d5b3:	5a                   	pop    edx
c001d5b4:	5b                   	pop    ebx
c001d5b5:	5e                   	pop    esi
c001d5b6:	c3                   	ret    
c001d5b7:	90                   	nop

c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d5b8:	55                   	push   ebp
c001d5b9:	57                   	push   edi
c001d5ba:	56                   	push   esi
c001d5bb:	53                   	push   ebx
c001d5bc:	83 ec 20             	sub    esp,0x20
c001d5bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5c7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d5cb:	6a 01                	push   0x1
c001d5cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5d4:	50                   	push   eax
c001d5d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5db:	e8 6a e9 ff ff       	call   c001bf4a <IDE::enableIRQs(unsigned char, bool)>
c001d5e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5e7:	59                   	pop    ecx
c001d5e8:	5e                   	pop    esi
c001d5e9:	50                   	push   eax
c001d5ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5f0:	e8 21 e7 ff ff       	call   c001bd16 <IDE::prepareInterrupt(unsigned char)>
c001d5f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5f8:	e8 69 ff ff ff       	call   c001d566 <ATAPI::readyForCommand()>
c001d5fd:	83 c4 10             	add    esp,0x10
c001d600:	84 c0                	test   al,al
c001d602:	75 0a                	jne    c001d60e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d604:	bb 01 00 00 00       	mov    ebx,0x1
c001d609:	e9 5f 02 00 00       	jmp    c001d86d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d60e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d614:	c1 e0 04             	shl    eax,0x4
c001d617:	0f b6 c0             	movzx  eax,al
c001d61a:	50                   	push   eax
c001d61b:	6a 06                	push   0x6
c001d61d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d624:	50                   	push   eax
c001d625:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d62b:	e8 0c e7 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d630:	6a 00                	push   0x0
c001d632:	6a 01                	push   0x1
c001d634:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d63b:	50                   	push   eax
c001d63c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d642:	e8 f5 e6 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d647:	83 c4 20             	add    esp,0x20
c001d64a:	0f b6 c3             	movzx  eax,bl
c001d64d:	50                   	push   eax
c001d64e:	0f b6 df             	movzx  ebx,bh
c001d651:	6a 04                	push   0x4
c001d653:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d65a:	50                   	push   eax
c001d65b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d661:	e8 d6 e6 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d666:	53                   	push   ebx
c001d667:	6a 05                	push   0x5
c001d669:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d670:	50                   	push   eax
c001d671:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d677:	e8 c0 e6 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d67c:	83 c4 20             	add    esp,0x20
c001d67f:	68 a0 00 00 00       	push   0xa0
c001d684:	6a 07                	push   0x7
c001d686:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d68d:	50                   	push   eax
c001d68e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d694:	e8 a3 e6 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d699:	83 c4 0c             	add    esp,0xc
c001d69c:	6a 01                	push   0x1
c001d69e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6a5:	50                   	push   eax
c001d6a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6ac:	e8 6f f1 ff ff       	call   c001c820 <IDE::polling(unsigned char, unsigned int)>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	0f b6 d8             	movzx  ebx,al
c001d6b7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d6bd:	85 db                	test   ebx,ebx
c001d6bf:	74 20                	je     c001d6e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d6c1:	53                   	push   ebx
c001d6c2:	0f b6 c0             	movzx  eax,al
c001d6c5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6cc:	52                   	push   edx
c001d6cd:	50                   	push   eax
c001d6ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d4:	e8 8d f0 ff ff       	call   c001c766 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	e9 8c 01 00 00       	jmp    c001d86d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6e1:	52                   	push   edx
c001d6e2:	0f b6 c0             	movzx  eax,al
c001d6e5:	52                   	push   edx
c001d6e6:	50                   	push   eax
c001d6e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6ed:	e8 38 e6 ff ff       	call   c001bd2a <IDE::getBase(unsigned char)>
c001d6f2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6f6:	b9 06 00 00 00       	mov    ecx,0x6
c001d6fb:	89 c2                	mov    edx,eax
c001d6fd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d700:	89 e8                	mov    eax,ebp
c001d702:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d706:	83 c4 10             	add    esp,0x10
c001d709:	0f b6 c0             	movzx  eax,al
c001d70c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d710:	85 db                	test   ebx,ebx
c001d712:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d718:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d71f:	0f 84 eb 00 00 00    	je     c001d810 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d725:	55                   	push   ebp
c001d726:	55                   	push   ebp
c001d727:	52                   	push   edx
c001d728:	50                   	push   eax
c001d729:	e8 82 e7 ff ff       	call   c001beb0 <IDE::waitInterrupt(unsigned char)>
c001d72e:	83 c4 10             	add    esp,0x10
c001d731:	84 c0                	test   al,al
c001d733:	0f 84 cb fe ff ff    	je     c001d604 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d739:	56                   	push   esi
c001d73a:	56                   	push   esi
c001d73b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d742:	50                   	push   eax
c001d743:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d749:	e8 c8 e5 ff ff       	call   c001bd16 <IDE::prepareInterrupt(unsigned char)>
c001d74e:	83 c4 0c             	add    esp,0xc
c001d751:	6a 04                	push   0x4
c001d753:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d75a:	50                   	push   eax
c001d75b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d761:	e8 96 e6 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001d766:	83 c4 0c             	add    esp,0xc
c001d769:	6a 05                	push   0x5
c001d76b:	89 c6                	mov    esi,eax
c001d76d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d774:	50                   	push   eax
c001d775:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d77b:	e8 7c e6 ff ff       	call   c001bdfc <IDE::read(unsigned char, unsigned char)>
c001d780:	83 c4 10             	add    esp,0x10
c001d783:	0f b6 e8             	movzx  ebp,al
c001d786:	89 f0                	mov    eax,esi
c001d788:	c1 e5 08             	shl    ebp,0x8
c001d78b:	0f b6 f0             	movzx  esi,al
c001d78e:	09 f5                	or     ebp,esi
c001d790:	31 f6                	xor    esi,esi
c001d792:	d1 fd                	sar    ebp,1
c001d794:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d799:	74 5c                	je     c001d7f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d79b:	39 ee                	cmp    esi,ebp
c001d79d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7a3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7aa:	75 0d                	jne    c001d7b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d7ac:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d7af:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d7b3:	4b                   	dec    ebx
c001d7b4:	e9 57 ff ff ff       	jmp    c001d710 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d7b9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d7bd:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d7c1:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d7c6:	51                   	push   ecx
c001d7c7:	51                   	push   ecx
c001d7c8:	52                   	push   edx
c001d7c9:	50                   	push   eax
c001d7ca:	e8 5b e5 ff ff       	call   c001bd2a <IDE::getBase(unsigned char)>
c001d7cf:	89 c2                	mov    edx,eax
c001d7d1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d7d6:	66 ef                	out    dx,ax
c001d7d8:	46                   	inc    esi
c001d7d9:	83 c4 10             	add    esp,0x10
c001d7dc:	eb bd                	jmp    c001d79b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d7de:	51                   	push   ecx
c001d7df:	51                   	push   ecx
c001d7e0:	52                   	push   edx
c001d7e1:	50                   	push   eax
c001d7e2:	e8 43 e5 ff ff       	call   c001bd2a <IDE::getBase(unsigned char)>
c001d7e7:	89 c2                	mov    edx,eax
c001d7e9:	66 ed                	in     ax,dx
c001d7eb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d7f6:	46                   	inc    esi
c001d7f7:	39 ee                	cmp    esi,ebp
c001d7f9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7ff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d806:	75 d6                	jne    c001d7de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d808:	01 f6                	add    esi,esi
c001d80a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d80e:	eb a3                	jmp    c001d7b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d810:	51                   	push   ecx
c001d811:	51                   	push   ecx
c001d812:	52                   	push   edx
c001d813:	50                   	push   eax
c001d814:	e8 97 e6 ff ff       	call   c001beb0 <IDE::waitInterrupt(unsigned char)>
c001d819:	83 c4 10             	add    esp,0x10
c001d81c:	84 c0                	test   al,al
c001d81e:	0f 84 e0 fd ff ff    	je     c001d604 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d824:	52                   	push   edx
c001d825:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d82a:	52                   	push   edx
c001d82b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d832:	50                   	push   eax
c001d833:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d839:	e8 d8 e4 ff ff       	call   c001bd16 <IDE::prepareInterrupt(unsigned char)>
c001d83e:	83 c4 10             	add    esp,0x10
c001d841:	50                   	push   eax
c001d842:	50                   	push   eax
c001d843:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d84a:	50                   	push   eax
c001d84b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d851:	e8 d4 e4 ff ff       	call   c001bd2a <IDE::getBase(unsigned char)>
c001d856:	8d 50 07             	lea    edx,[eax+0x7]
c001d859:	ec                   	in     al,dx
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	a8 88                	test   al,0x88
c001d85f:	74 0a                	je     c001d86b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d861:	4b                   	dec    ebx
c001d862:	75 dd                	jne    c001d841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d864:	bb 02 00 00 00       	mov    ebx,0x2
c001d869:	eb 02                	jmp    c001d86d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d86b:	31 db                	xor    ebx,ebx
c001d86d:	83 c4 1c             	add    esp,0x1c
c001d870:	89 d8                	mov    eax,ebx
c001d872:	5b                   	pop    ebx
c001d873:	5e                   	pop    esi
c001d874:	5f                   	pop    edi
c001d875:	5d                   	pop    ebp
c001d876:	c3                   	ret    
c001d877:	90                   	nop

c001d878 <ATAPI::diskRemoved()>:
c001d878:	53                   	push   ebx
c001d879:	83 ec 14             	sub    esp,0x14
c001d87c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d880:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d887:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d88d:	e8 b6 04 ff ff       	call   c000dd48 <LogicalDisk::unmount()>
c001d892:	58                   	pop    eax
c001d893:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d899:	e8 8e 0e ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c001d89e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d8a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d8a8:	83 c4 18             	add    esp,0x18
c001d8ab:	5b                   	pop    ebx
c001d8ac:	e9 6b 0e ff ff       	jmp    c000e71c <VCache::invalidateReadBuffer()>
c001d8b1:	90                   	nop

c001d8b2 <ATAPI::eject()>:
c001d8b2:	57                   	push   edi
c001d8b3:	b9 03 00 00 00       	mov    ecx,0x3
c001d8b8:	53                   	push   ebx
c001d8b9:	83 ec 14             	sub    esp,0x14
c001d8bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8c4:	fc                   	cld    
c001d8c5:	31 c0                	xor    eax,eax
c001d8c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8c9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8ce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8d3:	50                   	push   eax
c001d8d4:	50                   	push   eax
c001d8d5:	6a 00                	push   0x0
c001d8d7:	6a 00                	push   0x0
c001d8d9:	6a 00                	push   0x0
c001d8db:	6a 02                	push   0x2
c001d8dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d8e1:	50                   	push   eax
c001d8e2:	53                   	push   ebx
c001d8e3:	e8 d0 fc ff ff       	call   c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8e8:	83 c4 14             	add    esp,0x14
c001d8eb:	53                   	push   ebx
c001d8ec:	e8 87 ff ff ff       	call   c001d878 <ATAPI::diskRemoved()>
c001d8f1:	83 c4 24             	add    esp,0x24
c001d8f4:	31 c0                	xor    eax,eax
c001d8f6:	5b                   	pop    ebx
c001d8f7:	5f                   	pop    edi
c001d8f8:	c3                   	ret    
c001d8f9:	90                   	nop

c001d8fa <ATAPI::diskInserted()>:
c001d8fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8fe:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d905:	c3                   	ret    

c001d906 <ATAPI::detectMedia()>:
c001d906:	56                   	push   esi
c001d907:	53                   	push   ebx
c001d908:	83 ec 28             	sub    esp,0x28
c001d90b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d90f:	6a 0c                	push   0xc
c001d911:	6a 00                	push   0x0
c001d913:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d917:	56                   	push   esi
c001d918:	e8 d3 2b fe ff       	call   c00004f0 <memset>
c001d91d:	58                   	pop    eax
c001d91e:	5a                   	pop    edx
c001d91f:	6a 00                	push   0x0
c001d921:	6a 00                	push   0x0
c001d923:	6a 00                	push   0x0
c001d925:	6a 00                	push   0x0
c001d927:	56                   	push   esi
c001d928:	53                   	push   ebx
c001d929:	e8 8a fc ff ff       	call   c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d92e:	83 c4 1c             	add    esp,0x1c
c001d931:	6a 0c                	push   0xc
c001d933:	6a 00                	push   0x0
c001d935:	56                   	push   esi
c001d936:	e8 b5 2b fe ff       	call   c00004f0 <memset>
c001d93b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d940:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d945:	59                   	pop    ecx
c001d946:	58                   	pop    eax
c001d947:	6a 01                	push   0x1
c001d949:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d94d:	50                   	push   eax
c001d94e:	6a 00                	push   0x0
c001d950:	6a 12                	push   0x12
c001d952:	56                   	push   esi
c001d953:	53                   	push   ebx
c001d954:	e8 5f fc ff ff       	call   c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d959:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d95d:	83 c4 20             	add    esp,0x20
c001d960:	83 e0 7f             	and    eax,0x7f
c001d963:	83 f8 70             	cmp    eax,0x70
c001d966:	74 15                	je     c001d97d <ATAPI::detectMedia()+0x77>
c001d968:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d96f:	75 0c                	jne    c001d97d <ATAPI::detectMedia()+0x77>
c001d971:	83 ec 0c             	sub    esp,0xc
c001d974:	53                   	push   ebx
c001d975:	e8 80 ff ff ff       	call   c001d8fa <ATAPI::diskInserted()>
c001d97a:	83 c4 10             	add    esp,0x10
c001d97d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d981:	83 e0 0f             	and    eax,0xf
c001d984:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d989:	0f b6 c0             	movzx  eax,al
c001d98c:	75 19                	jne    c001d9a7 <ATAPI::detectMedia()+0xa1>
c001d98e:	83 f8 02             	cmp    eax,0x2
c001d991:	75 14                	jne    c001d9a7 <ATAPI::detectMedia()+0xa1>
c001d993:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d99a:	74 24                	je     c001d9c0 <ATAPI::detectMedia()+0xba>
c001d99c:	83 ec 0c             	sub    esp,0xc
c001d99f:	53                   	push   ebx
c001d9a0:	e8 d3 fe ff ff       	call   c001d878 <ATAPI::diskRemoved()>
c001d9a5:	eb 16                	jmp    c001d9bd <ATAPI::detectMedia()+0xb7>
c001d9a7:	85 c0                	test   eax,eax
c001d9a9:	75 15                	jne    c001d9c0 <ATAPI::detectMedia()+0xba>
c001d9ab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9b2:	75 0c                	jne    c001d9c0 <ATAPI::detectMedia()+0xba>
c001d9b4:	83 ec 0c             	sub    esp,0xc
c001d9b7:	53                   	push   ebx
c001d9b8:	e8 3d ff ff ff       	call   c001d8fa <ATAPI::diskInserted()>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	83 c4 24             	add    esp,0x24
c001d9c3:	5b                   	pop    ebx
c001d9c4:	5e                   	pop    esi
c001d9c5:	c3                   	ret    

c001d9c6 <ATAPI::open(int, int, void*)>:
c001d9c6:	56                   	push   esi
c001d9c7:	53                   	push   ebx
c001d9c8:	50                   	push   eax
c001d9c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9d5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9db:	c1 e0 06             	shl    eax,0x6
c001d9de:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d9e4:	01 d0                	add    eax,edx
c001d9e6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9ed:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9f3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9fa:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da04:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da0b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da11:	6a 04                	push   0x4
c001da13:	6a 0c                	push   0xc
c001da15:	51                   	push   ecx
c001da16:	52                   	push   edx
c001da17:	e8 20 e3 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da1c:	90                   	nop
c001da1d:	90                   	nop
c001da1e:	6a 00                	push   0x0
c001da20:	6a 0c                	push   0xc
c001da22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da29:	50                   	push   eax
c001da2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da30:	e8 07 e3 ff ff       	call   c001bd3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da35:	83 c4 14             	add    esp,0x14
c001da38:	68 78 01 00 00       	push   0x178
c001da3d:	e8 91 a0 fe ff       	call   c0007ad3 <malloc>
c001da42:	83 c4 0c             	add    esp,0xc
c001da45:	6a 00                	push   0x0
c001da47:	68 ff ff ff 7f       	push   0x7fffffff
c001da4c:	6a 00                	push   0x0
c001da4e:	6a 00                	push   0x0
c001da50:	53                   	push   ebx
c001da51:	68 cf 34 02 c0       	push   0xc00234cf
c001da56:	89 c6                	mov    esi,eax
c001da58:	50                   	push   eax
c001da59:	e8 28 01 ff ff       	call   c000db86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da5e:	83 c4 14             	add    esp,0x14
c001da61:	56                   	push   esi
c001da62:	e8 df 01 ff ff       	call   c000dc46 <LogicalDisk::assignDriveLetter()>
c001da67:	5a                   	pop    edx
c001da68:	59                   	pop    ecx
c001da69:	0f be c0             	movsx  eax,al
c001da6c:	50                   	push   eax
c001da6d:	68 20 33 02 c0       	push   0xc0023320
c001da72:	e8 93 ce fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001da77:	58                   	pop    eax
c001da78:	5a                   	pop    edx
c001da79:	56                   	push   esi
c001da7a:	53                   	push   ebx
c001da7b:	e8 58 ef fe ff       	call   c000c9d8 <Device::addChild(Device*)>
c001da80:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da89:	e8 80 f3 fe ff       	call   c000ce0e <PhysicalDisk::startCache()>
c001da8e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da98:	e8 69 fe ff ff       	call   c001d906 <ATAPI::detectMedia()>
c001da9d:	83 c4 14             	add    esp,0x14
c001daa0:	31 c0                	xor    eax,eax
c001daa2:	5b                   	pop    ebx
c001daa3:	5e                   	pop    esi
c001daa4:	c3                   	ret    
c001daa5:	90                   	nop

c001daa6 <ATAPI::read(unsigned long long, int, void*)>:
c001daa6:	55                   	push   ebp
c001daa7:	57                   	push   edi
c001daa8:	56                   	push   esi
c001daa9:	53                   	push   ebx
c001daaa:	83 ec 1c             	sub    esp,0x1c
c001daad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dab1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dab5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dab9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dac0:	74 3c                	je     c001dafe <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dac2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dac6:	b9 03 00 00 00       	mov    ecx,0x3
c001dacb:	fc                   	cld    
c001dacc:	31 c0                	xor    eax,eax
c001dace:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dad0:	89 e8                	mov    eax,ebp
c001dad2:	0f ce                	bswap  esi
c001dad4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dad8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dadd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dae1:	50                   	push   eax
c001dae2:	50                   	push   eax
c001dae3:	55                   	push   ebp
c001dae4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dae8:	c1 e5 0b             	shl    ebp,0xb
c001daeb:	6a 00                	push   0x0
c001daed:	55                   	push   ebp
c001daee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001daf2:	50                   	push   eax
c001daf3:	53                   	push   ebx
c001daf4:	e8 bf fa ff ff       	call   c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001daf9:	83 c4 20             	add    esp,0x20
c001dafc:	eb 1a                	jmp    c001db18 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dafe:	83 ec 0c             	sub    esp,0xc
c001db01:	53                   	push   ebx
c001db02:	e8 ff fd ff ff       	call   c001d906 <ATAPI::detectMedia()>
c001db07:	83 c4 10             	add    esp,0x10
c001db0a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db11:	75 af                	jne    c001dac2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db13:	b8 02 00 00 00       	mov    eax,0x2
c001db18:	83 c4 1c             	add    esp,0x1c
c001db1b:	5b                   	pop    ebx
c001db1c:	5e                   	pop    esi
c001db1d:	5f                   	pop    edi
c001db1e:	5d                   	pop    ebp
c001db1f:	c3                   	ret    

c001db20 <SATA::close(int, int, void*)>:
c001db20:	83 ec 0c             	sub    esp,0xc
c001db23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db27:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db2d:	85 c0                	test   eax,eax
c001db2f:	74 0c                	je     c001db3d <SATA::close(int, int, void*)+0x1d>
c001db31:	8b 10                	mov    edx,DWORD PTR [eax]
c001db33:	83 ec 0c             	sub    esp,0xc
c001db36:	50                   	push   eax
c001db37:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	31 c0                	xor    eax,eax
c001db3f:	83 c4 0c             	add    esp,0xc
c001db42:	c3                   	ret    
c001db43:	90                   	nop

c001db44 <SATA::powerSaving(PowerSavingLevel)>:
c001db44:	c3                   	ret    
c001db45:	90                   	nop

c001db46 <SATA::open(int, int, void*)>:
c001db46:	56                   	push   esi
c001db47:	53                   	push   ebx
c001db48:	50                   	push   eax
c001db49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db51:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db5b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db65:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db6f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db79:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db80:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db86:	e8 57 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db8b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db91:	89 c6                	mov    esi,eax
c001db93:	e8 4a a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db98:	81 c6 00 10 00 00    	add    esi,0x1000
c001db9e:	39 c6                	cmp    esi,eax
c001dba0:	74 10                	je     c001dbb2 <SATA::open(int, int, void*)+0x6c>
c001dba2:	83 ec 0c             	sub    esp,0xc
c001dba5:	68 68 33 02 c0       	push   0xc0023368
c001dbaa:	e8 f0 39 ff ff       	call   c001159f <KePanic(char const*)>
c001dbaf:	83 c4 10             	add    esp,0x10
c001dbb2:	83 ec 0c             	sub    esp,0xc
c001dbb5:	6a 02                	push   0x2
c001dbb7:	e8 39 ba fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001dbbc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbc2:	6a 03                	push   0x3
c001dbc4:	50                   	push   eax
c001dbc5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dbcb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dbd1:	e8 28 c1 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbd6:	83 c4 14             	add    esp,0x14
c001dbd9:	53                   	push   ebx
c001dbda:	e8 2f f2 fe ff       	call   c000ce0e <PhysicalDisk::startCache()>
c001dbdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbe2:	e8 73 04 ff ff       	call   c000e05a <createPartitionsForDisk(PhysicalDisk*)>
c001dbe7:	83 c4 14             	add    esp,0x14
c001dbea:	31 c0                	xor    eax,eax
c001dbec:	5b                   	pop    ebx
c001dbed:	5e                   	pop    esi
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <SATA::SATA()>:
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf7:	83 ec 04             	sub    esp,0x4
c001dbfa:	68 00 02 00 00       	push   0x200
c001dbff:	68 7c 33 02 c0       	push   0xc002337c
c001dc04:	50                   	push   eax
c001dc05:	e8 9c f1 fe ff       	call   c000cda6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc0a:	83 c4 10             	add    esp,0x10
c001dc0d:	ba ec 33 02 c0       	mov    edx,0xc00233ec
c001dc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc16:	89 10                	mov    DWORD PTR [eax],edx
c001dc18:	90                   	nop
c001dc19:	83 c4 0c             	add    esp,0xc
c001dc1c:	c3                   	ret    
c001dc1d:	90                   	nop

c001dc1e <SATA::access(unsigned long long, int, void*, bool)>:
c001dc1e:	55                   	push   ebp
c001dc1f:	57                   	push   edi
c001dc20:	56                   	push   esi
c001dc21:	53                   	push   ebx
c001dc22:	83 ec 2c             	sub    esp,0x2c
c001dc25:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc29:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc2e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc3e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc46:	7e 10                	jle    c001dc58 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	68 8c 33 02 c0       	push   0xc002338c
c001dc50:	e8 4a 39 ff ff       	call   c001159f <KePanic(char const*)>
c001dc55:	83 c4 10             	add    esp,0x10
c001dc58:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc5e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dc64:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dc6a:	89 e8                	mov    eax,ebp
c001dc6c:	c1 e0 07             	shl    eax,0x7
c001dc6f:	01 d0                	add    eax,edx
c001dc71:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc7b:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc7e:	51                   	push   ecx
c001dc7f:	c1 e0 07             	shl    eax,0x7
c001dc82:	51                   	push   ecx
c001dc83:	01 d0                	add    eax,edx
c001dc85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dc89:	50                   	push   eax
c001dc8a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc90:	e8 6b ec ff ff       	call   c001c900 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc99:	83 c4 10             	add    esp,0x10
c001dc9c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dca1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dca5:	0f 84 5b 01 00 00    	je     c001de06 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dcab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dcaf:	c1 e0 09             	shl    eax,0x9
c001dcb2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dcbb:	74 0e                	je     c001dccb <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dcbd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dcc3:	89 c1                	mov    ecx,eax
c001dcc5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dcc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dccb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dccf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dcd5:	8d 45 02             	lea    eax,[ebp+0x2]
c001dcd8:	c1 e0 07             	shl    eax,0x7
c001dcdb:	01 d0                	add    eax,edx
c001dcdd:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcdf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dce5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dceb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcef:	c1 e1 05             	shl    ecx,0x5
c001dcf2:	01 c8                	add    eax,ecx
c001dcf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcf8:	83 e1 01             	and    ecx,0x1
c001dcfb:	89 ce                	mov    esi,ecx
c001dcfd:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcff:	c1 e6 06             	shl    esi,0x6
c001dd02:	83 e1 bf             	and    ecx,0xffffffbf
c001dd05:	09 f1                	or     ecx,esi
c001dd07:	88 08                	mov    BYTE PTR [eax],cl
c001dd09:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd0b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd11:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd17:	89 08                	mov    DWORD PTR [eax],ecx
c001dd19:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd1f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd25:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd2b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd2e:	50                   	push   eax
c001dd2f:	68 90 00 00 00       	push   0x90
c001dd34:	6a 00                	push   0x0
c001dd36:	56                   	push   esi
c001dd37:	e8 b4 27 fe ff       	call   c00004f0 <memset>
c001dd3c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd42:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	48                   	dec    eax
c001dd50:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd55:	89 c1                	mov    ecx,eax
c001dd57:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd5d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd62:	09 c8                	or     eax,ecx
c001dd64:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd6a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd70:	83 c8 80             	or     eax,0xffffff80
c001dd73:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd79:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd80:	25 00 7f 00 00       	and    eax,0x7f00
c001dd85:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd8a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd8f:	66 89 06             	mov    WORD PTR [esi],ax
c001dd92:	b0 35                	mov    al,0x35
c001dd94:	75 02                	jne    c001dd98 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001dd96:	b0 25                	mov    al,0x25
c001dd98:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd9f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dda3:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dda7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddab:	c1 e8 10             	shr    eax,0x10
c001ddae:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ddb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddb5:	c1 e8 18             	shr    eax,0x18
c001ddb8:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ddbb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ddbf:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ddc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddc6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ddc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddcd:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ddd1:	89 ee                	mov    esi,ebp
c001ddd3:	31 c0                	xor    eax,eax
c001ddd5:	c1 e6 07             	shl    esi,0x7
c001ddd8:	01 d6                	add    esi,edx
c001ddda:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dde0:	80 e1 88             	and    cl,0x88
c001dde3:	74 0a                	je     c001ddef <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dde5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddea:	74 0a                	je     c001ddf6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ddec:	40                   	inc    eax
c001dded:	eb eb                	jmp    c001ddda <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ddef:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddf4:	75 17                	jne    c001de0d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ddf6:	83 ec 0c             	sub    esp,0xc
c001ddf9:	68 c5 33 02 c0       	push   0xc00233c5
c001ddfe:	e8 07 cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001de03:	83 c4 10             	add    esp,0x10
c001de06:	b8 01 00 00 00       	mov    eax,0x1
c001de0b:	eb 5b                	jmp    c001de68 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de0d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001de11:	c1 e5 07             	shl    ebp,0x7
c001de14:	b8 01 00 00 00       	mov    eax,0x1
c001de19:	01 ea                	add    edx,ebp
c001de1b:	d3 e0                	shl    eax,cl
c001de1d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de23:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de29:	85 c8                	test   eax,ecx
c001de2b:	74 16                	je     c001de43 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001de2d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de33:	0f ba e1 1e          	bt     ecx,0x1e
c001de37:	73 ea                	jae    c001de23 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001de39:	83 ec 0c             	sub    esp,0xc
c001de3c:	68 d3 33 02 c0       	push   0xc00233d3
c001de41:	eb bb                	jmp    c001ddfe <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de43:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de49:	0f ba e0 1e          	bt     eax,0x1e
c001de4d:	72 b7                	jb     c001de06 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de4f:	31 c0                	xor    eax,eax
c001de51:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001de56:	75 10                	jne    c001de68 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001de58:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de5e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de68:	83 c4 2c             	add    esp,0x2c
c001de6b:	5b                   	pop    ebx
c001de6c:	5e                   	pop    esi
c001de6d:	5f                   	pop    edi
c001de6e:	5d                   	pop    ebp
c001de6f:	c3                   	ret    

c001de70 <SATA::read(unsigned long long, int, void*)>:
c001de70:	55                   	push   ebp
c001de71:	57                   	push   edi
c001de72:	56                   	push   esi
c001de73:	be 04 00 00 00       	mov    esi,0x4
c001de78:	53                   	push   ebx
c001de79:	83 ec 0c             	sub    esp,0xc
c001de7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de88:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de8c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de8f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de95:	0f 87 1a 02 00 00    	ja     c001e0b5 <SATA::read(unsigned long long, int, void*)+0x245>
c001de9b:	85 c9                	test   ecx,ecx
c001de9d:	be 06 00 00 00       	mov    esi,0x6
c001dea2:	0f 84 0d 02 00 00    	je     c001e0b5 <SATA::read(unsigned long long, int, void*)+0x245>
c001dea8:	56                   	push   esi
c001dea9:	56                   	push   esi
c001deaa:	6a 00                	push   0x0
c001deac:	51                   	push   ecx
c001dead:	53                   	push   ebx
c001deae:	52                   	push   edx
c001deaf:	50                   	push   eax
c001deb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001deb4:	e8 65 fd ff ff       	call   c001dc1e <SATA::access(unsigned long long, int, void*, bool)>
c001deb9:	83 c4 20             	add    esp,0x20
c001debc:	85 c0                	test   eax,eax
c001debe:	89 c6                	mov    esi,eax
c001dec0:	0f 85 ea 01 00 00    	jne    c001e0b0 <SATA::read(unsigned long long, int, void*)+0x240>
c001dec6:	50                   	push   eax
c001dec7:	50                   	push   eax
c001dec8:	6a 0f                	push   0xf
c001deca:	6a 00                	push   0x0
c001decc:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001ded2:	bb 0a 00 00 00       	mov    ebx,0xa
c001ded7:	e8 7d f2 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001dedc:	5a                   	pop    edx
c001dedd:	59                   	pop    ecx
c001dede:	b9 10 27 00 00       	mov    ecx,0x2710
c001dee3:	0f b6 c0             	movzx  eax,al
c001dee6:	50                   	push   eax
c001dee7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001deec:	99                   	cdq    
c001deed:	f7 f9                	idiv   ecx
c001deef:	99                   	cdq    
c001def0:	f7 fb                	idiv   ebx
c001def2:	8d 42 30             	lea    eax,[edx+0x30]
c001def5:	0f b6 c0             	movzx  eax,al
c001def8:	50                   	push   eax
c001def9:	e8 4a f2 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001defe:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df04:	5f                   	pop    edi
c001df05:	5d                   	pop    ebp
c001df06:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df0b:	6a 0f                	push   0xf
c001df0d:	6a 00                	push   0x0
c001df0f:	e8 45 f2 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001df14:	5a                   	pop    edx
c001df15:	59                   	pop    ecx
c001df16:	0f b6 c0             	movzx  eax,al
c001df19:	50                   	push   eax
c001df1a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df1f:	99                   	cdq    
c001df20:	f7 fd                	idiv   ebp
c001df22:	99                   	cdq    
c001df23:	f7 fb                	idiv   ebx
c001df25:	8d 42 30             	lea    eax,[edx+0x30]
c001df28:	0f b6 c0             	movzx  eax,al
c001df2b:	50                   	push   eax
c001df2c:	e8 17 f2 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001df31:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df37:	5f                   	pop    edi
c001df38:	bf 64 00 00 00       	mov    edi,0x64
c001df3d:	58                   	pop    eax
c001df3e:	6a 0f                	push   0xf
c001df40:	6a 00                	push   0x0
c001df42:	e8 12 f2 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001df47:	5a                   	pop    edx
c001df48:	59                   	pop    ecx
c001df49:	0f b6 c0             	movzx  eax,al
c001df4c:	50                   	push   eax
c001df4d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df52:	99                   	cdq    
c001df53:	f7 ff                	idiv   edi
c001df55:	99                   	cdq    
c001df56:	f7 fb                	idiv   ebx
c001df58:	8d 42 30             	lea    eax,[edx+0x30]
c001df5b:	0f b6 c0             	movzx  eax,al
c001df5e:	50                   	push   eax
c001df5f:	e8 e4 f1 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001df64:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df6a:	58                   	pop    eax
c001df6b:	5a                   	pop    edx
c001df6c:	6a 0f                	push   0xf
c001df6e:	6a 00                	push   0x0
c001df70:	e8 e4 f1 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001df75:	59                   	pop    ecx
c001df76:	5a                   	pop    edx
c001df77:	0f b6 c0             	movzx  eax,al
c001df7a:	50                   	push   eax
c001df7b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df80:	99                   	cdq    
c001df81:	f7 fb                	idiv   ebx
c001df83:	99                   	cdq    
c001df84:	f7 fb                	idiv   ebx
c001df86:	8d 42 30             	lea    eax,[edx+0x30]
c001df89:	0f b6 c0             	movzx  eax,al
c001df8c:	50                   	push   eax
c001df8d:	e8 b6 f1 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001df92:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df98:	59                   	pop    ecx
c001df99:	58                   	pop    eax
c001df9a:	6a 0f                	push   0xf
c001df9c:	6a 00                	push   0x0
c001df9e:	e8 b6 f1 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001dfa3:	5a                   	pop    edx
c001dfa4:	59                   	pop    ecx
c001dfa5:	0f b6 c0             	movzx  eax,al
c001dfa8:	50                   	push   eax
c001dfa9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfae:	99                   	cdq    
c001dfaf:	f7 fb                	idiv   ebx
c001dfb1:	83 c2 30             	add    edx,0x30
c001dfb4:	0f b6 d2             	movzx  edx,dl
c001dfb7:	52                   	push   edx
c001dfb8:	e8 8b f1 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001dfbd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dfc3:	58                   	pop    eax
c001dfc4:	5a                   	pop    edx
c001dfc5:	6a 0f                	push   0xf
c001dfc7:	6a 00                	push   0x0
c001dfc9:	e8 8b f1 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001dfce:	59                   	pop    ecx
c001dfcf:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfd4:	5a                   	pop    edx
c001dfd5:	0f b6 c0             	movzx  eax,al
c001dfd8:	50                   	push   eax
c001dfd9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfde:	99                   	cdq    
c001dfdf:	f7 f9                	idiv   ecx
c001dfe1:	99                   	cdq    
c001dfe2:	f7 fb                	idiv   ebx
c001dfe4:	8d 42 30             	lea    eax,[edx+0x30]
c001dfe7:	0f b6 c0             	movzx  eax,al
c001dfea:	50                   	push   eax
c001dfeb:	e8 58 f1 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001dff0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dff6:	59                   	pop    ecx
c001dff7:	58                   	pop    eax
c001dff8:	6a 0f                	push   0xf
c001dffa:	6a 00                	push   0x0
c001dffc:	e8 58 f1 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e001:	5a                   	pop    edx
c001e002:	59                   	pop    ecx
c001e003:	0f b6 c0             	movzx  eax,al
c001e006:	50                   	push   eax
c001e007:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e00c:	99                   	cdq    
c001e00d:	f7 fd                	idiv   ebp
c001e00f:	99                   	cdq    
c001e010:	f7 fb                	idiv   ebx
c001e012:	8d 42 30             	lea    eax,[edx+0x30]
c001e015:	0f b6 c0             	movzx  eax,al
c001e018:	50                   	push   eax
c001e019:	e8 2a f1 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e01e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e024:	5d                   	pop    ebp
c001e025:	58                   	pop    eax
c001e026:	6a 0f                	push   0xf
c001e028:	6a 00                	push   0x0
c001e02a:	e8 2a f1 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e02f:	5a                   	pop    edx
c001e030:	59                   	pop    ecx
c001e031:	0f b6 c0             	movzx  eax,al
c001e034:	50                   	push   eax
c001e035:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e03a:	99                   	cdq    
c001e03b:	f7 ff                	idiv   edi
c001e03d:	99                   	cdq    
c001e03e:	f7 fb                	idiv   ebx
c001e040:	8d 42 30             	lea    eax,[edx+0x30]
c001e043:	0f b6 c0             	movzx  eax,al
c001e046:	50                   	push   eax
c001e047:	e8 fc f0 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e04c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e052:	5f                   	pop    edi
c001e053:	5d                   	pop    ebp
c001e054:	6a 0f                	push   0xf
c001e056:	6a 00                	push   0x0
c001e058:	e8 fc f0 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e05d:	5a                   	pop    edx
c001e05e:	59                   	pop    ecx
c001e05f:	0f b6 c0             	movzx  eax,al
c001e062:	50                   	push   eax
c001e063:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e068:	99                   	cdq    
c001e069:	f7 fb                	idiv   ebx
c001e06b:	99                   	cdq    
c001e06c:	f7 fb                	idiv   ebx
c001e06e:	8d 42 30             	lea    eax,[edx+0x30]
c001e071:	0f b6 c0             	movzx  eax,al
c001e074:	50                   	push   eax
c001e075:	e8 ce f0 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e07a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e080:	5f                   	pop    edi
c001e081:	5d                   	pop    ebp
c001e082:	6a 0f                	push   0xf
c001e084:	6a 00                	push   0x0
c001e086:	e8 ce f0 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e08b:	5a                   	pop    edx
c001e08c:	59                   	pop    ecx
c001e08d:	0f b6 c0             	movzx  eax,al
c001e090:	50                   	push   eax
c001e091:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e096:	99                   	cdq    
c001e097:	f7 fb                	idiv   ebx
c001e099:	83 c2 30             	add    edx,0x30
c001e09c:	0f b6 d2             	movzx  edx,dl
c001e09f:	52                   	push   edx
c001e0a0:	e8 a3 f0 ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e0a5:	83 c4 10             	add    esp,0x10
c001e0a8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e0ae:	eb 05                	jmp    c001e0b5 <SATA::read(unsigned long long, int, void*)+0x245>
c001e0b0:	be 01 00 00 00       	mov    esi,0x1
c001e0b5:	83 c4 0c             	add    esp,0xc
c001e0b8:	89 f0                	mov    eax,esi
c001e0ba:	5b                   	pop    ebx
c001e0bb:	5e                   	pop    esi
c001e0bc:	5f                   	pop    edi
c001e0bd:	5d                   	pop    ebp
c001e0be:	c3                   	ret    
c001e0bf:	90                   	nop

c001e0c0 <SATA::write(unsigned long long, int, void*)>:
c001e0c0:	55                   	push   ebp
c001e0c1:	57                   	push   edi
c001e0c2:	56                   	push   esi
c001e0c3:	53                   	push   ebx
c001e0c4:	83 ec 0c             	sub    esp,0xc
c001e0c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e0cf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e0d7:	8d 70 ff             	lea    esi,[eax-0x1]
c001e0da:	b8 04 00 00 00       	mov    eax,0x4
c001e0df:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e0e5:	0f 87 2c 02 00 00    	ja     c001e317 <SATA::write(unsigned long long, int, void*)+0x257>
c001e0eb:	85 db                	test   ebx,ebx
c001e0ed:	b8 06 00 00 00       	mov    eax,0x6
c001e0f2:	0f 84 1f 02 00 00    	je     c001e317 <SATA::write(unsigned long long, int, void*)+0x257>
c001e0f8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e0fc:	c1 e6 09             	shl    esi,0x9
c001e0ff:	01 de                	add    esi,ebx
c001e101:	50                   	push   eax
c001e102:	89 d7                	mov    edi,edx
c001e104:	50                   	push   eax
c001e105:	83 c7 01             	add    edi,0x1
c001e108:	6a 01                	push   0x1
c001e10a:	89 cd                	mov    ebp,ecx
c001e10c:	53                   	push   ebx
c001e10d:	83 d5 00             	adc    ebp,0x0
c001e110:	6a 01                	push   0x1
c001e112:	81 c3 00 02 00 00    	add    ebx,0x200
c001e118:	51                   	push   ecx
c001e119:	52                   	push   edx
c001e11a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e11e:	e8 fb fa ff ff       	call   c001dc1e <SATA::access(unsigned long long, int, void*, bool)>
c001e123:	83 c4 20             	add    esp,0x20
c001e126:	39 f3                	cmp    ebx,esi
c001e128:	89 fa                	mov    edx,edi
c001e12a:	89 e9                	mov    ecx,ebp
c001e12c:	75 d3                	jne    c001e101 <SATA::write(unsigned long long, int, void*)+0x41>
c001e12e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e132:	bd 10 27 00 00       	mov    ebp,0x2710
c001e137:	bb 0a 00 00 00       	mov    ebx,0xa
c001e13c:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e142:	50                   	push   eax
c001e143:	50                   	push   eax
c001e144:	6a 0f                	push   0xf
c001e146:	6a 00                	push   0x0
c001e148:	e8 0c f0 ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e14d:	5a                   	pop    edx
c001e14e:	59                   	pop    ecx
c001e14f:	0f b6 c0             	movzx  eax,al
c001e152:	50                   	push   eax
c001e153:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e158:	99                   	cdq    
c001e159:	f7 fd                	idiv   ebp
c001e15b:	99                   	cdq    
c001e15c:	f7 fb                	idiv   ebx
c001e15e:	8d 42 30             	lea    eax,[edx+0x30]
c001e161:	0f b6 c0             	movzx  eax,al
c001e164:	50                   	push   eax
c001e165:	e8 de ef ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e16a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e170:	5e                   	pop    esi
c001e171:	5f                   	pop    edi
c001e172:	bf e8 03 00 00       	mov    edi,0x3e8
c001e177:	6a 0f                	push   0xf
c001e179:	6a 00                	push   0x0
c001e17b:	e8 d9 ef ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e180:	5a                   	pop    edx
c001e181:	59                   	pop    ecx
c001e182:	0f b6 c0             	movzx  eax,al
c001e185:	50                   	push   eax
c001e186:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e18b:	99                   	cdq    
c001e18c:	f7 ff                	idiv   edi
c001e18e:	99                   	cdq    
c001e18f:	f7 fb                	idiv   ebx
c001e191:	8d 42 30             	lea    eax,[edx+0x30]
c001e194:	0f b6 c0             	movzx  eax,al
c001e197:	50                   	push   eax
c001e198:	e8 ab ef ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e19d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e1a3:	5e                   	pop    esi
c001e1a4:	be 64 00 00 00       	mov    esi,0x64
c001e1a9:	58                   	pop    eax
c001e1aa:	6a 0f                	push   0xf
c001e1ac:	6a 00                	push   0x0
c001e1ae:	e8 a6 ef ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e1b3:	5a                   	pop    edx
c001e1b4:	59                   	pop    ecx
c001e1b5:	0f b6 c0             	movzx  eax,al
c001e1b8:	50                   	push   eax
c001e1b9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1be:	99                   	cdq    
c001e1bf:	f7 fe                	idiv   esi
c001e1c1:	99                   	cdq    
c001e1c2:	f7 fb                	idiv   ebx
c001e1c4:	8d 42 30             	lea    eax,[edx+0x30]
c001e1c7:	0f b6 c0             	movzx  eax,al
c001e1ca:	50                   	push   eax
c001e1cb:	e8 78 ef ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e1d0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e1d6:	58                   	pop    eax
c001e1d7:	5a                   	pop    edx
c001e1d8:	6a 0f                	push   0xf
c001e1da:	6a 00                	push   0x0
c001e1dc:	e8 78 ef ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e1e1:	59                   	pop    ecx
c001e1e2:	5a                   	pop    edx
c001e1e3:	0f b6 c0             	movzx  eax,al
c001e1e6:	50                   	push   eax
c001e1e7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ec:	99                   	cdq    
c001e1ed:	f7 fb                	idiv   ebx
c001e1ef:	99                   	cdq    
c001e1f0:	f7 fb                	idiv   ebx
c001e1f2:	8d 42 30             	lea    eax,[edx+0x30]
c001e1f5:	0f b6 c0             	movzx  eax,al
c001e1f8:	50                   	push   eax
c001e1f9:	e8 4a ef ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e1fe:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e204:	59                   	pop    ecx
c001e205:	58                   	pop    eax
c001e206:	6a 0f                	push   0xf
c001e208:	6a 00                	push   0x0
c001e20a:	e8 4a ef ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e20f:	5a                   	pop    edx
c001e210:	59                   	pop    ecx
c001e211:	0f b6 c0             	movzx  eax,al
c001e214:	50                   	push   eax
c001e215:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e21a:	99                   	cdq    
c001e21b:	f7 fb                	idiv   ebx
c001e21d:	83 c2 30             	add    edx,0x30
c001e220:	0f b6 d2             	movzx  edx,dl
c001e223:	52                   	push   edx
c001e224:	e8 1f ef ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e229:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e22f:	58                   	pop    eax
c001e230:	5a                   	pop    edx
c001e231:	6a 0f                	push   0xf
c001e233:	6a 00                	push   0x0
c001e235:	e8 1f ef ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e23a:	59                   	pop    ecx
c001e23b:	5a                   	pop    edx
c001e23c:	0f b6 c0             	movzx  eax,al
c001e23f:	50                   	push   eax
c001e240:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e245:	99                   	cdq    
c001e246:	f7 fd                	idiv   ebp
c001e248:	99                   	cdq    
c001e249:	f7 fb                	idiv   ebx
c001e24b:	8d 42 30             	lea    eax,[edx+0x30]
c001e24e:	0f b6 c0             	movzx  eax,al
c001e251:	50                   	push   eax
c001e252:	e8 f1 ee ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e257:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e25d:	59                   	pop    ecx
c001e25e:	5d                   	pop    ebp
c001e25f:	6a 0f                	push   0xf
c001e261:	6a 00                	push   0x0
c001e263:	e8 f1 ee ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e268:	5a                   	pop    edx
c001e269:	59                   	pop    ecx
c001e26a:	0f b6 c0             	movzx  eax,al
c001e26d:	50                   	push   eax
c001e26e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e273:	99                   	cdq    
c001e274:	f7 ff                	idiv   edi
c001e276:	99                   	cdq    
c001e277:	f7 fb                	idiv   ebx
c001e279:	8d 42 30             	lea    eax,[edx+0x30]
c001e27c:	0f b6 c0             	movzx  eax,al
c001e27f:	50                   	push   eax
c001e280:	e8 c3 ee ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e285:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e28b:	5f                   	pop    edi
c001e28c:	5d                   	pop    ebp
c001e28d:	6a 0f                	push   0xf
c001e28f:	6a 00                	push   0x0
c001e291:	e8 c3 ee ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e296:	5a                   	pop    edx
c001e297:	59                   	pop    ecx
c001e298:	0f b6 c0             	movzx  eax,al
c001e29b:	50                   	push   eax
c001e29c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2a1:	99                   	cdq    
c001e2a2:	f7 fe                	idiv   esi
c001e2a4:	99                   	cdq    
c001e2a5:	f7 fb                	idiv   ebx
c001e2a7:	8d 42 30             	lea    eax,[edx+0x30]
c001e2aa:	0f b6 c0             	movzx  eax,al
c001e2ad:	50                   	push   eax
c001e2ae:	e8 95 ee ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e2b3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e2b9:	5e                   	pop    esi
c001e2ba:	5f                   	pop    edi
c001e2bb:	6a 0f                	push   0xf
c001e2bd:	6a 00                	push   0x0
c001e2bf:	e8 95 ee ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e2c4:	5d                   	pop    ebp
c001e2c5:	5a                   	pop    edx
c001e2c6:	0f b6 c0             	movzx  eax,al
c001e2c9:	50                   	push   eax
c001e2ca:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2cf:	99                   	cdq    
c001e2d0:	f7 fb                	idiv   ebx
c001e2d2:	99                   	cdq    
c001e2d3:	f7 fb                	idiv   ebx
c001e2d5:	8d 42 30             	lea    eax,[edx+0x30]
c001e2d8:	0f b6 c0             	movzx  eax,al
c001e2db:	50                   	push   eax
c001e2dc:	e8 67 ee ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e2e1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e2e7:	59                   	pop    ecx
c001e2e8:	5e                   	pop    esi
c001e2e9:	6a 0f                	push   0xf
c001e2eb:	6a 00                	push   0x0
c001e2ed:	e8 67 ee ff ff       	call   c001d159 <combineColours(unsigned char, unsigned char)>
c001e2f2:	5f                   	pop    edi
c001e2f3:	5d                   	pop    ebp
c001e2f4:	0f b6 c0             	movzx  eax,al
c001e2f7:	50                   	push   eax
c001e2f8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2fd:	99                   	cdq    
c001e2fe:	f7 fb                	idiv   ebx
c001e300:	83 c2 30             	add    edx,0x30
c001e303:	0f b6 d2             	movzx  edx,dl
c001e306:	52                   	push   edx
c001e307:	e8 3c ee ff ff       	call   c001d148 <combineCharAndColour(char, unsigned char)>
c001e30c:	83 c4 10             	add    esp,0x10
c001e30f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e315:	31 c0                	xor    eax,eax
c001e317:	83 c4 0c             	add    esp,0xc
c001e31a:	5b                   	pop    ebx
c001e31b:	5e                   	pop    esi
c001e31c:	5f                   	pop    edi
c001e31d:	5d                   	pop    ebp
c001e31e:	c3                   	ret    
c001e31f:	90                   	nop

c001e320 <SATAPI::write(unsigned long long, int, void*)>:
c001e320:	b8 03 00 00 00       	mov    eax,0x3
c001e325:	c3                   	ret    

c001e326 <SATAPI::close(int, int, void*)>:
c001e326:	83 ec 0c             	sub    esp,0xc
c001e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e333:	85 c0                	test   eax,eax
c001e335:	74 0c                	je     c001e343 <SATAPI::close(int, int, void*)+0x1d>
c001e337:	8b 10                	mov    edx,DWORD PTR [eax]
c001e339:	83 ec 0c             	sub    esp,0xc
c001e33c:	50                   	push   eax
c001e33d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e340:	83 c4 10             	add    esp,0x10
c001e343:	31 c0                	xor    eax,eax
c001e345:	83 c4 0c             	add    esp,0xc
c001e348:	c3                   	ret    
c001e349:	90                   	nop

c001e34a <SATAPI::SATAPI()>:
c001e34a:	83 ec 0c             	sub    esp,0xc
c001e34d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e351:	83 ec 04             	sub    esp,0x4
c001e354:	68 00 08 00 00       	push   0x800
c001e359:	68 1c 34 02 c0       	push   0xc002341c
c001e35e:	50                   	push   eax
c001e35f:	e8 42 ea fe ff       	call   c000cda6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e364:	83 c4 10             	add    esp,0x10
c001e367:	ba 10 35 02 c0       	mov    edx,0xc0023510
c001e36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e370:	89 10                	mov    DWORD PTR [eax],edx
c001e372:	90                   	nop
c001e373:	83 c4 0c             	add    esp,0xc
c001e376:	c3                   	ret    
c001e377:	90                   	nop

c001e378 <SATAPI::diskRemoved()>:
c001e378:	c3                   	ret    
c001e379:	90                   	nop

c001e37a <SATAPI::diskInserted()>:
c001e37a:	83 ec 18             	sub    esp,0x18
c001e37d:	68 28 34 02 c0       	push   0xc0023428
c001e382:	e8 83 c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e38b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e392:	83 c4 1c             	add    esp,0x1c
c001e395:	c3                   	ret    

c001e396 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e396:	55                   	push   ebp
c001e397:	57                   	push   edi
c001e398:	56                   	push   esi
c001e399:	53                   	push   ebx
c001e39a:	83 ec 34             	sub    esp,0x34
c001e39d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3a1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e3a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e3a9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e3ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3b1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e3b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e3c1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e3c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3cb:	83 c0 02             	add    eax,0x2
c001e3ce:	c1 e0 07             	shl    eax,0x7
c001e3d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3dd:	c1 e0 07             	shl    eax,0x7
c001e3e0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3e8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3f6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3fc:	e8 ff e4 ff ff       	call   c001c900 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e401:	83 c4 10             	add    esp,0x10
c001e404:	89 c2                	mov    edx,eax
c001e406:	b8 01 00 00 00       	mov    eax,0x1
c001e40b:	83 fa ff             	cmp    edx,0xffffffff
c001e40e:	0f 84 5f 02 00 00    	je     c001e673 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e414:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e41c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e422:	8b 00                	mov    eax,DWORD PTR [eax]
c001e424:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e42a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e430:	89 d1                	mov    ecx,edx
c001e432:	c1 e1 05             	shl    ecx,0x5
c001e435:	01 c8                	add    eax,ecx
c001e437:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e439:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e43f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e445:	89 08                	mov    DWORD PTR [eax],ecx
c001e447:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e44d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e453:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e459:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e45c:	50                   	push   eax
c001e45d:	68 90 00 00 00       	push   0x90
c001e462:	6a 00                	push   0x0
c001e464:	53                   	push   ebx
c001e465:	e8 86 20 fe ff       	call   c00004f0 <memset>
c001e46a:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e46d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e472:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e476:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e478:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e47e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e482:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e486:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e48c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e490:	48                   	dec    eax
c001e491:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e496:	89 c1                	mov    ecx,eax
c001e498:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e49e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4a3:	09 c8                	or     eax,ecx
c001e4a5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e4ab:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e4b1:	83 c8 80             	or     eax,0xffffff80
c001e4b4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e4ba:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e4bd:	25 00 7f 00 00       	and    eax,0x7f00
c001e4c2:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4c7:	66 89 03             	mov    WORD PTR [ebx],ax
c001e4ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4ce:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e4d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4d6:	c1 e8 10             	shr    eax,0x10
c001e4d9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e4dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4e0:	c1 e8 18             	shr    eax,0x18
c001e4e3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e4e6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e4ea:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e4ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4f1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4f4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4f8:	83 c4 10             	add    esp,0x10
c001e4fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4ff:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e503:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e507:	31 c0                	xor    eax,eax
c001e509:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e50f:	80 e1 88             	and    cl,0x88
c001e512:	74 0a                	je     c001e51e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e514:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e519:	74 0a                	je     c001e525 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e51b:	40                   	inc    eax
c001e51c:	eb eb                	jmp    c001e509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e51e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e523:	75 43                	jne    c001e568 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e525:	83 ec 0c             	sub    esp,0xc
c001e528:	68 40 34 02 c0       	push   0xc0023440
c001e52d:	e8 d8 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e532:	58                   	pop    eax
c001e533:	5a                   	pop    edx
c001e534:	68 55 34 02 c0       	push   0xc0023455
c001e539:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e53f:	e8 68 a5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e544:	59                   	pop    ecx
c001e545:	5b                   	pop    ebx
c001e546:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e54a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e550:	e8 45 e4 ff ff       	call   c001c99a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e555:	5e                   	pop    esi
c001e556:	5f                   	pop    edi
c001e557:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e55b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e561:	e8 14 e4 ff ff       	call   c001c97a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e566:	eb 48                	jmp    c001e5b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e568:	b8 01 00 00 00       	mov    eax,0x1
c001e56d:	88 d1                	mov    cl,dl
c001e56f:	d3 e0                	shl    eax,cl
c001e571:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e576:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e57c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e580:	89 c7                	mov    edi,eax
c001e582:	c1 e3 07             	shl    ebx,0x7
c001e585:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e589:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e58f:	85 c7                	test   edi,eax
c001e591:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e597:	0f 84 a3 00 00 00    	je     c001e640 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e59d:	0f ba e0 1e          	bt     eax,0x1e
c001e5a1:	73 1a                	jae    c001e5bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e5a3:	83 ec 0c             	sub    esp,0xc
c001e5a6:	68 67 34 02 c0       	push   0xc0023467
c001e5ab:	e8 5a c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e5b0:	83 c4 10             	add    esp,0x10
c001e5b3:	b8 01 00 00 00       	mov    eax,0x1
c001e5b8:	e9 b6 00 00 00       	jmp    c001e673 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e5bd:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e5c3:	83 f8 0d             	cmp    eax,0xd
c001e5c6:	77 0a                	ja     c001e5d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e5c8:	83 ec 0c             	sub    esp,0xc
c001e5cb:	68 c8 00 00 00       	push   0xc8
c001e5d0:	eb 28                	jmp    c001e5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5d2:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e5d8:	83 f8 0d             	cmp    eax,0xd
c001e5db:	77 0a                	ja     c001e5e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e5dd:	83 ec 0c             	sub    esp,0xc
c001e5e0:	68 58 02 00 00       	push   0x258
c001e5e5:	eb 13                	jmp    c001e5fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5e7:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e5ed:	83 f8 06             	cmp    eax,0x6
c001e5f0:	77 10                	ja     c001e602 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e5f2:	83 ec 0c             	sub    esp,0xc
c001e5f5:	68 dc 05 00 00       	push   0x5dc
c001e5fa:	e8 69 7d ff ff       	call   c0016368 <milliTenthSleep(unsigned int)>
c001e5ff:	83 c4 10             	add    esp,0x10
c001e602:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e606:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e609:	75 06                	jne    c001e611 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e60b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e60f:	74 15                	je     c001e626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e611:	83 fe 06             	cmp    esi,0x6
c001e614:	77 10                	ja     c001e626 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e616:	83 ec 0c             	sub    esp,0xc
c001e619:	68 c4 09 00 00       	push   0x9c4
c001e61e:	e8 45 7d ff ff       	call   c0016368 <milliTenthSleep(unsigned int)>
c001e623:	83 c4 10             	add    esp,0x10
c001e626:	46                   	inc    esi
c001e627:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e62d:	0f 85 56 ff ff ff    	jne    c001e589 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e633:	83 ec 0c             	sub    esp,0xc
c001e636:	68 7a 34 02 c0       	push   0xc002347a
c001e63b:	e9 6b ff ff ff       	jmp    c001e5ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e640:	0f ba e0 1e          	bt     eax,0x1e
c001e644:	73 0d                	jae    c001e653 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e646:	83 ec 0c             	sub    esp,0xc
c001e649:	68 8e 34 02 c0       	push   0xc002348e
c001e64e:	e9 58 ff ff ff       	jmp    c001e5ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e653:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e658:	74 17                	je     c001e671 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e65a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e65f:	74 10                	je     c001e671 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e661:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e667:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e66b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e66f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e671:	31 c0                	xor    eax,eax
c001e673:	83 c4 2c             	add    esp,0x2c
c001e676:	5b                   	pop    ebx
c001e677:	5e                   	pop    esi
c001e678:	5f                   	pop    edi
c001e679:	5d                   	pop    ebp
c001e67a:	c3                   	ret    
c001e67b:	90                   	nop

c001e67c <SATAPI::eject()>:
c001e67c:	57                   	push   edi
c001e67d:	b9 03 00 00 00       	mov    ecx,0x3
c001e682:	83 ec 18             	sub    esp,0x18
c001e685:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e689:	fc                   	cld    
c001e68a:	31 c0                	xor    eax,eax
c001e68c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e68e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e693:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e698:	50                   	push   eax
c001e699:	6a 00                	push   0x0
c001e69b:	6a 00                	push   0x0
c001e69d:	6a 00                	push   0x0
c001e69f:	6a 00                	push   0x0
c001e6a1:	6a 02                	push   0x2
c001e6a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e6a7:	50                   	push   eax
c001e6a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6ac:	e8 e5 fc ff ff       	call   c001e396 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e6b1:	83 c4 38             	add    esp,0x38
c001e6b4:	31 c0                	xor    eax,eax
c001e6b6:	5f                   	pop    edi
c001e6b7:	c3                   	ret    

c001e6b8 <SATAPI::detectMedia()>:
c001e6b8:	53                   	push   ebx
c001e6b9:	83 ec 14             	sub    esp,0x14
c001e6bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6c0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6c6:	e8 61 00 ff ff       	call   c000e72c <VCache::writeWriteBuffer()>
c001e6cb:	59                   	pop    ecx
c001e6cc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6d2:	e8 45 00 ff ff       	call   c000e71c <VCache::invalidateReadBuffer()>
c001e6d7:	c7 04 24 a3 34 02 c0 	mov    DWORD PTR [esp],0xc00234a3
c001e6de:	e8 27 c2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e6e3:	83 c4 10             	add    esp,0x10
c001e6e6:	31 c0                	xor    eax,eax
c001e6e8:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e6ef:	85 d2                	test   edx,edx
c001e6f1:	74 0f                	je     c001e702 <SATAPI::detectMedia()+0x4a>
c001e6f3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6f9:	75 07                	jne    c001e702 <SATAPI::detectMedia()+0x4a>
c001e6fb:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e702:	40                   	inc    eax
c001e703:	83 f8 1a             	cmp    eax,0x1a
c001e706:	75 e0                	jne    c001e6e8 <SATAPI::detectMedia()+0x30>
c001e708:	83 c4 08             	add    esp,0x8
c001e70b:	5b                   	pop    ebx
c001e70c:	c3                   	ret    
c001e70d:	90                   	nop

c001e70e <SATAPI::open(int, int, void*)>:
c001e70e:	56                   	push   esi
c001e70f:	53                   	push   ebx
c001e710:	51                   	push   ecx
c001e711:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e719:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e723:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e72d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e737:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e741:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e748:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e74e:	e8 8f 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e753:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e759:	89 c6                	mov    esi,eax
c001e75b:	e8 82 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e760:	81 c6 00 10 00 00    	add    esi,0x1000
c001e766:	39 c6                	cmp    esi,eax
c001e768:	74 10                	je     c001e77a <SATAPI::open(int, int, void*)+0x6c>
c001e76a:	83 ec 0c             	sub    esp,0xc
c001e76d:	68 b8 34 02 c0       	push   0xc00234b8
c001e772:	e8 28 2e ff ff       	call   c001159f <KePanic(char const*)>
c001e777:	83 c4 10             	add    esp,0x10
c001e77a:	83 ec 0c             	sub    esp,0xc
c001e77d:	6a 02                	push   0x2
c001e77f:	e8 71 ae fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e784:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e78a:	6a 03                	push   0x3
c001e78c:	50                   	push   eax
c001e78d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e793:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e799:	e8 60 b5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e79e:	83 c4 14             	add    esp,0x14
c001e7a1:	68 78 01 00 00       	push   0x178
c001e7a6:	e8 28 93 fe ff       	call   c0007ad3 <malloc>
c001e7ab:	83 c4 0c             	add    esp,0xc
c001e7ae:	6a 00                	push   0x0
c001e7b0:	68 ff ff ff 7f       	push   0x7fffffff
c001e7b5:	6a 00                	push   0x0
c001e7b7:	6a 00                	push   0x0
c001e7b9:	53                   	push   ebx
c001e7ba:	68 ce 34 02 c0       	push   0xc00234ce
c001e7bf:	89 c6                	mov    esi,eax
c001e7c1:	50                   	push   eax
c001e7c2:	e8 bf f3 fe ff       	call   c000db86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7c7:	83 c4 14             	add    esp,0x14
c001e7ca:	56                   	push   esi
c001e7cb:	e8 76 f4 fe ff       	call   c000dc46 <LogicalDisk::assignDriveLetter()>
c001e7d0:	5a                   	pop    edx
c001e7d1:	59                   	pop    ecx
c001e7d2:	0f be c0             	movsx  eax,al
c001e7d5:	50                   	push   eax
c001e7d6:	68 20 33 02 c0       	push   0xc0023320
c001e7db:	e8 2a c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e7e0:	58                   	pop    eax
c001e7e1:	5a                   	pop    edx
c001e7e2:	56                   	push   esi
c001e7e3:	53                   	push   ebx
c001e7e4:	e8 ef e1 fe ff       	call   c000c9d8 <Device::addChild(Device*)>
c001e7e9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e7ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7f2:	e8 17 e6 fe ff       	call   c000ce0e <PhysicalDisk::startCache()>
c001e7f7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e801:	e8 b2 fe ff ff       	call   c001e6b8 <SATAPI::detectMedia()>
c001e806:	83 c4 14             	add    esp,0x14
c001e809:	31 c0                	xor    eax,eax
c001e80b:	5b                   	pop    ebx
c001e80c:	5e                   	pop    esi
c001e80d:	c3                   	ret    

c001e80e <SATAPI::read(unsigned long long, int, void*)>:
c001e80e:	55                   	push   ebp
c001e80f:	57                   	push   edi
c001e810:	56                   	push   esi
c001e811:	53                   	push   ebx
c001e812:	83 ec 3c             	sub    esp,0x3c
c001e815:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e819:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e81d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e821:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e825:	83 fd 04             	cmp    ebp,0x4
c001e828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e830:	7e 10                	jle    c001e842 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e832:	83 ec 0c             	sub    esp,0xc
c001e835:	68 dc 34 02 c0       	push   0xc00234dc
c001e83a:	e8 60 2d ff ff       	call   c001159f <KePanic(char const*)>
c001e83f:	83 c4 10             	add    esp,0x10
c001e842:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e848:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e84e:	51                   	push   ecx
c001e84f:	50                   	push   eax
c001e850:	83 c0 02             	add    eax,0x2
c001e853:	c1 e0 07             	shl    eax,0x7
c001e856:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e85c:	50                   	push   eax
c001e85d:	52                   	push   edx
c001e85e:	e8 61 e1 ff ff       	call   c001c9c4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e863:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e867:	b9 03 00 00 00       	mov    ecx,0x3
c001e86c:	fc                   	cld    
c001e86d:	31 c0                	xor    eax,eax
c001e86f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e871:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e876:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e87b:	83 c4 0c             	add    esp,0xc
c001e87e:	6a 00                	push   0x0
c001e880:	6a 00                	push   0x0
c001e882:	6a 00                	push   0x0
c001e884:	6a 00                	push   0x0
c001e886:	6a 02                	push   0x2
c001e888:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e88c:	50                   	push   eax
c001e88d:	53                   	push   ebx
c001e88e:	e8 03 fb ff ff       	call   c001e396 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e893:	83 c4 20             	add    esp,0x20
c001e896:	85 c0                	test   eax,eax
c001e898:	89 c6                	mov    esi,eax
c001e89a:	75 46                	jne    c001e8e2 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e89c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e8a0:	b9 03 00 00 00       	mov    ecx,0x3
c001e8a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ab:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e8b0:	0f c8                	bswap  eax
c001e8b2:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e8b6:	89 e8                	mov    eax,ebp
c001e8b8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e8bc:	50                   	push   eax
c001e8bd:	55                   	push   ebp
c001e8be:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e8c2:	c1 e5 0b             	shl    ebp,0xb
c001e8c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8cd:	55                   	push   ebp
c001e8ce:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8d2:	50                   	push   eax
c001e8d3:	53                   	push   ebx
c001e8d4:	e8 bd fa ff ff       	call   c001e396 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8d9:	83 c4 20             	add    esp,0x20
c001e8dc:	85 c0                	test   eax,eax
c001e8de:	89 c6                	mov    esi,eax
c001e8e0:	74 0c                	je     c001e8ee <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e8e2:	83 ec 0c             	sub    esp,0xc
c001e8e5:	53                   	push   ebx
c001e8e6:	e8 cd fd ff ff       	call   c001e6b8 <SATAPI::detectMedia()>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	83 c4 3c             	add    esp,0x3c
c001e8f1:	89 f0                	mov    eax,esi
c001e8f3:	5b                   	pop    ebx
c001e8f4:	5e                   	pop    esi
c001e8f5:	5f                   	pop    edi
c001e8f6:	5d                   	pop    ebp
c001e8f7:	c3                   	ret    

c001e8f8 <IOAPIC::close(int, int, void*)>:
c001e8f8:	b8 00 00 00 00       	mov    eax,0x0
c001e8fd:	c3                   	ret    

c001e8fe <apicGetBase()>:
c001e8fe:	55                   	push   ebp
c001e8ff:	89 e5                	mov    ebp,esp
c001e901:	83 ec 18             	sub    esp,0x18
c001e904:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e909:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e90f:	83 e0 08             	and    eax,0x8
c001e912:	0f b6 c0             	movzx  eax,al
c001e915:	85 c0                	test   eax,eax
c001e917:	75 07                	jne    c001e920 <apicGetBase()+0x22>
c001e919:	b8 00 00 00 00       	mov    eax,0x0
c001e91e:	eb 21                	jmp    c001e941 <apicGetBase()+0x43>
c001e920:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e925:	83 ec 08             	sub    esp,0x8
c001e928:	6a 1b                	push   0x1b
c001e92a:	50                   	push   eax
c001e92b:	e8 b2 87 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e936:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e939:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e93c:	25 00 00 ff ff       	and    eax,0xffff0000
c001e941:	c9                   	leave  
c001e942:	c3                   	ret    
c001e943:	90                   	nop

c001e944 <IOAPIC::IOAPIC()>:
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94b:	83 ec 08             	sub    esp,0x8
c001e94e:	68 40 35 02 c0       	push   0xc0023540
c001e953:	50                   	push   eax
c001e954:	e8 17 e2 fe ff       	call   c000cb70 <Device::Device(char const*)>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	ba 50 35 02 c0       	mov    edx,0xc0023550
c001e961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e965:	89 10                	mov    DWORD PTR [eax],edx
c001e967:	90                   	nop
c001e968:	83 c4 0c             	add    esp,0xc
c001e96b:	c3                   	ret    

c001e96c <apicOpen()>:
c001e96c:	55                   	push   ebp
c001e96d:	89 e5                	mov    ebp,esp
c001e96f:	53                   	push   ebx
c001e970:	83 ec 34             	sub    esp,0x34
c001e973:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e978:	83 f0 01             	xor    eax,0x1
c001e97b:	0f b6 c0             	movzx  eax,al
c001e97e:	85 c0                	test   eax,eax
c001e980:	0f 84 a3 00 00 00    	je     c001ea29 <apicOpen()+0xbd>
c001e986:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e98a:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e98f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e993:	0f b6 c0             	movzx  eax,al
c001e996:	39 c2                	cmp    edx,eax
c001e998:	0f 83 84 00 00 00    	jae    c001ea22 <apicOpen()+0xb6>
c001e99e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e9a5:	83 ec 0c             	sub    esp,0xc
c001e9a8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e9ab:	e8 23 91 fe ff       	call   c0007ad3 <malloc>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	89 c3                	mov    ebx,eax
c001e9b5:	83 ec 0c             	sub    esp,0xc
c001e9b8:	53                   	push   ebx
c001e9b9:	e8 86 ff ff ff       	call   c001e944 <IOAPIC::IOAPIC()>
c001e9be:	83 c4 10             	add    esp,0x10
c001e9c1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e9c4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e9c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9cb:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9d2:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e9d7:	83 c0 01             	add    eax,0x1
c001e9da:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e9df:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9e4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e9ea:	83 ec 08             	sub    esp,0x8
c001e9ed:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9f0:	50                   	push   eax
c001e9f1:	e8 e2 df fe ff       	call   c000c9d8 <Device::addChild(Device*)>
c001e9f6:	83 c4 10             	add    esp,0x10
c001e9f9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9fe:	83 c0 08             	add    eax,0x8
c001ea01:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea03:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea07:	6a 00                	push   0x0
c001ea09:	6a 00                	push   0x0
c001ea0b:	52                   	push   edx
c001ea0c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea0f:	ff d0                	call   eax
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea17:	83 c0 01             	add    eax,0x1
c001ea1a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea1d:	e9 68 ff ff ff       	jmp    c001e98a <apicOpen()+0x1e>
c001ea22:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea29:	e8 d0 fe ff ff       	call   c001e8fe <apicGetBase()>
c001ea2e:	05 f0 00 00 00       	add    eax,0xf0
c001ea33:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea36:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea39:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea3b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea3e:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea45:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea4c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea4f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea52:	89 10                	mov    DWORD PTR [eax],edx
c001ea54:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea5b:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea60:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea63:	7d 7c                	jge    c001eae1 <apicOpen()+0x175>
c001ea65:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea68:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea6f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea75:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea7c:	c1 e8 08             	shr    eax,0x8
c001ea7f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea86:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea8d:	c1 e8 18             	shr    eax,0x18
c001ea90:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea93:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea97:	3d ff 00 00 00       	cmp    eax,0xff
c001ea9c:	75 3a                	jne    c001ead8 <apicOpen()+0x16c>
c001ea9e:	e8 5b fe ff ff       	call   c001e8fe <apicGetBase()>
c001eaa3:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eaa7:	83 fa 01             	cmp    edx,0x1
c001eaaa:	75 07                	jne    c001eab3 <apicOpen()+0x147>
c001eaac:	ba 60 03 00 00       	mov    edx,0x360
c001eab1:	eb 05                	jmp    c001eab8 <apicOpen()+0x14c>
c001eab3:	ba 50 03 00 00       	mov    edx,0x350
c001eab8:	01 d0                	add    eax,edx
c001eaba:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eabd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eac5:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eacc:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ead0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ead3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ead6:	89 10                	mov    DWORD PTR [eax],edx
c001ead8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eadc:	e9 7a ff ff ff       	jmp    c001ea5b <apicOpen()+0xef>
c001eae1:	90                   	nop
c001eae2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eae5:	c9                   	leave  
c001eae6:	c3                   	ret    
c001eae7:	90                   	nop

c001eae8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eae8:	55                   	push   ebp
c001eae9:	89 e5                	mov    ebp,esp
c001eaeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eaf4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eaf7:	72 1d                	jb     c001eb16 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eaf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eafc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb05:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb0b:	01 d0                	add    eax,edx
c001eb0d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb10:	73 04                	jae    c001eb16 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb12:	b0 01                	mov    al,0x1
c001eb14:	eb 02                	jmp    c001eb18 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb16:	b0 00                	mov    al,0x0
c001eb18:	5d                   	pop    ebp
c001eb19:	c3                   	ret    

c001eb1a <IOAPIC::read(int)>:
c001eb1a:	55                   	push   ebp
c001eb1b:	89 e5                	mov    ebp,esp
c001eb1d:	83 ec 10             	sub    esp,0x10
c001eb20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb2f:	0f b6 d0             	movzx  edx,al
c001eb32:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb35:	89 10                	mov    DWORD PTR [eax],edx
c001eb37:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb3a:	83 c0 10             	add    eax,0x10
c001eb3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb3f:	c9                   	leave  
c001eb40:	c3                   	ret    
c001eb41:	90                   	nop

c001eb42 <IOAPIC::open(int, int, void*)>:
c001eb42:	55                   	push   ebp
c001eb43:	89 e5                	mov    ebp,esp
c001eb45:	57                   	push   edi
c001eb46:	56                   	push   esi
c001eb47:	53                   	push   ebx
c001eb48:	83 ec 04             	sub    esp,0x4
c001eb4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb51:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb60:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb6a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb79:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb83:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb8c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb95:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb9b:	0f b6 f0             	movzx  esi,al
c001eb9e:	89 d0                	mov    eax,edx
c001eba0:	ba 00 00 00 00       	mov    edx,0x0
c001eba5:	89 c7                	mov    edi,eax
c001eba7:	83 e7 ff             	and    edi,0xffffffff
c001ebaa:	89 f9                	mov    ecx,edi
c001ebac:	0f b6 da             	movzx  ebx,dl
c001ebaf:	89 c8                	mov    eax,ecx
c001ebb1:	89 da                	mov    edx,ebx
c001ebb3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ebb6:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ebb9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebbd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebc1:	83 e0 00             	and    eax,0x0
c001ebc4:	09 d0                	or     eax,edx
c001ebc6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebcd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebd3:	8d 50 01             	lea    edx,[eax+0x1]
c001ebd6:	88 d1                	mov    cl,dl
c001ebd8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ebdb:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ebe1:	0f b6 d0             	movzx  edx,al
c001ebe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe7:	83 c2 08             	add    edx,0x8
c001ebea:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ebee:	0f b6 c9             	movzx  ecx,cl
c001ebf1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ebf7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebfb:	6a 01                	push   0x1
c001ebfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec00:	e8 15 ff ff ff       	call   c001eb1a <IOAPIC::read(int)>
c001ec05:	83 c4 08             	add    esp,0x8
c001ec08:	c1 f8 10             	sar    eax,0x10
c001ec0b:	0f b6 c0             	movzx  eax,al
c001ec0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ec11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec14:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec1a:	b8 00 00 00 00       	mov    eax,0x0
c001ec1f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec22:	5b                   	pop    ebx
c001ec23:	5e                   	pop    esi
c001ec24:	5f                   	pop    edi
c001ec25:	5d                   	pop    ebp
c001ec26:	c3                   	ret    
c001ec27:	90                   	nop

c001ec28 <IOAPIC::write(int, int)>:
c001ec28:	55                   	push   ebp
c001ec29:	89 e5                	mov    ebp,esp
c001ec2b:	83 ec 10             	sub    esp,0x10
c001ec2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec3d:	0f b6 d0             	movzx  edx,al
c001ec40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec43:	89 10                	mov    DWORD PTR [eax],edx
c001ec45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec48:	8d 50 10             	lea    edx,[eax+0x10]
c001ec4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec4e:	89 02                	mov    DWORD PTR [edx],eax
c001ec50:	90                   	nop
c001ec51:	c9                   	leave  
c001ec52:	c3                   	ret    
c001ec53:	90                   	nop

c001ec54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec54:	55                   	push   ebp
c001ec55:	89 e5                	mov    ebp,esp
c001ec57:	53                   	push   ebx
c001ec58:	83 ec 2c             	sub    esp,0x2c
c001ec5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec5e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec61:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec64:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec67:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec70:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec73:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec76:	88 d8                	mov    al,bl
c001ec78:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec7b:	88 c8                	mov    al,cl
c001ec7d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec80:	88 d0                	mov    al,dl
c001ec82:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec85:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec89:	83 c0 08             	add    eax,0x8
c001ec8c:	d1 e0                	shl    eax,1
c001ec8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec91:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec95:	83 c0 08             	add    eax,0x8
c001ec98:	d1 e0                	shl    eax,1
c001ec9a:	83 c0 01             	add    eax,0x1
c001ec9d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001eca0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eca3:	50                   	push   eax
c001eca4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca7:	e8 6e fe ff ff       	call   c001eb1a <IOAPIC::read(int)>
c001ecac:	83 c4 08             	add    esp,0x8
c001ecaf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ecb2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ecb9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ecbc:	c1 e0 18             	shl    eax,0x18
c001ecbf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ecc2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecc5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecc8:	52                   	push   edx
c001ecc9:	50                   	push   eax
c001ecca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eccd:	e8 56 ff ff ff       	call   c001ec28 <IOAPIC::write(int, int)>
c001ecd2:	83 c4 0c             	add    esp,0xc
c001ecd5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecd8:	50                   	push   eax
c001ecd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecdc:	e8 39 fe ff ff       	call   c001eb1a <IOAPIC::read(int)>
c001ece1:	83 c4 08             	add    esp,0x8
c001ece4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ece7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ecee:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ecf5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ecfc:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed00:	85 c0                	test   eax,eax
c001ed02:	74 09                	je     c001ed0d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed04:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed0b:	eb 07                	jmp    c001ed14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed0d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed14:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed18:	85 c0                	test   eax,eax
c001ed1a:	74 09                	je     c001ed25 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed1c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed23:	eb 07                	jmp    c001ed2c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed25:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed2c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed33:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed37:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed3a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed40:	52                   	push   edx
c001ed41:	50                   	push   eax
c001ed42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed45:	e8 de fe ff ff       	call   c001ec28 <IOAPIC::write(int, int)>
c001ed4a:	83 c4 0c             	add    esp,0xc
c001ed4d:	90                   	nop
c001ed4e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed51:	c9                   	leave  
c001ed52:	c3                   	ret    
c001ed53:	90                   	nop

c001ed54 <APICTimer::close(int, int, void*)>:
c001ed54:	b8 00 00 00 00       	mov    eax,0x0
c001ed59:	c3                   	ret    
c001ed5a:	66 90                	xchg   ax,ax

c001ed5c <apicTimerHandler(regs*, void*)>:
c001ed5c:	83 ec 0c             	sub    esp,0xc
c001ed5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed63:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed65:	b8 10 27 00 00       	mov    eax,0x2710
c001ed6a:	ba 00 00 00 00       	mov    edx,0x0
c001ed6f:	f7 f1                	div    ecx
c001ed71:	83 ec 0c             	sub    esp,0xc
c001ed74:	50                   	push   eax
c001ed75:	e8 ca f6 fe ff       	call   c000e444 <timerHandler(unsigned int)>
c001ed7a:	83 c4 10             	add    esp,0x10
c001ed7d:	90                   	nop
c001ed7e:	83 c4 0c             	add    esp,0xc
c001ed81:	c3                   	ret    
c001ed82:	66 90                	xchg   ax,ax

c001ed84 <APICTimer::open(int, int, void*)>:
c001ed84:	83 ec 0c             	sub    esp,0xc
c001ed87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed8d:	83 c0 24             	add    eax,0x24
c001ed90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed92:	83 ec 08             	sub    esp,0x8
c001ed95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed9d:	ff d0                	call   eax
c001ed9f:	83 c4 10             	add    esp,0x10
c001eda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edaa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001edb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edb8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001edbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edc2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	51                   	push   ecx
c001edcc:	6a 01                	push   0x1
c001edce:	68 5c ed 01 c0       	push   0xc001ed5c
c001edd3:	52                   	push   edx
c001edd4:	50                   	push   eax
c001edd5:	e8 aa db fe ff       	call   c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edda:	83 c4 20             	add    esp,0x20
c001eddd:	89 c2                	mov    edx,eax
c001eddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ede9:	b8 00 00 00 00       	mov    eax,0x0
c001edee:	83 c4 0c             	add    esp,0xc
c001edf1:	c3                   	ret    
c001edf2:	66 90                	xchg   ax,ax

c001edf4 <APICTimer::write(int)>:
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	83 ec 0c             	sub    esp,0xc
c001edfa:	68 74 35 02 c0       	push   0xc0023574
c001edff:	e8 9b 27 ff ff       	call   c001159f <KePanic(char const*)>
c001ee04:	83 c4 10             	add    esp,0x10
c001ee07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee15:	90                   	nop
c001ee16:	83 c4 0c             	add    esp,0xc
c001ee19:	c3                   	ret    
c001ee1a:	66 90                	xchg   ax,ax

c001ee1c <APICTimer::APICTimer()>:
c001ee1c:	83 ec 0c             	sub    esp,0xc
c001ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee23:	83 ec 08             	sub    esp,0x8
c001ee26:	68 84 35 02 c0       	push   0xc0023584
c001ee2b:	50                   	push   eax
c001ee2c:	e8 47 f5 fe ff       	call   c000e378 <Timer::Timer(char const*)>
c001ee31:	83 c4 10             	add    esp,0x10
c001ee34:	ba 98 35 02 c0       	mov    edx,0xc0023598
c001ee39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3d:	89 10                	mov    DWORD PTR [eax],edx
c001ee3f:	90                   	nop
c001ee40:	83 c4 0c             	add    esp,0xc
c001ee43:	c3                   	ret    

c001ee44 <PIT::write(int)>:
c001ee44:	83 ec 10             	sub    esp,0x10
c001ee47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee4f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee59:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee5e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee63:	89 c2                	mov    edx,eax
c001ee65:	c1 fa 1f             	sar    edx,0x1f
c001ee68:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee70:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee77:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee7c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee80:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee85:	ee                   	out    dx,al
c001ee86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee8a:	0f b6 c0             	movzx  eax,al
c001ee8d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee94:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee98:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee9c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eea1:	ee                   	out    dx,al
c001eea2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eea6:	c1 f8 08             	sar    eax,0x8
c001eea9:	0f b6 c0             	movzx  eax,al
c001eeac:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eeb3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eeb7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eebb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eec0:	ee                   	out    dx,al
c001eec1:	90                   	nop
c001eec2:	83 c4 10             	add    esp,0x10
c001eec5:	c3                   	ret    
c001eec6:	66 90                	xchg   ax,ax

c001eec8 <pitHandler(regs*, void*)>:
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eed1:	b8 10 27 00 00       	mov    eax,0x2710
c001eed6:	89 c2                	mov    edx,eax
c001eed8:	c1 fa 1f             	sar    edx,0x1f
c001eedb:	f7 f9                	idiv   ecx
c001eedd:	83 ec 0c             	sub    esp,0xc
c001eee0:	50                   	push   eax
c001eee1:	e8 5e f5 fe ff       	call   c000e444 <timerHandler(unsigned int)>
c001eee6:	83 c4 10             	add    esp,0x10
c001eee9:	90                   	nop
c001eeea:	83 c4 0c             	add    esp,0xc
c001eeed:	c3                   	ret    
c001eeee:	66 90                	xchg   ax,ax

c001eef0 <PIT::open(int, int, void*)>:
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef7:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef9:	83 c0 24             	add    eax,0x24
c001eefc:	8b 00                	mov    eax,DWORD PTR [eax]
c001eefe:	83 ec 08             	sub    esp,0x8
c001ef01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef09:	ff d0                	call   eax
c001ef0b:	83 c4 10             	add    esp,0x10
c001ef0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef12:	83 ec 0c             	sub    esp,0xc
c001ef15:	6a 00                	push   0x0
c001ef17:	6a 01                	push   0x1
c001ef19:	68 c8 ee 01 c0       	push   0xc001eec8
c001ef1e:	6a 00                	push   0x0
c001ef20:	50                   	push   eax
c001ef21:	e8 5e da fe ff       	call   c000c984 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef26:	83 c4 20             	add    esp,0x20
c001ef29:	89 c2                	mov    edx,eax
c001ef2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef35:	b8 00 00 00 00       	mov    eax,0x0
c001ef3a:	83 c4 0c             	add    esp,0xc
c001ef3d:	c3                   	ret    
c001ef3e:	66 90                	xchg   ax,ax

c001ef40 <PIT::close(int, int, void*)>:
c001ef40:	83 ec 0c             	sub    esp,0xc
c001ef43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef47:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef55:	6a 01                	push   0x1
c001ef57:	68 c8 ee 01 c0       	push   0xc001eec8
c001ef5c:	6a 00                	push   0x0
c001ef5e:	50                   	push   eax
c001ef5f:	e8 56 da fe ff       	call   c000c9ba <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef64:	83 c4 10             	add    esp,0x10
c001ef67:	b8 00 00 00 00       	mov    eax,0x0
c001ef6c:	83 c4 0c             	add    esp,0xc
c001ef6f:	c3                   	ret    

c001ef70 <PIT::PIT()>:
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef77:	83 ec 08             	sub    esp,0x8
c001ef7a:	68 c0 35 02 c0       	push   0xc00235c0
c001ef7f:	50                   	push   eax
c001ef80:	e8 f3 f3 fe ff       	call   c000e378 <Timer::Timer(char const*)>
c001ef85:	83 c4 10             	add    esp,0x10
c001ef88:	ba e8 35 02 c0       	mov    edx,0xc00235e8
c001ef8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef91:	89 10                	mov    DWORD PTR [eax],edx
c001ef93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef9d:	0f b6 d0             	movzx  edx,al
c001efa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001efab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efb5:	0f b6 d0             	movzx  edx,al
c001efb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efcb:	8d 50 01             	lea    edx,[eax+0x1]
c001efce:	88 d1                	mov    cl,dl
c001efd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efd4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001efda:	0f b6 d0             	movzx  edx,al
c001efdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001efe5:	83 e1 3f             	and    ecx,0x3f
c001efe8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efec:	90                   	nop
c001efed:	83 c4 0c             	add    esp,0xc
c001eff0:	c3                   	ret    
c001eff1:	66 90                	xchg   ax,ax
c001eff3:	66 90                	xchg   ax,ax
c001eff5:	66 90                	xchg   ax,ax
c001eff7:	66 90                	xchg   ax,ax
c001eff9:	66 90                	xchg   ax,ax
c001effb:	66 90                	xchg   ax,ax
c001effd:	66 90                	xchg   ax,ax
c001efff:	90                   	nop

c001f000 <avxDetect>:
c001f000:	b8 01 00 00 00       	mov    eax,0x1
c001f005:	0f a2                	cpuid  
c001f007:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f00d:	74 15                	je     c001f024 <avxDetect.noAVX>
c001f00f:	b8 01 00 00 00       	mov    eax,0x1
c001f014:	0f a2                	cpuid  
c001f016:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f01c:	74 06                	je     c001f024 <avxDetect.noAVX>
c001f01e:	b8 01 00 00 00       	mov    eax,0x1
c001f023:	c3                   	ret    

c001f024 <avxDetect.noAVX>:
c001f024:	b8 00 00 00 00       	mov    eax,0x0
c001f029:	c3                   	ret    

c001f02a <avxSave>:
c001f02a:	53                   	push   ebx
c001f02b:	52                   	push   edx
c001f02c:	31 c0                	xor    eax,eax
c001f02e:	48                   	dec    eax
c001f02f:	89 c2                	mov    edx,eax
c001f031:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f035:	0f ae 23             	xsave  [ebx]
c001f038:	5a                   	pop    edx
c001f039:	5b                   	pop    ebx
c001f03a:	c3                   	ret    

c001f03b <avxLoad>:
c001f03b:	53                   	push   ebx
c001f03c:	52                   	push   edx
c001f03d:	31 c0                	xor    eax,eax
c001f03f:	48                   	dec    eax
c001f040:	89 c2                	mov    edx,eax
c001f042:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f046:	0f ae 2b             	xrstor [ebx]
c001f049:	5a                   	pop    edx
c001f04a:	5b                   	pop    ebx
c001f04b:	c3                   	ret    

c001f04c <avxInit>:
c001f04c:	e8 67 03 00 00       	call   c001f3b8 <sseInit>
c001f051:	50                   	push   eax
c001f052:	51                   	push   ecx
c001f053:	0f 20 e0             	mov    eax,cr4
c001f056:	0d 00 00 04 00       	or     eax,0x40000
c001f05b:	0f 22 e0             	mov    cr4,eax
c001f05e:	31 c9                	xor    ecx,ecx
c001f060:	0f 01 d0             	xgetbv 
c001f063:	0d 07 00 00 00       	or     eax,0x7
c001f068:	0f 01 d1             	xsetbv 
c001f06b:	59                   	pop    ecx
c001f06c:	58                   	pop    eax
c001f06d:	c3                   	ret    

c001f06e <avxClose>:
c001f06e:	c3                   	ret    

c001f06f <wouldSheSayYes>:
c001f06f:	c3                   	ret    
c001f070:	49                   	dec    ecx
c001f071:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f075:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f079:	75 20                	jne    c001f09b <isr0+0xb>
c001f07b:	4e                   	dec    esi
c001f07c:	79 61                	jns    c001f0df <isr7+0x3>
c001f07e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f083:	66 90                	xchg   ax,ax
c001f085:	66 90                	xchg   ax,ax
c001f087:	66 90                	xchg   ax,ax
c001f089:	66 90                	xchg   ax,ax
c001f08b:	66 90                	xchg   ax,ax
c001f08d:	66 90                	xchg   ax,ax
c001f08f:	90                   	nop

c001f090 <isr0>:
c001f090:	fa                   	cli    
c001f091:	68 00 00 00 00       	push   0x0
c001f096:	68 00 00 00 00       	push   0x0
c001f09b:	e9 56 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0a0 <isr1>:
c001f0a0:	fa                   	cli    
c001f0a1:	6a 00                	push   0x0
c001f0a3:	6a 01                	push   0x1
c001f0a5:	e9 4c 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0aa <isr2>:
c001f0aa:	fa                   	cli    
c001f0ab:	6a 00                	push   0x0
c001f0ad:	6a 02                	push   0x2
c001f0af:	e9 42 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0b4 <isr3>:
c001f0b4:	fa                   	cli    
c001f0b5:	6a 00                	push   0x0
c001f0b7:	6a 03                	push   0x3
c001f0b9:	e9 38 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0be <isr4>:
c001f0be:	fa                   	cli    
c001f0bf:	6a 00                	push   0x0
c001f0c1:	6a 04                	push   0x4
c001f0c3:	e9 2e 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0c8 <isr5>:
c001f0c8:	fa                   	cli    
c001f0c9:	6a 00                	push   0x0
c001f0cb:	6a 05                	push   0x5
c001f0cd:	e9 24 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0d2 <isr6>:
c001f0d2:	fa                   	cli    
c001f0d3:	6a 00                	push   0x0
c001f0d5:	6a 06                	push   0x6
c001f0d7:	e9 1a 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0dc <isr7>:
c001f0dc:	fa                   	cli    
c001f0dd:	6a 00                	push   0x0
c001f0df:	6a 07                	push   0x7
c001f0e1:	e9 10 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0e6 <isr8>:
c001f0e6:	fa                   	cli    
c001f0e7:	6a 08                	push   0x8
c001f0e9:	e9 08 01 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0ee <isr9>:
c001f0ee:	fa                   	cli    
c001f0ef:	6a 00                	push   0x0
c001f0f1:	6a 09                	push   0x9
c001f0f3:	e9 fe 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f0f8 <isr10>:
c001f0f8:	fa                   	cli    
c001f0f9:	6a 0a                	push   0xa
c001f0fb:	e9 f6 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f100 <isr11>:
c001f100:	fa                   	cli    
c001f101:	6a 0b                	push   0xb
c001f103:	e9 ee 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f108 <isr12>:
c001f108:	fa                   	cli    
c001f109:	6a 0c                	push   0xc
c001f10b:	e9 e6 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f110 <isr13>:
c001f110:	fa                   	cli    
c001f111:	6a 0d                	push   0xd
c001f113:	53                   	push   ebx
c001f114:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f118:	81 fb e6 f2 01 c0    	cmp    ebx,0xc001f2e6
c001f11e:	5b                   	pop    ebx
c001f11f:	0f 84 c3 01 00 00    	je     c001f2e8 <finishSignal2>
c001f125:	e9 cc 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f12a <isr14>:
c001f12a:	fa                   	cli    
c001f12b:	6a 0e                	push   0xe
c001f12d:	e9 c4 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f132 <isr15>:
c001f132:	fa                   	cli    
c001f133:	6a 00                	push   0x0
c001f135:	6a 0f                	push   0xf
c001f137:	e9 ba 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f13c <isr16>:
c001f13c:	fa                   	cli    
c001f13d:	6a 00                	push   0x0
c001f13f:	6a 10                	push   0x10
c001f141:	e9 b0 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f146 <isr17>:
c001f146:	fa                   	cli    
c001f147:	6a 00                	push   0x0
c001f149:	6a 11                	push   0x11
c001f14b:	e9 a6 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f150 <isr18>:
c001f150:	fa                   	cli    
c001f151:	6a 00                	push   0x0
c001f153:	6a 12                	push   0x12
c001f155:	e9 9c 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f15a <irq3>:
c001f15a:	fa                   	cli    
c001f15b:	6a 00                	push   0x0
c001f15d:	6a 23                	push   0x23
c001f15f:	e9 92 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f164 <irq4>:
c001f164:	fa                   	cli    
c001f165:	6a 00                	push   0x0
c001f167:	6a 24                	push   0x24
c001f169:	e9 88 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f16e <irq5>:
c001f16e:	fa                   	cli    
c001f16f:	6a 00                	push   0x0
c001f171:	6a 25                	push   0x25
c001f173:	e9 7e 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f178 <irq6>:
c001f178:	fa                   	cli    
c001f179:	6a 00                	push   0x0
c001f17b:	6a 26                	push   0x26
c001f17d:	e9 74 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f182 <irq7>:
c001f182:	fa                   	cli    
c001f183:	6a 00                	push   0x0
c001f185:	6a 27                	push   0x27
c001f187:	e9 6a 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f18c <irq8>:
c001f18c:	fa                   	cli    
c001f18d:	6a 00                	push   0x0
c001f18f:	6a 28                	push   0x28
c001f191:	e9 60 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f196 <irq9>:
c001f196:	fa                   	cli    
c001f197:	6a 00                	push   0x0
c001f199:	6a 29                	push   0x29
c001f19b:	e9 56 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f1a0 <irq10>:
c001f1a0:	fa                   	cli    
c001f1a1:	6a 00                	push   0x0
c001f1a3:	6a 2a                	push   0x2a
c001f1a5:	e9 4c 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f1aa <irq11>:
c001f1aa:	fa                   	cli    
c001f1ab:	6a 00                	push   0x0
c001f1ad:	6a 2b                	push   0x2b
c001f1af:	e9 42 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f1b4 <irq12>:
c001f1b4:	fa                   	cli    
c001f1b5:	6a 00                	push   0x0
c001f1b7:	6a 2c                	push   0x2c
c001f1b9:	e9 38 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f1be <irq13>:
c001f1be:	fa                   	cli    
c001f1bf:	6a 00                	push   0x0
c001f1c1:	6a 2d                	push   0x2d
c001f1c3:	e9 2e 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f1c8 <irq14>:
c001f1c8:	fa                   	cli    
c001f1c9:	6a 00                	push   0x0
c001f1cb:	6a 2e                	push   0x2e
c001f1cd:	e9 24 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f1d2 <irq15>:
c001f1d2:	fa                   	cli    
c001f1d3:	6a 00                	push   0x0
c001f1d5:	6a 2f                	push   0x2f
c001f1d7:	e9 1a 00 00 00       	jmp    c001f1f6 <int_common_stub>

c001f1dc <irq1>:
c001f1dc:	fa                   	cli    
c001f1dd:	6a 00                	push   0x0
c001f1df:	6a 21                	push   0x21
c001f1e1:	eb 13                	jmp    c001f1f6 <int_common_stub>

c001f1e3 <irq2>:
c001f1e3:	fa                   	cli    
c001f1e4:	6a 00                	push   0x0
c001f1e6:	6a 22                	push   0x22
c001f1e8:	eb 0c                	jmp    c001f1f6 <int_common_stub>

c001f1ea <isr96>:
c001f1ea:	6a 00                	push   0x0
c001f1ec:	6a 60                	push   0x60
c001f1ee:	fb                   	sti    
c001f1ef:	eb 37                	jmp    c001f228 <syscall_common_stub>

c001f1f1 <irq0>:
c001f1f1:	fa                   	cli    
c001f1f2:	6a 00                	push   0x0
c001f1f4:	6a 20                	push   0x20

c001f1f6 <int_common_stub>:
c001f1f6:	60                   	pusha  
c001f1f7:	1e                   	push   ds
c001f1f8:	06                   	push   es
c001f1f9:	0f a0                	push   fs
c001f1fb:	0f a8                	push   gs
c001f1fd:	66 b8 10 00          	mov    ax,0x10
c001f201:	66 8e d8             	mov    ds,ax
c001f204:	66 8e c0             	mov    es,ax
c001f207:	66 8e e0             	mov    fs,ax
c001f20a:	66 8e e8             	mov    gs,ax
c001f20d:	54                   	push   esp
c001f20e:	fc                   	cld    
c001f20f:	e8 70 dc fe ff       	call   c000ce84 <int_handler>
c001f214:	81 c4 04 00 00 00    	add    esp,0x4
c001f21a:	0f a9                	pop    gs
c001f21c:	0f a1                	pop    fs
c001f21e:	07                   	pop    es
c001f21f:	1f                   	pop    ds
c001f220:	61                   	popa   
c001f221:	81 c4 08 00 00 00    	add    esp,0x8
c001f227:	cf                   	iret   

c001f228 <syscall_common_stub>:
c001f228:	60                   	pusha  
c001f229:	1e                   	push   ds
c001f22a:	06                   	push   es
c001f22b:	0f a0                	push   fs
c001f22d:	0f a8                	push   gs
c001f22f:	66 b8 10 00          	mov    ax,0x10
c001f233:	66 8e d8             	mov    ds,ax
c001f236:	66 8e c0             	mov    es,ax
c001f239:	66 8e e0             	mov    fs,ax
c001f23c:	66 8e e8             	mov    gs,ax
c001f23f:	54                   	push   esp
c001f240:	fc                   	cld    
c001f241:	e8 3e dc fe ff       	call   c000ce84 <int_handler>
c001f246:	81 c4 04 00 00 00    	add    esp,0x4
c001f24c:	0f a9                	pop    gs
c001f24e:	0f a1                	pop    fs
c001f250:	07                   	pop    es
c001f251:	1f                   	pop    ds
c001f252:	e8 58 29 ff ff       	call   c0011baf <KiCheckSignalZ>
c001f257:	3d 00 00 00 00       	cmp    eax,0x0
c001f25c:	0f 84 c0 00 00 00    	je     c001f322 <skipSignals>
c001f262:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f267:	61                   	popa   
c001f268:	53                   	push   ebx
c001f269:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f26f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f272:	5b                   	pop    ebx
c001f273:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f278:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f27b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f27e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f281:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f284:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f287:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f28a:	81 c4 08 00 00 00    	add    esp,0x8
c001f290:	5e                   	pop    esi
c001f291:	5b                   	pop    ebx
c001f292:	59                   	pop    ecx
c001f293:	5a                   	pop    edx
c001f294:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f297:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f29a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f29d:	52                   	push   edx
c001f29e:	51                   	push   ecx
c001f29f:	53                   	push   ebx
c001f2a0:	56                   	push   esi
c001f2a1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f2a7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f2aa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f2ad:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f2b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f2b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f2b6:	60                   	pusha  
c001f2b7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f2bd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f2c0:	89 e3                	mov    ebx,esp
c001f2c2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f2c5:	52                   	push   edx
c001f2c6:	68 e6 f2 01 c0       	push   0xc001f2e6
c001f2cb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f2ce:	89 dc                	mov    esp,ebx
c001f2d0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2d3:	68 23 00 00 00       	push   0x23
c001f2d8:	51                   	push   ecx
c001f2d9:	68 02 02 00 00       	push   0x202
c001f2de:	68 1b 00 00 00       	push   0x1b
c001f2e3:	ff 36                	push   DWORD PTR [esi]
c001f2e5:	cf                   	iret   

c001f2e6 <finishSignal>:
c001f2e6:	cd 0f                	int    0xf

c001f2e8 <finishSignal2>:
c001f2e8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f2ee:	e8 39 29 ff ff       	call   c0011c2c <KiFinishSignalZ>
c001f2f3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f2f9:	68 23 00 00 00       	push   0x23
c001f2fe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f301:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f304:	68 1b 00 00 00       	push   0x1b
c001f309:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f30c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f30f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f312:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f315:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f318:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f31b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f31e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f321:	cf                   	iret   

c001f322 <skipSignals>:
c001f322:	61                   	popa   
c001f323:	81 c4 08 00 00 00    	add    esp,0x8
c001f329:	cf                   	iret   
c001f32a:	90                   	nop
c001f32b:	90                   	nop

c001f32c <irq16>:
c001f32c:	fa                   	cli    
c001f32d:	6a 00                	push   0x0
c001f32f:	6a 30                	push   0x30
c001f331:	e9 c0 fe ff ff       	jmp    c001f1f6 <int_common_stub>

c001f336 <irq17>:
c001f336:	fa                   	cli    
c001f337:	6a 00                	push   0x0
c001f339:	6a 31                	push   0x31
c001f33b:	e9 b6 fe ff ff       	jmp    c001f1f6 <int_common_stub>

c001f340 <irq18>:
c001f340:	fa                   	cli    
c001f341:	6a 00                	push   0x0
c001f343:	6a 32                	push   0x32
c001f345:	e9 ac fe ff ff       	jmp    c001f1f6 <int_common_stub>

c001f34a <irq19>:
c001f34a:	fa                   	cli    
c001f34b:	6a 00                	push   0x0
c001f34d:	6a 33                	push   0x33
c001f34f:	e9 a2 fe ff ff       	jmp    c001f1f6 <int_common_stub>

c001f354 <irq20>:
c001f354:	fa                   	cli    
c001f355:	6a 00                	push   0x0
c001f357:	6a 34                	push   0x34
c001f359:	e9 98 fe ff ff       	jmp    c001f1f6 <int_common_stub>

c001f35e <irq21>:
c001f35e:	fa                   	cli    
c001f35f:	6a 00                	push   0x0
c001f361:	6a 35                	push   0x35
c001f363:	e9 8e fe ff ff       	jmp    c001f1f6 <int_common_stub>

c001f368 <irq22>:
c001f368:	fa                   	cli    
c001f369:	6a 00                	push   0x0
c001f36b:	6a 36                	push   0x36
c001f36d:	e9 84 fe ff ff       	jmp    c001f1f6 <int_common_stub>

c001f372 <irq23>:
c001f372:	fa                   	cli    
c001f373:	6a 00                	push   0x0
c001f375:	6a 37                	push   0x37
c001f377:	e9 7a fe ff ff       	jmp    c001f1f6 <int_common_stub>
c001f37c:	66 90                	xchg   ax,ax
c001f37e:	66 90                	xchg   ax,ax

c001f380 <i386GetRDRAND>:
c001f380:	b9 64 00 00 00       	mov    ecx,0x64

c001f385 <retry>:
c001f385:	0f c7 f0             	rdrand eax
c001f388:	72 05                	jb     c001f38f <retry.done>
c001f38a:	e2 f9                	loop   c001f385 <retry>

c001f38c <retry.fail>:
c001f38c:	31 c0                	xor    eax,eax
c001f38e:	c3                   	ret    

c001f38f <retry.done>:
c001f38f:	c3                   	ret    

c001f390 <absolutelyNoChanceInHell>:
c001f390:	b8 01 00 00 00       	mov    eax,0x1
c001f395:	0f a2                	cpuid  
c001f397:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f39d:	74 06                	je     c001f3a5 <sseDetect.noSSE>
c001f39f:	b8 01 00 00 00       	mov    eax,0x1
c001f3a4:	c3                   	ret    

c001f3a5 <sseDetect.noSSE>:
c001f3a5:	31 c0                	xor    eax,eax
c001f3a7:	c3                   	ret    

c001f3a8 <sseSave>:
c001f3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ac:	0f ae 00             	fxsave [eax]
c001f3af:	c3                   	ret    

c001f3b0 <sseLoad>:
c001f3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3b4:	0f ae 08             	fxrstor [eax]
c001f3b7:	c3                   	ret    

c001f3b8 <sseInit>:
c001f3b8:	e8 42 00 00 00       	call   c001f3ff <x87Init>
c001f3bd:	0f 20 e0             	mov    eax,cr4
c001f3c0:	66 0d 00 06          	or     ax,0x600
c001f3c4:	0f 22 e0             	mov    cr4,eax
c001f3c7:	c3                   	ret    

c001f3c8 <sseClose>:
c001f3c8:	c3                   	ret    
c001f3c9:	66 90                	xchg   ax,ax
c001f3cb:	66 90                	xchg   ax,ax
c001f3cd:	66 90                	xchg   ax,ax
c001f3cf:	90                   	nop

c001f3d0 <value_37F>:
c001f3d0:	7f 03                	jg     c001f3d5 <value_37A+0x1>

c001f3d2 <value_37E>:
c001f3d2:	7e 03                	jle    c001f3d7 <x87Detect+0x1>

c001f3d4 <value_37A>:
c001f3d4:	7a 03                	jp     c001f3d9 <x87Detect+0x3>

c001f3d6 <x87Detect>:
c001f3d6:	b8 01 00 00 00       	mov    eax,0x1
c001f3db:	0f a2                	cpuid  
c001f3dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f3e3:	74 06                	je     c001f3eb <x87Detect.nox87>
c001f3e5:	b8 01 00 00 00       	mov    eax,0x1
c001f3ea:	c3                   	ret    

c001f3eb <x87Detect.nox87>:
c001f3eb:	b8 00 00 00 00       	mov    eax,0x0
c001f3f0:	c3                   	ret    

c001f3f1 <x87Save>:
c001f3f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3f5:	dd 30                	fnsave [eax]
c001f3f7:	c3                   	ret    

c001f3f8 <x87Load>:
c001f3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3fc:	dd 20                	frstor [eax]
c001f3fe:	c3                   	ret    

c001f3ff <x87Init>:
c001f3ff:	0f 20 c0             	mov    eax,cr0
c001f402:	66 25 fb ff          	and    ax,0xfffb
c001f406:	66 0d 22 00          	or     ax,0x22
c001f40a:	0f 22 c0             	mov    cr0,eax
c001f40d:	db e3                	fninit 
c001f40f:	0f 06                	clts   
c001f411:	d9 2d d4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3d4
c001f417:	c3                   	ret    

c001f418 <x87Close>:
c001f418:	c3                   	ret    
c001f419:	66 90                	xchg   ax,ax
c001f41b:	90                   	nop

c001f41c <__do_global_ctors_aux>:
c001f41c:	a1 d0 03 02 c0       	mov    eax,ds:0xc00203d0
c001f421:	83 f8 ff             	cmp    eax,0xffffffff
c001f424:	74 1a                	je     c001f440 <__do_global_ctors_aux+0x24>
c001f426:	55                   	push   ebp
c001f427:	89 e5                	mov    ebp,esp
c001f429:	53                   	push   ebx
c001f42a:	52                   	push   edx
c001f42b:	bb d0 03 02 c0       	mov    ebx,0xc00203d0
c001f430:	ff d0                	call   eax
c001f432:	83 eb 04             	sub    ebx,0x4
c001f435:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f437:	83 f8 ff             	cmp    eax,0xffffffff
c001f43a:	75 f4                	jne    c001f430 <__do_global_ctors_aux+0x14>
c001f43c:	58                   	pop    eax
c001f43d:	5b                   	pop    ebx
c001f43e:	5d                   	pop    ebp
c001f43f:	c3                   	ret    
c001f440:	c3                   	ret    
c001f441:	66 90                	xchg   ax,ax
c001f443:	90                   	nop

c001f444 <__divdi3>:
c001f444:	55                   	push   ebp
c001f445:	57                   	push   edi
c001f446:	56                   	push   esi
c001f447:	53                   	push   ebx
c001f448:	83 ec 1c             	sub    esp,0x1c
c001f44b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f44f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f453:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f456:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f45a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f45e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f462:	85 db                	test   ebx,ebx
c001f464:	0f 88 8e 00 00 00    	js     c001f4f8 <__divdi3+0xb4>
c001f46a:	89 dd                	mov    ebp,ebx
c001f46c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f474:	89 d3                	mov    ebx,edx
c001f476:	85 d2                	test   edx,edx
c001f478:	79 0d                	jns    c001f487 <__divdi3+0x43>
c001f47a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f47e:	f7 d8                	neg    eax
c001f480:	83 d2 00             	adc    edx,0x0
c001f483:	f7 da                	neg    edx
c001f485:	89 d3                	mov    ebx,edx
c001f487:	89 c7                	mov    edi,eax
c001f489:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f48c:	85 db                	test   ebx,ebx
c001f48e:	75 48                	jne    c001f4d8 <__divdi3+0x94>
c001f490:	39 ef                	cmp    edi,ebp
c001f492:	76 24                	jbe    c001f4b8 <__divdi3+0x74>
c001f494:	89 ea                	mov    edx,ebp
c001f496:	f7 f7                	div    edi
c001f498:	89 c1                	mov    ecx,eax
c001f49a:	31 f6                	xor    esi,esi
c001f49c:	89 c8                	mov    eax,ecx
c001f49e:	89 f2                	mov    edx,esi
c001f4a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4a4:	85 c9                	test   ecx,ecx
c001f4a6:	74 07                	je     c001f4af <__divdi3+0x6b>
c001f4a8:	f7 d8                	neg    eax
c001f4aa:	83 d2 00             	adc    edx,0x0
c001f4ad:	f7 da                	neg    edx
c001f4af:	83 c4 1c             	add    esp,0x1c
c001f4b2:	5b                   	pop    ebx
c001f4b3:	5e                   	pop    esi
c001f4b4:	5f                   	pop    edi
c001f4b5:	5d                   	pop    ebp
c001f4b6:	c3                   	ret    
c001f4b7:	90                   	nop
c001f4b8:	85 ff                	test   edi,edi
c001f4ba:	75 0b                	jne    c001f4c7 <__divdi3+0x83>
c001f4bc:	b8 01 00 00 00       	mov    eax,0x1
c001f4c1:	31 d2                	xor    edx,edx
c001f4c3:	f7 f3                	div    ebx
c001f4c5:	89 c7                	mov    edi,eax
c001f4c7:	31 d2                	xor    edx,edx
c001f4c9:	89 e8                	mov    eax,ebp
c001f4cb:	f7 f7                	div    edi
c001f4cd:	89 c6                	mov    esi,eax
c001f4cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4d2:	f7 f7                	div    edi
c001f4d4:	89 c1                	mov    ecx,eax
c001f4d6:	eb c4                	jmp    c001f49c <__divdi3+0x58>
c001f4d8:	39 eb                	cmp    ebx,ebp
c001f4da:	77 3c                	ja     c001f518 <__divdi3+0xd4>
c001f4dc:	0f bd f3             	bsr    esi,ebx
c001f4df:	83 f6 1f             	xor    esi,0x1f
c001f4e2:	75 40                	jne    c001f524 <__divdi3+0xe0>
c001f4e4:	39 eb                	cmp    ebx,ebp
c001f4e6:	72 09                	jb     c001f4f1 <__divdi3+0xad>
c001f4e8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f4eb:	0f 87 97 00 00 00    	ja     c001f588 <__divdi3+0x144>
c001f4f1:	b9 01 00 00 00       	mov    ecx,0x1
c001f4f6:	eb a4                	jmp    c001f49c <__divdi3+0x58>
c001f4f8:	f7 d9                	neg    ecx
c001f4fa:	83 d3 00             	adc    ebx,0x0
c001f4fd:	f7 db                	neg    ebx
c001f4ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f502:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f506:	89 dd                	mov    ebp,ebx
c001f508:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f510:	e9 5f ff ff ff       	jmp    c001f474 <__divdi3+0x30>
c001f515:	8d 76 00             	lea    esi,[esi+0x0]
c001f518:	31 f6                	xor    esi,esi
c001f51a:	31 c9                	xor    ecx,ecx
c001f51c:	e9 7b ff ff ff       	jmp    c001f49c <__divdi3+0x58>
c001f521:	8d 76 00             	lea    esi,[esi+0x0]
c001f524:	b8 20 00 00 00       	mov    eax,0x20
c001f529:	29 f0                	sub    eax,esi
c001f52b:	89 f1                	mov    ecx,esi
c001f52d:	d3 e3                	shl    ebx,cl
c001f52f:	89 fa                	mov    edx,edi
c001f531:	88 c1                	mov    cl,al
c001f533:	d3 ea                	shr    edx,cl
c001f535:	09 da                	or     edx,ebx
c001f537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f53b:	89 f1                	mov    ecx,esi
c001f53d:	d3 e7                	shl    edi,cl
c001f53f:	89 eb                	mov    ebx,ebp
c001f541:	88 c1                	mov    cl,al
c001f543:	d3 eb                	shr    ebx,cl
c001f545:	89 f1                	mov    ecx,esi
c001f547:	d3 e5                	shl    ebp,cl
c001f549:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f54c:	88 c1                	mov    cl,al
c001f54e:	d3 ea                	shr    edx,cl
c001f550:	09 d5                	or     ebp,edx
c001f552:	89 e8                	mov    eax,ebp
c001f554:	89 da                	mov    edx,ebx
c001f556:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f55a:	89 d3                	mov    ebx,edx
c001f55c:	89 c5                	mov    ebp,eax
c001f55e:	f7 e7                	mul    edi
c001f560:	39 d3                	cmp    ebx,edx
c001f562:	72 18                	jb     c001f57c <__divdi3+0x138>
c001f564:	74 0a                	je     c001f570 <__divdi3+0x12c>
c001f566:	89 e9                	mov    ecx,ebp
c001f568:	31 f6                	xor    esi,esi
c001f56a:	e9 2d ff ff ff       	jmp    c001f49c <__divdi3+0x58>
c001f56f:	90                   	nop
c001f570:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f573:	89 f1                	mov    ecx,esi
c001f575:	d3 e7                	shl    edi,cl
c001f577:	39 c7                	cmp    edi,eax
c001f579:	73 eb                	jae    c001f566 <__divdi3+0x122>
c001f57b:	90                   	nop
c001f57c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f57f:	31 f6                	xor    esi,esi
c001f581:	e9 16 ff ff ff       	jmp    c001f49c <__divdi3+0x58>
c001f586:	66 90                	xchg   ax,ax
c001f588:	31 c9                	xor    ecx,ecx
c001f58a:	e9 0d ff ff ff       	jmp    c001f49c <__divdi3+0x58>
c001f58f:	90                   	nop

c001f590 <__moddi3>:
c001f590:	55                   	push   ebp
c001f591:	57                   	push   edi
c001f592:	56                   	push   esi
c001f593:	53                   	push   ebx
c001f594:	83 ec 2c             	sub    esp,0x2c
c001f597:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f59b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f59f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f5a3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f5a7:	85 db                	test   ebx,ebx
c001f5a9:	0f 88 85 00 00 00    	js     c001f634 <__moddi3+0xa4>
c001f5af:	89 de                	mov    esi,ebx
c001f5b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f5b9:	89 d7                	mov    edi,edx
c001f5bb:	85 d2                	test   edx,edx
c001f5bd:	79 09                	jns    c001f5c8 <__moddi3+0x38>
c001f5bf:	f7 d8                	neg    eax
c001f5c1:	83 d2 00             	adc    edx,0x0
c001f5c4:	f7 da                	neg    edx
c001f5c6:	89 d7                	mov    edi,edx
c001f5c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5cc:	89 cd                	mov    ebp,ecx
c001f5ce:	85 ff                	test   edi,edi
c001f5d0:	75 52                	jne    c001f624 <__moddi3+0x94>
c001f5d2:	89 c3                	mov    ebx,eax
c001f5d4:	39 f0                	cmp    eax,esi
c001f5d6:	76 24                	jbe    c001f5fc <__moddi3+0x6c>
c001f5d8:	89 c8                	mov    eax,ecx
c001f5da:	89 f2                	mov    edx,esi
c001f5dc:	f7 f3                	div    ebx
c001f5de:	89 d6                	mov    esi,edx
c001f5e0:	89 f0                	mov    eax,esi
c001f5e2:	31 d2                	xor    edx,edx
c001f5e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5e8:	85 c9                	test   ecx,ecx
c001f5ea:	74 07                	je     c001f5f3 <__moddi3+0x63>
c001f5ec:	f7 d8                	neg    eax
c001f5ee:	83 d2 00             	adc    edx,0x0
c001f5f1:	f7 da                	neg    edx
c001f5f3:	83 c4 2c             	add    esp,0x2c
c001f5f6:	5b                   	pop    ebx
c001f5f7:	5e                   	pop    esi
c001f5f8:	5f                   	pop    edi
c001f5f9:	5d                   	pop    ebp
c001f5fa:	c3                   	ret    
c001f5fb:	90                   	nop
c001f5fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f600:	85 db                	test   ebx,ebx
c001f602:	75 0d                	jne    c001f611 <__moddi3+0x81>
c001f604:	b8 01 00 00 00       	mov    eax,0x1
c001f609:	31 d2                	xor    edx,edx
c001f60b:	f7 f7                	div    edi
c001f60d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f611:	89 f0                	mov    eax,esi
c001f613:	31 d2                	xor    edx,edx
c001f615:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f619:	f7 f7                	div    edi
c001f61b:	89 e8                	mov    eax,ebp
c001f61d:	f7 f7                	div    edi
c001f61f:	89 d6                	mov    esi,edx
c001f621:	eb bd                	jmp    c001f5e0 <__moddi3+0x50>
c001f623:	90                   	nop
c001f624:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f628:	39 f7                	cmp    edi,esi
c001f62a:	76 20                	jbe    c001f64c <__moddi3+0xbc>
c001f62c:	89 c8                	mov    eax,ecx
c001f62e:	89 f2                	mov    edx,esi
c001f630:	eb b2                	jmp    c001f5e4 <__moddi3+0x54>
c001f632:	66 90                	xchg   ax,ax
c001f634:	f7 d9                	neg    ecx
c001f636:	83 d3 00             	adc    ebx,0x0
c001f639:	f7 db                	neg    ebx
c001f63b:	89 de                	mov    esi,ebx
c001f63d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f645:	e9 6f ff ff ff       	jmp    c001f5b9 <__moddi3+0x29>
c001f64a:	66 90                	xchg   ax,ax
c001f64c:	0f bd c7             	bsr    eax,edi
c001f64f:	83 f0 1f             	xor    eax,0x1f
c001f652:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f656:	75 24                	jne    c001f67c <__moddi3+0xec>
c001f658:	39 f7                	cmp    edi,esi
c001f65a:	72 06                	jb     c001f662 <__moddi3+0xd2>
c001f65c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f660:	77 0c                	ja     c001f66e <__moddi3+0xde>
c001f662:	89 e9                	mov    ecx,ebp
c001f664:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f668:	19 fe                	sbb    esi,edi
c001f66a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f66e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f672:	89 f2                	mov    edx,esi
c001f674:	e9 6b ff ff ff       	jmp    c001f5e4 <__moddi3+0x54>
c001f679:	8d 76 00             	lea    esi,[esi+0x0]
c001f67c:	b8 20 00 00 00       	mov    eax,0x20
c001f681:	89 c2                	mov    edx,eax
c001f683:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f687:	29 da                	sub    edx,ebx
c001f689:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f68d:	88 d9                	mov    cl,bl
c001f68f:	d3 e7                	shl    edi,cl
c001f691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f695:	88 d1                	mov    cl,dl
c001f697:	d3 e8                	shr    eax,cl
c001f699:	09 c7                	or     edi,eax
c001f69b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f69f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6a3:	89 d8                	mov    eax,ebx
c001f6a5:	88 d9                	mov    cl,bl
c001f6a7:	d3 e7                	shl    edi,cl
c001f6a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6ad:	89 f3                	mov    ebx,esi
c001f6af:	88 d1                	mov    cl,dl
c001f6b1:	d3 eb                	shr    ebx,cl
c001f6b3:	89 c7                	mov    edi,eax
c001f6b5:	88 c1                	mov    cl,al
c001f6b7:	d3 e6                	shl    esi,cl
c001f6b9:	89 e8                	mov    eax,ebp
c001f6bb:	88 d1                	mov    cl,dl
c001f6bd:	d3 e8                	shr    eax,cl
c001f6bf:	09 f0                	or     eax,esi
c001f6c1:	89 f9                	mov    ecx,edi
c001f6c3:	d3 e5                	shl    ebp,cl
c001f6c5:	89 da                	mov    edx,ebx
c001f6c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f6cb:	89 d3                	mov    ebx,edx
c001f6cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6d1:	89 c6                	mov    esi,eax
c001f6d3:	89 d1                	mov    ecx,edx
c001f6d5:	39 d3                	cmp    ebx,edx
c001f6d7:	72 27                	jb     c001f700 <__moddi3+0x170>
c001f6d9:	74 21                	je     c001f6fc <__moddi3+0x16c>
c001f6db:	29 f5                	sub    ebp,esi
c001f6dd:	19 cb                	sbb    ebx,ecx
c001f6df:	89 de                	mov    esi,ebx
c001f6e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f6e5:	d3 e6                	shl    esi,cl
c001f6e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f6eb:	89 f9                	mov    ecx,edi
c001f6ed:	d3 ed                	shr    ebp,cl
c001f6ef:	09 ee                	or     esi,ebp
c001f6f1:	89 f0                	mov    eax,esi
c001f6f3:	d3 eb                	shr    ebx,cl
c001f6f5:	89 da                	mov    edx,ebx
c001f6f7:	e9 e8 fe ff ff       	jmp    c001f5e4 <__moddi3+0x54>
c001f6fc:	39 c5                	cmp    ebp,eax
c001f6fe:	73 db                	jae    c001f6db <__moddi3+0x14b>
c001f700:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f704:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f708:	89 d1                	mov    ecx,edx
c001f70a:	89 c6                	mov    esi,eax
c001f70c:	eb cd                	jmp    c001f6db <__moddi3+0x14b>
c001f70e:	66 90                	xchg   ax,ax

c001f710 <__udivdi3>:
c001f710:	55                   	push   ebp
c001f711:	57                   	push   edi
c001f712:	56                   	push   esi
c001f713:	53                   	push   ebx
c001f714:	83 ec 1c             	sub    esp,0x1c
c001f717:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f71b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f71f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f723:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f727:	85 d2                	test   edx,edx
c001f729:	75 41                	jne    c001f76c <__udivdi3+0x5c>
c001f72b:	39 f7                	cmp    edi,esi
c001f72d:	76 15                	jbe    c001f744 <__udivdi3+0x34>
c001f72f:	89 e8                	mov    eax,ebp
c001f731:	89 f2                	mov    edx,esi
c001f733:	f7 f7                	div    edi
c001f735:	31 db                	xor    ebx,ebx
c001f737:	89 da                	mov    edx,ebx
c001f739:	83 c4 1c             	add    esp,0x1c
c001f73c:	5b                   	pop    ebx
c001f73d:	5e                   	pop    esi
c001f73e:	5f                   	pop    edi
c001f73f:	5d                   	pop    ebp
c001f740:	c3                   	ret    
c001f741:	8d 76 00             	lea    esi,[esi+0x0]
c001f744:	89 f9                	mov    ecx,edi
c001f746:	85 ff                	test   edi,edi
c001f748:	75 0b                	jne    c001f755 <__udivdi3+0x45>
c001f74a:	b8 01 00 00 00       	mov    eax,0x1
c001f74f:	31 d2                	xor    edx,edx
c001f751:	f7 f7                	div    edi
c001f753:	89 c1                	mov    ecx,eax
c001f755:	31 d2                	xor    edx,edx
c001f757:	89 f0                	mov    eax,esi
c001f759:	f7 f1                	div    ecx
c001f75b:	89 c3                	mov    ebx,eax
c001f75d:	89 e8                	mov    eax,ebp
c001f75f:	f7 f1                	div    ecx
c001f761:	89 da                	mov    edx,ebx
c001f763:	83 c4 1c             	add    esp,0x1c
c001f766:	5b                   	pop    ebx
c001f767:	5e                   	pop    esi
c001f768:	5f                   	pop    edi
c001f769:	5d                   	pop    ebp
c001f76a:	c3                   	ret    
c001f76b:	90                   	nop
c001f76c:	39 f2                	cmp    edx,esi
c001f76e:	77 1c                	ja     c001f78c <__udivdi3+0x7c>
c001f770:	0f bd da             	bsr    ebx,edx
c001f773:	83 f3 1f             	xor    ebx,0x1f
c001f776:	75 24                	jne    c001f79c <__udivdi3+0x8c>
c001f778:	39 f2                	cmp    edx,esi
c001f77a:	72 08                	jb     c001f784 <__udivdi3+0x74>
c001f77c:	39 ef                	cmp    edi,ebp
c001f77e:	0f 87 84 00 00 00    	ja     c001f808 <__udivdi3+0xf8>
c001f784:	b8 01 00 00 00       	mov    eax,0x1
c001f789:	eb ac                	jmp    c001f737 <__udivdi3+0x27>
c001f78b:	90                   	nop
c001f78c:	31 db                	xor    ebx,ebx
c001f78e:	31 c0                	xor    eax,eax
c001f790:	89 da                	mov    edx,ebx
c001f792:	83 c4 1c             	add    esp,0x1c
c001f795:	5b                   	pop    ebx
c001f796:	5e                   	pop    esi
c001f797:	5f                   	pop    edi
c001f798:	5d                   	pop    ebp
c001f799:	c3                   	ret    
c001f79a:	66 90                	xchg   ax,ax
c001f79c:	b8 20 00 00 00       	mov    eax,0x20
c001f7a1:	29 d8                	sub    eax,ebx
c001f7a3:	88 d9                	mov    cl,bl
c001f7a5:	d3 e2                	shl    edx,cl
c001f7a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f7ab:	89 fa                	mov    edx,edi
c001f7ad:	88 c1                	mov    cl,al
c001f7af:	d3 ea                	shr    edx,cl
c001f7b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7b5:	09 d1                	or     ecx,edx
c001f7b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f7bb:	88 d9                	mov    cl,bl
c001f7bd:	d3 e7                	shl    edi,cl
c001f7bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7c3:	89 f7                	mov    edi,esi
c001f7c5:	88 c1                	mov    cl,al
c001f7c7:	d3 ef                	shr    edi,cl
c001f7c9:	88 d9                	mov    cl,bl
c001f7cb:	d3 e6                	shl    esi,cl
c001f7cd:	89 ea                	mov    edx,ebp
c001f7cf:	88 c1                	mov    cl,al
c001f7d1:	d3 ea                	shr    edx,cl
c001f7d3:	09 d6                	or     esi,edx
c001f7d5:	89 f0                	mov    eax,esi
c001f7d7:	89 fa                	mov    edx,edi
c001f7d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7dd:	89 d7                	mov    edi,edx
c001f7df:	89 c6                	mov    esi,eax
c001f7e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7e5:	39 d7                	cmp    edi,edx
c001f7e7:	72 13                	jb     c001f7fc <__udivdi3+0xec>
c001f7e9:	74 09                	je     c001f7f4 <__udivdi3+0xe4>
c001f7eb:	89 f0                	mov    eax,esi
c001f7ed:	31 db                	xor    ebx,ebx
c001f7ef:	e9 43 ff ff ff       	jmp    c001f737 <__udivdi3+0x27>
c001f7f4:	88 d9                	mov    cl,bl
c001f7f6:	d3 e5                	shl    ebp,cl
c001f7f8:	39 c5                	cmp    ebp,eax
c001f7fa:	73 ef                	jae    c001f7eb <__udivdi3+0xdb>
c001f7fc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f7ff:	31 db                	xor    ebx,ebx
c001f801:	e9 31 ff ff ff       	jmp    c001f737 <__udivdi3+0x27>
c001f806:	66 90                	xchg   ax,ax
c001f808:	31 c0                	xor    eax,eax
c001f80a:	e9 28 ff ff ff       	jmp    c001f737 <__udivdi3+0x27>
c001f80f:	90                   	nop

c001f810 <__umoddi3>:
c001f810:	55                   	push   ebp
c001f811:	57                   	push   edi
c001f812:	56                   	push   esi
c001f813:	53                   	push   ebx
c001f814:	83 ec 1c             	sub    esp,0x1c
c001f817:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f81b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f81f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f823:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f827:	89 da                	mov    edx,ebx
c001f829:	85 c0                	test   eax,eax
c001f82b:	75 37                	jne    c001f864 <__umoddi3+0x54>
c001f82d:	39 df                	cmp    edi,ebx
c001f82f:	76 13                	jbe    c001f844 <__umoddi3+0x34>
c001f831:	89 f0                	mov    eax,esi
c001f833:	f7 f7                	div    edi
c001f835:	89 d0                	mov    eax,edx
c001f837:	31 d2                	xor    edx,edx
c001f839:	83 c4 1c             	add    esp,0x1c
c001f83c:	5b                   	pop    ebx
c001f83d:	5e                   	pop    esi
c001f83e:	5f                   	pop    edi
c001f83f:	5d                   	pop    ebp
c001f840:	c3                   	ret    
c001f841:	8d 76 00             	lea    esi,[esi+0x0]
c001f844:	89 fd                	mov    ebp,edi
c001f846:	85 ff                	test   edi,edi
c001f848:	75 0b                	jne    c001f855 <__umoddi3+0x45>
c001f84a:	b8 01 00 00 00       	mov    eax,0x1
c001f84f:	31 d2                	xor    edx,edx
c001f851:	f7 f7                	div    edi
c001f853:	89 c5                	mov    ebp,eax
c001f855:	89 d8                	mov    eax,ebx
c001f857:	31 d2                	xor    edx,edx
c001f859:	f7 f5                	div    ebp
c001f85b:	89 f0                	mov    eax,esi
c001f85d:	f7 f5                	div    ebp
c001f85f:	89 d0                	mov    eax,edx
c001f861:	eb d4                	jmp    c001f837 <__umoddi3+0x27>
c001f863:	90                   	nop
c001f864:	89 f1                	mov    ecx,esi
c001f866:	39 d8                	cmp    eax,ebx
c001f868:	76 0a                	jbe    c001f874 <__umoddi3+0x64>
c001f86a:	89 f0                	mov    eax,esi
c001f86c:	83 c4 1c             	add    esp,0x1c
c001f86f:	5b                   	pop    ebx
c001f870:	5e                   	pop    esi
c001f871:	5f                   	pop    edi
c001f872:	5d                   	pop    ebp
c001f873:	c3                   	ret    
c001f874:	0f bd e8             	bsr    ebp,eax
c001f877:	83 f5 1f             	xor    ebp,0x1f
c001f87a:	75 1c                	jne    c001f898 <__umoddi3+0x88>
c001f87c:	39 d8                	cmp    eax,ebx
c001f87e:	72 04                	jb     c001f884 <__umoddi3+0x74>
c001f880:	39 f7                	cmp    edi,esi
c001f882:	77 08                	ja     c001f88c <__umoddi3+0x7c>
c001f884:	89 da                	mov    edx,ebx
c001f886:	29 fe                	sub    esi,edi
c001f888:	19 c2                	sbb    edx,eax
c001f88a:	89 f1                	mov    ecx,esi
c001f88c:	89 c8                	mov    eax,ecx
c001f88e:	83 c4 1c             	add    esp,0x1c
c001f891:	5b                   	pop    ebx
c001f892:	5e                   	pop    esi
c001f893:	5f                   	pop    edi
c001f894:	5d                   	pop    ebp
c001f895:	c3                   	ret    
c001f896:	66 90                	xchg   ax,ax
c001f898:	ba 20 00 00 00       	mov    edx,0x20
c001f89d:	29 ea                	sub    edx,ebp
c001f89f:	89 e9                	mov    ecx,ebp
c001f8a1:	d3 e0                	shl    eax,cl
c001f8a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8a7:	89 f8                	mov    eax,edi
c001f8a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f8ad:	88 d1                	mov    cl,dl
c001f8af:	d3 e8                	shr    eax,cl
c001f8b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8b5:	09 c1                	or     ecx,eax
c001f8b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8bb:	89 e9                	mov    ecx,ebp
c001f8bd:	d3 e7                	shl    edi,cl
c001f8bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8c3:	89 d8                	mov    eax,ebx
c001f8c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8c9:	88 d1                	mov    cl,dl
c001f8cb:	d3 e8                	shr    eax,cl
c001f8cd:	89 c7                	mov    edi,eax
c001f8cf:	89 e9                	mov    ecx,ebp
c001f8d1:	d3 e3                	shl    ebx,cl
c001f8d3:	89 f0                	mov    eax,esi
c001f8d5:	88 d1                	mov    cl,dl
c001f8d7:	d3 e8                	shr    eax,cl
c001f8d9:	09 d8                	or     eax,ebx
c001f8db:	89 e9                	mov    ecx,ebp
c001f8dd:	d3 e6                	shl    esi,cl
c001f8df:	89 f3                	mov    ebx,esi
c001f8e1:	89 fa                	mov    edx,edi
c001f8e3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8e7:	89 d1                	mov    ecx,edx
c001f8e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8ed:	89 c6                	mov    esi,eax
c001f8ef:	89 d7                	mov    edi,edx
c001f8f1:	39 d1                	cmp    ecx,edx
c001f8f3:	72 27                	jb     c001f91c <__umoddi3+0x10c>
c001f8f5:	74 21                	je     c001f918 <__umoddi3+0x108>
c001f8f7:	89 ca                	mov    edx,ecx
c001f8f9:	29 f3                	sub    ebx,esi
c001f8fb:	19 fa                	sbb    edx,edi
c001f8fd:	89 d0                	mov    eax,edx
c001f8ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f903:	d3 e0                	shl    eax,cl
c001f905:	89 e9                	mov    ecx,ebp
c001f907:	d3 eb                	shr    ebx,cl
c001f909:	09 d8                	or     eax,ebx
c001f90b:	d3 ea                	shr    edx,cl
c001f90d:	83 c4 1c             	add    esp,0x1c
c001f910:	5b                   	pop    ebx
c001f911:	5e                   	pop    esi
c001f912:	5f                   	pop    edi
c001f913:	5d                   	pop    ebp
c001f914:	c3                   	ret    
c001f915:	8d 76 00             	lea    esi,[esi+0x0]
c001f918:	39 c3                	cmp    ebx,eax
c001f91a:	73 db                	jae    c001f8f7 <__umoddi3+0xe7>
c001f91c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f920:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f924:	89 d7                	mov    edi,edx
c001f926:	89 c6                	mov    esi,eax
c001f928:	eb cd                	jmp    c001f8f7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f92a <_init>:
c001f92a:	55                   	push   ebp
c001f92b:	89 e5                	mov    ebp,esp
c001f92d:	e8 c2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f932:	e8 e5 fa ff ff       	call   c001f41c <__do_global_ctors_aux>
c001f937:	5d                   	pop    ebp
c001f938:	c3                   	ret    

Disassembly of section .fini:

c001f939 <_fini>:
c001f939:	55                   	push   ebp
c001f93a:	89 e5                	mov    ebp,esp
c001f93c:	e8 43 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f941:	5d                   	pop    ebp
c001f942:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f944 <Computer::~Computer()>:
c001f944:	83 ec 0c             	sub    esp,0xc
c001f947:	ba 54 0c 02 c0       	mov    edx,0xc0020c54
c001f94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f950:	89 10                	mov    DWORD PTR [eax],edx
c001f952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f956:	83 ec 0c             	sub    esp,0xc
c001f959:	50                   	push   eax
c001f95a:	e8 7b cf fe ff       	call   c000c8da <Device::~Device()>
c001f95f:	83 c4 10             	add    esp,0x10
c001f962:	90                   	nop
c001f963:	83 c4 0c             	add    esp,0xc
c001f966:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f968 <Computer::~Computer()>:
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	83 ec 0c             	sub    esp,0xc
c001f96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f972:	e8 cd ff ff ff       	call   c001f944 <Computer::~Computer()>
c001f977:	83 c4 10             	add    esp,0x10
c001f97a:	83 ec 08             	sub    esp,0x8
c001f97d:	68 70 01 00 00       	push   0x170
c001f982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f986:	e8 81 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f98b:	83 c4 10             	add    esp,0x10
c001f98e:	83 c4 0c             	add    esp,0xc
c001f991:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f992 <idleCommon()>:
c001f992:	83 ec 0c             	sub    esp,0xc
c001f995:	fa                   	cli    
c001f996:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f99c:	e8 ab 66 ff ff       	call   c001604c <schedule()>
c001f9a1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f9a6:	48                   	dec    eax
c001f9a7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f9ac:	75 01                	jne    c001f9af <idleCommon()+0x1d>
c001f9ae:	fb                   	sti    
c001f9af:	83 c4 0c             	add    esp,0xc
c001f9b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f9b4 <LinkedList<UnixFile>::~LinkedList()>:
c001f9b4:	90                   	nop
c001f9b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f9b6 <LinkedList<UnixFile>::LinkedList()>:
c001f9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9f6:	90                   	nop
c001f9f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f9f8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f9f8:	83 ec 0c             	sub    esp,0xc
c001f9fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa00:	75 10                	jne    c001fa12 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa02:	83 ec 0c             	sub    esp,0xc
c001fa05:	68 68 0e 02 c0       	push   0xc0020e68
c001fa0a:	e8 90 1b ff ff       	call   c001159f <KePanic(char const*)>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa16:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa18:	85 c0                	test   eax,eax
c001fa1a:	74 34                	je     c001fa50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa23:	85 c0                	test   eax,eax
c001fa25:	74 29                	je     c001fa50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa3d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa4e:	eb 65                	jmp    c001fab5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa54:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa56:	85 c0                	test   eax,eax
c001fa58:	75 4b                	jne    c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa61:	85 c0                	test   eax,eax
c001fa63:	75 40                	jne    c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6d:	89 10                	mov    DWORD PTR [eax],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa8f:	85 c0                	test   eax,eax
c001fa91:	74 22                	je     c001fab5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa93:	83 ec 0c             	sub    esp,0xc
c001fa96:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fa9b:	e8 ff 1a ff ff       	call   c001159f <KePanic(char const*)>
c001faa0:	83 c4 10             	add    esp,0x10
c001faa3:	eb 10                	jmp    c001fab5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001faa5:	83 ec 0c             	sub    esp,0xc
c001faa8:	68 94 0e 02 c0       	push   0xc0020e94
c001faad:	e8 ed 1a ff ff       	call   c001159f <KePanic(char const*)>
c001fab2:	83 c4 10             	add    esp,0x10
c001fab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fabc:	8d 50 01             	lea    edx,[eax+0x1]
c001fabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fac6:	90                   	nop
c001fac7:	83 c4 0c             	add    esp,0xc
c001faca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001facc <LinkedList<UnixFile>::getFirstElement()>:
c001facc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fad4 <LinkedList<UnixFile>::removeFirst()>:
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fadd:	85 c0                	test   eax,eax
c001fadf:	75 12                	jne    c001faf3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fae1:	83 ec 0c             	sub    esp,0xc
c001fae4:	68 a0 0e 02 c0       	push   0xc0020ea0
c001fae9:	e8 b1 1a ff ff       	call   c001159f <KePanic(char const*)>
c001faee:	83 c4 10             	add    esp,0x10
c001faf1:	eb 7e                	jmp    c001fb71 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fafa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafd:	85 c0                	test   eax,eax
c001faff:	74 10                	je     c001fb11 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	68 eb 0e 02 c0       	push   0xc0020eeb
c001fb09:	e8 91 1a ff ff       	call   c001159f <KePanic(char const*)>
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb15:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb1a:	85 c0                	test   eax,eax
c001fb1c:	75 33                	jne    c001fb51 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb3a:	83 f8 01             	cmp    eax,0x1
c001fb3d:	74 21                	je     c001fb60 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	68 c4 0e 02 c0       	push   0xc0020ec4
c001fb47:	e8 53 1a ff ff       	call   c001159f <KePanic(char const*)>
c001fb4c:	83 c4 10             	add    esp,0x10
c001fb4f:	eb 0f                	jmp    c001fb60 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb55:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb57:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5e:	89 10                	mov    DWORD PTR [eax],edx
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb67:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb71:	83 c4 0c             	add    esp,0xc
c001fb74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb76 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb7e <DriverlessDevice::~DriverlessDevice()>:
c001fb7e:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c001fb83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb87:	89 10                	mov    DWORD PTR [eax],edx
c001fb89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb8d:	50                   	push   eax
c001fb8e:	e8 47 cd fe ff       	call   c000c8da <Device::~Device()>
c001fb93:	83 c4 04             	add    esp,0x4
c001fb96:	90                   	nop
c001fb97:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb98 <DriverlessDevice::~DriverlessDevice()>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	83 ec 0c             	sub    esp,0xc
c001fb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba2:	e8 d7 ff ff ff       	call   c001fb7e <DriverlessDevice::~DriverlessDevice()>
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	83 ec 08             	sub    esp,0x8
c001fbad:	68 58 01 00 00       	push   0x158
c001fbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbb6:	e8 51 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	83 c4 0c             	add    esp,0xc
c001fbc1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fbc2 <LinkedList<Device>::addElement(Device*)>:
c001fbc2:	83 ec 0c             	sub    esp,0xc
c001fbc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbca:	75 10                	jne    c001fbdc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fbcc:	83 ec 0c             	sub    esp,0xc
c001fbcf:	68 68 0e 02 c0       	push   0xc0020e68
c001fbd4:	e8 c6 19 ff ff       	call   c001159f <KePanic(char const*)>
c001fbd9:	83 c4 10             	add    esp,0x10
c001fbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe2:	85 c0                	test   eax,eax
c001fbe4:	74 3a                	je     c001fc20 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbed:	85 c0                	test   eax,eax
c001fbef:	74 2f                	je     c001fc20 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbfc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc0a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc14:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc1e:	eb 68                	jmp    c001fc88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc24:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc26:	85 c0                	test   eax,eax
c001fc28:	75 4e                	jne    c001fc78 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc31:	85 c0                	test   eax,eax
c001fc33:	75 43                	jne    c001fc78 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc3d:	89 10                	mov    DWORD PTR [eax],edx
c001fc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc51:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc62:	85 c0                	test   eax,eax
c001fc64:	74 22                	je     c001fc88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc66:	83 ec 0c             	sub    esp,0xc
c001fc69:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fc6e:	e8 2c 19 ff ff       	call   c001159f <KePanic(char const*)>
c001fc73:	83 c4 10             	add    esp,0x10
c001fc76:	eb 10                	jmp    c001fc88 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc78:	83 ec 0c             	sub    esp,0xc
c001fc7b:	68 94 0e 02 c0       	push   0xc0020e94
c001fc80:	e8 1a 19 ff ff       	call   c001159f <KePanic(char const*)>
c001fc85:	83 c4 10             	add    esp,0x10
c001fc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc8f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc99:	90                   	nop
c001fc9a:	83 c4 0c             	add    esp,0xc
c001fc9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc9e <LinkedList<Device>::LinkedList()>:
c001fc9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcde:	90                   	nop
c001fcdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fce0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce6:	85 c0                	test   eax,eax
c001fce8:	75 0e                	jne    c001fcf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf1:	85 c0                	test   eax,eax
c001fcf3:	75 03                	jne    c001fcf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcf5:	b0 01                	mov    al,0x1
c001fcf7:	c3                   	ret    
c001fcf8:	b0 00                	mov    al,0x0
c001fcfa:	90                   	nop
c001fcfb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fcfc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fcfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd04:	83 ec 0c             	sub    esp,0xc
c001fd07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd0d:	85 c0                	test   eax,eax
c001fd0f:	75 17                	jne    c001fd28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd11:	83 ec 0c             	sub    esp,0xc
c001fd14:	68 a0 0e 02 c0       	push   0xc0020ea0
c001fd19:	e8 81 18 ff ff       	call   c001159f <KePanic(char const*)>
c001fd1e:	83 c4 10             	add    esp,0x10
c001fd21:	e9 96 00 00 00       	jmp    c001fdbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd26:	66 90                	xchg   ax,ax
c001fd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd32:	85 c0                	test   eax,eax
c001fd34:	0f 95 c0             	setne  al
c001fd37:	0f b6 c0             	movzx  eax,al
c001fd3a:	85 c0                	test   eax,eax
c001fd3c:	74 12                	je     c001fd50 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd3e:	83 ec 0c             	sub    esp,0xc
c001fd41:	68 eb 0e 02 c0       	push   0xc0020eeb
c001fd46:	e8 54 18 ff ff       	call   c001159f <KePanic(char const*)>
c001fd4b:	83 c4 10             	add    esp,0x10
c001fd4e:	66 90                	xchg   ax,ax
c001fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd54:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd59:	85 c0                	test   eax,eax
c001fd5b:	0f 94 c0             	sete   al
c001fd5e:	0f b6 c0             	movzx  eax,al
c001fd61:	85 c0                	test   eax,eax
c001fd63:	74 33                	je     c001fd98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd81:	83 f8 01             	cmp    eax,0x1
c001fd84:	74 22                	je     c001fda8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	68 c4 0e 02 c0       	push   0xc0020ec4
c001fd8e:	e8 0c 18 ff ff       	call   c001159f <KePanic(char const*)>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	eb 10                	jmp    c001fda8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd9e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fda1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda5:	89 10                	mov    DWORD PTR [eax],edx
c001fda7:	90                   	nop
c001fda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdaf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdb9:	8d 76 00             	lea    esi,[esi+0x0]
c001fdbc:	83 c4 0c             	add    esp,0xc
c001fdbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fdc0:	83 ec 0c             	sub    esp,0xc
c001fdc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fdc8:	75 12                	jne    c001fddc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	68 68 0e 02 c0       	push   0xc0020e68
c001fdd2:	e8 c8 17 ff ff       	call   c001159f <KePanic(char const*)>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	66 90                	xchg   ax,ax
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde2:	85 c0                	test   eax,eax
c001fde4:	74 36                	je     c001fe1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fded:	85 c0                	test   eax,eax
c001fdef:	74 2b                	je     c001fe1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdfc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe18:	eb 6a                	jmp    c001fe84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe1a:	66 90                	xchg   ax,ax
c001fe1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe22:	85 c0                	test   eax,eax
c001fe24:	75 4e                	jne    c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe2d:	85 c0                	test   eax,eax
c001fe2f:	75 43                	jne    c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe39:	89 10                	mov    DWORD PTR [eax],edx
c001fe3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe5b:	85 c0                	test   eax,eax
c001fe5d:	74 25                	je     c001fe84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe5f:	83 ec 0c             	sub    esp,0xc
c001fe62:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fe67:	e8 33 17 ff ff       	call   c001159f <KePanic(char const*)>
c001fe6c:	83 c4 10             	add    esp,0x10
c001fe6f:	eb 13                	jmp    c001fe84 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe71:	8d 76 00             	lea    esi,[esi+0x0]
c001fe74:	83 ec 0c             	sub    esp,0xc
c001fe77:	68 94 0e 02 c0       	push   0xc0020e94
c001fe7c:	e8 1e 17 ff ff       	call   c001159f <KePanic(char const*)>
c001fe81:	83 c4 10             	add    esp,0x10
c001fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe8b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe95:	90                   	nop
c001fe96:	83 c4 0c             	add    esp,0xc
c001fe99:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe9c <ACPI::~ACPI()>:
c001fe9c:	83 ec 0c             	sub    esp,0xc
c001fe9f:	ba 24 21 02 c0       	mov    edx,0xc0022124
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	89 10                	mov    DWORD PTR [eax],edx
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	83 ec 0c             	sub    esp,0xc
c001feb1:	50                   	push   eax
c001feb2:	e8 23 ca fe ff       	call   c000c8da <Device::~Device()>
c001feb7:	83 c4 10             	add    esp,0x10
c001feba:	90                   	nop
c001febb:	83 c4 0c             	add    esp,0xc
c001febe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fec0 <ACPI::~ACPI()>:
c001fec0:	83 ec 0c             	sub    esp,0xc
c001fec3:	83 ec 0c             	sub    esp,0xc
c001fec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feca:	e8 cd ff ff ff       	call   c001fe9c <ACPI::~ACPI()>
c001fecf:	83 c4 10             	add    esp,0x10
c001fed2:	83 ec 08             	sub    esp,0x8
c001fed5:	68 64 12 00 00       	push   0x1264
c001feda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fede:	e8 29 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fee3:	83 c4 10             	add    esp,0x10
c001fee6:	83 c4 0c             	add    esp,0xc
c001fee9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001feec <LinkedList<Device>::~LinkedList()>:
c001feec:	90                   	nop
c001feed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fef0 <LinkedList<Device>::isEmpty()>:
c001fef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fef4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fef6:	85 c0                	test   eax,eax
c001fef8:	75 0e                	jne    c001ff08 <LinkedList<Device>::isEmpty()+0x18>
c001fefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fefe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff01:	85 c0                	test   eax,eax
c001ff03:	75 03                	jne    c001ff08 <LinkedList<Device>::isEmpty()+0x18>
c001ff05:	b0 01                	mov    al,0x1
c001ff07:	c3                   	ret    
c001ff08:	b0 00                	mov    al,0x0
c001ff0a:	90                   	nop
c001ff0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff0c <LinkedList<Device>::getFirstElement()>:
c001ff0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff14 <LinkedList<Device>::removeFirst()>:
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff1d:	85 c0                	test   eax,eax
c001ff1f:	75 17                	jne    c001ff38 <LinkedList<Device>::removeFirst()+0x24>
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	68 a0 0e 02 c0       	push   0xc0020ea0
c001ff29:	e8 71 16 ff ff       	call   c001159f <KePanic(char const*)>
c001ff2e:	83 c4 10             	add    esp,0x10
c001ff31:	e9 92 00 00 00       	jmp    c001ffc8 <LinkedList<Device>::removeFirst()+0xb4>
c001ff36:	66 90                	xchg   ax,ax
c001ff38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff3f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff45:	85 c0                	test   eax,eax
c001ff47:	74 13                	je     c001ff5c <LinkedList<Device>::removeFirst()+0x48>
c001ff49:	83 ec 0c             	sub    esp,0xc
c001ff4c:	68 eb 0e 02 c0       	push   0xc0020eeb
c001ff51:	e8 49 16 ff ff       	call   c001159f <KePanic(char const*)>
c001ff56:	83 c4 10             	add    esp,0x10
c001ff59:	8d 76 00             	lea    esi,[esi+0x0]
c001ff5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff62:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff68:	85 c0                	test   eax,eax
c001ff6a:	75 34                	jne    c001ffa0 <LinkedList<Device>::removeFirst()+0x8c>
c001ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff88:	83 f8 01             	cmp    eax,0x1
c001ff8b:	74 27                	je     c001ffb4 <LinkedList<Device>::removeFirst()+0xa0>
c001ff8d:	83 ec 0c             	sub    esp,0xc
c001ff90:	68 c4 0e 02 c0       	push   0xc0020ec4
c001ff95:	e8 05 16 ff ff       	call   c001159f <KePanic(char const*)>
c001ff9a:	83 c4 10             	add    esp,0x10
c001ff9d:	eb 15                	jmp    c001ffb4 <LinkedList<Device>::removeFirst()+0xa0>
c001ff9f:	90                   	nop
c001ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffa6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ffac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb0:	89 10                	mov    DWORD PTR [eax],edx
c001ffb2:	66 90                	xchg   ax,ax
c001ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffbb:	8d 50 ff             	lea    edx,[eax-0x1]
c001ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffc5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffc8:	83 c4 0c             	add    esp,0xc
c001ffcb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ffcc <CPU::~CPU()>:
c001ffcc:	83 ec 0c             	sub    esp,0xc
c001ffcf:	ba cc 22 02 c0       	mov    edx,0xc00222cc
c001ffd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd8:	89 10                	mov    DWORD PTR [eax],edx
c001ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffde:	83 ec 0c             	sub    esp,0xc
c001ffe1:	50                   	push   eax
c001ffe2:	e8 f3 c8 fe ff       	call   c000c8da <Device::~Device()>
c001ffe7:	83 c4 10             	add    esp,0x10
c001ffea:	90                   	nop
c001ffeb:	83 c4 0c             	add    esp,0xc
c001ffee:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fff0 <CPU::~CPU()>:
c001fff0:	83 ec 0c             	sub    esp,0xc
c001fff3:	83 ec 0c             	sub    esp,0xc
c001fff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffa:	e8 cd ff ff ff       	call   c001ffcc <CPU::~CPU()>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	83 ec 08             	sub    esp,0x8
c0020005:	68 94 11 00 00       	push   0x1194
c002000a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000e:	e8 f9 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	83 c4 0c             	add    esp,0xc
c0020019:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002001c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002001c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020020:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020023:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020024 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020024:	90                   	nop
c0020025:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020028 <ThreadControlBlock::ThreadControlBlock()>:
c0020028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020033:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020037:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002003e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020042:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020058:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002005f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020063:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020067:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002006f:	90                   	nop
c0020070:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020074 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020078:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002007e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020082:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002008d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002009e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200b4:	90                   	nop
c00200b5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00200b6 <PCI::~PCI()>:
c00200b6:	83 ec 0c             	sub    esp,0xc
c00200b9:	ba ac 31 02 c0       	mov    edx,0xc00231ac
c00200be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c2:	89 10                	mov    DWORD PTR [eax],edx
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	83 ec 0c             	sub    esp,0xc
c00200cb:	50                   	push   eax
c00200cc:	e8 9b c2 fe ff       	call   c000c36c <Bus::~Bus()>
c00200d1:	83 c4 10             	add    esp,0x10
c00200d4:	90                   	nop
c00200d5:	83 c4 0c             	add    esp,0xc
c00200d8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200da <PCI::~PCI()>:
c00200da:	83 ec 0c             	sub    esp,0xc
c00200dd:	83 ec 0c             	sub    esp,0xc
c00200e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e4:	e8 cd ff ff ff       	call   c00200b6 <PCI::~PCI()>
c00200e9:	83 c4 10             	add    esp,0x10
c00200ec:	83 ec 08             	sub    esp,0x8
c00200ef:	68 5c 01 00 00       	push   0x15c
c00200f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f8:	e8 0f a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200fd:	83 c4 10             	add    esp,0x10
c0020100:	83 c4 0c             	add    esp,0xc
c0020103:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020104 <IDE::~IDE()>:
c0020104:	83 ec 0c             	sub    esp,0xc
c0020107:	ba 60 32 02 c0       	mov    edx,0xc0023260
c002010c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020110:	89 10                	mov    DWORD PTR [eax],edx
c0020112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020116:	83 ec 0c             	sub    esp,0xc
c0020119:	50                   	push   eax
c002011a:	e8 35 cc fe ff       	call   c000cd54 <HardDiskController::~HardDiskController()>
c002011f:	83 c4 10             	add    esp,0x10
c0020122:	90                   	nop
c0020123:	83 c4 0c             	add    esp,0xc
c0020126:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020128 <IDE::~IDE()>:
c0020128:	83 ec 0c             	sub    esp,0xc
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020132:	e8 cd ff ff ff       	call   c0020104 <IDE::~IDE()>
c0020137:	83 c4 10             	add    esp,0x10
c002013a:	83 ec 08             	sub    esp,0x8
c002013d:	68 70 02 00 00       	push   0x270
c0020142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020146:	e8 c1 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002014b:	83 c4 10             	add    esp,0x10
c002014e:	83 c4 0c             	add    esp,0xc
c0020151:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020152 <SATABus::~SATABus()>:
c0020152:	83 ec 0c             	sub    esp,0xc
c0020155:	ba b0 32 02 c0       	mov    edx,0xc00232b0
c002015a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002015e:	89 10                	mov    DWORD PTR [eax],edx
c0020160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020164:	83 ec 0c             	sub    esp,0xc
c0020167:	50                   	push   eax
c0020168:	e8 e7 cb fe ff       	call   c000cd54 <HardDiskController::~HardDiskController()>
c002016d:	83 c4 10             	add    esp,0x10
c0020170:	90                   	nop
c0020171:	83 c4 0c             	add    esp,0xc
c0020174:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020176 <SATABus::~SATABus()>:
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	83 ec 0c             	sub    esp,0xc
c002017c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020180:	e8 cd ff ff ff       	call   c0020152 <SATABus::~SATABus()>
c0020185:	83 c4 10             	add    esp,0x10
c0020188:	83 ec 08             	sub    esp,0x8
c002018b:	68 64 01 00 00       	push   0x164
c0020190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020194:	e8 73 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020199:	83 c4 10             	add    esp,0x10
c002019c:	83 c4 0c             	add    esp,0xc
c002019f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00201a0 <ATA::~ATA()>:
c00201a0:	83 ec 0c             	sub    esp,0xc
c00201a3:	ba f0 32 02 c0       	mov    edx,0xc00232f0
c00201a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ac:	89 10                	mov    DWORD PTR [eax],edx
c00201ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b2:	83 ec 0c             	sub    esp,0xc
c00201b5:	50                   	push   eax
c00201b6:	e8 7b cc fe ff       	call   c000ce36 <PhysicalDisk::~PhysicalDisk()>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	90                   	nop
c00201bf:	83 c4 0c             	add    esp,0xc
c00201c2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00201c4 <ATA::~ATA()>:
c00201c4:	83 ec 0c             	sub    esp,0xc
c00201c7:	83 ec 0c             	sub    esp,0xc
c00201ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ce:	e8 cd ff ff ff       	call   c00201a0 <ATA::~ATA()>
c00201d3:	83 c4 10             	add    esp,0x10
c00201d6:	83 ec 08             	sub    esp,0x8
c00201d9:	68 7c 01 00 00       	push   0x17c
c00201de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e2:	e8 25 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201e7:	83 c4 10             	add    esp,0x10
c00201ea:	83 c4 0c             	add    esp,0xc
c00201ed:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00201ee <ATAPI::~ATAPI()>:
c00201ee:	83 ec 0c             	sub    esp,0xc
c00201f1:	ba 38 33 02 c0       	mov    edx,0xc0023338
c00201f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fa:	89 10                	mov    DWORD PTR [eax],edx
c00201fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020200:	83 ec 0c             	sub    esp,0xc
c0020203:	50                   	push   eax
c0020204:	e8 2d cc fe ff       	call   c000ce36 <PhysicalDisk::~PhysicalDisk()>
c0020209:	83 c4 10             	add    esp,0x10
c002020c:	90                   	nop
c002020d:	83 c4 0c             	add    esp,0xc
c0020210:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020212 <ATAPI::~ATAPI()>:
c0020212:	83 ec 0c             	sub    esp,0xc
c0020215:	83 ec 0c             	sub    esp,0xc
c0020218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002021c:	e8 cd ff ff ff       	call   c00201ee <ATAPI::~ATAPI()>
c0020221:	83 c4 10             	add    esp,0x10
c0020224:	83 ec 08             	sub    esp,0x8
c0020227:	68 84 01 00 00       	push   0x184
c002022c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020230:	e8 d7 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020235:	83 c4 10             	add    esp,0x10
c0020238:	83 c4 0c             	add    esp,0xc
c002023b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002023c <SATA::~SATA()>:
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	ba ec 33 02 c0       	mov    edx,0xc00233ec
c0020244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020248:	89 10                	mov    DWORD PTR [eax],edx
c002024a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024e:	83 ec 0c             	sub    esp,0xc
c0020251:	50                   	push   eax
c0020252:	e8 df cb fe ff       	call   c000ce36 <PhysicalDisk::~PhysicalDisk()>
c0020257:	83 c4 10             	add    esp,0x10
c002025a:	90                   	nop
c002025b:	83 c4 0c             	add    esp,0xc
c002025e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020260 <SATA::~SATA()>:
c0020260:	83 ec 0c             	sub    esp,0xc
c0020263:	83 ec 0c             	sub    esp,0xc
c0020266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026a:	e8 cd ff ff ff       	call   c002023c <SATA::~SATA()>
c002026f:	83 c4 10             	add    esp,0x10
c0020272:	83 ec 08             	sub    esp,0x8
c0020275:	68 7c 01 00 00       	push   0x17c
c002027a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002027e:	e8 89 a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020283:	83 c4 10             	add    esp,0x10
c0020286:	83 c4 0c             	add    esp,0xc
c0020289:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002028a <SATAPI::~SATAPI()>:
c002028a:	83 ec 0c             	sub    esp,0xc
c002028d:	ba 10 35 02 c0       	mov    edx,0xc0023510
c0020292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020296:	89 10                	mov    DWORD PTR [eax],edx
c0020298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029c:	83 ec 0c             	sub    esp,0xc
c002029f:	50                   	push   eax
c00202a0:	e8 91 cb fe ff       	call   c000ce36 <PhysicalDisk::~PhysicalDisk()>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	90                   	nop
c00202a9:	83 c4 0c             	add    esp,0xc
c00202ac:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00202ae <SATAPI::~SATAPI()>:
c00202ae:	83 ec 0c             	sub    esp,0xc
c00202b1:	83 ec 0c             	sub    esp,0xc
c00202b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202b8:	e8 cd ff ff ff       	call   c002028a <SATAPI::~SATAPI()>
c00202bd:	83 c4 10             	add    esp,0x10
c00202c0:	83 ec 08             	sub    esp,0x8
c00202c3:	68 84 01 00 00       	push   0x184
c00202c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202cc:	e8 3b a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202d1:	83 c4 10             	add    esp,0x10
c00202d4:	83 c4 0c             	add    esp,0xc
c00202d7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202d8 <IOAPIC::~IOAPIC()>:
c00202d8:	83 ec 0c             	sub    esp,0xc
c00202db:	ba 50 35 02 c0       	mov    edx,0xc0023550
c00202e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e4:	89 10                	mov    DWORD PTR [eax],edx
c00202e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ea:	83 ec 0c             	sub    esp,0xc
c00202ed:	50                   	push   eax
c00202ee:	e8 e7 c5 fe ff       	call   c000c8da <Device::~Device()>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	90                   	nop
c00202f7:	83 c4 0c             	add    esp,0xc
c00202fa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00202fc <IOAPIC::~IOAPIC()>:
c00202fc:	83 ec 0c             	sub    esp,0xc
c00202ff:	83 ec 0c             	sub    esp,0xc
c0020302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020306:	e8 cd ff ff ff       	call   c00202d8 <IOAPIC::~IOAPIC()>
c002030b:	83 c4 10             	add    esp,0x10
c002030e:	83 ec 08             	sub    esp,0x8
c0020311:	68 68 01 00 00       	push   0x168
c0020316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002031a:	e8 ed a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002031f:	83 c4 10             	add    esp,0x10
c0020322:	83 c4 0c             	add    esp,0xc
c0020325:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020328 <APICTimer::~APICTimer()>:
c0020328:	83 ec 0c             	sub    esp,0xc
c002032b:	ba 98 35 02 c0       	mov    edx,0xc0023598
c0020330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020334:	89 10                	mov    DWORD PTR [eax],edx
c0020336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033a:	83 ec 0c             	sub    esp,0xc
c002033d:	50                   	push   eax
c002033e:	e8 6d e0 fe ff       	call   c000e3b0 <Timer::~Timer()>
c0020343:	83 c4 10             	add    esp,0x10
c0020346:	90                   	nop
c0020347:	83 c4 0c             	add    esp,0xc
c002034a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002034c <APICTimer::~APICTimer()>:
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	83 ec 0c             	sub    esp,0xc
c0020352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020356:	e8 cd ff ff ff       	call   c0020328 <APICTimer::~APICTimer()>
c002035b:	83 c4 10             	add    esp,0x10
c002035e:	83 ec 08             	sub    esp,0x8
c0020361:	68 60 01 00 00       	push   0x160
c0020366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002036a:	e8 9d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002036f:	83 c4 10             	add    esp,0x10
c0020372:	83 c4 0c             	add    esp,0xc
c0020375:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020378 <PIT::~PIT()>:
c0020378:	83 ec 0c             	sub    esp,0xc
c002037b:	ba e8 35 02 c0       	mov    edx,0xc00235e8
c0020380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020384:	89 10                	mov    DWORD PTR [eax],edx
c0020386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002038a:	83 ec 0c             	sub    esp,0xc
c002038d:	50                   	push   eax
c002038e:	e8 1d e0 fe ff       	call   c000e3b0 <Timer::~Timer()>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	90                   	nop
c0020397:	83 c4 0c             	add    esp,0xc
c002039a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002039c <PIT::~PIT()>:
c002039c:	83 ec 0c             	sub    esp,0xc
c002039f:	83 ec 0c             	sub    esp,0xc
c00203a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a6:	e8 cd ff ff ff       	call   c0020378 <PIT::~PIT()>
c00203ab:	83 c4 10             	add    esp,0x10
c00203ae:	83 ec 08             	sub    esp,0x8
c00203b1:	68 5c 01 00 00       	push   0x15c
c00203b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ba:	e8 4d a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00203bf:	83 c4 10             	add    esp,0x10
c00203c2:	83 c4 0c             	add    esp,0xc
c00203c5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be fd 23 02 c0       	mov    esi,0xc00223fd
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 19 24 02 c0       	mov    esi,0xc0022419
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
