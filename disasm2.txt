
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 4e 67 01 00       	call   c001676e <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 4a 03 c0       	mov    eax,0xc0034ae4
c0000025:	3d e4 4a 03 c0       	cmp    eax,0xc0034ae4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 4a 03 c0       	push   0xc0034ae4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 4a 03 c0       	mov    eax,0xc0034ae4
c0000051:	2d e4 4a 03 c0       	sub    eax,0xc0034ae4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 4a 03 c0       	push   0xc0034ae4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 5c f6 02 c0       	mov    ebx,0xc002f65c
c0000097:	81 eb 58 f6 02 c0    	sub    ebx,0xc002f658
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 58 f6 02 c0       	mov    esi,0xc002f658
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 4a 03 c0       	push   0xc0034ae4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 e4 4a 03 c0       	push   0xc0034ae4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 bb 4a 02 00       	call   c0024d68 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 3c 90 01 00       	call   c0019301 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 99 4a 02 00       	call   c0024d68 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 a6 4f 02 00       	call   c0025294 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 39 54 02 00       	call   c0025730 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 23 01 02 00       	jmp    c00204a2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 f6 02 c0 02 	test   BYTE PTR [edx-0x3ffd09a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 f6 02 c0 01 	test   BYTE PTR [edx-0x3ffd09a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 f6 02 c0 08 	test   BYTE PTR [edx-0x3ffd09a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 f6 02 c0 08 	test   BYTE PTR [edx-0x3ffd09a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 f6 02 c0 04 	test   BYTE PTR [ecx-0x3ffd09a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 f6 02 c0 01 	test   BYTE PTR [edx-0x3ffd09a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	83 ec 0c             	sub    esp,0xc
c0000c73:	83 ec 0c             	sub    esp,0xc
c0000c76:	68 64 f7 02 c0       	push   0xc002f764
c0000c7b:	e8 94 13 02 00       	call   c0022014 <KeCPuts>
c0000c80:	83 c4 10             	add    esp,0x10
c0000c83:	90                   	nop
c0000c84:	83 c4 0c             	add    esp,0xc
c0000c87:	c3                   	ret    

c0000c88 <tcpip_callback_with_block>:
c0000c88:	83 ec 0c             	sub    esp,0xc
c0000c8b:	83 ec 0c             	sub    esp,0xc
c0000c8e:	68 9f f7 02 c0       	push   0xc002f79f
c0000c93:	e8 64 13 02 00       	call   c0021ffc <KeCPanic>
c0000c98:	83 c4 10             	add    esp,0x10
c0000c9b:	90                   	nop
c0000c9c:	83 c4 0c             	add    esp,0xc
c0000c9f:	c3                   	ret    

c0000ca0 <sys_sem_new>:
c0000ca0:	83 ec 1c             	sub    esp,0x1c
c0000ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ca7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000cab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000cb0:	83 ec 08             	sub    esp,0x8
c0000cb3:	50                   	push   eax
c0000cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000cb8:	e8 7f 12 02 00       	call   c0021f3c <KeNetCreateSemaphore>
c0000cbd:	83 c4 10             	add    esp,0x10
c0000cc0:	b0 00                	mov    al,0x0
c0000cc2:	83 c4 1c             	add    esp,0x1c
c0000cc5:	c3                   	ret    
c0000cc6:	66 90                	xchg   ax,ax

c0000cc8 <sys_sem_free>:
c0000cc8:	83 ec 0c             	sub    esp,0xc
c0000ccb:	83 ec 0c             	sub    esp,0xc
c0000cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd2:	e8 a9 12 02 00       	call   c0021f80 <KeNetFreeSemaphore>
c0000cd7:	83 c4 10             	add    esp,0x10
c0000cda:	90                   	nop
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_sem_signal>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cea:	e8 ad 12 02 00       	call   c0021f9c <KeNetSignalSemaphore>
c0000cef:	83 c4 10             	add    esp,0x10
c0000cf2:	90                   	nop
c0000cf3:	83 c4 0c             	add    esp,0xc
c0000cf6:	c3                   	ret    
c0000cf7:	90                   	nop

c0000cf8 <sys_arch_sem_wait>:
c0000cf8:	83 ec 0c             	sub    esp,0xc
c0000cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000cff:	83 ec 08             	sub    esp,0x8
c0000d02:	50                   	push   eax
c0000d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000d07:	e8 ac 12 02 00       	call   c0021fb8 <KeNetWaitSemaphore>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	83 c4 0c             	add    esp,0xc
c0000d12:	c3                   	ret    
c0000d13:	90                   	nop

c0000d14 <sys_mbox_new>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 b9 f7 02 c0       	push   0xc002f7b9
c0000d1f:	e8 d8 12 02 00       	call   c0021ffc <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	b0 00                	mov    al,0x0
c0000d29:	83 c4 0c             	add    esp,0xc
c0000d2c:	c3                   	ret    
c0000d2d:	8d 76 00             	lea    esi,[esi+0x0]

c0000d30 <sys_mbox_free>:
c0000d30:	83 ec 0c             	sub    esp,0xc
c0000d33:	83 ec 0c             	sub    esp,0xc
c0000d36:	68 c6 f7 02 c0       	push   0xc002f7c6
c0000d3b:	e8 bc 12 02 00       	call   c0021ffc <KeCPanic>
c0000d40:	83 c4 10             	add    esp,0x10
c0000d43:	90                   	nop
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_mbox_post>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 d4 f7 02 c0       	push   0xc002f7d4
c0000d53:	e8 a4 12 02 00       	call   c0021ffc <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	90                   	nop
c0000d5c:	83 c4 0c             	add    esp,0xc
c0000d5f:	c3                   	ret    

c0000d60 <sys_arch_mbox_fetch>:
c0000d60:	83 ec 0c             	sub    esp,0xc
c0000d63:	83 ec 0c             	sub    esp,0xc
c0000d66:	68 e2 f7 02 c0       	push   0xc002f7e2
c0000d6b:	e8 8c 12 02 00       	call   c0021ffc <KeCPanic>
c0000d70:	83 c4 10             	add    esp,0x10
c0000d73:	b8 00 00 00 00       	mov    eax,0x0
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_arch_mbox_tryfetch>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 0c             	sub    esp,0xc
c0000d82:	68 f6 f7 02 c0       	push   0xc002f7f6
c0000d87:	e8 70 12 02 00       	call   c0021ffc <KeCPanic>
c0000d8c:	83 c4 10             	add    esp,0x10
c0000d8f:	b8 00 00 00 00       	mov    eax,0x0
c0000d94:	83 c4 0c             	add    esp,0xc
c0000d97:	c3                   	ret    

c0000d98 <sys_mbox_trypost>:
c0000d98:	83 ec 0c             	sub    esp,0xc
c0000d9b:	83 ec 0c             	sub    esp,0xc
c0000d9e:	68 0d f8 02 c0       	push   0xc002f80d
c0000da3:	e8 54 12 02 00       	call   c0021ffc <KeCPanic>
c0000da8:	83 c4 10             	add    esp,0x10
c0000dab:	90                   	nop
c0000dac:	83 c4 0c             	add    esp,0xc
c0000daf:	c3                   	ret    

c0000db0 <sys_thread_new>:
c0000db0:	83 ec 0c             	sub    esp,0xc
c0000db3:	83 ec 08             	sub    esp,0x8
c0000db6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dbe:	e8 15 12 02 00       	call   c0021fd8 <KeNetCreateThread>
c0000dc3:	83 c4 10             	add    esp,0x10
c0000dc6:	b8 00 00 00 00       	mov    eax,0x0
c0000dcb:	83 c4 0c             	add    esp,0xc
c0000dce:	c3                   	ret    
c0000dcf:	90                   	nop

c0000dd0 <sys_init>:
c0000dd0:	90                   	nop
c0000dd1:	c3                   	ret    

c0000dd2 <largebin_index>:
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	c1 ea 08             	shr    edx,0x8
c0000dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ddd:	77 10                	ja     c0000def <largebin_index+0x1d>
c0000ddf:	0f bd d2             	bsr    edx,edx
c0000de2:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000de5:	d3 e8                	shr    eax,cl
c0000de7:	83 e0 03             	and    eax,0x3
c0000dea:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dee:	c3                   	ret    
c0000def:	b8 5f 00 00 00       	mov    eax,0x5f
c0000df4:	c3                   	ret    

c0000df5 <malloc_init_state>:
c0000df5:	8d 50 34             	lea    edx,[eax+0x34]
c0000df8:	53                   	push   ebx
c0000df9:	89 d1                	mov    ecx,edx
c0000dfb:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000e01:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000e04:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000e07:	83 c2 08             	add    edx,0x8
c0000e0a:	39 da                	cmp    edx,ebx
c0000e0c:	75 f3                	jne    c0000e01 <malloc_init_state+0xc>
c0000e0e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000e18:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e1a:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000e24:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e2e:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e38:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e3f:	83 e2 03             	and    edx,0x3
c0000e42:	5b                   	pop    ebx
c0000e43:	83 ca 48             	or     edx,0x48
c0000e46:	89 10                	mov    DWORD PTR [eax],edx
c0000e48:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e4b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e55:	c3                   	ret    

c0000e56 <malloc_consolidate>:
c0000e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e58:	85 d2                	test   edx,edx
c0000e5a:	0f 84 d8 00 00 00    	je     c0000f38 <malloc_consolidate+0xe2>
c0000e60:	55                   	push   ebp
c0000e61:	83 e2 fd             	and    edx,0xfffffffd
c0000e64:	57                   	push   edi
c0000e65:	89 c5                	mov    ebp,eax
c0000e67:	56                   	push   esi
c0000e68:	53                   	push   ebx
c0000e69:	8d 78 34             	lea    edi,[eax+0x34]
c0000e6c:	83 ec 10             	sub    esp,0x10
c0000e6f:	89 10                	mov    DWORD PTR [eax],edx
c0000e71:	c1 ea 03             	shr    edx,0x3
c0000e74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e78:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e7c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e83:	85 d2                	test   edx,edx
c0000e85:	0f 84 98 00 00 00    	je     c0000f23 <malloc_consolidate+0xcd>
c0000e8b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e92:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e95:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e9c:	89 f9                	mov    ecx,edi
c0000e9e:	83 e1 fe             	and    ecx,0xfffffffe
c0000ea1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ea4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ea7:	83 e3 fc             	and    ebx,0xfffffffc
c0000eaa:	83 e7 01             	and    edi,0x1
c0000ead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000eb0:	75 14                	jne    c0000ec6 <malloc_consolidate+0x70>
c0000eb2:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000eb4:	29 fa                	sub    edx,edi
c0000eb6:	01 f9                	add    ecx,edi
c0000eb8:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ebb:	89 fb                	mov    ebx,edi
c0000ebd:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ec0:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ec3:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ec6:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ec9:	74 40                	je     c0000f0b <malloc_consolidate+0xb5>
c0000ecb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ece:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ed1:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ed5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ed8:	83 e7 01             	and    edi,0x1
c0000edb:	75 0e                	jne    c0000eeb <malloc_consolidate+0x95>
c0000edd:	01 d9                	add    ecx,ebx
c0000edf:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000ee2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000ee5:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000ee8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eeb:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eee:	89 ce                	mov    esi,ecx
c0000ef0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ef3:	83 ce 01             	or     esi,0x1
c0000ef6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ef9:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000efc:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000f00:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000f03:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000f06:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000f09:	eb 0c                	jmp    c0000f17 <malloc_consolidate+0xc1>
c0000f0b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000f0e:	83 c9 01             	or     ecx,0x1
c0000f11:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f14:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000f17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000f1b:	85 d2                	test   edx,edx
c0000f1d:	0f 85 6f ff ff ff    	jne    c0000e92 <malloc_consolidate+0x3c>
c0000f23:	83 c5 04             	add    ebp,0x4
c0000f26:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000f2a:	0f 85 50 ff ff ff    	jne    c0000e80 <malloc_consolidate+0x2a>
c0000f30:	83 c4 10             	add    esp,0x10
c0000f33:	5b                   	pop    ebx
c0000f34:	5e                   	pop    esi
c0000f35:	5f                   	pop    edi
c0000f36:	5d                   	pop    ebp
c0000f37:	c3                   	ret    
c0000f38:	e9 b8 fe ff ff       	jmp    c0000df5 <malloc_init_state>

c0000f3d <dlfree>:
c0000f3d:	57                   	push   edi
c0000f3e:	56                   	push   esi
c0000f3f:	53                   	push   ebx
c0000f40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f44:	85 c9                	test   ecx,ecx
c0000f46:	0f 84 01 01 00 00    	je     c000104d <dlfree+0x110>
c0000f4c:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f4f:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f52:	8b 1d e0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368e0
c0000f58:	89 f0                	mov    eax,esi
c0000f5a:	83 e0 fc             	and    eax,0xfffffffc
c0000f5d:	39 c3                	cmp    ebx,eax
c0000f5f:	72 24                	jb     c0000f85 <dlfree+0x48>
c0000f61:	c1 e8 03             	shr    eax,0x3
c0000f64:	83 cb 03             	or     ebx,0x3
c0000f67:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f6d:	83 e8 02             	sub    eax,0x2
c0000f70:	8b 1c 85 e4 68 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc971c]
c0000f77:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f79:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f80:	e9 c8 00 00 00       	jmp    c000104d <dlfree+0x110>
c0000f85:	83 e6 02             	and    esi,0x2
c0000f88:	0f 85 a0 00 00 00    	jne    c000102e <dlfree+0xf1>
c0000f8e:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f91:	83 cb 01             	or     ebx,0x1
c0000f94:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f9a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f9d:	83 e3 fc             	and    ebx,0xfffffffc
c0000fa0:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000fa4:	75 13                	jne    c0000fb9 <dlfree+0x7c>
c0000fa6:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000fa9:	29 ca                	sub    edx,ecx
c0000fab:	01 c8                	add    eax,ecx
c0000fad:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000fb0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000fb3:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fb6:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fb9:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000fbf:	74 40                	je     c0001001 <dlfree+0xc4>
c0000fc1:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000fc5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000fc8:	80 e1 01             	and    cl,0x1
c0000fcb:	75 0e                	jne    c0000fdb <dlfree+0x9e>
c0000fcd:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000fd0:	01 d8                	add    eax,ebx
c0000fd2:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000fd5:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fd8:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fdb:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fe1:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fe8:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000feb:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000ff1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ff4:	89 c1                	mov    ecx,eax
c0000ff6:	83 c9 01             	or     ecx,0x1
c0000ff9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ffc:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fff:	eb 10                	jmp    c0001011 <dlfree+0xd4>
c0001001:	01 d8                	add    eax,ebx
c0001003:	89 c1                	mov    ecx,eax
c0001005:	83 c9 01             	or     ecx,0x1
c0001008:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000100b:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0001011:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0001016:	76 35                	jbe    c000104d <dlfree+0x110>
c0001018:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c000101f:	74 2c                	je     c000104d <dlfree+0x110>
c0001021:	5b                   	pop    ebx
c0001022:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001027:	5e                   	pop    esi
c0001028:	5f                   	pop    edi
c0001029:	e9 28 fe ff ff       	jmp    c0000e56 <malloc_consolidate>
c000102e:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0001031:	53                   	push   ebx
c0001032:	53                   	push   ebx
c0001033:	ff 0d 30 6c 03 c0    	dec    DWORD PTR ds:0xc0036c30
c0001039:	01 c8                	add    eax,ecx
c000103b:	29 ca                	sub    edx,ecx
c000103d:	50                   	push   eax
c000103e:	52                   	push   edx
c000103f:	29 05 44 6c 03 c0    	sub    DWORD PTR ds:0xc0036c44,eax
c0001045:	e8 fa 55 01 00       	call   c0016644 <munmap>
c000104a:	83 c4 10             	add    esp,0x10
c000104d:	5b                   	pop    ebx
c000104e:	5e                   	pop    esi
c000104f:	5f                   	pop    edi
c0001050:	c3                   	ret    

c0001051 <sYSMALLOc>:
c0001051:	55                   	push   ebp
c0001052:	57                   	push   edi
c0001053:	56                   	push   esi
c0001054:	53                   	push   ebx
c0001055:	89 d3                	mov    ebx,edx
c0001057:	83 ec 2c             	sub    esp,0x2c
c000105a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000105e:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0001064:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001067:	8d 41 ff             	lea    eax,[ecx-0x1]
c000106a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000106e:	74 1f                	je     c000108f <sYSMALLOc+0x3e>
c0001070:	89 d0                	mov    eax,edx
c0001072:	e8 df fd ff ff       	call   c0000e56 <malloc_consolidate>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000107e:	83 e8 07             	sub    eax,0x7
c0001081:	50                   	push   eax
c0001082:	e8 78 03 00 00       	call   c00013ff <dlmalloc>
c0001087:	83 c4 10             	add    esp,0x10
c000108a:	e9 68 03 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c000108f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001093:	f7 d9                	neg    ecx
c0001095:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000109b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000109f:	0f 87 be 00 00 00    	ja     c0001163 <sYSMALLOc+0x112>
c00010a5:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c00010ab:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c00010b1:	0f 8d ac 00 00 00    	jge    c0001163 <sYSMALLOc+0x112>
c00010b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00010bf:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c00010c3:	21 ce                	and    esi,ecx
c00010c5:	39 fe                	cmp    esi,edi
c00010c7:	0f 86 96 00 00 00    	jbe    c0001163 <sYSMALLOc+0x112>
c00010cd:	52                   	push   edx
c00010ce:	52                   	push   edx
c00010cf:	6a 00                	push   0x0
c00010d1:	6a ff                	push   0xffffffff
c00010d3:	6a 0c                	push   0xc
c00010d5:	6a 03                	push   0x3
c00010d7:	56                   	push   esi
c00010d8:	6a 00                	push   0x0
c00010da:	e8 e7 54 01 00       	call   c00165c6 <mmap>
c00010df:	83 c4 20             	add    esp,0x20
c00010e2:	83 f8 ff             	cmp    eax,0xffffffff
c00010e5:	74 7c                	je     c0001163 <sYSMALLOc+0x112>
c00010e7:	89 c1                	mov    ecx,eax
c00010e9:	83 e1 07             	and    ecx,0x7
c00010ec:	74 13                	je     c0001101 <sYSMALLOc+0xb0>
c00010ee:	ba 08 00 00 00       	mov    edx,0x8
c00010f3:	89 f7                	mov    edi,esi
c00010f5:	29 ca                	sub    edx,ecx
c00010f7:	01 d0                	add    eax,edx
c00010f9:	29 d7                	sub    edi,edx
c00010fb:	89 10                	mov    DWORD PTR [eax],edx
c00010fd:	89 fa                	mov    edx,edi
c00010ff:	eb 08                	jmp    c0001109 <sYSMALLOc+0xb8>
c0001101:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0001107:	89 f2                	mov    edx,esi
c0001109:	83 ca 02             	or     edx,0x2
c000110c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000110f:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0001115:	8d 57 01             	lea    edx,[edi+0x1]
c0001118:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c000111e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0001124:	7e 06                	jle    c000112c <sYSMALLOc+0xdb>
c0001126:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c000112c:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0001132:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0001138:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c000113e:	76 06                	jbe    c0001146 <sYSMALLOc+0xf5>
c0001140:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001146:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c000114c:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0001152:	0f 83 41 01 00 00    	jae    c0001299 <sYSMALLOc+0x248>
c0001158:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000115e:	e9 36 01 00 00       	jmp    c0001299 <sYSMALLOc+0x248>
c0001163:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001166:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001173:	83 e0 fc             	and    eax,0xfffffffc
c0001176:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000117a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000117e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000118a:	83 c0 10             	add    eax,0x10
c000118d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0001191:	01 c5                	add    ebp,eax
c0001193:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000119a:	74 04                	je     c00011a0 <sYSMALLOc+0x14f>
c000119c:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c00011a0:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00011a4:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c00011a8:	89 ee                	mov    esi,ebp
c00011aa:	7f 19                	jg     c00011c5 <sYSMALLOc+0x174>
c00011ac:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c00011b3:	74 28                	je     c00011dd <sYSMALLOc+0x18c>
c00011b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00011b9:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00011bd:	01 ee                	add    esi,ebp
c00011bf:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c00011c3:	eb 18                	jmp    c00011dd <sYSMALLOc+0x18c>
c00011c5:	83 ec 0c             	sub    esp,0xc
c00011c8:	55                   	push   ebp
c00011c9:	e8 c2 53 01 00       	call   c0016590 <sbrk_thunk>
c00011ce:	83 c4 10             	add    esp,0x10
c00011d1:	89 c7                	mov    edi,eax
c00011d3:	83 c8 ff             	or     eax,0xffffffff
c00011d6:	83 ff ff             	cmp    edi,0xffffffff
c00011d9:	75 42                	jne    c000121d <sYSMALLOc+0x1cc>
c00011db:	eb cf                	jmp    c00011ac <sYSMALLOc+0x15b>
c00011dd:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011e3:	77 05                	ja     c00011ea <sYSMALLOc+0x199>
c00011e5:	be 00 c0 00 00       	mov    esi,0xc000
c00011ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00011ee:	77 07                	ja     c00011f7 <sYSMALLOc+0x1a6>
c00011f0:	31 c0                	xor    eax,eax
c00011f2:	e9 00 02 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c00011f7:	50                   	push   eax
c00011f8:	50                   	push   eax
c00011f9:	6a 00                	push   0x0
c00011fb:	6a ff                	push   0xffffffff
c00011fd:	6a 0c                	push   0xc
c00011ff:	6a 03                	push   0x3
c0001201:	56                   	push   esi
c0001202:	6a 00                	push   0x0
c0001204:	e8 bd 53 01 00       	call   c00165c6 <mmap>
c0001209:	83 c4 20             	add    esp,0x20
c000120c:	83 f8 ff             	cmp    eax,0xffffffff
c000120f:	89 c7                	mov    edi,eax
c0001211:	74 dd                	je     c00011f0 <sYSMALLOc+0x19f>
c0001213:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000121a:	8d 04 30             	lea    eax,[eax+esi*1]
c000121d:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c0001223:	01 f1                	add    ecx,esi
c0001225:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001229:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c000122f:	75 70                	jne    c00012a1 <sYSMALLOc+0x250>
c0001231:	83 f8 ff             	cmp    eax,0xffffffff
c0001234:	75 6b                	jne    c00012a1 <sYSMALLOc+0x250>
c0001236:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c000123a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000123e:	83 ce 01             	or     esi,0x1
c0001241:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001244:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000124a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001250:	73 06                	jae    c0001258 <sYSMALLOc+0x207>
c0001252:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001258:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000125e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001264:	73 06                	jae    c000126c <sYSMALLOc+0x21b>
c0001266:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000126c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000126f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001272:	83 e2 fc             	and    edx,0xfffffffc
c0001275:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c0001279:	0f 87 71 ff ff ff    	ja     c00011f0 <sYSMALLOc+0x19f>
c000127f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001283:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001286:	29 fa                	sub    edx,edi
c0001288:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000128b:	89 fb                	mov    ebx,edi
c000128d:	83 ca 01             	or     edx,0x1
c0001290:	83 cb 01             	or     ebx,0x1
c0001293:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001296:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001299:	83 c0 08             	add    eax,0x8
c000129c:	e9 56 01 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c00012a1:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00012a7:	f6 c2 01             	test   dl,0x1
c00012aa:	74 1e                	je     c00012ca <sYSMALLOc+0x279>
c00012ac:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00012b1:	0f 84 bb 00 00 00    	je     c0001372 <sYSMALLOc+0x321>
c00012b7:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c00012bb:	0f 86 b1 00 00 00    	jbe    c0001372 <sYSMALLOc+0x321>
c00012c1:	83 e2 fe             	and    edx,0xfffffffe
c00012c4:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00012ca:	83 f8 ff             	cmp    eax,0xffffffff
c00012cd:	89 fd                	mov    ebp,edi
c00012cf:	75 24                	jne    c00012f5 <sYSMALLOc+0x2a4>
c00012d1:	83 ec 0c             	sub    esp,0xc
c00012d4:	89 fd                	mov    ebp,edi
c00012d6:	6a 00                	push   0x0
c00012d8:	e8 b3 52 01 00       	call   c0016590 <sbrk_thunk>
c00012dd:	83 c4 10             	add    esp,0x10
c00012e0:	89 c2                	mov    edx,eax
c00012e2:	29 fa                	sub    edx,edi
c00012e4:	29 f2                	sub    edx,esi
c00012e6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00012ec:	83 f8 ff             	cmp    eax,0xffffffff
c00012ef:	0f 84 4f ff ff ff    	je     c0001244 <sYSMALLOc+0x1f3>
c00012f5:	31 c9                	xor    ecx,ecx
c00012f7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00012fa:	29 e8                	sub    eax,ebp
c00012fc:	01 c8                	add    eax,ecx
c00012fe:	83 c8 01             	or     eax,0x1
c0001301:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001304:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000130a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000130f:	0f 84 2f ff ff ff    	je     c0001244 <sYSMALLOc+0x1f3>
c0001315:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001319:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000131d:	83 ee 0c             	sub    esi,0xc
c0001320:	83 e6 f8             	and    esi,0xfffffff8
c0001323:	89 f0                	mov    eax,esi
c0001325:	83 c8 01             	or     eax,0x1
c0001328:	83 fe 0f             	cmp    esi,0xf
c000132b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000132e:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c0001336:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c000133e:	0f 86 00 ff ff ff    	jbe    c0001244 <sYSMALLOc+0x1f3>
c0001344:	83 ec 0c             	sub    esp,0xc
c0001347:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000134d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000135b:	83 c0 08             	add    eax,0x8
c000135e:	50                   	push   eax
c000135f:	e8 d9 fb ff ff       	call   c0000f3d <dlfree>
c0001364:	83 c4 10             	add    esp,0x10
c0001367:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000136d:	e9 d2 fe ff ff       	jmp    c0001244 <sYSMALLOc+0x1f3>
c0001372:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001377:	74 0e                	je     c0001387 <sYSMALLOc+0x336>
c0001379:	89 f8                	mov    eax,edi
c000137b:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000137f:	01 c1                	add    ecx,eax
c0001381:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001387:	89 fa                	mov    edx,edi
c0001389:	83 e2 07             	and    edx,0x7
c000138c:	74 0c                	je     c000139a <sYSMALLOc+0x349>
c000138e:	b8 08 00 00 00       	mov    eax,0x8
c0001393:	29 d0                	sub    eax,edx
c0001395:	8d 2c 07             	lea    ebp,[edi+eax*1]
c0001398:	eb 04                	jmp    c000139e <sYSMALLOc+0x34d>
c000139a:	89 fd                	mov    ebp,edi
c000139c:	31 c0                	xor    eax,eax
c000139e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00013a2:	83 ec 0c             	sub    esp,0xc
c00013a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00013a9:	8d 14 06             	lea    edx,[esi+eax*1]
c00013ac:	01 fa                	add    edx,edi
c00013ae:	01 d1                	add    ecx,edx
c00013b0:	29 d0                	sub    eax,edx
c00013b2:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00013b6:	01 c1                	add    ecx,eax
c00013b8:	51                   	push   ecx
c00013b9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00013bd:	e8 ce 51 01 00       	call   c0016590 <sbrk_thunk>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c9:	83 f8 ff             	cmp    eax,0xffffffff
c00013cc:	75 12                	jne    c00013e0 <sYSMALLOc+0x38f>
c00013ce:	83 ec 0c             	sub    esp,0xc
c00013d1:	6a 00                	push   0x0
c00013d3:	e8 b8 51 01 00       	call   c0016590 <sbrk_thunk>
c00013d8:	83 c4 10             	add    esp,0x10
c00013db:	e9 0c ff ff ff       	jmp    c00012ec <sYSMALLOc+0x29b>
c00013e0:	39 f8                	cmp    eax,edi
c00013e2:	0f 83 0f ff ff ff    	jae    c00012f7 <sYSMALLOc+0x2a6>
c00013e8:	8d 04 37             	lea    eax,[edi+esi*1]
c00013eb:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00013f2:	e9 f5 fe ff ff       	jmp    c00012ec <sYSMALLOc+0x29b>
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	c3                   	ret    

c00013ff <dlmalloc>:
c00013ff:	55                   	push   ebp
c0001400:	57                   	push   edi
c0001401:	56                   	push   esi
c0001402:	53                   	push   ebx
c0001403:	83 ec 1c             	sub    esp,0x1c
c0001406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000140a:	83 f8 df             	cmp    eax,0xffffffdf
c000140d:	0f 87 70 03 00 00    	ja     c0001783 <dlmalloc+0x384>
c0001413:	83 c0 0b             	add    eax,0xb
c0001416:	be 10 00 00 00       	mov    esi,0x10
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 05                	jbe    c0001425 <dlmalloc+0x26>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 c6                	mov    esi,eax
c0001425:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c000142b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001431:	75 17                	jne    c000144a <dlmalloc+0x4b>
c0001433:	85 ff                	test   edi,edi
c0001435:	0f 85 05 03 00 00    	jne    c0001740 <dlmalloc+0x341>
c000143b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001440:	e8 11 fa ff ff       	call   c0000e56 <malloc_consolidate>
c0001445:	e9 f6 02 00 00       	jmp    c0001740 <dlmalloc+0x341>
c000144a:	39 f7                	cmp    edi,esi
c000144c:	72 1f                	jb     c000146d <dlmalloc+0x6e>
c000144e:	89 f2                	mov    edx,esi
c0001450:	c1 ea 03             	shr    edx,0x3
c0001453:	83 ea 02             	sub    edx,0x2
c0001456:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c000145d:	85 c0                	test   eax,eax
c000145f:	74 0c                	je     c000146d <dlmalloc+0x6e>
c0001461:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001464:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c000146b:	eb 30                	jmp    c000149d <dlmalloc+0x9e>
c000146d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001473:	89 f0                	mov    eax,esi
c0001475:	77 2e                	ja     c00014a5 <dlmalloc+0xa6>
c0001477:	c1 e8 03             	shr    eax,0x3
c000147a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000147e:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001485:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001488:	8d 5a f8             	lea    ebx,[edx-0x8]
c000148b:	39 c3                	cmp    ebx,eax
c000148d:	74 2e                	je     c00014bd <dlmalloc+0xbe>
c000148f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001492:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001497:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000149a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000149d:	83 c0 08             	add    eax,0x8
c00014a0:	e9 e0 02 00 00       	jmp    c0001785 <dlmalloc+0x386>
c00014a5:	e8 28 f9 ff ff       	call   c0000dd2 <largebin_index>
c00014aa:	83 e7 02             	and    edi,0x2
c00014ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00014b1:	74 0a                	je     c00014bd <dlmalloc+0xbe>
c00014b3:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00014b8:	e8 99 f9 ff ff       	call   c0000e56 <malloc_consolidate>
c00014bd:	8d 46 10             	lea    eax,[esi+0x10]
c00014c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c4:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c00014ca:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c00014d0:	0f 84 13 01 00 00    	je     c00015e9 <dlmalloc+0x1ea>
c00014d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014dc:	83 e7 fc             	and    edi,0xfffffffc
c00014df:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014e5:	77 4c                	ja     c0001533 <dlmalloc+0x134>
c00014e7:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c00014ec:	75 45                	jne    c0001533 <dlmalloc+0x134>
c00014ee:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00014f4:	75 3d                	jne    c0001533 <dlmalloc+0x134>
c00014f6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014fa:	73 37                	jae    c0001533 <dlmalloc+0x134>
c00014fc:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014ff:	89 fa                	mov    edx,edi
c0001501:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c0001506:	29 f2                	sub    edx,esi
c0001508:	83 ce 01             	or     esi,0x1
c000150b:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001510:	89 d1                	mov    ecx,edx
c0001512:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c0001517:	83 c9 01             	or     ecx,0x1
c000151a:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001521:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c0001528:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000152b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000152e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001531:	eb 15                	jmp    c0001548 <dlmalloc+0x149>
c0001533:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001538:	39 fe                	cmp    esi,edi
c000153a:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001541:	75 0d                	jne    c0001550 <dlmalloc+0x151>
c0001543:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001548:	8d 43 08             	lea    eax,[ebx+0x8]
c000154b:	e9 35 02 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001550:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001556:	89 f8                	mov    eax,edi
c0001558:	77 19                	ja     c0001573 <dlmalloc+0x174>
c000155a:	c1 e8 03             	shr    eax,0x3
c000155d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001560:	83 c2 0d             	add    edx,0xd
c0001563:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c000156a:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001571:	eb 46                	jmp    c00015b9 <dlmalloc+0x1ba>
c0001573:	e8 5a f8 ff ff       	call   c0000dd2 <largebin_index>
c0001578:	8d 14 00             	lea    edx,[eax+eax*1]
c000157b:	83 c2 0d             	add    edx,0xd
c000157e:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001585:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000158c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000158f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001593:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001597:	89 d5                	mov    ebp,edx
c0001599:	74 1e                	je     c00015b9 <dlmalloc+0x1ba>
c000159b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000159e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00015a1:	77 12                	ja     c00015b5 <dlmalloc+0x1b6>
c00015a3:	83 cf 01             	or     edi,0x1
c00015a6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00015a9:	76 05                	jbe    c00015b0 <dlmalloc+0x1b1>
c00015ab:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00015ae:	eb f6                	jmp    c00015a6 <dlmalloc+0x1a7>
c00015b0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00015b3:	eb 04                	jmp    c00015b9 <dlmalloc+0x1ba>
c00015b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00015b9:	89 c7                	mov    edi,eax
c00015bb:	88 c1                	mov    cl,al
c00015bd:	c1 ff 05             	sar    edi,0x5
c00015c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00015c4:	bf 01 00 00 00       	mov    edi,0x1
c00015c9:	d3 e7                	shl    edi,cl
c00015cb:	89 f8                	mov    eax,edi
c00015cd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015d1:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c00015d8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015db:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015de:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015e1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015e4:	e9 db fe ff ff       	jmp    c00014c4 <dlmalloc+0xc5>
c00015e9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015ef:	76 78                	jbe    c0001669 <dlmalloc+0x26a>
c00015f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015f5:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00015fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015ff:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001602:	39 ca                	cmp    edx,ecx
c0001604:	74 63                	je     c0001669 <dlmalloc+0x26a>
c0001606:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	83 e3 fc             	and    ebx,0xfffffffc
c000160f:	39 de                	cmp    esi,ebx
c0001611:	77 52                	ja     c0001665 <dlmalloc+0x266>
c0001613:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001616:	89 df                	mov    edi,ebx
c0001618:	01 d3                	add    ebx,edx
c000161a:	29 f7                	sub    edi,esi
c000161c:	83 ff 0f             	cmp    edi,0xf
c000161f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001622:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001625:	8d 42 08             	lea    eax,[edx+0x8]
c0001628:	77 09                	ja     c0001633 <dlmalloc+0x234>
c000162a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000162e:	e9 52 01 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001633:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001636:	83 ce 01             	or     esi,0x1
c0001639:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c000163f:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c0001645:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c000164c:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c0001653:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001656:	89 fa                	mov    edx,edi
c0001658:	83 ca 01             	or     edx,0x1
c000165b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000165e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001660:	e9 20 01 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001665:	89 c2                	mov    edx,eax
c0001667:	eb 99                	jmp    c0001602 <dlmalloc+0x203>
c0001669:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000166d:	b8 01 00 00 00       	mov    eax,0x1
c0001672:	41                   	inc    ecx
c0001673:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c000167a:	89 cb                	mov    ebx,ecx
c000167c:	c1 eb 05             	shr    ebx,0x5
c000167f:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001686:	d3 e0                	shl    eax,cl
c0001688:	39 f8                	cmp    eax,edi
c000168a:	77 04                	ja     c0001690 <dlmalloc+0x291>
c000168c:	85 c0                	test   eax,eax
c000168e:	75 26                	jne    c00016b6 <dlmalloc+0x2b7>
c0001690:	43                   	inc    ebx
c0001691:	83 fb 02             	cmp    ebx,0x2
c0001694:	0f 87 a6 00 00 00    	ja     c0001740 <dlmalloc+0x341>
c000169a:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c00016a1:	85 ff                	test   edi,edi
c00016a3:	74 eb                	je     c0001690 <dlmalloc+0x291>
c00016a5:	89 d8                	mov    eax,ebx
c00016a7:	c1 e0 06             	shl    eax,0x6
c00016aa:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c00016b1:	b8 01 00 00 00       	mov    eax,0x1
c00016b6:	85 f8                	test   eax,edi
c00016b8:	75 07                	jne    c00016c1 <dlmalloc+0x2c2>
c00016ba:	83 c2 08             	add    edx,0x8
c00016bd:	01 c0                	add    eax,eax
c00016bf:	eb f5                	jmp    c00016b6 <dlmalloc+0x2b7>
c00016c1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00016c4:	39 ca                	cmp    edx,ecx
c00016c6:	75 14                	jne    c00016dc <dlmalloc+0x2dd>
c00016c8:	89 c1                	mov    ecx,eax
c00016ca:	83 c2 08             	add    edx,0x8
c00016cd:	f7 d1                	not    ecx
c00016cf:	01 c0                	add    eax,eax
c00016d1:	21 cf                	and    edi,ecx
c00016d3:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c00016da:	eb ac                	jmp    c0001688 <dlmalloc+0x289>
c00016dc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016df:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016e2:	83 e0 fc             	and    eax,0xfffffffc
c00016e5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016e8:	89 c3                	mov    ebx,eax
c00016ea:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016f0:	29 f3                	sub    ebx,esi
c00016f2:	8d 41 08             	lea    eax,[ecx+0x8]
c00016f5:	83 fb 0f             	cmp    ebx,0xf
c00016f8:	77 09                	ja     c0001703 <dlmalloc+0x304>
c00016fa:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016fe:	e9 82 00 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001703:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001706:	81 fe ff 00 00 00    	cmp    esi,0xff
c000170c:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c0001712:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c0001718:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c000171f:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001726:	77 06                	ja     c000172e <dlmalloc+0x32f>
c0001728:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c000172e:	83 ce 01             	or     esi,0x1
c0001731:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001734:	89 d9                	mov    ecx,ebx
c0001736:	83 c9 01             	or     ecx,0x1
c0001739:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000173c:	89 1a                	mov    DWORD PTR [edx],ebx
c000173e:	eb 45                	jmp    c0001785 <dlmalloc+0x386>
c0001740:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001745:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001748:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000174b:	83 e2 fc             	and    edx,0xfffffffc
c000174e:	39 d1                	cmp    ecx,edx
c0001750:	77 1e                	ja     c0001770 <dlmalloc+0x371>
c0001752:	89 f3                	mov    ebx,esi
c0001754:	29 f2                	sub    edx,esi
c0001756:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001759:	83 cb 01             	or     ebx,0x1
c000175c:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c0001762:	83 ca 01             	or     edx,0x1
c0001765:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001768:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000176b:	e9 2d fd ff ff       	jmp    c000149d <dlmalloc+0x9e>
c0001770:	83 c4 1c             	add    esp,0x1c
c0001773:	89 f0                	mov    eax,esi
c0001775:	5b                   	pop    ebx
c0001776:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c000177b:	5e                   	pop    esi
c000177c:	5f                   	pop    edi
c000177d:	5d                   	pop    ebp
c000177e:	e9 ce f8 ff ff       	jmp    c0001051 <sYSMALLOc>
c0001783:	31 c0                	xor    eax,eax
c0001785:	83 c4 1c             	add    esp,0x1c
c0001788:	5b                   	pop    ebx
c0001789:	5e                   	pop    esi
c000178a:	5f                   	pop    edi
c000178b:	5d                   	pop    ebp
c000178c:	c3                   	ret    

c000178d <iALLOc>:
c000178d:	55                   	push   ebp
c000178e:	89 c5                	mov    ebp,eax
c0001790:	57                   	push   edi
c0001791:	56                   	push   esi
c0001792:	53                   	push   ebx
c0001793:	83 ec 2c             	sub    esp,0x2c
c0001796:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000179a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000179e:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c00017a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017a9:	75 12                	jne    c00017bd <iALLOc+0x30>
c00017ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00017af:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00017b4:	e8 9d f6 ff ff       	call   c0000e56 <malloc_consolidate>
c00017b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00017bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00017c2:	74 12                	je     c00017d6 <iALLOc+0x49>
c00017c4:	85 ed                	test   ebp,ebp
c00017c6:	0f 84 64 01 00 00    	je     c0001930 <iALLOc+0x1a3>
c00017cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017d4:	eb 33                	jmp    c0001809 <iALLOc+0x7c>
c00017d6:	85 ed                	test   ebp,ebp
c00017d8:	75 14                	jne    c00017ee <iALLOc+0x61>
c00017da:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017e2:	83 c4 2c             	add    esp,0x2c
c00017e5:	5b                   	pop    ebx
c00017e6:	5e                   	pop    esi
c00017e7:	5f                   	pop    edi
c00017e8:	5d                   	pop    ebp
c00017e9:	e9 11 fc ff ff       	jmp    c00013ff <dlmalloc>
c00017ee:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017f6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017fd:	83 f8 0f             	cmp    eax,0xf
c0001800:	76 07                	jbe    c0001809 <iALLOc+0x7c>
c0001802:	83 e0 f8             	and    eax,0xfffffff8
c0001805:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001809:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000180e:	75 09                	jne    c0001819 <iALLOc+0x8c>
c0001810:	89 d0                	mov    eax,edx
c0001812:	31 f6                	xor    esi,esi
c0001814:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001817:	eb 3b                	jmp    c0001854 <iALLOc+0xc7>
c0001819:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001821:	8b 02                	mov    eax,DWORD PTR [edx]
c0001823:	83 c0 0b             	add    eax,0xb
c0001826:	83 f8 0f             	cmp    eax,0xf
c0001829:	76 07                	jbe    c0001832 <iALLOc+0xa5>
c000182b:	83 e0 f8             	and    eax,0xfffffff8
c000182e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001832:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001836:	0f af f5             	imul   esi,ebp
c0001839:	eb 25                	jmp    c0001860 <iALLOc+0xd3>
c000183b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000183d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001840:	bb 10 00 00 00       	mov    ebx,0x10
c0001845:	83 f9 0f             	cmp    ecx,0xf
c0001848:	76 05                	jbe    c000184f <iALLOc+0xc2>
c000184a:	83 e1 f8             	and    ecx,0xfffffff8
c000184d:	89 cb                	mov    ebx,ecx
c000184f:	01 de                	add    esi,ebx
c0001851:	83 c0 04             	add    eax,0x4
c0001854:	39 c7                	cmp    edi,eax
c0001856:	75 e3                	jne    c000183b <iALLOc+0xae>
c0001858:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001860:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001864:	83 ec 0c             	sub    esp,0xc
c0001867:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c000186d:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000187b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000187f:	50                   	push   eax
c0001880:	e8 7a fb ff ff       	call   c00013ff <dlmalloc>
c0001885:	83 c4 10             	add    esp,0x10
c0001888:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000188e:	85 c0                	test   eax,eax
c0001890:	0f 84 92 00 00 00    	je     c0001928 <iALLOc+0x19b>
c0001896:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001899:	8d 78 f8             	lea    edi,[eax-0x8]
c000189c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00018a0:	83 e3 fc             	and    ebx,0xfffffffc
c00018a3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00018a8:	74 1e                	je     c00018c8 <iALLOc+0x13b>
c00018aa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00018ae:	89 d9                	mov    ecx,ebx
c00018b0:	52                   	push   edx
c00018b1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00018b5:	83 e9 04             	sub    ecx,0x4
c00018b8:	51                   	push   ecx
c00018b9:	6a 00                	push   0x0
c00018bb:	50                   	push   eax
c00018bc:	e8 2f ec ff ff       	call   c00004f0 <memset>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00018c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00018cd:	75 14                	jne    c00018e3 <iALLOc+0x156>
c00018cf:	8d 04 37             	lea    eax,[edi+esi*1]
c00018d2:	29 f3                	sub    ebx,esi
c00018d4:	8d 48 08             	lea    ecx,[eax+0x8]
c00018d7:	83 cb 01             	or     ebx,0x1
c00018da:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018dd:	89 f3                	mov    ebx,esi
c00018df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018e3:	31 c0                	xor    eax,eax
c00018e5:	4d                   	dec    ebp
c00018e6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018ea:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ed:	39 c5                	cmp    ebp,eax
c00018ef:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018f2:	74 2c                	je     c0001920 <iALLOc+0x193>
c00018f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018f8:	85 c9                	test   ecx,ecx
c00018fa:	75 15                	jne    c0001911 <iALLOc+0x184>
c00018fc:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018ff:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001902:	b9 10 00 00 00       	mov    ecx,0x10
c0001907:	83 fe 0f             	cmp    esi,0xf
c000190a:	76 05                	jbe    c0001911 <iALLOc+0x184>
c000190c:	83 e6 f8             	and    esi,0xfffffff8
c000190f:	89 f1                	mov    ecx,esi
c0001911:	89 ce                	mov    esi,ecx
c0001913:	29 cb                	sub    ebx,ecx
c0001915:	83 ce 01             	or     esi,0x1
c0001918:	40                   	inc    eax
c0001919:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000191c:	01 cf                	add    edi,ecx
c000191e:	eb c6                	jmp    c00018e6 <iALLOc+0x159>
c0001920:	83 cb 01             	or     ebx,0x1
c0001923:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001926:	eb 08                	jmp    c0001930 <iALLOc+0x1a3>
c0001928:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001934:	83 c4 2c             	add    esp,0x2c
c0001937:	5b                   	pop    ebx
c0001938:	5e                   	pop    esi
c0001939:	5f                   	pop    edi
c000193a:	5d                   	pop    ebp
c000193b:	c3                   	ret    

c000193c <dlrealloc>:
c000193c:	55                   	push   ebp
c000193d:	57                   	push   edi
c000193e:	56                   	push   esi
c000193f:	53                   	push   ebx
c0001940:	83 ec 1c             	sub    esp,0x1c
c0001943:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001947:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000194b:	85 db                	test   ebx,ebx
c000194d:	75 10                	jne    c000195f <dlrealloc+0x23>
c000194f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001953:	83 c4 1c             	add    esp,0x1c
c0001956:	5b                   	pop    ebx
c0001957:	5e                   	pop    esi
c0001958:	5f                   	pop    edi
c0001959:	5d                   	pop    ebp
c000195a:	e9 a0 fa ff ff       	jmp    c00013ff <dlmalloc>
c000195f:	83 f8 df             	cmp    eax,0xffffffdf
c0001962:	0f 87 a6 01 00 00    	ja     c0001b0e <dlrealloc+0x1d2>
c0001968:	83 c0 0b             	add    eax,0xb
c000196b:	bd 10 00 00 00       	mov    ebp,0x10
c0001970:	83 f8 0f             	cmp    eax,0xf
c0001973:	76 05                	jbe    c000197a <dlrealloc+0x3e>
c0001975:	83 e0 f8             	and    eax,0xfffffff8
c0001978:	89 c5                	mov    ebp,eax
c000197a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000197d:	89 ce                	mov    esi,ecx
c000197f:	83 e6 fc             	and    esi,0xfffffffc
c0001982:	f6 c1 02             	test   cl,0x2
c0001985:	0f 85 4e 01 00 00    	jne    c0001ad9 <dlrealloc+0x19d>
c000198b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000198e:	39 f5                	cmp    ebp,esi
c0001990:	0f 86 04 01 00 00    	jbe    c0001a9a <dlrealloc+0x15e>
c0001996:	8d 14 37             	lea    edx,[edi+esi*1]
c0001999:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c000199f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00019a2:	75 33                	jne    c00019d7 <dlrealloc+0x9b>
c00019a4:	83 e0 fc             	and    eax,0xfffffffc
c00019a7:	01 f0                	add    eax,esi
c00019a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00019ad:	8d 45 10             	lea    eax,[ebp+0x10]
c00019b0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00019b4:	77 49                	ja     c00019ff <dlrealloc+0xc3>
c00019b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00019ba:	83 e1 01             	and    ecx,0x1
c00019bd:	01 ef                	add    edi,ebp
c00019bf:	09 e9                	or     ecx,ebp
c00019c1:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00019c4:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c00019ca:	29 e8                	sub    eax,ebp
c00019cc:	83 c8 01             	or     eax,0x1
c00019cf:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019d2:	e9 39 01 00 00       	jmp    c0001b10 <dlrealloc+0x1d4>
c00019d7:	89 c1                	mov    ecx,eax
c00019d9:	83 e1 fe             	and    ecx,0xfffffffe
c00019dc:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00019e1:	75 1c                	jne    c00019ff <dlrealloc+0xc3>
c00019e3:	83 e0 fc             	and    eax,0xfffffffc
c00019e6:	01 f0                	add    eax,esi
c00019e8:	39 c5                	cmp    ebp,eax
c00019ea:	77 13                	ja     c00019ff <dlrealloc+0xc3>
c00019ec:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00019ef:	89 c6                	mov    esi,eax
c00019f1:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00019f4:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00019f7:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00019fa:	e9 9b 00 00 00       	jmp    c0001a9a <dlrealloc+0x15e>
c00019ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001a03:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001a06:	83 ec 0c             	sub    esp,0xc
c0001a09:	50                   	push   eax
c0001a0a:	e8 f0 f9 ff ff       	call   c00013ff <dlmalloc>
c0001a0f:	83 c4 10             	add    esp,0x10
c0001a12:	85 c0                	test   eax,eax
c0001a14:	0f 84 f4 00 00 00    	je     c0001b0e <dlrealloc+0x1d2>
c0001a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a1e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001a21:	39 ca                	cmp    edx,ecx
c0001a23:	75 0a                	jne    c0001a2f <dlrealloc+0xf3>
c0001a25:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a28:	83 e0 fc             	and    eax,0xfffffffc
c0001a2b:	01 c6                	add    esi,eax
c0001a2d:	eb 6b                	jmp    c0001a9a <dlrealloc+0x15e>
c0001a2f:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a32:	83 f9 27             	cmp    ecx,0x27
c0001a35:	76 08                	jbe    c0001a3f <dlrealloc+0x103>
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 c7                	mov    edi,eax
c0001a3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a3d:	eb 43                	jmp    c0001a82 <dlrealloc+0x146>
c0001a3f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a41:	83 f9 13             	cmp    ecx,0x13
c0001a44:	89 10                	mov    DWORD PTR [eax],edx
c0001a46:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a4c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a4f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a52:	76 2e                	jbe    c0001a82 <dlrealloc+0x146>
c0001a54:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a57:	83 f9 1b             	cmp    ecx,0x1b
c0001a5a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a5d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a63:	76 1d                	jbe    c0001a82 <dlrealloc+0x146>
c0001a65:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a68:	83 f9 23             	cmp    ecx,0x23
c0001a6b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a71:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a74:	76 0c                	jbe    c0001a82 <dlrealloc+0x146>
c0001a76:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a79:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a7c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a7f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a86:	83 ec 0c             	sub    esp,0xc
c0001a89:	53                   	push   ebx
c0001a8a:	e8 ae f4 ff ff       	call   c0000f3d <dlfree>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a96:	89 c3                	mov    ebx,eax
c0001a98:	eb 76                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001a9a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a9d:	8d 04 37             	lea    eax,[edi+esi*1]
c0001aa0:	89 f2                	mov    edx,esi
c0001aa2:	29 ea                	sub    edx,ebp
c0001aa4:	83 e1 01             	and    ecx,0x1
c0001aa7:	83 fa 0f             	cmp    edx,0xf
c0001aaa:	77 0b                	ja     c0001ab7 <dlrealloc+0x17b>
c0001aac:	09 f1                	or     ecx,esi
c0001aae:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001ab1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001ab5:	eb 59                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001ab7:	01 ef                	add    edi,ebp
c0001ab9:	83 ca 01             	or     edx,0x1
c0001abc:	09 cd                	or     ebp,ecx
c0001abe:	83 ec 0c             	sub    esp,0xc
c0001ac1:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001ac4:	83 c7 08             	add    edi,0x8
c0001ac7:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001aca:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001ace:	57                   	push   edi
c0001acf:	e8 69 f4 ff ff       	call   c0000f3d <dlfree>
c0001ad4:	83 c4 10             	add    esp,0x10
c0001ad7:	eb 37                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001ad9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001adc:	39 f0                	cmp    eax,esi
c0001ade:	76 30                	jbe    c0001b10 <dlrealloc+0x1d4>
c0001ae0:	83 ec 0c             	sub    esp,0xc
c0001ae3:	83 ed 07             	sub    ebp,0x7
c0001ae6:	55                   	push   ebp
c0001ae7:	e8 13 f9 ff ff       	call   c00013ff <dlmalloc>
c0001aec:	83 c4 10             	add    esp,0x10
c0001aef:	85 c0                	test   eax,eax
c0001af1:	89 c5                	mov    ebp,eax
c0001af3:	74 19                	je     c0001b0e <dlrealloc+0x1d2>
c0001af5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001af8:	89 c7                	mov    edi,eax
c0001afa:	89 de                	mov    esi,ebx
c0001afc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001afe:	83 ec 0c             	sub    esp,0xc
c0001b01:	53                   	push   ebx
c0001b02:	89 eb                	mov    ebx,ebp
c0001b04:	e8 34 f4 ff ff       	call   c0000f3d <dlfree>
c0001b09:	83 c4 10             	add    esp,0x10
c0001b0c:	eb 02                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001b0e:	31 db                	xor    ebx,ebx
c0001b10:	83 c4 1c             	add    esp,0x1c
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	5e                   	pop    esi
c0001b17:	5f                   	pop    edi
c0001b18:	5d                   	pop    ebp
c0001b19:	c3                   	ret    

c0001b1a <dlmemalign>:
c0001b1a:	55                   	push   ebp
c0001b1b:	57                   	push   edi
c0001b1c:	56                   	push   esi
c0001b1d:	53                   	push   ebx
c0001b1e:	83 ec 0c             	sub    esp,0xc
c0001b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001b25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001b29:	83 fa 08             	cmp    edx,0x8
c0001b2c:	77 10                	ja     c0001b3e <dlmemalign+0x24>
c0001b2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b32:	83 c4 0c             	add    esp,0xc
c0001b35:	5b                   	pop    ebx
c0001b36:	5e                   	pop    esi
c0001b37:	5f                   	pop    edi
c0001b38:	5d                   	pop    ebp
c0001b39:	e9 c1 f8 ff ff       	jmp    c00013ff <dlmalloc>
c0001b3e:	83 fa 0f             	cmp    edx,0xf
c0001b41:	bf 10 00 00 00       	mov    edi,0x10
c0001b46:	76 13                	jbe    c0001b5b <dlmemalign+0x41>
c0001b48:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b4b:	85 d1                	test   ecx,edx
c0001b4d:	75 04                	jne    c0001b53 <dlmemalign+0x39>
c0001b4f:	89 d7                	mov    edi,edx
c0001b51:	eb 08                	jmp    c0001b5b <dlmemalign+0x41>
c0001b53:	39 d7                	cmp    edi,edx
c0001b55:	73 04                	jae    c0001b5b <dlmemalign+0x41>
c0001b57:	01 ff                	add    edi,edi
c0001b59:	eb f8                	jmp    c0001b53 <dlmemalign+0x39>
c0001b5b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b5e:	76 07                	jbe    c0001b67 <dlmemalign+0x4d>
c0001b60:	31 c0                	xor    eax,eax
c0001b62:	e9 ce 00 00 00       	jmp    c0001c35 <dlmemalign+0x11b>
c0001b67:	83 c0 0b             	add    eax,0xb
c0001b6a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b6f:	83 f8 0f             	cmp    eax,0xf
c0001b72:	76 05                	jbe    c0001b79 <dlmemalign+0x5f>
c0001b74:	83 e0 f8             	and    eax,0xfffffff8
c0001b77:	89 c5                	mov    ebp,eax
c0001b79:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b7d:	83 ec 0c             	sub    esp,0xc
c0001b80:	50                   	push   eax
c0001b81:	e8 79 f8 ff ff       	call   c00013ff <dlmalloc>
c0001b86:	83 c4 10             	add    esp,0x10
c0001b89:	85 c0                	test   eax,eax
c0001b8b:	89 c1                	mov    ecx,eax
c0001b8d:	74 d1                	je     c0001b60 <dlmemalign+0x46>
c0001b8f:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b92:	31 d2                	xor    edx,edx
c0001b94:	f7 f7                	div    edi
c0001b96:	85 d2                	test   edx,edx
c0001b98:	74 62                	je     c0001bfc <dlmemalign+0xe2>
c0001b9a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b9e:	89 f8                	mov    eax,edi
c0001ba0:	f7 d8                	neg    eax
c0001ba2:	21 c3                	and    ebx,eax
c0001ba4:	83 eb 08             	sub    ebx,0x8
c0001ba7:	89 d8                	mov    eax,ebx
c0001ba9:	29 f0                	sub    eax,esi
c0001bab:	83 f8 0f             	cmp    eax,0xf
c0001bae:	77 02                	ja     c0001bb2 <dlmemalign+0x98>
c0001bb0:	01 fb                	add    ebx,edi
c0001bb2:	89 d8                	mov    eax,ebx
c0001bb4:	29 f0                	sub    eax,esi
c0001bb6:	89 c6                	mov    esi,eax
c0001bb8:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bbb:	89 c2                	mov    edx,eax
c0001bbd:	83 e2 fc             	and    edx,0xfffffffc
c0001bc0:	29 f2                	sub    edx,esi
c0001bc2:	a8 02                	test   al,0x2
c0001bc4:	74 10                	je     c0001bd6 <dlmemalign+0xbc>
c0001bc6:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001bc9:	83 ca 02             	or     edx,0x2
c0001bcc:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001bcf:	8d 43 08             	lea    eax,[ebx+0x8]
c0001bd2:	89 33                	mov    DWORD PTR [ebx],esi
c0001bd4:	eb 5f                	jmp    c0001c35 <dlmemalign+0x11b>
c0001bd6:	89 d0                	mov    eax,edx
c0001bd8:	83 ec 0c             	sub    esp,0xc
c0001bdb:	83 c8 01             	or     eax,0x1
c0001bde:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001be1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001be6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001be9:	83 e0 01             	and    eax,0x1
c0001bec:	09 f0                	or     eax,esi
c0001bee:	89 de                	mov    esi,ebx
c0001bf0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bf3:	51                   	push   ecx
c0001bf4:	e8 44 f3 ff ff       	call   c0000f3d <dlfree>
c0001bf9:	83 c4 10             	add    esp,0x10
c0001bfc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bff:	a8 02                	test   al,0x2
c0001c01:	75 2f                	jne    c0001c32 <dlmemalign+0x118>
c0001c03:	8d 55 10             	lea    edx,[ebp+0x10]
c0001c06:	83 e0 fc             	and    eax,0xfffffffc
c0001c09:	39 c2                	cmp    edx,eax
c0001c0b:	73 25                	jae    c0001c32 <dlmemalign+0x118>
c0001c0d:	29 e8                	sub    eax,ebp
c0001c0f:	83 ec 0c             	sub    esp,0xc
c0001c12:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001c15:	83 c8 01             	or     eax,0x1
c0001c18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001c1b:	83 c2 08             	add    edx,0x8
c0001c1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001c21:	83 e0 01             	and    eax,0x1
c0001c24:	09 c5                	or     ebp,eax
c0001c26:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001c29:	52                   	push   edx
c0001c2a:	e8 0e f3 ff ff       	call   c0000f3d <dlfree>
c0001c2f:	83 c4 10             	add    esp,0x10
c0001c32:	8d 46 08             	lea    eax,[esi+0x8]
c0001c35:	83 c4 0c             	add    esp,0xc
c0001c38:	5b                   	pop    ebx
c0001c39:	5e                   	pop    esi
c0001c3a:	5f                   	pop    edi
c0001c3b:	5d                   	pop    ebp
c0001c3c:	c3                   	ret    

c0001c3d <dlcalloc>:
c0001c3d:	53                   	push   ebx
c0001c3e:	83 ec 14             	sub    esp,0x14
c0001c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c45:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c4a:	50                   	push   eax
c0001c4b:	e8 af f7 ff ff       	call   c00013ff <dlmalloc>
c0001c50:	83 c4 10             	add    esp,0x10
c0001c53:	85 c0                	test   eax,eax
c0001c55:	89 c3                	mov    ebx,eax
c0001c57:	74 6e                	je     c0001cc7 <dlcalloc+0x8a>
c0001c59:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c5c:	a8 02                	test   al,0x2
c0001c5e:	75 67                	jne    c0001cc7 <dlcalloc+0x8a>
c0001c60:	83 e0 fc             	and    eax,0xfffffffc
c0001c63:	83 e8 04             	sub    eax,0x4
c0001c66:	83 f8 27             	cmp    eax,0x27
c0001c69:	76 0f                	jbe    c0001c7a <dlcalloc+0x3d>
c0001c6b:	52                   	push   edx
c0001c6c:	50                   	push   eax
c0001c6d:	6a 00                	push   0x0
c0001c6f:	53                   	push   ebx
c0001c70:	e8 7b e8 ff ff       	call   c00004f0 <memset>
c0001c75:	83 c4 10             	add    esp,0x10
c0001c78:	eb 4d                	jmp    c0001cc7 <dlcalloc+0x8a>
c0001c7a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c80:	83 f8 13             	cmp    eax,0x13
c0001c83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c8a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c91:	76 34                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001c93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c9a:	83 f8 1b             	cmp    eax,0x1b
c0001c9d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001ca4:	76 21                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001ca6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001cad:	83 f8 23             	cmp    eax,0x23
c0001cb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001cb7:	76 0e                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001cb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001cc0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001cc7:	83 c4 08             	add    esp,0x8
c0001cca:	89 d8                	mov    eax,ebx
c0001ccc:	5b                   	pop    ebx
c0001ccd:	c3                   	ret    

c0001cce <dlcfree>:
c0001cce:	e9 6a f2 ff ff       	jmp    c0000f3d <dlfree>

c0001cd3 <dlindependent_calloc>:
c0001cd3:	83 ec 28             	sub    esp,0x28
c0001cd6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001ce3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001ce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001ceb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cef:	e8 99 fa ff ff       	call   c000178d <iALLOc>
c0001cf4:	83 c4 2c             	add    esp,0x2c
c0001cf7:	c3                   	ret    

c0001cf8 <dlindependent_comalloc>:
c0001cf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001cfc:	31 c9                	xor    ecx,ecx
c0001cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001d02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001d0a:	e9 7e fa ff ff       	jmp    c000178d <iALLOc>

c0001d0f <dlvalloc>:
c0001d0f:	83 ec 0c             	sub    esp,0xc
c0001d12:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001d19:	75 0a                	jne    c0001d25 <dlvalloc+0x16>
c0001d1b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d20:	e8 31 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d25:	50                   	push   eax
c0001d26:	50                   	push   eax
c0001d27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001d2b:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001d31:	e8 e4 fd ff ff       	call   c0001b1a <dlmemalign>
c0001d36:	83 c4 1c             	add    esp,0x1c
c0001d39:	c3                   	ret    

c0001d3a <dlpvalloc>:
c0001d3a:	83 ec 0c             	sub    esp,0xc
c0001d3d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001d44:	75 0a                	jne    c0001d50 <dlpvalloc+0x16>
c0001d46:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d4b:	e8 06 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d50:	52                   	push   edx
c0001d51:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001d56:	52                   	push   edx
c0001d57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d5b:	89 c1                	mov    ecx,eax
c0001d5d:	f7 d9                	neg    ecx
c0001d5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d63:	21 ca                	and    edx,ecx
c0001d65:	52                   	push   edx
c0001d66:	50                   	push   eax
c0001d67:	e8 ae fd ff ff       	call   c0001b1a <dlmemalign>
c0001d6c:	83 c4 1c             	add    esp,0x1c
c0001d6f:	c3                   	ret    

c0001d70 <dlmalloc_trim>:
c0001d70:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d75:	e8 dc f0 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d7a:	31 c0                	xor    eax,eax
c0001d7c:	c3                   	ret    

c0001d7d <dlmalloc_usable_size>:
c0001d7d:	53                   	push   ebx
c0001d7e:	31 c0                	xor    eax,eax
c0001d80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d84:	85 c9                	test   ecx,ecx
c0001d86:	74 24                	je     c0001dac <dlmalloc_usable_size+0x2f>
c0001d88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d8b:	f6 c2 02             	test   dl,0x2
c0001d8e:	74 08                	je     c0001d98 <dlmalloc_usable_size+0x1b>
c0001d90:	83 e2 fc             	and    edx,0xfffffffc
c0001d93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d96:	eb 14                	jmp    c0001dac <dlmalloc_usable_size+0x2f>
c0001d98:	89 d3                	mov    ebx,edx
c0001d9a:	31 c0                	xor    eax,eax
c0001d9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001da4:	74 06                	je     c0001dac <dlmalloc_usable_size+0x2f>
c0001da6:	83 e2 fc             	and    edx,0xfffffffc
c0001da9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001dac:	5b                   	pop    ebx
c0001dad:	c3                   	ret    

c0001dae <dlmallinfo>:
c0001dae:	55                   	push   ebp
c0001daf:	57                   	push   edi
c0001db0:	56                   	push   esi
c0001db1:	53                   	push   ebx
c0001db2:	83 ec 08             	sub    esp,0x8
c0001db5:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001dbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001dc0:	75 0a                	jne    c0001dcc <dlmallinfo+0x1e>
c0001dc2:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001dc7:	e8 8a f0 ff ff       	call   c0000e56 <malloc_consolidate>
c0001dcc:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001dd1:	31 ed                	xor    ebp,ebp
c0001dd3:	31 c9                	xor    ecx,ecx
c0001dd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001dd8:	83 e0 fc             	and    eax,0xfffffffc
c0001ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ddf:	31 c0                	xor    eax,eax
c0001de1:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001de8:	85 d2                	test   edx,edx
c0001dea:	74 0e                	je     c0001dfa <dlmallinfo+0x4c>
c0001dec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001def:	45                   	inc    ebp
c0001df0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001df3:	83 e6 fc             	and    esi,0xfffffffc
c0001df6:	01 f1                	add    ecx,esi
c0001df8:	eb ee                	jmp    c0001de8 <dlmallinfo+0x3a>
c0001dfa:	40                   	inc    eax
c0001dfb:	83 f8 0a             	cmp    eax,0xa
c0001dfe:	75 e1                	jne    c0001de1 <dlmallinfo+0x33>
c0001e00:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001e0e:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001e13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001e16:	39 f0                	cmp    eax,esi
c0001e18:	74 10                	je     c0001e2a <dlmallinfo+0x7c>
c0001e1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001e1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001e20:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001e23:	83 e7 fc             	and    edi,0xfffffffc
c0001e26:	01 fa                	add    edx,edi
c0001e28:	eb ec                	jmp    c0001e16 <dlmallinfo+0x68>
c0001e2a:	83 c0 08             	add    eax,0x8
c0001e2d:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001e32:	75 df                	jne    c0001e13 <dlmallinfo+0x65>
c0001e34:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001e3a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e3d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001e42:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e45:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e48:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e4b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e4e:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001e54:	89 03                	mov    DWORD PTR [ebx],eax
c0001e56:	29 d0                	sub    eax,edx
c0001e58:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e5f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e65:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001e6b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e6e:	89 d8                	mov    eax,ebx
c0001e70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e73:	83 c4 08             	add    esp,0x8
c0001e76:	5b                   	pop    ebx
c0001e77:	5e                   	pop    esi
c0001e78:	5f                   	pop    edi
c0001e79:	5d                   	pop    ebp
c0001e7a:	c2 04 00             	ret    0x4

c0001e7d <dlmalloc_stats>:
c0001e7d:	83 ec 30             	sub    esp,0x30
c0001e80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e84:	50                   	push   eax
c0001e85:	e8 24 ff ff ff       	call   c0001dae <dlmallinfo>
c0001e8a:	83 c4 30             	add    esp,0x30
c0001e8d:	c3                   	ret    

c0001e8e <dlmallopt>:
c0001e8e:	56                   	push   esi
c0001e8f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001e94:	53                   	push   ebx
c0001e95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e9d:	e8 b4 ef ff ff       	call   c0000e56 <malloc_consolidate>
c0001ea2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ea5:	83 f8 05             	cmp    eax,0x5
c0001ea8:	77 5d                	ja     c0001f07 <dlmallopt+0x79>
c0001eaa:	ff 24 85 20 f8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd07e0]
c0001eb1:	83 fb 50             	cmp    ebx,0x50
c0001eb4:	77 51                	ja     c0001f07 <dlmallopt+0x79>
c0001eb6:	85 db                	test   ebx,ebx
c0001eb8:	ba 08 00 00 00       	mov    edx,0x8
c0001ebd:	74 12                	je     c0001ed1 <dlmallopt+0x43>
c0001ebf:	83 c3 0b             	add    ebx,0xb
c0001ec2:	ba 10 00 00 00       	mov    edx,0x10
c0001ec7:	83 fb 0f             	cmp    ebx,0xf
c0001eca:	76 05                	jbe    c0001ed1 <dlmallopt+0x43>
c0001ecc:	89 da                	mov    edx,ebx
c0001ece:	83 e2 f8             	and    edx,0xfffffff8
c0001ed1:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001ed6:	83 e0 03             	and    eax,0x3
c0001ed9:	09 d0                	or     eax,edx
c0001edb:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001ee0:	eb 27                	jmp    c0001f09 <dlmallopt+0x7b>
c0001ee2:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001ee8:	eb 16                	jmp    c0001f00 <dlmallopt+0x72>
c0001eea:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001ef0:	eb 0e                	jmp    c0001f00 <dlmallopt+0x72>
c0001ef2:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001ef8:	eb 06                	jmp    c0001f00 <dlmallopt+0x72>
c0001efa:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001f00:	be 01 00 00 00       	mov    esi,0x1
c0001f05:	eb 02                	jmp    c0001f09 <dlmallopt+0x7b>
c0001f07:	31 f6                	xor    esi,esi
c0001f09:	5b                   	pop    ebx
c0001f0a:	89 f0                	mov    eax,esi
c0001f0c:	5e                   	pop    esi
c0001f0d:	c3                   	ret    
c0001f0e:	66 90                	xchg   ax,ax

c0001f10 <isblank>:
c0001f10:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f15:	74 09                	je     c0001f20 <isblank+0x10>
c0001f17:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f1c:	75 0a                	jne    c0001f28 <isblank+0x18>
c0001f1e:	66 90                	xchg   ax,ax
c0001f20:	b8 01 00 00 00       	mov    eax,0x1
c0001f25:	c3                   	ret    
c0001f26:	66 90                	xchg   ax,ax
c0001f28:	b8 00 00 00 00       	mov    eax,0x0
c0001f2d:	c3                   	ret    
c0001f2e:	66 90                	xchg   ax,ax

c0001f30 <iscntrl>:
c0001f30:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f35:	7e 09                	jle    c0001f40 <iscntrl+0x10>
c0001f37:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f3c:	75 0a                	jne    c0001f48 <iscntrl+0x18>
c0001f3e:	66 90                	xchg   ax,ax
c0001f40:	b8 01 00 00 00       	mov    eax,0x1
c0001f45:	c3                   	ret    
c0001f46:	66 90                	xchg   ax,ax
c0001f48:	b8 00 00 00 00       	mov    eax,0x0
c0001f4d:	c3                   	ret    
c0001f4e:	66 90                	xchg   ax,ax

c0001f50 <isdigit>:
c0001f50:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f55:	7e 0d                	jle    c0001f64 <isdigit+0x14>
c0001f57:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f5c:	7f 06                	jg     c0001f64 <isdigit+0x14>
c0001f5e:	b8 01 00 00 00       	mov    eax,0x1
c0001f63:	c3                   	ret    
c0001f64:	b8 00 00 00 00       	mov    eax,0x0
c0001f69:	c3                   	ret    
c0001f6a:	66 90                	xchg   ax,ax

c0001f6c <islower>:
c0001f6c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f71:	7e 0d                	jle    c0001f80 <islower+0x14>
c0001f73:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f78:	7f 06                	jg     c0001f80 <islower+0x14>
c0001f7a:	b8 01 00 00 00       	mov    eax,0x1
c0001f7f:	c3                   	ret    
c0001f80:	b8 00 00 00 00       	mov    eax,0x0
c0001f85:	c3                   	ret    
c0001f86:	66 90                	xchg   ax,ax

c0001f88 <isspace>:
c0001f88:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f8d:	7c 19                	jl     c0001fa8 <isspace+0x20>
c0001f8f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f94:	7e 0a                	jle    c0001fa0 <isspace+0x18>
c0001f96:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f9b:	75 0b                	jne    c0001fa8 <isspace+0x20>
c0001f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0001fa0:	b8 01 00 00 00       	mov    eax,0x1
c0001fa5:	c3                   	ret    
c0001fa6:	66 90                	xchg   ax,ax
c0001fa8:	b8 00 00 00 00       	mov    eax,0x0
c0001fad:	c3                   	ret    
c0001fae:	66 90                	xchg   ax,ax

c0001fb0 <isupper>:
c0001fb0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001fb5:	7e 0d                	jle    c0001fc4 <isupper+0x14>
c0001fb7:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001fbc:	7f 06                	jg     c0001fc4 <isupper+0x14>
c0001fbe:	b8 01 00 00 00       	mov    eax,0x1
c0001fc3:	c3                   	ret    
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalpha>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 db ff ff ff       	call   c0001fb0 <isupper>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalpha+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 87 ff ff ff       	call   c0001f6c <islower>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalpha+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <isalnum>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalpha>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 10                	jne    c000201c <isalnum+0x20>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 3b ff ff ff       	call   c0001f50 <isdigit>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	74 08                	je     c0002024 <isalnum+0x28>
c000201c:	b8 01 00 00 00       	mov    eax,0x1
c0002021:	c3                   	ret    
c0002022:	66 90                	xchg   ax,ax
c0002024:	b8 00 00 00 00       	mov    eax,0x0
c0002029:	c3                   	ret    
c000202a:	66 90                	xchg   ax,ax

c000202c <ispunct>:
c000202c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002030:	e8 c7 ff ff ff       	call   c0001ffc <isalnum>
c0002035:	83 c4 04             	add    esp,0x4
c0002038:	85 c0                	test   eax,eax
c000203a:	75 28                	jne    c0002064 <ispunct+0x38>
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 43 ff ff ff       	call   c0001f88 <isspace>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 18                	jne    c0002064 <ispunct+0x38>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 db fe ff ff       	call   c0001f30 <iscntrl>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	75 08                	jne    c0002064 <ispunct+0x38>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isgraph>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 87 ff ff ff       	call   c0001ffc <isalnum>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 10                	jne    c000208c <isgraph+0x20>
c000207c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002080:	e8 a7 ff ff ff       	call   c000202c <ispunct>
c0002085:	83 c4 04             	add    esp,0x4
c0002088:	85 c0                	test   eax,eax
c000208a:	74 08                	je     c0002094 <isgraph+0x28>
c000208c:	b8 01 00 00 00       	mov    eax,0x1
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax
c0002094:	b8 00 00 00 00       	mov    eax,0x0
c0002099:	c3                   	ret    
c000209a:	66 90                	xchg   ax,ax

c000209c <isprint>:
c000209c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00020a0:	e8 c7 ff ff ff       	call   c000206c <isgraph>
c00020a5:	83 c4 04             	add    esp,0x4
c00020a8:	85 c0                	test   eax,eax
c00020aa:	75 08                	jne    c00020b4 <isprint+0x18>
c00020ac:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c00020b1:	75 09                	jne    c00020bc <isprint+0x20>
c00020b3:	90                   	nop
c00020b4:	b8 01 00 00 00       	mov    eax,0x1
c00020b9:	c3                   	ret    
c00020ba:	66 90                	xchg   ax,ax
c00020bc:	b8 00 00 00 00       	mov    eax,0x0
c00020c1:	c3                   	ret    
c00020c2:	66 90                	xchg   ax,ax

c00020c4 <isxdigit>:
c00020c4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00020c8:	e8 83 fe ff ff       	call   c0001f50 <isdigit>
c00020cd:	83 c4 04             	add    esp,0x4
c00020d0:	85 c0                	test   eax,eax
c00020d2:	75 20                	jne    c00020f4 <isxdigit+0x30>
c00020d4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020d9:	7e 09                	jle    c00020e4 <isxdigit+0x20>
c00020db:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020e0:	7e 12                	jle    c00020f4 <isxdigit+0x30>
c00020e2:	66 90                	xchg   ax,ax
c00020e4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020e9:	7e 11                	jle    c00020fc <isxdigit+0x38>
c00020eb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020f0:	7f 0a                	jg     c00020fc <isxdigit+0x38>
c00020f2:	66 90                	xchg   ax,ax
c00020f4:	b8 01 00 00 00       	mov    eax,0x1
c00020f9:	c3                   	ret    
c00020fa:	66 90                	xchg   ax,ax
c00020fc:	b8 00 00 00 00       	mov    eax,0x0
c0002101:	c3                   	ret    

c0002102 <disk_status>:
c0002102:	31 c0                	xor    eax,eax
c0002104:	c3                   	ret    

c0002105 <disk_initialize>:
c0002105:	31 c0                	xor    eax,eax
c0002107:	c3                   	ret    

c0002108 <disk_read>:
c0002108:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000210d:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0002115:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002119:	e9 52 6b 02 00       	jmp    c0028c70 <fatWrapperReadDisk>

c000211e <disk_write>:
c000211e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002123:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c000212b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000212f:	e9 7c 6b 02 00       	jmp    c0028cb0 <fatWrapperWriteDisk>

c0002134 <disk_ioctl>:
c0002134:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000213d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002142:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c000214a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000214e:	e9 9d 6b 02 00       	jmp    c0028cf0 <fatWrapperIoctl>

c0002153 <ld_word>:
c0002153:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002157:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000215a:	c1 e2 08             	shl    edx,0x8
c000215d:	09 d0                	or     eax,edx
c000215f:	c3                   	ret    

c0002160 <ld_dword>:
c0002160:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002164:	89 d1                	mov    ecx,edx
c0002166:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000216a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000216d:	c1 e1 08             	shl    ecx,0x8
c0002170:	09 ca                	or     edx,ecx
c0002172:	c1 e2 08             	shl    edx,0x8
c0002175:	09 d0                	or     eax,edx
c0002177:	c3                   	ret    

c0002178 <st_word>:
c0002178:	66 89 10             	mov    WORD PTR [eax],dx
c000217b:	c3                   	ret    

c000217c <st_dword>:
c000217c:	89 10                	mov    DWORD PTR [eax],edx
c000217e:	c3                   	ret    

c000217f <mem_cpy>:
c000217f:	85 c9                	test   ecx,ecx
c0002181:	74 10                	je     c0002193 <mem_cpy+0x14>
c0002183:	57                   	push   edi
c0002184:	01 c1                	add    ecx,eax
c0002186:	56                   	push   esi
c0002187:	89 c7                	mov    edi,eax
c0002189:	89 d6                	mov    esi,edx
c000218b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000218c:	39 f9                	cmp    ecx,edi
c000218e:	75 fb                	jne    c000218b <mem_cpy+0xc>
c0002190:	5e                   	pop    esi
c0002191:	5f                   	pop    edi
c0002192:	c3                   	ret    
c0002193:	c3                   	ret    

c0002194 <mem_set>:
c0002194:	01 c1                	add    ecx,eax
c0002196:	88 10                	mov    BYTE PTR [eax],dl
c0002198:	40                   	inc    eax
c0002199:	39 c8                	cmp    eax,ecx
c000219b:	75 f9                	jne    c0002196 <mem_set+0x2>
c000219d:	c3                   	ret    

c000219e <mem_cmp>:
c000219e:	57                   	push   edi
c000219f:	56                   	push   esi
c00021a0:	89 c6                	mov    esi,eax
c00021a2:	53                   	push   ebx
c00021a3:	46                   	inc    esi
c00021a4:	42                   	inc    edx
c00021a5:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c00021a9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c00021ad:	29 fb                	sub    ebx,edi
c00021af:	89 cf                	mov    edi,ecx
c00021b1:	29 f7                	sub    edi,esi
c00021b3:	01 c7                	add    edi,eax
c00021b5:	74 04                	je     c00021bb <mem_cmp+0x1d>
c00021b7:	85 db                	test   ebx,ebx
c00021b9:	74 e8                	je     c00021a3 <mem_cmp+0x5>
c00021bb:	89 d8                	mov    eax,ebx
c00021bd:	5b                   	pop    ebx
c00021be:	5e                   	pop    esi
c00021bf:	5f                   	pop    edi
c00021c0:	c3                   	ret    

c00021c1 <chk_chr>:
c00021c1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00021c4:	85 c9                	test   ecx,ecx
c00021c6:	74 07                	je     c00021cf <chk_chr+0xe>
c00021c8:	39 d1                	cmp    ecx,edx
c00021ca:	74 03                	je     c00021cf <chk_chr+0xe>
c00021cc:	40                   	inc    eax
c00021cd:	eb f2                	jmp    c00021c1 <chk_chr>
c00021cf:	89 c8                	mov    eax,ecx
c00021d1:	c3                   	ret    

c00021d2 <dbc_1st>:
c00021d2:	31 c0                	xor    eax,eax
c00021d4:	c3                   	ret    

c00021d5 <dbc_2nd>:
c00021d5:	31 c0                	xor    eax,eax
c00021d7:	c3                   	ret    

c00021d8 <tchar2uni>:
c00021d8:	57                   	push   edi
c00021d9:	56                   	push   esi
c00021da:	53                   	push   ebx
c00021db:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021dd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021df:	8d 73 01             	lea    esi,[ebx+0x1]
c00021e2:	f6 c1 80             	test   cl,0x80
c00021e5:	75 0a                	jne    c00021f1 <tchar2uni+0x19>
c00021e7:	0f b6 d1             	movzx  edx,cl
c00021ea:	89 f3                	mov    ebx,esi
c00021ec:	e9 b2 00 00 00       	jmp    c00022a3 <tchar2uni+0xcb>
c00021f1:	89 ca                	mov    edx,ecx
c00021f3:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021f9:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021ff:	89 ca                	mov    edx,ecx
c0002201:	75 0a                	jne    c000220d <tchar2uni+0x35>
c0002203:	83 e2 1f             	and    edx,0x1f
c0002206:	b9 01 00 00 00       	mov    ecx,0x1
c000220b:	eb 37                	jmp    c0002244 <tchar2uni+0x6c>
c000220d:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002213:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002219:	75 0c                	jne    c0002227 <tchar2uni+0x4f>
c000221b:	89 ca                	mov    edx,ecx
c000221d:	b9 02 00 00 00       	mov    ecx,0x2
c0002222:	83 e2 0f             	and    edx,0xf
c0002225:	eb 1d                	jmp    c0002244 <tchar2uni+0x6c>
c0002227:	89 cf                	mov    edi,ecx
c0002229:	83 ca ff             	or     edx,0xffffffff
c000222c:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002232:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002238:	75 70                	jne    c00022aa <tchar2uni+0xd2>
c000223a:	89 ca                	mov    edx,ecx
c000223c:	b9 03 00 00 00       	mov    ecx,0x3
c0002241:	83 e2 07             	and    edx,0x7
c0002244:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002248:	46                   	inc    esi
c0002249:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000224c:	89 cf                	mov    edi,ecx
c000224e:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002254:	83 c7 80             	add    edi,0xffffff80
c0002257:	75 4e                	jne    c00022a7 <tchar2uni+0xcf>
c0002259:	c1 e2 06             	shl    edx,0x6
c000225c:	83 e1 3f             	and    ecx,0x3f
c000225f:	09 ca                	or     edx,ecx
c0002261:	39 de                	cmp    esi,ebx
c0002263:	75 e3                	jne    c0002248 <tchar2uni+0x70>
c0002265:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c000226b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002271:	76 34                	jbe    c00022a7 <tchar2uni+0xcf>
c0002273:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002276:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000227c:	77 29                	ja     c00022a7 <tchar2uni+0xcf>
c000227e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002284:	76 1d                	jbe    c00022a3 <tchar2uni+0xcb>
c0002286:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000228c:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002292:	c1 e1 06             	shl    ecx,0x6
c0002295:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000229b:	09 ca                	or     edx,ecx
c000229d:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c00022a3:	89 18                	mov    DWORD PTR [eax],ebx
c00022a5:	eb 03                	jmp    c00022aa <tchar2uni+0xd2>
c00022a7:	83 ca ff             	or     edx,0xffffffff
c00022aa:	5b                   	pop    ebx
c00022ab:	89 d0                	mov    eax,edx
c00022ad:	5e                   	pop    esi
c00022ae:	5f                   	pop    edi
c00022af:	c3                   	ret    

c00022b0 <put_utf>:
c00022b0:	53                   	push   ebx
c00022b1:	83 f8 7f             	cmp    eax,0x7f
c00022b4:	89 c3                	mov    ebx,eax
c00022b6:	b0 00                	mov    al,0x0
c00022b8:	77 11                	ja     c00022cb <put_utf+0x1b>
c00022ba:	85 c9                	test   ecx,ecx
c00022bc:	0f 84 e5 00 00 00    	je     c00023a7 <put_utf+0xf7>
c00022c2:	88 1a                	mov    BYTE PTR [edx],bl
c00022c4:	b0 01                	mov    al,0x1
c00022c6:	e9 dc 00 00 00       	jmp    c00023a7 <put_utf+0xf7>
c00022cb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022d1:	77 23                	ja     c00022f6 <put_utf+0x46>
c00022d3:	83 f9 01             	cmp    ecx,0x1
c00022d6:	0f 86 cb 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c00022dc:	89 d8                	mov    eax,ebx
c00022de:	83 e3 3f             	and    ebx,0x3f
c00022e1:	c1 e8 06             	shr    eax,0x6
c00022e4:	83 cb 80             	or     ebx,0xffffff80
c00022e7:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022ea:	83 c8 c0             	or     eax,0xffffffc0
c00022ed:	88 02                	mov    BYTE PTR [edx],al
c00022ef:	b0 02                	mov    al,0x2
c00022f1:	e9 b1 00 00 00       	jmp    c00023a7 <put_utf+0xf7>
c00022f6:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022fc:	77 40                	ja     c000233e <put_utf+0x8e>
c00022fe:	83 f9 02             	cmp    ecx,0x2
c0002301:	0f 86 a0 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c0002307:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000230d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002313:	0f 86 8e 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c0002319:	89 d8                	mov    eax,ebx
c000231b:	c1 e8 0c             	shr    eax,0xc
c000231e:	83 c8 e0             	or     eax,0xffffffe0
c0002321:	88 02                	mov    BYTE PTR [edx],al
c0002323:	89 d8                	mov    eax,ebx
c0002325:	83 e3 3f             	and    ebx,0x3f
c0002328:	c1 e8 06             	shr    eax,0x6
c000232b:	83 cb 80             	or     ebx,0xffffff80
c000232e:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002331:	83 e0 3f             	and    eax,0x3f
c0002334:	83 c8 80             	or     eax,0xffffff80
c0002337:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000233a:	b0 03                	mov    al,0x3
c000233c:	eb 69                	jmp    c00023a7 <put_utf+0xf7>
c000233e:	83 f9 03             	cmp    ecx,0x3
c0002341:	76 64                	jbe    c00023a7 <put_utf+0xf7>
c0002343:	89 d9                	mov    ecx,ebx
c0002345:	0f b7 c3             	movzx  eax,bx
c0002348:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000234e:	66 31 c9             	xor    cx,cx
c0002351:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002357:	c1 e9 06             	shr    ecx,0x6
c000235a:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002360:	77 43                	ja     c00023a5 <put_utf+0xf5>
c0002362:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002368:	77 3b                	ja     c00023a5 <put_utf+0xf5>
c000236a:	09 cb                	or     ebx,ecx
c000236c:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002372:	89 d8                	mov    eax,ebx
c0002374:	c1 e8 12             	shr    eax,0x12
c0002377:	83 c8 f0             	or     eax,0xfffffff0
c000237a:	88 02                	mov    BYTE PTR [edx],al
c000237c:	89 d8                	mov    eax,ebx
c000237e:	c1 e8 0c             	shr    eax,0xc
c0002381:	83 e0 3f             	and    eax,0x3f
c0002384:	83 c8 80             	or     eax,0xffffff80
c0002387:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000238a:	89 d8                	mov    eax,ebx
c000238c:	83 e3 3f             	and    ebx,0x3f
c000238f:	c1 e8 06             	shr    eax,0x6
c0002392:	83 cb 80             	or     ebx,0xffffff80
c0002395:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002398:	83 e0 3f             	and    eax,0x3f
c000239b:	83 c8 80             	or     eax,0xffffff80
c000239e:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c00023a1:	b0 04                	mov    al,0x4
c00023a3:	eb 02                	jmp    c00023a7 <put_utf+0xf7>
c00023a5:	31 c0                	xor    eax,eax
c00023a7:	5b                   	pop    ebx
c00023a8:	c3                   	ret    

c00023a9 <clst2sect>:
c00023a9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00023ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00023af:	83 ea 02             	sub    edx,0x2
c00023b2:	39 ca                	cmp    edx,ecx
c00023b4:	76 0d                	jbe    c00023c3 <clst2sect+0x1a>
c00023b6:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00023ba:	0f af d1             	imul   edx,ecx
c00023bd:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c00023c0:	89 d0                	mov    eax,edx
c00023c2:	c3                   	ret    
c00023c3:	31 c0                	xor    eax,eax
c00023c5:	c3                   	ret    

c00023c6 <pick_lfn>:
c00023c6:	55                   	push   ebp
c00023c7:	57                   	push   edi
c00023c8:	89 c7                	mov    edi,eax
c00023ca:	56                   	push   esi
c00023cb:	53                   	push   ebx
c00023cc:	89 d3                	mov    ebx,edx
c00023ce:	8d 42 1a             	lea    eax,[edx+0x1a]
c00023d1:	e8 7d fd ff ff       	call   c0002153 <ld_word>
c00023d6:	66 85 c0             	test   ax,ax
c00023d9:	74 04                	je     c00023df <pick_lfn+0x19>
c00023db:	31 c0                	xor    eax,eax
c00023dd:	eb 62                	jmp    c0002441 <pick_lfn+0x7b>
c00023df:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023e2:	bd 01 00 00 00       	mov    ebp,0x1
c00023e7:	31 f6                	xor    esi,esi
c00023e9:	83 e1 bf             	and    ecx,0xffffffbf
c00023ec:	49                   	dec    ecx
c00023ed:	6b c9 0d             	imul   ecx,ecx,0xd
c00023f0:	0f b6 86 80 f9 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0680]
c00023f7:	01 d8                	add    eax,ebx
c00023f9:	e8 55 fd ff ff       	call   c0002153 <ld_word>
c00023fe:	66 85 ed             	test   bp,bp
c0002401:	74 11                	je     c0002414 <pick_lfn+0x4e>
c0002403:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002409:	77 d0                	ja     c00023db <pick_lfn+0x15>
c000240b:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000240f:	89 c5                	mov    ebp,eax
c0002411:	41                   	inc    ecx
c0002412:	eb 0a                	jmp    c000241e <pick_lfn+0x58>
c0002414:	0f b7 c0             	movzx  eax,ax
c0002417:	3d ff ff 00 00       	cmp    eax,0xffff
c000241c:	75 bd                	jne    c00023db <pick_lfn+0x15>
c000241e:	46                   	inc    esi
c000241f:	83 fe 0d             	cmp    esi,0xd
c0002422:	75 cc                	jne    c00023f0 <pick_lfn+0x2a>
c0002424:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002427:	74 13                	je     c000243c <pick_lfn+0x76>
c0002429:	66 85 ed             	test   bp,bp
c000242c:	74 0e                	je     c000243c <pick_lfn+0x76>
c000242e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002434:	77 a5                	ja     c00023db <pick_lfn+0x15>
c0002436:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000243c:	b8 01 00 00 00       	mov    eax,0x1
c0002441:	5b                   	pop    ebx
c0002442:	5e                   	pop    esi
c0002443:	5f                   	pop    edi
c0002444:	5d                   	pop    ebp
c0002445:	c3                   	ret    

c0002446 <put_lfn>:
c0002446:	55                   	push   ebp
c0002447:	57                   	push   edi
c0002448:	89 d7                	mov    edi,edx
c000244a:	56                   	push   esi
c000244b:	31 f6                	xor    esi,esi
c000244d:	53                   	push   ebx
c000244e:	83 ec 0c             	sub    esp,0xc
c0002451:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002455:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002459:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000245f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002463:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002466:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002469:	31 d2                	xor    edx,edx
c000246b:	e8 08 fd ff ff       	call   c0002178 <st_word>
c0002470:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002477:	0f b6 d9             	movzx  ebx,cl
c000247a:	4b                   	dec    ebx
c000247b:	6b db 0d             	imul   ebx,ebx,0xd
c000247e:	0f b7 c6             	movzx  eax,si
c0002481:	3d ff ff 00 00       	cmp    eax,0xffff
c0002486:	74 09                	je     c0002491 <put_lfn+0x4b>
c0002488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000248c:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002490:	43                   	inc    ebx
c0002491:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002494:	0f b7 ee             	movzx  ebp,si
c0002497:	89 ea                	mov    edx,ebp
c0002499:	0f b6 80 80 f9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0680]
c00024a0:	01 f8                	add    eax,edi
c00024a2:	e8 d1 fc ff ff       	call   c0002178 <st_word>
c00024a7:	85 ed                	test   ebp,ebp
c00024a9:	75 05                	jne    c00024b0 <put_lfn+0x6a>
c00024ab:	be ff ff 00 00       	mov    esi,0xffff
c00024b0:	ff 04 24             	inc    DWORD PTR [esp]
c00024b3:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c00024b7:	75 c5                	jne    c000247e <put_lfn+0x38>
c00024b9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00024bf:	74 0b                	je     c00024cc <put_lfn+0x86>
c00024c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00024c5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00024ca:	75 07                	jne    c00024d3 <put_lfn+0x8d>
c00024cc:	83 c9 40             	or     ecx,0x40
c00024cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024d3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024d7:	88 07                	mov    BYTE PTR [edi],al
c00024d9:	83 c4 0c             	add    esp,0xc
c00024dc:	5b                   	pop    ebx
c00024dd:	5e                   	pop    esi
c00024de:	5f                   	pop    edi
c00024df:	5d                   	pop    ebp
c00024e0:	c3                   	ret    

c00024e1 <gen_numname>:
c00024e1:	57                   	push   edi
c00024e2:	89 cf                	mov    edi,ecx
c00024e4:	56                   	push   esi
c00024e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00024ea:	53                   	push   ebx
c00024eb:	89 c6                	mov    esi,eax
c00024ed:	83 ec 10             	sub    esp,0x10
c00024f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024f4:	e8 86 fc ff ff       	call   c000217f <mem_cpy>
c00024f9:	83 fb 05             	cmp    ebx,0x5
c00024fc:	76 30                	jbe    c000252e <gen_numname+0x4d>
c00024fe:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002501:	66 85 c0             	test   ax,ax
c0002504:	74 28                	je     c000252e <gen_numname+0x4d>
c0002506:	83 c7 02             	add    edi,0x2
c0002509:	ba 10 00 00 00       	mov    edx,0x10
c000250e:	89 c1                	mov    ecx,eax
c0002510:	01 db                	add    ebx,ebx
c0002512:	c1 e0 10             	shl    eax,0x10
c0002515:	83 e1 01             	and    ecx,0x1
c0002518:	c1 e8 11             	shr    eax,0x11
c000251b:	01 cb                	add    ebx,ecx
c000251d:	0f ba e3 10          	bt     ebx,0x10
c0002521:	73 06                	jae    c0002529 <gen_numname+0x48>
c0002523:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002529:	4a                   	dec    edx
c000252a:	75 e2                	jne    c000250e <gen_numname+0x2d>
c000252c:	eb d0                	jmp    c00024fe <gen_numname+0x1d>
c000252e:	b8 07 00 00 00       	mov    eax,0x7
c0002533:	89 d9                	mov    ecx,ebx
c0002535:	83 e1 0f             	and    ecx,0xf
c0002538:	8d 79 30             	lea    edi,[ecx+0x30]
c000253b:	83 ff 39             	cmp    edi,0x39
c000253e:	89 fa                	mov    edx,edi
c0002540:	76 03                	jbe    c0002545 <gen_numname+0x64>
c0002542:	8d 51 37             	lea    edx,[ecx+0x37]
c0002545:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002548:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000254c:	89 da                	mov    edx,ebx
c000254e:	c1 ea 04             	shr    edx,0x4
c0002551:	83 fb 0f             	cmp    ebx,0xf
c0002554:	76 06                	jbe    c000255c <gen_numname+0x7b>
c0002556:	89 c8                	mov    eax,ecx
c0002558:	89 d3                	mov    ebx,edx
c000255a:	eb d7                	jmp    c0002533 <gen_numname+0x52>
c000255c:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002561:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002564:	31 d2                	xor    edx,edx
c0002566:	8d 04 16             	lea    eax,[esi+edx*1]
c0002569:	39 ca                	cmp    edx,ecx
c000256b:	73 19                	jae    c0002586 <gen_numname+0xa5>
c000256d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002570:	83 f8 20             	cmp    eax,0x20
c0002573:	74 11                	je     c0002586 <gen_numname+0xa5>
c0002575:	e8 58 fc ff ff       	call   c00021d2 <dbc_1st>
c000257a:	85 c0                	test   eax,eax
c000257c:	74 05                	je     c0002583 <gen_numname+0xa2>
c000257e:	39 d3                	cmp    ebx,edx
c0002580:	74 04                	je     c0002586 <gen_numname+0xa5>
c0002582:	42                   	inc    edx
c0002583:	42                   	inc    edx
c0002584:	eb e0                	jmp    c0002566 <gen_numname+0x85>
c0002586:	83 f9 07             	cmp    ecx,0x7
c0002589:	b0 20                	mov    al,0x20
c000258b:	77 05                	ja     c0002592 <gen_numname+0xb1>
c000258d:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002591:	41                   	inc    ecx
c0002592:	42                   	inc    edx
c0002593:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002597:	83 fa 07             	cmp    edx,0x7
c000259a:	76 ea                	jbe    c0002586 <gen_numname+0xa5>
c000259c:	83 c4 10             	add    esp,0x10
c000259f:	5b                   	pop    ebx
c00025a0:	5e                   	pop    esi
c00025a1:	5f                   	pop    edi
c00025a2:	c3                   	ret    

c00025a3 <sum_sfn>:
c00025a3:	53                   	push   ebx
c00025a4:	31 c9                	xor    ecx,ecx
c00025a6:	31 db                	xor    ebx,ebx
c00025a8:	0f b6 d1             	movzx  edx,cl
c00025ab:	d1 ea                	shr    edx,1
c00025ad:	c1 e1 07             	shl    ecx,0x7
c00025b0:	09 ca                	or     edx,ecx
c00025b2:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00025b5:	43                   	inc    ebx
c00025b6:	01 ca                	add    edx,ecx
c00025b8:	83 fb 0b             	cmp    ebx,0xb
c00025bb:	88 d1                	mov    cl,dl
c00025bd:	75 e9                	jne    c00025a8 <sum_sfn+0x5>
c00025bf:	5b                   	pop    ebx
c00025c0:	88 d0                	mov    al,dl
c00025c2:	c3                   	ret    

c00025c3 <get_ldnumber>:
c00025c3:	55                   	push   ebp
c00025c4:	57                   	push   edi
c00025c5:	56                   	push   esi
c00025c6:	83 ce ff             	or     esi,0xffffffff
c00025c9:	53                   	push   ebx
c00025ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00025cc:	85 d2                	test   edx,edx
c00025ce:	74 38                	je     c0002608 <get_ldnumber+0x45>
c00025d0:	89 c5                	mov    ebp,eax
c00025d2:	89 d1                	mov    ecx,edx
c00025d4:	41                   	inc    ecx
c00025d5:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c00025d9:	80 fb 1f             	cmp    bl,0x1f
c00025dc:	76 05                	jbe    c00025e3 <get_ldnumber+0x20>
c00025de:	83 fb 3a             	cmp    ebx,0x3a
c00025e1:	75 f1                	jne    c00025d4 <get_ldnumber+0x11>
c00025e3:	31 f6                	xor    esi,esi
c00025e5:	83 fb 3a             	cmp    ebx,0x3a
c00025e8:	75 1e                	jne    c0002608 <get_ldnumber+0x45>
c00025ea:	8a 1a                	mov    bl,BYTE PTR [edx]
c00025ec:	83 ce ff             	or     esi,0xffffffff
c00025ef:	8d 7b d0             	lea    edi,[ebx-0x30]
c00025f2:	89 f8                	mov    eax,edi
c00025f4:	3c 09                	cmp    al,0x9
c00025f6:	77 10                	ja     c0002608 <get_ldnumber+0x45>
c00025f8:	83 c2 02             	add    edx,0x2
c00025fb:	39 d1                	cmp    ecx,edx
c00025fd:	75 09                	jne    c0002608 <get_ldnumber+0x45>
c00025ff:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0002602:	0f be f3             	movsx  esi,bl
c0002605:	83 ee 30             	sub    esi,0x30
c0002608:	5b                   	pop    ebx
c0002609:	89 f0                	mov    eax,esi
c000260b:	5e                   	pop    esi
c000260c:	5f                   	pop    edi
c000260d:	5d                   	pop    ebp
c000260e:	c3                   	ret    

c000260f <validate>:
c000260f:	56                   	push   esi
c0002610:	85 c0                	test   eax,eax
c0002612:	53                   	push   ebx
c0002613:	89 d6                	mov    esi,edx
c0002615:	51                   	push   ecx
c0002616:	75 09                	jne    c0002621 <validate+0x12>
c0002618:	b8 09 00 00 00       	mov    eax,0x9
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	eb 2e                	jmp    c000264f <validate+0x40>
c0002621:	89 c3                	mov    ebx,eax
c0002623:	8b 00                	mov    eax,DWORD PTR [eax]
c0002625:	85 c0                	test   eax,eax
c0002627:	74 ef                	je     c0002618 <validate+0x9>
c0002629:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000262c:	74 ea                	je     c0002618 <validate+0x9>
c000262e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002631:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002635:	75 e1                	jne    c0002618 <validate+0x9>
c0002637:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263b:	83 ec 0c             	sub    esp,0xc
c000263e:	50                   	push   eax
c000263f:	e8 be fa ff ff       	call   c0002102 <disk_status>
c0002644:	83 c4 10             	add    esp,0x10
c0002647:	a8 01                	test   al,0x1
c0002649:	75 cd                	jne    c0002618 <validate+0x9>
c000264b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000264d:	31 c0                	xor    eax,eax
c000264f:	89 0e                	mov    DWORD PTR [esi],ecx
c0002651:	5a                   	pop    edx
c0002652:	5b                   	pop    ebx
c0002653:	5e                   	pop    esi
c0002654:	c3                   	ret    

c0002655 <sync_window>:
c0002655:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002659:	74 58                	je     c00026b3 <sync_window+0x5e>
c000265b:	56                   	push   esi
c000265c:	53                   	push   ebx
c000265d:	89 c3                	mov    ebx,eax
c000265f:	51                   	push   ecx
c0002660:	6a 01                	push   0x1
c0002662:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002665:	8d 70 34             	lea    esi,[eax+0x34]
c0002668:	56                   	push   esi
c0002669:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000266d:	50                   	push   eax
c000266e:	e8 ab fa ff ff       	call   c000211e <disk_write>
c0002673:	83 c4 10             	add    esp,0x10
c0002676:	ba 01 00 00 00       	mov    edx,0x1
c000267b:	85 c0                	test   eax,eax
c000267d:	75 2e                	jne    c00026ad <sync_window+0x58>
c000267f:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002683:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002686:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002689:	89 c1                	mov    ecx,eax
c000268b:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000268e:	39 d1                	cmp    ecx,edx
c0002690:	73 19                	jae    c00026ab <sync_window+0x56>
c0002692:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002696:	75 13                	jne    c00026ab <sync_window+0x56>
c0002698:	6a 01                	push   0x1
c000269a:	01 d0                	add    eax,edx
c000269c:	50                   	push   eax
c000269d:	56                   	push   esi
c000269e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026a2:	50                   	push   eax
c00026a3:	e8 76 fa ff ff       	call   c000211e <disk_write>
c00026a8:	83 c4 10             	add    esp,0x10
c00026ab:	31 d2                	xor    edx,edx
c00026ad:	89 d0                	mov    eax,edx
c00026af:	5a                   	pop    edx
c00026b0:	5b                   	pop    ebx
c00026b1:	5e                   	pop    esi
c00026b2:	c3                   	ret    
c00026b3:	31 d2                	xor    edx,edx
c00026b5:	89 d0                	mov    eax,edx
c00026b7:	c3                   	ret    

c00026b8 <move_window>:
c00026b8:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00026bb:	74 3a                	je     c00026f7 <move_window+0x3f>
c00026bd:	56                   	push   esi
c00026be:	89 d6                	mov    esi,edx
c00026c0:	53                   	push   ebx
c00026c1:	89 c3                	mov    ebx,eax
c00026c3:	51                   	push   ecx
c00026c4:	e8 8c ff ff ff       	call   c0002655 <sync_window>
c00026c9:	85 c0                	test   eax,eax
c00026cb:	75 2d                	jne    c00026fa <move_window+0x42>
c00026cd:	6a 01                	push   0x1
c00026cf:	56                   	push   esi
c00026d0:	8d 43 34             	lea    eax,[ebx+0x34]
c00026d3:	50                   	push   eax
c00026d4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026d8:	50                   	push   eax
c00026d9:	e8 2a fa ff ff       	call   c0002108 <disk_read>
c00026de:	83 c4 10             	add    esp,0x10
c00026e1:	89 c2                	mov    edx,eax
c00026e3:	31 c0                	xor    eax,eax
c00026e5:	85 d2                	test   edx,edx
c00026e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00026ec:	0f 45 f2             	cmovne esi,edx
c00026ef:	0f 95 c0             	setne  al
c00026f2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00026f5:	eb 03                	jmp    c00026fa <move_window+0x42>
c00026f7:	31 c0                	xor    eax,eax
c00026f9:	c3                   	ret    
c00026fa:	5a                   	pop    edx
c00026fb:	5b                   	pop    ebx
c00026fc:	5e                   	pop    esi
c00026fd:	c3                   	ret    

c00026fe <check_fs>:
c00026fe:	53                   	push   ebx
c00026ff:	89 c3                	mov    ebx,eax
c0002701:	83 ec 08             	sub    esp,0x8
c0002704:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002708:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000270f:	e8 a4 ff ff ff       	call   c00026b8 <move_window>
c0002714:	ba 04 00 00 00       	mov    edx,0x4
c0002719:	85 c0                	test   eax,eax
c000271b:	75 68                	jne    c0002785 <check_fs+0x87>
c000271d:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002723:	e8 2b fa ff ff       	call   c0002153 <ld_word>
c0002728:	ba 03 00 00 00       	mov    edx,0x3
c000272d:	66 3d 55 aa          	cmp    ax,0xaa55
c0002731:	75 52                	jne    c0002785 <check_fs+0x87>
c0002733:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002736:	8d 50 18             	lea    edx,[eax+0x18]
c0002739:	80 fa 01             	cmp    dl,0x1
c000273c:	76 09                	jbe    c0002747 <check_fs+0x49>
c000273e:	3c eb                	cmp    al,0xeb
c0002740:	ba 02 00 00 00       	mov    edx,0x2
c0002745:	75 3e                	jne    c0002785 <check_fs+0x87>
c0002747:	ba e0 36 03 c0       	mov    edx,0xc00336e0
c000274c:	b9 03 00 00 00       	mov    ecx,0x3
c0002751:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002754:	e8 45 fa ff ff       	call   c000219e <mem_cmp>
c0002759:	31 d2                	xor    edx,edx
c000275b:	85 c0                	test   eax,eax
c000275d:	74 26                	je     c0002785 <check_fs+0x87>
c000275f:	ba 38 f8 02 c0       	mov    edx,0xc002f838
c0002764:	b9 05 00 00 00       	mov    ecx,0x5
c0002769:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000276f:	e8 2a fa ff ff       	call   c000219e <mem_cmp>
c0002774:	31 d2                	xor    edx,edx
c0002776:	85 c0                	test   eax,eax
c0002778:	74 0b                	je     c0002785 <check_fs+0x87>
c000277a:	31 d2                	xor    edx,edx
c000277c:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002780:	0f 95 c2             	setne  dl
c0002783:	01 d2                	add    edx,edx
c0002785:	83 c4 08             	add    esp,0x8
c0002788:	89 d0                	mov    eax,edx
c000278a:	5b                   	pop    ebx
c000278b:	c3                   	ret    

c000278c <find_volume>:
c000278c:	55                   	push   ebp
c000278d:	57                   	push   edi
c000278e:	56                   	push   esi
c000278f:	89 c6                	mov    esi,eax
c0002791:	53                   	push   ebx
c0002792:	89 d3                	mov    ebx,edx
c0002794:	83 ec 2c             	sub    esp,0x2c
c0002797:	31 d2                	xor    edx,edx
c0002799:	e8 60 ff ff ff       	call   c00026fe <check_fs>
c000279e:	85 db                	test   ebx,ebx
c00027a0:	0f 94 c2             	sete   dl
c00027a3:	83 f8 02             	cmp    eax,0x2
c00027a6:	74 07                	je     c00027af <find_volume+0x23>
c00027a8:	77 63                	ja     c000280d <find_volume+0x81>
c00027aa:	f6 c2 01             	test   dl,0x1
c00027ad:	75 5e                	jne    c000280d <find_volume+0x81>
c00027af:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00027b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027b9:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c00027bf:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00027c3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00027c7:	89 f8                	mov    eax,edi
c00027c9:	83 c7 10             	add    edi,0x10
c00027cc:	e8 8f f9 ff ff       	call   c0002160 <ld_dword>
c00027d1:	83 c5 04             	add    ebp,0x4
c00027d4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00027d8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00027db:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00027df:	75 e2                	jne    c00027c3 <find_volume+0x37>
c00027e1:	83 fb 01             	cmp    ebx,0x1
c00027e4:	0f b6 fa             	movzx  edi,dl
c00027e7:	83 d3 ff             	adc    ebx,0xffffffff
c00027ea:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00027ee:	b8 03 00 00 00       	mov    eax,0x3
c00027f3:	85 d2                	test   edx,edx
c00027f5:	74 07                	je     c00027fe <find_volume+0x72>
c00027f7:	89 f0                	mov    eax,esi
c00027f9:	e8 00 ff ff ff       	call   c00026fe <check_fs>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <find_volume+0x81>
c0002803:	85 ff                	test   edi,edi
c0002805:	74 06                	je     c000280d <find_volume+0x81>
c0002807:	43                   	inc    ebx
c0002808:	83 fb 03             	cmp    ebx,0x3
c000280b:	76 dd                	jbe    c00027ea <find_volume+0x5e>
c000280d:	83 c4 2c             	add    esp,0x2c
c0002810:	5b                   	pop    ebx
c0002811:	5e                   	pop    esi
c0002812:	5f                   	pop    edi
c0002813:	5d                   	pop    ebp
c0002814:	c3                   	ret    

c0002815 <mount_volume>:
c0002815:	55                   	push   ebp
c0002816:	89 d5                	mov    ebp,edx
c0002818:	57                   	push   edi
c0002819:	89 cf                	mov    edi,ecx
c000281b:	56                   	push   esi
c000281c:	53                   	push   ebx
c000281d:	bb 0b 00 00 00       	mov    ebx,0xb
c0002822:	83 ec 2c             	sub    esp,0x2c
c0002825:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000282b:	e8 93 fd ff ff       	call   c00025c3 <get_ldnumber>
c0002830:	85 c0                	test   eax,eax
c0002832:	0f 88 d0 02 00 00    	js     c0002b08 <mount_volume+0x2f3>
c0002838:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c000283f:	89 c2                	mov    edx,eax
c0002841:	bb 0c 00 00 00       	mov    ebx,0xc
c0002846:	85 f6                	test   esi,esi
c0002848:	0f 84 ba 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c000284e:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002851:	83 e7 fe             	and    edi,0xfffffffe
c0002854:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002857:	74 3c                	je     c0002895 <mount_volume+0x80>
c0002859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000285d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002861:	83 ec 0c             	sub    esp,0xc
c0002864:	50                   	push   eax
c0002865:	e8 98 f8 ff ff       	call   c0002102 <disk_status>
c000286a:	83 c4 10             	add    esp,0x10
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	a8 01                	test   al,0x1
c0002873:	75 20                	jne    c0002895 <mount_volume+0x80>
c0002875:	31 db                	xor    ebx,ebx
c0002877:	81 e7 fe 00 00 00    	and    edi,0xfe
c000287d:	0f 84 85 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c0002883:	a8 04                	test   al,0x4
c0002885:	0f 84 7d 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c000288b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002890:	e9 73 02 00 00       	jmp    c0002b08 <mount_volume+0x2f3>
c0002895:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002898:	83 ec 0c             	sub    esp,0xc
c000289b:	0f b6 c2             	movzx  eax,dl
c000289e:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00028a1:	bb 03 00 00 00       	mov    ebx,0x3
c00028a6:	50                   	push   eax
c00028a7:	e8 59 f8 ff ff       	call   c0002105 <disk_initialize>
c00028ac:	83 c4 10             	add    esp,0x10
c00028af:	a8 01                	test   al,0x1
c00028b1:	0f 85 51 02 00 00    	jne    c0002b08 <mount_volume+0x2f3>
c00028b7:	81 e7 fe 00 00 00    	and    edi,0xfe
c00028bd:	74 04                	je     c00028c3 <mount_volume+0xae>
c00028bf:	a8 04                	test   al,0x4
c00028c1:	75 c8                	jne    c000288b <mount_volume+0x76>
c00028c3:	31 d2                	xor    edx,edx
c00028c5:	89 f0                	mov    eax,esi
c00028c7:	e8 c0 fe ff ff       	call   c000278c <find_volume>
c00028cc:	bb 01 00 00 00       	mov    ebx,0x1
c00028d1:	83 f8 04             	cmp    eax,0x4
c00028d4:	0f 84 2e 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c00028da:	83 f8 01             	cmp    eax,0x1
c00028dd:	76 0a                	jbe    c00028e9 <mount_volume+0xd4>
c00028df:	bb 0d 00 00 00       	mov    ebx,0xd
c00028e4:	e9 1f 02 00 00       	jmp    c0002b08 <mount_volume+0x2f3>
c00028e9:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028ec:	e8 62 f8 ff ff       	call   c0002153 <ld_word>
c00028f1:	66 3d 00 02          	cmp    ax,0x200
c00028f5:	75 e8                	jne    c00028df <mount_volume+0xca>
c00028f7:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028fa:	e8 54 f8 ff ff       	call   c0002153 <ld_word>
c00028ff:	0f b7 c0             	movzx  eax,ax
c0002902:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002906:	85 c0                	test   eax,eax
c0002908:	75 0c                	jne    c0002916 <mount_volume+0x101>
c000290a:	8d 46 58             	lea    eax,[esi+0x58]
c000290d:	e8 4e f8 ff ff       	call   c0002160 <ld_dword>
c0002912:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002916:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002919:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000291c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002924:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002927:	89 e8                	mov    eax,ebp
c0002929:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000292c:	8d 45 ff             	lea    eax,[ebp-0x1]
c000292f:	3c 01                	cmp    al,0x1
c0002931:	77 ac                	ja     c00028df <mount_volume+0xca>
c0002933:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002937:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000293b:	66 85 c0             	test   ax,ax
c000293e:	89 c3                	mov    ebx,eax
c0002940:	74 9d                	je     c00028df <mount_volume+0xca>
c0002942:	8d 40 ff             	lea    eax,[eax-0x1]
c0002945:	85 d8                	test   eax,ebx
c0002947:	75 96                	jne    c00028df <mount_volume+0xca>
c0002949:	8d 46 45             	lea    eax,[esi+0x45]
c000294c:	e8 02 f8 ff ff       	call   c0002153 <ld_word>
c0002951:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002955:	a8 0f                	test   al,0xf
c0002957:	89 c7                	mov    edi,eax
c0002959:	75 84                	jne    c00028df <mount_volume+0xca>
c000295b:	8d 46 47             	lea    eax,[esi+0x47]
c000295e:	e8 f0 f7 ff ff       	call   c0002153 <ld_word>
c0002963:	0f b7 d0             	movzx  edx,ax
c0002966:	85 d2                	test   edx,edx
c0002968:	75 0a                	jne    c0002974 <mount_volume+0x15f>
c000296a:	8d 46 54             	lea    eax,[esi+0x54]
c000296d:	e8 ee f7 ff ff       	call   c0002160 <ld_dword>
c0002972:	89 c2                	mov    edx,eax
c0002974:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002978:	8d 46 42             	lea    eax,[esi+0x42]
c000297b:	e8 d3 f7 ff ff       	call   c0002153 <ld_word>
c0002980:	0f b7 c8             	movzx  ecx,ax
c0002983:	85 c9                	test   ecx,ecx
c0002985:	0f 84 54 ff ff ff    	je     c00028df <mount_volume+0xca>
c000298b:	89 e8                	mov    eax,ebp
c000298d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002991:	0f b6 e8             	movzx  ebp,al
c0002994:	0f b7 c7             	movzx  eax,di
c0002997:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c000299c:	c1 e8 04             	shr    eax,0x4
c000299f:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00029a3:	01 e8                	add    eax,ebp
c00029a5:	01 c8                	add    eax,ecx
c00029a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00029ab:	39 c2                	cmp    edx,eax
c00029ad:	0f 82 2c ff ff ff    	jb     c00028df <mount_volume+0xca>
c00029b3:	29 c2                	sub    edx,eax
c00029b5:	89 d5                	mov    ebp,edx
c00029b7:	89 d0                	mov    eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	f7 f3                	div    ebx
c00029bd:	39 dd                	cmp    ebp,ebx
c00029bf:	0f 82 1a ff ff ff    	jb     c00028df <mount_volume+0xca>
c00029c5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00029ca:	0f 87 0f ff ff ff    	ja     c00028df <mount_volume+0xca>
c00029d0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00029d5:	0f 86 1e 01 00 00    	jbe    c0002af9 <mount_volume+0x2e4>
c00029db:	bb 03 00 00 00       	mov    ebx,0x3
c00029e0:	8d 68 02             	lea    ebp,[eax+0x2]
c00029e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e7:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00029ee:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00029f2:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029f5:	01 c8                	add    eax,ecx
c00029f7:	83 fb 03             	cmp    ebx,0x3
c00029fa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029fd:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002a00:	75 23                	jne    c0002a25 <mount_volume+0x210>
c0002a02:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002a05:	e8 49 f7 ff ff       	call   c0002153 <ld_word>
c0002a0a:	09 c7                	or     edi,eax
c0002a0c:	66 85 ff             	test   di,di
c0002a0f:	0f 85 ca fe ff ff    	jne    c00028df <mount_volume+0xca>
c0002a15:	8d 46 60             	lea    eax,[esi+0x60]
c0002a18:	e8 43 f7 ff ff       	call   c0002160 <ld_dword>
c0002a1d:	c1 e5 02             	shl    ebp,0x2
c0002a20:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002a23:	eb 25                	jmp    c0002a4a <mount_volume+0x235>
c0002a25:	66 85 ff             	test   di,di
c0002a28:	0f 84 b1 fe ff ff    	je     c00028df <mount_volume+0xca>
c0002a2e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002a32:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c0002a36:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c0002a3a:	83 e5 01             	and    ebp,0x1
c0002a3d:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002a40:	d1 ea                	shr    edx,1
c0002a42:	01 d5                	add    ebp,edx
c0002a44:	83 fb 02             	cmp    ebx,0x2
c0002a47:	0f 44 ef             	cmove  ebp,edi
c0002a4a:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a50:	c1 ed 09             	shr    ebp,0x9
c0002a53:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a57:	0f 87 82 fe ff ff    	ja     c00028df <mount_volume+0xca>
c0002a5d:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a64:	83 fb 03             	cmp    ebx,0x3
c0002a67:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a6e:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a72:	75 6e                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a74:	8d 46 64             	lea    eax,[esi+0x64]
c0002a77:	e8 d7 f6 ff ff       	call   c0002153 <ld_word>
c0002a7c:	66 48                	dec    ax
c0002a7e:	75 62                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002a84:	89 f0                	mov    eax,esi
c0002a86:	42                   	inc    edx
c0002a87:	e8 2c fc ff ff       	call   c00026b8 <move_window>
c0002a8c:	85 c0                	test   eax,eax
c0002a8e:	75 52                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a90:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a94:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a9a:	e8 b4 f6 ff ff       	call   c0002153 <ld_word>
c0002a9f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002aa3:	75 3d                	jne    c0002ae2 <mount_volume+0x2cd>
c0002aa5:	8d 46 34             	lea    eax,[esi+0x34]
c0002aa8:	e8 b3 f6 ff ff       	call   c0002160 <ld_dword>
c0002aad:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002ab2:	75 2e                	jne    c0002ae2 <mount_volume+0x2cd>
c0002ab4:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002aba:	e8 a1 f6 ff ff       	call   c0002160 <ld_dword>
c0002abf:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002ac4:	75 1c                	jne    c0002ae2 <mount_volume+0x2cd>
c0002ac6:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002acc:	e8 8f f6 ff ff       	call   c0002160 <ld_dword>
c0002ad1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002ad4:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002ada:	e8 81 f6 ff ff       	call   c0002160 <ld_dword>
c0002adf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002ae2:	88 1e                	mov    BYTE PTR [esi],bl
c0002ae4:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c0002aea:	31 db                	xor    ebx,ebx
c0002aec:	40                   	inc    eax
c0002aed:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002af3:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002af7:	eb 0f                	jmp    c0002b08 <mount_volume+0x2f3>
c0002af9:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002afe:	19 db                	sbb    ebx,ebx
c0002b00:	83 c3 02             	add    ebx,0x2
c0002b03:	e9 d8 fe ff ff       	jmp    c00029e0 <mount_volume+0x1cb>
c0002b08:	83 c4 2c             	add    esp,0x2c
c0002b0b:	89 d8                	mov    eax,ebx
c0002b0d:	5b                   	pop    ebx
c0002b0e:	5e                   	pop    esi
c0002b0f:	5f                   	pop    edi
c0002b10:	5d                   	pop    ebp
c0002b11:	c3                   	ret    

c0002b12 <put_fat>:
c0002b12:	55                   	push   ebp
c0002b13:	bd 02 00 00 00       	mov    ebp,0x2
c0002b18:	57                   	push   edi
c0002b19:	56                   	push   esi
c0002b1a:	53                   	push   ebx
c0002b1b:	83 ec 1c             	sub    esp,0x1c
c0002b1e:	83 fa 01             	cmp    edx,0x1
c0002b21:	0f 86 38 01 00 00    	jbe    c0002c5f <put_fat+0x14d>
c0002b27:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002b2a:	0f 86 2f 01 00 00    	jbe    c0002c5f <put_fat+0x14d>
c0002b30:	89 c6                	mov    esi,eax
c0002b32:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002b35:	89 cf                	mov    edi,ecx
c0002b37:	89 d3                	mov    ebx,edx
c0002b39:	83 f8 02             	cmp    eax,0x2
c0002b3c:	0f 84 b1 00 00 00    	je     c0002bf3 <put_fat+0xe1>
c0002b42:	83 f8 03             	cmp    eax,0x3
c0002b45:	0f 84 d5 00 00 00    	je     c0002c20 <put_fat+0x10e>
c0002b4b:	48                   	dec    eax
c0002b4c:	0f 85 0d 01 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002b52:	89 d1                	mov    ecx,edx
c0002b54:	89 f0                	mov    eax,esi
c0002b56:	d1 e9                	shr    ecx,1
c0002b58:	01 d1                	add    ecx,edx
c0002b5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5e:	89 ca                	mov    edx,ecx
c0002b60:	c1 ea 09             	shr    edx,0x9
c0002b63:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b66:	e8 4d fb ff ff       	call   c00026b8 <move_window>
c0002b6b:	85 c0                	test   eax,eax
c0002b6d:	89 c5                	mov    ebp,eax
c0002b6f:	0f 85 ea 00 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002b75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b79:	8d 46 34             	lea    eax,[esi+0x34]
c0002b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b80:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b83:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b89:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b8d:	83 e3 01             	and    ebx,0x1
c0002b90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b94:	89 f8                	mov    eax,edi
c0002b96:	74 11                	je     c0002ba9 <put_fat+0x97>
c0002b98:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b9a:	89 f8                	mov    eax,edi
c0002b9c:	c1 e0 04             	shl    eax,0x4
c0002b9f:	25 f0 0f 00 00       	and    eax,0xff0
c0002ba4:	83 e2 0f             	and    edx,0xf
c0002ba7:	09 d0                	or     eax,edx
c0002ba9:	88 01                	mov    BYTE PTR [ecx],al
c0002bab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002baf:	89 f0                	mov    eax,esi
c0002bb1:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bb5:	c1 ea 09             	shr    edx,0x9
c0002bb8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bbb:	e8 f8 fa ff ff       	call   c00026b8 <move_window>
c0002bc0:	85 c0                	test   eax,eax
c0002bc2:	89 c5                	mov    ebp,eax
c0002bc4:	0f 85 95 00 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bce:	25 ff 01 00 00       	and    eax,0x1ff
c0002bd3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002bd7:	85 db                	test   ebx,ebx
c0002bd9:	74 07                	je     c0002be2 <put_fat+0xd0>
c0002bdb:	c1 ef 04             	shr    edi,0x4
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	eb 0d                	jmp    c0002bef <put_fat+0xdd>
c0002be2:	8a 08                	mov    cl,BYTE PTR [eax]
c0002be4:	c1 ef 08             	shr    edi,0x8
c0002be7:	83 e7 0f             	and    edi,0xf
c0002bea:	83 e1 f0             	and    ecx,0xfffffff0
c0002bed:	09 f9                	or     ecx,edi
c0002bef:	88 08                	mov    BYTE PTR [eax],cl
c0002bf1:	eb 27                	jmp    c0002c1a <put_fat+0x108>
c0002bf3:	c1 ea 08             	shr    edx,0x8
c0002bf6:	89 f0                	mov    eax,esi
c0002bf8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bfb:	e8 b8 fa ff ff       	call   c00026b8 <move_window>
c0002c00:	85 c0                	test   eax,eax
c0002c02:	89 c5                	mov    ebp,eax
c0002c04:	75 59                	jne    c0002c5f <put_fat+0x14d>
c0002c06:	01 db                	add    ebx,ebx
c0002c08:	0f b7 d7             	movzx  edx,di
c0002c0b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c11:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002c15:	e8 5e f5 ff ff       	call   c0002178 <st_word>
c0002c1a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1e:	eb 3f                	jmp    c0002c5f <put_fat+0x14d>
c0002c20:	c1 ea 07             	shr    edx,0x7
c0002c23:	89 f0                	mov    eax,esi
c0002c25:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002c28:	e8 8b fa ff ff       	call   c00026b8 <move_window>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	89 c5                	mov    ebp,eax
c0002c31:	75 2c                	jne    c0002c5f <put_fat+0x14d>
c0002c33:	c1 e3 02             	shl    ebx,0x2
c0002c36:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c42:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c46:	89 d8                	mov    eax,ebx
c0002c48:	e8 13 f5 ff ff       	call   c0002160 <ld_dword>
c0002c4d:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c52:	09 f8                	or     eax,edi
c0002c54:	89 c2                	mov    edx,eax
c0002c56:	89 d8                	mov    eax,ebx
c0002c58:	e8 1f f5 ff ff       	call   c000217c <st_dword>
c0002c5d:	eb bb                	jmp    c0002c1a <put_fat+0x108>
c0002c5f:	83 c4 1c             	add    esp,0x1c
c0002c62:	89 e8                	mov    eax,ebp
c0002c64:	5b                   	pop    ebx
c0002c65:	5e                   	pop    esi
c0002c66:	5f                   	pop    edi
c0002c67:	5d                   	pop    ebp
c0002c68:	c3                   	ret    

c0002c69 <dir_clear>:
c0002c69:	55                   	push   ebp
c0002c6a:	57                   	push   edi
c0002c6b:	56                   	push   esi
c0002c6c:	89 c6                	mov    esi,eax
c0002c6e:	53                   	push   ebx
c0002c6f:	83 ec 1c             	sub    esp,0x1c
c0002c72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c76:	e8 da f9 ff ff       	call   c0002655 <sync_window>
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	0f 85 c1 00 00 00    	jne    c0002d44 <dir_clear+0xdb>
c0002c83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c87:	89 f0                	mov    eax,esi
c0002c89:	e8 1b f7 ff ff       	call   c00023a9 <clst2sect>
c0002c8e:	31 d2                	xor    edx,edx
c0002c90:	b9 00 02 00 00       	mov    ecx,0x200
c0002c95:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c98:	89 c5                	mov    ebp,eax
c0002c9a:	8d 46 34             	lea    eax,[esi+0x34]
c0002c9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ca1:	e8 ee f4 ff ff       	call   c0002194 <mem_set>
c0002ca6:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002caa:	b8 00 80 00 00       	mov    eax,0x8000
c0002caf:	c1 e3 09             	shl    ebx,0x9
c0002cb2:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002cb8:	0f 47 d8             	cmova  ebx,eax
c0002cbb:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cc1:	76 16                	jbe    c0002cd9 <dir_clear+0x70>
c0002cc3:	83 ec 0c             	sub    esp,0xc
c0002cc6:	53                   	push   ebx
c0002cc7:	e8 cc 32 00 00       	call   c0005f98 <ff_memalloc>
c0002ccc:	83 c4 10             	add    esp,0x10
c0002ccf:	85 c0                	test   eax,eax
c0002cd1:	89 c7                	mov    edi,eax
c0002cd3:	75 76                	jne    c0002d4b <dir_clear+0xe2>
c0002cd5:	d1 eb                	shr    ebx,1
c0002cd7:	eb e2                	jmp    c0002cbb <dir_clear+0x52>
c0002cd9:	31 db                	xor    ebx,ebx
c0002cdb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cdf:	39 d8                	cmp    eax,ebx
c0002ce1:	76 53                	jbe    c0002d36 <dir_clear+0xcd>
c0002ce3:	6a 01                	push   0x1
c0002ce5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ce8:	50                   	push   eax
c0002ce9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cf1:	50                   	push   eax
c0002cf2:	e8 27 f4 ff ff       	call   c000211e <disk_write>
c0002cf7:	83 c4 10             	add    esp,0x10
c0002cfa:	85 c0                	test   eax,eax
c0002cfc:	75 38                	jne    c0002d36 <dir_clear+0xcd>
c0002cfe:	43                   	inc    ebx
c0002cff:	eb da                	jmp    c0002cdb <dir_clear+0x72>
c0002d01:	52                   	push   edx
c0002d02:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002d05:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002d09:	50                   	push   eax
c0002d0a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002d0e:	57                   	push   edi
c0002d0f:	50                   	push   eax
c0002d10:	e8 09 f4 ff ff       	call   c000211e <disk_write>
c0002d15:	83 c4 10             	add    esp,0x10
c0002d18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d1c:	85 c0                	test   eax,eax
c0002d1e:	75 0a                	jne    c0002d2a <dir_clear+0xc1>
c0002d20:	01 d3                	add    ebx,edx
c0002d22:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002d26:	39 d8                	cmp    eax,ebx
c0002d28:	77 d7                	ja     c0002d01 <dir_clear+0x98>
c0002d2a:	83 ec 0c             	sub    esp,0xc
c0002d2d:	57                   	push   edi
c0002d2e:	e8 7d 32 00 00       	call   c0005fb0 <ff_memfree>
c0002d33:	83 c4 10             	add    esp,0x10
c0002d36:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002d3a:	39 d8                	cmp    eax,ebx
c0002d3c:	0f 95 c0             	setne  al
c0002d3f:	0f b6 c0             	movzx  eax,al
c0002d42:	eb 19                	jmp    c0002d5d <dir_clear+0xf4>
c0002d44:	b8 01 00 00 00       	mov    eax,0x1
c0002d49:	eb 12                	jmp    c0002d5d <dir_clear+0xf4>
c0002d4b:	89 d9                	mov    ecx,ebx
c0002d4d:	31 d2                	xor    edx,edx
c0002d4f:	e8 40 f4 ff ff       	call   c0002194 <mem_set>
c0002d54:	89 da                	mov    edx,ebx
c0002d56:	31 db                	xor    ebx,ebx
c0002d58:	c1 ea 09             	shr    edx,0x9
c0002d5b:	eb c5                	jmp    c0002d22 <dir_clear+0xb9>
c0002d5d:	83 c4 1c             	add    esp,0x1c
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	5d                   	pop    ebp
c0002d64:	c3                   	ret    

c0002d65 <create_name>:
c0002d65:	55                   	push   ebp
c0002d66:	89 c5                	mov    ebp,eax
c0002d68:	57                   	push   edi
c0002d69:	89 d7                	mov    edi,edx
c0002d6b:	56                   	push   esi
c0002d6c:	31 f6                	xor    esi,esi
c0002d6e:	53                   	push   ebx
c0002d6f:	83 ec 3c             	sub    esp,0x3c
c0002d72:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d78:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002d7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d82:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d86:	e8 4d f4 ff ff       	call   c00021d8 <tchar2uni>
c0002d8b:	83 f8 ff             	cmp    eax,0xffffffff
c0002d8e:	89 c3                	mov    ebx,eax
c0002d90:	75 0a                	jne    c0002d9c <create_name+0x37>
c0002d92:	b8 06 00 00 00       	mov    eax,0x6
c0002d97:	e9 7c 02 00 00       	jmp    c0003018 <create_name+0x2b3>
c0002d9c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002da1:	76 0c                	jbe    c0002daf <create_name+0x4a>
c0002da3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002da7:	c1 e8 10             	shr    eax,0x10
c0002daa:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002dae:	46                   	inc    esi
c0002daf:	0f b7 d3             	movzx  edx,bx
c0002db2:	89 d8                	mov    eax,ebx
c0002db4:	83 fa 1f             	cmp    edx,0x1f
c0002db7:	76 30                	jbe    c0002de9 <create_name+0x84>
c0002db9:	83 fa 2f             	cmp    edx,0x2f
c0002dbc:	74 2b                	je     c0002de9 <create_name+0x84>
c0002dbe:	83 fa 5c             	cmp    edx,0x5c
c0002dc1:	74 35                	je     c0002df8 <create_name+0x93>
c0002dc3:	83 fa 7f             	cmp    edx,0x7f
c0002dc6:	77 0e                	ja     c0002dd6 <create_name+0x71>
c0002dc8:	b8 3e f8 02 c0       	mov    eax,0xc002f83e
c0002dcd:	e8 ef f3 ff ff       	call   c00021c1 <chk_chr>
c0002dd2:	85 c0                	test   eax,eax
c0002dd4:	75 bc                	jne    c0002d92 <create_name+0x2d>
c0002dd6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002ddc:	77 b4                	ja     c0002d92 <create_name+0x2d>
c0002dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002de6:	46                   	inc    esi
c0002de7:	eb 99                	jmp    c0002d82 <create_name+0x1d>
c0002de9:	66 83 f8 1f          	cmp    ax,0x1f
c0002ded:	b3 04                	mov    bl,0x4
c0002def:	76 1a                	jbe    c0002e0b <create_name+0xa6>
c0002df1:	eb 05                	jmp    c0002df8 <create_name+0x93>
c0002df3:	40                   	inc    eax
c0002df4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002df8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dfc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002dff:	83 fa 2f             	cmp    edx,0x2f
c0002e02:	74 ef                	je     c0002df3 <create_name+0x8e>
c0002e04:	83 fa 5c             	cmp    edx,0x5c
c0002e07:	74 ea                	je     c0002df3 <create_name+0x8e>
c0002e09:	31 db                	xor    ebx,ebx
c0002e0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e0f:	89 07                	mov    DWORD PTR [edi],eax
c0002e11:	85 f6                	test   esi,esi
c0002e13:	74 16                	je     c0002e2b <create_name+0xc6>
c0002e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e19:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002e1e:	83 f8 20             	cmp    eax,0x20
c0002e21:	74 05                	je     c0002e28 <create_name+0xc3>
c0002e23:	83 f8 2e             	cmp    eax,0x2e
c0002e26:	75 03                	jne    c0002e2b <create_name+0xc6>
c0002e28:	4e                   	dec    esi
c0002e29:	eb e6                	jmp    c0002e11 <create_name+0xac>
c0002e2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e2f:	31 ff                	xor    edi,edi
c0002e31:	85 f6                	test   esi,esi
c0002e33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002e39:	0f 84 53 ff ff ff    	je     c0002d92 <create_name+0x2d>
c0002e3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e43:	8d 57 01             	lea    edx,[edi+0x1]
c0002e46:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e4a:	83 f8 20             	cmp    eax,0x20
c0002e4d:	75 04                	jne    c0002e53 <create_name+0xee>
c0002e4f:	89 d7                	mov    edi,edx
c0002e51:	eb ec                	jmp    c0002e3f <create_name+0xda>
c0002e53:	85 ff                	test   edi,edi
c0002e55:	75 05                	jne    c0002e5c <create_name+0xf7>
c0002e57:	83 f8 2e             	cmp    eax,0x2e
c0002e5a:	75 08                	jne    c0002e64 <create_name+0xff>
c0002e5c:	83 cb 03             	or     ebx,0x3
c0002e5f:	eb 03                	jmp    c0002e64 <create_name+0xff>
c0002e61:	4e                   	dec    esi
c0002e62:	74 0c                	je     c0002e70 <create_name+0x10b>
c0002e64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e68:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e6e:	75 f1                	jne    c0002e61 <create_name+0xfc>
c0002e70:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e75:	ba 20 00 00 00       	mov    edx,0x20
c0002e7a:	8d 45 20             	lea    eax,[ebp+0x20]
c0002e7d:	e8 12 f3 ff ff       	call   c0002194 <mem_set>
c0002e82:	31 c9                	xor    ecx,ecx
c0002e84:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002e8c:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e91:	8d 47 01             	lea    eax,[edi+0x1]
c0002e94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e9c:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ea0:	85 c0                	test   eax,eax
c0002ea2:	89 c7                	mov    edi,eax
c0002ea4:	0f 84 1d 01 00 00    	je     c0002fc7 <create_name+0x262>
c0002eaa:	83 f8 20             	cmp    eax,0x20
c0002ead:	74 0b                	je     c0002eba <create_name+0x155>
c0002eaf:	83 f8 2e             	cmp    eax,0x2e
c0002eb2:	75 0f                	jne    c0002ec3 <create_name+0x15e>
c0002eb4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002eb8:	74 09                	je     c0002ec3 <create_name+0x15e>
c0002eba:	83 cb 03             	or     ebx,0x3
c0002ebd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002ec1:	eb ce                	jmp    c0002e91 <create_name+0x12c>
c0002ec3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002ec7:	73 06                	jae    c0002ecf <create_name+0x16a>
c0002ec9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ecd:	75 3a                	jne    c0002f09 <create_name+0x1a4>
c0002ecf:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002ed4:	75 08                	jne    c0002ede <create_name+0x179>
c0002ed6:	83 cb 03             	or     ebx,0x3
c0002ed9:	e9 e9 00 00 00       	jmp    c0002fc7 <create_name+0x262>
c0002ede:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ee2:	74 0d                	je     c0002ef1 <create_name+0x18c>
c0002ee4:	83 cb 03             	or     ebx,0x3
c0002ee7:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002eeb:	0f 87 d6 00 00 00    	ja     c0002fc7 <create_name+0x262>
c0002ef1:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002ef6:	b9 08 00 00 00       	mov    ecx,0x8
c0002efb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002eff:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002f07:	eb b4                	jmp    c0002ebd <create_name+0x158>
c0002f09:	0f b7 c7             	movzx  eax,di
c0002f0c:	83 f8 7f             	cmp    eax,0x7f
c0002f0f:	76 66                	jbe    c0002f77 <create_name+0x212>
c0002f11:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f15:	89 d9                	mov    ecx,ebx
c0002f17:	83 c9 02             	or     ecx,0x2
c0002f1a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f1e:	52                   	push   edx
c0002f1f:	52                   	push   edx
c0002f20:	68 b5 01 00 00       	push   0x1b5
c0002f25:	50                   	push   eax
c0002f26:	e8 9d 30 00 00       	call   c0005fc8 <ff_uni2oem>
c0002f2b:	83 c4 10             	add    esp,0x10
c0002f2e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002f32:	a8 80                	test   al,0x80
c0002f34:	89 c7                	mov    edi,eax
c0002f36:	74 0c                	je     c0002f44 <create_name+0x1df>
c0002f38:	83 e7 7f             	and    edi,0x7f
c0002f3b:	0f b6 bf 00 f9 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0700]
c0002f42:	eb 2a                	jmp    c0002f6e <create_name+0x209>
c0002f44:	0f b7 c0             	movzx  eax,ax
c0002f47:	3d ff 00 00 00       	cmp    eax,0xff
c0002f4c:	76 20                	jbe    c0002f6e <create_name+0x209>
c0002f4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002f52:	4a                   	dec    edx
c0002f53:	39 ca                	cmp    edx,ecx
c0002f55:	77 0c                	ja     c0002f63 <create_name+0x1fe>
c0002f57:	83 cb 03             	or     ebx,0x3
c0002f5a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002f5e:	e9 5a ff ff ff       	jmp    c0002ebd <create_name+0x158>
c0002f63:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002f67:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f6b:	41                   	inc    ecx
c0002f6c:	eb 4d                	jmp    c0002fbb <create_name+0x256>
c0002f6e:	66 85 ff             	test   di,di
c0002f71:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f75:	74 19                	je     c0002f90 <create_name+0x22b>
c0002f77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f7b:	0f b7 d7             	movzx  edx,di
c0002f7e:	b8 47 f8 02 c0       	mov    eax,0xc002f847
c0002f83:	e8 39 f2 ff ff       	call   c00021c1 <chk_chr>
c0002f88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f8c:	85 c0                	test   eax,eax
c0002f8e:	74 0a                	je     c0002f9a <create_name+0x235>
c0002f90:	83 cb 03             	or     ebx,0x3
c0002f93:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f98:	eb 21                	jmp    c0002fbb <create_name+0x256>
c0002f9a:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f9d:	66 83 f8 19          	cmp    ax,0x19
c0002fa1:	77 07                	ja     c0002faa <create_name+0x245>
c0002fa3:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002fa8:	eb 11                	jmp    c0002fbb <create_name+0x256>
c0002faa:	8d 47 9f             	lea    eax,[edi-0x61]
c0002fad:	66 83 f8 19          	cmp    ax,0x19
c0002fb1:	77 08                	ja     c0002fbb <create_name+0x256>
c0002fb3:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002fb8:	83 ef 20             	sub    edi,0x20
c0002fbb:	89 f8                	mov    eax,edi
c0002fbd:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002fc1:	41                   	inc    ecx
c0002fc2:	e9 f6 fe ff ff       	jmp    c0002ebd <create_name+0x158>
c0002fc7:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002fcb:	75 04                	jne    c0002fd1 <create_name+0x26c>
c0002fcd:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002fd1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002fd6:	75 05                	jne    c0002fdd <create_name+0x278>
c0002fd8:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fe1:	83 e0 0c             	and    eax,0xc
c0002fe4:	83 f8 0c             	cmp    eax,0xc
c0002fe7:	74 0c                	je     c0002ff5 <create_name+0x290>
c0002fe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fed:	83 e0 03             	and    eax,0x3
c0002ff0:	83 f8 03             	cmp    eax,0x3
c0002ff3:	75 05                	jne    c0002ffa <create_name+0x295>
c0002ff5:	83 cb 02             	or     ebx,0x2
c0002ff8:	eb 19                	jmp    c0003013 <create_name+0x2ae>
c0002ffa:	f6 c3 02             	test   bl,0x2
c0002ffd:	75 14                	jne    c0003013 <create_name+0x2ae>
c0002fff:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0003004:	74 03                	je     c0003009 <create_name+0x2a4>
c0003006:	83 cb 10             	or     ebx,0x10
c0003009:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c000300e:	74 03                	je     c0003013 <create_name+0x2ae>
c0003010:	83 cb 08             	or     ebx,0x8
c0003013:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0003016:	31 c0                	xor    eax,eax
c0003018:	83 c4 3c             	add    esp,0x3c
c000301b:	5b                   	pop    ebx
c000301c:	5e                   	pop    esi
c000301d:	5f                   	pop    edi
c000301e:	5d                   	pop    ebp
c000301f:	c3                   	ret    

c0003020 <cmp_lfn>:
c0003020:	55                   	push   ebp
c0003021:	57                   	push   edi
c0003022:	89 d7                	mov    edi,edx
c0003024:	56                   	push   esi
c0003025:	53                   	push   ebx
c0003026:	83 ec 1c             	sub    esp,0x1c
c0003029:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000302d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003030:	e8 1e f1 ff ff       	call   c0002153 <ld_word>
c0003035:	66 85 c0             	test   ax,ax
c0003038:	74 07                	je     c0003041 <cmp_lfn+0x21>
c000303a:	31 c0                	xor    eax,eax
c000303c:	e9 a4 00 00 00       	jmp    c00030e5 <cmp_lfn+0xc5>
c0003041:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003043:	bd 01 00 00 00       	mov    ebp,0x1
c0003048:	31 c9                	xor    ecx,ecx
c000304a:	83 e3 3f             	and    ebx,0x3f
c000304d:	4b                   	dec    ebx
c000304e:	6b db 0d             	imul   ebx,ebx,0xd
c0003051:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003055:	0f b6 81 80 f9 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd0680]
c000305c:	01 f8                	add    eax,edi
c000305e:	e8 f0 f0 ff ff       	call   c0002153 <ld_word>
c0003063:	66 85 ed             	test   bp,bp
c0003066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000306a:	0f b7 f0             	movzx  esi,ax
c000306d:	74 44                	je     c00030b3 <cmp_lfn+0x93>
c000306f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003073:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003079:	77 bf                	ja     c000303a <cmp_lfn+0x1a>
c000307b:	83 ec 0c             	sub    esp,0xc
c000307e:	0f b7 c6             	movzx  eax,si
c0003081:	50                   	push   eax
c0003082:	e8 55 30 00 00       	call   c00060dc <ff_wtoupper>
c0003087:	89 c5                	mov    ebp,eax
c0003089:	8d 43 01             	lea    eax,[ebx+0x1]
c000308c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003094:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003098:	89 04 24             	mov    DWORD PTR [esp],eax
c000309b:	e8 3c 30 00 00       	call   c00060dc <ff_wtoupper>
c00030a0:	83 c4 10             	add    esp,0x10
c00030a3:	39 c5                	cmp    ebp,eax
c00030a5:	75 93                	jne    c000303a <cmp_lfn+0x1a>
c00030a7:	89 f5                	mov    ebp,esi
c00030a9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00030ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030b1:	eb 0c                	jmp    c00030bf <cmp_lfn+0x9f>
c00030b3:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00030b9:	0f 85 7b ff ff ff    	jne    c000303a <cmp_lfn+0x1a>
c00030bf:	41                   	inc    ecx
c00030c0:	83 f9 0d             	cmp    ecx,0xd
c00030c3:	75 8c                	jne    c0003051 <cmp_lfn+0x31>
c00030c5:	f6 07 40             	test   BYTE PTR [edi],0x40
c00030c8:	74 16                	je     c00030e0 <cmp_lfn+0xc0>
c00030ca:	66 85 ed             	test   bp,bp
c00030cd:	74 11                	je     c00030e0 <cmp_lfn+0xc0>
c00030cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00030d3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030d8:	0f 94 c0             	sete   al
c00030db:	0f b6 c0             	movzx  eax,al
c00030de:	eb 05                	jmp    c00030e5 <cmp_lfn+0xc5>
c00030e0:	b8 01 00 00 00       	mov    eax,0x1
c00030e5:	83 c4 1c             	add    esp,0x1c
c00030e8:	5b                   	pop    ebx
c00030e9:	5e                   	pop    esi
c00030ea:	5f                   	pop    edi
c00030eb:	5d                   	pop    ebp
c00030ec:	c3                   	ret    

c00030ed <sync_fs>:
c00030ed:	56                   	push   esi
c00030ee:	53                   	push   ebx
c00030ef:	53                   	push   ebx
c00030f0:	89 c3                	mov    ebx,eax
c00030f2:	e8 5e f5 ff ff       	call   c0002655 <sync_window>
c00030f7:	85 c0                	test   eax,eax
c00030f9:	0f 85 9a 00 00 00    	jne    c0003199 <sync_fs+0xac>
c00030ff:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0003102:	75 7b                	jne    c000317f <sync_fs+0x92>
c0003104:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0003108:	75 75                	jne    c000317f <sync_fs+0x92>
c000310a:	8d 73 34             	lea    esi,[ebx+0x34]
c000310d:	b9 00 02 00 00       	mov    ecx,0x200
c0003112:	31 d2                	xor    edx,edx
c0003114:	89 f0                	mov    eax,esi
c0003116:	e8 79 f0 ff ff       	call   c0002194 <mem_set>
c000311b:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0003121:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003126:	e8 4d f0 ff ff       	call   c0002178 <st_word>
c000312b:	ba 52 52 61 41       	mov    edx,0x41615252
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 45 f0 ff ff       	call   c000217c <st_dword>
c0003137:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c000313d:	ba 72 72 41 61       	mov    edx,0x61417272
c0003142:	e8 35 f0 ff ff       	call   c000217c <st_dword>
c0003147:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000314a:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003150:	e8 27 f0 ff ff       	call   c000217c <st_dword>
c0003155:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003158:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c000315e:	e8 19 f0 ff ff       	call   c000217c <st_dword>
c0003163:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003166:	6a 01                	push   0x1
c0003168:	40                   	inc    eax
c0003169:	50                   	push   eax
c000316a:	56                   	push   esi
c000316b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003172:	50                   	push   eax
c0003173:	e8 a6 ef ff ff       	call   c000211e <disk_write>
c0003178:	83 c4 10             	add    esp,0x10
c000317b:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000317f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003183:	51                   	push   ecx
c0003184:	6a 00                	push   0x0
c0003186:	6a 00                	push   0x0
c0003188:	50                   	push   eax
c0003189:	e8 a6 ef ff ff       	call   c0002134 <disk_ioctl>
c000318e:	83 c4 10             	add    esp,0x10
c0003191:	85 c0                	test   eax,eax
c0003193:	0f 95 c0             	setne  al
c0003196:	0f b6 c0             	movzx  eax,al
c0003199:	5a                   	pop    edx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	c3                   	ret    

c000319d <create_partition>:
c000319d:	55                   	push   ebp
c000319e:	0f b6 c0             	movzx  eax,al
c00031a1:	57                   	push   edi
c00031a2:	56                   	push   esi
c00031a3:	53                   	push   ebx
c00031a4:	83 ec 40             	sub    esp,0x40
c00031a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00031ab:	8d 44 24 30          	lea    eax,[esp+0x30]
c00031af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00031b3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00031b7:	50                   	push   eax
c00031b8:	6a 01                	push   0x1
c00031ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031be:	e8 71 ef ff ff       	call   c0002134 <disk_ioctl>
c00031c3:	83 c4 10             	add    esp,0x10
c00031c6:	85 c0                	test   eax,eax
c00031c8:	0f 85 68 01 00 00    	jne    c0003336 <create_partition+0x199>
c00031ce:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00031d2:	b9 05 00 00 00       	mov    ecx,0x5
c00031d7:	be 08 00 00 00       	mov    esi,0x8
c00031dc:	89 f0                	mov    eax,esi
c00031de:	31 d2                	xor    edx,edx
c00031e0:	0f b6 d8             	movzx  ebx,al
c00031e3:	89 e8                	mov    eax,ebp
c00031e5:	f7 f3                	div    ebx
c00031e7:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031ec:	76 0a                	jbe    c00031f8 <create_partition+0x5b>
c00031ee:	d1 e6                	shl    esi,1
c00031f0:	49                   	dec    ecx
c00031f1:	75 e9                	jne    c00031dc <create_partition+0x3f>
c00031f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00031f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031fc:	b9 00 02 00 00       	mov    ecx,0x200
c0003201:	31 d2                	xor    edx,edx
c0003203:	e8 8c ef ff ff       	call   c0002194 <mem_set>
c0003208:	b9 64 00 00 00       	mov    ecx,0x64
c000320d:	89 e8                	mov    eax,ebp
c000320f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003217:	31 d2                	xor    edx,edx
c0003219:	f7 f1                	div    ecx
c000321b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003220:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003224:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003228:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000322e:	89 f0                	mov    eax,esi
c0003230:	0f b6 c0             	movzx  eax,al
c0003233:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003237:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000323c:	0f 96 c0             	setbe  al
c000323f:	31 d2                	xor    edx,edx
c0003241:	85 c9                	test   ecx,ecx
c0003243:	0f 95 c2             	setne  dl
c0003246:	85 c2                	test   edx,eax
c0003248:	0f 84 b7 00 00 00    	je     c0003305 <create_partition+0x168>
c000324e:	39 e9                	cmp    ecx,ebp
c0003250:	0f 83 af 00 00 00    	jae    c0003305 <create_partition+0x168>
c0003256:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000325a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000325e:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0003261:	83 fe 64             	cmp    esi,0x64
c0003264:	77 0b                	ja     c0003271 <create_partition+0xd4>
c0003266:	74 07                	je     c000326f <create_partition+0xd2>
c0003268:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000326d:	eb 02                	jmp    c0003271 <create_partition+0xd4>
c000326f:	89 ee                	mov    esi,ebp
c0003271:	89 ca                	mov    edx,ecx
c0003273:	31 c0                	xor    eax,eax
c0003275:	01 f2                	add    edx,esi
c0003277:	0f 92 c0             	setb   al
c000327a:	39 ea                	cmp    edx,ebp
c000327c:	77 04                	ja     c0003282 <create_partition+0xe5>
c000327e:	85 c0                	test   eax,eax
c0003280:	74 06                	je     c0003288 <create_partition+0xeb>
c0003282:	89 ee                	mov    esi,ebp
c0003284:	29 ce                	sub    esi,ecx
c0003286:	eb 04                	jmp    c000328c <create_partition+0xef>
c0003288:	85 f6                	test   esi,esi
c000328a:	74 79                	je     c0003305 <create_partition+0x168>
c000328c:	89 ca                	mov    edx,ecx
c000328e:	89 d8                	mov    eax,ebx
c0003290:	e8 e7 ee ff ff       	call   c000217c <st_dword>
c0003295:	8d 43 04             	lea    eax,[ebx+0x4]
c0003298:	89 f2                	mov    edx,esi
c000329a:	e8 dd ee ff ff       	call   c000217c <st_dword>
c000329f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032a3:	bf 3f 00 00 00       	mov    edi,0x3f
c00032a8:	31 d2                	xor    edx,edx
c00032aa:	83 c3 10             	add    ebx,0x10
c00032ad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b1:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b4:	89 c8                	mov    eax,ecx
c00032b6:	01 f1                	add    ecx,esi
c00032b8:	f7 f7                	div    edi
c00032ba:	89 d7                	mov    edi,edx
c00032bc:	31 d2                	xor    edx,edx
c00032be:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c2:	47                   	inc    edi
c00032c3:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c6:	89 c2                	mov    edx,eax
c00032c8:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032cb:	c1 ea 02             	shr    edx,0x2
c00032ce:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032d1:	83 e2 c0             	and    edx,0xffffffc0
c00032d4:	09 fa                	or     edx,edi
c00032d6:	bf 3f 00 00 00       	mov    edi,0x3f
c00032db:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032de:	31 d2                	xor    edx,edx
c00032e0:	f7 f7                	div    edi
c00032e2:	89 d6                	mov    esi,edx
c00032e4:	31 d2                	xor    edx,edx
c00032e6:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032ea:	46                   	inc    esi
c00032eb:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ee:	89 c7                	mov    edi,eax
c00032f0:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032f3:	c1 ef 02             	shr    edi,0x2
c00032f6:	83 e7 c0             	and    edi,0xffffffc0
c00032f9:	09 fe                	or     esi,edi
c00032fb:	89 f2                	mov    edx,esi
c00032fd:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003300:	e9 32 ff ff ff       	jmp    c0003237 <create_partition+0x9a>
c0003305:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003309:	ba 55 aa 00 00       	mov    edx,0xaa55
c000330e:	05 fe 01 00 00       	add    eax,0x1fe
c0003313:	e8 60 ee ff ff       	call   c0002178 <st_word>
c0003318:	6a 01                	push   0x1
c000331a:	6a 00                	push   0x0
c000331c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003324:	e8 f5 ed ff ff       	call   c000211e <disk_write>
c0003329:	83 c4 10             	add    esp,0x10
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 95 c0             	setne  al
c0003331:	0f b6 c0             	movzx  eax,al
c0003334:	eb 05                	jmp    c000333b <create_partition+0x19e>
c0003336:	b8 01 00 00 00       	mov    eax,0x1
c000333b:	83 c4 3c             	add    esp,0x3c
c000333e:	5b                   	pop    ebx
c000333f:	5e                   	pop    esi
c0003340:	5f                   	pop    edi
c0003341:	5d                   	pop    ebp
c0003342:	c3                   	ret    

c0003343 <get_fileinfo>:
c0003343:	55                   	push   ebp
c0003344:	57                   	push   edi
c0003345:	56                   	push   esi
c0003346:	53                   	push   ebx
c0003347:	83 ec 1c             	sub    esp,0x1c
c000334a:	8b 30                	mov    esi,DWORD PTR [eax]
c000334c:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003350:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003354:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003358:	0f 84 de 01 00 00    	je     c000353c <get_fileinfo+0x1f9>
c000335e:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003362:	89 d3                	mov    ebx,edx
c0003364:	89 c6                	mov    esi,eax
c0003366:	74 7d                	je     c00033e5 <get_fileinfo+0xa2>
c0003368:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003370:	31 ff                	xor    edi,edi
c0003372:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000337d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003381:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003384:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003388:	85 c0                	test   eax,eax
c000338a:	89 c2                	mov    edx,eax
c000338c:	74 44                	je     c00033d2 <get_fileinfo+0x8f>
c000338e:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003393:	85 ed                	test   ebp,ebp
c0003395:	75 0d                	jne    c00033a4 <get_fileinfo+0x61>
c0003397:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000339d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c00033a2:	76 20                	jbe    c00033c4 <get_fileinfo+0x81>
c00033a4:	c1 e5 10             	shl    ebp,0x10
c00033a7:	b9 ff 00 00 00       	mov    ecx,0xff
c00033ac:	29 f9                	sub    ecx,edi
c00033ae:	09 e8                	or     eax,ebp
c00033b0:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00033b4:	e8 f7 ee ff ff       	call   c00022b0 <put_utf>
c00033b9:	0f b6 c0             	movzx  eax,al
c00033bc:	85 c0                	test   eax,eax
c00033be:	74 10                	je     c00033d0 <get_fileinfo+0x8d>
c00033c0:	01 c7                	add    edi,eax
c00033c2:	31 d2                	xor    edx,edx
c00033c4:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00033c9:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c00033ce:	eb a9                	jmp    c0003379 <get_fileinfo+0x36>
c00033d0:	31 ff                	xor    edi,edi
c00033d2:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c00033d8:	b8 00 00 00 00       	mov    eax,0x0
c00033dd:	0f 45 f8             	cmovne edi,eax
c00033e0:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033e5:	31 ff                	xor    edi,edi
c00033e7:	31 c9                	xor    ecx,ecx
c00033e9:	83 f9 0a             	cmp    ecx,0xa
c00033ec:	0f 87 ac 00 00 00    	ja     c000349e <get_fileinfo+0x15b>
c00033f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033f5:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033f8:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033fc:	83 f8 20             	cmp    eax,0x20
c00033ff:	89 c2                	mov    edx,eax
c0003401:	0f 84 90 00 00 00    	je     c0003497 <get_fileinfo+0x154>
c0003407:	83 f8 05             	cmp    eax,0x5
c000340a:	75 05                	jne    c0003411 <get_fileinfo+0xce>
c000340c:	ba e5 00 00 00       	mov    edx,0xe5
c0003411:	83 fd 09             	cmp    ebp,0x9
c0003414:	75 0b                	jne    c0003421 <get_fileinfo+0xde>
c0003416:	83 ff 0b             	cmp    edi,0xb
c0003419:	77 06                	ja     c0003421 <get_fileinfo+0xde>
c000341b:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003420:	47                   	inc    edi
c0003421:	0f b7 c2             	movzx  eax,dx
c0003424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003428:	e8 a5 ed ff ff       	call   c00021d2 <dbc_1st>
c000342d:	85 c0                	test   eax,eax
c000342f:	74 2f                	je     c0003460 <get_fileinfo+0x11d>
c0003431:	83 fd 08             	cmp    ebp,0x8
c0003434:	74 2a                	je     c0003460 <get_fileinfo+0x11d>
c0003436:	83 fd 0b             	cmp    ebp,0xb
c0003439:	74 25                	je     c0003460 <get_fileinfo+0x11d>
c000343b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000343e:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003442:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003446:	e8 8a ed ff ff       	call   c00021d5 <dbc_2nd>
c000344b:	85 c0                	test   eax,eax
c000344d:	74 11                	je     c0003460 <get_fileinfo+0x11d>
c000344f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003453:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003456:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c000345b:	c1 e0 08             	shl    eax,0x8
c000345e:	09 c2                	or     edx,eax
c0003460:	50                   	push   eax
c0003461:	0f b7 d2             	movzx  edx,dx
c0003464:	50                   	push   eax
c0003465:	68 b5 01 00 00       	push   0x1b5
c000346a:	52                   	push   edx
c000346b:	e8 f4 2b 00 00       	call   c0006064 <ff_oem2uni>
c0003470:	83 c4 10             	add    esp,0x10
c0003473:	0f b7 c0             	movzx  eax,ax
c0003476:	85 c0                	test   eax,eax
c0003478:	75 04                	jne    c000347e <get_fileinfo+0x13b>
c000347a:	31 ff                	xor    edi,edi
c000347c:	eb 20                	jmp    c000349e <get_fileinfo+0x15b>
c000347e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003482:	b9 0c 00 00 00       	mov    ecx,0xc
c0003487:	29 f9                	sub    ecx,edi
c0003489:	e8 22 ee ff ff       	call   c00022b0 <put_utf>
c000348e:	0f b6 c0             	movzx  eax,al
c0003491:	85 c0                	test   eax,eax
c0003493:	74 e5                	je     c000347a <get_fileinfo+0x137>
c0003495:	01 c7                	add    edi,eax
c0003497:	89 e9                	mov    ecx,ebp
c0003499:	e9 4b ff ff ff       	jmp    c00033e9 <get_fileinfo+0xa6>
c000349e:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00034a3:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00034a7:	75 5f                	jne    c0003508 <get_fileinfo+0x1c5>
c00034a9:	85 ff                	test   edi,edi
c00034ab:	75 0b                	jne    c00034b8 <get_fileinfo+0x175>
c00034ad:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00034b1:	ba 01 00 00 00       	mov    edx,0x1
c00034b6:	eb 3e                	jmp    c00034f6 <get_fileinfo+0x1b3>
c00034b8:	bf 08 00 00 00       	mov    edi,0x8
c00034bd:	31 d2                	xor    edx,edx
c00034bf:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00034c5:	84 c0                	test   al,al
c00034c7:	74 2d                	je     c00034f6 <get_fileinfo+0x1b3>
c00034c9:	66 83 f8 2e          	cmp    ax,0x2e
c00034cd:	74 1b                	je     c00034ea <get_fileinfo+0x1a7>
c00034cf:	8d 48 bf             	lea    ecx,[eax-0x41]
c00034d2:	66 83 f9 19          	cmp    cx,0x19
c00034d6:	77 17                	ja     c00034ef <get_fileinfo+0x1ac>
c00034d8:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034db:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034de:	21 f9                	and    ecx,edi
c00034e0:	80 e1 18             	and    cl,0x18
c00034e3:	74 0a                	je     c00034ef <get_fileinfo+0x1ac>
c00034e5:	83 c0 20             	add    eax,0x20
c00034e8:	eb 05                	jmp    c00034ef <get_fileinfo+0x1ac>
c00034ea:	bf 10 00 00 00       	mov    edi,0x10
c00034ef:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034f3:	42                   	inc    edx
c00034f4:	eb c9                	jmp    c00034bf <get_fileinfo+0x17c>
c00034f6:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034fb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fe:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003502:	75 04                	jne    c0003508 <get_fileinfo+0x1c5>
c0003504:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003508:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000350b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000350e:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003511:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003514:	83 c0 1c             	add    eax,0x1c
c0003517:	e8 44 ec ff ff       	call   c0002160 <ld_dword>
c000351c:	89 03                	mov    DWORD PTR [ebx],eax
c000351e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003521:	83 c0 16             	add    eax,0x16
c0003524:	e8 2a ec ff ff       	call   c0002153 <ld_word>
c0003529:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000352d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003530:	83 c0 18             	add    eax,0x18
c0003533:	e8 1b ec ff ff       	call   c0002153 <ld_word>
c0003538:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000353c:	83 c4 1c             	add    esp,0x1c
c000353f:	5b                   	pop    ebx
c0003540:	5e                   	pop    esi
c0003541:	5f                   	pop    edi
c0003542:	5d                   	pop    ebp
c0003543:	c3                   	ret    

c0003544 <ld_clust.isra.0>:
c0003544:	56                   	push   esi
c0003545:	89 c6                	mov    esi,eax
c0003547:	53                   	push   ebx
c0003548:	89 d3                	mov    ebx,edx
c000354a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000354d:	e8 01 ec ff ff       	call   c0002153 <ld_word>
c0003552:	0f b7 c8             	movzx  ecx,ax
c0003555:	89 f0                	mov    eax,esi
c0003557:	3c 03                	cmp    al,0x3
c0003559:	75 0d                	jne    c0003568 <ld_clust.isra.0+0x24>
c000355b:	8d 43 14             	lea    eax,[ebx+0x14]
c000355e:	e8 f0 eb ff ff       	call   c0002153 <ld_word>
c0003563:	c1 e0 10             	shl    eax,0x10
c0003566:	09 c1                	or     ecx,eax
c0003568:	5b                   	pop    ebx
c0003569:	89 c8                	mov    eax,ecx
c000356b:	5e                   	pop    esi
c000356c:	c3                   	ret    

c000356d <st_clust.isra.1>:
c000356d:	56                   	push   esi
c000356e:	89 c6                	mov    esi,eax
c0003570:	53                   	push   ebx
c0003571:	89 d3                	mov    ebx,edx
c0003573:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003576:	0f b7 d1             	movzx  edx,cx
c0003579:	e8 fa eb ff ff       	call   c0002178 <st_word>
c000357e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003581:	75 0f                	jne    c0003592 <st_clust.isra.1+0x25>
c0003583:	8d 43 14             	lea    eax,[ebx+0x14]
c0003586:	5b                   	pop    ebx
c0003587:	c1 e9 10             	shr    ecx,0x10
c000358a:	89 ca                	mov    edx,ecx
c000358c:	5e                   	pop    esi
c000358d:	e9 e6 eb ff ff       	jmp    c0002178 <st_word>
c0003592:	5b                   	pop    ebx
c0003593:	5e                   	pop    esi
c0003594:	c3                   	ret    

c0003595 <get_fat.isra.2>:
c0003595:	83 fa 01             	cmp    edx,0x1
c0003598:	b9 01 00 00 00       	mov    ecx,0x1
c000359d:	0f 86 f4 00 00 00    	jbe    c0003697 <get_fat.isra.2+0x102>
c00035a3:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00035a6:	0f 83 eb 00 00 00    	jae    c0003697 <get_fat.isra.2+0x102>
c00035ac:	55                   	push   ebp
c00035ad:	57                   	push   edi
c00035ae:	56                   	push   esi
c00035af:	89 c6                	mov    esi,eax
c00035b1:	53                   	push   ebx
c00035b2:	89 d3                	mov    ebx,edx
c00035b4:	83 ec 0c             	sub    esp,0xc
c00035b7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00035ba:	83 f8 02             	cmp    eax,0x2
c00035bd:	74 79                	je     c0003638 <get_fat.isra.2+0xa3>
c00035bf:	83 f8 03             	cmp    eax,0x3
c00035c2:	0f 84 97 00 00 00    	je     c000365f <get_fat.isra.2+0xca>
c00035c8:	48                   	dec    eax
c00035c9:	0f 85 be 00 00 00    	jne    c000368d <get_fat.isra.2+0xf8>
c00035cf:	89 d7                	mov    edi,edx
c00035d1:	89 f0                	mov    eax,esi
c00035d3:	d1 ef                	shr    edi,1
c00035d5:	01 d7                	add    edi,edx
c00035d7:	89 fa                	mov    edx,edi
c00035d9:	c1 ea 09             	shr    edx,0x9
c00035dc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00035df:	e8 d4 f0 ff ff       	call   c00026b8 <move_window>
c00035e4:	85 c0                	test   eax,eax
c00035e6:	74 08                	je     c00035f0 <get_fat.isra.2+0x5b>
c00035e8:	83 c9 ff             	or     ecx,0xffffffff
c00035eb:	e9 9d 00 00 00       	jmp    c000368d <get_fat.isra.2+0xf8>
c00035f0:	8d 6f 01             	lea    ebp,[edi+0x1]
c00035f3:	89 f0                	mov    eax,esi
c00035f5:	89 ea                	mov    edx,ebp
c00035f7:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00035fd:	c1 ea 09             	shr    edx,0x9
c0003600:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c0003605:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003608:	e8 ab f0 ff ff       	call   c00026b8 <move_window>
c000360d:	85 c0                	test   eax,eax
c000360f:	75 d7                	jne    c00035e8 <get_fat.isra.2+0x53>
c0003611:	89 f8                	mov    eax,edi
c0003613:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003619:	0f b6 f8             	movzx  edi,al
c000361c:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c0003621:	c1 e0 08             	shl    eax,0x8
c0003624:	09 f8                	or     eax,edi
c0003626:	89 c1                	mov    ecx,eax
c0003628:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000362e:	80 e3 01             	and    bl,0x1
c0003631:	74 5a                	je     c000368d <get_fat.isra.2+0xf8>
c0003633:	c1 e8 04             	shr    eax,0x4
c0003636:	eb 53                	jmp    c000368b <get_fat.isra.2+0xf6>
c0003638:	c1 ea 08             	shr    edx,0x8
c000363b:	89 f0                	mov    eax,esi
c000363d:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003640:	e8 73 f0 ff ff       	call   c00026b8 <move_window>
c0003645:	85 c0                	test   eax,eax
c0003647:	75 9f                	jne    c00035e8 <get_fat.isra.2+0x53>
c0003649:	01 db                	add    ebx,ebx
c000364b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0003651:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003655:	e8 f9 ea ff ff       	call   c0002153 <ld_word>
c000365a:	0f b7 c8             	movzx  ecx,ax
c000365d:	eb 2e                	jmp    c000368d <get_fat.isra.2+0xf8>
c000365f:	c1 ea 07             	shr    edx,0x7
c0003662:	89 f0                	mov    eax,esi
c0003664:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003667:	e8 4c f0 ff ff       	call   c00026b8 <move_window>
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 74 ff ff ff    	jne    c00035e8 <get_fat.isra.2+0x53>
c0003674:	c1 e3 02             	shl    ebx,0x2
c0003677:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000367d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003681:	e8 da ea ff ff       	call   c0002160 <ld_dword>
c0003686:	25 ff ff ff 0f       	and    eax,0xfffffff
c000368b:	89 c1                	mov    ecx,eax
c000368d:	83 c4 0c             	add    esp,0xc
c0003690:	89 c8                	mov    eax,ecx
c0003692:	5b                   	pop    ebx
c0003693:	5e                   	pop    esi
c0003694:	5f                   	pop    edi
c0003695:	5d                   	pop    ebp
c0003696:	c3                   	ret    
c0003697:	89 c8                	mov    eax,ecx
c0003699:	c3                   	ret    

c000369a <dir_sdi>:
c000369a:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00036a0:	0f 87 b6 00 00 00    	ja     c000375c <dir_sdi+0xc2>
c00036a6:	55                   	push   ebp
c00036a7:	57                   	push   edi
c00036a8:	56                   	push   esi
c00036a9:	53                   	push   ebx
c00036aa:	89 d3                	mov    ebx,edx
c00036ac:	83 ec 1c             	sub    esp,0x1c
c00036af:	f6 c2 1f             	test   dl,0x1f
c00036b2:	74 0a                	je     c00036be <dir_sdi+0x24>
c00036b4:	b8 02 00 00 00       	mov    eax,0x2
c00036b9:	e9 96 00 00 00       	jmp    c0003754 <dir_sdi+0xba>
c00036be:	89 c6                	mov    esi,eax
c00036c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036c2:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00036c5:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00036c8:	85 ff                	test   edi,edi
c00036ca:	75 21                	jne    c00036ed <dir_sdi+0x53>
c00036cc:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c00036d0:	76 07                	jbe    c00036d9 <dir_sdi+0x3f>
c00036d2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00036d5:	85 c0                	test   eax,eax
c00036d7:	75 12                	jne    c00036eb <dir_sdi+0x51>
c00036d9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00036dd:	89 da                	mov    edx,ebx
c00036df:	c1 ea 05             	shr    edx,0x5
c00036e2:	39 c2                	cmp    edx,eax
c00036e4:	73 ce                	jae    c00036b4 <dir_sdi+0x1a>
c00036e6:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00036e9:	eb 3c                	jmp    c0003727 <dir_sdi+0x8d>
c00036eb:	89 c7                	mov    edi,eax
c00036ed:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00036f1:	c1 e1 09             	shl    ecx,0x9
c00036f4:	39 cb                	cmp    ebx,ecx
c00036f6:	72 26                	jb     c000371e <dir_sdi+0x84>
c00036f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fe:	89 fa                	mov    edx,edi
c0003700:	e8 90 fe ff ff       	call   c0003595 <get_fat.isra.2>
c0003705:	83 f8 ff             	cmp    eax,0xffffffff
c0003708:	89 c7                	mov    edi,eax
c000370a:	74 43                	je     c000374f <dir_sdi+0xb5>
c000370c:	83 f8 01             	cmp    eax,0x1
c000370f:	76 a3                	jbe    c00036b4 <dir_sdi+0x1a>
c0003711:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003714:	76 9e                	jbe    c00036b4 <dir_sdi+0x1a>
c0003716:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000371a:	29 cb                	sub    ebx,ecx
c000371c:	eb d6                	jmp    c00036f4 <dir_sdi+0x5a>
c000371e:	89 fa                	mov    edx,edi
c0003720:	89 e8                	mov    eax,ebp
c0003722:	e8 82 ec ff ff       	call   c00023a9 <clst2sect>
c0003727:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000372a:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c000372d:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003730:	85 d2                	test   edx,edx
c0003732:	74 80                	je     c00036b4 <dir_sdi+0x1a>
c0003734:	89 d8                	mov    eax,ebx
c0003736:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000373c:	c1 e8 09             	shr    eax,0x9
c000373f:	01 d0                	add    eax,edx
c0003741:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003744:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003748:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000374b:	31 c0                	xor    eax,eax
c000374d:	eb 05                	jmp    c0003754 <dir_sdi+0xba>
c000374f:	b8 01 00 00 00       	mov    eax,0x1
c0003754:	83 c4 1c             	add    esp,0x1c
c0003757:	5b                   	pop    ebx
c0003758:	5e                   	pop    esi
c0003759:	5f                   	pop    edi
c000375a:	5d                   	pop    ebp
c000375b:	c3                   	ret    
c000375c:	b8 02 00 00 00       	mov    eax,0x2
c0003761:	c3                   	ret    

c0003762 <create_chain>:
c0003762:	55                   	push   ebp
c0003763:	89 c5                	mov    ebp,eax
c0003765:	57                   	push   edi
c0003766:	89 d7                	mov    edi,edx
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	83 ec 1c             	sub    esp,0x1c
c000376d:	85 d2                	test   edx,edx
c000376f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003771:	75 0e                	jne    c0003781 <create_chain+0x1f>
c0003773:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003776:	85 c9                	test   ecx,ecx
c0003778:	74 32                	je     c00037ac <create_chain+0x4a>
c000377a:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000377d:	77 32                	ja     c00037b1 <create_chain+0x4f>
c000377f:	eb 2b                	jmp    c00037ac <create_chain+0x4a>
c0003781:	89 d8                	mov    eax,ebx
c0003783:	e8 0d fe ff ff       	call   c0003595 <get_fat.isra.2>
c0003788:	83 f8 01             	cmp    eax,0x1
c000378b:	77 0a                	ja     c0003797 <create_chain+0x35>
c000378d:	b8 01 00 00 00       	mov    eax,0x1
c0003792:	e9 fd 00 00 00       	jmp    c0003894 <create_chain+0x132>
c0003797:	83 f8 ff             	cmp    eax,0xffffffff
c000379a:	0f 84 f1 00 00 00    	je     c0003891 <create_chain+0x12f>
c00037a0:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00037a3:	89 f9                	mov    ecx,edi
c00037a5:	76 0a                	jbe    c00037b1 <create_chain+0x4f>
c00037a7:	e9 e8 00 00 00       	jmp    c0003894 <create_chain+0x132>
c00037ac:	b9 01 00 00 00       	mov    ecx,0x1
c00037b1:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00037b5:	75 07                	jne    c00037be <create_chain+0x5c>
c00037b7:	31 c0                	xor    eax,eax
c00037b9:	e9 d6 00 00 00       	jmp    c0003894 <create_chain+0x132>
c00037be:	39 f9                	cmp    ecx,edi
c00037c0:	75 49                	jne    c000380b <create_chain+0xa9>
c00037c2:	8d 71 01             	lea    esi,[ecx+0x1]
c00037c5:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00037c8:	77 05                	ja     c00037cf <create_chain+0x6d>
c00037ca:	be 02 00 00 00       	mov    esi,0x2
c00037cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037d6:	89 f2                	mov    edx,esi
c00037d8:	e8 b8 fd ff ff       	call   c0003595 <get_fat.isra.2>
c00037dd:	83 f8 01             	cmp    eax,0x1
c00037e0:	0f 84 ae 00 00 00    	je     c0003894 <create_chain+0x132>
c00037e6:	83 f8 ff             	cmp    eax,0xffffffff
c00037e9:	0f 84 a5 00 00 00    	je     c0003894 <create_chain+0x132>
c00037ef:	85 c0                	test   eax,eax
c00037f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037f5:	74 10                	je     c0003807 <create_chain+0xa5>
c00037f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fa:	83 f8 01             	cmp    eax,0x1
c00037fd:	76 0c                	jbe    c000380b <create_chain+0xa9>
c00037ff:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003802:	0f 47 c8             	cmova  ecx,eax
c0003805:	eb 04                	jmp    c000380b <create_chain+0xa9>
c0003807:	85 f6                	test   esi,esi
c0003809:	75 3b                	jne    c0003846 <create_chain+0xe4>
c000380b:	89 ce                	mov    esi,ecx
c000380d:	46                   	inc    esi
c000380e:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003811:	77 0a                	ja     c000381d <create_chain+0xbb>
c0003813:	83 f9 01             	cmp    ecx,0x1
c0003816:	76 9f                	jbe    c00037b7 <create_chain+0x55>
c0003818:	be 02 00 00 00       	mov    esi,0x2
c000381d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003821:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003824:	89 f2                	mov    edx,esi
c0003826:	e8 6a fd ff ff       	call   c0003595 <get_fat.isra.2>
c000382b:	85 c0                	test   eax,eax
c000382d:	74 17                	je     c0003846 <create_chain+0xe4>
c000382f:	83 f8 01             	cmp    eax,0x1
c0003832:	74 60                	je     c0003894 <create_chain+0x132>
c0003834:	83 f8 ff             	cmp    eax,0xffffffff
c0003837:	74 5b                	je     c0003894 <create_chain+0x132>
c0003839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000383d:	39 ce                	cmp    esi,ecx
c000383f:	75 cc                	jne    c000380d <create_chain+0xab>
c0003841:	e9 71 ff ff ff       	jmp    c00037b7 <create_chain+0x55>
c0003846:	83 c9 ff             	or     ecx,0xffffffff
c0003849:	89 f2                	mov    edx,esi
c000384b:	89 d8                	mov    eax,ebx
c000384d:	e8 c0 f2 ff ff       	call   c0002b12 <put_fat>
c0003852:	85 c0                	test   eax,eax
c0003854:	75 0f                	jne    c0003865 <create_chain+0x103>
c0003856:	85 ff                	test   edi,edi
c0003858:	74 0b                	je     c0003865 <create_chain+0x103>
c000385a:	89 f1                	mov    ecx,esi
c000385c:	89 fa                	mov    edx,edi
c000385e:	89 d8                	mov    eax,ebx
c0003860:	e8 ad f2 ff ff       	call   c0002b12 <put_fat>
c0003865:	85 c0                	test   eax,eax
c0003867:	75 21                	jne    c000388a <create_chain+0x128>
c0003869:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000386c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000386f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003872:	8d 57 fe             	lea    edx,[edi-0x2]
c0003875:	39 d0                	cmp    eax,edx
c0003877:	77 04                	ja     c000387d <create_chain+0x11b>
c0003879:	48                   	dec    eax
c000387a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000387d:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003880:	83 c8 01             	or     eax,0x1
c0003883:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003886:	89 f0                	mov    eax,esi
c0003888:	eb 0a                	jmp    c0003894 <create_chain+0x132>
c000388a:	48                   	dec    eax
c000388b:	0f 85 fc fe ff ff    	jne    c000378d <create_chain+0x2b>
c0003891:	83 c8 ff             	or     eax,0xffffffff
c0003894:	83 c4 1c             	add    esp,0x1c
c0003897:	5b                   	pop    ebx
c0003898:	5e                   	pop    esi
c0003899:	5f                   	pop    edi
c000389a:	5d                   	pop    ebp
c000389b:	c3                   	ret    

c000389c <remove_chain>:
c000389c:	55                   	push   ebp
c000389d:	57                   	push   edi
c000389e:	56                   	push   esi
c000389f:	89 d6                	mov    esi,edx
c00038a1:	53                   	push   ebx
c00038a2:	83 ec 0c             	sub    esp,0xc
c00038a5:	83 fa 01             	cmp    edx,0x1
c00038a8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00038aa:	76 6a                	jbe    c0003916 <remove_chain+0x7a>
c00038ac:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00038af:	76 65                	jbe    c0003916 <remove_chain+0x7a>
c00038b1:	85 c9                	test   ecx,ecx
c00038b3:	89 c5                	mov    ebp,eax
c00038b5:	89 ca                	mov    edx,ecx
c00038b7:	74 0e                	je     c00038c7 <remove_chain+0x2b>
c00038b9:	83 c9 ff             	or     ecx,0xffffffff
c00038bc:	89 d8                	mov    eax,ebx
c00038be:	e8 4f f2 ff ff       	call   c0002b12 <put_fat>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 5b                	jne    c0003922 <remove_chain+0x86>
c00038c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00038ca:	89 f2                	mov    edx,esi
c00038cc:	e8 c4 fc ff ff       	call   c0003595 <get_fat.isra.2>
c00038d1:	85 c0                	test   eax,eax
c00038d3:	89 c7                	mov    edi,eax
c00038d5:	75 04                	jne    c00038db <remove_chain+0x3f>
c00038d7:	31 c0                	xor    eax,eax
c00038d9:	eb 47                	jmp    c0003922 <remove_chain+0x86>
c00038db:	83 f8 01             	cmp    eax,0x1
c00038de:	74 36                	je     c0003916 <remove_chain+0x7a>
c00038e0:	83 f8 ff             	cmp    eax,0xffffffff
c00038e3:	74 38                	je     c000391d <remove_chain+0x81>
c00038e5:	31 c9                	xor    ecx,ecx
c00038e7:	89 f2                	mov    edx,esi
c00038e9:	89 d8                	mov    eax,ebx
c00038eb:	e8 22 f2 ff ff       	call   c0002b12 <put_fat>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2e                	jne    c0003922 <remove_chain+0x86>
c00038f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038f7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038fa:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038fd:	39 c8                	cmp    eax,ecx
c00038ff:	73 0d                	jae    c000390e <remove_chain+0x72>
c0003901:	40                   	inc    eax
c0003902:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003905:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003908:	83 c8 01             	or     eax,0x1
c000390b:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000390e:	39 fa                	cmp    edx,edi
c0003910:	89 fe                	mov    esi,edi
c0003912:	77 b3                	ja     c00038c7 <remove_chain+0x2b>
c0003914:	eb c1                	jmp    c00038d7 <remove_chain+0x3b>
c0003916:	b8 02 00 00 00       	mov    eax,0x2
c000391b:	eb 05                	jmp    c0003922 <remove_chain+0x86>
c000391d:	b8 01 00 00 00       	mov    eax,0x1
c0003922:	83 c4 0c             	add    esp,0xc
c0003925:	5b                   	pop    ebx
c0003926:	5e                   	pop    esi
c0003927:	5f                   	pop    edi
c0003928:	5d                   	pop    ebp
c0003929:	c3                   	ret    

c000392a <dir_next>:
c000392a:	55                   	push   ebp
c000392b:	57                   	push   edi
c000392c:	56                   	push   esi
c000392d:	53                   	push   ebx
c000392e:	83 ec 1c             	sub    esp,0x1c
c0003931:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003934:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003936:	83 c7 20             	add    edi,0x20
c0003939:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000393f:	76 07                	jbe    c0003948 <dir_next+0x1e>
c0003941:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003948:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000394b:	b9 04 00 00 00       	mov    ecx,0x4
c0003950:	85 f6                	test   esi,esi
c0003952:	0f 84 cd 00 00 00    	je     c0003a25 <dir_next+0xfb>
c0003958:	89 c3                	mov    ebx,eax
c000395a:	89 f8                	mov    eax,edi
c000395c:	25 ff 01 00 00       	and    eax,0x1ff
c0003961:	89 d1                	mov    ecx,edx
c0003963:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003967:	0f 85 a8 00 00 00    	jne    c0003a15 <dir_next+0xeb>
c000396d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003970:	46                   	inc    esi
c0003971:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003974:	85 d2                	test   edx,edx
c0003976:	75 22                	jne    c000399a <dir_next+0x70>
c0003978:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000397c:	89 fa                	mov    edx,edi
c000397e:	c1 ea 05             	shr    edx,0x5
c0003981:	39 c2                	cmp    edx,eax
c0003983:	0f 82 8c 00 00 00    	jb     c0003a15 <dir_next+0xeb>
c0003989:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003990:	b9 04 00 00 00       	mov    ecx,0x4
c0003995:	e9 8b 00 00 00       	jmp    c0003a25 <dir_next+0xfb>
c000399a:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000399e:	89 fe                	mov    esi,edi
c00039a0:	c1 ee 09             	shr    esi,0x9
c00039a3:	48                   	dec    eax
c00039a4:	85 f0                	test   eax,esi
c00039a6:	75 6d                	jne    c0003a15 <dir_next+0xeb>
c00039a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00039ac:	89 e8                	mov    eax,ebp
c00039ae:	e8 e2 fb ff ff       	call   c0003595 <get_fat.isra.2>
c00039b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00039b7:	83 f8 01             	cmp    eax,0x1
c00039ba:	89 c6                	mov    esi,eax
c00039bc:	77 07                	ja     c00039c5 <dir_next+0x9b>
c00039be:	b9 02 00 00 00       	mov    ecx,0x2
c00039c3:	eb 60                	jmp    c0003a25 <dir_next+0xfb>
c00039c5:	83 f8 ff             	cmp    eax,0xffffffff
c00039c8:	75 07                	jne    c00039d1 <dir_next+0xa7>
c00039ca:	b9 01 00 00 00       	mov    ecx,0x1
c00039cf:	eb 54                	jmp    c0003a25 <dir_next+0xfb>
c00039d1:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039d4:	77 30                	ja     c0003a06 <dir_next+0xdc>
c00039d6:	85 c9                	test   ecx,ecx
c00039d8:	74 af                	je     c0003989 <dir_next+0x5f>
c00039da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039dd:	89 d8                	mov    eax,ebx
c00039df:	e8 7e fd ff ff       	call   c0003762 <create_chain>
c00039e4:	b9 07 00 00 00       	mov    ecx,0x7
c00039e9:	85 c0                	test   eax,eax
c00039eb:	89 c6                	mov    esi,eax
c00039ed:	74 36                	je     c0003a25 <dir_next+0xfb>
c00039ef:	83 f8 01             	cmp    eax,0x1
c00039f2:	74 ca                	je     c00039be <dir_next+0x94>
c00039f4:	83 f8 ff             	cmp    eax,0xffffffff
c00039f7:	74 d1                	je     c00039ca <dir_next+0xa0>
c00039f9:	89 c2                	mov    edx,eax
c00039fb:	89 e8                	mov    eax,ebp
c00039fd:	e8 67 f2 ff ff       	call   c0002c69 <dir_clear>
c0003a02:	85 c0                	test   eax,eax
c0003a04:	75 c4                	jne    c00039ca <dir_next+0xa0>
c0003a06:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003a09:	89 f2                	mov    edx,esi
c0003a0b:	89 e8                	mov    eax,ebp
c0003a0d:	e8 97 e9 ff ff       	call   c00023a9 <clst2sect>
c0003a12:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003a15:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a1c:	31 c9                	xor    ecx,ecx
c0003a1e:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003a22:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003a25:	83 c4 1c             	add    esp,0x1c
c0003a28:	89 c8                	mov    eax,ecx
c0003a2a:	5b                   	pop    ebx
c0003a2b:	5e                   	pop    esi
c0003a2c:	5f                   	pop    edi
c0003a2d:	5d                   	pop    ebp
c0003a2e:	c3                   	ret    

c0003a2f <dir_alloc>:
c0003a2f:	55                   	push   ebp
c0003a30:	89 c5                	mov    ebp,eax
c0003a32:	57                   	push   edi
c0003a33:	89 d7                	mov    edi,edx
c0003a35:	56                   	push   esi
c0003a36:	31 d2                	xor    edx,edx
c0003a38:	53                   	push   ebx
c0003a39:	83 ec 0c             	sub    esp,0xc
c0003a3c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3e:	e8 57 fc ff ff       	call   c000369a <dir_sdi>
c0003a43:	85 c0                	test   eax,eax
c0003a45:	75 3b                	jne    c0003a82 <dir_alloc+0x53>
c0003a47:	31 db                	xor    ebx,ebx
c0003a49:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a4c:	89 f0                	mov    eax,esi
c0003a4e:	e8 65 ec ff ff       	call   c00026b8 <move_window>
c0003a53:	85 c0                	test   eax,eax
c0003a55:	75 2b                	jne    c0003a82 <dir_alloc+0x53>
c0003a57:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a5a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a5d:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a63:	74 04                	je     c0003a69 <dir_alloc+0x3a>
c0003a65:	85 d2                	test   edx,edx
c0003a67:	75 07                	jne    c0003a70 <dir_alloc+0x41>
c0003a69:	43                   	inc    ebx
c0003a6a:	39 fb                	cmp    ebx,edi
c0003a6c:	75 04                	jne    c0003a72 <dir_alloc+0x43>
c0003a6e:	eb 1c                	jmp    c0003a8c <dir_alloc+0x5d>
c0003a70:	31 db                	xor    ebx,ebx
c0003a72:	ba 01 00 00 00       	mov    edx,0x1
c0003a77:	89 e8                	mov    eax,ebp
c0003a79:	e8 ac fe ff ff       	call   c000392a <dir_next>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	74 c7                	je     c0003a49 <dir_alloc+0x1a>
c0003a82:	83 f8 04             	cmp    eax,0x4
c0003a85:	75 05                	jne    c0003a8c <dir_alloc+0x5d>
c0003a87:	b8 07 00 00 00       	mov    eax,0x7
c0003a8c:	83 c4 0c             	add    esp,0xc
c0003a8f:	5b                   	pop    ebx
c0003a90:	5e                   	pop    esi
c0003a91:	5f                   	pop    edi
c0003a92:	5d                   	pop    ebp
c0003a93:	c3                   	ret    

c0003a94 <dir_read>:
c0003a94:	55                   	push   ebp
c0003a95:	57                   	push   edi
c0003a96:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a9b:	56                   	push   esi
c0003a9c:	be 04 00 00 00       	mov    esi,0x4
c0003aa1:	53                   	push   ebx
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 ec 1c             	sub    esp,0x1c
c0003aa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003aab:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003aad:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003ab2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab5:	85 d2                	test   edx,edx
c0003ab7:	0f 84 e3 00 00 00    	je     c0003ba0 <dir_read+0x10c>
c0003abd:	89 e8                	mov    eax,ebp
c0003abf:	e8 f4 eb ff ff       	call   c00026b8 <move_window>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 dd 00 00 00    	jne    c0003bab <dir_read+0x117>
c0003ace:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ad1:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003ad4:	88 04 24             	mov    BYTE PTR [esp],al
c0003ad7:	85 c0                	test   eax,eax
c0003ad9:	0f 84 c7 00 00 00    	je     c0003ba6 <dir_read+0x112>
c0003adf:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ae2:	83 e1 3f             	and    ecx,0x3f
c0003ae5:	3d e5 00 00 00       	cmp    eax,0xe5
c0003aea:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aed:	0f 84 93 00 00 00    	je     c0003b86 <dir_read+0xf2>
c0003af3:	83 f8 2e             	cmp    eax,0x2e
c0003af6:	0f 84 8a 00 00 00    	je     c0003b86 <dir_read+0xf2>
c0003afc:	0f b6 c9             	movzx  ecx,cl
c0003aff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003b03:	83 e1 df             	and    ecx,0xffffffdf
c0003b06:	83 f9 08             	cmp    ecx,0x8
c0003b09:	0f 94 c1             	sete   cl
c0003b0c:	0f b6 c9             	movzx  ecx,cl
c0003b0f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003b13:	75 71                	jne    c0003b86 <dir_read+0xf2>
c0003b15:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003b1a:	75 4a                	jne    c0003b66 <dir_read+0xd2>
c0003b1c:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003b20:	74 16                	je     c0003b38 <dir_read+0xa4>
c0003b22:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003b25:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003b2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b33:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b36:	eb 0e                	jmp    c0003b46 <dir_read+0xb2>
c0003b38:	89 f9                	mov    ecx,edi
c0003b3a:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b3f:	0f b6 c9             	movzx  ecx,cl
c0003b42:	39 c1                	cmp    ecx,eax
c0003b44:	75 45                	jne    c0003b8b <dir_read+0xf7>
c0003b46:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b4a:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4f:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b52:	75 37                	jne    c0003b8b <dir_read+0xf7>
c0003b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b57:	e8 6a e8 ff ff       	call   c00023c6 <pick_lfn>
c0003b5c:	85 c0                	test   eax,eax
c0003b5e:	74 2b                	je     c0003b8b <dir_read+0xf7>
c0003b60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b63:	4f                   	dec    edi
c0003b64:	eb 25                	jmp    c0003b8b <dir_read+0xf7>
c0003b66:	89 f8                	mov    eax,edi
c0003b68:	84 c0                	test   al,al
c0003b6a:	75 11                	jne    c0003b7d <dir_read+0xe9>
c0003b6c:	89 d0                	mov    eax,edx
c0003b6e:	e8 30 ea ff ff       	call   c00025a3 <sum_sfn>
c0003b73:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b77:	75 04                	jne    c0003b7d <dir_read+0xe9>
c0003b79:	31 f6                	xor    esi,esi
c0003b7b:	eb 35                	jmp    c0003bb2 <dir_read+0x11e>
c0003b7d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b84:	eb 2c                	jmp    c0003bb2 <dir_read+0x11e>
c0003b86:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b8b:	31 d2                	xor    edx,edx
c0003b8d:	89 d8                	mov    eax,ebx
c0003b8f:	e8 96 fd ff ff       	call   c000392a <dir_next>
c0003b94:	85 c0                	test   eax,eax
c0003b96:	89 c6                	mov    esi,eax
c0003b98:	0f 84 14 ff ff ff    	je     c0003ab2 <dir_read+0x1e>
c0003b9e:	eb 0b                	jmp    c0003bab <dir_read+0x117>
c0003ba0:	85 f6                	test   esi,esi
c0003ba2:	74 d5                	je     c0003b79 <dir_read+0xe5>
c0003ba4:	eb 05                	jmp    c0003bab <dir_read+0x117>
c0003ba6:	be 04 00 00 00       	mov    esi,0x4
c0003bab:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003bb2:	83 c4 1c             	add    esp,0x1c
c0003bb5:	89 f0                	mov    eax,esi
c0003bb7:	5b                   	pop    ebx
c0003bb8:	5e                   	pop    esi
c0003bb9:	5f                   	pop    edi
c0003bba:	5d                   	pop    ebp
c0003bbb:	c3                   	ret    

c0003bbc <dir_remove>:
c0003bbc:	57                   	push   edi
c0003bbd:	56                   	push   esi
c0003bbe:	53                   	push   ebx
c0003bbf:	89 c3                	mov    ebx,eax
c0003bc1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003bc4:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bc6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003bc9:	83 fa ff             	cmp    edx,0xffffffff
c0003bcc:	74 09                	je     c0003bd7 <dir_remove+0x1b>
c0003bce:	e8 c7 fa ff ff       	call   c000369a <dir_sdi>
c0003bd3:	85 c0                	test   eax,eax
c0003bd5:	75 34                	jne    c0003c0b <dir_remove+0x4f>
c0003bd7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bda:	89 f0                	mov    eax,esi
c0003bdc:	e8 d7 ea ff ff       	call   c00026b8 <move_window>
c0003be1:	85 c0                	test   eax,eax
c0003be3:	75 1c                	jne    c0003c01 <dir_remove+0x45>
c0003be5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be8:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003beb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bef:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bf2:	73 17                	jae    c0003c0b <dir_remove+0x4f>
c0003bf4:	31 d2                	xor    edx,edx
c0003bf6:	89 d8                	mov    eax,ebx
c0003bf8:	e8 2d fd ff ff       	call   c000392a <dir_next>
c0003bfd:	85 c0                	test   eax,eax
c0003bff:	74 d6                	je     c0003bd7 <dir_remove+0x1b>
c0003c01:	83 f8 04             	cmp    eax,0x4
c0003c04:	75 05                	jne    c0003c0b <dir_remove+0x4f>
c0003c06:	b8 02 00 00 00       	mov    eax,0x2
c0003c0b:	5b                   	pop    ebx
c0003c0c:	5e                   	pop    esi
c0003c0d:	5f                   	pop    edi
c0003c0e:	c3                   	ret    

c0003c0f <dir_find>:
c0003c0f:	55                   	push   ebp
c0003c10:	31 d2                	xor    edx,edx
c0003c12:	57                   	push   edi
c0003c13:	56                   	push   esi
c0003c14:	53                   	push   ebx
c0003c15:	89 c3                	mov    ebx,eax
c0003c17:	83 ec 1c             	sub    esp,0x1c
c0003c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c20:	89 d8                	mov    eax,ebx
c0003c22:	e8 73 fa ff ff       	call   c000369a <dir_sdi>
c0003c27:	85 c0                	test   eax,eax
c0003c29:	89 c6                	mov    esi,eax
c0003c2b:	0f 85 22 01 00 00    	jne    c0003d53 <dir_find+0x144>
c0003c31:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c38:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003c3d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003c42:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c49:	e8 6a ea ff ff       	call   c00026b8 <move_window>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	0f 85 fb 00 00 00    	jne    c0003d53 <dir_find+0x144>
c0003c58:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003c5b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	89 d1                	mov    ecx,edx
c0003c62:	0f 84 e6 00 00 00    	je     c0003d4e <dir_find+0x13f>
c0003c68:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003c6b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c73:	83 e0 3f             	and    eax,0x3f
c0003c76:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003c7c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c7f:	0f 84 a8 00 00 00    	je     c0003d2d <dir_find+0x11e>
c0003c85:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003c8a:	0f b6 c0             	movzx  eax,al
c0003c8d:	74 0b                	je     c0003c9a <dir_find+0x8b>
c0003c8f:	83 f8 0f             	cmp    eax,0xf
c0003c92:	0f 85 95 00 00 00    	jne    c0003d2d <dir_find+0x11e>
c0003c98:	eb 05                	jmp    c0003c9f <dir_find+0x90>
c0003c9a:	83 f8 0f             	cmp    eax,0xf
c0003c9d:	75 62                	jne    c0003d01 <dir_find+0xf2>
c0003c9f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003ca3:	0f 85 90 00 00 00    	jne    c0003d39 <dir_find+0x12a>
c0003ca9:	f6 c1 40             	test   cl,0x40
c0003cac:	74 15                	je     c0003cc3 <dir_find+0xb4>
c0003cae:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003cb1:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003cb7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003cbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003cbe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003cc1:	eb 11                	jmp    c0003cd4 <dir_find+0xc5>
c0003cc3:	89 e8                	mov    eax,ebp
c0003cc5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003cca:	0f b6 d0             	movzx  edx,al
c0003ccd:	0f b6 c1             	movzx  eax,cl
c0003cd0:	39 c2                	cmp    edx,eax
c0003cd2:	75 65                	jne    c0003d39 <dir_find+0x12a>
c0003cd4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003cd8:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003cdd:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003ce0:	75 57                	jne    c0003d39 <dir_find+0x12a>
c0003ce2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cea:	89 fa                	mov    edx,edi
c0003cec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cef:	e8 2c f3 ff ff       	call   c0003020 <cmp_lfn>
c0003cf4:	85 c0                	test   eax,eax
c0003cf6:	74 41                	je     c0003d39 <dir_find+0x12a>
c0003cf8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003cfc:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003cff:	eb 38                	jmp    c0003d39 <dir_find+0x12a>
c0003d01:	89 e8                	mov    eax,ebp
c0003d03:	84 c0                	test   al,al
c0003d05:	75 0d                	jne    c0003d14 <dir_find+0x105>
c0003d07:	89 f8                	mov    eax,edi
c0003d09:	e8 95 e8 ff ff       	call   c00025a3 <sum_sfn>
c0003d0e:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003d12:	74 3f                	je     c0003d53 <dir_find+0x144>
c0003d14:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003d18:	75 13                	jne    c0003d2d <dir_find+0x11e>
c0003d1a:	8d 53 20             	lea    edx,[ebx+0x20]
c0003d1d:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d22:	89 f8                	mov    eax,edi
c0003d24:	e8 75 e4 ff ff       	call   c000219e <mem_cmp>
c0003d29:	85 c0                	test   eax,eax
c0003d2b:	74 26                	je     c0003d53 <dir_find+0x144>
c0003d2d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003d34:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003d39:	31 d2                	xor    edx,edx
c0003d3b:	89 d8                	mov    eax,ebx
c0003d3d:	e8 e8 fb ff ff       	call   c000392a <dir_next>
c0003d42:	85 c0                	test   eax,eax
c0003d44:	89 c6                	mov    esi,eax
c0003d46:	0f 84 f6 fe ff ff    	je     c0003c42 <dir_find+0x33>
c0003d4c:	eb 05                	jmp    c0003d53 <dir_find+0x144>
c0003d4e:	be 04 00 00 00       	mov    esi,0x4
c0003d53:	83 c4 1c             	add    esp,0x1c
c0003d56:	89 f0                	mov    eax,esi
c0003d58:	5b                   	pop    ebx
c0003d59:	5e                   	pop    esi
c0003d5a:	5f                   	pop    edi
c0003d5b:	5d                   	pop    ebp
c0003d5c:	c3                   	ret    

c0003d5d <follow_path>:
c0003d5d:	56                   	push   esi
c0003d5e:	53                   	push   ebx
c0003d5f:	89 c3                	mov    ebx,eax
c0003d61:	83 ec 14             	sub    esp,0x14
c0003d64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d68:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d6e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d71:	83 fa 2f             	cmp    edx,0x2f
c0003d74:	75 07                	jne    c0003d7d <follow_path+0x20>
c0003d76:	40                   	inc    eax
c0003d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d7b:	eb ed                	jmp    c0003d6a <follow_path+0xd>
c0003d7d:	83 fa 5c             	cmp    edx,0x5c
c0003d80:	74 f4                	je     c0003d76 <follow_path+0x19>
c0003d82:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d89:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d8c:	77 3e                	ja     c0003dcc <follow_path+0x6f>
c0003d8e:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d92:	31 d2                	xor    edx,edx
c0003d94:	89 d8                	mov    eax,ebx
c0003d96:	e8 ff f8 ff ff       	call   c000369a <dir_sdi>
c0003d9b:	eb 57                	jmp    c0003df4 <follow_path+0x97>
c0003d9d:	89 d8                	mov    eax,ebx
c0003d9f:	e8 6b fe ff ff       	call   c0003c0f <dir_find>
c0003da4:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003da7:	85 c0                	test   eax,eax
c0003da9:	75 32                	jne    c0003ddd <follow_path+0x80>
c0003dab:	80 e2 04             	and    dl,0x4
c0003dae:	75 44                	jne    c0003df4 <follow_path+0x97>
c0003db0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003db4:	74 39                	je     c0003def <follow_path+0x92>
c0003db6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003db9:	25 ff 01 00 00       	and    eax,0x1ff
c0003dbe:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003dc2:	8a 06                	mov    al,BYTE PTR [esi]
c0003dc4:	e8 7b f7 ff ff       	call   c0003544 <ld_clust.isra.0>
c0003dc9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003dcc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003dd0:	89 d8                	mov    eax,ebx
c0003dd2:	e8 8e ef ff ff       	call   c0002d65 <create_name>
c0003dd7:	85 c0                	test   eax,eax
c0003dd9:	74 c2                	je     c0003d9d <follow_path+0x40>
c0003ddb:	eb 17                	jmp    c0003df4 <follow_path+0x97>
c0003ddd:	83 f8 04             	cmp    eax,0x4
c0003de0:	75 12                	jne    c0003df4 <follow_path+0x97>
c0003de2:	80 e2 04             	and    dl,0x4
c0003de5:	ba 05 00 00 00       	mov    edx,0x5
c0003dea:	0f 44 c2             	cmove  eax,edx
c0003ded:	eb 05                	jmp    c0003df4 <follow_path+0x97>
c0003def:	b8 05 00 00 00       	mov    eax,0x5
c0003df4:	83 c4 14             	add    esp,0x14
c0003df7:	5b                   	pop    ebx
c0003df8:	5e                   	pop    esi
c0003df9:	c3                   	ret    

c0003dfa <dir_register>:
c0003dfa:	55                   	push   ebp
c0003dfb:	57                   	push   edi
c0003dfc:	56                   	push   esi
c0003dfd:	be 06 00 00 00       	mov    esi,0x6
c0003e02:	53                   	push   ebx
c0003e03:	83 ec 2c             	sub    esp,0x2c
c0003e06:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003e09:	80 e2 a0             	and    dl,0xa0
c0003e0c:	0f 85 66 01 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003e12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003e1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003e1c:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003e1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e23:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003e28:	74 06                	je     c0003e30 <dir_register+0x36>
c0003e2a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003e2e:	eb ef                	jmp    c0003e1f <dir_register+0x25>
c0003e30:	89 c3                	mov    ebx,eax
c0003e32:	b9 0c 00 00 00       	mov    ecx,0xc
c0003e37:	8d 40 20             	lea    eax,[eax+0x20]
c0003e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e3e:	89 c2                	mov    edx,eax
c0003e40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e44:	e8 36 e3 ff ff       	call   c000217f <mem_cpy>
c0003e49:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e4e:	74 48                	je     c0003e98 <dir_register+0x9e>
c0003e50:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e54:	bd 01 00 00 00       	mov    ebp,0x1
c0003e59:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e5c:	55                   	push   ebp
c0003e5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e61:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e65:	e8 77 e6 ff ff       	call   c00024e1 <gen_numname>
c0003e6a:	58                   	pop    eax
c0003e6b:	89 d8                	mov    eax,ebx
c0003e6d:	e8 9d fd ff ff       	call   c0003c0f <dir_find>
c0003e72:	85 c0                	test   eax,eax
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	75 10                	jne    c0003e88 <dir_register+0x8e>
c0003e78:	45                   	inc    ebp
c0003e79:	83 fd 64             	cmp    ebp,0x64
c0003e7c:	75 db                	jne    c0003e59 <dir_register+0x5f>
c0003e7e:	be 07 00 00 00       	mov    esi,0x7
c0003e83:	e9 f0 00 00 00       	jmp    c0003f78 <dir_register+0x17e>
c0003e88:	83 f8 04             	cmp    eax,0x4
c0003e8b:	0f 85 e7 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003e91:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e95:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e98:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e9d:	bd 01 00 00 00       	mov    ebp,0x1
c0003ea2:	74 13                	je     c0003eb7 <dir_register+0xbd>
c0003ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ea8:	b9 0d 00 00 00       	mov    ecx,0xd
c0003ead:	31 d2                	xor    edx,edx
c0003eaf:	83 c0 0c             	add    eax,0xc
c0003eb2:	f7 f1                	div    ecx
c0003eb4:	8d 68 01             	lea    ebp,[eax+0x1]
c0003eb7:	89 ea                	mov    edx,ebp
c0003eb9:	89 d8                	mov    eax,ebx
c0003ebb:	e8 6f fb ff ff       	call   c0003a2f <dir_alloc>
c0003ec0:	85 c0                	test   eax,eax
c0003ec2:	89 c6                	mov    esi,eax
c0003ec4:	0f 85 ae 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003eca:	4d                   	dec    ebp
c0003ecb:	74 6b                	je     c0003f38 <dir_register+0x13e>
c0003ecd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003ed0:	89 e8                	mov    eax,ebp
c0003ed2:	c1 e0 05             	shl    eax,0x5
c0003ed5:	29 c2                	sub    edx,eax
c0003ed7:	89 d8                	mov    eax,ebx
c0003ed9:	e8 bc f7 ff ff       	call   c000369a <dir_sdi>
c0003ede:	85 c0                	test   eax,eax
c0003ee0:	89 c6                	mov    esi,eax
c0003ee2:	0f 85 90 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eec:	e8 b2 e6 ff ff       	call   c00025a3 <sum_sfn>
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efb:	89 f8                	mov    eax,edi
c0003efd:	e8 b6 e7 ff ff       	call   c00026b8 <move_window>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	75 70                	jne    c0003f78 <dir_register+0x17e>
c0003f08:	83 ec 0c             	sub    esp,0xc
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f10:	0f b6 c8             	movzx  ecx,al
c0003f13:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003f16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003f1a:	e8 27 e5 ff ff       	call   c0002446 <put_lfn>
c0003f1f:	31 d2                	xor    edx,edx
c0003f21:	89 d8                	mov    eax,ebx
c0003f23:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f27:	e8 fe f9 ff ff       	call   c000392a <dir_next>
c0003f2c:	83 c4 10             	add    esp,0x10
c0003f2f:	85 c0                	test   eax,eax
c0003f31:	89 c6                	mov    esi,eax
c0003f33:	75 43                	jne    c0003f78 <dir_register+0x17e>
c0003f35:	4d                   	dec    ebp
c0003f36:	75 c0                	jne    c0003ef8 <dir_register+0xfe>
c0003f38:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f3b:	89 f8                	mov    eax,edi
c0003f3d:	e8 76 e7 ff ff       	call   c00026b8 <move_window>
c0003f42:	85 c0                	test   eax,eax
c0003f44:	89 c6                	mov    esi,eax
c0003f46:	75 30                	jne    c0003f78 <dir_register+0x17e>
c0003f48:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4b:	b9 20 00 00 00       	mov    ecx,0x20
c0003f50:	31 d2                	xor    edx,edx
c0003f52:	e8 3d e2 ff ff       	call   c0002194 <mem_set>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f63:	e8 17 e2 ff ff       	call   c000217f <mem_cpy>
c0003f68:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f6b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f6e:	83 e0 18             	and    eax,0x18
c0003f71:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f74:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f78:	83 c4 2c             	add    esp,0x2c
c0003f7b:	89 f0                	mov    eax,esi
c0003f7d:	5b                   	pop    ebx
c0003f7e:	5e                   	pop    esi
c0003f7f:	5f                   	pop    edi
c0003f80:	5d                   	pop    ebp
c0003f81:	c3                   	ret    

c0003f82 <f_mount>:
c0003f82:	53                   	push   ebx
c0003f83:	83 ec 18             	sub    esp,0x18
c0003f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f8a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f96:	e8 28 e6 ff ff       	call   c00025c3 <get_ldnumber>
c0003f9b:	89 c2                	mov    edx,eax
c0003f9d:	b8 0b 00 00 00       	mov    eax,0xb
c0003fa2:	85 d2                	test   edx,edx
c0003fa4:	78 39                	js     c0003fdf <f_mount+0x5d>
c0003fa6:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003fad:	85 c0                	test   eax,eax
c0003faf:	74 03                	je     c0003fb4 <f_mount+0x32>
c0003fb1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003fb8:	85 c0                	test   eax,eax
c0003fba:	74 03                	je     c0003fbf <f_mount+0x3d>
c0003fbc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003fc3:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003fca:	31 c0                	xor    eax,eax
c0003fcc:	84 db                	test   bl,bl
c0003fce:	74 0f                	je     c0003fdf <f_mount+0x5d>
c0003fd0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003fd4:	31 c9                	xor    ecx,ecx
c0003fd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003fda:	e8 36 e8 ff ff       	call   c0002815 <mount_volume>
c0003fdf:	83 c4 18             	add    esp,0x18
c0003fe2:	5b                   	pop    ebx
c0003fe3:	c3                   	ret    

c0003fe4 <f_open>:
c0003fe4:	55                   	push   ebp
c0003fe5:	b8 09 00 00 00       	mov    eax,0x9
c0003fea:	57                   	push   edi
c0003feb:	56                   	push   esi
c0003fec:	53                   	push   ebx
c0003fed:	83 ec 5c             	sub    esp,0x5c
c0003ff0:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003ff4:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003ff8:	85 db                	test   ebx,ebx
c0003ffa:	0f 84 9f 02 00 00    	je     c000429f <f_open+0x2bb>
c0004000:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004004:	89 fd                	mov    ebp,edi
c0004006:	83 e5 3f             	and    ebp,0x3f
c0004009:	89 e8                	mov    eax,ebp
c000400b:	89 ee                	mov    esi,ebp
c000400d:	0f b6 c8             	movzx  ecx,al
c0004010:	8d 44 24 74          	lea    eax,[esp+0x74]
c0004014:	e8 fc e7 ff ff       	call   c0002815 <mount_volume>
c0004019:	85 c0                	test   eax,eax
c000401b:	0f 85 78 02 00 00    	jne    c0004299 <f_open+0x2b5>
c0004021:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004025:	83 ec 0c             	sub    esp,0xc
c0004028:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000402c:	68 00 02 00 00       	push   0x200
c0004031:	e8 62 1f 00 00       	call   c0005f98 <ff_memalloc>
c0004036:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000403a:	83 c4 10             	add    esp,0x10
c000403d:	b8 11 00 00 00       	mov    eax,0x11
c0004042:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004047:	0f 84 52 02 00 00    	je     c000429f <f_open+0x2bb>
c000404d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004051:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004055:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004059:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000405c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004060:	e8 f8 fc ff ff       	call   c0003d5d <follow_path>
c0004065:	85 c0                	test   eax,eax
c0004067:	75 0d                	jne    c0004076 <f_open+0x92>
c0004069:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c000406e:	ba 06 00 00 00       	mov    edx,0x6
c0004073:	0f 45 c2             	cmovne eax,edx
c0004076:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000407c:	0f 84 d5 00 00 00    	je     c0004157 <f_open+0x173>
c0004082:	85 c0                	test   eax,eax
c0004084:	74 21                	je     c00040a7 <f_open+0xc3>
c0004086:	83 f8 04             	cmp    eax,0x4
c0004089:	0f 85 ef 01 00 00    	jne    c000427e <f_open+0x29a>
c000408f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004093:	e8 62 fd ff ff       	call   c0003dfa <dir_register>
c0004098:	85 c0                	test   eax,eax
c000409a:	0f 85 de 01 00 00    	jne    c000427e <f_open+0x29a>
c00040a0:	83 cd 08             	or     ebp,0x8
c00040a3:	89 ee                	mov    esi,ebp
c00040a5:	eb 2c                	jmp    c00040d3 <f_open+0xef>
c00040a7:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c00040ab:	b8 07 00 00 00       	mov    eax,0x7
c00040b0:	80 e2 11             	and    dl,0x11
c00040b3:	0f 85 c5 01 00 00    	jne    c000427e <f_open+0x29a>
c00040b9:	f7 c7 04 00 00 00    	test   edi,0x4
c00040bf:	b8 08 00 00 00       	mov    eax,0x8
c00040c4:	0f 85 b4 01 00 00    	jne    c000427e <f_open+0x29a>
c00040ca:	83 e7 08             	and    edi,0x8
c00040cd:	0f 84 b1 00 00 00    	je     c0004184 <f_open+0x1a0>
c00040d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040d7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00040db:	8a 00                	mov    al,BYTE PTR [eax]
c00040dd:	89 ea                	mov    edx,ebp
c00040df:	e8 60 f4 ff ff       	call   c0003544 <ld_clust.isra.0>
c00040e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00040e9:	89 c7                	mov    edi,eax
c00040eb:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040ee:	e8 89 e0 ff ff       	call   c000217c <st_dword>
c00040f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040f7:	31 c9                	xor    ecx,ecx
c00040f9:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004101:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004105:	e8 63 f4 ff ff       	call   c000356d <st_clust.isra.1>
c000410a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000410e:	31 d2                	xor    edx,edx
c0004110:	83 c0 1c             	add    eax,0x1c
c0004113:	e8 64 e0 ff ff       	call   c000217c <st_dword>
c0004118:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000411c:	85 ff                	test   edi,edi
c000411e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004122:	74 60                	je     c0004184 <f_open+0x1a0>
c0004124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004128:	31 c9                	xor    ecx,ecx
c000412a:	89 fa                	mov    edx,edi
c000412c:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c000412f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004133:	e8 64 f7 ff ff       	call   c000389c <remove_chain>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 3e 01 00 00    	jne    c000427e <f_open+0x29a>
c0004140:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004144:	89 ea                	mov    edx,ebp
c0004146:	4f                   	dec    edi
c0004147:	e8 6c e5 ff ff       	call   c00026b8 <move_window>
c000414c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004150:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004153:	85 c0                	test   eax,eax
c0004155:	eb 27                	jmp    c000417e <f_open+0x19a>
c0004157:	85 c0                	test   eax,eax
c0004159:	0f 85 1f 01 00 00    	jne    c000427e <f_open+0x29a>
c000415f:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004163:	b8 04 00 00 00       	mov    eax,0x4
c0004168:	f6 c2 10             	test   dl,0x10
c000416b:	0f 85 0d 01 00 00    	jne    c000427e <f_open+0x29a>
c0004171:	83 e7 02             	and    edi,0x2
c0004174:	74 0e                	je     c0004184 <f_open+0x1a0>
c0004176:	b8 07 00 00 00       	mov    eax,0x7
c000417b:	80 e2 01             	and    dl,0x1
c000417e:	0f 85 fa 00 00 00    	jne    c000427e <f_open+0x29a>
c0004184:	f7 c6 08 00 00 00    	test   esi,0x8
c000418a:	74 03                	je     c000418f <f_open+0x1ab>
c000418c:	83 ce 40             	or     esi,0x40
c000418f:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004193:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004197:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000419a:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000419d:	89 fa                	mov    edx,edi
c000419f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00041a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00041a5:	e8 9a f3 ff ff       	call   c0003544 <ld_clust.isra.0>
c00041aa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041ad:	8d 47 1c             	lea    eax,[edi+0x1c]
c00041b0:	e8 ab df ff ff       	call   c0002160 <ld_dword>
c00041b5:	8d 7b 28             	lea    edi,[ebx+0x28]
c00041b8:	31 d2                	xor    edx,edx
c00041ba:	89 2b                	mov    DWORD PTR [ebx],ebp
c00041bc:	b9 00 02 00 00       	mov    ecx,0x200
c00041c1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00041c4:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c00041c8:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c00041cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00041d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00041de:	89 f0                	mov    eax,esi
c00041e0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041e3:	89 f8                	mov    eax,edi
c00041e5:	e8 aa df ff ff       	call   c0002194 <mem_set>
c00041ea:	83 e6 20             	and    esi,0x20
c00041ed:	75 07                	jne    c00041f6 <f_open+0x212>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	e9 88 00 00 00       	jmp    c000427e <f_open+0x29a>
c00041f6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00041f9:	85 f6                	test   esi,esi
c00041fb:	74 f2                	je     c00041ef <f_open+0x20b>
c00041fd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004200:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004204:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004207:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000420b:	31 c0                	xor    eax,eax
c000420d:	c1 e5 09             	shl    ebp,0x9
c0004210:	85 c0                	test   eax,eax
c0004212:	75 23                	jne    c0004237 <f_open+0x253>
c0004214:	39 ee                	cmp    esi,ebp
c0004216:	76 1f                	jbe    c0004237 <f_open+0x253>
c0004218:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421a:	e8 76 f3 ff ff       	call   c0003595 <get_fat.isra.2>
c000421f:	89 c2                	mov    edx,eax
c0004221:	b8 02 00 00 00       	mov    eax,0x2
c0004226:	83 fa 01             	cmp    edx,0x1
c0004229:	76 08                	jbe    c0004233 <f_open+0x24f>
c000422b:	31 c0                	xor    eax,eax
c000422d:	83 fa ff             	cmp    edx,0xffffffff
c0004230:	0f 94 c0             	sete   al
c0004233:	29 ee                	sub    esi,ebp
c0004235:	eb d9                	jmp    c0004210 <f_open+0x22c>
c0004237:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000423a:	85 c0                	test   eax,eax
c000423c:	75 40                	jne    c000427e <f_open+0x29a>
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	74 a9                	je     c00041ef <f_open+0x20b>
c0004246:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000424a:	89 e8                	mov    eax,ebp
c000424c:	e8 58 e1 ff ff       	call   c00023a9 <clst2sect>
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 02 00 00 00       	mov    eax,0x2
c0004258:	85 d2                	test   edx,edx
c000425a:	74 22                	je     c000427e <f_open+0x29a>
c000425c:	c1 ee 09             	shr    esi,0x9
c000425f:	8d 04 16             	lea    eax,[esi+edx*1]
c0004262:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004265:	6a 01                	push   0x1
c0004267:	50                   	push   eax
c0004268:	57                   	push   edi
c0004269:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000426d:	50                   	push   eax
c000426e:	e8 95 de ff ff       	call   c0002108 <disk_read>
c0004273:	83 c4 10             	add    esp,0x10
c0004276:	85 c0                	test   eax,eax
c0004278:	0f 95 c0             	setne  al
c000427b:	0f b6 c0             	movzx  eax,al
c000427e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004282:	83 ec 0c             	sub    esp,0xc
c0004285:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004289:	e8 22 1d 00 00       	call   c0005fb0 <ff_memfree>
c000428e:	83 c4 10             	add    esp,0x10
c0004291:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004295:	85 c0                	test   eax,eax
c0004297:	74 06                	je     c000429f <f_open+0x2bb>
c0004299:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000429f:	83 c4 5c             	add    esp,0x5c
c00042a2:	5b                   	pop    ebx
c00042a3:	5e                   	pop    esi
c00042a4:	5f                   	pop    edi
c00042a5:	5d                   	pop    ebp
c00042a6:	c3                   	ret    

c00042a7 <f_read>:
c00042a7:	55                   	push   ebp
c00042a8:	57                   	push   edi
c00042a9:	56                   	push   esi
c00042aa:	53                   	push   ebx
c00042ab:	83 ec 2c             	sub    esp,0x2c
c00042ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042b6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042ba:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00042be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00042c4:	89 d8                	mov    eax,ebx
c00042c6:	e8 44 e3 ff ff       	call   c000260f <validate>
c00042cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 a5 01 00 00    	jne    c000447c <f_read+0x1d5>
c00042d7:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c00042db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042df:	85 c0                	test   eax,eax
c00042e1:	0f 85 95 01 00 00    	jne    c000447c <f_read+0x1d5>
c00042e7:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042eb:	0f 84 83 01 00 00    	je     c0004474 <f_read+0x1cd>
c00042f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042f4:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042f7:	39 f8                	cmp    eax,edi
c00042f9:	0f 46 f8             	cmovbe edi,eax
c00042fc:	85 ff                	test   edi,edi
c00042fe:	0f 84 78 01 00 00    	je     c000447c <f_read+0x1d5>
c0004304:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004307:	a9 ff 01 00 00       	test   eax,0x1ff
c000430c:	0f 85 2b 01 00 00    	jne    c000443d <f_read+0x196>
c0004312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004316:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000431a:	89 c2                	mov    edx,eax
c000431c:	c1 ea 09             	shr    edx,0x9
c000431f:	4d                   	dec    ebp
c0004320:	21 d5                	and    ebp,edx
c0004322:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004326:	75 42                	jne    c000436a <f_read+0xc3>
c0004328:	85 c0                	test   eax,eax
c000432a:	75 05                	jne    c0004331 <f_read+0x8a>
c000432c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000432f:	eb 0a                	jmp    c000433b <f_read+0x94>
c0004331:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004336:	e8 5a f2 ff ff       	call   c0003595 <get_fat.isra.2>
c000433b:	83 f8 01             	cmp    eax,0x1
c000433e:	77 11                	ja     c0004351 <f_read+0xaa>
c0004340:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004344:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000434c:	e9 2b 01 00 00       	jmp    c000447c <f_read+0x1d5>
c0004351:	83 f8 ff             	cmp    eax,0xffffffff
c0004354:	75 11                	jne    c0004367 <f_read+0xc0>
c0004356:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000435a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004362:	e9 15 01 00 00       	jmp    c000447c <f_read+0x1d5>
c0004367:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000436a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004375:	89 c8                	mov    eax,ecx
c0004377:	e8 2d e0 ff ff       	call   c00023a9 <clst2sect>
c000437c:	85 c0                	test   eax,eax
c000437e:	74 c0                	je     c0004340 <f_read+0x99>
c0004380:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004384:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000438a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000438d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004391:	76 58                	jbe    c00043eb <f_read+0x144>
c0004393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004397:	89 fe                	mov    esi,edi
c0004399:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000439d:	c1 ee 09             	shr    esi,0x9
c00043a0:	01 f2                	add    edx,esi
c00043a2:	39 c2                	cmp    edx,eax
c00043a4:	76 06                	jbe    c00043ac <f_read+0x105>
c00043a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043aa:	89 c6                	mov    esi,eax
c00043ac:	56                   	push   esi
c00043ad:	55                   	push   ebp
c00043ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043b6:	50                   	push   eax
c00043b7:	e8 4c dd ff ff       	call   c0002108 <disk_read>
c00043bc:	83 c4 10             	add    esp,0x10
c00043bf:	85 c0                	test   eax,eax
c00043c1:	75 93                	jne    c0004356 <f_read+0xaf>
c00043c3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043c7:	74 1d                	je     c00043e6 <f_read+0x13f>
c00043c9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043cc:	29 e8                	sub    eax,ebp
c00043ce:	39 f0                	cmp    eax,esi
c00043d0:	73 14                	jae    c00043e6 <f_read+0x13f>
c00043d2:	c1 e0 09             	shl    eax,0x9
c00043d5:	b9 00 02 00 00       	mov    ecx,0x200
c00043da:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043de:	8d 53 28             	lea    edx,[ebx+0x28]
c00043e1:	e8 99 dd ff ff       	call   c000217f <mem_cpy>
c00043e6:	c1 e6 09             	shl    esi,0x9
c00043e9:	eb 75                	jmp    c0004460 <f_read+0x1b9>
c00043eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043ee:	39 e8                	cmp    eax,ebp
c00043f0:	74 48                	je     c000443a <f_read+0x193>
c00043f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f6:	8d 73 28             	lea    esi,[ebx+0x28]
c00043f9:	74 22                	je     c000441d <f_read+0x176>
c00043fb:	6a 01                	push   0x1
c00043fd:	50                   	push   eax
c00043fe:	56                   	push   esi
c00043ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004403:	50                   	push   eax
c0004404:	e8 15 dd ff ff       	call   c000211e <disk_write>
c0004409:	83 c4 10             	add    esp,0x10
c000440c:	85 c0                	test   eax,eax
c000440e:	0f 85 42 ff ff ff    	jne    c0004356 <f_read+0xaf>
c0004414:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004417:	83 e0 7f             	and    eax,0x7f
c000441a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000441d:	6a 01                	push   0x1
c000441f:	55                   	push   ebp
c0004420:	56                   	push   esi
c0004421:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004425:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004429:	50                   	push   eax
c000442a:	e8 d9 dc ff ff       	call   c0002108 <disk_read>
c000442f:	83 c4 10             	add    esp,0x10
c0004432:	85 c0                	test   eax,eax
c0004434:	0f 85 1c ff ff ff    	jne    c0004356 <f_read+0xaf>
c000443a:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000443d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004440:	be 00 02 00 00       	mov    esi,0x200
c0004445:	25 ff 01 00 00       	and    eax,0x1ff
c000444a:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000444e:	29 c6                	sub    esi,eax
c0004450:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004454:	39 f7                	cmp    edi,esi
c0004456:	0f 46 f7             	cmovbe esi,edi
c0004459:	89 f1                	mov    ecx,esi
c000445b:	e8 1f dd ff ff       	call   c000217f <mem_cpy>
c0004460:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004464:	29 f7                	sub    edi,esi
c0004466:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000446a:	01 30                	add    DWORD PTR [eax],esi
c000446c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000446f:	e9 88 fe ff ff       	jmp    c00042fc <f_read+0x55>
c0004474:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c000447c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004480:	83 c4 2c             	add    esp,0x2c
c0004483:	5b                   	pop    ebx
c0004484:	5e                   	pop    esi
c0004485:	5f                   	pop    edi
c0004486:	5d                   	pop    ebp
c0004487:	c3                   	ret    

c0004488 <f_write>:
c0004488:	55                   	push   ebp
c0004489:	57                   	push   edi
c000448a:	56                   	push   esi
c000448b:	53                   	push   ebx
c000448c:	83 ec 2c             	sub    esp,0x2c
c000448f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004493:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004497:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000449b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00044a1:	89 d8                	mov    eax,ebx
c00044a3:	e8 67 e1 ff ff       	call   c000260f <validate>
c00044a8:	85 c0                	test   eax,eax
c00044aa:	89 c7                	mov    edi,eax
c00044ac:	0f 85 13 02 00 00    	jne    c00046c5 <f_write+0x23d>
c00044b2:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c00044b6:	85 ff                	test   edi,edi
c00044b8:	0f 85 07 02 00 00    	jne    c00046c5 <f_write+0x23d>
c00044be:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044c2:	0f 84 f8 01 00 00    	je     c00046c0 <f_write+0x238>
c00044c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044cb:	89 c1                	mov    ecx,eax
c00044cd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00044d1:	0f 83 ed 00 00 00    	jae    c00045c4 <f_write+0x13c>
c00044d7:	f7 d0                	not    eax
c00044d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044dd:	e9 e2 00 00 00       	jmp    c00045c4 <f_write+0x13c>
c00044e2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e5:	a9 ff 01 00 00       	test   eax,0x1ff
c00044ea:	0f 85 9b 01 00 00    	jne    c000468b <f_write+0x203>
c00044f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044f4:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00044f8:	89 c2                	mov    edx,eax
c00044fa:	c1 ea 09             	shr    edx,0x9
c00044fd:	4d                   	dec    ebp
c00044fe:	21 d5                	and    ebp,edx
c0004500:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004504:	0f 84 c7 00 00 00    	je     c00045d1 <f_write+0x149>
c000450a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000450e:	0f 85 23 01 00 00    	jne    c0004637 <f_write+0x1af>
c0004514:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004518:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000451b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000451f:	89 c8                	mov    eax,ecx
c0004521:	e8 83 de ff ff       	call   c00023a9 <clst2sect>
c0004526:	85 c0                	test   eax,eax
c0004528:	0f 84 d3 00 00 00    	je     c0004601 <f_write+0x179>
c000452e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004532:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000453a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000453d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004541:	0f 86 1c 01 00 00    	jbe    c0004663 <f_write+0x1db>
c0004547:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000454b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004553:	c1 ee 09             	shr    esi,0x9
c0004556:	01 f2                	add    edx,esi
c0004558:	39 c2                	cmp    edx,eax
c000455a:	76 06                	jbe    c0004562 <f_write+0xda>
c000455c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004560:	89 c6                	mov    esi,eax
c0004562:	56                   	push   esi
c0004563:	55                   	push   ebp
c0004564:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004568:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000456c:	50                   	push   eax
c000456d:	e8 ac db ff ff       	call   c000211e <disk_write>
c0004572:	83 c4 10             	add    esp,0x10
c0004575:	85 c0                	test   eax,eax
c0004577:	0f 85 97 00 00 00    	jne    c0004614 <f_write+0x18c>
c000457d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004580:	29 ea                	sub    edx,ebp
c0004582:	39 f2                	cmp    edx,esi
c0004584:	73 1d                	jae    c00045a3 <f_write+0x11b>
c0004586:	c1 e2 09             	shl    edx,0x9
c0004589:	b9 00 02 00 00       	mov    ecx,0x200
c000458e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004592:	8d 43 28             	lea    eax,[ebx+0x28]
c0004595:	e8 e5 db ff ff       	call   c000217f <mem_cpy>
c000459a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000459d:	83 e0 7f             	and    eax,0x7f
c00045a0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a3:	c1 e6 09             	shl    esi,0x9
c00045a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00045aa:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00045ae:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00045b2:	01 30                	add    DWORD PTR [eax],esi
c00045b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00045b7:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c00045ba:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00045bd:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c00045c1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00045c4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045c9:	0f 85 13 ff ff ff    	jne    c00044e2 <f_write+0x5a>
c00045cf:	eb 1d                	jmp    c00045ee <f_write+0x166>
c00045d1:	85 c0                	test   eax,eax
c00045d3:	75 0b                	jne    c00045e0 <f_write+0x158>
c00045d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045d8:	31 d2                	xor    edx,edx
c00045da:	85 c0                	test   eax,eax
c00045dc:	75 1e                	jne    c00045fc <f_write+0x174>
c00045de:	eb 03                	jmp    c00045e3 <f_write+0x15b>
c00045e0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 78 f1 ff ff       	call   c0003762 <create_chain>
c00045ea:	85 c0                	test   eax,eax
c00045ec:	75 0e                	jne    c00045fc <f_write+0x174>
c00045ee:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045f1:	83 c8 40             	or     eax,0x40
c00045f4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045f7:	e9 c9 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c00045fc:	83 f8 01             	cmp    eax,0x1
c00045ff:	75 0e                	jne    c000460f <f_write+0x187>
c0004601:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004605:	bf 02 00 00 00       	mov    edi,0x2
c000460a:	e9 b6 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c000460f:	83 f8 ff             	cmp    eax,0xffffffff
c0004612:	75 0e                	jne    c0004622 <f_write+0x19a>
c0004614:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004618:	bf 01 00 00 00       	mov    edi,0x1
c000461d:	e9 a3 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c0004622:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004626:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004629:	0f 85 db fe ff ff    	jne    c000450a <f_write+0x82>
c000462f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004632:	e9 d3 fe ff ff       	jmp    c000450a <f_write+0x82>
c0004637:	6a 01                	push   0x1
c0004639:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000463c:	8d 43 28             	lea    eax,[ebx+0x28]
c000463f:	50                   	push   eax
c0004640:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004644:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004648:	50                   	push   eax
c0004649:	e8 d0 da ff ff       	call   c000211e <disk_write>
c000464e:	83 c4 10             	add    esp,0x10
c0004651:	85 c0                	test   eax,eax
c0004653:	75 bf                	jne    c0004614 <f_write+0x18c>
c0004655:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004658:	83 e0 7f             	and    eax,0x7f
c000465b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000465e:	e9 b1 fe ff ff       	jmp    c0004514 <f_write+0x8c>
c0004663:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004666:	74 20                	je     c0004688 <f_write+0x200>
c0004668:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000466e:	76 18                	jbe    c0004688 <f_write+0x200>
c0004670:	6a 01                	push   0x1
c0004672:	55                   	push   ebp
c0004673:	8d 43 28             	lea    eax,[ebx+0x28]
c0004676:	50                   	push   eax
c0004677:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000467b:	50                   	push   eax
c000467c:	e8 87 da ff ff       	call   c0002108 <disk_read>
c0004681:	83 c4 10             	add    esp,0x10
c0004684:	85 c0                	test   eax,eax
c0004686:	75 8c                	jne    c0004614 <f_write+0x18c>
c0004688:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000468b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000468e:	be 00 02 00 00       	mov    esi,0x200
c0004693:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004697:	25 ff 01 00 00       	and    eax,0x1ff
c000469c:	29 c6                	sub    esi,eax
c000469e:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c00046a2:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00046a6:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c00046ab:	89 f1                	mov    ecx,esi
c00046ad:	e8 cd da ff ff       	call   c000217f <mem_cpy>
c00046b2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00046b5:	83 c8 80             	or     eax,0xffffff80
c00046b8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00046bb:	e9 e6 fe ff ff       	jmp    c00045a6 <f_write+0x11e>
c00046c0:	bf 07 00 00 00       	mov    edi,0x7
c00046c5:	83 c4 2c             	add    esp,0x2c
c00046c8:	89 f8                	mov    eax,edi
c00046ca:	5b                   	pop    ebx
c00046cb:	5e                   	pop    esi
c00046cc:	5f                   	pop    edi
c00046cd:	5d                   	pop    ebp
c00046ce:	c3                   	ret    

c00046cf <f_sync>:
c00046cf:	56                   	push   esi
c00046d0:	53                   	push   ebx
c00046d1:	83 ec 14             	sub    esp,0x14
c00046d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046d8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046dc:	89 d8                	mov    eax,ebx
c00046de:	e8 2c df ff ff       	call   c000260f <validate>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	0f 85 a3 00 00 00    	jne    c000478e <f_sync+0xbf>
c00046eb:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046ee:	f6 c2 40             	test   dl,0x40
c00046f1:	0f 84 97 00 00 00    	je     c000478e <f_sync+0xbf>
c00046f7:	80 e2 80             	and    dl,0x80
c00046fa:	74 2e                	je     c000472a <f_sync+0x5b>
c00046fc:	6a 01                	push   0x1
c00046fe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004701:	8d 43 28             	lea    eax,[ebx+0x28]
c0004704:	50                   	push   eax
c0004705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004709:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000470d:	50                   	push   eax
c000470e:	e8 0b da ff ff       	call   c000211e <disk_write>
c0004713:	83 c4 10             	add    esp,0x10
c0004716:	89 c2                	mov    edx,eax
c0004718:	b8 01 00 00 00       	mov    eax,0x1
c000471d:	85 d2                	test   edx,edx
c000471f:	75 6d                	jne    c000478e <f_sync+0xbf>
c0004721:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004724:	83 e0 7f             	and    eax,0x7f
c0004727:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000472a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000472d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004731:	e8 82 df ff ff       	call   c00026b8 <move_window>
c0004736:	85 c0                	test   eax,eax
c0004738:	75 54                	jne    c000478e <f_sync+0xbf>
c000473a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000473d:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004740:	89 f2                	mov    edx,esi
c0004742:	83 c8 20             	or     eax,0x20
c0004745:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004748:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000474b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474d:	e8 1b ee ff ff       	call   c000356d <st_clust.isra.1>
c0004752:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004755:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004758:	e8 1f da ff ff       	call   c000217c <st_dword>
c000475d:	8d 46 16             	lea    eax,[esi+0x16]
c0004760:	ba 00 00 21 50       	mov    edx,0x50210000
c0004765:	e8 12 da ff ff       	call   c000217c <st_dword>
c000476a:	8d 46 12             	lea    eax,[esi+0x12]
c000476d:	31 d2                	xor    edx,edx
c000476f:	e8 04 da ff ff       	call   c0002178 <st_word>
c0004774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004778:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000477c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004780:	e8 68 e9 ff ff       	call   c00030ed <sync_fs>
c0004785:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004788:	83 e2 bf             	and    edx,0xffffffbf
c000478b:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478e:	83 c4 14             	add    esp,0x14
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	c3                   	ret    

c0004794 <f_close>:
c0004794:	53                   	push   ebx
c0004795:	83 ec 24             	sub    esp,0x24
c0004798:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000479c:	53                   	push   ebx
c000479d:	e8 2d ff ff ff       	call   c00046cf <f_sync>
c00047a2:	83 c4 10             	add    esp,0x10
c00047a5:	85 c0                	test   eax,eax
c00047a7:	75 15                	jne    c00047be <f_close+0x2a>
c00047a9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047ad:	89 d8                	mov    eax,ebx
c00047af:	e8 5b de ff ff       	call   c000260f <validate>
c00047b4:	85 c0                	test   eax,eax
c00047b6:	75 06                	jne    c00047be <f_close+0x2a>
c00047b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047be:	83 c4 18             	add    esp,0x18
c00047c1:	5b                   	pop    ebx
c00047c2:	c3                   	ret    

c00047c3 <f_lseek>:
c00047c3:	55                   	push   ebp
c00047c4:	57                   	push   edi
c00047c5:	56                   	push   esi
c00047c6:	53                   	push   ebx
c00047c7:	83 ec 2c             	sub    esp,0x2c
c00047ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	e8 32 de ff ff       	call   c000260f <validate>
c00047dd:	85 c0                	test   eax,eax
c00047df:	89 c5                	mov    ebp,eax
c00047e1:	0f 85 82 01 00 00    	jne    c0004969 <f_lseek+0x1a6>
c00047e7:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047eb:	85 ed                	test   ebp,ebp
c00047ed:	0f 85 76 01 00 00    	jne    c0004969 <f_lseek+0x1a6>
c00047f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047f6:	39 f0                	cmp    eax,esi
c00047f8:	73 07                	jae    c0004801 <f_lseek+0x3e>
c00047fa:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047fe:	0f 44 f0             	cmove  esi,eax
c0004801:	85 f6                	test   esi,esi
c0004803:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004806:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000480d:	75 07                	jne    c0004816 <f_lseek+0x53>
c000480f:	31 f6                	xor    esi,esi
c0004811:	e9 e2 00 00 00       	jmp    c00048f8 <f_lseek+0x135>
c0004816:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000481a:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000481e:	c1 e7 09             	shl    edi,0x9
c0004821:	85 c9                	test   ecx,ecx
c0004823:	74 28                	je     c000484d <f_lseek+0x8a>
c0004825:	31 d2                	xor    edx,edx
c0004827:	49                   	dec    ecx
c0004828:	8d 46 ff             	lea    eax,[esi-0x1]
c000482b:	f7 f7                	div    edi
c000482d:	31 d2                	xor    edx,edx
c000482f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004833:	89 c8                	mov    eax,ecx
c0004835:	f7 f7                	div    edi
c0004837:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000483b:	72 10                	jb     c000484d <f_lseek+0x8a>
c000483d:	89 f8                	mov    eax,edi
c000483f:	f7 d8                	neg    eax
c0004841:	21 c1                	and    ecx,eax
c0004843:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004846:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004849:	29 ce                	sub    esi,ecx
c000484b:	eb 3c                	jmp    c0004889 <f_lseek+0xc6>
c000484d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004850:	85 c0                	test   eax,eax
c0004852:	75 32                	jne    c0004886 <f_lseek+0xc3>
c0004854:	31 d2                	xor    edx,edx
c0004856:	89 d8                	mov    eax,ebx
c0004858:	e8 05 ef ff ff       	call   c0003762 <create_chain>
c000485d:	83 f8 01             	cmp    eax,0x1
c0004860:	75 0e                	jne    c0004870 <f_lseek+0xad>
c0004862:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004866:	bd 02 00 00 00       	mov    ebp,0x2
c000486b:	e9 f9 00 00 00       	jmp    c0004969 <f_lseek+0x1a6>
c0004870:	83 f8 ff             	cmp    eax,0xffffffff
c0004873:	75 0e                	jne    c0004883 <f_lseek+0xc0>
c0004875:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004879:	bd 01 00 00 00       	mov    ebp,0x1
c000487e:	e9 e6 00 00 00       	jmp    c0004969 <f_lseek+0x1a6>
c0004883:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004886:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004889:	85 c0                	test   eax,eax
c000488b:	74 82                	je     c000480f <f_lseek+0x4c>
c000488d:	39 fe                	cmp    esi,edi
c000488f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004892:	76 3d                	jbe    c00048d1 <f_lseek+0x10e>
c0004894:	01 fa                	add    edx,edi
c0004896:	29 fe                	sub    esi,edi
c0004898:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000489c:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000489f:	89 c2                	mov    edx,eax
c00048a1:	74 0d                	je     c00048b0 <f_lseek+0xed>
c00048a3:	89 d8                	mov    eax,ebx
c00048a5:	e8 b8 ee ff ff       	call   c0003762 <create_chain>
c00048aa:	85 c0                	test   eax,eax
c00048ac:	75 09                	jne    c00048b7 <f_lseek+0xf4>
c00048ae:	eb 1f                	jmp    c00048cf <f_lseek+0x10c>
c00048b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00048b2:	e8 de ec ff ff       	call   c0003595 <get_fat.isra.2>
c00048b7:	83 f8 ff             	cmp    eax,0xffffffff
c00048ba:	74 b9                	je     c0004875 <f_lseek+0xb2>
c00048bc:	83 f8 01             	cmp    eax,0x1
c00048bf:	76 a1                	jbe    c0004862 <f_lseek+0x9f>
c00048c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048c5:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048c8:	76 98                	jbe    c0004862 <f_lseek+0x9f>
c00048ca:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048cd:	eb be                	jmp    c000488d <f_lseek+0xca>
c00048cf:	31 f6                	xor    esi,esi
c00048d1:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048d4:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048da:	0f 84 2f ff ff ff    	je     c000480f <f_lseek+0x4c>
c00048e0:	89 c2                	mov    edx,eax
c00048e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048e6:	e8 be da ff ff       	call   c00023a9 <clst2sect>
c00048eb:	85 c0                	test   eax,eax
c00048ed:	0f 84 6f ff ff ff    	je     c0004862 <f_lseek+0x9f>
c00048f3:	c1 ee 09             	shr    esi,0x9
c00048f6:	01 c6                	add    esi,eax
c00048f8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048fb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048fe:	76 0c                	jbe    c000490c <f_lseek+0x149>
c0004900:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004903:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004906:	83 ca 40             	or     edx,0x40
c0004909:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000490c:	a9 ff 01 00 00       	test   eax,0x1ff
c0004911:	74 56                	je     c0004969 <f_lseek+0x1a6>
c0004913:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004916:	39 f0                	cmp    eax,esi
c0004918:	74 4f                	je     c0004969 <f_lseek+0x1a6>
c000491a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000491e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004921:	74 26                	je     c0004949 <f_lseek+0x186>
c0004923:	6a 01                	push   0x1
c0004925:	50                   	push   eax
c0004926:	57                   	push   edi
c0004927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000492b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000492f:	50                   	push   eax
c0004930:	e8 e9 d7 ff ff       	call   c000211e <disk_write>
c0004935:	83 c4 10             	add    esp,0x10
c0004938:	85 c0                	test   eax,eax
c000493a:	0f 85 35 ff ff ff    	jne    c0004875 <f_lseek+0xb2>
c0004940:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004943:	83 e0 7f             	and    eax,0x7f
c0004946:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004949:	6a 01                	push   0x1
c000494b:	56                   	push   esi
c000494c:	57                   	push   edi
c000494d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004951:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004955:	50                   	push   eax
c0004956:	e8 ad d7 ff ff       	call   c0002108 <disk_read>
c000495b:	83 c4 10             	add    esp,0x10
c000495e:	85 c0                	test   eax,eax
c0004960:	0f 85 0f ff ff ff    	jne    c0004875 <f_lseek+0xb2>
c0004966:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004969:	83 c4 2c             	add    esp,0x2c
c000496c:	89 e8                	mov    eax,ebp
c000496e:	5b                   	pop    ebx
c000496f:	5e                   	pop    esi
c0004970:	5f                   	pop    edi
c0004971:	5d                   	pop    ebp
c0004972:	c3                   	ret    

c0004973 <f_opendir>:
c0004973:	56                   	push   esi
c0004974:	b8 09 00 00 00       	mov    eax,0x9
c0004979:	53                   	push   ebx
c000497a:	83 ec 24             	sub    esp,0x24
c000497d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004981:	85 db                	test   ebx,ebx
c0004983:	0f 84 af 00 00 00    	je     c0004a38 <f_opendir+0xc5>
c0004989:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000498d:	31 c9                	xor    ecx,ecx
c000498f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004993:	e8 7d de ff ff       	call   c0002815 <mount_volume>
c0004998:	85 c0                	test   eax,eax
c000499a:	0f 85 92 00 00 00    	jne    c0004a32 <f_opendir+0xbf>
c00049a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a4:	83 ec 0c             	sub    esp,0xc
c00049a7:	89 03                	mov    DWORD PTR [ebx],eax
c00049a9:	68 00 02 00 00       	push   0x200
c00049ae:	e8 e5 15 00 00       	call   c0005f98 <ff_memalloc>
c00049b3:	83 c4 10             	add    esp,0x10
c00049b6:	89 c6                	mov    esi,eax
c00049b8:	b8 11 00 00 00       	mov    eax,0x11
c00049bd:	85 f6                	test   esi,esi
c00049bf:	74 77                	je     c0004a38 <f_opendir+0xc5>
c00049c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049c9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049cc:	89 d8                	mov    eax,ebx
c00049ce:	e8 8a f3 ff ff       	call   c0003d5d <follow_path>
c00049d3:	85 c0                	test   eax,eax
c00049d5:	75 37                	jne    c0004a0e <f_opendir+0x9b>
c00049d7:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049db:	75 1c                	jne    c00049f9 <f_opendir+0x86>
c00049dd:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049e1:	b8 05 00 00 00       	mov    eax,0x5
c00049e6:	74 26                	je     c0004a0e <f_opendir+0x9b>
c00049e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049ec:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049ef:	8a 00                	mov    al,BYTE PTR [eax]
c00049f1:	e8 4e eb ff ff       	call   c0003544 <ld_clust.isra.0>
c00049f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004a03:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004a07:	89 d8                	mov    eax,ebx
c0004a09:	e8 8c ec ff ff       	call   c000369a <dir_sdi>
c0004a0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a12:	83 ec 0c             	sub    esp,0xc
c0004a15:	56                   	push   esi
c0004a16:	e8 95 15 00 00       	call   c0005fb0 <ff_memfree>
c0004a1b:	83 c4 10             	add    esp,0x10
c0004a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a22:	83 f8 04             	cmp    eax,0x4
c0004a25:	74 06                	je     c0004a2d <f_opendir+0xba>
c0004a27:	85 c0                	test   eax,eax
c0004a29:	74 0d                	je     c0004a38 <f_opendir+0xc5>
c0004a2b:	eb 05                	jmp    c0004a32 <f_opendir+0xbf>
c0004a2d:	b8 05 00 00 00       	mov    eax,0x5
c0004a32:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a38:	83 c4 24             	add    esp,0x24
c0004a3b:	5b                   	pop    ebx
c0004a3c:	5e                   	pop    esi
c0004a3d:	c3                   	ret    

c0004a3e <f_closedir>:
c0004a3e:	53                   	push   ebx
c0004a3f:	83 ec 18             	sub    esp,0x18
c0004a42:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a46:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a4a:	89 d8                	mov    eax,ebx
c0004a4c:	e8 be db ff ff       	call   c000260f <validate>
c0004a51:	85 c0                	test   eax,eax
c0004a53:	75 06                	jne    c0004a5b <f_closedir+0x1d>
c0004a55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a5b:	83 c4 18             	add    esp,0x18
c0004a5e:	5b                   	pop    ebx
c0004a5f:	c3                   	ret    

c0004a60 <f_readdir>:
c0004a60:	57                   	push   edi
c0004a61:	56                   	push   esi
c0004a62:	53                   	push   ebx
c0004a63:	83 ec 20             	sub    esp,0x20
c0004a66:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a6a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a6e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a72:	89 d8                	mov    eax,ebx
c0004a74:	e8 96 db ff ff       	call   c000260f <validate>
c0004a79:	85 c0                	test   eax,eax
c0004a7b:	75 6e                	jne    c0004aeb <f_readdir+0x8b>
c0004a7d:	85 ff                	test   edi,edi
c0004a7f:	75 0b                	jne    c0004a8c <f_readdir+0x2c>
c0004a81:	31 d2                	xor    edx,edx
c0004a83:	89 d8                	mov    eax,ebx
c0004a85:	e8 10 ec ff ff       	call   c000369a <dir_sdi>
c0004a8a:	eb 5f                	jmp    c0004aeb <f_readdir+0x8b>
c0004a8c:	83 ec 0c             	sub    esp,0xc
c0004a8f:	68 00 02 00 00       	push   0x200
c0004a94:	e8 ff 14 00 00       	call   c0005f98 <ff_memalloc>
c0004a99:	83 c4 10             	add    esp,0x10
c0004a9c:	89 c6                	mov    esi,eax
c0004a9e:	b8 11 00 00 00       	mov    eax,0x11
c0004aa3:	85 f6                	test   esi,esi
c0004aa5:	74 44                	je     c0004aeb <f_readdir+0x8b>
c0004aa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aab:	31 d2                	xor    edx,edx
c0004aad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ab0:	89 d8                	mov    eax,ebx
c0004ab2:	e8 dd ef ff ff       	call   c0003a94 <dir_read>
c0004ab7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004abc:	75 19                	jne    c0004ad7 <f_readdir+0x77>
c0004abe:	89 fa                	mov    edx,edi
c0004ac0:	89 d8                	mov    eax,ebx
c0004ac2:	e8 7c e8 ff ff       	call   c0003343 <get_fileinfo>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	89 d8                	mov    eax,ebx
c0004acb:	e8 5a ee ff ff       	call   c000392a <dir_next>
c0004ad0:	83 f8 04             	cmp    eax,0x4
c0004ad3:	75 02                	jne    c0004ad7 <f_readdir+0x77>
c0004ad5:	31 c0                	xor    eax,eax
c0004ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004adb:	83 ec 0c             	sub    esp,0xc
c0004ade:	56                   	push   esi
c0004adf:	e8 cc 14 00 00       	call   c0005fb0 <ff_memfree>
c0004ae4:	83 c4 10             	add    esp,0x10
c0004ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aeb:	83 c4 20             	add    esp,0x20
c0004aee:	5b                   	pop    ebx
c0004aef:	5e                   	pop    esi
c0004af0:	5f                   	pop    edi
c0004af1:	c3                   	ret    

c0004af2 <f_stat>:
c0004af2:	57                   	push   edi
c0004af3:	31 c9                	xor    ecx,ecx
c0004af5:	56                   	push   esi
c0004af6:	53                   	push   ebx
c0004af7:	83 ec 30             	sub    esp,0x30
c0004afa:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afe:	89 e2                	mov    edx,esp
c0004b00:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004b04:	e8 0c dd ff ff       	call   c0002815 <mount_volume>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	89 c3                	mov    ebx,eax
c0004b0d:	75 59                	jne    c0004b68 <f_stat+0x76>
c0004b0f:	83 ec 0c             	sub    esp,0xc
c0004b12:	bb 11 00 00 00       	mov    ebx,0x11
c0004b17:	68 00 02 00 00       	push   0x200
c0004b1c:	e8 77 14 00 00       	call   c0005f98 <ff_memalloc>
c0004b21:	83 c4 10             	add    esp,0x10
c0004b24:	85 c0                	test   eax,eax
c0004b26:	89 c6                	mov    esi,eax
c0004b28:	74 3e                	je     c0004b68 <f_stat+0x76>
c0004b2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b2d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b31:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b34:	89 e0                	mov    eax,esp
c0004b36:	e8 22 f2 ff ff       	call   c0003d5d <follow_path>
c0004b3b:	85 c0                	test   eax,eax
c0004b3d:	89 c3                	mov    ebx,eax
c0004b3f:	75 1b                	jne    c0004b5c <f_stat+0x6a>
c0004b41:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b46:	75 0f                	jne    c0004b57 <f_stat+0x65>
c0004b48:	85 ff                	test   edi,edi
c0004b4a:	74 10                	je     c0004b5c <f_stat+0x6a>
c0004b4c:	89 fa                	mov    edx,edi
c0004b4e:	89 e0                	mov    eax,esp
c0004b50:	e8 ee e7 ff ff       	call   c0003343 <get_fileinfo>
c0004b55:	eb 05                	jmp    c0004b5c <f_stat+0x6a>
c0004b57:	bb 06 00 00 00       	mov    ebx,0x6
c0004b5c:	83 ec 0c             	sub    esp,0xc
c0004b5f:	56                   	push   esi
c0004b60:	e8 4b 14 00 00       	call   c0005fb0 <ff_memfree>
c0004b65:	83 c4 10             	add    esp,0x10
c0004b68:	83 c4 30             	add    esp,0x30
c0004b6b:	89 d8                	mov    eax,ebx
c0004b6d:	5b                   	pop    ebx
c0004b6e:	5e                   	pop    esi
c0004b6f:	5f                   	pop    edi
c0004b70:	c3                   	ret    

c0004b71 <f_getfree>:
c0004b71:	55                   	push   ebp
c0004b72:	31 c9                	xor    ecx,ecx
c0004b74:	57                   	push   edi
c0004b75:	56                   	push   esi
c0004b76:	53                   	push   ebx
c0004b77:	83 ec 2c             	sub    esp,0x2c
c0004b7a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b7e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b82:	e8 8e dc ff ff       	call   c0002815 <mount_volume>
c0004b87:	85 c0                	test   eax,eax
c0004b89:	89 c6                	mov    esi,eax
c0004b8b:	0f 85 df 00 00 00    	jne    c0004c70 <f_getfree+0xff>
c0004b91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004b95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b99:	89 18                	mov    DWORD PTR [eax],ebx
c0004b9b:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004b9e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004ba1:	8d 57 fe             	lea    edx,[edi-0x2]
c0004ba4:	39 d0                	cmp    eax,edx
c0004ba6:	77 0b                	ja     c0004bb3 <f_getfree+0x42>
c0004ba8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004bac:	89 01                	mov    DWORD PTR [ecx],eax
c0004bae:	e9 bd 00 00 00       	jmp    c0004c70 <f_getfree+0xff>
c0004bb3:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004bb6:	75 29                	jne    c0004be1 <f_getfree+0x70>
c0004bb8:	bf 02 00 00 00       	mov    edi,0x2
c0004bbd:	31 ed                	xor    ebp,ebp
c0004bbf:	89 fa                	mov    edx,edi
c0004bc1:	89 d8                	mov    eax,ebx
c0004bc3:	e8 cd e9 ff ff       	call   c0003595 <get_fat.isra.2>
c0004bc8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bcb:	74 7d                	je     c0004c4a <f_getfree+0xd9>
c0004bcd:	83 f8 01             	cmp    eax,0x1
c0004bd0:	74 7f                	je     c0004c51 <f_getfree+0xe0>
c0004bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd6:	83 d5 00             	adc    ebp,0x0
c0004bd9:	47                   	inc    edi
c0004bda:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004bdd:	77 e0                	ja     c0004bbf <f_getfree+0x4e>
c0004bdf:	eb 79                	jmp    c0004c5a <f_getfree+0xe9>
c0004be1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 db                	xor    ebx,ebx
c0004be8:	85 db                	test   ebx,ebx
c0004bea:	75 18                	jne    c0004c04 <f_getfree+0x93>
c0004bec:	8d 42 01             	lea    eax,[edx+0x1]
c0004bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bf7:	e8 bc da ff ff       	call   c00026b8 <move_window>
c0004bfc:	85 c0                	test   eax,eax
c0004bfe:	75 58                	jne    c0004c58 <f_getfree+0xe7>
c0004c00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004c0c:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004c0f:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004c13:	75 13                	jne    c0004c28 <f_getfree+0xb7>
c0004c15:	e8 39 d5 ff ff       	call   c0002153 <ld_word>
c0004c1a:	0f b7 c0             	movzx  eax,ax
c0004c1d:	83 f8 01             	cmp    eax,0x1
c0004c20:	83 d5 00             	adc    ebp,0x0
c0004c23:	83 c3 02             	add    ebx,0x2
c0004c26:	eb 13                	jmp    c0004c3b <f_getfree+0xca>
c0004c28:	e8 33 d5 ff ff       	call   c0002160 <ld_dword>
c0004c2d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c32:	83 f8 01             	cmp    eax,0x1
c0004c35:	83 d5 00             	adc    ebp,0x0
c0004c38:	83 c3 04             	add    ebx,0x4
c0004c3b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004c41:	4f                   	dec    edi
c0004c42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c46:	75 a0                	jne    c0004be8 <f_getfree+0x77>
c0004c48:	eb 10                	jmp    c0004c5a <f_getfree+0xe9>
c0004c4a:	be 01 00 00 00       	mov    esi,0x1
c0004c4f:	eb 09                	jmp    c0004c5a <f_getfree+0xe9>
c0004c51:	be 02 00 00 00       	mov    esi,0x2
c0004c56:	eb 02                	jmp    c0004c5a <f_getfree+0xe9>
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c5e:	89 28                	mov    DWORD PTR [eax],ebp
c0004c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c64:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004c67:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c6a:	83 ca 01             	or     edx,0x1
c0004c6d:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c70:	83 c4 2c             	add    esp,0x2c
c0004c73:	89 f0                	mov    eax,esi
c0004c75:	5b                   	pop    ebx
c0004c76:	5e                   	pop    esi
c0004c77:	5f                   	pop    edi
c0004c78:	5d                   	pop    ebp
c0004c79:	c3                   	ret    

c0004c7a <f_truncate>:
c0004c7a:	56                   	push   esi
c0004c7b:	53                   	push   ebx
c0004c7c:	83 ec 14             	sub    esp,0x14
c0004c7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c87:	89 d8                	mov    eax,ebx
c0004c89:	e8 81 d9 ff ff       	call   c000260f <validate>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	89 c6                	mov    esi,eax
c0004c92:	0f 85 c4 00 00 00    	jne    c0004d5c <f_truncate+0xe2>
c0004c98:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c9c:	85 f6                	test   esi,esi
c0004c9e:	0f 85 b8 00 00 00    	jne    c0004d5c <f_truncate+0xe2>
c0004ca4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004ca8:	0f 84 a9 00 00 00    	je     c0004d57 <f_truncate+0xdd>
c0004cae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004cb1:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004cb4:	0f 83 a2 00 00 00    	jae    c0004d5c <f_truncate+0xe2>
c0004cba:	85 c0                	test   eax,eax
c0004cbc:	75 15                	jne    c0004cd3 <f_truncate+0x59>
c0004cbe:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004cc1:	31 c9                	xor    ecx,ecx
c0004cc3:	89 d8                	mov    eax,ebx
c0004cc5:	e8 d2 eb ff ff       	call   c000389c <remove_chain>
c0004cca:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cd1:	eb 35                	jmp    c0004d08 <f_truncate+0x8e>
c0004cd3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cd8:	e8 b8 e8 ff ff       	call   c0003595 <get_fat.isra.2>
c0004cdd:	89 c2                	mov    edx,eax
c0004cdf:	b8 01 00 00 00       	mov    eax,0x1
c0004ce4:	83 fa ff             	cmp    edx,0xffffffff
c0004ce7:	74 1f                	je     c0004d08 <f_truncate+0x8e>
c0004ce9:	83 fa 01             	cmp    edx,0x1
c0004cec:	b8 02 00 00 00       	mov    eax,0x2
c0004cf1:	74 15                	je     c0004d08 <f_truncate+0x8e>
c0004cf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cf7:	31 c0                	xor    eax,eax
c0004cf9:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cfc:	76 0a                	jbe    c0004d08 <f_truncate+0x8e>
c0004cfe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004d01:	89 d8                	mov    eax,ebx
c0004d03:	e8 94 eb ff ff       	call   c000389c <remove_chain>
c0004d08:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004d0b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004d0e:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004d11:	83 ca 40             	or     edx,0x40
c0004d14:	85 c0                	test   eax,eax
c0004d16:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004d19:	75 35                	jne    c0004d50 <f_truncate+0xd6>
c0004d1b:	80 e2 80             	and    dl,0x80
c0004d1e:	74 3c                	je     c0004d5c <f_truncate+0xe2>
c0004d20:	6a 01                	push   0x1
c0004d22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d25:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d28:	50                   	push   eax
c0004d29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d2d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d31:	50                   	push   eax
c0004d32:	e8 e7 d3 ff ff       	call   c000211e <disk_write>
c0004d37:	83 c4 10             	add    esp,0x10
c0004d3a:	85 c0                	test   eax,eax
c0004d3c:	75 0d                	jne    c0004d4b <f_truncate+0xd1>
c0004d3e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d41:	31 f6                	xor    esi,esi
c0004d43:	83 e0 7f             	and    eax,0x7f
c0004d46:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d49:	eb 11                	jmp    c0004d5c <f_truncate+0xe2>
c0004d4b:	b8 01 00 00 00       	mov    eax,0x1
c0004d50:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d53:	89 c6                	mov    esi,eax
c0004d55:	eb 05                	jmp    c0004d5c <f_truncate+0xe2>
c0004d57:	be 07 00 00 00       	mov    esi,0x7
c0004d5c:	83 c4 14             	add    esp,0x14
c0004d5f:	89 f0                	mov    eax,esi
c0004d61:	5b                   	pop    ebx
c0004d62:	5e                   	pop    esi
c0004d63:	c3                   	ret    

c0004d64 <f_unlink>:
c0004d64:	55                   	push   ebp
c0004d65:	b9 02 00 00 00       	mov    ecx,0x2
c0004d6a:	57                   	push   edi
c0004d6b:	56                   	push   esi
c0004d6c:	53                   	push   ebx
c0004d6d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d73:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d77:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d7e:	e8 92 da ff ff       	call   c0002815 <mount_volume>
c0004d83:	85 c0                	test   eax,eax
c0004d85:	0f 85 ee 00 00 00    	jne    c0004e79 <f_unlink+0x115>
c0004d8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d96:	68 00 02 00 00       	push   0x200
c0004d9b:	e8 f8 11 00 00       	call   c0005f98 <ff_memalloc>
c0004da0:	83 c4 10             	add    esp,0x10
c0004da3:	89 c3                	mov    ebx,eax
c0004da5:	b8 11 00 00 00       	mov    eax,0x11
c0004daa:	85 db                	test   ebx,ebx
c0004dac:	0f 84 c7 00 00 00    	je     c0004e79 <f_unlink+0x115>
c0004db2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004db6:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004dbd:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004dc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dc4:	e8 94 ef ff ff       	call   c0003d5d <follow_path>
c0004dc9:	85 c0                	test   eax,eax
c0004dcb:	0f 85 94 00 00 00    	jne    c0004e65 <f_unlink+0x101>
c0004dd1:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dd6:	b8 06 00 00 00       	mov    eax,0x6
c0004ddb:	0f 85 84 00 00 00    	jne    c0004e65 <f_unlink+0x101>
c0004de1:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004de6:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dec:	74 07                	je     c0004df5 <f_unlink+0x91>
c0004dee:	b8 07 00 00 00       	mov    eax,0x7
c0004df3:	eb 70                	jmp    c0004e65 <f_unlink+0x101>
c0004df5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004dfd:	8a 07                	mov    al,BYTE PTR [edi]
c0004dff:	e8 40 e7 ff ff       	call   c0003544 <ld_clust.isra.0>
c0004e04:	83 e5 10             	and    ebp,0x10
c0004e07:	89 c6                	mov    esi,eax
c0004e09:	75 20                	jne    c0004e2b <f_unlink+0xc7>
c0004e0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e0f:	e8 a8 ed ff ff       	call   c0003bbc <dir_remove>
c0004e14:	85 c0                	test   eax,eax
c0004e16:	75 40                	jne    c0004e58 <f_unlink+0xf4>
c0004e18:	85 f6                	test   esi,esi
c0004e1a:	74 3c                	je     c0004e58 <f_unlink+0xf4>
c0004e1c:	31 c9                	xor    ecx,ecx
c0004e1e:	89 f2                	mov    edx,esi
c0004e20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e24:	e8 73 ea ff ff       	call   c000389c <remove_chain>
c0004e29:	eb 2d                	jmp    c0004e58 <f_unlink+0xf4>
c0004e2b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e2f:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e33:	31 d2                	xor    edx,edx
c0004e35:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e39:	e8 5c e8 ff ff       	call   c000369a <dir_sdi>
c0004e3e:	85 c0                	test   eax,eax
c0004e40:	75 23                	jne    c0004e65 <f_unlink+0x101>
c0004e42:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e46:	31 d2                	xor    edx,edx
c0004e48:	e8 47 ec ff ff       	call   c0003a94 <dir_read>
c0004e4d:	85 c0                	test   eax,eax
c0004e4f:	74 9d                	je     c0004dee <f_unlink+0x8a>
c0004e51:	83 f8 04             	cmp    eax,0x4
c0004e54:	75 0f                	jne    c0004e65 <f_unlink+0x101>
c0004e56:	eb b3                	jmp    c0004e0b <f_unlink+0xa7>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 09                	jne    c0004e65 <f_unlink+0x101>
c0004e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e60:	e8 88 e2 ff ff       	call   c00030ed <sync_fs>
c0004e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e69:	83 ec 0c             	sub    esp,0xc
c0004e6c:	53                   	push   ebx
c0004e6d:	e8 3e 11 00 00       	call   c0005fb0 <ff_memfree>
c0004e72:	83 c4 10             	add    esp,0x10
c0004e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e79:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e7f:	5b                   	pop    ebx
c0004e80:	5e                   	pop    esi
c0004e81:	5f                   	pop    edi
c0004e82:	5d                   	pop    ebp
c0004e83:	c3                   	ret    

c0004e84 <f_mkdir>:
c0004e84:	57                   	push   edi
c0004e85:	b9 02 00 00 00       	mov    ecx,0x2
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 50             	sub    esp,0x50
c0004e8f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e93:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e97:	e8 79 d9 ff ff       	call   c0002815 <mount_volume>
c0004e9c:	85 c0                	test   eax,eax
c0004e9e:	89 c3                	mov    ebx,eax
c0004ea0:	0f 85 70 01 00 00    	jne    c0005016 <f_mkdir+0x192>
c0004ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eaa:	83 ec 0c             	sub    esp,0xc
c0004ead:	bb 11 00 00 00       	mov    ebx,0x11
c0004eb2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004eb6:	68 00 02 00 00       	push   0x200
c0004ebb:	e8 d8 10 00 00       	call   c0005f98 <ff_memalloc>
c0004ec0:	83 c4 10             	add    esp,0x10
c0004ec3:	85 c0                	test   eax,eax
c0004ec5:	89 c7                	mov    edi,eax
c0004ec7:	0f 84 49 01 00 00    	je     c0005016 <f_mkdir+0x192>
c0004ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ed5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ed8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004edc:	e8 7c ee ff ff       	call   c0003d5d <follow_path>
c0004ee1:	85 c0                	test   eax,eax
c0004ee3:	89 c3                	mov    ebx,eax
c0004ee5:	74 3e                	je     c0004f25 <f_mkdir+0xa1>
c0004ee7:	83 f8 04             	cmp    eax,0x4
c0004eea:	75 3e                	jne    c0004f2a <f_mkdir+0xa6>
c0004eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ef0:	31 d2                	xor    edx,edx
c0004ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004ef6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004efa:	e8 63 e8 ff ff       	call   c0003762 <create_chain>
c0004eff:	85 c0                	test   eax,eax
c0004f01:	89 c6                	mov    esi,eax
c0004f03:	74 0c                	je     c0004f11 <f_mkdir+0x8d>
c0004f05:	83 f8 01             	cmp    eax,0x1
c0004f08:	bb 02 00 00 00       	mov    ebx,0x2
c0004f0d:	74 07                	je     c0004f16 <f_mkdir+0x92>
c0004f0f:	eb 2a                	jmp    c0004f3b <f_mkdir+0xb7>
c0004f11:	bb 07 00 00 00       	mov    ebx,0x7
c0004f16:	31 c9                	xor    ecx,ecx
c0004f18:	89 f2                	mov    edx,esi
c0004f1a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f1e:	e8 79 e9 ff ff       	call   c000389c <remove_chain>
c0004f23:	eb 05                	jmp    c0004f2a <f_mkdir+0xa6>
c0004f25:	bb 08 00 00 00       	mov    ebx,0x8
c0004f2a:	83 ec 0c             	sub    esp,0xc
c0004f2d:	57                   	push   edi
c0004f2e:	e8 7d 10 00 00       	call   c0005fb0 <ff_memfree>
c0004f33:	83 c4 10             	add    esp,0x10
c0004f36:	e9 db 00 00 00       	jmp    c0005016 <f_mkdir+0x192>
c0004f3b:	83 f8 ff             	cmp    eax,0xffffffff
c0004f3e:	bb 01 00 00 00       	mov    ebx,0x1
c0004f43:	74 d1                	je     c0004f16 <f_mkdir+0x92>
c0004f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f49:	89 f2                	mov    edx,esi
c0004f4b:	e8 19 dd ff ff       	call   c0002c69 <dir_clear>
c0004f50:	85 c0                	test   eax,eax
c0004f52:	89 c3                	mov    ebx,eax
c0004f54:	75 c0                	jne    c0004f16 <f_mkdir+0x92>
c0004f56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f5f:	ba 20 00 00 00       	mov    edx,0x20
c0004f64:	83 c0 34             	add    eax,0x34
c0004f67:	e8 28 d2 ff ff       	call   c0002194 <mem_set>
c0004f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f75:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f79:	83 c0 4a             	add    eax,0x4a
c0004f7c:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004f80:	e8 f7 d1 ff ff       	call   c000217c <st_dword>
c0004f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f89:	89 f1                	mov    ecx,esi
c0004f8b:	8d 50 34             	lea    edx,[eax+0x34]
c0004f8e:	e8 da e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004f93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f97:	b9 20 00 00 00       	mov    ecx,0x20
c0004f9c:	8d 50 34             	lea    edx,[eax+0x34]
c0004f9f:	83 c0 54             	add    eax,0x54
c0004fa2:	e8 d8 d1 ff ff       	call   c000217f <mem_cpy>
c0004fa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004faf:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004fb3:	8d 50 54             	lea    edx,[eax+0x54]
c0004fb6:	e8 b2 e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fbf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fc3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fc7:	e8 2e ee ff ff       	call   c0003dfa <dir_register>
c0004fcc:	85 c0                	test   eax,eax
c0004fce:	89 c3                	mov    ebx,eax
c0004fd0:	0f 85 40 ff ff ff    	jne    c0004f16 <f_mkdir+0x92>
c0004fd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fda:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdf:	83 c0 16             	add    eax,0x16
c0004fe2:	e8 95 d1 ff ff       	call   c000217c <st_dword>
c0004fe7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004feb:	89 f1                	mov    ecx,esi
c0004fed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ff1:	e8 77 e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004ff6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ffa:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005002:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000500a:	e8 de e0 ff ff       	call   c00030ed <sync_fs>
c000500f:	89 c3                	mov    ebx,eax
c0005011:	e9 14 ff ff ff       	jmp    c0004f2a <f_mkdir+0xa6>
c0005016:	83 c4 50             	add    esp,0x50
c0005019:	89 d8                	mov    eax,ebx
c000501b:	5b                   	pop    ebx
c000501c:	5e                   	pop    esi
c000501d:	5f                   	pop    edi
c000501e:	c3                   	ret    

c000501f <f_rename>:
c000501f:	57                   	push   edi
c0005020:	56                   	push   esi
c0005021:	53                   	push   ebx
c0005022:	81 ec a0 00 00 00    	sub    esp,0xa0
c0005028:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c000502f:	e8 8f d5 ff ff       	call   c00025c3 <get_ldnumber>
c0005034:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005038:	b9 02 00 00 00       	mov    ecx,0x2
c000503d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005044:	e8 cc d7 ff ff       	call   c0002815 <mount_volume>
c0005049:	85 c0                	test   eax,eax
c000504b:	0f 85 7c 01 00 00    	jne    c00051cd <f_rename+0x1ae>
c0005051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005055:	83 ec 0c             	sub    esp,0xc
c0005058:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000505c:	68 00 02 00 00       	push   0x200
c0005061:	e8 32 0f 00 00       	call   c0005f98 <ff_memalloc>
c0005066:	83 c4 10             	add    esp,0x10
c0005069:	89 c6                	mov    esi,eax
c000506b:	b8 11 00 00 00       	mov    eax,0x11
c0005070:	85 f6                	test   esi,esi
c0005072:	0f 84 55 01 00 00    	je     c00051cd <f_rename+0x1ae>
c0005078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000507c:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005083:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005086:	8d 44 24 40          	lea    eax,[esp+0x40]
c000508a:	e8 ce ec ff ff       	call   c0003d5d <follow_path>
c000508f:	85 c0                	test   eax,eax
c0005091:	0f 85 22 01 00 00    	jne    c00051b9 <f_rename+0x19a>
c0005097:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000509b:	b8 06 00 00 00       	mov    eax,0x6
c00050a0:	80 e2 a0             	and    dl,0xa0
c00050a3:	0f 85 10 01 00 00    	jne    c00051b9 <f_rename+0x19a>
c00050a9:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00050ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b1:	b9 20 00 00 00       	mov    ecx,0x20
c00050b6:	e8 c4 d0 ff ff       	call   c000217f <mem_cpy>
c00050bb:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050bf:	b9 30 00 00 00       	mov    ecx,0x30
c00050c4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050c8:	e8 b2 d0 ff ff       	call   c000217f <mem_cpy>
c00050cd:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050d4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050d8:	e8 80 ec ff ff       	call   c0003d5d <follow_path>
c00050dd:	85 c0                	test   eax,eax
c00050df:	75 20                	jne    c0005101 <f_rename+0xe2>
c00050e1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050e5:	b8 08 00 00 00       	mov    eax,0x8
c00050ea:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050ee:	0f 85 c5 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c00050f4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050f8:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050ff:	eb 03                	jmp    c0005104 <f_rename+0xe5>
c0005101:	83 f8 04             	cmp    eax,0x4
c0005104:	0f 85 af 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c000510a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000510e:	e8 e7 ec ff ff       	call   c0003dfa <dir_register>
c0005113:	85 c0                	test   eax,eax
c0005115:	0f 85 9e 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c000511b:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005122:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005126:	b9 13 00 00 00       	mov    ecx,0x13
c000512b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000512e:	e8 4c d0 ff ff       	call   c000217f <mem_cpy>
c0005133:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0005137:	a8 10                	test   al,0x10
c0005139:	75 03                	jne    c000513e <f_rename+0x11f>
c000513b:	83 c8 20             	or     eax,0x20
c000513e:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005145:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005149:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c000514d:	74 54                	je     c00051a3 <f_rename+0x184>
c000514f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005153:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0005157:	74 4a                	je     c00051a3 <f_rename+0x184>
c0005159:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000515d:	89 da                	mov    edx,ebx
c000515f:	8a 07                	mov    al,BYTE PTR [edi]
c0005161:	e8 de e3 ff ff       	call   c0003544 <ld_clust.isra.0>
c0005166:	89 c2                	mov    edx,eax
c0005168:	89 f8                	mov    eax,edi
c000516a:	e8 3a d2 ff ff       	call   c00023a9 <clst2sect>
c000516f:	89 c2                	mov    edx,eax
c0005171:	b8 02 00 00 00       	mov    eax,0x2
c0005176:	85 d2                	test   edx,edx
c0005178:	74 3f                	je     c00051b9 <f_rename+0x19a>
c000517a:	89 f8                	mov    eax,edi
c000517c:	e8 37 d5 ff ff       	call   c00026b8 <move_window>
c0005181:	85 c0                	test   eax,eax
c0005183:	75 34                	jne    c00051b9 <f_rename+0x19a>
c0005185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005189:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000518d:	75 14                	jne    c00051a3 <f_rename+0x184>
c000518f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005193:	8d 50 54             	lea    edx,[eax+0x54]
c0005196:	e8 d2 e3 ff ff       	call   c000356d <st_clust.isra.1>
c000519b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000519f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051a3:	8d 44 24 40          	lea    eax,[esp+0x40]
c00051a7:	e8 10 ea ff ff       	call   c0003bbc <dir_remove>
c00051ac:	85 c0                	test   eax,eax
c00051ae:	75 09                	jne    c00051b9 <f_rename+0x19a>
c00051b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b4:	e8 34 df ff ff       	call   c00030ed <sync_fs>
c00051b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051bd:	83 ec 0c             	sub    esp,0xc
c00051c0:	56                   	push   esi
c00051c1:	e8 ea 0d 00 00       	call   c0005fb0 <ff_memfree>
c00051c6:	83 c4 10             	add    esp,0x10
c00051c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cd:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051d3:	5b                   	pop    ebx
c00051d4:	5e                   	pop    esi
c00051d5:	5f                   	pop    edi
c00051d6:	c3                   	ret    

c00051d7 <f_chmod>:
c00051d7:	57                   	push   edi
c00051d8:	b9 02 00 00 00       	mov    ecx,0x2
c00051dd:	56                   	push   esi
c00051de:	53                   	push   ebx
c00051df:	83 ec 50             	sub    esp,0x50
c00051e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ea:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051ee:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051f2:	e8 1e d6 ff ff       	call   c0002815 <mount_volume>
c00051f7:	85 c0                	test   eax,eax
c00051f9:	0f 85 81 00 00 00    	jne    c0005280 <f_chmod+0xa9>
c00051ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005203:	83 ec 0c             	sub    esp,0xc
c0005206:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000520a:	68 00 02 00 00       	push   0x200
c000520f:	e8 84 0d 00 00       	call   c0005f98 <ff_memalloc>
c0005214:	83 c4 10             	add    esp,0x10
c0005217:	89 c6                	mov    esi,eax
c0005219:	b8 11 00 00 00       	mov    eax,0x11
c000521e:	85 f6                	test   esi,esi
c0005220:	74 5e                	je     c0005280 <f_chmod+0xa9>
c0005222:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005226:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000522a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000522d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005231:	e8 27 eb ff ff       	call   c0003d5d <follow_path>
c0005236:	85 c0                	test   eax,eax
c0005238:	75 32                	jne    c000526c <f_chmod+0x95>
c000523a:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000523e:	b8 06 00 00 00       	mov    eax,0x6
c0005243:	80 e2 a0             	and    dl,0xa0
c0005246:	75 24                	jne    c000526c <f_chmod+0x95>
c0005248:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524c:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c000524f:	31 d7                	xor    edi,edx
c0005251:	21 fb                	and    ebx,edi
c0005253:	83 e3 27             	and    ebx,0x27
c0005256:	31 d3                	xor    ebx,edx
c0005258:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000525b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005263:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005267:	e8 81 de ff ff       	call   c00030ed <sync_fs>
c000526c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005270:	83 ec 0c             	sub    esp,0xc
c0005273:	56                   	push   esi
c0005274:	e8 37 0d 00 00       	call   c0005fb0 <ff_memfree>
c0005279:	83 c4 10             	add    esp,0x10
c000527c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005280:	83 c4 50             	add    esp,0x50
c0005283:	5b                   	pop    ebx
c0005284:	5e                   	pop    esi
c0005285:	5f                   	pop    edi
c0005286:	c3                   	ret    

c0005287 <f_utime>:
c0005287:	56                   	push   esi
c0005288:	b9 02 00 00 00       	mov    ecx,0x2
c000528d:	53                   	push   ebx
c000528e:	83 ec 54             	sub    esp,0x54
c0005291:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005295:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 73 d5 ff ff       	call   c0002815 <mount_volume>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 85 87 00 00 00    	jne    c0005331 <f_utime+0xaa>
c00052aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052ae:	83 ec 0c             	sub    esp,0xc
c00052b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00052b5:	68 00 02 00 00       	push   0x200
c00052ba:	e8 d9 0c 00 00       	call   c0005f98 <ff_memalloc>
c00052bf:	83 c4 10             	add    esp,0x10
c00052c2:	89 c3                	mov    ebx,eax
c00052c4:	b8 11 00 00 00       	mov    eax,0x11
c00052c9:	85 db                	test   ebx,ebx
c00052cb:	74 64                	je     c0005331 <f_utime+0xaa>
c00052cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052d1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052d5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052dc:	e8 7c ea ff ff       	call   c0003d5d <follow_path>
c00052e1:	85 c0                	test   eax,eax
c00052e3:	75 38                	jne    c000531d <f_utime+0x96>
c00052e5:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052e9:	b8 06 00 00 00       	mov    eax,0x6
c00052ee:	80 e2 a0             	and    dl,0xa0
c00052f1:	75 2a                	jne    c000531d <f_utime+0x96>
c00052f3:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052f7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052fb:	c1 e2 10             	shl    edx,0x10
c00052fe:	09 c2                	or     edx,eax
c0005300:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005304:	83 c0 16             	add    eax,0x16
c0005307:	e8 70 ce ff ff       	call   c000217c <st_dword>
c000530c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005310:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005318:	e8 d0 dd ff ff       	call   c00030ed <sync_fs>
c000531d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005321:	83 ec 0c             	sub    esp,0xc
c0005324:	53                   	push   ebx
c0005325:	e8 86 0c 00 00       	call   c0005fb0 <ff_memfree>
c000532a:	83 c4 10             	add    esp,0x10
c000532d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005331:	83 c4 54             	add    esp,0x54
c0005334:	5b                   	pop    ebx
c0005335:	5e                   	pop    esi
c0005336:	c3                   	ret    

c0005337 <f_getlabel>:
c0005337:	55                   	push   ebp
c0005338:	31 c9                	xor    ecx,ecx
c000533a:	57                   	push   edi
c000533b:	56                   	push   esi
c000533c:	53                   	push   ebx
c000533d:	83 ec 5c             	sub    esp,0x5c
c0005340:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005344:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005348:	8d 44 24 70          	lea    eax,[esp+0x70]
c000534c:	e8 c4 d4 ff ff       	call   c0002815 <mount_volume>
c0005351:	85 c0                	test   eax,eax
c0005353:	89 c3                	mov    ebx,eax
c0005355:	0f 85 d9 00 00 00    	jne    c0005434 <f_getlabel+0xfd>
c000535b:	85 ff                	test   edi,edi
c000535d:	0f 84 d1 00 00 00    	je     c0005434 <f_getlabel+0xfd>
c0005363:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000536b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000536f:	31 d2                	xor    edx,edx
c0005371:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005375:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005379:	e8 1c e3 ff ff       	call   c000369a <dir_sdi>
c000537e:	85 c0                	test   eax,eax
c0005380:	89 c3                	mov    ebx,eax
c0005382:	0f 85 a2 00 00 00    	jne    c000542a <f_getlabel+0xf3>
c0005388:	8d 44 24 20          	lea    eax,[esp+0x20]
c000538c:	ba 01 00 00 00       	mov    edx,0x1
c0005391:	e8 fe e6 ff ff       	call   c0003a94 <dir_read>
c0005396:	85 c0                	test   eax,eax
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 8a 00 00 00    	jne    c000542a <f_getlabel+0xf3>
c00053a0:	31 f6                	xor    esi,esi
c00053a2:	31 d2                	xor    edx,edx
c00053a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053a8:	8d 6a 01             	lea    ebp,[edx+0x1]
c00053ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053af:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c00053b3:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c00053b8:	89 c8                	mov    eax,ecx
c00053ba:	e8 13 ce ff ff       	call   c00021d2 <dbc_1st>
c00053bf:	85 c0                	test   eax,eax
c00053c1:	74 19                	je     c00053dc <f_getlabel+0xa5>
c00053c3:	83 fd 0b             	cmp    ebp,0xb
c00053c6:	74 14                	je     c00053dc <f_getlabel+0xa5>
c00053c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00053cc:	c1 e1 08             	shl    ecx,0x8
c00053cf:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00053d3:	8d 6a 02             	lea    ebp,[edx+0x2]
c00053d6:	09 c1                	or     ecx,eax
c00053d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00053dc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00053e1:	52                   	push   edx
c00053e2:	52                   	push   edx
c00053e3:	68 b5 01 00 00       	push   0x1b5
c00053e8:	50                   	push   eax
c00053e9:	e8 76 0c 00 00       	call   c0006064 <ff_oem2uni>
c00053ee:	83 c4 10             	add    esp,0x10
c00053f1:	0f b7 c0             	movzx  eax,ax
c00053f4:	85 c0                	test   eax,eax
c00053f6:	74 1f                	je     c0005417 <f_getlabel+0xe0>
c00053f8:	8d 14 37             	lea    edx,[edi+esi*1]
c00053fb:	b9 04 00 00 00       	mov    ecx,0x4
c0005400:	e8 ab ce ff ff       	call   c00022b0 <put_utf>
c0005405:	0f b6 c0             	movzx  eax,al
c0005408:	85 c0                	test   eax,eax
c000540a:	74 0b                	je     c0005417 <f_getlabel+0xe0>
c000540c:	01 c6                	add    esi,eax
c000540e:	83 fd 0b             	cmp    ebp,0xb
c0005411:	74 06                	je     c0005419 <f_getlabel+0xe2>
c0005413:	89 ea                	mov    edx,ebp
c0005415:	eb 8d                	jmp    c00053a4 <f_getlabel+0x6d>
c0005417:	31 f6                	xor    esi,esi
c0005419:	01 fe                	add    esi,edi
c000541b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000541e:	39 f7                	cmp    edi,esi
c0005420:	74 12                	je     c0005434 <f_getlabel+0xfd>
c0005422:	4e                   	dec    esi
c0005423:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0005426:	74 f3                	je     c000541b <f_getlabel+0xe4>
c0005428:	eb 0a                	jmp    c0005434 <f_getlabel+0xfd>
c000542a:	83 fb 04             	cmp    ebx,0x4
c000542d:	75 05                	jne    c0005434 <f_getlabel+0xfd>
c000542f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0005432:	31 db                	xor    ebx,ebx
c0005434:	85 db                	test   ebx,ebx
c0005436:	75 49                	jne    c0005481 <f_getlabel+0x14a>
c0005438:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000543d:	74 42                	je     c0005481 <f_getlabel+0x14a>
c000543f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005443:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005446:	e8 6d d2 ff ff       	call   c00026b8 <move_window>
c000544b:	85 c0                	test   eax,eax
c000544d:	89 c3                	mov    ebx,eax
c000544f:	75 30                	jne    c0005481 <f_getlabel+0x14a>
c0005451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005455:	b8 43 00 00 00       	mov    eax,0x43
c000545a:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000545d:	83 f9 03             	cmp    ecx,0x3
c0005460:	74 10                	je     c0005472 <f_getlabel+0x13b>
c0005462:	83 f9 04             	cmp    ecx,0x4
c0005465:	b8 64 00 00 00       	mov    eax,0x64
c000546a:	b9 27 00 00 00       	mov    ecx,0x27
c000546f:	0f 45 c1             	cmovne eax,ecx
c0005472:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005476:	e8 e5 cc ff ff       	call   c0002160 <ld_dword>
c000547b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000547f:	89 07                	mov    DWORD PTR [edi],eax
c0005481:	83 c4 5c             	add    esp,0x5c
c0005484:	89 d8                	mov    eax,ebx
c0005486:	5b                   	pop    ebx
c0005487:	5e                   	pop    esi
c0005488:	5f                   	pop    edi
c0005489:	5d                   	pop    ebp
c000548a:	c3                   	ret    

c000548b <f_setlabel>:
c000548b:	57                   	push   edi
c000548c:	b9 02 00 00 00       	mov    ecx,0x2
c0005491:	56                   	push   esi
c0005492:	53                   	push   ebx
c0005493:	83 ec 50             	sub    esp,0x50
c0005496:	8d 54 24 04          	lea    edx,[esp+0x4]
c000549a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000549e:	e8 72 d3 ff ff       	call   c0002815 <mount_volume>
c00054a3:	85 c0                	test   eax,eax
c00054a5:	89 c6                	mov    esi,eax
c00054a7:	0f 85 65 01 00 00    	jne    c0005612 <f_setlabel+0x187>
c00054ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00054b2:	ba 20 00 00 00       	mov    edx,0x20
c00054b7:	8d 44 24 0a          	lea    eax,[esp+0xa]
c00054bb:	31 db                	xor    ebx,ebx
c00054bd:	e8 d2 cc ff ff       	call   c0002194 <mem_set>
c00054c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054c6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054c9:	76 5d                	jbe    c0005528 <f_setlabel+0x9d>
c00054cb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054cf:	e8 04 cd ff ff       	call   c00021d8 <tchar2uni>
c00054d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00054d9:	76 0a                	jbe    c00054e5 <f_setlabel+0x5a>
c00054db:	be 06 00 00 00       	mov    esi,0x6
c00054e0:	e9 2d 01 00 00       	jmp    c0005612 <f_setlabel+0x187>
c00054e5:	83 ec 0c             	sub    esp,0xc
c00054e8:	50                   	push   eax
c00054e9:	e8 ee 0b 00 00       	call   c00060dc <ff_wtoupper>
c00054ee:	5a                   	pop    edx
c00054ef:	59                   	pop    ecx
c00054f0:	68 b5 01 00 00       	push   0x1b5
c00054f5:	50                   	push   eax
c00054f6:	e8 cd 0a 00 00       	call   c0005fc8 <ff_uni2oem>
c00054fb:	83 c4 10             	add    esp,0x10
c00054fe:	0f b7 f0             	movzx  esi,ax
c0005501:	85 f6                	test   esi,esi
c0005503:	89 f7                	mov    edi,esi
c0005505:	74 d4                	je     c00054db <f_setlabel+0x50>
c0005507:	89 f2                	mov    edx,esi
c0005509:	b8 d0 f8 02 c0       	mov    eax,0xc002f8d0
c000550e:	e8 ae cc ff ff       	call   c00021c1 <chk_chr>
c0005513:	85 c0                	test   eax,eax
c0005515:	75 c4                	jne    c00054db <f_setlabel+0x50>
c0005517:	81 fe ff 00 00 00    	cmp    esi,0xff
c000551d:	0f 87 c9 00 00 00    	ja     c00055ec <f_setlabel+0x161>
c0005523:	e9 e0 00 00 00       	jmp    c0005608 <f_setlabel+0x17d>
c0005528:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000552d:	74 ac                	je     c00054db <f_setlabel+0x50>
c000552f:	85 db                	test   ebx,ebx
c0005531:	74 0e                	je     c0005541 <f_setlabel+0xb6>
c0005533:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005538:	8d 43 ff             	lea    eax,[ebx-0x1]
c000553b:	75 04                	jne    c0005541 <f_setlabel+0xb6>
c000553d:	89 c3                	mov    ebx,eax
c000553f:	eb ee                	jmp    c000552f <f_setlabel+0xa4>
c0005541:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000554d:	31 d2                	xor    edx,edx
c000554f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005553:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005557:	e8 3e e1 ff ff       	call   c000369a <dir_sdi>
c000555c:	85 c0                	test   eax,eax
c000555e:	89 c6                	mov    esi,eax
c0005560:	0f 85 ac 00 00 00    	jne    c0005612 <f_setlabel+0x187>
c0005566:	8d 44 24 20          	lea    eax,[esp+0x20]
c000556a:	ba 01 00 00 00       	mov    edx,0x1
c000556f:	e8 20 e5 ff ff       	call   c0003a94 <dir_read>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 18                	jne    c0005590 <f_setlabel+0x105>
c0005578:	85 db                	test   ebx,ebx
c000557a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000557e:	74 0b                	je     c000558b <f_setlabel+0x100>
c0005580:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005584:	b9 0b 00 00 00       	mov    ecx,0xb
c0005589:	eb 47                	jmp    c00055d2 <f_setlabel+0x147>
c000558b:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000558e:	eb 47                	jmp    c00055d7 <f_setlabel+0x14c>
c0005590:	83 f8 04             	cmp    eax,0x4
c0005593:	75 53                	jne    c00055e8 <f_setlabel+0x15d>
c0005595:	85 db                	test   ebx,ebx
c0005597:	74 79                	je     c0005612 <f_setlabel+0x187>
c0005599:	8d 44 24 20          	lea    eax,[esp+0x20]
c000559d:	ba 01 00 00 00       	mov    edx,0x1
c00055a2:	e8 88 e4 ff ff       	call   c0003a2f <dir_alloc>
c00055a7:	85 c0                	test   eax,eax
c00055a9:	89 c6                	mov    esi,eax
c00055ab:	75 65                	jne    c0005612 <f_setlabel+0x187>
c00055ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b1:	b9 20 00 00 00       	mov    ecx,0x20
c00055b6:	31 d2                	xor    edx,edx
c00055b8:	e8 d7 cb ff ff       	call   c0002194 <mem_set>
c00055bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00055c6:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055ca:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055d2:	e8 a8 cb ff ff       	call   c000217f <mem_cpy>
c00055d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055db:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055e3:	e8 05 db ff ff       	call   c00030ed <sync_fs>
c00055e8:	89 c6                	mov    esi,eax
c00055ea:	eb 26                	jmp    c0005612 <f_setlabel+0x187>
c00055ec:	83 fb 09             	cmp    ebx,0x9
c00055ef:	0f 87 e6 fe ff ff    	ja     c00054db <f_setlabel+0x50>
c00055f5:	89 f0                	mov    eax,esi
c00055f7:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055fb:	43                   	inc    ebx
c00055fc:	89 f8                	mov    eax,edi
c00055fe:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005602:	43                   	inc    ebx
c0005603:	e9 ba fe ff ff       	jmp    c00054c2 <f_setlabel+0x37>
c0005608:	83 fb 0a             	cmp    ebx,0xa
c000560b:	76 ef                	jbe    c00055fc <f_setlabel+0x171>
c000560d:	e9 c9 fe ff ff       	jmp    c00054db <f_setlabel+0x50>
c0005612:	83 c4 50             	add    esp,0x50
c0005615:	89 f0                	mov    eax,esi
c0005617:	5b                   	pop    ebx
c0005618:	5e                   	pop    esi
c0005619:	5f                   	pop    edi
c000561a:	c3                   	ret    

c000561b <f_expand>:
c000561b:	55                   	push   ebp
c000561c:	57                   	push   edi
c000561d:	56                   	push   esi
c000561e:	53                   	push   ebx
c000561f:	83 ec 2c             	sub    esp,0x2c
c0005622:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005626:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000562e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 d6 cf ff ff       	call   c000260f <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	89 c6                	mov    esi,eax
c000563d:	0f 85 3b 01 00 00    	jne    c000577e <f_expand+0x163>
c0005643:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005647:	85 f6                	test   esi,esi
c0005649:	0f 85 2f 01 00 00    	jne    c000577e <f_expand+0x163>
c000564f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005654:	75 0a                	jne    c0005660 <f_expand+0x45>
c0005656:	be 07 00 00 00       	mov    esi,0x7
c000565b:	e9 1e 01 00 00       	jmp    c000577e <f_expand+0x163>
c0005660:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005664:	75 f0                	jne    c0005656 <f_expand+0x3b>
c0005666:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000566a:	74 ea                	je     c0005656 <f_expand+0x3b>
c000566c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005670:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005674:	c1 e7 09             	shl    edi,0x9
c0005677:	8d 47 ff             	lea    eax,[edi-0x1]
c000567a:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000567e:	0f 95 c0             	setne  al
c0005681:	31 d2                	xor    edx,edx
c0005683:	0f b6 c0             	movzx  eax,al
c0005686:	89 c5                	mov    ebp,eax
c0005688:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000568c:	f7 f7                	div    edi
c000568e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005691:	01 e8                	add    eax,ebp
c0005693:	83 ff 01             	cmp    edi,0x1
c0005696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000569a:	76 05                	jbe    c00056a1 <f_expand+0x86>
c000569c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000569f:	77 05                	ja     c00056a6 <f_expand+0x8b>
c00056a1:	bf 02 00 00 00       	mov    edi,0x2
c00056a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00056a9:	89 fd                	mov    ebp,edi
c00056ab:	31 c9                	xor    ecx,ecx
c00056ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00056b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00056b3:	89 ea                	mov    edx,ebp
c00056b5:	45                   	inc    ebp
c00056b6:	e8 da de ff ff       	call   c0003595 <get_fat.isra.2>
c00056bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056c3:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056c6:	77 05                	ja     c00056cd <f_expand+0xb2>
c00056c8:	bd 02 00 00 00       	mov    ebp,0x2
c00056cd:	83 f8 01             	cmp    eax,0x1
c00056d0:	74 20                	je     c00056f2 <f_expand+0xd7>
c00056d2:	83 f8 ff             	cmp    eax,0xffffffff
c00056d5:	74 25                	je     c00056fc <f_expand+0xe1>
c00056d7:	85 c0                	test   eax,eax
c00056d9:	75 09                	jne    c00056e4 <f_expand+0xc9>
c00056db:	41                   	inc    ecx
c00056dc:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056e0:	75 07                	jne    c00056e9 <f_expand+0xce>
c00056e2:	eb 1f                	jmp    c0005703 <f_expand+0xe8>
c00056e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056e7:	31 c9                	xor    ecx,ecx
c00056e9:	39 fd                	cmp    ebp,edi
c00056eb:	75 c0                	jne    c00056ad <f_expand+0x92>
c00056ed:	e9 64 ff ff ff       	jmp    c0005656 <f_expand+0x3b>
c00056f2:	be 02 00 00 00       	mov    esi,0x2
c00056f7:	e9 82 00 00 00       	jmp    c000577e <f_expand+0x163>
c00056fc:	be 01 00 00 00       	mov    esi,0x1
c0005701:	eb 7b                	jmp    c000577e <f_expand+0x163>
c0005703:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005708:	74 2b                	je     c0005735 <f_expand+0x11a>
c000570a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000570d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005711:	85 ed                	test   ebp,ebp
c0005713:	74 24                	je     c0005739 <f_expand+0x11e>
c0005715:	83 c9 ff             	or     ecx,0xffffffff
c0005718:	83 fd 01             	cmp    ebp,0x1
c000571b:	74 03                	je     c0005720 <f_expand+0x105>
c000571d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005724:	89 fa                	mov    edx,edi
c0005726:	e8 e7 d3 ff ff       	call   c0002b12 <put_fat>
c000572b:	85 c0                	test   eax,eax
c000572d:	75 4d                	jne    c000577c <f_expand+0x161>
c000572f:	89 f8                	mov    eax,edi
c0005731:	4d                   	dec    ebp
c0005732:	47                   	inc    edi
c0005733:	eb dc                	jmp    c0005711 <f_expand+0xf6>
c0005735:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005738:	48                   	dec    eax
c0005739:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000573d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005742:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005745:	74 37                	je     c000577e <f_expand+0x163>
c0005747:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000574a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000574d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005751:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005754:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005757:	83 c8 40             	or     eax,0x40
c000575a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000575d:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005760:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005763:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005766:	39 c8                	cmp    eax,ecx
c0005768:	77 14                	ja     c000577e <f_expand+0x163>
c000576a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000576e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005771:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005774:	83 c8 01             	or     eax,0x1
c0005777:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000577a:	eb 02                	jmp    c000577e <f_expand+0x163>
c000577c:	89 c6                	mov    esi,eax
c000577e:	83 c4 2c             	add    esp,0x2c
c0005781:	89 f0                	mov    eax,esi
c0005783:	5b                   	pop    ebx
c0005784:	5e                   	pop    esi
c0005785:	5f                   	pop    edi
c0005786:	5d                   	pop    ebp
c0005787:	c3                   	ret    

c0005788 <f_mkfs>:
c0005788:	55                   	push   ebp
c0005789:	57                   	push   edi
c000578a:	56                   	push   esi
c000578b:	be 0b 00 00 00       	mov    esi,0xb
c0005790:	53                   	push   ebx
c0005791:	83 ec 5c             	sub    esp,0x5c
c0005794:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005798:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000579c:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c00057a0:	e8 1e ce ff ff       	call   c00025c3 <get_ldnumber>
c00057a5:	85 c0                	test   eax,eax
c00057a7:	0f 88 e0 07 00 00    	js     c0005f8d <f_mkfs+0x805>
c00057ad:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c00057b4:	85 d2                	test   edx,edx
c00057b6:	74 03                	je     c00057bb <f_mkfs+0x33>
c00057b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00057bb:	85 db                	test   ebx,ebx
c00057bd:	75 05                	jne    c00057c4 <f_mkfs+0x3c>
c00057bf:	bb c0 f8 02 c0       	mov    ebx,0xc002f8c0
c00057c4:	0f b6 c0             	movzx  eax,al
c00057c7:	83 ec 0c             	sub    esp,0xc
c00057ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057ce:	be 03 00 00 00       	mov    esi,0x3
c00057d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057d7:	e8 29 c9 ff ff       	call   c0002105 <disk_initialize>
c00057dc:	83 c4 10             	add    esp,0x10
c00057df:	a8 01                	test   al,0x1
c00057e1:	0f 85 a6 07 00 00    	jne    c0005f8d <f_mkfs+0x805>
c00057e7:	a8 04                	test   al,0x4
c00057e9:	be 0a 00 00 00       	mov    esi,0xa
c00057ee:	0f 85 99 07 00 00    	jne    c0005f8d <f_mkfs+0x805>
c00057f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057f7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057fb:	85 c0                	test   eax,eax
c00057fd:	75 20                	jne    c000581f <f_mkfs+0x97>
c00057ff:	51                   	push   ecx
c0005800:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005804:	50                   	push   eax
c0005805:	6a 03                	push   0x3
c0005807:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000580b:	e8 24 c9 ff ff       	call   c0002134 <disk_ioctl>
c0005810:	83 c4 10             	add    esp,0x10
c0005813:	85 c0                	test   eax,eax
c0005815:	74 08                	je     c000581f <f_mkfs+0x97>
c0005817:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005823:	8d 42 ff             	lea    eax,[edx-0x1]
c0005826:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000582b:	77 04                	ja     c0005831 <f_mkfs+0xa9>
c000582d:	85 c2                	test   edx,eax
c000582f:	74 08                	je     c0005839 <f_mkfs+0xb1>
c0005831:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005839:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000583c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005840:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005844:	48                   	dec    eax
c0005845:	3c 01                	cmp    al,0x1
c0005847:	76 05                	jbe    c000584e <f_mkfs+0xc6>
c0005849:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000584e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005851:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005855:	48                   	dec    eax
c0005856:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000585b:	77 15                	ja     c0005872 <f_mkfs+0xea>
c000585d:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c0005862:	b8 00 02 00 00       	mov    eax,0x200
c0005867:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c000586c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005870:	eb 08                	jmp    c000587a <f_mkfs+0xf2>
c0005872:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c000587a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000587d:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005883:	77 0f                	ja     c0005894 <f_mkfs+0x10c>
c0005885:	8d 47 ff             	lea    eax,[edi-0x1]
c0005888:	85 f8                	test   eax,edi
c000588a:	b8 00 00 00 00       	mov    eax,0x0
c000588f:	0f 45 f8             	cmovne edi,eax
c0005892:	eb 02                	jmp    c0005896 <f_mkfs+0x10e>
c0005894:	31 ff                	xor    edi,edi
c0005896:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000589e:	77 0a                	ja     c00058aa <f_mkfs+0x122>
c00058a0:	be 11 00 00 00       	mov    esi,0x11
c00058a5:	e9 e3 06 00 00       	jmp    c0005f8d <f_mkfs+0x805>
c00058aa:	85 ed                	test   ebp,ebp
c00058ac:	8b 33                	mov    esi,DWORD PTR [ebx]
c00058ae:	89 eb                	mov    ebx,ebp
c00058b0:	75 1e                	jne    c00058d0 <f_mkfs+0x148>
c00058b2:	83 ec 0c             	sub    esp,0xc
c00058b5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00058bc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00058c1:	50                   	push   eax
c00058c2:	e8 d1 06 00 00       	call   c0005f98 <ff_memalloc>
c00058c7:	83 c4 10             	add    esp,0x10
c00058ca:	85 c0                	test   eax,eax
c00058cc:	89 c3                	mov    ebx,eax
c00058ce:	74 d0                	je     c00058a0 <f_mkfs+0x118>
c00058d0:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058d8:	52                   	push   edx
c00058d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058dd:	50                   	push   eax
c00058de:	6a 01                	push   0x1
c00058e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058e4:	e8 4b c8 ff ff       	call   c0002134 <disk_ioctl>
c00058e9:	83 c4 10             	add    esp,0x10
c00058ec:	85 c0                	test   eax,eax
c00058ee:	0f 85 42 06 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c00058f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00058fc:	89 f0                	mov    eax,esi
c00058fe:	83 e0 08             	and    eax,0x8
c0005901:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005905:	75 18                	jne    c000591f <f_mkfs+0x197>
c0005907:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000590b:	83 f8 3f             	cmp    eax,0x3f
c000590e:	76 0f                	jbe    c000591f <f_mkfs+0x197>
c0005910:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c0005918:	83 e8 3f             	sub    eax,0x3f
c000591b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000591f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005923:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005927:	83 f8 7f             	cmp    eax,0x7f
c000592a:	0f 86 5f 02 00 00    	jbe    c0005b8f <f_mkfs+0x407>
c0005930:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005936:	b9 80 00 00 00       	mov    ecx,0x80
c000593b:	77 05                	ja     c0005942 <f_mkfs+0x1ba>
c000593d:	c1 ef 09             	shr    edi,0x9
c0005940:	89 f9                	mov    ecx,edi
c0005942:	89 f0                	mov    eax,esi
c0005944:	89 f7                	mov    edi,esi
c0005946:	83 e0 01             	and    eax,0x1
c0005949:	83 e7 02             	and    edi,0x2
c000594c:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005950:	0f b6 c0             	movzx  eax,al
c0005953:	74 0a                	je     c000595f <f_mkfs+0x1d7>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 84 53 01 00 00    	je     c0005ab0 <f_mkfs+0x328>
c000595d:	eb 37                	jmp    c0005996 <f_mkfs+0x20e>
c000595f:	85 c0                	test   eax,eax
c0005961:	be 13 00 00 00       	mov    esi,0x13
c0005966:	75 2e                	jne    c0005996 <f_mkfs+0x20e>
c0005968:	e9 e0 05 00 00       	jmp    c0005f4d <f_mkfs+0x7c5>
c000596d:	83 f8 02             	cmp    eax,0x2
c0005970:	0f 85 11 02 00 00    	jne    c0005b87 <f_mkfs+0x3ff>
c0005976:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c000597c:	0f 86 e8 01 00 00    	jbe    c0005b6a <f_mkfs+0x3e2>
c0005982:	85 c9                	test   ecx,ecx
c0005984:	0f 85 d5 05 00 00    	jne    c0005f5f <f_mkfs+0x7d7>
c000598a:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000598d:	83 f9 40             	cmp    ecx,0x40
c0005990:	0f 87 d9 05 00 00    	ja     c0005f6f <f_mkfs+0x7e7>
c0005996:	85 c9                	test   ecx,ecx
c0005998:	89 cf                	mov    edi,ecx
c000599a:	75 1c                	jne    c00059b8 <f_mkfs+0x230>
c000599c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00059a0:	b8 a0 f8 02 c0       	mov    eax,0xc002f8a0
c00059a5:	bf 01 00 00 00       	mov    edi,0x1
c00059aa:	c1 ee 0c             	shr    esi,0xc
c00059ad:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	0f 85 67 01 00 00    	jne    c0005b1f <f_mkfs+0x397>
c00059b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00059bc:	31 d2                	xor    edx,edx
c00059be:	f7 f7                	div    edi
c00059c0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00059c5:	0f 86 66 01 00 00    	jbe    c0005b31 <f_mkfs+0x3a9>
c00059cb:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c00059d0:	83 c0 02             	add    eax,0x2
c00059d3:	01 c0                	add    eax,eax
c00059d5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059dd:	05 ff 01 00 00       	add    eax,0x1ff
c00059e2:	c1 e8 09             	shr    eax,0x9
c00059e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ed:	c1 e0 05             	shl    eax,0x5
c00059f0:	c1 e8 09             	shr    eax,0x9
c00059f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005a08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005a0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a10:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005a15:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005a19:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005a1d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005a21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005a25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005a29:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005a2d:	f7 d8                	neg    eax
c0005a2f:	21 c6                	and    esi,eax
c0005a31:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a36:	29 d6                	sub    esi,edx
c0005a38:	83 f8 03             	cmp    eax,0x3
c0005a3b:	0f 85 03 01 00 00    	jne    c0005b44 <f_mkfs+0x3bc>
c0005a41:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a45:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a49:	89 f8                	mov    eax,edi
c0005a4b:	c1 e0 04             	shl    eax,0x4
c0005a4e:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c0005a52:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a56:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a5a:	0f 82 2f 01 00 00    	jb     c0005b8f <f_mkfs+0x407>
c0005a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a64:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a68:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a6c:	89 c2                	mov    edx,eax
c0005a6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a72:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005a77:	29 c2                	sub    edx,eax
c0005a79:	89 d0                	mov    eax,edx
c0005a7b:	31 d2                	xor    edx,edx
c0005a7d:	f7 f7                	div    edi
c0005a7f:	89 c6                	mov    esi,eax
c0005a81:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a86:	83 f8 03             	cmp    eax,0x3
c0005a89:	0f 85 de fe ff ff    	jne    c000596d <f_mkfs+0x1e5>
c0005a8f:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a95:	0f 87 03 01 00 00    	ja     c0005b9e <f_mkfs+0x416>
c0005a9b:	85 c9                	test   ecx,ecx
c0005a9d:	0f 85 ec 00 00 00    	jne    c0005b8f <f_mkfs+0x407>
c0005aa3:	83 ff 01             	cmp    edi,0x1
c0005aa6:	0f 86 e3 00 00 00    	jbe    c0005b8f <f_mkfs+0x407>
c0005aac:	d1 ef                	shr    edi,1
c0005aae:	89 f9                	mov    ecx,edi
c0005ab0:	85 c9                	test   ecx,ecx
c0005ab2:	89 ce                	mov    esi,ecx
c0005ab4:	75 25                	jne    c0005adb <f_mkfs+0x353>
c0005ab6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005aba:	b8 b0 f8 02 c0       	mov    eax,0xc002f8b0
c0005abf:	b9 01 00 00 00       	mov    ecx,0x1
c0005ac4:	c1 ee 11             	shr    esi,0x11
c0005ac7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005aca:	85 d2                	test   edx,edx
c0005acc:	74 0b                	je     c0005ad9 <f_mkfs+0x351>
c0005ace:	83 c0 02             	add    eax,0x2
c0005ad1:	39 f2                	cmp    edx,esi
c0005ad3:	77 04                	ja     c0005ad9 <f_mkfs+0x351>
c0005ad5:	01 c9                	add    ecx,ecx
c0005ad7:	eb ee                	jmp    c0005ac7 <f_mkfs+0x33f>
c0005ad9:	31 f6                	xor    esi,esi
c0005adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005adf:	31 d2                	xor    edx,edx
c0005ae1:	f7 f1                	div    ecx
c0005ae3:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005aea:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005aef:	c1 ea 09             	shr    edx,0x9
c0005af2:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005af7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005afb:	0f 87 8e 00 00 00    	ja     c0005b8f <f_mkfs+0x407>
c0005b01:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005b09:	89 cf                	mov    edi,ecx
c0005b0b:	89 f1                	mov    ecx,esi
c0005b0d:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005b15:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005b1a:	e9 d8 fe ff ff       	jmp    c00059f7 <f_mkfs+0x26f>
c0005b1f:	83 c0 02             	add    eax,0x2
c0005b22:	39 f2                	cmp    edx,esi
c0005b24:	0f 87 8e fe ff ff    	ja     c00059b8 <f_mkfs+0x230>
c0005b2a:	01 ff                	add    edi,edi
c0005b2c:	e9 7c fe ff ff       	jmp    c00059ad <f_mkfs+0x225>
c0005b31:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b36:	8d 04 40             	lea    eax,[eax+eax*2]
c0005b39:	40                   	inc    eax
c0005b3a:	d1 e8                	shr    eax,1
c0005b3c:	83 c0 03             	add    eax,0x3
c0005b3f:	e9 91 fe ff ff       	jmp    c00059d5 <f_mkfs+0x24d>
c0005b44:	31 d2                	xor    edx,edx
c0005b46:	89 f0                	mov    eax,esi
c0005b48:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b4c:	85 d2                	test   edx,edx
c0005b4e:	74 09                	je     c0005b59 <f_mkfs+0x3d1>
c0005b50:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b54:	4e                   	dec    esi
c0005b55:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b59:	89 f0                	mov    eax,esi
c0005b5b:	31 d2                	xor    edx,edx
c0005b5d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b61:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b65:	e9 df fe ff ff       	jmp    c0005a49 <f_mkfs+0x2c1>
c0005b6a:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b70:	77 2c                	ja     c0005b9e <f_mkfs+0x416>
c0005b72:	85 c9                	test   ecx,ecx
c0005b74:	75 19                	jne    c0005b8f <f_mkfs+0x407>
c0005b76:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b79:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b7f:	0f 86 11 fe ff ff    	jbe    c0005996 <f_mkfs+0x20e>
c0005b85:	eb 08                	jmp    c0005b8f <f_mkfs+0x407>
c0005b87:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b8d:	76 0a                	jbe    c0005b99 <f_mkfs+0x411>
c0005b8f:	be 0e 00 00 00       	mov    esi,0xe
c0005b94:	e9 b4 03 00 00       	jmp    c0005f4d <f_mkfs+0x7c5>
c0005b99:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b9e:	31 d2                	xor    edx,edx
c0005ba0:	b9 00 02 00 00       	mov    ecx,0x200
c0005ba5:	89 d8                	mov    eax,ebx
c0005ba7:	e8 e8 c5 ff ff       	call   c0002194 <mem_set>
c0005bac:	b9 0b 00 00 00       	mov    ecx,0xb
c0005bb1:	ba 4e f8 02 c0       	mov    edx,0xc002f84e
c0005bb6:	89 d8                	mov    eax,ebx
c0005bb8:	e8 c2 c5 ff ff       	call   c000217f <mem_cpy>
c0005bbd:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005bc0:	ba 00 02 00 00       	mov    edx,0x200
c0005bc5:	e8 ae c5 ff ff       	call   c0002178 <st_word>
c0005bca:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005bcf:	89 f8                	mov    eax,edi
c0005bd1:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005bd4:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005bd7:	e8 9c c5 ff ff       	call   c0002178 <st_word>
c0005bdc:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005be0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005be3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005be8:	83 f8 03             	cmp    eax,0x3
c0005beb:	b8 00 00 00 00       	mov    eax,0x0
c0005bf0:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bf9:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c00:	e8 73 c5 ff ff       	call   c0002178 <st_word>
c0005c05:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005c09:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005c0f:	77 0a                	ja     c0005c1b <f_mkfs+0x493>
c0005c11:	8d 43 13             	lea    eax,[ebx+0x13]
c0005c14:	e8 5f c5 ff ff       	call   c0002178 <st_word>
c0005c19:	eb 08                	jmp    c0005c23 <f_mkfs+0x49b>
c0005c1b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005c1e:	e8 59 c5 ff ff       	call   c000217c <st_dword>
c0005c23:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005c27:	8d 43 18             	lea    eax,[ebx+0x18]
c0005c2a:	ba 3f 00 00 00       	mov    edx,0x3f
c0005c2f:	e8 44 c5 ff ff       	call   c0002178 <st_word>
c0005c34:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005c37:	ba ff 00 00 00       	mov    edx,0xff
c0005c3c:	e8 37 c5 ff ff       	call   c0002178 <st_word>
c0005c41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c45:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c48:	e8 2f c5 ff ff       	call   c000217c <st_dword>
c0005c4d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c52:	83 f8 03             	cmp    eax,0x3
c0005c55:	75 57                	jne    c0005cae <f_mkfs+0x526>
c0005c57:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c5a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c5f:	e8 18 c5 ff ff       	call   c000217c <st_dword>
c0005c64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c68:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c6b:	e8 0c c5 ff ff       	call   c000217c <st_dword>
c0005c70:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c73:	ba 02 00 00 00       	mov    edx,0x2
c0005c78:	e8 ff c4 ff ff       	call   c000217c <st_dword>
c0005c7d:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c80:	ba 01 00 00 00       	mov    edx,0x1
c0005c85:	e8 ee c4 ff ff       	call   c0002178 <st_word>
c0005c8a:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c8d:	ba 06 00 00 00       	mov    edx,0x6
c0005c92:	e8 e1 c4 ff ff       	call   c0002178 <st_word>
c0005c97:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c9a:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9f:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005ca3:	ba 5a f8 02 c0       	mov    edx,0xc002f85a
c0005ca8:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005cac:	eb 2f                	jmp    c0005cdd <f_mkfs+0x555>
c0005cae:	8d 43 27             	lea    eax,[ebx+0x27]
c0005cb1:	ba 00 00 21 50       	mov    edx,0x50210000
c0005cb6:	e8 c1 c4 ff ff       	call   c000217c <st_dword>
c0005cbb:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005cc0:	8d 43 16             	lea    eax,[ebx+0x16]
c0005cc3:	e8 b0 c4 ff ff       	call   c0002178 <st_word>
c0005cc8:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005ccb:	b9 13 00 00 00       	mov    ecx,0x13
c0005cd0:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005cd4:	ba 6e f8 02 c0       	mov    edx,0xc002f86e
c0005cd9:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005cdd:	e8 9d c4 ff ff       	call   c000217f <mem_cpy>
c0005ce2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005ce8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005ced:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cf1:	e8 82 c4 ff ff       	call   c0002178 <st_word>
c0005cf6:	6a 01                	push   0x1
c0005cf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cfc:	53                   	push   ebx
c0005cfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d01:	e8 18 c4 ff ff       	call   c000211e <disk_write>
c0005d06:	83 c4 10             	add    esp,0x10
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	0f 85 25 02 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c0005d11:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d16:	83 f8 03             	cmp    eax,0x3
c0005d19:	0f 85 98 00 00 00    	jne    c0005db7 <f_mkfs+0x62f>
c0005d1f:	6a 01                	push   0x1
c0005d21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d25:	83 c0 06             	add    eax,0x6
c0005d28:	50                   	push   eax
c0005d29:	53                   	push   ebx
c0005d2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d2e:	e8 eb c3 ff ff       	call   c000211e <disk_write>
c0005d33:	b9 00 02 00 00       	mov    ecx,0x200
c0005d38:	31 d2                	xor    edx,edx
c0005d3a:	89 d8                	mov    eax,ebx
c0005d3c:	e8 53 c4 ff ff       	call   c0002194 <mem_set>
c0005d41:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d46:	89 d8                	mov    eax,ebx
c0005d48:	e8 2f c4 ff ff       	call   c000217c <st_dword>
c0005d4d:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d53:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d58:	e8 1f c4 ff ff       	call   c000217c <st_dword>
c0005d5d:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d60:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d66:	e8 11 c4 ff ff       	call   c000217c <st_dword>
c0005d6b:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d71:	ba 02 00 00 00       	mov    edx,0x2
c0005d76:	e8 01 c4 ff ff       	call   c000217c <st_dword>
c0005d7b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d81:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d86:	e8 ed c3 ff ff       	call   c0002178 <st_word>
c0005d8b:	6a 01                	push   0x1
c0005d8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005d91:	83 c0 07             	add    eax,0x7
c0005d94:	50                   	push   eax
c0005d95:	53                   	push   ebx
c0005d96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d9a:	e8 7f c3 ff ff       	call   c000211e <disk_write>
c0005d9f:	83 c4 20             	add    esp,0x20
c0005da2:	6a 01                	push   0x1
c0005da4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da8:	40                   	inc    eax
c0005da9:	50                   	push   eax
c0005daa:	53                   	push   ebx
c0005dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005daf:	e8 6a c3 ff ff       	call   c000211e <disk_write>
c0005db4:	83 c4 10             	add    esp,0x10
c0005db7:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005dbb:	31 d2                	xor    edx,edx
c0005dbd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005dc1:	c1 e8 09             	shr    eax,0x9
c0005dc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc8:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005dce:	89 d8                	mov    eax,ebx
c0005dd0:	e8 bf c3 ff ff       	call   c0002194 <mem_set>
c0005dd5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005dda:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005ddf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005de7:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005df0:	83 f8 01             	cmp    eax,0x1
c0005df3:	0f 44 d1             	cmove  edx,ecx
c0005df6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005dfa:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dff:	75 21                	jne    c0005e22 <f_mkfs+0x69a>
c0005e01:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005e06:	89 d8                	mov    eax,ebx
c0005e08:	e8 6f c3 ff ff       	call   c000217c <st_dword>
c0005e0d:	8d 43 04             	lea    eax,[ebx+0x4]
c0005e10:	83 ca ff             	or     edx,0xffffffff
c0005e13:	e8 64 c3 ff ff       	call   c000217c <st_dword>
c0005e18:	8d 43 08             	lea    eax,[ebx+0x8]
c0005e1b:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005e20:	eb 06                	jmp    c0005e28 <f_mkfs+0x6a0>
c0005e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005e26:	89 d8                	mov    eax,ebx
c0005e28:	e8 4f c3 ff ff       	call   c000217c <st_dword>
c0005e2d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e35:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005e39:	0f 46 c6             	cmovbe eax,esi
c0005e3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005e40:	50                   	push   eax
c0005e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e45:	53                   	push   ebx
c0005e46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e4a:	e8 cf c2 ff ff       	call   c000211e <disk_write>
c0005e4f:	83 c4 10             	add    esp,0x10
c0005e52:	85 c0                	test   eax,eax
c0005e54:	0f 85 dc 00 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c0005e5a:	b9 00 02 00 00       	mov    ecx,0x200
c0005e5f:	31 d2                	xor    edx,edx
c0005e61:	89 d8                	mov    eax,ebx
c0005e63:	e8 2c c3 ff ff       	call   c0002194 <mem_set>
c0005e68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005e6c:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005e70:	29 ce                	sub    esi,ecx
c0005e72:	75 bd                	jne    c0005e31 <f_mkfs+0x6a9>
c0005e74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e78:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005e80:	40                   	inc    eax
c0005e81:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e85:	0f 87 6f ff ff ff    	ja     c0005dfa <f_mkfs+0x672>
c0005e8b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e90:	83 f8 03             	cmp    eax,0x3
c0005e93:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005e98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9c:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005ea0:	0f 46 f7             	cmovbe esi,edi
c0005ea3:	56                   	push   esi
c0005ea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ea8:	53                   	push   ebx
c0005ea9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ead:	e8 6c c2 ff ff       	call   c000211e <disk_write>
c0005eb2:	83 c4 10             	add    esp,0x10
c0005eb5:	85 c0                	test   eax,eax
c0005eb7:	75 7d                	jne    c0005f36 <f_mkfs+0x7ae>
c0005eb9:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005ebd:	29 f7                	sub    edi,esi
c0005ebf:	75 d7                	jne    c0005e98 <f_mkfs+0x710>
c0005ec1:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ec6:	b9 0c 00 00 00       	mov    ecx,0xc
c0005ecb:	83 f8 03             	cmp    eax,0x3
c0005ece:	74 1e                	je     c0005eee <f_mkfs+0x766>
c0005ed0:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005ed8:	b9 06 00 00 00       	mov    ecx,0x6
c0005edd:	77 0f                	ja     c0005eee <f_mkfs+0x766>
c0005edf:	83 f8 02             	cmp    eax,0x2
c0005ee2:	b9 04 00 00 00       	mov    ecx,0x4
c0005ee7:	74 05                	je     c0005eee <f_mkfs+0x766>
c0005ee9:	b9 01 00 00 00       	mov    ecx,0x1
c0005eee:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ef3:	75 2a                	jne    c0005f1f <f_mkfs+0x797>
c0005ef5:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005efd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005f01:	83 ec 0c             	sub    esp,0xc
c0005f04:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005f08:	53                   	push   ebx
c0005f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f0d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005f11:	e8 87 d2 ff ff       	call   c000319d <create_partition>
c0005f16:	83 c4 10             	add    esp,0x10
c0005f19:	85 c0                	test   eax,eax
c0005f1b:	89 c6                	mov    esi,eax
c0005f1d:	75 2e                	jne    c0005f4d <f_mkfs+0x7c5>
c0005f1f:	50                   	push   eax
c0005f20:	31 f6                	xor    esi,esi
c0005f22:	6a 00                	push   0x0
c0005f24:	6a 00                	push   0x0
c0005f26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005f2a:	e8 05 c2 ff ff       	call   c0002134 <disk_ioctl>
c0005f2f:	83 c4 10             	add    esp,0x10
c0005f32:	85 c0                	test   eax,eax
c0005f34:	74 17                	je     c0005f4d <f_mkfs+0x7c5>
c0005f36:	85 ed                	test   ebp,ebp
c0005f38:	75 0c                	jne    c0005f46 <f_mkfs+0x7be>
c0005f3a:	83 ec 0c             	sub    esp,0xc
c0005f3d:	53                   	push   ebx
c0005f3e:	e8 6d 00 00 00       	call   c0005fb0 <ff_memfree>
c0005f43:	83 c4 10             	add    esp,0x10
c0005f46:	be 01 00 00 00       	mov    esi,0x1
c0005f4b:	eb 40                	jmp    c0005f8d <f_mkfs+0x805>
c0005f4d:	85 ed                	test   ebp,ebp
c0005f4f:	75 3c                	jne    c0005f8d <f_mkfs+0x805>
c0005f51:	83 ec 0c             	sub    esp,0xc
c0005f54:	53                   	push   ebx
c0005f55:	e8 56 00 00 00       	call   c0005fb0 <ff_memfree>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	eb 2e                	jmp    c0005f8d <f_mkfs+0x805>
c0005f5f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f64:	0f 85 46 fb ff ff    	jne    c0005ab0 <f_mkfs+0x328>
c0005f6a:	e9 20 fc ff ff       	jmp    c0005b8f <f_mkfs+0x407>
c0005f6f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f74:	0f 85 3c fb ff ff    	jne    c0005ab6 <f_mkfs+0x32e>
c0005f7a:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f80:	89 cf                	mov    edi,ecx
c0005f82:	0f 86 30 fa ff ff    	jbe    c00059b8 <f_mkfs+0x230>
c0005f88:	e9 02 fc ff ff       	jmp    c0005b8f <f_mkfs+0x407>
c0005f8d:	83 c4 5c             	add    esp,0x5c
c0005f90:	89 f0                	mov    eax,esi
c0005f92:	5b                   	pop    ebx
c0005f93:	5e                   	pop    esi
c0005f94:	5f                   	pop    edi
c0005f95:	5d                   	pop    ebp
c0005f96:	c3                   	ret    
c0005f97:	90                   	nop

c0005f98 <ff_memalloc>:
c0005f98:	83 ec 0c             	sub    esp,0xc
c0005f9b:	83 ec 0c             	sub    esp,0xc
c0005f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa2:	e8 6d 07 01 00       	call   c0016714 <malloc>
c0005fa7:	83 c4 10             	add    esp,0x10
c0005faa:	83 c4 0c             	add    esp,0xc
c0005fad:	c3                   	ret    
c0005fae:	66 90                	xchg   ax,ax

c0005fb0 <ff_memfree>:
c0005fb0:	83 ec 0c             	sub    esp,0xc
c0005fb3:	83 ec 0c             	sub    esp,0xc
c0005fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fba:	e8 65 07 01 00       	call   c0016724 <free>
c0005fbf:	83 c4 10             	add    esp,0x10
c0005fc2:	90                   	nop
c0005fc3:	83 c4 0c             	add    esp,0xc
c0005fc6:	c3                   	ret    
c0005fc7:	90                   	nop

c0005fc8 <ff_uni2oem>:
c0005fc8:	83 ec 14             	sub    esp,0x14
c0005fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fcf:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fd3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fda:	c7 44 24 0c a0 fc 02 c0 	mov    DWORD PTR [esp+0xc],0xc002fca0
c0005fe2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fe7:	77 0b                	ja     c0005ff4 <ff_uni2oem+0x2c>
c0005fe9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff2:	eb 64                	jmp    c0006058 <ff_uni2oem+0x90>
c0005ff4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ffc:	77 5a                	ja     c0006058 <ff_uni2oem+0x90>
c0005ffe:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006002:	3d b5 01 00 00       	cmp    eax,0x1b5
c0006007:	75 4f                	jne    c0006058 <ff_uni2oem+0x90>
c0006009:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0006010:	eb 12                	jmp    c0006024 <ff_uni2oem+0x5c>
c0006012:	66 90                	xchg   ax,ax
c0006014:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006019:	83 c0 01             	add    eax,0x1
c000601c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006021:	8d 76 00             	lea    esi,[esi+0x0]
c0006024:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006029:	83 f8 7f             	cmp    eax,0x7f
c000602c:	77 1a                	ja     c0006048 <ff_uni2oem+0x80>
c000602e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006033:	8d 14 00             	lea    edx,[eax+eax*1]
c0006036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000603a:	01 d0                	add    eax,edx
c000603c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000603f:	0f b7 c0             	movzx  eax,ax
c0006042:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006046:	75 cc                	jne    c0006014 <ff_uni2oem+0x4c>
c0006048:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000604d:	83 e8 80             	sub    eax,0xffffff80
c0006050:	0f b6 c0             	movzx  eax,al
c0006053:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006058:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000605d:	83 c4 14             	add    esp,0x14
c0006060:	c3                   	ret    
c0006061:	8d 76 00             	lea    esi,[esi+0x0]

c0006064 <ff_oem2uni>:
c0006064:	83 ec 18             	sub    esp,0x18
c0006067:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000606b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000606f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0006074:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006078:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000607f:	c7 44 24 10 a0 fc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002fca0
c0006087:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000608c:	83 f8 7f             	cmp    eax,0x7f
c000608f:	77 0b                	ja     c000609c <ff_oem2uni+0x38>
c0006091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006095:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000609a:	eb 34                	jmp    c00060d0 <ff_oem2uni+0x6c>
c000609c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00060a0:	3d b5 01 00 00       	cmp    eax,0x1b5
c00060a5:	75 29                	jne    c00060d0 <ff_oem2uni+0x6c>
c00060a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060ac:	3d ff 00 00 00       	cmp    eax,0xff
c00060b1:	77 1d                	ja     c00060d0 <ff_oem2uni+0x6c>
c00060b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060b8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00060bd:	8d 14 00             	lea    edx,[eax+eax*1]
c00060c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060c4:	01 d0                	add    eax,edx
c00060c6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060c9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060ce:	66 90                	xchg   ax,ax
c00060d0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060d5:	83 c4 18             	add    esp,0x18
c00060d8:	c3                   	ret    
c00060d9:	8d 76 00             	lea    esi,[esi+0x0]

c00060dc <ff_wtoupper>:
c00060dc:	83 ec 10             	sub    esp,0x10
c00060df:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060e7:	0f 87 a7 01 00 00    	ja     c0006294 <ff_wtoupper+0x1b8>
c00060ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060f1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060f6:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060fb:	3d ff 0f 00 00       	cmp    eax,0xfff
c0006100:	77 0a                	ja     c000610c <ff_wtoupper+0x30>
c0006102:	b8 a0 fa 02 c0       	mov    eax,0xc002faa0
c0006107:	eb 0b                	jmp    c0006114 <ff_wtoupper+0x38>
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	b8 e0 f9 02 c0       	mov    eax,0xc002f9e0
c0006111:	8d 76 00             	lea    esi,[esi+0x0]
c0006114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000611c:	8d 50 02             	lea    edx,[eax+0x2]
c000611f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006123:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006126:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000612b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006130:	85 c0                	test   eax,eax
c0006132:	0f 84 50 01 00 00    	je     c0006288 <ff_wtoupper+0x1ac>
c0006138:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000613d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006142:	39 c2                	cmp    edx,eax
c0006144:	0f 82 3e 01 00 00    	jb     c0006288 <ff_wtoupper+0x1ac>
c000614a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000614e:	8d 50 02             	lea    edx,[eax+0x2]
c0006151:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006155:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006158:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000615d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006162:	c1 e8 08             	shr    eax,0x8
c0006165:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000616a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000616f:	0f b6 c0             	movzx  eax,al
c0006172:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006177:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000617c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006181:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006186:	01 ca                	add    edx,ecx
c0006188:	39 d0                	cmp    eax,edx
c000618a:	0f 8d d4 00 00 00    	jge    c0006264 <ff_wtoupper+0x188>
c0006190:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006195:	83 f8 08             	cmp    eax,0x8
c0006198:	0f 87 e6 00 00 00    	ja     c0006284 <ff_wtoupper+0x1a8>
c000619e:	8b 04 85 a0 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0660]
c00061a5:	ff e0                	jmp    eax
c00061a7:	90                   	nop
c00061a8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00061ad:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00061b2:	29 c2                	sub    edx,eax
c00061b4:	89 d0                	mov    eax,edx
c00061b6:	8d 14 00             	lea    edx,[eax+eax*1]
c00061b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061bd:	01 d0                	add    eax,edx
c00061bf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00061c2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c7:	e9 94 00 00 00       	jmp    c0006260 <ff_wtoupper+0x184>
c00061cc:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061d5:	89 d1                	mov    ecx,edx
c00061d7:	29 c1                	sub    ecx,eax
c00061d9:	89 c8                	mov    eax,ecx
c00061db:	83 e0 01             	and    eax,0x1
c00061de:	89 c2                	mov    edx,eax
c00061e0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e5:	29 d0                	sub    eax,edx
c00061e7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061ec:	eb 72                	jmp    c0006260 <ff_wtoupper+0x184>
c00061ee:	66 90                	xchg   ax,ax
c00061f0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f5:	83 e8 10             	sub    eax,0x10
c00061f8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061fd:	eb 61                	jmp    c0006260 <ff_wtoupper+0x184>
c00061ff:	90                   	nop
c0006200:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006205:	83 e8 20             	sub    eax,0x20
c0006208:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000620d:	eb 51                	jmp    c0006260 <ff_wtoupper+0x184>
c000620f:	90                   	nop
c0006210:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006215:	83 e8 30             	sub    eax,0x30
c0006218:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000621d:	eb 41                	jmp    c0006260 <ff_wtoupper+0x184>
c000621f:	90                   	nop
c0006220:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006225:	83 e8 1a             	sub    eax,0x1a
c0006228:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000622d:	eb 31                	jmp    c0006260 <ff_wtoupper+0x184>
c000622f:	90                   	nop
c0006230:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006235:	83 c0 08             	add    eax,0x8
c0006238:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623d:	eb 21                	jmp    c0006260 <ff_wtoupper+0x184>
c000623f:	90                   	nop
c0006240:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006245:	83 e8 50             	sub    eax,0x50
c0006248:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000624d:	eb 11                	jmp    c0006260 <ff_wtoupper+0x184>
c000624f:	90                   	nop
c0006250:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006255:	2d 60 1c 00 00       	sub    eax,0x1c60
c000625a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000625f:	90                   	nop
c0006260:	eb 22                	jmp    c0006284 <ff_wtoupper+0x1a8>
c0006262:	66 90                	xchg   ax,ax
c0006264:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006269:	85 c0                	test   eax,eax
c000626b:	0f 85 a7 fe ff ff    	jne    c0006118 <ff_wtoupper+0x3c>
c0006271:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006276:	d1 e0                	shl    eax,1
c0006278:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000627c:	e9 97 fe ff ff       	jmp    c0006118 <ff_wtoupper+0x3c>
c0006281:	8d 76 00             	lea    esi,[esi+0x0]
c0006284:	90                   	nop
c0006285:	8d 76 00             	lea    esi,[esi+0x0]
c0006288:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000628d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006291:	8d 76 00             	lea    esi,[esi+0x0]
c0006294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006298:	83 c4 10             	add    esp,0x10
c000629b:	c3                   	ret    

c000629c <utf2ucs>:
c000629c:	57                   	push   edi
c000629d:	31 c9                	xor    ecx,ecx
c000629f:	56                   	push   esi
c00062a0:	89 d7                	mov    edi,edx
c00062a2:	53                   	push   ebx
c00062a3:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c00062a7:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c00062ab:	89 de                	mov    esi,ebx
c00062ad:	c1 fe 08             	sar    esi,0x8
c00062b0:	89 f2                	mov    edx,esi
c00062b2:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c00062b5:	41                   	inc    ecx
c00062b6:	85 db                	test   ebx,ebx
c00062b8:	75 e9                	jne    c00062a3 <utf2ucs+0x7>
c00062ba:	5b                   	pop    ebx
c00062bb:	5e                   	pop    esi
c00062bc:	5f                   	pop    edi
c00062bd:	c3                   	ret    

c00062be <ucs2utfn>:
c00062be:	83 e1 fe             	and    ecx,0xfffffffe
c00062c1:	01 d1                	add    ecx,edx
c00062c3:	39 d1                	cmp    ecx,edx
c00062c5:	75 04                	jne    c00062cb <ucs2utfn+0xd>
c00062c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062ca:	c3                   	ret    
c00062cb:	57                   	push   edi
c00062cc:	56                   	push   esi
c00062cd:	53                   	push   ebx
c00062ce:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062d1:	83 c2 02             	add    edx,0x2
c00062d4:	89 de                	mov    esi,ebx
c00062d6:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062da:	c1 e6 08             	shl    esi,0x8
c00062dd:	09 f3                	or     ebx,esi
c00062df:	83 fb 3b             	cmp    ebx,0x3b
c00062e2:	74 50                	je     c0006334 <ucs2utfn+0x76>
c00062e4:	83 fb 7f             	cmp    ebx,0x7f
c00062e7:	7f 05                	jg     c00062ee <ucs2utfn+0x30>
c00062e9:	88 18                	mov    BYTE PTR [eax],bl
c00062eb:	40                   	inc    eax
c00062ec:	eb 42                	jmp    c0006330 <ucs2utfn+0x72>
c00062ee:	89 df                	mov    edi,ebx
c00062f0:	89 de                	mov    esi,ebx
c00062f2:	c1 fe 06             	sar    esi,0x6
c00062f5:	83 e7 3f             	and    edi,0x3f
c00062f8:	83 cf 80             	or     edi,0xffffff80
c00062fb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006301:	7f 12                	jg     c0006315 <ucs2utfn+0x57>
c0006303:	83 ce c0             	or     esi,0xffffffc0
c0006306:	83 c0 02             	add    eax,0x2
c0006309:	89 f3                	mov    ebx,esi
c000630b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000630e:	89 fb                	mov    ebx,edi
c0006310:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006313:	eb 1b                	jmp    c0006330 <ucs2utfn+0x72>
c0006315:	c1 fb 0c             	sar    ebx,0xc
c0006318:	83 e6 3f             	and    esi,0x3f
c000631b:	83 cb e0             	or     ebx,0xffffffe0
c000631e:	83 ce 80             	or     esi,0xffffff80
c0006321:	88 18                	mov    BYTE PTR [eax],bl
c0006323:	89 f3                	mov    ebx,esi
c0006325:	83 c0 03             	add    eax,0x3
c0006328:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000632b:	89 fb                	mov    ebx,edi
c000632d:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006330:	39 d1                	cmp    ecx,edx
c0006332:	75 9a                	jne    c00062ce <ucs2utfn+0x10>
c0006334:	5b                   	pop    ebx
c0006335:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006338:	5e                   	pop    esi
c0006339:	5f                   	pop    edi
c000633a:	c3                   	ret    

c000633b <isjoliet>:
c000633b:	31 d2                	xor    edx,edx
c000633d:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006340:	75 26                	jne    c0006368 <isjoliet+0x2d>
c0006342:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006346:	75 20                	jne    c0006368 <isjoliet+0x2d>
c0006348:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c000634c:	ba 02 00 00 00       	mov    edx,0x2
c0006351:	83 f8 43             	cmp    eax,0x43
c0006354:	74 12                	je     c0006368 <isjoliet+0x2d>
c0006356:	83 f8 45             	cmp    eax,0x45
c0006359:	ba 03 00 00 00       	mov    edx,0x3
c000635e:	74 08                	je     c0006368 <isjoliet+0x2d>
c0006360:	31 d2                	xor    edx,edx
c0006362:	83 f8 40             	cmp    eax,0x40
c0006365:	0f 94 c2             	sete   dl
c0006368:	89 d0                	mov    eax,edx
c000636a:	c3                   	ret    

c000636b <htohl_32>:
c000636b:	8b 00                	mov    eax,DWORD PTR [eax]
c000636d:	c3                   	ret    

c000636e <iso_733>:
c000636e:	eb fb                	jmp    c000636b <htohl_32>

c0006370 <bgrad_cache>:
c0006370:	83 fa 0e             	cmp    edx,0xe
c0006373:	77 16                	ja     c000638b <bgrad_cache+0x1b>
c0006375:	53                   	push   ebx
c0006376:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006379:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000637d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006380:	42                   	inc    edx
c0006381:	83 fa 0f             	cmp    edx,0xf
c0006384:	75 f3                	jne    c0006379 <bgrad_cache+0x9>
c0006386:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006389:	5b                   	pop    ebx
c000638a:	c3                   	ret    
c000638b:	c3                   	ret    

c000638c <ucscompare>:
c000638c:	55                   	push   ebp
c000638d:	57                   	push   edi
c000638e:	89 c7                	mov    edi,eax
c0006390:	56                   	push   esi
c0006391:	89 d6                	mov    esi,edx
c0006393:	53                   	push   ebx
c0006394:	31 d2                	xor    edx,edx
c0006396:	83 ec 1c             	sub    esp,0x1c
c0006399:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000639d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c00063a2:	c1 e3 08             	shl    ebx,0x8
c00063a5:	09 c3                	or     ebx,eax
c00063a7:	39 ca                	cmp    edx,ecx
c00063a9:	7d 42                	jge    c00063ed <ucscompare+0x61>
c00063ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00063af:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c00063b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00063b7:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c00063bc:	c1 e0 08             	shl    eax,0x8
c00063bf:	09 e8                	or     eax,ebp
c00063c1:	83 f8 3b             	cmp    eax,0x3b
c00063c4:	74 27                	je     c00063ed <ucscompare+0x61>
c00063c6:	83 ec 0c             	sub    esp,0xc
c00063c9:	50                   	push   eax
c00063ca:	e8 b1 a5 ff ff       	call   c0000980 <tolower>
c00063cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063d2:	89 c5                	mov    ebp,eax
c00063d4:	e8 a7 a5 ff ff       	call   c0000980 <tolower>
c00063d9:	83 c4 10             	add    esp,0x10
c00063dc:	39 c5                	cmp    ebp,eax
c00063de:	75 20                	jne    c0006400 <ucscompare+0x74>
c00063e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063e8:	83 c2 02             	add    edx,0x2
c00063eb:	eb ac                	jmp    c0006399 <ucscompare+0xd>
c00063ed:	83 fb 2f             	cmp    ebx,0x2f
c00063f0:	0f 95 c2             	setne  dl
c00063f3:	31 c0                	xor    eax,eax
c00063f5:	85 db                	test   ebx,ebx
c00063f7:	0f 95 c0             	setne  al
c00063fa:	21 d0                	and    eax,edx
c00063fc:	f7 d8                	neg    eax
c00063fe:	eb 03                	jmp    c0006403 <ucscompare+0x77>
c0006400:	83 c8 ff             	or     eax,0xffffffff
c0006403:	83 c4 1c             	add    esp,0x1c
c0006406:	5b                   	pop    ebx
c0006407:	5e                   	pop    esi
c0006408:	5f                   	pop    edi
c0006409:	5d                   	pop    ebp
c000640a:	c3                   	ret    

c000640b <fncompare>:
c000640b:	55                   	push   ebp
c000640c:	57                   	push   edi
c000640d:	89 c7                	mov    edi,eax
c000640f:	56                   	push   esi
c0006410:	89 ce                	mov    esi,ecx
c0006412:	53                   	push   ebx
c0006413:	31 db                	xor    ebx,ebx
c0006415:	83 ec 1c             	sub    esp,0x1c
c0006418:	39 d3                	cmp    ebx,edx
c000641a:	7d 45                	jge    c0006461 <fncompare+0x56>
c000641c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006420:	83 f8 3b             	cmp    eax,0x3b
c0006423:	74 3c                	je     c0006461 <fncompare+0x56>
c0006425:	83 f8 2e             	cmp    eax,0x2e
c0006428:	75 0e                	jne    c0006438 <fncompare+0x2d>
c000642a:	8d 4a ff             	lea    ecx,[edx-0x1]
c000642d:	39 d9                	cmp    ecx,ebx
c000642f:	74 30                	je     c0006461 <fncompare+0x56>
c0006431:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006436:	74 29                	je     c0006461 <fncompare+0x56>
c0006438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000643c:	83 ec 0c             	sub    esp,0xc
c000643f:	50                   	push   eax
c0006440:	e8 3b a5 ff ff       	call   c0000980 <tolower>
c0006445:	89 c5                	mov    ebp,eax
c0006447:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000644b:	89 04 24             	mov    DWORD PTR [esp],eax
c000644e:	e8 2d a5 ff ff       	call   c0000980 <tolower>
c0006453:	83 c4 10             	add    esp,0x10
c0006456:	39 c5                	cmp    ebp,eax
c0006458:	75 1e                	jne    c0006478 <fncompare+0x6d>
c000645a:	43                   	inc    ebx
c000645b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645f:	eb b7                	jmp    c0006418 <fncompare+0xd>
c0006461:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006465:	83 fa 2f             	cmp    edx,0x2f
c0006468:	0f 95 c1             	setne  cl
c000646b:	31 c0                	xor    eax,eax
c000646d:	85 d2                	test   edx,edx
c000646f:	0f 95 c0             	setne  al
c0006472:	21 c8                	and    eax,ecx
c0006474:	f7 d8                	neg    eax
c0006476:	eb 03                	jmp    c000647b <fncompare+0x70>
c0006478:	83 c8 ff             	or     eax,0xffffffff
c000647b:	83 c4 1c             	add    esp,0x1c
c000647e:	5b                   	pop    ebx
c000647f:	5e                   	pop    esi
c0006480:	5f                   	pop    edi
c0006481:	5d                   	pop    ebp
c0006482:	c3                   	ret    

c0006483 <bclear_cache>:
c0006483:	83 ec 18             	sub    esp,0x18
c0006486:	68 a0 fd 02 c0       	push   0xc002fda0
c000648b:	e8 84 31 02 00       	call   c0029614 <iso_kprintf>
c0006490:	83 c4 10             	add    esp,0x10
c0006493:	31 c0                	xor    eax,eax
c0006495:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c000649c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00064a2:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c00064a9:	40                   	inc    eax
c00064aa:	83 f8 10             	cmp    eax,0x10
c00064ad:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00064b3:	75 e0                	jne    c0006495 <bclear_cache+0x12>
c00064b5:	83 c4 0c             	add    esp,0xc
c00064b8:	c3                   	ret    

c00064b9 <bclear>:
c00064b9:	eb c8                	jmp    c0006483 <bclear_cache>

c00064bb <iso_break_all>:
c00064bb:	83 ec 18             	sub    esp,0x18
c00064be:	68 ae fd 02 c0       	push   0xc002fdae
c00064c3:	e8 4c 31 02 00       	call   c0029614 <iso_kprintf>
c00064c8:	83 c4 10             	add    esp,0x10
c00064cb:	31 c0                	xor    eax,eax
c00064cd:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c00064d7:	05 94 00 00 00       	add    eax,0x94
c00064dc:	3d 40 09 00 00       	cmp    eax,0x940
c00064e1:	75 ea                	jne    c00064cd <iso_break_all+0x12>
c00064e3:	83 c4 0c             	add    esp,0xc
c00064e6:	c3                   	ret    

c00064e7 <isoReadDiscSector>:
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c00064f1:	50                   	push   eax
c00064f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064fe:	e8 b5 30 02 00       	call   c00295b8 <isoReadDiscSectorHelper>
c0006503:	83 c4 1c             	add    esp,0x1c
c0006506:	c3                   	ret    

c0006507 <bread_cache>:
c0006507:	55                   	push   ebp
c0006508:	57                   	push   edi
c0006509:	89 d7                	mov    edi,edx
c000650b:	56                   	push   esi
c000650c:	ba 0f 00 00 00       	mov    edx,0xf
c0006511:	53                   	push   ebx
c0006512:	89 c6                	mov    esi,eax
c0006514:	83 ec 0c             	sub    esp,0xc
c0006517:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000651a:	39 38                	cmp    DWORD PTR [eax],edi
c000651c:	74 3c                	je     c000655a <bread_cache+0x53>
c000651e:	4a                   	dec    edx
c000651f:	83 fa ff             	cmp    edx,0xffffffff
c0006522:	75 f3                	jne    c0006517 <bread_cache+0x10>
c0006524:	31 db                	xor    ebx,ebx
c0006526:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006529:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000652c:	74 08                	je     c0006536 <bread_cache+0x2f>
c000652e:	43                   	inc    ebx
c000652f:	83 fb 10             	cmp    ebx,0x10
c0006532:	75 f2                	jne    c0006526 <bread_cache+0x1f>
c0006534:	31 db                	xor    ebx,ebx
c0006536:	50                   	push   eax
c0006537:	6a 01                	push   0x1
c0006539:	57                   	push   edi
c000653a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000653d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006540:	83 c0 04             	add    eax,0x4
c0006543:	50                   	push   eax
c0006544:	e8 9e ff ff ff       	call   c00064e7 <isoReadDiscSector>
c0006549:	83 c4 10             	add    esp,0x10
c000654c:	83 c9 ff             	or     ecx,0xffffffff
c000654f:	85 c0                	test   eax,eax
c0006551:	78 13                	js     c0006566 <bread_cache+0x5f>
c0006553:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006556:	89 da                	mov    edx,ebx
c0006558:	89 38                	mov    DWORD PTR [eax],edi
c000655a:	89 f0                	mov    eax,esi
c000655c:	e8 0f fe ff ff       	call   c0006370 <bgrad_cache>
c0006561:	b9 0f 00 00 00       	mov    ecx,0xf
c0006566:	83 c4 0c             	add    esp,0xc
c0006569:	89 c8                	mov    eax,ecx
c000656b:	5b                   	pop    ebx
c000656c:	5e                   	pop    esi
c000656d:	5f                   	pop    edi
c000656e:	5d                   	pop    ebp
c000656f:	c3                   	ret    

c0006570 <biread>:
c0006570:	89 c2                	mov    edx,eax
c0006572:	b8 80 60 03 c0       	mov    eax,0xc0036080
c0006577:	eb 8e                	jmp    c0006507 <bread_cache>

c0006579 <bdread>:
c0006579:	89 c2                	mov    edx,eax
c000657b:	b8 20 60 03 c0       	mov    eax,0xc0036020
c0006580:	eb 85                	jmp    c0006507 <bread_cache>

c0006582 <strnicmp>:
c0006582:	55                   	push   ebp
c0006583:	57                   	push   edi
c0006584:	31 ff                	xor    edi,edi
c0006586:	56                   	push   esi
c0006587:	53                   	push   ebx
c0006588:	83 ec 0c             	sub    esp,0xc
c000658b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000658f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006593:	74 43                	je     c00065d8 <strnicmp+0x56>
c0006595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006599:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000659d:	85 c0                	test   eax,eax
c000659f:	74 37                	je     c00065d8 <strnicmp+0x56>
c00065a1:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00065a5:	85 d2                	test   edx,edx
c00065a7:	74 2f                	je     c00065d8 <strnicmp+0x56>
c00065a9:	8d 6f 01             	lea    ebp,[edi+0x1]
c00065ac:	39 d0                	cmp    eax,edx
c00065ae:	75 04                	jne    c00065b4 <strnicmp+0x32>
c00065b0:	89 ef                	mov    edi,ebp
c00065b2:	eb db                	jmp    c000658f <strnicmp+0xd>
c00065b4:	83 ec 0c             	sub    esp,0xc
c00065b7:	50                   	push   eax
c00065b8:	e8 c3 a3 ff ff       	call   c0000980 <tolower>
c00065bd:	89 c3                	mov    ebx,eax
c00065bf:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c00065c3:	89 ef                	mov    edi,ebp
c00065c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00065c8:	e8 b3 a3 ff ff       	call   c0000980 <tolower>
c00065cd:	83 c4 10             	add    esp,0x10
c00065d0:	29 c3                	sub    ebx,eax
c00065d2:	89 d8                	mov    eax,ebx
c00065d4:	74 b9                	je     c000658f <strnicmp+0xd>
c00065d6:	eb 02                	jmp    c00065da <strnicmp+0x58>
c00065d8:	31 c0                	xor    eax,eax
c00065da:	83 c4 0c             	add    esp,0xc
c00065dd:	5b                   	pop    ebx
c00065de:	5e                   	pop    esi
c00065df:	5f                   	pop    edi
c00065e0:	5d                   	pop    ebp
c00065e1:	c3                   	ret    

c00065e2 <find_object>:
c00065e2:	55                   	push   ebp
c00065e3:	57                   	push   edi
c00065e4:	89 c7                	mov    edi,eax
c00065e6:	56                   	push   esi
c00065e7:	53                   	push   ebx
c00065e8:	89 d3                	mov    ebx,edx
c00065ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00065f4:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065fb:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006602:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006606:	74 0b                	je     c0006613 <find_object+0x31>
c0006608:	8d 44 24 20          	lea    eax,[esp+0x20]
c000660c:	89 fa                	mov    edx,edi
c000660e:	e8 89 fc ff ff       	call   c000629c <utf2ucs>
c0006613:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006616:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000661a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000661f:	7e 11                	jle    c0006632 <find_object+0x50>
c0006621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006625:	e8 46 ff ff ff       	call   c0006570 <biread>
c000662a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000662e:	85 c0                	test   eax,eax
c0006630:	79 07                	jns    c0006639 <find_object+0x57>
c0006632:	31 db                	xor    ebx,ebx
c0006634:	e9 47 01 00 00       	jmp    c0006780 <find_object+0x19e>
c0006639:	31 ed                	xor    ebp,ebp
c000663b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000663f:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006646:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c000664a:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000664d:	85 f6                	test   esi,esi
c000664f:	75 0e                	jne    c000665f <find_object+0x7d>
c0006651:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006655:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c000665d:	eb bb                	jmp    c000661a <find_object+0x38>
c000665f:	8b 0d 94 76 03 c0    	mov    ecx,DWORD PTR ds:0xc0037694
c0006665:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006669:	85 c9                	test   ecx,ecx
c000666b:	89 d0                	mov    eax,edx
c000666d:	74 2b                	je     c000669a <find_object+0xb8>
c000666f:	8d 43 21             	lea    eax,[ebx+0x21]
c0006672:	89 d1                	mov    ecx,edx
c0006674:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006678:	e8 0f fd ff ff       	call   c000638c <ucscompare>
c000667d:	85 c0                	test   eax,eax
c000667f:	0f 84 cd 00 00 00    	je     c0006752 <find_object+0x170>
c0006685:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006688:	01 c5                	add    ebp,eax
c000668a:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006690:	7f bf                	jg     c0006651 <find_object+0x6f>
c0006692:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006696:	7f a3                	jg     c000663b <find_object+0x59>
c0006698:	eb b7                	jmp    c0006651 <find_object+0x6f>
c000669a:	29 d6                	sub    esi,edx
c000669c:	a8 01                	test   al,0x1
c000669e:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c00066a2:	74 05                	je     c00066a9 <find_object+0xc7>
c00066a4:	83 ee 21             	sub    esi,0x21
c00066a7:	eb 6a                	jmp    c0006713 <find_object+0x131>
c00066a9:	42                   	inc    edx
c00066aa:	83 ee 22             	sub    esi,0x22
c00066ad:	eb 64                	jmp    c0006713 <find_object+0x131>
c00066af:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00066b2:	48                   	dec    eax
c00066b3:	3c 01                	cmp    al,0x1
c00066b5:	77 61                	ja     c0006718 <find_object+0x136>
c00066b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00066bb:	50                   	push   eax
c00066bc:	6a 02                	push   0x2
c00066be:	68 bd fd 02 c0       	push   0xc002fdbd
c00066c3:	52                   	push   edx
c00066c4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00066c8:	e8 43 a1 ff ff       	call   c0000810 <strncmp>
c00066cd:	83 c4 10             	add    esp,0x10
c00066d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00066d4:	85 c0                	test   eax,eax
c00066d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00066da:	75 2f                	jne    c000670b <find_object+0x129>
c00066dc:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c00066e0:	50                   	push   eax
c00066e1:	8d 42 05             	lea    eax,[edx+0x5]
c00066e4:	83 e9 05             	sub    ecx,0x5
c00066e7:	51                   	push   ecx
c00066e8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00066ec:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00066f0:	50                   	push   eax
c00066f1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066f5:	50                   	push   eax
c00066f6:	e8 95 9f ff ff       	call   c0000690 <strncpy>
c00066fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00066ff:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c0006704:	83 c4 10             	add    esp,0x10
c0006707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000670b:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000670f:	29 c6                	sub    esi,eax
c0006711:	01 c2                	add    edx,eax
c0006713:	83 fe 03             	cmp    esi,0x3
c0006716:	7f 97                	jg     c00066af <find_object+0xcd>
c0006718:	85 c9                	test   ecx,ecx
c000671a:	7e 40                	jle    c000675c <find_object+0x17a>
c000671c:	51                   	push   ecx
c000671d:	51                   	push   ecx
c000671e:	6a 2f                	push   0x2f
c0006720:	57                   	push   edi
c0006721:	e8 aa a0 ff ff       	call   c00007d0 <strchr>
c0006726:	83 c4 10             	add    esp,0x10
c0006729:	85 c0                	test   eax,eax
c000672b:	74 04                	je     c0006731 <find_object+0x14f>
c000672d:	29 f8                	sub    eax,edi
c000672f:	eb 0c                	jmp    c000673d <find_object+0x15b>
c0006731:	83 ec 0c             	sub    esp,0xc
c0006734:	57                   	push   edi
c0006735:	e8 46 9e ff ff       	call   c0000580 <strlen>
c000673a:	83 c4 10             	add    esp,0x10
c000673d:	52                   	push   edx
c000673e:	50                   	push   eax
c000673f:	57                   	push   edi
c0006740:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006744:	50                   	push   eax
c0006745:	e8 38 fe ff ff       	call   c0006582 <strnicmp>
c000674a:	83 c4 10             	add    esp,0x10
c000674d:	e9 2b ff ff ff       	jmp    c000667d <find_object+0x9b>
c0006752:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006756:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000675a:	eb 1e                	jmp    c000677a <find_object+0x198>
c000675c:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006760:	8d 43 21             	lea    eax,[ebx+0x21]
c0006763:	89 f9                	mov    ecx,edi
c0006765:	e8 a1 fc ff ff       	call   c000640b <fncompare>
c000676a:	85 c0                	test   eax,eax
c000676c:	0f 85 13 ff ff ff    	jne    c0006685 <find_object+0xa3>
c0006772:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006776:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000677a:	0f 85 05 ff ff ff    	jne    c0006685 <find_object+0xa3>
c0006780:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006786:	89 d8                	mov    eax,ebx
c0006788:	5b                   	pop    ebx
c0006789:	5e                   	pop    esi
c000678a:	5f                   	pop    edi
c000678b:	5d                   	pop    ebp
c000678c:	c3                   	ret    

c000678d <find_object_path>:
c000678d:	55                   	push   ebp
c000678e:	57                   	push   edi
c000678f:	89 d7                	mov    edi,edx
c0006791:	56                   	push   esi
c0006792:	89 c6                	mov    esi,eax
c0006794:	53                   	push   ebx
c0006795:	89 cb                	mov    ebx,ecx
c0006797:	83 ec 0c             	sub    esp,0xc
c000679a:	50                   	push   eax
c000679b:	50                   	push   eax
c000679c:	6a 2f                	push   0x2f
c000679e:	56                   	push   esi
c000679f:	e8 2c a0 ff ff       	call   c00007d0 <strchr>
c00067a4:	83 c4 10             	add    esp,0x10
c00067a7:	85 c0                	test   eax,eax
c00067a9:	89 c5                	mov    ebp,eax
c00067ab:	74 3a                	je     c00067e7 <find_object_path+0x5a>
c00067ad:	39 ee                	cmp    esi,ebp
c00067af:	74 31                	je     c00067e2 <find_object_path+0x55>
c00067b1:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067b4:	e8 b5 fb ff ff       	call   c000636e <iso_733>
c00067b9:	89 c2                	mov    edx,eax
c00067bb:	8d 43 02             	lea    eax,[ebx+0x2]
c00067be:	e8 ab fb ff ff       	call   c000636e <iso_733>
c00067c3:	83 ec 0c             	sub    esp,0xc
c00067c6:	52                   	push   edx
c00067c7:	89 c1                	mov    ecx,eax
c00067c9:	ba 01 00 00 00       	mov    edx,0x1
c00067ce:	89 f0                	mov    eax,esi
c00067d0:	e8 0d fe ff ff       	call   c00065e2 <find_object>
c00067d5:	83 c4 10             	add    esp,0x10
c00067d8:	85 c0                	test   eax,eax
c00067da:	89 c3                	mov    ebx,eax
c00067dc:	75 04                	jne    c00067e2 <find_object_path+0x55>
c00067de:	31 db                	xor    ebx,ebx
c00067e0:	eb 36                	jmp    c0006818 <find_object_path+0x8b>
c00067e2:	8d 75 01             	lea    esi,[ebp+0x1]
c00067e5:	eb b3                	jmp    c000679a <find_object_path+0xd>
c00067e7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067ea:	74 28                	je     c0006814 <find_object_path+0x87>
c00067ec:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067ef:	e8 7a fb ff ff       	call   c000636e <iso_733>
c00067f4:	89 c2                	mov    edx,eax
c00067f6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067f9:	e8 70 fb ff ff       	call   c000636e <iso_733>
c00067fe:	83 ec 0c             	sub    esp,0xc
c0006801:	52                   	push   edx
c0006802:	89 c1                	mov    ecx,eax
c0006804:	89 fa                	mov    edx,edi
c0006806:	89 f0                	mov    eax,esi
c0006808:	e8 d5 fd ff ff       	call   c00065e2 <find_object>
c000680d:	83 c4 10             	add    esp,0x10
c0006810:	89 c3                	mov    ebx,eax
c0006812:	eb 04                	jmp    c0006818 <find_object_path+0x8b>
c0006814:	85 ff                	test   edi,edi
c0006816:	74 c6                	je     c00067de <find_object_path+0x51>
c0006818:	83 c4 0c             	add    esp,0xc
c000681b:	89 d8                	mov    eax,ebx
c000681d:	5b                   	pop    ebx
c000681e:	5e                   	pop    esi
c000681f:	5f                   	pop    edi
c0006820:	5d                   	pop    ebp
c0006821:	c3                   	ret    

c0006822 <stricmp>:
c0006822:	57                   	push   edi
c0006823:	56                   	push   esi
c0006824:	31 f6                	xor    esi,esi
c0006826:	53                   	push   ebx
c0006827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682b:	83 ec 0c             	sub    esp,0xc
c000682e:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006832:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006836:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000683a:	46                   	inc    esi
c000683b:	50                   	push   eax
c000683c:	e8 1f a1 ff ff       	call   c0000960 <toupper>
c0006841:	89 04 24             	mov    DWORD PTR [esp],eax
c0006844:	e8 37 a1 ff ff       	call   c0000980 <tolower>
c0006849:	89 3c 24             	mov    DWORD PTR [esp],edi
c000684c:	89 c3                	mov    ebx,eax
c000684e:	e8 0d a1 ff ff       	call   c0000960 <toupper>
c0006853:	89 04 24             	mov    DWORD PTR [esp],eax
c0006856:	e8 25 a1 ff ff       	call   c0000980 <tolower>
c000685b:	83 c4 10             	add    esp,0x10
c000685e:	39 c3                	cmp    ebx,eax
c0006860:	75 04                	jne    c0006866 <stricmp+0x44>
c0006862:	85 db                	test   ebx,ebx
c0006864:	75 c1                	jne    c0006827 <stricmp+0x5>
c0006866:	29 c3                	sub    ebx,eax
c0006868:	89 d8                	mov    eax,ebx
c000686a:	5b                   	pop    ebx
c000686b:	5e                   	pop    esi
c000686c:	5f                   	pop    edi
c000686d:	c3                   	ret    

c000686e <iso_open>:
c000686e:	57                   	push   edi
c000686f:	31 c0                	xor    eax,eax
c0006871:	56                   	push   esi
c0006872:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c0006877:	53                   	push   ebx
c0006878:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000687d:	0f 95 c0             	setne  al
c0006880:	89 c2                	mov    edx,eax
c0006882:	89 c6                	mov    esi,eax
c0006884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006888:	e8 00 ff ff ff       	call   c000678d <find_object_path>
c000688d:	83 ca ff             	or     edx,0xffffffff
c0006890:	85 c0                	test   eax,eax
c0006892:	74 5e                	je     c00068f2 <iso_open+0x84>
c0006894:	89 c1                	mov    ecx,eax
c0006896:	31 d2                	xor    edx,edx
c0006898:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000689e:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c00068a5:	75 42                	jne    c00068e9 <iso_open+0x7b>
c00068a7:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c00068b1:	8d 41 02             	lea    eax,[ecx+0x2]
c00068b4:	e8 b5 fa ff ff       	call   c000636e <iso_733>
c00068b9:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c00068bf:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c00068c9:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c00068cf:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068d2:	e8 97 fa ff ff       	call   c000636e <iso_733>
c00068d7:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c00068e1:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c00068e7:	eb 09                	jmp    c00068f2 <iso_open+0x84>
c00068e9:	42                   	inc    edx
c00068ea:	83 fa 10             	cmp    edx,0x10
c00068ed:	75 a9                	jne    c0006898 <iso_open+0x2a>
c00068ef:	83 ca ff             	or     edx,0xffffffff
c00068f2:	5b                   	pop    ebx
c00068f3:	89 d0                	mov    eax,edx
c00068f5:	5e                   	pop    esi
c00068f6:	5f                   	pop    edi
c00068f7:	c3                   	ret    

c00068f8 <iso_close>:
c00068f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068fc:	83 f8 0f             	cmp    eax,0xf
c00068ff:	7f 10                	jg     c0006911 <iso_close+0x19>
c0006901:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006907:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006911:	e9 6d fb ff ff       	jmp    c0006483 <bclear_cache>

c0006916 <iso_read>:
c0006916:	55                   	push   ebp
c0006917:	57                   	push   edi
c0006918:	56                   	push   esi
c0006919:	53                   	push   ebx
c000691a:	83 ec 1c             	sub    esp,0x1c
c000691d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006921:	83 fd 0f             	cmp    ebp,0xf
c0006924:	7e 0a                	jle    c0006930 <iso_read+0x1a>
c0006926:	83 c8 ff             	or     eax,0xffffffff
c0006929:	89 c2                	mov    edx,eax
c000692b:	e9 f4 00 00 00       	jmp    c0006a24 <iso_read+0x10e>
c0006930:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006936:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c000693d:	74 e7                	je     c0006926 <iso_read+0x10>
c000693f:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006945:	85 d2                	test   edx,edx
c0006947:	75 dd                	jne    c0006926 <iso_read+0x10>
c0006949:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000694e:	0f 84 cd 00 00 00    	je     c0006a21 <iso_read+0x10b>
c0006954:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000695a:	8b 9d 2c 6d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc92d4]
c0006960:	29 c3                	sub    ebx,eax
c0006962:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006966:	89 d9                	mov    ecx,ebx
c0006968:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c000696d:	85 c9                	test   ecx,ecx
c000696f:	0f 84 ac 00 00 00    	je     c0006a21 <iso_read+0x10b>
c0006975:	89 c6                	mov    esi,eax
c0006977:	bb 00 08 00 00       	mov    ebx,0x800
c000697c:	c1 e8 0b             	shr    eax,0xb
c000697f:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006985:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c000698b:	29 f3                	sub    ebx,esi
c000698d:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006993:	75 3f                	jne    c00069d4 <iso_read+0xbe>
c0006995:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000699b:	7e 37                	jle    c00069d4 <iso_read+0xbe>
c000699d:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00069a3:	be 20 00 00 00       	mov    esi,0x20
c00069a8:	7f 05                	jg     c00069af <iso_read+0x99>
c00069aa:	89 ce                	mov    esi,ecx
c00069ac:	c1 fe 0b             	sar    esi,0xb
c00069af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069b3:	89 f3                	mov    ebx,esi
c00069b5:	52                   	push   edx
c00069b6:	56                   	push   esi
c00069b7:	50                   	push   eax
c00069b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069bc:	c1 e3 0b             	shl    ebx,0xb
c00069bf:	e8 23 fb ff ff       	call   c00064e7 <isoReadDiscSector>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	7f 3d                	jg     c0006a0c <iso_read+0xf6>
c00069cf:	e9 52 ff ff ff       	jmp    c0006926 <iso_read+0x10>
c00069d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069d8:	39 d9                	cmp    ecx,ebx
c00069da:	0f 4e d9             	cmovle ebx,ecx
c00069dd:	e8 97 fb ff ff       	call   c0006579 <bdread>
c00069e2:	85 c0                	test   eax,eax
c00069e4:	0f 88 3c ff ff ff    	js     c0006926 <iso_read+0x10>
c00069ea:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c00069f1:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00069f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006a00:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006a04:	89 d9                	mov    ecx,ebx
c0006a06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006a0c:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006a10:	01 da                	add    edx,ebx
c0006a12:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006a18:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a1c:	e9 28 ff ff ff       	jmp    c0006949 <iso_read+0x33>
c0006a21:	89 d0                	mov    eax,edx
c0006a23:	99                   	cdq    
c0006a24:	83 c4 1c             	add    esp,0x1c
c0006a27:	5b                   	pop    ebx
c0006a28:	5e                   	pop    esi
c0006a29:	5f                   	pop    edi
c0006a2a:	5d                   	pop    ebp
c0006a2b:	c3                   	ret    

c0006a2c <iso_seek>:
c0006a2c:	55                   	push   ebp
c0006a2d:	83 c8 ff             	or     eax,0xffffffff
c0006a30:	57                   	push   edi
c0006a31:	89 c2                	mov    edx,eax
c0006a33:	56                   	push   esi
c0006a34:	53                   	push   ebx
c0006a35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a39:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a41:	83 fe 0f             	cmp    esi,0xf
c0006a44:	7f 65                	jg     c0006aab <iso_seek+0x7f>
c0006a46:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a4c:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006a53:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c0006a59:	74 50                	je     c0006aab <iso_seek+0x7f>
c0006a5b:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a62:	75 47                	jne    c0006aab <iso_seek+0x7f>
c0006a64:	83 fb 01             	cmp    ebx,0x1
c0006a67:	74 0e                	je     c0006a77 <iso_seek+0x4b>
c0006a69:	83 fb 02             	cmp    ebx,0x2
c0006a6c:	74 0e                	je     c0006a7c <iso_seek+0x50>
c0006a6e:	85 db                	test   ebx,ebx
c0006a70:	75 39                	jne    c0006aab <iso_seek+0x7f>
c0006a72:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a75:	eb 0d                	jmp    c0006a84 <iso_seek+0x58>
c0006a77:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a7a:	eb 08                	jmp    c0006a84 <iso_seek+0x58>
c0006a7c:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a7f:	01 f8                	add    eax,edi
c0006a81:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a84:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a8a:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006a90:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006a95:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a98:	76 03                	jbe    c0006a9d <iso_seek+0x71>
c0006a9a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a9d:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006aa3:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006aa9:	31 d2                	xor    edx,edx
c0006aab:	5b                   	pop    ebx
c0006aac:	5e                   	pop    esi
c0006aad:	5f                   	pop    edi
c0006aae:	5d                   	pop    ebp
c0006aaf:	c3                   	ret    

c0006ab0 <iso_tell>:
c0006ab0:	53                   	push   ebx
c0006ab1:	83 c8 ff             	or     eax,0xffffffff
c0006ab4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006ab8:	89 c2                	mov    edx,eax
c0006aba:	83 f9 0f             	cmp    ecx,0xf
c0006abd:	7f 20                	jg     c0006adf <iso_tell+0x2f>
c0006abf:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ac5:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006acc:	74 11                	je     c0006adf <iso_tell+0x2f>
c0006ace:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006ad5:	75 08                	jne    c0006adf <iso_tell+0x2f>
c0006ad7:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006add:	31 d2                	xor    edx,edx
c0006adf:	5b                   	pop    ebx
c0006ae0:	c3                   	ret    

c0006ae1 <iso_total>:
c0006ae1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ae5:	83 c8 ff             	or     eax,0xffffffff
c0006ae8:	83 fa 0f             	cmp    edx,0xf
c0006aeb:	7f 1e                	jg     c0006b0b <iso_total+0x2a>
c0006aed:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006af3:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c0006afa:	74 0f                	je     c0006b0b <iso_total+0x2a>
c0006afc:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006b03:	75 06                	jne    c0006b0b <iso_total+0x2a>
c0006b05:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c0006b0b:	c3                   	ret    

c0006b0c <fn_postprocess>:
c0006b0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006b10:	89 d0                	mov    eax,edx
c0006b12:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b15:	85 c9                	test   ecx,ecx
c0006b17:	74 08                	je     c0006b21 <fn_postprocess+0x15>
c0006b19:	83 f9 3b             	cmp    ecx,0x3b
c0006b1c:	74 03                	je     c0006b21 <fn_postprocess+0x15>
c0006b1e:	40                   	inc    eax
c0006b1f:	eb f1                	jmp    c0006b12 <fn_postprocess+0x6>
c0006b21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b24:	39 d0                	cmp    eax,edx
c0006b26:	76 0a                	jbe    c0006b32 <fn_postprocess+0x26>
c0006b28:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b2c:	75 04                	jne    c0006b32 <fn_postprocess+0x26>
c0006b2e:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b32:	c3                   	ret    

c0006b33 <iso_readdir>:
c0006b33:	55                   	push   ebp
c0006b34:	57                   	push   edi
c0006b35:	56                   	push   esi
c0006b36:	53                   	push   ebx
c0006b37:	83 ec 1c             	sub    esp,0x1c
c0006b3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b3e:	83 fb 0f             	cmp    ebx,0xf
c0006b41:	7f 28                	jg     c0006b6b <iso_readdir+0x38>
c0006b43:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b49:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c0006b50:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c0006b56:	74 13                	je     c0006b6b <iso_readdir+0x38>
c0006b58:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b5c:	74 0d                	je     c0006b6b <iso_readdir+0x38>
c0006b5e:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b65:	0f 84 b1 00 00 00    	je     c0006c1c <iso_readdir+0xe9>
c0006b6b:	83 ec 0c             	sub    esp,0xc
c0006b6e:	68 c0 fd 02 c0       	push   0xc002fdc0
c0006b73:	e8 9c 2a 02 00       	call   c0029614 <iso_kprintf>
c0006b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b7b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b81:	e8 aa 2a 02 00       	call   c0029630 <iso_kprintfd>
c0006b86:	c7 04 24 c5 fd 02 c0 	mov    DWORD PTR [esp],0xc002fdc5
c0006b8d:	e8 82 2a 02 00       	call   c0029614 <iso_kprintf>
c0006b92:	58                   	pop    eax
c0006b93:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006b99:	e8 92 2a 02 00       	call   c0029630 <iso_kprintfd>
c0006b9e:	c7 04 24 cb fd 02 c0 	mov    DWORD PTR [esp],0xc002fdcb
c0006ba5:	e8 6a 2a 02 00       	call   c0029614 <iso_kprintf>
c0006baa:	58                   	pop    eax
c0006bab:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006bb1:	e8 7a 2a 02 00       	call   c0029630 <iso_kprintfd>
c0006bb6:	c7 04 24 d1 fd 02 c0 	mov    DWORD PTR [esp],0xc002fdd1
c0006bbd:	e8 52 2a 02 00       	call   c0029614 <iso_kprintf>
c0006bc2:	58                   	pop    eax
c0006bc3:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006bc9:	e8 62 2a 02 00       	call   c0029630 <iso_kprintfd>
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	eb 42                	jmp    c0006c15 <iso_readdir+0xe2>
c0006bd3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bd6:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006bdd:	89 d1                	mov    ecx,edx
c0006bdf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006be5:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006be9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bec:	75 35                	jne    c0006c23 <iso_readdir+0xf0>
c0006bee:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bf4:	81 c2 00 08 00 00    	add    edx,0x800
c0006bfa:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006bfd:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006c00:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006c03:	73 1e                	jae    c0006c23 <iso_readdir+0xf0>
c0006c05:	8b 07                	mov    eax,DWORD PTR [edi]
c0006c07:	c1 ea 0b             	shr    edx,0xb
c0006c0a:	01 d0                	add    eax,edx
c0006c0c:	e8 5f f9 ff ff       	call   c0006570 <biread>
c0006c11:	85 c0                	test   eax,eax
c0006c13:	79 be                	jns    c0006bd3 <iso_readdir+0xa0>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	e9 6a 01 00 00       	jmp    c0006d86 <iso_readdir+0x253>
c0006c1c:	31 f6                	xor    esi,esi
c0006c1e:	83 c8 ff             	or     eax,0xffffffff
c0006c21:	eb da                	jmp    c0006bfd <iso_readdir+0xca>
c0006c23:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c29:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006c2f:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006c35:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c38:	73 db                	jae    c0006c15 <iso_readdir+0xe2>
c0006c3a:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c3e:	75 34                	jne    c0006c74 <iso_readdir+0x141>
c0006c40:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c44:	75 2e                	jne    c0006c74 <iso_readdir+0x141>
c0006c46:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c49:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006c50:	01 f9                	add    ecx,edi
c0006c52:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c55:	89 c8                	mov    eax,ecx
c0006c57:	25 ff 07 00 00       	and    eax,0x7ff
c0006c5c:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c61:	01 c8                	add    eax,ecx
c0006c63:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c66:	25 ff 07 00 00       	and    eax,0x7ff
c0006c6b:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c6f:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c72:	74 a1                	je     c0006c15 <iso_readdir+0xe2>
c0006c74:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006c7a:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c7e:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c85:	8d 56 21             	lea    edx,[esi+0x21]
c0006c88:	8d af 38 6d 03 c0    	lea    ebp,[edi-0x3ffc92c8]
c0006c8e:	74 0c                	je     c0006c9c <iso_readdir+0x169>
c0006c90:	89 e8                	mov    eax,ebp
c0006c92:	e8 27 f6 ff ff       	call   c00062be <ucs2utfn>
c0006c97:	e9 b1 00 00 00       	jmp    c0006d4d <iso_readdir+0x21a>
c0006c9c:	50                   	push   eax
c0006c9d:	51                   	push   ecx
c0006c9e:	52                   	push   edx
c0006c9f:	55                   	push   ebp
c0006ca0:	e8 eb 99 ff ff       	call   c0000690 <strncpy>
c0006ca5:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006ca9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006cac:	c6 84 07 38 6d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc92c8],0x0
c0006cb4:	e8 53 fe ff ff       	call   c0006b0c <fn_postprocess>
c0006cb9:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cbd:	83 c4 10             	add    esp,0x10
c0006cc0:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cc3:	89 d1                	mov    ecx,edx
c0006cc5:	29 d0                	sub    eax,edx
c0006cc7:	80 e1 01             	and    cl,0x1
c0006cca:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006cce:	74 05                	je     c0006cd5 <iso_readdir+0x1a2>
c0006cd0:	83 e8 21             	sub    eax,0x21
c0006cd3:	eb 04                	jmp    c0006cd9 <iso_readdir+0x1a6>
c0006cd5:	42                   	inc    edx
c0006cd6:	83 e8 22             	sub    eax,0x22
c0006cd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cdd:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006ce3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ce7:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006cec:	7e 5f                	jle    c0006d4d <iso_readdir+0x21a>
c0006cee:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006cf1:	48                   	dec    eax
c0006cf2:	3c 01                	cmp    al,0x1
c0006cf4:	77 57                	ja     c0006d4d <iso_readdir+0x21a>
c0006cf6:	51                   	push   ecx
c0006cf7:	6a 02                	push   0x2
c0006cf9:	68 bd fd 02 c0       	push   0xc002fdbd
c0006cfe:	52                   	push   edx
c0006cff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006d03:	e8 08 9b ff ff       	call   c0000810 <strncmp>
c0006d08:	83 c4 10             	add    esp,0x10
c0006d0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006d0f:	85 c0                	test   eax,eax
c0006d11:	75 2e                	jne    c0006d41 <iso_readdir+0x20e>
c0006d13:	50                   	push   eax
c0006d14:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d18:	83 e8 05             	sub    eax,0x5
c0006d1b:	50                   	push   eax
c0006d1c:	8d 42 05             	lea    eax,[edx+0x5]
c0006d1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006d23:	50                   	push   eax
c0006d24:	55                   	push   ebp
c0006d25:	e8 66 99 ff ff       	call   c0000690 <strncpy>
c0006d2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006d2e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006d32:	83 c4 10             	add    esp,0x10
c0006d35:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d39:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006d41:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d45:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d49:	01 c2                	add    edx,eax
c0006d4b:	eb 9a                	jmp    c0006ce7 <iso_readdir+0x1b4>
c0006d4d:	83 c8 ff             	or     eax,0xffffffff
c0006d50:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d54:	89 c2                	mov    edx,eax
c0006d56:	75 0a                	jne    c0006d62 <iso_readdir+0x22f>
c0006d58:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d5b:	e8 0e f6 ff ff       	call   c000636e <iso_733>
c0006d60:	31 d2                	xor    edx,edx
c0006d62:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d68:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006d6e:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006d74:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006d7a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d7d:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d80:	8d 87 30 6d 03 c0    	lea    eax,[edi-0x3ffc92d0]
c0006d86:	83 c4 1c             	add    esp,0x1c
c0006d89:	5b                   	pop    ebx
c0006d8a:	5e                   	pop    esi
c0006d8b:	5f                   	pop    edi
c0006d8c:	5d                   	pop    ebp
c0006d8d:	c3                   	ret    

c0006d8e <iso_reset>:
c0006d8e:	83 ec 18             	sub    esp,0x18
c0006d91:	68 da fd 02 c0       	push   0xc002fdda
c0006d96:	e8 79 28 02 00       	call   c0029614 <iso_kprintf>
c0006d9b:	e8 1b f7 ff ff       	call   c00064bb <iso_break_all>
c0006da0:	e8 14 f7 ff ff       	call   c00064b9 <bclear>
c0006da5:	31 c0                	xor    eax,eax
c0006da7:	83 c4 1c             	add    esp,0x1c
c0006daa:	c3                   	ret    

c0006dab <init_percd>:
c0006dab:	57                   	push   edi
c0006dac:	56                   	push   esi
c0006dad:	53                   	push   ebx
c0006dae:	bb 01 00 00 00       	mov    ebx,0x1
c0006db3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006db7:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006dbc:	e8 cd ff ff ff       	call   c0006d8e <iso_reset>
c0006dc1:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006dcb:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006dd0:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dd4:	e8 97 f7 ff ff       	call   c0006570 <biread>
c0006dd9:	85 c0                	test   eax,eax
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	0f 88 ba 00 00 00    	js     c0006e9d <init_percd+0xf2>
c0006de3:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006dea:	52                   	push   edx
c0006deb:	6a 06                	push   0x6
c0006ded:	68 e5 fd 02 c0       	push   0xc002fde5
c0006df2:	83 c0 04             	add    eax,0x4
c0006df5:	50                   	push   eax
c0006df6:	e8 85 95 ff ff       	call   c0000380 <memcmp>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	74 08                	je     c0006e0a <init_percd+0x5f>
c0006e02:	43                   	inc    ebx
c0006e03:	83 fb 04             	cmp    ebx,0x4
c0006e06:	75 c3                	jne    c0006dcb <init_percd+0x20>
c0006e08:	eb 1a                	jmp    c0006e24 <init_percd+0x79>
c0006e0a:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006e11:	83 c0 5c             	add    eax,0x5c
c0006e14:	e8 22 f5 ff ff       	call   c000633b <isjoliet>
c0006e19:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006e1e:	85 c0                	test   eax,eax
c0006e20:	74 e0                	je     c0006e02 <init_percd+0x57>
c0006e22:	eb 3e                	jmp    c0006e62 <init_percd+0xb7>
c0006e24:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006e2b:	75 35                	jne    c0006e62 <init_percd+0xb7>
c0006e2d:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006e32:	83 c0 10             	add    eax,0x10
c0006e35:	e8 36 f7 ff ff       	call   c0006570 <biread>
c0006e3a:	85 c0                	test   eax,eax
c0006e3c:	89 c6                	mov    esi,eax
c0006e3e:	78 5f                	js     c0006e9f <init_percd+0xf4>
c0006e40:	50                   	push   eax
c0006e41:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006e48:	83 cb ff             	or     ebx,0xffffffff
c0006e4b:	6a 06                	push   0x6
c0006e4d:	68 ec fd 02 c0       	push   0xc002fdec
c0006e52:	83 c0 04             	add    eax,0x4
c0006e55:	50                   	push   eax
c0006e56:	e8 25 95 ff ff       	call   c0000380 <memcmp>
c0006e5b:	83 c4 10             	add    esp,0x10
c0006e5e:	85 c0                	test   eax,eax
c0006e60:	75 3d                	jne    c0006e9f <init_percd+0xf4>
c0006e62:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006e69:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006e6e:	b9 22 00 00 00       	mov    ecx,0x22
c0006e73:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e7b:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006e80:	31 db                	xor    ebx,ebx
c0006e82:	e8 e7 f4 ff ff       	call   c000636e <iso_733>
c0006e87:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006e8c:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006e91:	e8 d8 f4 ff ff       	call   c000636e <iso_733>
c0006e96:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006e9b:	eb 02                	jmp    c0006e9f <init_percd+0xf4>
c0006e9d:	89 c3                	mov    ebx,eax
c0006e9f:	89 d8                	mov    eax,ebx
c0006ea1:	5b                   	pop    ebx
c0006ea2:	5e                   	pop    esi
c0006ea3:	5f                   	pop    edi
c0006ea4:	c3                   	ret    

c0006ea5 <iso_ioctl>:
c0006ea5:	83 ec 18             	sub    esp,0x18
c0006ea8:	68 f3 fd 02 c0       	push   0xc002fdf3
c0006ead:	e8 62 27 02 00       	call   c0029614 <iso_kprintf>
c0006eb2:	e8 d7 fe ff ff       	call   c0006d8e <iso_reset>
c0006eb7:	31 c0                	xor    eax,eax
c0006eb9:	83 c4 1c             	add    esp,0x1c
c0006ebc:	c3                   	ret    

c0006ebd <fs_iso9660_init>:
c0006ebd:	53                   	push   ebx
c0006ebe:	31 db                	xor    ebx,ebx
c0006ec0:	83 ec 14             	sub    esp,0x14
c0006ec3:	68 fe fd 02 c0       	push   0xc002fdfe
c0006ec8:	e8 47 27 02 00       	call   c0029614 <iso_kprintf>
c0006ecd:	83 c4 0c             	add    esp,0xc
c0006ed0:	68 40 09 00 00       	push   0x940
c0006ed5:	6a 00                	push   0x0
c0006ed7:	68 20 6d 03 c0       	push   0xc0036d20
c0006edc:	e8 0f 96 ff ff       	call   c00004f0 <memset>
c0006ee1:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006eeb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ef2:	e8 1d f8 00 00       	call   c0016714 <malloc>
c0006ef7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006efe:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006f03:	e8 0c f8 00 00       	call   c0016714 <malloc>
c0006f08:	83 c4 10             	add    esp,0x10
c0006f0b:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	68 04 08 00 00       	push   0x804
c0006f18:	e8 f7 f7 00 00       	call   c0016714 <malloc>
c0006f1d:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006f24:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2a:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f31:	e8 de f7 00 00       	call   c0016714 <malloc>
c0006f36:	83 c4 10             	add    esp,0x10
c0006f39:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006f40:	43                   	inc    ebx
c0006f41:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f47:	83 fb 10             	cmp    ebx,0x10
c0006f4a:	75 c4                	jne    c0006f10 <fs_iso9660_init+0x53>
c0006f4c:	83 c4 08             	add    esp,0x8
c0006f4f:	31 c0                	xor    eax,eax
c0006f51:	5b                   	pop    ebx
c0006f52:	c3                   	ret    

c0006f53 <fs_iso9660_shutdown>:
c0006f53:	53                   	push   ebx
c0006f54:	31 db                	xor    ebx,ebx
c0006f56:	83 ec 08             	sub    esp,0x8
c0006f59:	83 ec 0c             	sub    esp,0xc
c0006f5c:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006f63:	e8 bc f7 00 00       	call   c0016724 <free>
c0006f68:	58                   	pop    eax
c0006f69:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006f70:	43                   	inc    ebx
c0006f71:	e8 ae f7 00 00       	call   c0016724 <free>
c0006f76:	83 c4 10             	add    esp,0x10
c0006f79:	83 fb 10             	cmp    ebx,0x10
c0006f7c:	75 db                	jne    c0006f59 <fs_iso9660_shutdown+0x6>
c0006f7e:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006f83:	85 c0                	test   eax,eax
c0006f85:	74 0c                	je     c0006f93 <fs_iso9660_shutdown+0x40>
c0006f87:	83 ec 0c             	sub    esp,0xc
c0006f8a:	50                   	push   eax
c0006f8b:	e8 94 f7 00 00       	call   c0016724 <free>
c0006f90:	83 c4 10             	add    esp,0x10
c0006f93:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006f98:	85 c0                	test   eax,eax
c0006f9a:	74 0c                	je     c0006fa8 <fs_iso9660_shutdown+0x55>
c0006f9c:	83 ec 0c             	sub    esp,0xc
c0006f9f:	50                   	push   eax
c0006fa0:	e8 7f f7 00 00       	call   c0016724 <free>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006fb2:	31 c0                	xor    eax,eax
c0006fb4:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006fbe:	83 c4 08             	add    esp,0x8
c0006fc1:	5b                   	pop    ebx
c0006fc2:	c3                   	ret    
c0006fc3:	90                   	nop

c0006fc4 <lwip_init>:
c0006fc4:	83 ec 0c             	sub    esp,0xc
c0006fc7:	e8 5c 2c 00 00       	call   c0009c28 <stats_init>
c0006fcc:	e8 ff 9d ff ff       	call   c0000dd0 <sys_init>
c0006fd1:	e8 ae 01 00 00       	call   c0007184 <mem_init>
c0006fd6:	e8 09 0a 00 00       	call   c00079e4 <memp_init>
c0006fdb:	e8 ec 0c 00 00       	call   c0007ccc <netif_init>
c0006fe0:	e8 8b 9c ff ff       	call   c0000c70 <lwip_socket_init>
c0006fe5:	e8 06 9e 00 00       	call   c0010df0 <sys_timeouts_init>
c0006fea:	90                   	nop
c0006feb:	83 c4 0c             	add    esp,0xc
c0006fee:	c3                   	ret    
c0006fef:	90                   	nop

c0006ff0 <plug_holes>:
c0006ff0:	83 ec 1c             	sub    esp,0x1c
c0006ff3:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006ff8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006ffc:	73 16                	jae    c0007014 <plug_holes+0x24>
c0006ffe:	83 ec 08             	sub    esp,0x8
c0007001:	68 0f fe 02 c0       	push   0xc002fe0f
c0007006:	68 26 fe 02 c0       	push   0xc002fe26
c000700b:	e8 f0 8d 01 00       	call   c001fe00 <CPrintf>
c0007010:	83 c4 10             	add    esp,0x10
c0007013:	90                   	nop
c0007014:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007019:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000701d:	72 15                	jb     c0007034 <plug_holes+0x44>
c000701f:	83 ec 08             	sub    esp,0x8
c0007022:	68 33 fe 02 c0       	push   0xc002fe33
c0007027:	68 26 fe 02 c0       	push   0xc002fe26
c000702c:	e8 cf 8d 01 00       	call   c001fe00 <CPrintf>
c0007031:	83 c4 10             	add    esp,0x10
c0007034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007038:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000703b:	0f b6 c0             	movzx  eax,al
c000703e:	85 c0                	test   eax,eax
c0007040:	74 16                	je     c0007058 <plug_holes+0x68>
c0007042:	83 ec 08             	sub    esp,0x8
c0007045:	68 4d fe 02 c0       	push   0xc002fe4d
c000704a:	68 26 fe 02 c0       	push   0xc002fe26
c000704f:	e8 ac 8d 01 00       	call   c001fe00 <CPrintf>
c0007054:	83 c4 10             	add    esp,0x10
c0007057:	90                   	nop
c0007058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000705c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000705f:	0f b7 c0             	movzx  eax,ax
c0007062:	3d 40 06 00 00       	cmp    eax,0x640
c0007067:	76 17                	jbe    c0007080 <plug_holes+0x90>
c0007069:	83 ec 08             	sub    esp,0x8
c000706c:	68 e0 fe 02 c0       	push   0xc002fee0
c0007071:	68 26 fe 02 c0       	push   0xc002fe26
c0007076:	e8 85 8d 01 00       	call   c001fe00 <CPrintf>
c000707b:	83 c4 10             	add    esp,0x10
c000707e:	66 90                	xchg   ax,ax
c0007080:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000708a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000708d:	0f b7 c0             	movzx  eax,ax
c0007090:	01 d0                	add    eax,edx
c0007092:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000709a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000709e:	74 64                	je     c0007104 <plug_holes+0x114>
c00070a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a4:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00070a7:	0f b6 c0             	movzx  eax,al
c00070aa:	85 c0                	test   eax,eax
c00070ac:	75 56                	jne    c0007104 <plug_holes+0x114>
c00070ae:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070b3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070b7:	74 4b                	je     c0007104 <plug_holes+0x114>
c00070b9:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00070be:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070c2:	75 0c                	jne    c00070d0 <plug_holes+0xe0>
c00070c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070c8:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00070cd:	8d 76 00             	lea    esi,[esi+0x0]
c00070d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d4:	66 8b 10             	mov    dx,WORD PTR [eax]
c00070d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070db:	66 89 10             	mov    WORD PTR [eax],dx
c00070de:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070e7:	89 d1                	mov    ecx,edx
c00070e9:	29 c1                	sub    ecx,eax
c00070eb:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00070f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070f5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070f8:	0f b7 c0             	movzx  eax,ax
c00070fb:	01 d0                	add    eax,edx
c00070fd:	89 ca                	mov    edx,ecx
c00070ff:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0007103:	90                   	nop
c0007104:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000710a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000710e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0007112:	0f b7 c0             	movzx  eax,ax
c0007115:	01 d0                	add    eax,edx
c0007117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000711b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007123:	74 57                	je     c000717c <plug_holes+0x18c>
c0007125:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007129:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000712c:	0f b6 c0             	movzx  eax,al
c000712f:	85 c0                	test   eax,eax
c0007131:	75 49                	jne    c000717c <plug_holes+0x18c>
c0007133:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007138:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000713c:	75 0a                	jne    c0007148 <plug_holes+0x158>
c000713e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007142:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007147:	90                   	nop
c0007148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000714c:	66 8b 10             	mov    dx,WORD PTR [eax]
c000714f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007153:	66 89 10             	mov    WORD PTR [eax],dx
c0007156:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000715b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000715f:	89 d1                	mov    ecx,edx
c0007161:	29 c1                	sub    ecx,eax
c0007163:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000716d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007170:	0f b7 c0             	movzx  eax,ax
c0007173:	01 d0                	add    eax,edx
c0007175:	89 ca                	mov    edx,ecx
c0007177:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000717b:	90                   	nop
c000717c:	90                   	nop
c000717d:	83 c4 1c             	add    esp,0x1c
c0007180:	c3                   	ret    
c0007181:	8d 76 00             	lea    esi,[esi+0x0]

c0007184 <mem_init>:
c0007184:	83 ec 1c             	sub    esp,0x1c
c0007187:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0007191:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007196:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000719a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000719e:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a7:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c00071ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071b1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00071b5:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071ba:	05 40 06 00 00       	add    eax,0x640
c00071bf:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c00071c4:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071c9:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071cd:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071d2:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071d7:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071dc:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071e2:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071e7:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00071ec:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c00071f5:	83 ec 08             	sub    esp,0x8
c00071f8:	6a 01                	push   0x1
c00071fa:	68 98 76 03 c0       	push   0xc0037698
c00071ff:	e8 9c 9a ff ff       	call   c0000ca0 <sys_sem_new>
c0007204:	83 c4 10             	add    esp,0x10
c0007207:	0f be c0             	movsx  eax,al
c000720a:	85 c0                	test   eax,eax
c000720c:	74 16                	je     c0007224 <mem_init+0xa0>
c000720e:	83 ec 08             	sub    esp,0x8
c0007211:	68 68 fe 02 c0       	push   0xc002fe68
c0007216:	68 26 fe 02 c0       	push   0xc002fe26
c000721b:	e8 e0 8b 01 00       	call   c001fe00 <CPrintf>
c0007220:	83 c4 10             	add    esp,0x10
c0007223:	90                   	nop
c0007224:	90                   	nop
c0007225:	83 c4 1c             	add    esp,0x1c
c0007228:	c3                   	ret    
c0007229:	8d 76 00             	lea    esi,[esi+0x0]

c000722c <mem_free>:
c000722c:	83 ec 1c             	sub    esp,0x1c
c000722f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0007234:	0f 84 0e 01 00 00    	je     c0007348 <mem_free+0x11c>
c000723a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000723f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007243:	72 0b                	jb     c0007250 <mem_free+0x24>
c0007245:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000724a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000724e:	72 18                	jb     c0007268 <mem_free+0x3c>
c0007250:	83 ec 08             	sub    esp,0x8
c0007253:	68 83 fe 02 c0       	push   0xc002fe83
c0007258:	68 26 fe 02 c0       	push   0xc002fe26
c000725d:	e8 9e 8b 01 00       	call   c001fe00 <CPrintf>
c0007262:	83 c4 10             	add    esp,0x10
c0007265:	8d 76 00             	lea    esi,[esi+0x0]
c0007268:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000726d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007271:	72 0d                	jb     c0007280 <mem_free+0x54>
c0007273:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007278:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000727c:	72 22                	jb     c00072a0 <mem_free+0x74>
c000727e:	66 90                	xchg   ax,ax
c0007280:	e8 6b 8b 01 00       	call   c001fdf0 <CLockScheduler>
c0007285:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000728b:	83 c0 01             	add    eax,0x1
c000728e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007294:	e8 3b 8b 01 00       	call   c001fdd4 <CUnlockScheduler>
c0007299:	e9 ae 00 00 00       	jmp    c000734c <mem_free+0x120>
c000729e:	66 90                	xchg   ax,ax
c00072a0:	83 ec 08             	sub    esp,0x8
c00072a3:	6a 00                	push   0x0
c00072a5:	68 98 76 03 c0       	push   0xc0037698
c00072aa:	e8 49 9a ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c00072af:	83 c4 10             	add    esp,0x10
c00072b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00072b6:	83 e8 06             	sub    eax,0x6
c00072b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072c1:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072c4:	0f b6 c0             	movzx  eax,al
c00072c7:	85 c0                	test   eax,eax
c00072c9:	75 15                	jne    c00072e0 <mem_free+0xb4>
c00072cb:	83 ec 08             	sub    esp,0x8
c00072ce:	68 9a fe 02 c0       	push   0xc002fe9a
c00072d3:	68 26 fe 02 c0       	push   0xc002fe26
c00072d8:	e8 23 8b 01 00       	call   c001fe00 <CPrintf>
c00072dd:	83 c4 10             	add    esp,0x10
c00072e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072e4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072e8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00072ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072f1:	73 09                	jae    c00072fc <mem_free+0xd0>
c00072f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072f7:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00072fc:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007303:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007308:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000730c:	29 c1                	sub    ecx,eax
c000730e:	89 c8                	mov    eax,ecx
c0007310:	89 c1                	mov    ecx,eax
c0007312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007316:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007319:	29 c1                	sub    ecx,eax
c000731b:	89 c8                	mov    eax,ecx
c000731d:	01 d0                	add    eax,edx
c000731f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007325:	83 ec 0c             	sub    esp,0xc
c0007328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000732c:	e8 bf fc ff ff       	call   c0006ff0 <plug_holes>
c0007331:	83 c4 10             	add    esp,0x10
c0007334:	83 ec 0c             	sub    esp,0xc
c0007337:	68 98 76 03 c0       	push   0xc0037698
c000733c:	e8 9f 99 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007341:	83 c4 10             	add    esp,0x10
c0007344:	eb 06                	jmp    c000734c <mem_free+0x120>
c0007346:	66 90                	xchg   ax,ax
c0007348:	90                   	nop
c0007349:	8d 76 00             	lea    esi,[esi+0x0]
c000734c:	83 c4 1c             	add    esp,0x1c
c000734f:	c3                   	ret    

c0007350 <mem_trim>:
c0007350:	83 ec 2c             	sub    esp,0x2c
c0007353:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007357:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000735c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007361:	83 f8 0b             	cmp    eax,0xb
c0007364:	77 0a                	ja     c0007370 <mem_trim+0x20>
c0007366:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c000736d:	8d 76 00             	lea    esi,[esi+0x0]
c0007370:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007375:	3d 40 06 00 00       	cmp    eax,0x640
c000737a:	76 0c                	jbe    c0007388 <mem_trim+0x38>
c000737c:	b8 00 00 00 00       	mov    eax,0x0
c0007381:	e9 d6 02 00 00       	jmp    c000765c <mem_trim+0x30c>
c0007386:	66 90                	xchg   ax,ax
c0007388:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000738d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007391:	72 0d                	jb     c00073a0 <mem_trim+0x50>
c0007393:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007398:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000739c:	72 1a                	jb     c00073b8 <mem_trim+0x68>
c000739e:	66 90                	xchg   ax,ax
c00073a0:	83 ec 08             	sub    esp,0x8
c00073a3:	68 ae fe 02 c0       	push   0xc002feae
c00073a8:	68 26 fe 02 c0       	push   0xc002fe26
c00073ad:	e8 4e 8a 01 00       	call   c001fe00 <CPrintf>
c00073b2:	83 c4 10             	add    esp,0x10
c00073b5:	8d 76 00             	lea    esi,[esi+0x0]
c00073b8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073bd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073c1:	72 0d                	jb     c00073d0 <mem_trim+0x80>
c00073c3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00073c8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073cc:	72 26                	jb     c00073f4 <mem_trim+0xa4>
c00073ce:	66 90                	xchg   ax,ax
c00073d0:	e8 1b 8a 01 00       	call   c001fdf0 <CLockScheduler>
c00073d5:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00073db:	83 c0 01             	add    eax,0x1
c00073de:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00073e4:	e8 eb 89 01 00       	call   c001fdd4 <CUnlockScheduler>
c00073e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073ed:	e9 6a 02 00 00       	jmp    c000765c <mem_trim+0x30c>
c00073f2:	66 90                	xchg   ax,ax
c00073f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073f8:	83 e8 06             	sub    eax,0x6
c00073fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073ff:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007404:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007408:	29 c2                	sub    edx,eax
c000740a:	89 d0                	mov    eax,edx
c000740c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007415:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007418:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000741d:	89 d1                	mov    ecx,edx
c000741f:	29 c1                	sub    ecx,eax
c0007421:	89 c8                	mov    eax,ecx
c0007423:	83 e8 06             	sub    eax,0x6
c0007426:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000742b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007430:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007435:	39 c2                	cmp    edx,eax
c0007437:	76 17                	jbe    c0007450 <mem_trim+0x100>
c0007439:	83 ec 08             	sub    esp,0x8
c000743c:	68 0c ff 02 c0       	push   0xc002ff0c
c0007441:	68 26 fe 02 c0       	push   0xc002fe26
c0007446:	e8 b5 89 01 00       	call   c001fe00 <CPrintf>
c000744b:	83 c4 10             	add    esp,0x10
c000744e:	66 90                	xchg   ax,ax
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	76 0a                	jbe    c0007468 <mem_trim+0x118>
c000745e:	b8 00 00 00 00       	mov    eax,0x0
c0007463:	e9 f4 01 00 00       	jmp    c000765c <mem_trim+0x30c>
c0007468:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000746d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007472:	39 c2                	cmp    edx,eax
c0007474:	75 0a                	jne    c0007480 <mem_trim+0x130>
c0007476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000747a:	e9 dd 01 00 00       	jmp    c000765c <mem_trim+0x30c>
c000747f:	90                   	nop
c0007480:	83 ec 08             	sub    esp,0x8
c0007483:	6a 00                	push   0x0
c0007485:	68 98 76 03 c0       	push   0xc0037698
c000748a:	e8 69 98 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c000748f:	83 c4 10             	add    esp,0x10
c0007492:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000749c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000749f:	0f b7 c0             	movzx  eax,ax
c00074a2:	01 d0                	add    eax,edx
c00074a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074ac:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00074af:	0f b6 c0             	movzx  eax,al
c00074b2:	85 c0                	test   eax,eax
c00074b4:	0f 85 c6 00 00 00    	jne    c0007580 <mem_trim+0x230>
c00074ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074c1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074c6:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074cf:	01 d0                	add    eax,edx
c00074d1:	83 c0 06             	add    eax,0x6
c00074d4:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074d9:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00074de:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074e2:	75 14                	jne    c00074f8 <mem_trim+0x1a8>
c00074e4:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074ea:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074ef:	01 d0                	add    eax,edx
c00074f1:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00074f6:	66 90                	xchg   ax,ax
c00074f8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074fe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007503:	01 d0                	add    eax,edx
c0007505:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007509:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000750d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007515:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000751a:	66 89 10             	mov    WORD PTR [eax],dx
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007526:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000752a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000752e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007532:	66 89 10             	mov    WORD PTR [eax],dx
c0007535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007539:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753c:	0f b7 c0             	movzx  eax,ax
c000753f:	3d 40 06 00 00       	cmp    eax,0x640
c0007544:	74 1a                	je     c0007560 <mem_trim+0x210>
c0007546:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000754c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007550:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007553:	0f b7 c0             	movzx  eax,ax
c0007556:	01 c2                	add    edx,eax
c0007558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000755c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007560:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007566:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000756a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000756e:	29 d1                	sub    ecx,edx
c0007570:	89 ca                	mov    edx,ecx
c0007572:	01 d0                	add    eax,edx
c0007574:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000757a:	e9 c9 00 00 00       	jmp    c0007648 <mem_trim+0x2f8>
c000757f:	90                   	nop
c0007580:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007585:	8d 50 12             	lea    edx,[eax+0x12]
c0007588:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000758d:	39 c2                	cmp    edx,eax
c000758f:	0f 87 b3 00 00 00    	ja     c0007648 <mem_trim+0x2f8>
c0007595:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000759a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759e:	01 d0                	add    eax,edx
c00075a0:	83 c0 06             	add    eax,0x6
c00075a3:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00075a8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075ae:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00075b3:	01 d0                	add    eax,edx
c00075b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075b9:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075be:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075c2:	73 0c                	jae    c00075d0 <mem_trim+0x280>
c00075c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075c8:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00075cd:	8d 76 00             	lea    esi,[esi+0x0]
c00075d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075d4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075dc:	66 8b 10             	mov    dx,WORD PTR [eax]
c00075df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075e3:	66 89 10             	mov    WORD PTR [eax],dx
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00075ef:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00075f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075fb:	66 89 10             	mov    WORD PTR [eax],dx
c00075fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007602:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007605:	0f b7 c0             	movzx  eax,ax
c0007608:	3d 40 06 00 00       	cmp    eax,0x640
c000760d:	74 1d                	je     c000762c <mem_trim+0x2dc>
c000760f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007619:	66 8b 00             	mov    ax,WORD PTR [eax]
c000761c:	0f b7 c0             	movzx  eax,ax
c000761f:	01 c2                	add    edx,eax
c0007621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007625:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007629:	8d 76 00             	lea    esi,[esi+0x0]
c000762c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007632:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007636:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000763a:	29 d1                	sub    ecx,edx
c000763c:	89 ca                	mov    edx,ecx
c000763e:	01 d0                	add    eax,edx
c0007640:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007646:	66 90                	xchg   ax,ax
c0007648:	83 ec 0c             	sub    esp,0xc
c000764b:	68 98 76 03 c0       	push   0xc0037698
c0007650:	e8 8b 96 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007655:	83 c4 10             	add    esp,0x10
c0007658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000765c:	83 c4 2c             	add    esp,0x2c
c000765f:	c3                   	ret    

c0007660 <mem_malloc>:
c0007660:	53                   	push   ebx
c0007661:	83 ec 28             	sub    esp,0x28
c0007664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007668:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000766d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007672:	85 c0                	test   eax,eax
c0007674:	75 0a                	jne    c0007680 <mem_malloc+0x20>
c0007676:	b8 00 00 00 00       	mov    eax,0x0
c000767b:	e9 f8 02 00 00       	jmp    c0007978 <mem_malloc+0x318>
c0007680:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007685:	83 f8 0b             	cmp    eax,0xb
c0007688:	77 0a                	ja     c0007694 <mem_malloc+0x34>
c000768a:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007691:	8d 76 00             	lea    esi,[esi+0x0]
c0007694:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007699:	3d 40 06 00 00       	cmp    eax,0x640
c000769e:	76 0c                	jbe    c00076ac <mem_malloc+0x4c>
c00076a0:	b8 00 00 00 00       	mov    eax,0x0
c00076a5:	e9 ce 02 00 00       	jmp    c0007978 <mem_malloc+0x318>
c00076aa:	66 90                	xchg   ax,ax
c00076ac:	83 ec 08             	sub    esp,0x8
c00076af:	6a 00                	push   0x0
c00076b1:	68 98 76 03 c0       	push   0xc0037698
c00076b6:	e8 3d 96 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c00076bb:	83 c4 10             	add    esp,0x10
c00076be:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076c4:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00076c9:	29 c2                	sub    edx,eax
c00076cb:	89 d0                	mov    eax,edx
c00076cd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076d2:	e9 61 02 00 00       	jmp    c0007938 <mem_malloc+0x2d8>
c00076d7:	90                   	nop
c00076d8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076de:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076e3:	01 d0                	add    eax,edx
c00076e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076ed:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076f0:	0f b6 c0             	movzx  eax,al
c00076f3:	85 c0                	test   eax,eax
c00076f5:	0f 85 25 02 00 00    	jne    c0007920 <mem_malloc+0x2c0>
c00076fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076ff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007702:	0f b7 d0             	movzx  edx,ax
c0007705:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000770a:	29 c2                	sub    edx,eax
c000770c:	89 d0                	mov    eax,edx
c000770e:	8d 50 fa             	lea    edx,[eax-0x6]
c0007711:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007716:	39 c2                	cmp    edx,eax
c0007718:	0f 82 02 02 00 00    	jb     c0007920 <mem_malloc+0x2c0>
c000771e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007722:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007725:	0f b7 d0             	movzx  edx,ax
c0007728:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000772d:	29 c2                	sub    edx,eax
c000772f:	89 d0                	mov    eax,edx
c0007731:	8d 50 fa             	lea    edx,[eax-0x6]
c0007734:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007739:	83 c0 12             	add    eax,0x12
c000773c:	39 c2                	cmp    edx,eax
c000773e:	0f 82 c4 00 00 00    	jb     c0007808 <mem_malloc+0x1a8>
c0007744:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007749:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000774d:	01 d0                	add    eax,edx
c000774f:	83 c0 06             	add    eax,0x6
c0007752:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0007757:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000775d:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0007762:	01 d0                	add    eax,edx
c0007764:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000776c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007770:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007774:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000777b:	66 89 10             	mov    WORD PTR [eax],dx
c000777e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007782:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007787:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000778b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000778f:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0007794:	66 89 10             	mov    WORD PTR [eax],dx
c0007797:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000779b:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000779f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a6:	0f b7 c0             	movzx  eax,ax
c00077a9:	3d 40 06 00 00       	cmp    eax,0x640
c00077ae:	74 1c                	je     c00077cc <mem_malloc+0x16c>
c00077b0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00077b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077ba:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077bd:	0f b7 c0             	movzx  eax,ax
c00077c0:	01 c2                	add    edx,eax
c00077c2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077c7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077cb:	90                   	nop
c00077cc:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077d6:	01 d0                	add    eax,edx
c00077d8:	83 c0 06             	add    eax,0x6
c00077db:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00077e1:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00077e8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077ee:	0f b7 d2             	movzx  edx,dx
c00077f1:	0f b7 c0             	movzx  eax,ax
c00077f4:	39 c2                	cmp    edx,eax
c00077f6:	73 64                	jae    c000785c <mem_malloc+0x1fc>
c00077f8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077fe:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007804:	eb 56                	jmp    c000785c <mem_malloc+0x1fc>
c0007806:	66 90                	xchg   ax,ax
c0007808:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000780c:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007810:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000781b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000781e:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007824:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007828:	29 cb                	sub    ebx,ecx
c000782a:	89 d9                	mov    ecx,ebx
c000782c:	29 c8                	sub    eax,ecx
c000782e:	01 d0                	add    eax,edx
c0007830:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007836:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000783d:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007843:	0f b7 d2             	movzx  edx,dx
c0007846:	0f b7 c0             	movzx  eax,ax
c0007849:	39 c2                	cmp    edx,eax
c000784b:	73 0f                	jae    c000785c <mem_malloc+0x1fc>
c000784d:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007853:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007859:	8d 76 00             	lea    esi,[esi+0x0]
c000785c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007861:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007865:	75 71                	jne    c00078d8 <mem_malloc+0x278>
c0007867:	eb 1b                	jmp    c0007884 <mem_malloc+0x224>
c0007869:	8d 76 00             	lea    esi,[esi+0x0]
c000786c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007872:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007877:	66 8b 00             	mov    ax,WORD PTR [eax]
c000787a:	0f b7 c0             	movzx  eax,ax
c000787d:	01 d0                	add    eax,edx
c000787f:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007884:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007889:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000788c:	0f b6 c0             	movzx  eax,al
c000788f:	85 c0                	test   eax,eax
c0007891:	74 11                	je     c00078a4 <mem_malloc+0x244>
c0007893:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007899:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000789e:	39 c2                	cmp    edx,eax
c00078a0:	75 ca                	jne    c000786c <mem_malloc+0x20c>
c00078a2:	66 90                	xchg   ax,ax
c00078a4:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00078aa:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00078af:	39 c2                	cmp    edx,eax
c00078b1:	74 25                	je     c00078d8 <mem_malloc+0x278>
c00078b3:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00078b8:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00078bb:	0f b6 c0             	movzx  eax,al
c00078be:	85 c0                	test   eax,eax
c00078c0:	74 16                	je     c00078d8 <mem_malloc+0x278>
c00078c2:	83 ec 08             	sub    esp,0x8
c00078c5:	68 c5 fe 02 c0       	push   0xc002fec5
c00078ca:	68 26 fe 02 c0       	push   0xc002fe26
c00078cf:	e8 2c 85 01 00       	call   c001fe00 <CPrintf>
c00078d4:	83 c4 10             	add    esp,0x10
c00078d7:	90                   	nop
c00078d8:	83 ec 0c             	sub    esp,0xc
c00078db:	68 98 76 03 c0       	push   0xc0037698
c00078e0:	e8 fb 93 ff ff       	call   c0000ce0 <sys_sem_signal>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f1:	01 d0                	add    eax,edx
c00078f3:	8d 50 06             	lea    edx,[eax+0x6]
c00078f6:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00078fb:	39 c2                	cmp    edx,eax
c00078fd:	76 15                	jbe    c0007914 <mem_malloc+0x2b4>
c00078ff:	83 ec 08             	sub    esp,0x8
c0007902:	68 2c ff 02 c0       	push   0xc002ff2c
c0007907:	68 26 fe 02 c0       	push   0xc002fe26
c000790c:	e8 ef 84 01 00       	call   c001fe00 <CPrintf>
c0007911:	83 c4 10             	add    esp,0x10
c0007914:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007918:	83 c0 06             	add    eax,0x6
c000791b:	eb 5b                	jmp    c0007978 <mem_malloc+0x318>
c000791d:	8d 76 00             	lea    esi,[esi+0x0]
c0007920:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007926:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000792b:	01 d0                	add    eax,edx
c000792d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007930:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007935:	8d 76 00             	lea    esi,[esi+0x0]
c0007938:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000793d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007942:	b9 40 06 00 00       	mov    ecx,0x640
c0007947:	29 d1                	sub    ecx,edx
c0007949:	89 ca                	mov    edx,ecx
c000794b:	39 d0                	cmp    eax,edx
c000794d:	0f 8c 85 fd ff ff    	jl     c00076d8 <mem_malloc+0x78>
c0007953:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c0007959:	83 c0 01             	add    eax,0x1
c000795c:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c0007962:	83 ec 0c             	sub    esp,0xc
c0007965:	68 98 76 03 c0       	push   0xc0037698
c000796a:	e8 71 93 ff ff       	call   c0000ce0 <sys_sem_signal>
c000796f:	83 c4 10             	add    esp,0x10
c0007972:	b8 00 00 00 00       	mov    eax,0x0
c0007977:	90                   	nop
c0007978:	83 c4 28             	add    esp,0x28
c000797b:	5b                   	pop    ebx
c000797c:	c3                   	ret    
c000797d:	8d 76 00             	lea    esi,[esi+0x0]

c0007980 <mem_calloc>:
c0007980:	83 ec 2c             	sub    esp,0x2c
c0007983:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007987:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000798b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007990:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007995:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000799d:	0f af c2             	imul   eax,edx
c00079a0:	0f b7 c0             	movzx  eax,ax
c00079a3:	83 ec 0c             	sub    esp,0xc
c00079a6:	50                   	push   eax
c00079a7:	e8 b4 fc ff ff       	call   c0007660 <mem_malloc>
c00079ac:	83 c4 10             	add    esp,0x10
c00079af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00079b3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00079b8:	74 22                	je     c00079dc <mem_calloc+0x5c>
c00079ba:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079bf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079c4:	0f af c2             	imul   eax,edx
c00079c7:	83 ec 04             	sub    esp,0x4
c00079ca:	50                   	push   eax
c00079cb:	6a 00                	push   0x0
c00079cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079d1:	e8 1a 8b ff ff       	call   c00004f0 <memset>
c00079d6:	83 c4 10             	add    esp,0x10
c00079d9:	8d 76 00             	lea    esi,[esi+0x0]
c00079dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079e0:	83 c4 2c             	add    esp,0x2c
c00079e3:	c3                   	ret    

c00079e4 <memp_init>:
c00079e4:	83 ec 10             	sub    esp,0x10
c00079e7:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079ee:	eb 78                	jmp    c0007a68 <memp_init+0x84>
c00079f0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f5:	89 d0                	mov    eax,edx
c00079f7:	c1 e0 02             	shl    eax,0x2
c00079fa:	01 d0                	add    eax,edx
c00079fc:	d1 e0                	shl    eax,1
c00079fe:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a03:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a0d:	89 d0                	mov    eax,edx
c0007a0f:	c1 e0 02             	shl    eax,0x2
c0007a12:	01 d0                	add    eax,edx
c0007a14:	d1 e0                	shl    eax,1
c0007a16:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a1b:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a20:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a25:	89 d0                	mov    eax,edx
c0007a27:	c1 e0 02             	shl    eax,0x2
c0007a2a:	01 d0                	add    eax,edx
c0007a2c:	d1 e0                	shl    eax,1
c0007a2e:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a33:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a38:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a3d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a42:	66 8b 8c 00 7c ff 02 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffd0084]
c0007a4a:	89 d0                	mov    eax,edx
c0007a4c:	c1 e0 02             	shl    eax,0x2
c0007a4f:	01 d0                	add    eax,edx
c0007a51:	d1 e0                	shl    eax,1
c0007a53:	05 d2 67 03 c0       	add    eax,0xc00367d2
c0007a58:	66 89 08             	mov    WORD PTR [eax],cx
c0007a5b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a60:	83 c0 01             	add    eax,0x1
c0007a63:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a68:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a6d:	83 f8 0d             	cmp    eax,0xd
c0007a70:	0f 86 7a ff ff ff    	jbe    c00079f0 <memp_init+0xc>
c0007a76:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c0007a7e:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a85:	e9 8a 00 00 00       	jmp    c0007b14 <memp_init+0x130>
c0007a8a:	66 90                	xchg   ax,ax
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007a9c:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007aa3:	eb 47                	jmp    c0007aec <memp_init+0x108>
c0007aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0007aa8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aad:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ab8:	89 10                	mov    DWORD PTR [eax],edx
c0007aba:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007abf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007ac3:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007aca:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007acf:	66 8b 84 00 98 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0068]
c0007ad7:	0f b7 c0             	movzx  eax,ax
c0007ada:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ae2:	83 c0 01             	add    eax,0x1
c0007ae5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007aea:	66 90                	xchg   ax,ax
c0007aec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007af1:	66 8b 84 00 7c ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0084]
c0007af9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007afe:	0f b7 c0             	movzx  eax,ax
c0007b01:	39 c2                	cmp    edx,eax
c0007b03:	72 a3                	jb     c0007aa8 <memp_init+0xc4>
c0007b05:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007b0a:	83 c0 01             	add    eax,0x1
c0007b0d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007b12:	66 90                	xchg   ax,ax
c0007b14:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007b19:	83 f8 0d             	cmp    eax,0xd
c0007b1c:	0f 86 6a ff ff ff    	jbe    c0007a8c <memp_init+0xa8>
c0007b22:	90                   	nop
c0007b23:	83 c4 10             	add    esp,0x10
c0007b26:	c3                   	ret    
c0007b27:	90                   	nop

c0007b28 <memp_malloc>:
c0007b28:	83 ec 1c             	sub    esp,0x1c
c0007b2b:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b30:	76 22                	jbe    c0007b54 <memp_malloc+0x2c>
c0007b32:	83 ec 08             	sub    esp,0x8
c0007b35:	68 5c ff 02 c0       	push   0xc002ff5c
c0007b3a:	68 26 fe 02 c0       	push   0xc002fe26
c0007b3f:	e8 bc 82 01 00       	call   c001fe00 <CPrintf>
c0007b44:	83 c4 10             	add    esp,0x10
c0007b47:	b8 00 00 00 00       	mov    eax,0x0
c0007b4c:	e9 ff 00 00 00       	jmp    c0007c50 <memp_malloc+0x128>
c0007b51:	8d 76 00             	lea    esi,[esi+0x0]
c0007b54:	e8 97 82 01 00       	call   c001fdf0 <CLockScheduler>
c0007b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b5d:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c0007b64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b6d:	0f 84 a1 00 00 00    	je     c0007c14 <memp_malloc+0xec>
c0007b73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b77:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b7d:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b88:	89 d0                	mov    eax,edx
c0007b8a:	c1 e0 02             	shl    eax,0x2
c0007b8d:	01 d0                	add    eax,edx
c0007b8f:	d1 e0                	shl    eax,1
c0007b91:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b96:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b99:	83 c0 01             	add    eax,0x1
c0007b9c:	89 c1                	mov    ecx,eax
c0007b9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ba2:	89 d0                	mov    eax,edx
c0007ba4:	c1 e0 02             	shl    eax,0x2
c0007ba7:	01 d0                	add    eax,edx
c0007ba9:	d1 e0                	shl    eax,1
c0007bab:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bb0:	66 89 08             	mov    WORD PTR [eax],cx
c0007bb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bb7:	89 d0                	mov    eax,edx
c0007bb9:	c1 e0 02             	shl    eax,0x2
c0007bbc:	01 d0                	add    eax,edx
c0007bbe:	d1 e0                	shl    eax,1
c0007bc0:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007bc5:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007bc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcc:	89 d0                	mov    eax,edx
c0007bce:	c1 e0 02             	shl    eax,0x2
c0007bd1:	01 d0                	add    eax,edx
c0007bd3:	d1 e0                	shl    eax,1
c0007bd5:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bdd:	0f b7 d1             	movzx  edx,cx
c0007be0:	0f b7 c0             	movzx  eax,ax
c0007be3:	39 c2                	cmp    edx,eax
c0007be5:	73 5d                	jae    c0007c44 <memp_malloc+0x11c>
c0007be7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007beb:	89 d0                	mov    eax,edx
c0007bed:	c1 e0 02             	shl    eax,0x2
c0007bf0:	01 d0                	add    eax,edx
c0007bf2:	d1 e0                	shl    eax,1
c0007bf4:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bf9:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007bfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c00:	89 d0                	mov    eax,edx
c0007c02:	c1 e0 02             	shl    eax,0x2
c0007c05:	01 d0                	add    eax,edx
c0007c07:	d1 e0                	shl    eax,1
c0007c09:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007c0e:	66 89 08             	mov    WORD PTR [eax],cx
c0007c11:	eb 31                	jmp    c0007c44 <memp_malloc+0x11c>
c0007c13:	90                   	nop
c0007c14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c18:	89 d0                	mov    eax,edx
c0007c1a:	c1 e0 02             	shl    eax,0x2
c0007c1d:	01 d0                	add    eax,edx
c0007c1f:	d1 e0                	shl    eax,1
c0007c21:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c29:	83 c0 01             	add    eax,0x1
c0007c2c:	89 c1                	mov    ecx,eax
c0007c2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c32:	89 d0                	mov    eax,edx
c0007c34:	c1 e0 02             	shl    eax,0x2
c0007c37:	01 d0                	add    eax,edx
c0007c39:	d1 e0                	shl    eax,1
c0007c3b:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c40:	66 89 08             	mov    WORD PTR [eax],cx
c0007c43:	90                   	nop
c0007c44:	e8 8b 81 01 00       	call   c001fdd4 <CUnlockScheduler>
c0007c49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c50:	83 c4 1c             	add    esp,0x1c
c0007c53:	c3                   	ret    

c0007c54 <memp_free>:
c0007c54:	83 ec 1c             	sub    esp,0x1c
c0007c57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c5c:	74 66                	je     c0007cc4 <memp_free+0x70>
c0007c5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c66:	e8 85 81 01 00       	call   c001fdf0 <CLockScheduler>
c0007c6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c6f:	89 d0                	mov    eax,edx
c0007c71:	c1 e0 02             	shl    eax,0x2
c0007c74:	01 d0                	add    eax,edx
c0007c76:	d1 e0                	shl    eax,1
c0007c78:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c7d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c80:	83 e8 01             	sub    eax,0x1
c0007c83:	89 c1                	mov    ecx,eax
c0007c85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c89:	89 d0                	mov    eax,edx
c0007c8b:	c1 e0 02             	shl    eax,0x2
c0007c8e:	01 d0                	add    eax,edx
c0007c90:	d1 e0                	shl    eax,1
c0007c92:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c97:	66 89 08             	mov    WORD PTR [eax],cx
c0007c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c9e:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007ca5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ca9:	89 10                	mov    DWORD PTR [eax],edx
c0007cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007caf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007cb3:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007cba:	e8 15 81 01 00       	call   c001fdd4 <CUnlockScheduler>
c0007cbf:	eb 07                	jmp    c0007cc8 <memp_free+0x74>
c0007cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc4:	90                   	nop
c0007cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc8:	83 c4 1c             	add    esp,0x1c
c0007ccb:	c3                   	ret    

c0007ccc <netif_init>:
c0007ccc:	90                   	nop
c0007ccd:	c3                   	ret    
c0007cce:	66 90                	xchg   ax,ax

c0007cd0 <netif_find>:
c0007cd0:	83 ec 10             	sub    esp,0x10
c0007cd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cd8:	75 0a                	jne    c0007ce4 <netif_find+0x14>
c0007cda:	b8 00 00 00 00       	mov    eax,0x0
c0007cdf:	e9 80 00 00 00       	jmp    c0007d64 <netif_find+0x94>
c0007ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ce8:	83 c0 02             	add    eax,0x2
c0007ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0007ced:	83 e8 30             	sub    eax,0x30
c0007cf0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cf4:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007cf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007cfd:	eb 59                	jmp    c0007d58 <netif_find+0x88>
c0007cff:	90                   	nop
c0007d00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d04:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007d07:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007d0c:	0f b6 c0             	movzx  eax,al
c0007d0f:	39 c2                	cmp    edx,eax
c0007d11:	75 39                	jne    c0007d4c <netif_find+0x7c>
c0007d13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d17:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1d:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d20:	0f be d2             	movsx  edx,dl
c0007d23:	0f be c0             	movsx  eax,al
c0007d26:	39 c2                	cmp    edx,eax
c0007d28:	75 22                	jne    c0007d4c <netif_find+0x7c>
c0007d2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d2e:	83 c0 01             	add    eax,0x1
c0007d31:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d37:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d3a:	0f be d2             	movsx  edx,dl
c0007d3d:	0f be c0             	movsx  eax,al
c0007d40:	39 c2                	cmp    edx,eax
c0007d42:	75 08                	jne    c0007d4c <netif_find+0x7c>
c0007d44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d48:	eb 1a                	jmp    c0007d64 <netif_find+0x94>
c0007d4a:	66 90                	xchg   ax,ax
c0007d4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d56:	66 90                	xchg   ax,ax
c0007d58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d5d:	75 a1                	jne    c0007d00 <netif_find+0x30>
c0007d5f:	b8 00 00 00 00       	mov    eax,0x0
c0007d64:	83 c4 10             	add    esp,0x10
c0007d67:	c3                   	ret    

c0007d68 <netif_set_ipaddr>:
c0007d68:	83 ec 1c             	sub    esp,0x1c
c0007d6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d78:	39 c2                	cmp    edx,eax
c0007d7a:	0f 84 bc 00 00 00    	je     c0007e3c <netif_set_ipaddr+0xd4>
c0007d80:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d89:	eb 45                	jmp    c0007dd0 <netif_set_ipaddr+0x68>
c0007d8b:	90                   	nop
c0007d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d99:	39 c2                	cmp    edx,eax
c0007d9b:	75 27                	jne    c0007dc4 <netif_set_ipaddr+0x5c>
c0007d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007da1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007da4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007da8:	83 ec 0c             	sub    esp,0xc
c0007dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007daf:	e8 8c 36 00 00       	call   c000b440 <tcp_abort>
c0007db4:	83 c4 10             	add    esp,0x10
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007dbf:	eb 0f                	jmp    c0007dd0 <netif_set_ipaddr+0x68>
c0007dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007dcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007dcf:	90                   	nop
c0007dd0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007dd5:	75 b5                	jne    c0007d8c <netif_set_ipaddr+0x24>
c0007dd7:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007de0:	eb 52                	jmp    c0007e34 <netif_set_ipaddr+0xcc>
c0007de2:	66 90                	xchg   ax,ax
c0007de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007de8:	85 c0                	test   eax,eax
c0007dea:	74 3c                	je     c0007e28 <netif_set_ipaddr+0xc0>
c0007dec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df2:	85 c0                	test   eax,eax
c0007df4:	74 32                	je     c0007e28 <netif_set_ipaddr+0xc0>
c0007df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0007dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e03:	39 c2                	cmp    edx,eax
c0007e05:	75 21                	jne    c0007e28 <netif_set_ipaddr+0xc0>
c0007e07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e0c:	74 0a                	je     c0007e18 <netif_set_ipaddr+0xb0>
c0007e0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e12:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e14:	eb 0a                	jmp    c0007e20 <netif_set_ipaddr+0xb8>
c0007e16:	66 90                	xchg   ax,ax
c0007e18:	b8 00 00 00 00       	mov    eax,0x0
c0007e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e24:	89 02                	mov    DWORD PTR [edx],eax
c0007e26:	66 90                	xchg   ax,ax
c0007e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e33:	90                   	nop
c0007e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e39:	75 a9                	jne    c0007de4 <netif_set_ipaddr+0x7c>
c0007e3b:	90                   	nop
c0007e3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e41:	74 09                	je     c0007e4c <netif_set_ipaddr+0xe4>
c0007e43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e49:	eb 09                	jmp    c0007e54 <netif_set_ipaddr+0xec>
c0007e4b:	90                   	nop
c0007e4c:	b8 00 00 00 00       	mov    eax,0x0
c0007e51:	8d 76 00             	lea    esi,[esi+0x0]
c0007e54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e58:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e5b:	90                   	nop
c0007e5c:	83 c4 1c             	add    esp,0x1c
c0007e5f:	c3                   	ret    

c0007e60 <netif_set_gw>:
c0007e60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e65:	74 09                	je     c0007e70 <netif_set_gw+0x10>
c0007e67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e6d:	eb 09                	jmp    c0007e78 <netif_set_gw+0x18>
c0007e6f:	90                   	nop
c0007e70:	b8 00 00 00 00       	mov    eax,0x0
c0007e75:	8d 76 00             	lea    esi,[esi+0x0]
c0007e78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e7c:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e7f:	90                   	nop
c0007e80:	c3                   	ret    
c0007e81:	8d 76 00             	lea    esi,[esi+0x0]

c0007e84 <netif_set_netmask>:
c0007e84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e89:	74 09                	je     c0007e94 <netif_set_netmask+0x10>
c0007e8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e91:	eb 09                	jmp    c0007e9c <netif_set_netmask+0x18>
c0007e93:	90                   	nop
c0007e94:	b8 00 00 00 00       	mov    eax,0x0
c0007e99:	8d 76 00             	lea    esi,[esi+0x0]
c0007e9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007ea0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007ea3:	90                   	nop
c0007ea4:	c3                   	ret    
c0007ea5:	8d 76 00             	lea    esi,[esi+0x0]

c0007ea8 <netif_set_addr>:
c0007ea8:	83 ec 0c             	sub    esp,0xc
c0007eab:	83 ec 08             	sub    esp,0x8
c0007eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eb6:	e8 ad fe ff ff       	call   c0007d68 <netif_set_ipaddr>
c0007ebb:	83 c4 10             	add    esp,0x10
c0007ebe:	83 ec 08             	sub    esp,0x8
c0007ec1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec9:	e8 b6 ff ff ff       	call   c0007e84 <netif_set_netmask>
c0007ece:	83 c4 10             	add    esp,0x10
c0007ed1:	83 ec 08             	sub    esp,0x8
c0007ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007edc:	e8 7f ff ff ff       	call   c0007e60 <netif_set_gw>
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	90                   	nop
c0007ee5:	83 c4 0c             	add    esp,0xc
c0007ee8:	c3                   	ret    
c0007ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0007eec <netif_add>:
c0007eec:	83 ec 0c             	sub    esp,0xc
c0007eef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ef4:	75 16                	jne    c0007f0c <netif_add+0x20>
c0007ef6:	83 ec 08             	sub    esp,0x8
c0007ef9:	68 b4 ff 02 c0       	push   0xc002ffb4
c0007efe:	68 26 fe 02 c0       	push   0xc002fe26
c0007f03:	e8 f8 7e 01 00       	call   c001fe00 <CPrintf>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	90                   	nop
c0007f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f26:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f31:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f3d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f40:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007f45:	8d 50 01             	lea    edx,[eax+0x1]
c0007f48:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007f4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f52:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f5d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f70:	e8 33 ff ff ff       	call   c0007ea8 <netif_set_addr>
c0007f75:	83 c4 10             	add    esp,0x10
c0007f78:	83 ec 0c             	sub    esp,0xc
c0007f7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f83:	ff d0                	call   eax
c0007f85:	83 c4 10             	add    esp,0x10
c0007f88:	0f be c0             	movsx  eax,al
c0007f8b:	85 c0                	test   eax,eax
c0007f8d:	74 09                	je     c0007f98 <netif_add+0xac>
c0007f8f:	b8 00 00 00 00       	mov    eax,0x0
c0007f94:	eb 1e                	jmp    c0007fb4 <netif_add+0xc8>
c0007f96:	66 90                	xchg   ax,ax
c0007f98:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa2:	89 10                	mov    DWORD PTR [eax],edx
c0007fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa8:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0007fb4:	83 c4 0c             	add    esp,0xc
c0007fb7:	c3                   	ret    

c0007fb8 <netif_set_default>:
c0007fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fbc:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007fc1:	90                   	nop
c0007fc2:	c3                   	ret    
c0007fc3:	90                   	nop

c0007fc4 <netif_set_up>:
c0007fc4:	83 ec 0c             	sub    esp,0xc
c0007fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fcb:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fce:	0f b6 c0             	movzx  eax,al
c0007fd1:	83 e0 01             	and    eax,0x1
c0007fd4:	75 4a                	jne    c0008020 <netif_set_up+0x5c>
c0007fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fda:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fdd:	83 c8 01             	or     eax,0x1
c0007fe0:	88 c2                	mov    dl,al
c0007fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe6:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fed:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ff0:	0f b6 c0             	movzx  eax,al
c0007ff3:	83 e0 10             	and    eax,0x10
c0007ff6:	74 28                	je     c0008020 <netif_set_up+0x5c>
c0007ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ffc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fff:	0f b6 c0             	movzx  eax,al
c0008002:	83 e0 20             	and    eax,0x20
c0008005:	74 19                	je     c0008020 <netif_set_up+0x5c>
c0008007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000800b:	83 c0 04             	add    eax,0x4
c000800e:	83 ec 08             	sub    esp,0x8
c0008011:	50                   	push   eax
c0008012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008016:	e8 55 a6 00 00       	call   c0012670 <etharp_request>
c000801b:	83 c4 10             	add    esp,0x10
c000801e:	66 90                	xchg   ax,ax
c0008020:	90                   	nop
c0008021:	83 c4 0c             	add    esp,0xc
c0008024:	c3                   	ret    
c0008025:	8d 76 00             	lea    esi,[esi+0x0]

c0008028 <netif_set_down>:
c0008028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000802f:	0f b6 c0             	movzx  eax,al
c0008032:	83 e0 01             	and    eax,0x1
c0008035:	74 15                	je     c000804c <netif_set_down+0x24>
c0008037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000803b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000803e:	83 e0 fe             	and    eax,0xfffffffe
c0008041:	88 c2                	mov    dl,al
c0008043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008047:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000804a:	66 90                	xchg   ax,ax
c000804c:	90                   	nop
c000804d:	c3                   	ret    
c000804e:	66 90                	xchg   ax,ax

c0008050 <netif_remove>:
c0008050:	83 ec 10             	sub    esp,0x10
c0008053:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008058:	0f 84 92 00 00 00    	je     c00080f0 <netif_remove+0xa0>
c000805e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008062:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008065:	83 e0 01             	and    eax,0x1
c0008068:	0f b6 c0             	movzx  eax,al
c000806b:	85 c0                	test   eax,eax
c000806d:	74 0d                	je     c000807c <netif_remove+0x2c>
c000806f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008073:	e8 b0 ff ff ff       	call   c0008028 <netif_set_down>
c0008078:	83 c4 04             	add    esp,0x4
c000807b:	90                   	nop
c000807c:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0008081:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008085:	75 0d                	jne    c0008094 <netif_remove+0x44>
c0008087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000808b:	8b 00                	mov    eax,DWORD PTR [eax]
c000808d:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0008092:	eb 44                	jmp    c00080d8 <netif_remove+0x88>
c0008094:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0008099:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000809d:	eb 29                	jmp    c00080c8 <netif_remove+0x78>
c000809f:	90                   	nop
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080aa:	75 10                	jne    c00080bc <netif_remove+0x6c>
c00080ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00080b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00080b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080b6:	89 10                	mov    DWORD PTR [eax],edx
c00080b8:	eb 16                	jmp    c00080d0 <netif_remove+0x80>
c00080ba:	66 90                	xchg   ax,ax
c00080bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00080c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080c6:	66 90                	xchg   ax,ax
c00080c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080cd:	75 d1                	jne    c00080a0 <netif_remove+0x50>
c00080cf:	90                   	nop
c00080d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080d5:	74 1d                	je     c00080f4 <netif_remove+0xa4>
c00080d7:	90                   	nop
c00080d8:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00080dd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080e1:	75 15                	jne    c00080f8 <netif_remove+0xa8>
c00080e3:	6a 00                	push   0x0
c00080e5:	e8 ce fe ff ff       	call   c0007fb8 <netif_set_default>
c00080ea:	83 c4 04             	add    esp,0x4
c00080ed:	eb 09                	jmp    c00080f8 <netif_remove+0xa8>
c00080ef:	90                   	nop
c00080f0:	90                   	nop
c00080f1:	eb 05                	jmp    c00080f8 <netif_remove+0xa8>
c00080f3:	90                   	nop
c00080f4:	90                   	nop
c00080f5:	8d 76 00             	lea    esi,[esi+0x0]
c00080f8:	83 c4 10             	add    esp,0x10
c00080fb:	c3                   	ret    

c00080fc <netif_set_link_up>:
c00080fc:	83 ec 0c             	sub    esp,0xc
c00080ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008103:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008106:	0f b6 c0             	movzx  eax,al
c0008109:	83 e0 10             	and    eax,0x10
c000810c:	75 4a                	jne    c0008158 <netif_set_link_up+0x5c>
c000810e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008112:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008115:	83 c8 10             	or     eax,0x10
c0008118:	88 c2                	mov    dl,al
c000811a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811e:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008125:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008128:	0f b6 c0             	movzx  eax,al
c000812b:	83 e0 01             	and    eax,0x1
c000812e:	74 28                	je     c0008158 <netif_set_link_up+0x5c>
c0008130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008134:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	83 e0 20             	and    eax,0x20
c000813d:	74 19                	je     c0008158 <netif_set_link_up+0x5c>
c000813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008143:	83 c0 04             	add    eax,0x4
c0008146:	83 ec 08             	sub    esp,0x8
c0008149:	50                   	push   eax
c000814a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000814e:	e8 1d a5 00 00       	call   c0012670 <etharp_request>
c0008153:	83 c4 10             	add    esp,0x10
c0008156:	66 90                	xchg   ax,ax
c0008158:	90                   	nop
c0008159:	83 c4 0c             	add    esp,0xc
c000815c:	c3                   	ret    
c000815d:	8d 76 00             	lea    esi,[esi+0x0]

c0008160 <netif_set_link_down>:
c0008160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008164:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008167:	0f b6 c0             	movzx  eax,al
c000816a:	83 e0 10             	and    eax,0x10
c000816d:	74 15                	je     c0008184 <netif_set_link_down+0x24>
c000816f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008173:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008176:	83 e0 ef             	and    eax,0xffffffef
c0008179:	88 c2                	mov    dl,al
c000817b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000817f:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008182:	66 90                	xchg   ax,ax
c0008184:	90                   	nop
c0008185:	c3                   	ret    
c0008186:	66 90                	xchg   ax,ax

c0008188 <pbuf_free_ooseq>:
c0008188:	83 ec 1c             	sub    esp,0x1c
c000818b:	e8 60 7c 01 00       	call   c001fdf0 <CLockScheduler>
c0008190:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008197:	e8 38 7c 01 00       	call   c001fdd4 <CUnlockScheduler>
c000819c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c00081a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081a5:	eb 41                	jmp    c00081e8 <pbuf_free_ooseq+0x60>
c00081a7:	90                   	nop
c00081a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081ac:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081b2:	85 c0                	test   eax,eax
c00081b4:	74 26                	je     c00081dc <pbuf_free_ooseq+0x54>
c00081b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081ba:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081c0:	83 ec 0c             	sub    esp,0xc
c00081c3:	50                   	push   eax
c00081c4:	e8 1b 20 00 00       	call   c000a1e4 <tcp_segs_free>
c00081c9:	83 c4 10             	add    esp,0x10
c00081cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081d0:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081da:	eb 14                	jmp    c00081f0 <pbuf_free_ooseq+0x68>
c00081dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081e7:	90                   	nop
c00081e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081ed:	75 b9                	jne    c00081a8 <pbuf_free_ooseq+0x20>
c00081ef:	90                   	nop
c00081f0:	83 c4 1c             	add    esp,0x1c
c00081f3:	c3                   	ret    

c00081f4 <pbuf_pool_is_empty>:
c00081f4:	83 ec 1c             	sub    esp,0x1c
c00081f7:	e8 f4 7b 01 00       	call   c001fdf0 <CLockScheduler>
c00081fc:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0008201:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008205:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c000820c:	e8 c3 7b 01 00       	call   c001fdd4 <CUnlockScheduler>
c0008211:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008216:	85 c0                	test   eax,eax
c0008218:	75 2e                	jne    c0008248 <pbuf_pool_is_empty+0x54>
c000821a:	83 ec 04             	sub    esp,0x4
c000821d:	6a 00                	push   0x0
c000821f:	6a 00                	push   0x0
c0008221:	68 88 81 00 c0       	push   0xc0008188
c0008226:	e8 5d 8a ff ff       	call   c0000c88 <tcpip_callback_with_block>
c000822b:	83 c4 10             	add    esp,0x10
c000822e:	0f be c0             	movsx  eax,al
c0008231:	85 c0                	test   eax,eax
c0008233:	74 13                	je     c0008248 <pbuf_pool_is_empty+0x54>
c0008235:	e8 b6 7b 01 00       	call   c001fdf0 <CLockScheduler>
c000823a:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008241:	e8 8e 7b 01 00       	call   c001fdd4 <CUnlockScheduler>
c0008246:	66 90                	xchg   ax,ax
c0008248:	90                   	nop
c0008249:	83 c4 1c             	add    esp,0x1c
c000824c:	c3                   	ret    
c000824d:	8d 76 00             	lea    esi,[esi+0x0]

c0008250 <pbuf_alloced_custom>:
c0008250:	83 ec 2c             	sub    esp,0x2c
c0008253:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008257:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000825b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008260:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008265:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c000826c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008271:	74 29                	je     c000829c <pbuf_alloced_custom+0x4c>
c0008273:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008278:	74 12                	je     c000828c <pbuf_alloced_custom+0x3c>
c000827a:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c000827f:	74 2b                	je     c00082ac <pbuf_alloced_custom+0x5c>
c0008281:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c0008286:	74 54                	je     c00082dc <pbuf_alloced_custom+0x8c>
c0008288:	eb 32                	jmp    c00082bc <pbuf_alloced_custom+0x6c>
c000828a:	66 90                	xchg   ax,ax
c000828c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008291:	83 c0 14             	add    eax,0x14
c0008294:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008299:	8d 76 00             	lea    esi,[esi+0x0]
c000829c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00082a1:	83 c0 14             	add    eax,0x14
c00082a4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00082a9:	8d 76 00             	lea    esi,[esi+0x0]
c00082ac:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00082b1:	83 c0 0e             	add    eax,0xe
c00082b4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00082b9:	eb 25                	jmp    c00082e0 <pbuf_alloced_custom+0x90>
c00082bb:	90                   	nop
c00082bc:	83 ec 08             	sub    esp,0x8
c00082bf:	68 cc ff 02 c0       	push   0xc002ffcc
c00082c4:	68 26 fe 02 c0       	push   0xc002fe26
c00082c9:	e8 32 7b 01 00       	call   c001fe00 <CPrintf>
c00082ce:	83 c4 10             	add    esp,0x10
c00082d1:	b8 00 00 00 00       	mov    eax,0x0
c00082d6:	e9 95 00 00 00       	jmp    c0008370 <pbuf_alloced_custom+0x120>
c00082db:	90                   	nop
c00082dc:	90                   	nop
c00082dd:	8d 76 00             	lea    esi,[esi+0x0]
c00082e0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082e5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ea:	01 c2                	add    edx,eax
c00082ec:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082f1:	39 c2                	cmp    edx,eax
c00082f3:	7d 07                	jge    c00082fc <pbuf_alloced_custom+0xac>
c00082f5:	b8 00 00 00 00       	mov    eax,0x0
c00082fa:	eb 74                	jmp    c0008370 <pbuf_alloced_custom+0x120>
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008306:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000830b:	74 17                	je     c0008324 <pbuf_alloced_custom+0xd4>
c000830d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008316:	01 c2                	add    edx,eax
c0008318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000831c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000831f:	eb 0f                	jmp    c0008330 <pbuf_alloced_custom+0xe0>
c0008321:	8d 76 00             	lea    esi,[esi+0x0]
c0008324:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008328:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000832f:	90                   	nop
c0008330:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008334:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c0008338:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000833c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008340:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000834b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000834f:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008353:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008357:	88 c2                	mov    dl,al
c0008359:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000835d:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008360:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008364:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000836a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000836e:	66 90                	xchg   ax,ax
c0008370:	83 c4 2c             	add    esp,0x2c
c0008373:	c3                   	ret    

c0008374 <pbuf_header>:
c0008374:	83 ec 2c             	sub    esp,0x2c
c0008377:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000837b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008380:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008385:	75 15                	jne    c000839c <pbuf_header+0x28>
c0008387:	83 ec 08             	sub    esp,0x8
c000838a:	68 56 02 03 c0       	push   0xc0030256
c000838f:	68 26 fe 02 c0       	push   0xc002fe26
c0008394:	e8 67 7a 01 00       	call   c001fe00 <CPrintf>
c0008399:	83 c4 10             	add    esp,0x10
c000839c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00083a1:	85 c0                	test   eax,eax
c00083a3:	74 07                	je     c00083ac <pbuf_header+0x38>
c00083a5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00083aa:	75 08                	jne    c00083b4 <pbuf_header+0x40>
c00083ac:	b0 00                	mov    al,0x0
c00083ae:	e9 5d 01 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c00083b3:	90                   	nop
c00083b4:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00083b9:	85 c0                	test   eax,eax
c00083bb:	79 3b                	jns    c00083f8 <pbuf_header+0x84>
c00083bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c1:	f7 d8                	neg    eax
c00083c3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083cc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083d0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083d5:	0f b7 c0             	movzx  eax,ax
c00083d8:	39 c2                	cmp    edx,eax
c00083da:	76 28                	jbe    c0008404 <pbuf_header+0x90>
c00083dc:	83 ec 08             	sub    esp,0x8
c00083df:	68 a7 01 03 c0       	push   0xc00301a7
c00083e4:	68 26 fe 02 c0       	push   0xc002fe26
c00083e9:	e8 12 7a 01 00       	call   c001fe00 <CPrintf>
c00083ee:	83 c4 10             	add    esp,0x10
c00083f1:	b0 01                	mov    al,0x1
c00083f3:	e9 18 01 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c00083f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083fc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008401:	8d 76 00             	lea    esi,[esi+0x0]
c0008404:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008408:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000840b:	0f b6 c0             	movzx  eax,al
c000840e:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0008413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000841e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008423:	85 c0                	test   eax,eax
c0008425:	74 0d                	je     c0008434 <pbuf_header+0xc0>
c0008427:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000842c:	83 f8 03             	cmp    eax,0x3
c000842f:	75 3f                	jne    c0008470 <pbuf_header+0xfc>
c0008431:	8d 76 00             	lea    esi,[esi+0x0]
c0008434:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000843b:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008440:	f7 da                	neg    edx
c0008442:	01 c2                	add    edx,eax
c0008444:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008448:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000844f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008452:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008456:	83 c2 10             	add    edx,0x10
c0008459:	39 d0                	cmp    eax,edx
c000845b:	73 7f                	jae    c00084dc <pbuf_header+0x168>
c000845d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008461:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008465:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008468:	b0 01                	mov    al,0x1
c000846a:	e9 a1 00 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c000846f:	90                   	nop
c0008470:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008475:	83 f8 02             	cmp    eax,0x2
c0008478:	74 0a                	je     c0008484 <pbuf_header+0x110>
c000847a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000847f:	83 f8 01             	cmp    eax,0x1
c0008482:	75 3c                	jne    c00084c0 <pbuf_header+0x14c>
c0008484:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008489:	85 c0                	test   eax,eax
c000848b:	79 2f                	jns    c00084bc <pbuf_header+0x148>
c000848d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008491:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008495:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000849a:	0f b7 c0             	movzx  eax,ax
c000849d:	39 c2                	cmp    edx,eax
c000849f:	77 1b                	ja     c00084bc <pbuf_header+0x148>
c00084a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00084a8:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00084ad:	f7 da                	neg    edx
c00084af:	01 c2                	add    edx,eax
c00084b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00084b8:	eb 22                	jmp    c00084dc <pbuf_header+0x168>
c00084ba:	66 90                	xchg   ax,ax
c00084bc:	b0 01                	mov    al,0x1
c00084be:	eb 50                	jmp    c0008510 <pbuf_header+0x19c>
c00084c0:	83 ec 08             	sub    esp,0x8
c00084c3:	68 c5 01 03 c0       	push   0xc00301c5
c00084c8:	68 26 fe 02 c0       	push   0xc002fe26
c00084cd:	e8 2e 79 01 00       	call   c001fe00 <CPrintf>
c00084d2:	83 c4 10             	add    esp,0x10
c00084d5:	b0 01                	mov    al,0x1
c00084d7:	eb 37                	jmp    c0008510 <pbuf_header+0x19c>
c00084d9:	8d 76 00             	lea    esi,[esi+0x0]
c00084dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084e0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e8:	01 d0                	add    eax,edx
c00084ea:	89 c2                	mov    edx,eax
c00084ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084f0:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00084f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084f8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ff:	01 d0                	add    eax,edx
c0008501:	89 c2                	mov    edx,eax
c0008503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008507:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000850b:	b0 00                	mov    al,0x0
c000850d:	8d 76 00             	lea    esi,[esi+0x0]
c0008510:	83 c4 2c             	add    esp,0x2c
c0008513:	c3                   	ret    

c0008514 <pbuf_free>:
c0008514:	83 ec 1c             	sub    esp,0x1c
c0008517:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000851c:	75 26                	jne    c0008544 <pbuf_free+0x30>
c000851e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008523:	75 17                	jne    c000853c <pbuf_free+0x28>
c0008525:	83 ec 08             	sub    esp,0x8
c0008528:	68 56 02 03 c0       	push   0xc0030256
c000852d:	68 26 fe 02 c0       	push   0xc002fe26
c0008532:	e8 c9 78 01 00       	call   c001fe00 <CPrintf>
c0008537:	83 c4 10             	add    esp,0x10
c000853a:	66 90                	xchg   ax,ax
c000853c:	b0 00                	mov    al,0x0
c000853e:	e9 a9 01 00 00       	jmp    c00086ec <pbuf_free+0x1d8>
c0008543:	90                   	nop
c0008544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008548:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000854b:	0f b6 c0             	movzx  eax,al
c000854e:	85 c0                	test   eax,eax
c0008550:	74 42                	je     c0008594 <pbuf_free+0x80>
c0008552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008556:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008559:	0f b6 c0             	movzx  eax,al
c000855c:	83 f8 01             	cmp    eax,0x1
c000855f:	74 33                	je     c0008594 <pbuf_free+0x80>
c0008561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008565:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008568:	0f b6 c0             	movzx  eax,al
c000856b:	83 f8 02             	cmp    eax,0x2
c000856e:	74 24                	je     c0008594 <pbuf_free+0x80>
c0008570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008574:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008577:	0f b6 c0             	movzx  eax,al
c000857a:	83 f8 03             	cmp    eax,0x3
c000857d:	74 15                	je     c0008594 <pbuf_free+0x80>
c000857f:	83 ec 08             	sub    esp,0x8
c0008582:	68 d3 01 03 c0       	push   0xc00301d3
c0008587:	68 26 fe 02 c0       	push   0xc002fe26
c000858c:	e8 6f 78 01 00       	call   c001fe00 <CPrintf>
c0008591:	83 c4 10             	add    esp,0x10
c0008594:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008599:	e9 3e 01 00 00       	jmp    c00086dc <pbuf_free+0x1c8>
c000859e:	66 90                	xchg   ax,ax
c00085a0:	e8 4b 78 01 00       	call   c001fdf0 <CLockScheduler>
c00085a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085ad:	0f b7 c0             	movzx  eax,ax
c00085b0:	85 c0                	test   eax,eax
c00085b2:	75 18                	jne    c00085cc <pbuf_free+0xb8>
c00085b4:	83 ec 08             	sub    esp,0x8
c00085b7:	68 e8 01 03 c0       	push   0xc00301e8
c00085bc:	68 26 fe 02 c0       	push   0xc002fe26
c00085c1:	e8 3a 78 01 00       	call   c001fe00 <CPrintf>
c00085c6:	83 c4 10             	add    esp,0x10
c00085c9:	8d 76 00             	lea    esi,[esi+0x0]
c00085cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085d0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085d4:	83 e8 01             	sub    eax,0x1
c00085d7:	89 c2                	mov    edx,eax
c00085d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085dd:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c00085e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085e9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085ee:	e8 e1 77 01 00       	call   c001fdd4 <CUnlockScheduler>
c00085f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085f8:	85 c0                	test   eax,eax
c00085fa:	0f 85 d4 00 00 00    	jne    c00086d4 <pbuf_free+0x1c0>
c0008600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008604:	8b 00                	mov    eax,DWORD PTR [eax]
c0008606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000860a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008611:	0f b6 c0             	movzx  eax,al
c0008614:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000861d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008620:	0f b6 c0             	movzx  eax,al
c0008623:	83 e0 02             	and    eax,0x2
c0008626:	74 3c                	je     c0008664 <pbuf_free+0x150>
c0008628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000862c:	89 04 24             	mov    DWORD PTR [esp],eax
c000862f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008632:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008635:	85 c0                	test   eax,eax
c0008637:	75 17                	jne    c0008650 <pbuf_free+0x13c>
c0008639:	83 ec 08             	sub    esp,0x8
c000863c:	68 f0 ff 02 c0       	push   0xc002fff0
c0008641:	68 26 fe 02 c0       	push   0xc002fe26
c0008646:	e8 b5 77 01 00       	call   c001fe00 <CPrintf>
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	66 90                	xchg   ax,ax
c0008650:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008653:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008656:	83 ec 0c             	sub    esp,0xc
c0008659:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000865d:	ff d0                	call   eax
c000865f:	83 c4 10             	add    esp,0x10
c0008662:	eb 58                	jmp    c00086bc <pbuf_free+0x1a8>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	83 f8 03             	cmp    eax,0x3
c000866c:	75 16                	jne    c0008684 <pbuf_free+0x170>
c000866e:	83 ec 08             	sub    esp,0x8
c0008671:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008675:	6a 0d                	push   0xd
c0008677:	e8 d8 f5 ff ff       	call   c0007c54 <memp_free>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	eb 3b                	jmp    c00086bc <pbuf_free+0x1a8>
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008689:	83 f8 01             	cmp    eax,0x1
c000868c:	74 0a                	je     c0008698 <pbuf_free+0x184>
c000868e:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008693:	83 f8 02             	cmp    eax,0x2
c0008696:	75 14                	jne    c00086ac <pbuf_free+0x198>
c0008698:	83 ec 08             	sub    esp,0x8
c000869b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000869f:	6a 0c                	push   0xc
c00086a1:	e8 ae f5 ff ff       	call   c0007c54 <memp_free>
c00086a6:	83 c4 10             	add    esp,0x10
c00086a9:	eb 11                	jmp    c00086bc <pbuf_free+0x1a8>
c00086ab:	90                   	nop
c00086ac:	83 ec 0c             	sub    esp,0xc
c00086af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00086b3:	e8 74 eb ff ff       	call   c000722c <mem_free>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	90                   	nop
c00086bc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c0:	83 c0 01             	add    eax,0x1
c00086c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086cf:	eb 0b                	jmp    c00086dc <pbuf_free+0x1c8>
c00086d1:	8d 76 00             	lea    esi,[esi+0x0]
c00086d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086e1:	0f 85 b9 fe ff ff    	jne    c00085a0 <pbuf_free+0x8c>
c00086e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086eb:	90                   	nop
c00086ec:	83 c4 1c             	add    esp,0x1c
c00086ef:	c3                   	ret    

c00086f0 <pbuf_alloc>:
c00086f0:	83 ec 3c             	sub    esp,0x3c
c00086f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086fc:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008703:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c0008708:	74 2a                	je     c0008734 <pbuf_alloc+0x44>
c000870a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000870f:	74 13                	je     c0008724 <pbuf_alloc+0x34>
c0008711:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c0008716:	74 2c                	je     c0008744 <pbuf_alloc+0x54>
c0008718:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c000871d:	74 55                	je     c0008774 <pbuf_alloc+0x84>
c000871f:	eb 33                	jmp    c0008754 <pbuf_alloc+0x64>
c0008721:	8d 76 00             	lea    esi,[esi+0x0]
c0008724:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008729:	83 c0 14             	add    eax,0x14
c000872c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008739:	83 c0 14             	add    eax,0x14
c000873c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008749:	83 c0 0e             	add    eax,0xe
c000874c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008751:	eb 25                	jmp    c0008778 <pbuf_alloc+0x88>
c0008753:	90                   	nop
c0008754:	83 ec 08             	sub    esp,0x8
c0008757:	68 fe 01 03 c0       	push   0xc00301fe
c000875c:	68 26 fe 02 c0       	push   0xc002fe26
c0008761:	e8 9a 76 01 00       	call   c001fe00 <CPrintf>
c0008766:	83 c4 10             	add    esp,0x10
c0008769:	b8 00 00 00 00       	mov    eax,0x0
c000876e:	e9 71 03 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008773:	90                   	nop
c0008774:	90                   	nop
c0008775:	8d 76 00             	lea    esi,[esi+0x0]
c0008778:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c000877d:	77 11                	ja     c0008790 <pbuf_alloc+0xa0>
c000877f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008784:	0f 85 c6 02 00 00    	jne    c0008a50 <pbuf_alloc+0x360>
c000878a:	e9 41 02 00 00       	jmp    c00089d0 <pbuf_alloc+0x2e0>
c000878f:	90                   	nop
c0008790:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008795:	0f 85 15 03 00 00    	jne    c0008ab0 <pbuf_alloc+0x3c0>
c000879b:	83 ec 0c             	sub    esp,0xc
c000879e:	6a 0d                	push   0xd
c00087a0:	e8 83 f3 ff ff       	call   c0007b28 <memp_malloc>
c00087a5:	83 c4 10             	add    esp,0x10
c00087a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087ac:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087b1:	75 11                	jne    c00087c4 <pbuf_alloc+0xd4>
c00087b3:	e8 3c fa ff ff       	call   c00081f4 <pbuf_pool_is_empty>
c00087b8:	b8 00 00 00 00       	mov    eax,0x0
c00087bd:	e9 22 03 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c00087c2:	66 90                	xchg   ax,ax
c00087c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087c8:	88 c2                	mov    dl,al
c00087ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087db:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087e0:	8d 50 10             	lea    edx,[eax+0x10]
c00087e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e7:	01 c2                	add    edx,eax
c00087e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087f8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087fc:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008801:	ba 4e 02 00 00       	mov    edx,0x24e
c0008806:	29 c2                	sub    edx,eax
c0008808:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000880d:	39 c2                	cmp    edx,eax
c000880f:	0f 4e c2             	cmovle eax,edx
c0008812:	89 c2                	mov    edx,eax
c0008814:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008818:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000881c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008820:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008827:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000882b:	0f b7 c0             	movzx  eax,ax
c000882e:	01 c2                	add    edx,eax
c0008830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008834:	05 5e 02 00 00       	add    eax,0x25e
c0008839:	39 c2                	cmp    edx,eax
c000883b:	76 17                	jbe    c0008854 <pbuf_alloc+0x164>
c000883d:	83 ec 08             	sub    esp,0x8
c0008840:	68 14 00 03 c0       	push   0xc0030014
c0008845:	68 26 fe 02 c0       	push   0xc002fe26
c000884a:	e8 b1 75 01 00       	call   c001fe00 <CPrintf>
c000884f:	83 c4 10             	add    esp,0x10
c0008852:	66 90                	xchg   ax,ax
c0008854:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008859:	ba 4e 02 00 00       	mov    edx,0x24e
c000885e:	29 c2                	sub    edx,eax
c0008860:	89 d0                	mov    eax,edx
c0008862:	85 c0                	test   eax,eax
c0008864:	7f 16                	jg     c000887c <pbuf_alloc+0x18c>
c0008866:	83 ec 08             	sub    esp,0x8
c0008869:	68 48 00 03 c0       	push   0xc0030048
c000886e:	68 26 fe 02 c0       	push   0xc002fe26
c0008873:	e8 88 75 01 00       	call   c001fe00 <CPrintf>
c0008878:	83 c4 10             	add    esp,0x10
c000887b:	90                   	nop
c000887c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008880:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008886:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000888e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008893:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008897:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000889b:	0f b7 c0             	movzx  eax,ax
c000889e:	29 c2                	sub    edx,eax
c00088a0:	89 d0                	mov    eax,edx
c00088a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00088a6:	e9 15 01 00 00       	jmp    c00089c0 <pbuf_alloc+0x2d0>
c00088ab:	90                   	nop
c00088ac:	83 ec 0c             	sub    esp,0xc
c00088af:	6a 0d                	push   0xd
c00088b1:	e8 72 f2 ff ff       	call   c0007b28 <memp_malloc>
c00088b6:	83 c4 10             	add    esp,0x10
c00088b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00088bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088c2:	75 20                	jne    c00088e4 <pbuf_alloc+0x1f4>
c00088c4:	e8 2b f9 ff ff       	call   c00081f4 <pbuf_pool_is_empty>
c00088c9:	83 ec 0c             	sub    esp,0xc
c00088cc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088d0:	e8 3f fc ff ff       	call   c0008514 <pbuf_free>
c00088d5:	83 c4 10             	add    esp,0x10
c00088d8:	b8 00 00 00 00       	mov    eax,0x0
c00088dd:	e9 02 02 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c00088e2:	66 90                	xchg   ax,ax
c00088e4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088e8:	88 c2                	mov    dl,al
c00088ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ee:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088f5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008903:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008907:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000890b:	89 10                	mov    DWORD PTR [eax],edx
c000890d:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c0008915:	7e 15                	jle    c000892c <pbuf_alloc+0x23c>
c0008917:	83 ec 08             	sub    esp,0x8
c000891a:	68 19 02 03 c0       	push   0xc0030219
c000891f:	68 26 fe 02 c0       	push   0xc002fe26
c0008924:	e8 d7 74 01 00       	call   c001fe00 <CPrintf>
c0008929:	83 c4 10             	add    esp,0x10
c000892c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008930:	89 c2                	mov    edx,eax
c0008932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008936:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000893a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000893e:	0f b7 d0             	movzx  edx,ax
c0008941:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008947:	76 07                	jbe    c0008950 <pbuf_alloc+0x260>
c0008949:	b8 4e 02 00 00       	mov    eax,0x24e
c000894e:	66 90                	xchg   ax,ax
c0008950:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008954:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000895c:	8d 50 10             	lea    edx,[eax+0x10]
c000895f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008963:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000896a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000896d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008971:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008975:	0f b7 c0             	movzx  eax,ax
c0008978:	01 c2                	add    edx,eax
c000897a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000897e:	05 5e 02 00 00       	add    eax,0x25e
c0008983:	39 c2                	cmp    edx,eax
c0008985:	76 15                	jbe    c000899c <pbuf_alloc+0x2ac>
c0008987:	83 ec 08             	sub    esp,0x8
c000898a:	68 14 00 03 c0       	push   0xc0030014
c000898f:	68 26 fe 02 c0       	push   0xc002fe26
c0008994:	e8 67 74 01 00       	call   c001fe00 <CPrintf>
c0008999:	83 c4 10             	add    esp,0x10
c000899c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089a0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00089a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089aa:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089ae:	0f b7 c0             	movzx  eax,ax
c00089b1:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c00089b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00089bd:	8d 76 00             	lea    esi,[esi+0x0]
c00089c0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089c5:	0f 8f e1 fe ff ff    	jg     c00088ac <pbuf_alloc+0x1bc>
c00089cb:	e9 fc 00 00 00       	jmp    c0008acc <pbuf_alloc+0x3dc>
c00089d0:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089d9:	01 d0                	add    eax,edx
c00089db:	83 c0 10             	add    eax,0x10
c00089de:	0f b7 c0             	movzx  eax,ax
c00089e1:	83 ec 0c             	sub    esp,0xc
c00089e4:	50                   	push   eax
c00089e5:	e8 76 ec ff ff       	call   c0007660 <mem_malloc>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089f1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089f6:	75 0c                	jne    c0008a04 <pbuf_alloc+0x314>
c00089f8:	b8 00 00 00 00       	mov    eax,0x0
c00089fd:	e9 e2 00 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008a02:	66 90                	xchg   ax,ax
c0008a04:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008a09:	8d 50 10             	lea    edx,[eax+0x10]
c0008a0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a10:	01 c2                	add    edx,eax
c0008a12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008a19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a21:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a29:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008a2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a30:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a42:	88 c2                	mov    dl,al
c0008a44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a48:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a4b:	eb 7f                	jmp    c0008acc <pbuf_alloc+0x3dc>
c0008a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a50:	83 ec 0c             	sub    esp,0xc
c0008a53:	6a 0c                	push   0xc
c0008a55:	e8 ce f0 ff ff       	call   c0007b28 <memp_malloc>
c0008a5a:	83 c4 10             	add    esp,0x10
c0008a5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a61:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a66:	75 08                	jne    c0008a70 <pbuf_alloc+0x380>
c0008a68:	b8 00 00 00 00       	mov    eax,0x0
c0008a6d:	eb 75                	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008a6f:	90                   	nop
c0008a70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a83:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a8b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008a8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a92:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008aa0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008aa4:	88 c2                	mov    dl,al
c0008aa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aaa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008aad:	eb 1d                	jmp    c0008acc <pbuf_alloc+0x3dc>
c0008aaf:	90                   	nop
c0008ab0:	83 ec 08             	sub    esp,0x8
c0008ab3:	68 2d 02 03 c0       	push   0xc003022d
c0008ab8:	68 26 fe 02 c0       	push   0xc002fe26
c0008abd:	e8 3e 73 01 00       	call   c001fe00 <CPrintf>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	b8 00 00 00 00       	mov    eax,0x0
c0008aca:	eb 18                	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008acc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ad0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ad6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ada:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ae2:	66 90                	xchg   ax,ax
c0008ae4:	83 c4 3c             	add    esp,0x3c
c0008ae7:	c3                   	ret    

c0008ae8 <pbuf_realloc>:
c0008ae8:	83 ec 2c             	sub    esp,0x2c
c0008aeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008aef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008af4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008af9:	75 15                	jne    c0008b10 <pbuf_realloc+0x28>
c0008afb:	83 ec 08             	sub    esp,0x8
c0008afe:	68 48 02 03 c0       	push   0xc0030248
c0008b03:	68 26 fe 02 c0       	push   0xc002fe26
c0008b08:	e8 f3 72 01 00       	call   c001fe00 <CPrintf>
c0008b0d:	83 c4 10             	add    esp,0x10
c0008b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b14:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b17:	0f b6 c0             	movzx  eax,al
c0008b1a:	83 f8 03             	cmp    eax,0x3
c0008b1d:	74 41                	je     c0008b60 <pbuf_realloc+0x78>
c0008b1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b23:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b26:	0f b6 c0             	movzx  eax,al
c0008b29:	83 f8 01             	cmp    eax,0x1
c0008b2c:	74 32                	je     c0008b60 <pbuf_realloc+0x78>
c0008b2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b32:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b35:	0f b6 c0             	movzx  eax,al
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 24                	je     c0008b60 <pbuf_realloc+0x78>
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b43:	0f b6 c0             	movzx  eax,al
c0008b46:	83 f8 02             	cmp    eax,0x2
c0008b49:	74 15                	je     c0008b60 <pbuf_realloc+0x78>
c0008b4b:	83 ec 08             	sub    esp,0x8
c0008b4e:	68 60 02 03 c0       	push   0xc0030260
c0008b53:	68 26 fe 02 c0       	push   0xc002fe26
c0008b58:	e8 a3 72 01 00       	call   c001fe00 <CPrintf>
c0008b5d:	83 c4 10             	add    esp,0x10
c0008b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b67:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b6c:	0f b7 c0             	movzx  eax,ax
c0008b6f:	39 c2                	cmp    edx,eax
c0008b71:	0f 83 71 01 00 00    	jae    c0008ce8 <pbuf_realloc+0x200>
c0008b77:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b83:	0f b7 c0             	movzx  eax,ax
c0008b86:	29 c2                	sub    edx,eax
c0008b88:	89 d0                	mov    eax,edx
c0008b8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b92:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b9f:	eb 7b                	jmp    c0008c1c <pbuf_realloc+0x134>
c0008ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0008ba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ba8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bac:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008bb1:	89 d1                	mov    ecx,edx
c0008bb3:	29 c1                	sub    ecx,eax
c0008bb5:	89 c8                	mov    eax,ecx
c0008bb7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008bbc:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008bc4:	7e 16                	jle    c0008bdc <pbuf_realloc+0xf4>
c0008bc6:	83 ec 08             	sub    esp,0x8
c0008bc9:	68 7b 02 03 c0       	push   0xc003027b
c0008bce:	68 26 fe 02 c0       	push   0xc002fe26
c0008bd3:	e8 28 72 01 00       	call   c001fe00 <CPrintf>
c0008bd8:	83 c4 10             	add    esp,0x10
c0008bdb:	90                   	nop
c0008bdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008be0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008be3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008be7:	01 d0                	add    eax,edx
c0008be9:	89 c2                	mov    edx,eax
c0008beb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bef:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bfd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c02:	75 18                	jne    c0008c1c <pbuf_realloc+0x134>
c0008c04:	83 ec 08             	sub    esp,0x8
c0008c07:	68 8c 02 03 c0       	push   0xc003028c
c0008c0c:	68 26 fe 02 c0       	push   0xc002fe26
c0008c11:	e8 ea 71 01 00       	call   c001fe00 <CPrintf>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	8d 76 00             	lea    esi,[esi+0x0]
c0008c1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c20:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c24:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c29:	0f b7 c0             	movzx  eax,ax
c0008c2c:	39 c2                	cmp    edx,eax
c0008c2e:	0f 87 70 ff ff ff    	ja     c0008ba4 <pbuf_realloc+0xbc>
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c3b:	0f b6 c0             	movzx  eax,al
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	75 5e                	jne    c0008ca0 <pbuf_realloc+0x1b8>
c0008c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c46:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c4a:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c4f:	0f b7 c0             	movzx  eax,ax
c0008c52:	39 c2                	cmp    edx,eax
c0008c54:	74 4a                	je     c0008ca0 <pbuf_realloc+0x1b8>
c0008c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c61:	89 c2                	mov    edx,eax
c0008c63:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c68:	01 d0                	add    eax,edx
c0008c6a:	0f b7 c0             	movzx  eax,ax
c0008c6d:	83 ec 08             	sub    esp,0x8
c0008c70:	50                   	push   eax
c0008c71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c75:	e8 d6 e6 ff ff       	call   c0007350 <mem_trim>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c81:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c86:	75 18                	jne    c0008ca0 <pbuf_realloc+0x1b8>
c0008c88:	83 ec 08             	sub    esp,0x8
c0008c8b:	68 a4 02 03 c0       	push   0xc00302a4
c0008c90:	68 26 fe 02 c0       	push   0xc002fe26
c0008c95:	e8 66 71 01 00       	call   c001fe00 <CPrintf>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0008ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca4:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008ca9:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008cad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008cb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb9:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008cbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cc3:	85 c0                	test   eax,eax
c0008cc5:	74 15                	je     c0008cdc <pbuf_realloc+0x1f4>
c0008cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ccd:	83 ec 0c             	sub    esp,0xc
c0008cd0:	50                   	push   eax
c0008cd1:	e8 3e f8 ff ff       	call   c0008514 <pbuf_free>
c0008cd6:	83 c4 10             	add    esp,0x10
c0008cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ce0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ce6:	eb 04                	jmp    c0008cec <pbuf_realloc+0x204>
c0008ce8:	90                   	nop
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 c4 2c             	add    esp,0x2c
c0008cef:	c3                   	ret    

c0008cf0 <pbuf_clen>:
c0008cf0:	83 ec 10             	sub    esp,0x10
c0008cf3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cf8:	eb 1a                	jmp    c0008d14 <pbuf_clen+0x24>
c0008cfa:	66 90                	xchg   ax,ax
c0008cfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008d00:	83 c0 01             	add    eax,0x1
c0008d03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008d11:	8d 76 00             	lea    esi,[esi+0x0]
c0008d14:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008d19:	75 e1                	jne    c0008cfc <pbuf_clen+0xc>
c0008d1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	c3                   	ret    
c0008d23:	90                   	nop

c0008d24 <pbuf_ref>:
c0008d24:	83 ec 0c             	sub    esp,0xc
c0008d27:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d2c:	74 22                	je     c0008d50 <pbuf_ref+0x2c>
c0008d2e:	e8 bd 70 01 00       	call   c001fdf0 <CLockScheduler>
c0008d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d37:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d3b:	83 c0 01             	add    eax,0x1
c0008d3e:	89 c2                	mov    edx,eax
c0008d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d44:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008d48:	e8 87 70 01 00       	call   c001fdd4 <CUnlockScheduler>
c0008d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d50:	90                   	nop
c0008d51:	83 c4 0c             	add    esp,0xc
c0008d54:	c3                   	ret    
c0008d55:	8d 76 00             	lea    esi,[esi+0x0]

c0008d58 <pbuf_cat>:
c0008d58:	83 ec 1c             	sub    esp,0x1c
c0008d5b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d60:	74 0a                	je     c0008d6c <pbuf_cat+0x14>
c0008d62:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d67:	75 1f                	jne    c0008d88 <pbuf_cat+0x30>
c0008d69:	8d 76 00             	lea    esi,[esi+0x0]
c0008d6c:	83 ec 08             	sub    esp,0x8
c0008d6f:	68 7c 00 03 c0       	push   0xc003007c
c0008d74:	68 26 fe 02 c0       	push   0xc002fe26
c0008d79:	e8 82 70 01 00       	call   c001fe00 <CPrintf>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	e9 ae 00 00 00       	jmp    c0008e34 <pbuf_cat+0xdc>
c0008d86:	66 90                	xchg   ax,ax
c0008d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d90:	eb 26                	jmp    c0008db8 <pbuf_cat+0x60>
c0008d92:	66 90                	xchg   ax,ax
c0008d94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008da2:	01 d0                	add    eax,edx
c0008da4:	89 c2                	mov    edx,eax
c0008da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008daa:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008dae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008db2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008db4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dbe:	85 c0                	test   eax,eax
c0008dc0:	75 d2                	jne    c0008d94 <pbuf_cat+0x3c>
c0008dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dcd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008dd1:	0f b7 d2             	movzx  edx,dx
c0008dd4:	0f b7 c0             	movzx  eax,ax
c0008dd7:	39 c2                	cmp    edx,eax
c0008dd9:	74 15                	je     c0008df0 <pbuf_cat+0x98>
c0008ddb:	83 ec 08             	sub    esp,0x8
c0008dde:	68 b4 00 03 c0       	push   0xc00300b4
c0008de3:	68 26 fe 02 c0       	push   0xc002fe26
c0008de8:	e8 13 70 01 00       	call   c001fe00 <CPrintf>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008df6:	85 c0                	test   eax,eax
c0008df8:	74 16                	je     c0008e10 <pbuf_cat+0xb8>
c0008dfa:	83 ec 08             	sub    esp,0x8
c0008dfd:	68 c0 02 03 c0       	push   0xc00302c0
c0008e02:	68 26 fe 02 c0       	push   0xc002fe26
c0008e07:	e8 f4 6f 01 00       	call   c001fe00 <CPrintf>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	90                   	nop
c0008e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e14:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e1b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e1e:	01 d0                	add    eax,edx
c0008e20:	89 c2                	mov    edx,eax
c0008e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e26:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008e2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e32:	89 10                	mov    DWORD PTR [eax],edx
c0008e34:	83 c4 1c             	add    esp,0x1c
c0008e37:	c3                   	ret    

c0008e38 <pbuf_chain>:
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	83 ec 08             	sub    esp,0x8
c0008e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	e8 0d ff ff ff       	call   c0008d58 <pbuf_cat>
c0008e4b:	83 c4 10             	add    esp,0x10
c0008e4e:	83 ec 0c             	sub    esp,0xc
c0008e51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e55:	e8 ca fe ff ff       	call   c0008d24 <pbuf_ref>
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	90                   	nop
c0008e5e:	83 c4 0c             	add    esp,0xc
c0008e61:	c3                   	ret    
c0008e62:	66 90                	xchg   ax,ax

c0008e64 <pbuf_dechain>:
c0008e64:	83 ec 1c             	sub    esp,0x1c
c0008e67:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e76:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e7b:	0f 84 8b 00 00 00    	je     c0008f0c <pbuf_dechain+0xa8>
c0008e81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e88:	0f b7 d0             	movzx  edx,ax
c0008e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e92:	0f b7 c8             	movzx  ecx,ax
c0008e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e99:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e9d:	0f b7 c0             	movzx  eax,ax
c0008ea0:	29 c1                	sub    ecx,eax
c0008ea2:	89 c8                	mov    eax,ecx
c0008ea4:	39 c2                	cmp    edx,eax
c0008ea6:	74 18                	je     c0008ec0 <pbuf_dechain+0x5c>
c0008ea8:	83 ec 08             	sub    esp,0x8
c0008eab:	68 e4 00 03 c0       	push   0xc00300e4
c0008eb0:	68 26 fe 02 c0       	push   0xc002fe26
c0008eb5:	e8 46 6f 01 00       	call   c001fe00 <CPrintf>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0008ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ec4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ecb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ecf:	89 d1                	mov    ecx,edx
c0008ed1:	29 c1                	sub    ecx,eax
c0008ed3:	89 c8                	mov    eax,ecx
c0008ed5:	89 c2                	mov    edx,eax
c0008ed7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008edb:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eed:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef5:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f00:	e8 0f f6 ff ff       	call   c0008514 <pbuf_free>
c0008f05:	83 c4 10             	add    esp,0x10
c0008f08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f10:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f17:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f1b:	0f b7 d2             	movzx  edx,dx
c0008f1e:	0f b7 c0             	movzx  eax,ax
c0008f21:	39 c2                	cmp    edx,eax
c0008f23:	74 17                	je     c0008f3c <pbuf_dechain+0xd8>
c0008f25:	83 ec 08             	sub    esp,0x8
c0008f28:	68 d0 02 03 c0       	push   0xc00302d0
c0008f2d:	68 26 fe 02 c0       	push   0xc002fe26
c0008f32:	e8 c9 6e 01 00       	call   c001fe00 <CPrintf>
c0008f37:	83 c4 10             	add    esp,0x10
c0008f3a:	66 90                	xchg   ax,ax
c0008f3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f41:	85 c0                	test   eax,eax
c0008f43:	75 07                	jne    c0008f4c <pbuf_dechain+0xe8>
c0008f45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f49:	eb 09                	jmp    c0008f54 <pbuf_dechain+0xf0>
c0008f4b:	90                   	nop
c0008f4c:	b8 00 00 00 00       	mov    eax,0x0
c0008f51:	8d 76 00             	lea    esi,[esi+0x0]
c0008f54:	83 c4 1c             	add    esp,0x1c
c0008f57:	c3                   	ret    

c0008f58 <pbuf_copy>:
c0008f58:	53                   	push   ebx
c0008f59:	83 ec 18             	sub    esp,0x18
c0008f5c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f63:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f6a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f6f:	74 1f                	je     c0008f90 <pbuf_copy+0x38>
c0008f71:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f76:	74 18                	je     c0008f90 <pbuf_copy+0x38>
c0008f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f7c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f86:	0f b7 d2             	movzx  edx,dx
c0008f89:	0f b7 c0             	movzx  eax,ax
c0008f8c:	39 c2                	cmp    edx,eax
c0008f8e:	73 1c                	jae    c0008fac <pbuf_copy+0x54>
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	68 08 01 03 c0       	push   0xc0030108
c0008f98:	68 26 fe 02 c0       	push   0xc002fe26
c0008f9d:	e8 5e 6e 01 00       	call   c001fe00 <CPrintf>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	b0 f2                	mov    al,0xf2
c0008fa7:	e9 0c 02 00 00       	jmp    c00091b8 <pbuf_copy+0x260>
c0008fac:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fb1:	75 15                	jne    c0008fc8 <pbuf_copy+0x70>
c0008fb3:	83 ec 08             	sub    esp,0x8
c0008fb6:	68 e5 02 03 c0       	push   0xc00302e5
c0008fbb:	68 26 fe 02 c0       	push   0xc002fe26
c0008fc0:	e8 3b 6e 01 00       	call   c001fe00 <CPrintf>
c0008fc5:	83 c4 10             	add    esp,0x10
c0008fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fcc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fd0:	0f b7 d0             	movzx  edx,ax
c0008fd3:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fd8:	89 d1                	mov    ecx,edx
c0008fda:	29 c1                	sub    ecx,eax
c0008fdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fe0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fe4:	0f b7 d0             	movzx  edx,ax
c0008fe7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fec:	29 c2                	sub    edx,eax
c0008fee:	89 d0                	mov    eax,edx
c0008ff0:	39 c1                	cmp    ecx,eax
c0008ff2:	7c 1c                	jl     c0009010 <pbuf_copy+0xb8>
c0008ff4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ff8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009000:	89 d3                	mov    ebx,edx
c0009002:	29 c3                	sub    ebx,eax
c0009004:	89 d8                	mov    eax,ebx
c0009006:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000900b:	eb 1b                	jmp    c0009028 <pbuf_copy+0xd0>
c000900d:	8d 76 00             	lea    esi,[esi+0x0]
c0009010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009014:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009018:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000901d:	89 d3                	mov    ebx,edx
c000901f:	29 c3                	sub    ebx,eax
c0009021:	89 d8                	mov    eax,ebx
c0009023:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0009028:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000902d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009031:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009034:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009039:	01 d1                	add    ecx,edx
c000903b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000903f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009042:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009047:	01 da                	add    edx,ebx
c0009049:	83 ec 04             	sub    esp,0x4
c000904c:	50                   	push   eax
c000904d:	51                   	push   ecx
c000904e:	52                   	push   edx
c000904f:	e8 26 73 ff ff       	call   c000037a <memcpy>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000905c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009061:	01 d0                	add    eax,edx
c0009063:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000906c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009071:	01 d0                	add    eax,edx
c0009073:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	76 18                	jbe    c00090a4 <pbuf_copy+0x14c>
c000908c:	83 ec 08             	sub    esp,0x8
c000908f:	68 f2 02 03 c0       	push   0xc00302f2
c0009094:	68 26 fe 02 c0       	push   0xc002fe26
c0009099:	e8 62 6d 01 00       	call   c001fe00 <CPrintf>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	8d 76 00             	lea    esi,[esi+0x0]
c00090a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090ac:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00090b1:	0f b7 c0             	movzx  eax,ax
c00090b4:	39 c2                	cmp    edx,eax
c00090b6:	75 14                	jne    c00090cc <pbuf_copy+0x174>
c00090b8:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00090bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	76 18                	jbe    c00090f8 <pbuf_copy+0x1a0>
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	68 09 03 03 c0       	push   0xc0030309
c00090e8:	68 26 fe 02 c0       	push   0xc002fe26
c00090ed:	e8 0e 6d 01 00       	call   c001fe00 <CPrintf>
c00090f2:	83 c4 10             	add    esp,0x10
c00090f5:	8d 76 00             	lea    esi,[esi+0x0]
c00090f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090fc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009100:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009105:	0f b7 c0             	movzx  eax,ax
c0009108:	39 c2                	cmp    edx,eax
c000910a:	72 14                	jb     c0009120 <pbuf_copy+0x1c8>
c000910c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0009113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009117:	8b 00                	mov    eax,DWORD PTR [eax]
c0009119:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000911d:	8d 76 00             	lea    esi,[esi+0x0]
c0009120:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009125:	74 3d                	je     c0009164 <pbuf_copy+0x20c>
c0009127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000912b:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000912f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009133:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009136:	0f b7 d2             	movzx  edx,dx
c0009139:	0f b7 c0             	movzx  eax,ax
c000913c:	39 c2                	cmp    edx,eax
c000913e:	75 24                	jne    c0009164 <pbuf_copy+0x20c>
c0009140:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	85 c0                	test   eax,eax
c0009148:	74 1a                	je     c0009164 <pbuf_copy+0x20c>
c000914a:	83 ec 08             	sub    esp,0x8
c000914d:	68 38 01 03 c0       	push   0xc0030138
c0009152:	68 26 fe 02 c0       	push   0xc002fe26
c0009157:	e8 a4 6c 01 00       	call   c001fe00 <CPrintf>
c000915c:	83 c4 10             	add    esp,0x10
c000915f:	b0 fa                	mov    al,0xfa
c0009161:	eb 55                	jmp    c00091b8 <pbuf_copy+0x260>
c0009163:	90                   	nop
c0009164:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009169:	74 3d                	je     c00091a8 <pbuf_copy+0x250>
c000916b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000916f:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009177:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000917a:	0f b7 d2             	movzx  edx,dx
c000917d:	0f b7 c0             	movzx  eax,ax
c0009180:	39 c2                	cmp    edx,eax
c0009182:	75 24                	jne    c00091a8 <pbuf_copy+0x250>
c0009184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009188:	8b 00                	mov    eax,DWORD PTR [eax]
c000918a:	85 c0                	test   eax,eax
c000918c:	74 1a                	je     c00091a8 <pbuf_copy+0x250>
c000918e:	83 ec 08             	sub    esp,0x8
c0009191:	68 38 01 03 c0       	push   0xc0030138
c0009196:	68 26 fe 02 c0       	push   0xc002fe26
c000919b:	e8 60 6c 01 00       	call   c001fe00 <CPrintf>
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	b0 fa                	mov    al,0xfa
c00091a5:	eb 11                	jmp    c00091b8 <pbuf_copy+0x260>
c00091a7:	90                   	nop
c00091a8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00091ad:	0f 85 f9 fd ff ff    	jne    c0008fac <pbuf_copy+0x54>
c00091b3:	b0 00                	mov    al,0x0
c00091b5:	8d 76 00             	lea    esi,[esi+0x0]
c00091b8:	83 c4 18             	add    esp,0x18
c00091bb:	5b                   	pop    ebx
c00091bc:	c3                   	ret    
c00091bd:	8d 76 00             	lea    esi,[esi+0x0]

c00091c0 <pbuf_copy_partial>:
c00091c0:	53                   	push   ebx
c00091c1:	83 ec 28             	sub    esp,0x28
c00091c4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00091c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091cc:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091d1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091d6:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091dd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091e2:	75 20                	jne    c0009204 <pbuf_copy_partial+0x44>
c00091e4:	83 ec 08             	sub    esp,0x8
c00091e7:	68 64 01 03 c0       	push   0xc0030164
c00091ec:	68 26 fe 02 c0       	push   0xc002fe26
c00091f1:	e8 0a 6c 01 00       	call   c001fe00 <CPrintf>
c00091f6:	83 c4 10             	add    esp,0x10
c00091f9:	b8 00 00 00 00       	mov    eax,0x0
c00091fe:	e9 59 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c0009203:	90                   	nop
c0009204:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009209:	75 21                	jne    c000922c <pbuf_copy_partial+0x6c>
c000920b:	83 ec 08             	sub    esp,0x8
c000920e:	68 84 01 03 c0       	push   0xc0030184
c0009213:	68 26 fe 02 c0       	push   0xc002fe26
c0009218:	e8 e3 6b 01 00       	call   c001fe00 <CPrintf>
c000921d:	83 c4 10             	add    esp,0x10
c0009220:	b8 00 00 00 00       	mov    eax,0x0
c0009225:	e9 32 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c000922a:	66 90                	xchg   ax,ax
c000922c:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009233:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009238:	74 0a                	je     c0009244 <pbuf_copy_partial+0x84>
c000923a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000923f:	75 0f                	jne    c0009250 <pbuf_copy_partial+0x90>
c0009241:	8d 76 00             	lea    esi,[esi+0x0]
c0009244:	b8 00 00 00 00       	mov    eax,0x0
c0009249:	e9 0e 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c000924e:	66 90                	xchg   ax,ax
c0009250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009258:	e9 e3 00 00 00       	jmp    c0009340 <pbuf_copy_partial+0x180>
c000925d:	8d 76 00             	lea    esi,[esi+0x0]
c0009260:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009265:	85 c0                	test   eax,eax
c0009267:	74 33                	je     c000929c <pbuf_copy_partial+0xdc>
c0009269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000926d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009271:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009276:	0f b7 c0             	movzx  eax,ax
c0009279:	39 c2                	cmp    edx,eax
c000927b:	72 1f                	jb     c000929c <pbuf_copy_partial+0xdc>
c000927d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009281:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009285:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009289:	89 d3                	mov    ebx,edx
c000928b:	29 c3                	sub    ebx,eax
c000928d:	89 d8                	mov    eax,ebx
c000928f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009294:	e9 9b 00 00 00       	jmp    c0009334 <pbuf_copy_partial+0x174>
c0009299:	8d 76 00             	lea    esi,[esi+0x0]
c000929c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092a0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00092a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092a8:	89 d1                	mov    ecx,edx
c00092aa:	29 c1                	sub    ecx,eax
c00092ac:	89 c8                	mov    eax,ecx
c00092ae:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092b3:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c00092b8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00092bd:	39 c2                	cmp    edx,eax
c00092bf:	76 0b                	jbe    c00092cc <pbuf_copy_partial+0x10c>
c00092c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092c5:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092ca:	66 90                	xchg   ax,ax
c00092cc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092d5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092dd:	01 d1                	add    ecx,edx
c00092df:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092e8:	01 da                	add    edx,ebx
c00092ea:	83 ec 04             	sub    esp,0x4
c00092ed:	50                   	push   eax
c00092ee:	51                   	push   ecx
c00092ef:	52                   	push   edx
c00092f0:	e8 85 70 ff ff       	call   c000037a <memcpy>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009301:	01 d0                	add    eax,edx
c0009303:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009308:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000930d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009311:	01 d0                	add    eax,edx
c0009313:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009318:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000931c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009320:	89 d3                	mov    ebx,edx
c0009322:	29 c3                	sub    ebx,eax
c0009324:	89 d8                	mov    eax,ebx
c0009326:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000932b:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009332:	66 90                	xchg   ax,ax
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	8b 00                	mov    eax,DWORD PTR [eax]
c000933a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000933e:	66 90                	xchg   ax,ax
c0009340:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009345:	85 c0                	test   eax,eax
c0009347:	74 0b                	je     c0009354 <pbuf_copy_partial+0x194>
c0009349:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000934e:	0f 85 0c ff ff ff    	jne    c0009260 <pbuf_copy_partial+0xa0>
c0009354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009359:	8d 76 00             	lea    esi,[esi+0x0]
c000935c:	83 c4 28             	add    esp,0x28
c000935f:	5b                   	pop    ebx
c0009360:	c3                   	ret    
c0009361:	8d 76 00             	lea    esi,[esi+0x0]

c0009364 <pbuf_take>:
c0009364:	83 ec 2c             	sub    esp,0x2c
c0009367:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000936b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009370:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009374:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009379:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009380:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009385:	75 1d                	jne    c00093a4 <pbuf_take+0x40>
c0009387:	83 ec 08             	sub    esp,0x8
c000938a:	68 24 03 03 c0       	push   0xc0030324
c000938f:	68 26 fe 02 c0       	push   0xc002fe26
c0009394:	e8 67 6a 01 00       	call   c001fe00 <CPrintf>
c0009399:	83 c4 10             	add    esp,0x10
c000939c:	b0 00                	mov    al,0x0
c000939e:	e9 3d 01 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093a3:	90                   	nop
c00093a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a9:	75 1d                	jne    c00093c8 <pbuf_take+0x64>
c00093ab:	83 ec 08             	sub    esp,0x8
c00093ae:	68 3b 03 03 c0       	push   0xc003033b
c00093b3:	68 26 fe 02 c0       	push   0xc002fe26
c00093b8:	e8 43 6a 01 00       	call   c001fe00 <CPrintf>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	b0 00                	mov    al,0x0
c00093c2:	e9 19 01 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093cd:	74 1d                	je     c00093ec <pbuf_take+0x88>
c00093cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093d4:	74 16                	je     c00093ec <pbuf_take+0x88>
c00093d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093dd:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093e2:	0f b7 c0             	movzx  eax,ax
c00093e5:	39 c2                	cmp    edx,eax
c00093e7:	76 0b                	jbe    c00093f4 <pbuf_take+0x90>
c00093e9:	8d 76 00             	lea    esi,[esi+0x0]
c00093ec:	b0 f2                	mov    al,0xf2
c00093ee:	e9 ed 00 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093f3:	90                   	nop
c00093f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093fc:	e9 9f 00 00 00       	jmp    c00094a0 <pbuf_take+0x13c>
c0009401:	8d 76 00             	lea    esi,[esi+0x0]
c0009404:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009409:	75 15                	jne    c0009420 <pbuf_take+0xbc>
c000940b:	83 ec 08             	sub    esp,0x8
c000940e:	68 56 03 03 c0       	push   0xc0030356
c0009413:	68 26 fe 02 c0       	push   0xc002fe26
c0009418:	e8 e3 69 01 00       	call   c001fe00 <CPrintf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009424:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000942d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009431:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009436:	0f b7 c0             	movzx  eax,ax
c0009439:	39 c2                	cmp    edx,eax
c000943b:	76 0f                	jbe    c000944c <pbuf_take+0xe8>
c000943d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009441:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009445:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000944a:	66 90                	xchg   ax,ax
c000944c:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009451:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c0009456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000945a:	01 c1                	add    ecx,eax
c000945c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009463:	83 ec 04             	sub    esp,0x4
c0009466:	52                   	push   edx
c0009467:	51                   	push   ecx
c0009468:	50                   	push   eax
c0009469:	e8 0c 6f ff ff       	call   c000037a <memcpy>
c000946e:	83 c4 10             	add    esp,0x10
c0009471:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009475:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000947a:	89 d1                	mov    ecx,edx
c000947c:	29 c1                	sub    ecx,eax
c000947e:	89 c8                	mov    eax,ecx
c0009480:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009485:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000948a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000948f:	01 d0                	add    eax,edx
c0009491:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000949a:	8b 00                	mov    eax,DWORD PTR [eax]
c000949c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00094a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00094a5:	85 c0                	test   eax,eax
c00094a7:	0f 85 57 ff ff ff    	jne    c0009404 <pbuf_take+0xa0>
c00094ad:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00094b2:	85 c0                	test   eax,eax
c00094b4:	75 0e                	jne    c00094c4 <pbuf_take+0x160>
c00094b6:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094bb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00094c0:	39 c2                	cmp    edx,eax
c00094c2:	74 18                	je     c00094dc <pbuf_take+0x178>
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	68 6e 03 03 c0       	push   0xc003036e
c00094cc:	68 26 fe 02 c0       	push   0xc002fe26
c00094d1:	e8 2a 69 01 00       	call   c001fe00 <CPrintf>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	8d 76 00             	lea    esi,[esi+0x0]
c00094dc:	b0 00                	mov    al,0x0
c00094de:	66 90                	xchg   ax,ax
c00094e0:	83 c4 2c             	add    esp,0x2c
c00094e3:	c3                   	ret    

c00094e4 <pbuf_coalesce>:
c00094e4:	83 ec 1c             	sub    esp,0x1c
c00094e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00094ed:	85 c0                	test   eax,eax
c00094ef:	75 07                	jne    c00094f8 <pbuf_coalesce+0x14>
c00094f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f5:	eb 7d                	jmp    c0009574 <pbuf_coalesce+0x90>
c00094f7:	90                   	nop
c00094f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094ff:	0f b7 c0             	movzx  eax,ax
c0009502:	83 ec 04             	sub    esp,0x4
c0009505:	6a 00                	push   0x0
c0009507:	50                   	push   eax
c0009508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000950c:	e8 df f1 ff ff       	call   c00086f0 <pbuf_alloc>
c0009511:	83 c4 10             	add    esp,0x10
c0009514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009518:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000951d:	75 09                	jne    c0009528 <pbuf_coalesce+0x44>
c000951f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009523:	eb 4f                	jmp    c0009574 <pbuf_coalesce+0x90>
c0009525:	8d 76 00             	lea    esi,[esi+0x0]
c0009528:	83 ec 08             	sub    esp,0x8
c000952b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000952f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009533:	e8 20 fa ff ff       	call   c0008f58 <pbuf_copy>
c0009538:	83 c4 10             	add    esp,0x10
c000953b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000953f:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009544:	85 c0                	test   eax,eax
c0009546:	74 18                	je     c0009560 <pbuf_coalesce+0x7c>
c0009548:	83 ec 08             	sub    esp,0x8
c000954b:	68 84 03 03 c0       	push   0xc0030384
c0009550:	68 26 fe 02 c0       	push   0xc002fe26
c0009555:	e8 a6 68 01 00       	call   c001fe00 <CPrintf>
c000955a:	83 c4 10             	add    esp,0x10
c000955d:	8d 76 00             	lea    esi,[esi+0x0]
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009567:	e8 a8 ef ff ff       	call   c0008514 <pbuf_free>
c000956c:	83 c4 10             	add    esp,0x10
c000956f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009573:	90                   	nop
c0009574:	83 c4 1c             	add    esp,0x1c
c0009577:	c3                   	ret    

c0009578 <pbuf_get_at>:
c0009578:	83 ec 14             	sub    esp,0x14
c000957b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000957f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009583:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009586:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000958b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000958f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009593:	eb 27                	jmp    c00095bc <pbuf_get_at+0x44>
c0009595:	8d 76 00             	lea    esi,[esi+0x0]
c0009598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095a0:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00095a5:	89 d1                	mov    ecx,edx
c00095a7:	29 c1                	sub    ecx,eax
c00095a9:	89 c8                	mov    eax,ecx
c00095ab:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00095b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00095ba:	66 90                	xchg   ax,ax
c00095bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095c1:	74 15                	je     c00095d8 <pbuf_get_at+0x60>
c00095c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095c7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095cb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095d0:	0f b7 c0             	movzx  eax,ax
c00095d3:	39 c2                	cmp    edx,eax
c00095d5:	73 c1                	jae    c0009598 <pbuf_get_at+0x20>
c00095d7:	90                   	nop
c00095d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095dd:	74 29                	je     c0009608 <pbuf_get_at+0x90>
c00095df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095e3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095e7:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095ec:	0f b7 c0             	movzx  eax,ax
c00095ef:	39 c2                	cmp    edx,eax
c00095f1:	73 15                	jae    c0009608 <pbuf_get_at+0x90>
c00095f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095f7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095fa:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095ff:	01 d0                	add    eax,edx
c0009601:	8a 00                	mov    al,BYTE PTR [eax]
c0009603:	eb 07                	jmp    c000960c <pbuf_get_at+0x94>
c0009605:	8d 76 00             	lea    esi,[esi+0x0]
c0009608:	b0 00                	mov    al,0x0
c000960a:	66 90                	xchg   ax,ax
c000960c:	83 c4 14             	add    esp,0x14
c000960f:	c3                   	ret    

c0009610 <pbuf_memcmp>:
c0009610:	83 ec 18             	sub    esp,0x18
c0009613:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000961b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009620:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009628:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000962d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009631:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009635:	eb 25                	jmp    c000965c <pbuf_memcmp+0x4c>
c0009637:	90                   	nop
c0009638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009640:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009645:	89 d1                	mov    ecx,edx
c0009647:	29 c1                	sub    ecx,eax
c0009649:	89 c8                	mov    eax,ecx
c000964b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009654:	8b 00                	mov    eax,DWORD PTR [eax]
c0009656:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000965a:	66 90                	xchg   ax,ax
c000965c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009661:	74 15                	je     c0009678 <pbuf_memcmp+0x68>
c0009663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009667:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000966b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009670:	0f b7 c0             	movzx  eax,ax
c0009673:	39 c2                	cmp    edx,eax
c0009675:	73 c1                	jae    c0009638 <pbuf_memcmp+0x28>
c0009677:	90                   	nop
c0009678:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000967d:	0f 84 8d 00 00 00    	je     c0009710 <pbuf_memcmp+0x100>
c0009683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009687:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000968b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009690:	0f b7 c0             	movzx  eax,ax
c0009693:	39 c2                	cmp    edx,eax
c0009695:	73 79                	jae    c0009710 <pbuf_memcmp+0x100>
c0009697:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000969e:	eb 5c                	jmp    c00096fc <pbuf_memcmp+0xec>
c00096a0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00096a5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096aa:	01 d0                	add    eax,edx
c00096ac:	0f b7 c0             	movzx  eax,ax
c00096af:	50                   	push   eax
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	e8 bf fe ff ff       	call   c0009578 <pbuf_get_at>
c00096b9:	83 c4 08             	add    esp,0x8
c00096bc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00096c0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096c9:	01 d0                	add    eax,edx
c00096cb:	8a 00                	mov    al,BYTE PTR [eax]
c00096cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096d1:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096db:	39 c2                	cmp    edx,eax
c00096dd:	74 0d                	je     c00096ec <pbuf_memcmp+0xdc>
c00096df:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096e4:	83 c0 01             	add    eax,0x1
c00096e7:	eb 2f                	jmp    c0009718 <pbuf_memcmp+0x108>
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096f1:	83 c0 01             	add    eax,0x1
c00096f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096f9:	8d 76 00             	lea    esi,[esi+0x0]
c00096fc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009701:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009705:	39 c2                	cmp    edx,eax
c0009707:	72 97                	jb     c00096a0 <pbuf_memcmp+0x90>
c0009709:	b8 00 00 00 00       	mov    eax,0x0
c000970e:	eb 08                	jmp    c0009718 <pbuf_memcmp+0x108>
c0009710:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009715:	8d 76 00             	lea    esi,[esi+0x0]
c0009718:	83 c4 18             	add    esp,0x18
c000971b:	c3                   	ret    

c000971c <pbuf_memfind>:
c000971c:	83 ec 18             	sub    esp,0x18
c000971f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009723:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009727:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000972c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009730:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009734:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0009737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973b:	89 d1                	mov    ecx,edx
c000973d:	29 c1                	sub    ecx,eax
c000973f:	89 c8                	mov    eax,ecx
c0009741:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0009746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000974a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000974d:	0f b7 c0             	movzx  eax,ax
c0009750:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009755:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009759:	01 ca                	add    edx,ecx
c000975b:	39 d0                	cmp    eax,edx
c000975d:	7c 65                	jl     c00097c4 <pbuf_memfind+0xa8>
c000975f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009762:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009767:	eb 4b                	jmp    c00097b4 <pbuf_memfind+0x98>
c0009769:	8d 76 00             	lea    esi,[esi+0x0]
c000976c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009771:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0009776:	52                   	push   edx
c0009777:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000977b:	50                   	push   eax
c000977c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009780:	e8 8b fe ff ff       	call   c0009610 <pbuf_memcmp>
c0009785:	83 c4 10             	add    esp,0x10
c0009788:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000978d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009792:	85 c0                	test   eax,eax
c0009794:	75 0a                	jne    c00097a0 <pbuf_memfind+0x84>
c0009796:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000979b:	eb 2f                	jmp    c00097cc <pbuf_memfind+0xb0>
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00097a5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00097aa:	01 d0                	add    eax,edx
c00097ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00097b1:	8d 76 00             	lea    esi,[esi+0x0]
c00097b4:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00097b9:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00097be:	39 c2                	cmp    edx,eax
c00097c0:	76 aa                	jbe    c000976c <pbuf_memfind+0x50>
c00097c2:	66 90                	xchg   ax,ax
c00097c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097c9:	8d 76 00             	lea    esi,[esi+0x0]
c00097cc:	83 c4 18             	add    esp,0x18
c00097cf:	c3                   	ret    

c00097d0 <pbuf_strstr>:
c00097d0:	83 ec 1c             	sub    esp,0x1c
c00097d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097d8:	74 1e                	je     c00097f8 <pbuf_strstr+0x28>
c00097da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097de:	8a 00                	mov    al,BYTE PTR [eax]
c00097e0:	0f be c0             	movsx  eax,al
c00097e3:	85 c0                	test   eax,eax
c00097e5:	74 11                	je     c00097f8 <pbuf_strstr+0x28>
c00097e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097ee:	0f b7 c0             	movzx  eax,ax
c00097f1:	3d ff ff 00 00       	cmp    eax,0xffff
c00097f6:	75 08                	jne    c0009800 <pbuf_strstr+0x30>
c00097f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097fd:	eb 41                	jmp    c0009840 <pbuf_strstr+0x70>
c00097ff:	90                   	nop
c0009800:	83 ec 0c             	sub    esp,0xc
c0009803:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009807:	e8 74 6d ff ff       	call   c0000580 <strlen>
c000980c:	83 c4 10             	add    esp,0x10
c000980f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009813:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c000981b:	76 07                	jbe    c0009824 <pbuf_strstr+0x54>
c000981d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009822:	eb 1c                	jmp    c0009840 <pbuf_strstr+0x70>
c0009824:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009828:	0f b7 c0             	movzx  eax,ax
c000982b:	6a 00                	push   0x0
c000982d:	50                   	push   eax
c000982e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009832:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009836:	e8 e1 fe ff ff       	call   c000971c <pbuf_memfind>
c000983b:	83 c4 10             	add    esp,0x10
c000983e:	66 90                	xchg   ax,ax
c0009840:	83 c4 1c             	add    esp,0x1c
c0009843:	c3                   	ret    

c0009844 <raw_input>:
c0009844:	83 ec 2c             	sub    esp,0x2c
c0009847:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000984c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009850:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000985b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000985e:	0f b6 c0             	movzx  eax,al
c0009861:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009866:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000986e:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009873:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009877:	e9 b8 00 00 00       	jmp    c0009934 <raw_input+0xf0>
c000987c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009880:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009883:	0f b6 d0             	movzx  edx,al
c0009886:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000988b:	39 c2                	cmp    edx,eax
c000988d:	0f 85 8d 00 00 00    	jne    c0009920 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	85 c0                	test   eax,eax
c0009899:	74 19                	je     c00098b4 <raw_input+0x70>
c000989b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000989f:	8b 00                	mov    eax,DWORD PTR [eax]
c00098a1:	85 c0                	test   eax,eax
c00098a3:	74 0f                	je     c00098b4 <raw_input+0x70>
c00098a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00098ab:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00098b0:	39 c2                	cmp    edx,eax
c00098b2:	75 6c                	jne    c0009920 <raw_input+0xdc>
c00098b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00098bb:	85 c0                	test   eax,eax
c00098bd:	74 61                	je     c0009920 <raw_input+0xdc>
c00098bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098c3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00098c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098ca:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098cd:	68 90 68 03 c0       	push   0xc0036890
c00098d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098da:	52                   	push   edx
c00098db:	ff d0                	call   eax
c00098dd:	83 c4 10             	add    esp,0x10
c00098e0:	0f b6 c0             	movzx  eax,al
c00098e3:	85 c0                	test   eax,eax
c00098e5:	74 39                	je     c0009920 <raw_input+0xdc>
c00098e7:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098ef:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098f9:	74 25                	je     c0009920 <raw_input+0xdc>
c00098fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009902:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009906:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009909:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000990f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009913:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009916:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000991a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000991f:	90                   	nop
c0009920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000992c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000992f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009933:	90                   	nop
c0009934:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0009939:	85 c0                	test   eax,eax
c000993b:	75 0b                	jne    c0009948 <raw_input+0x104>
c000993d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009942:	0f 85 34 ff ff ff    	jne    c000987c <raw_input+0x38>
c0009948:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000994c:	83 c4 2c             	add    esp,0x2c
c000994f:	c3                   	ret    

c0009950 <raw_bind>:
c0009950:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009955:	74 09                	je     c0009960 <raw_bind+0x10>
c0009957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995b:	8b 00                	mov    eax,DWORD PTR [eax]
c000995d:	eb 09                	jmp    c0009968 <raw_bind+0x18>
c000995f:	90                   	nop
c0009960:	b8 00 00 00 00       	mov    eax,0x0
c0009965:	8d 76 00             	lea    esi,[esi+0x0]
c0009968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000996c:	89 02                	mov    DWORD PTR [edx],eax
c000996e:	b0 00                	mov    al,0x0
c0009970:	c3                   	ret    
c0009971:	8d 76 00             	lea    esi,[esi+0x0]

c0009974 <raw_connect>:
c0009974:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009979:	74 09                	je     c0009984 <raw_connect+0x10>
c000997b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000997f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009981:	eb 09                	jmp    c000998c <raw_connect+0x18>
c0009983:	90                   	nop
c0009984:	b8 00 00 00 00       	mov    eax,0x0
c0009989:	8d 76 00             	lea    esi,[esi+0x0]
c000998c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009990:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009993:	b0 00                	mov    al,0x0
c0009995:	c3                   	ret    
c0009996:	66 90                	xchg   ax,ax

c0009998 <raw_recv>:
c0009998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000999c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00099a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00099ae:	90                   	nop
c00099af:	c3                   	ret    

c00099b0 <raw_sendto>:
c00099b0:	83 ec 1c             	sub    esp,0x1c
c00099b3:	83 ec 08             	sub    esp,0x8
c00099b6:	6a 14                	push   0x14
c00099b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00099bc:	e8 b3 e9 ff ff       	call   c0008374 <pbuf_header>
c00099c1:	83 c4 10             	add    esp,0x10
c00099c4:	0f b6 c0             	movzx  eax,al
c00099c7:	85 c0                	test   eax,eax
c00099c9:	74 49                	je     c0009a14 <raw_sendto+0x64>
c00099cb:	83 ec 04             	sub    esp,0x4
c00099ce:	6a 00                	push   0x0
c00099d0:	6a 00                	push   0x0
c00099d2:	6a 01                	push   0x1
c00099d4:	e8 17 ed ff ff       	call   c00086f0 <pbuf_alloc>
c00099d9:	83 c4 10             	add    esp,0x10
c00099dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099e5:	75 09                	jne    c00099f0 <raw_sendto+0x40>
c00099e7:	b0 ff                	mov    al,0xff
c00099e9:	e9 2a 01 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c00099ee:	66 90                	xchg   ax,ax
c00099f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099f7:	0f b7 c0             	movzx  eax,ax
c00099fa:	85 c0                	test   eax,eax
c00099fc:	74 52                	je     c0009a50 <raw_sendto+0xa0>
c00099fe:	83 ec 08             	sub    esp,0x8
c0009a01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a09:	e8 2a f4 ff ff       	call   c0008e38 <pbuf_chain>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	eb 3d                	jmp    c0009a50 <raw_sendto+0xa0>
c0009a13:	90                   	nop
c0009a14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009a18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a1c:	83 ec 08             	sub    esp,0x8
c0009a1f:	6a ec                	push   0xffffffec
c0009a21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a25:	e8 4a e9 ff ff       	call   c0008374 <pbuf_header>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	0f b6 c0             	movzx  eax,al
c0009a30:	85 c0                	test   eax,eax
c0009a32:	74 1c                	je     c0009a50 <raw_sendto+0xa0>
c0009a34:	83 ec 08             	sub    esp,0x8
c0009a37:	68 98 03 03 c0       	push   0xc0030398
c0009a3c:	68 26 fe 02 c0       	push   0xc002fe26
c0009a41:	e8 ba 63 01 00       	call   c001fe00 <CPrintf>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	b0 ff                	mov    al,0xff
c0009a4b:	e9 c8 00 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c0009a50:	83 ec 0c             	sub    esp,0xc
c0009a53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a57:	e8 00 9e 00 00       	call   c001385c <ip_route>
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a63:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a68:	75 22                	jne    c0009a8c <raw_sendto+0xdc>
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a72:	74 10                	je     c0009a84 <raw_sendto+0xd4>
c0009a74:	83 ec 0c             	sub    esp,0xc
c0009a77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a7b:	e8 94 ea ff ff       	call   c0008514 <pbuf_free>
c0009a80:	83 c4 10             	add    esp,0x10
c0009a83:	90                   	nop
c0009a84:	b0 fc                	mov    al,0xfc
c0009a86:	e9 8d 00 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c0009a8b:	90                   	nop
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	85 c0                	test   eax,eax
c0009a92:	74 0c                	je     c0009aa0 <raw_sendto+0xf0>
c0009a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9a:	85 c0                	test   eax,eax
c0009a9c:	75 12                	jne    c0009ab0 <raw_sendto+0x100>
c0009a9e:	66 90                	xchg   ax,ax
c0009aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aa4:	83 c0 04             	add    eax,0x4
c0009aa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009aab:	eb 0b                	jmp    c0009ab8 <raw_sendto+0x108>
c0009aad:	8d 76 00             	lea    esi,[esi+0x0]
c0009ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ab4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009abc:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009abf:	0f b6 c8             	movzx  ecx,al
c0009ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ac6:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009ac9:	0f b6 d0             	movzx  edx,al
c0009acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ad0:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009ad3:	0f b6 c0             	movzx  eax,al
c0009ad6:	83 ec 04             	sub    esp,0x4
c0009ad9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009add:	51                   	push   ecx
c0009ade:	52                   	push   edx
c0009adf:	50                   	push   eax
c0009ae0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aec:	e8 43 a2 00 00       	call   c0013d34 <ip_output_if>
c0009af1:	83 c4 20             	add    esp,0x20
c0009af4:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009afc:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009b00:	74 12                	je     c0009b14 <raw_sendto+0x164>
c0009b02:	83 ec 0c             	sub    esp,0xc
c0009b05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b09:	e8 06 ea ff ff       	call   c0008514 <pbuf_free>
c0009b0e:	83 c4 10             	add    esp,0x10
c0009b11:	8d 76 00             	lea    esi,[esi+0x0]
c0009b14:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009b18:	83 c4 1c             	add    esp,0x1c
c0009b1b:	c3                   	ret    

c0009b1c <raw_send>:
c0009b1c:	83 ec 0c             	sub    esp,0xc
c0009b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b23:	83 c0 04             	add    eax,0x4
c0009b26:	83 ec 04             	sub    esp,0x4
c0009b29:	50                   	push   eax
c0009b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b32:	e8 79 fe ff ff       	call   c00099b0 <raw_sendto>
c0009b37:	83 c4 10             	add    esp,0x10
c0009b3a:	83 c4 0c             	add    esp,0xc
c0009b3d:	c3                   	ret    
c0009b3e:	66 90                	xchg   ax,ax

c0009b40 <raw_remove>:
c0009b40:	83 ec 1c             	sub    esp,0x1c
c0009b43:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b48:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b4c:	75 12                	jne    c0009b60 <raw_remove+0x20>
c0009b4e:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b56:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009b5b:	eb 4b                	jmp    c0009ba8 <raw_remove+0x68>
c0009b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b60:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b69:	eb 35                	jmp    c0009ba0 <raw_remove+0x60>
c0009b6b:	90                   	nop
c0009b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b73:	85 c0                	test   eax,eax
c0009b75:	74 1d                	je     c0009b94 <raw_remove+0x54>
c0009b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b7e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b82:	75 10                	jne    c0009b94 <raw_remove+0x54>
c0009b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b88:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b92:	66 90                	xchg   ax,ax
c0009b94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b9f:	90                   	nop
c0009ba0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009ba5:	75 c5                	jne    c0009b6c <raw_remove+0x2c>
c0009ba7:	90                   	nop
c0009ba8:	83 ec 08             	sub    esp,0x8
c0009bab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009baf:	6a 00                	push   0x0
c0009bb1:	e8 9e e0 ff ff       	call   c0007c54 <memp_free>
c0009bb6:	83 c4 10             	add    esp,0x10
c0009bb9:	90                   	nop
c0009bba:	83 c4 1c             	add    esp,0x1c
c0009bbd:	c3                   	ret    
c0009bbe:	66 90                	xchg   ax,ax

c0009bc0 <raw_new>:
c0009bc0:	83 ec 2c             	sub    esp,0x2c
c0009bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009bcb:	83 ec 0c             	sub    esp,0xc
c0009bce:	6a 00                	push   0x0
c0009bd0:	e8 53 df ff ff       	call   c0007b28 <memp_malloc>
c0009bd5:	83 c4 10             	add    esp,0x10
c0009bd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bdc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009be1:	74 3d                	je     c0009c20 <raw_new+0x60>
c0009be3:	83 ec 04             	sub    esp,0x4
c0009be6:	6a 1c                	push   0x1c
c0009be8:	6a 00                	push   0x0
c0009bea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bee:	e8 fd 68 ff ff       	call   c00004f0 <memset>
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bfa:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bfe:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009c01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c05:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009c09:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009c0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c1a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009c1f:	90                   	nop
c0009c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c24:	83 c4 2c             	add    esp,0x2c
c0009c27:	c3                   	ret    

c0009c28 <stats_init>:
c0009c28:	90                   	nop
c0009c29:	c3                   	ret    
c0009c2a:	66 90                	xchg   ax,ax

c0009c2c <sys_msleep>:
c0009c2c:	83 ec 1c             	sub    esp,0x1c
c0009c2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c34:	74 46                	je     c0009c7c <sys_msleep+0x50>
c0009c36:	83 ec 08             	sub    esp,0x8
c0009c39:	6a 00                	push   0x0
c0009c3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c3f:	50                   	push   eax
c0009c40:	e8 5b 70 ff ff       	call   c0000ca0 <sys_sem_new>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c4c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c51:	85 c0                	test   eax,eax
c0009c53:	75 27                	jne    c0009c7c <sys_msleep+0x50>
c0009c55:	83 ec 08             	sub    esp,0x8
c0009c58:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c60:	50                   	push   eax
c0009c61:	e8 92 70 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0009c66:	83 c4 10             	add    esp,0x10
c0009c69:	83 ec 0c             	sub    esp,0xc
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 52 70 ff ff       	call   c0000cc8 <sys_sem_free>
c0009c76:	83 c4 10             	add    esp,0x10
c0009c79:	8d 76 00             	lea    esi,[esi+0x0]
c0009c7c:	90                   	nop
c0009c7d:	83 c4 1c             	add    esp,0x1c
c0009c80:	c3                   	ret    
c0009c81:	66 90                	xchg   ax,ax
c0009c83:	90                   	nop

c0009c84 <tcp_accept_null>:
c0009c84:	83 ec 04             	sub    esp,0x4
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	88 04 24             	mov    BYTE PTR [esp],al
c0009c8e:	b0 f6                	mov    al,0xf6
c0009c90:	83 c4 04             	add    esp,0x4
c0009c93:	c3                   	ret    

c0009c94 <tcp_listen_with_backlog>:
c0009c94:	83 ec 2c             	sub    esp,0x2c
c0009c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca6:	85 c0                	test   eax,eax
c0009ca8:	74 22                	je     c0009ccc <tcp_listen_with_backlog+0x38>
c0009caa:	83 ec 08             	sub    esp,0x8
c0009cad:	68 c0 03 03 c0       	push   0xc00303c0
c0009cb2:	68 26 fe 02 c0       	push   0xc002fe26
c0009cb7:	e8 44 61 01 00       	call   c001fe00 <CPrintf>
c0009cbc:	83 c4 10             	add    esp,0x10
c0009cbf:	b8 00 00 00 00       	mov    eax,0x0
c0009cc4:	e9 77 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd3:	83 f8 01             	cmp    eax,0x1
c0009cd6:	75 0c                	jne    c0009ce4 <tcp_listen_with_backlog+0x50>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	e9 5f 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce4:	83 ec 0c             	sub    esp,0xc
c0009ce7:	6a 03                	push   0x3
c0009ce9:	e8 3a de ff ff       	call   c0007b28 <memp_malloc>
c0009cee:	83 c4 10             	add    esp,0x10
c0009cf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cf5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cfa:	75 0c                	jne    c0009d08 <tcp_listen_with_backlog+0x74>
c0009cfc:	b8 00 00 00 00       	mov    eax,0x0
c0009d01:	e9 3a 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009d06:	66 90                	xchg   ax,ax
c0009d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d13:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d1a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d21:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009d25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d29:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d34:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3b:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d42:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d49:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d50:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d53:	83 c8 02             	or     eax,0x2
c0009d56:	88 c2                	mov    dl,al
c0009d58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d5c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d63:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d6a:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d71:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d78:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d85:	89 10                	mov    DWORD PTR [eax],edx
c0009d87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d8e:	0f b7 c0             	movzx  eax,ax
c0009d91:	85 c0                	test   eax,eax
c0009d93:	74 6f                	je     c0009e04 <tcp_listen_with_backlog+0x170>
c0009d95:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d9a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9e:	75 10                	jne    c0009db0 <tcp_listen_with_backlog+0x11c>
c0009da0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009da5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009da8:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009dad:	eb 49                	jmp    c0009df8 <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009db5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009dba:	eb 30                	jmp    c0009dec <tcp_listen_with_backlog+0x158>
c0009dbc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009dc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dc4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009dc8:	75 12                	jne    c0009ddc <tcp_listen_with_backlog+0x148>
c0009dca:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009dcf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009dd3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009dd6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dd9:	eb 1d                	jmp    c0009df8 <tcp_listen_with_backlog+0x164>
c0009ddb:	90                   	nop
c0009ddc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009de1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009de4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009de9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009df1:	85 c0                	test   eax,eax
c0009df3:	75 c7                	jne    c0009dbc <tcp_listen_with_backlog+0x128>
c0009df5:	8d 76 00             	lea    esi,[esi+0x0]
c0009df8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009e03:	90                   	nop
c0009e04:	83 ec 08             	sub    esp,0x8
c0009e07:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009e0b:	6a 02                	push   0x2
c0009e0d:	e8 42 de ff ff       	call   c0007c54 <memp_free>
c0009e12:	83 c4 10             	add    esp,0x10
c0009e15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e19:	c7 40 1c 84 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c84
c0009e20:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e31:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009e36:	e8 21 6f 00 00       	call   c0010d5c <tcp_timer_needed>
c0009e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e3f:	90                   	nop
c0009e40:	83 c4 2c             	add    esp,0x2c
c0009e43:	c3                   	ret    

c0009e44 <tcp_update_rcv_ann_wnd>:
c0009e44:	83 ec 1c             	sub    esp,0x1c
c0009e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e4b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e52:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e55:	0f b7 c0             	movzx  eax,ax
c0009e58:	01 d0                	add    eax,edx
c0009e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e62:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e6c:	0f b7 c8             	movzx  ecx,ax
c0009e6f:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e75:	76 05                	jbe    c0009e7c <tcp_update_rcv_ann_wnd+0x38>
c0009e77:	b8 30 04 00 00       	mov    eax,0x430
c0009e7c:	0f b7 c0             	movzx  eax,ax
c0009e7f:	01 c2                	add    edx,eax
c0009e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e85:	29 d0                	sub    eax,edx
c0009e87:	78 23                	js     c0009eac <tcp_update_rcv_ann_wnd+0x68>
c0009e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e94:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ea3:	29 c2                	sub    edx,eax
c0009ea5:	89 d0                	mov    eax,edx
c0009ea7:	eb 77                	jmp    c0009f20 <tcp_update_rcv_ann_wnd+0xdc>
c0009ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0009eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009eba:	29 c2                	sub    edx,eax
c0009ebc:	89 d0                	mov    eax,edx
c0009ebe:	85 c0                	test   eax,eax
c0009ec0:	7e 0e                	jle    c0009ed0 <tcp_update_rcv_ann_wnd+0x8c>
c0009ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec6:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ecc:	eb 4a                	jmp    c0009f18 <tcp_update_rcv_ann_wnd+0xd4>
c0009ece:	66 90                	xchg   ax,ax
c0009ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed4:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009edb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009ede:	29 c2                	sub    edx,eax
c0009ee0:	89 d0                	mov    eax,edx
c0009ee2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ee6:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009eee:	76 18                	jbe    c0009f08 <tcp_update_rcv_ann_wnd+0xc4>
c0009ef0:	83 ec 08             	sub    esp,0x8
c0009ef3:	68 f4 05 03 c0       	push   0xc00305f4
c0009ef8:	68 26 fe 02 c0       	push   0xc002fe26
c0009efd:	e8 fe 5e 01 00       	call   c001fe00 <CPrintf>
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	8d 76 00             	lea    esi,[esi+0x0]
c0009f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f0c:	89 c2                	mov    edx,eax
c0009f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f12:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009f16:	66 90                	xchg   ax,ax
c0009f18:	b8 00 00 00 00       	mov    eax,0x0
c0009f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009f20:	83 c4 1c             	add    esp,0x1c
c0009f23:	c3                   	ret    

c0009f24 <tcp_recved>:
c0009f24:	83 ec 2c             	sub    esp,0x2c
c0009f27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f2b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f30:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f39:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3c:	0f b7 c0             	movzx  eax,ax
c0009f3f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f44:	29 c1                	sub    ecx,eax
c0009f46:	89 c8                	mov    eax,ecx
c0009f48:	39 c2                	cmp    edx,eax
c0009f4a:	7e 18                	jle    c0009f64 <tcp_recved+0x40>
c0009f4c:	83 ec 08             	sub    esp,0x8
c0009f4f:	68 e4 03 03 c0       	push   0xc00303e4
c0009f54:	68 26 fe 02 c0       	push   0xc002fe26
c0009f59:	e8 a2 5e 01 00       	call   c001fe00 <CPrintf>
c0009f5e:	83 c4 10             	add    esp,0x10
c0009f61:	8d 76 00             	lea    esi,[esi+0x0]
c0009f64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f68:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f6f:	01 d0                	add    eax,edx
c0009f71:	89 c2                	mov    edx,eax
c0009f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f77:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f7f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f82:	0f b7 c0             	movzx  eax,ax
c0009f85:	3d 60 08 00 00       	cmp    eax,0x860
c0009f8a:	76 0c                	jbe    c0009f98 <tcp_recved+0x74>
c0009f8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f90:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f96:	66 90                	xchg   ax,ax
c0009f98:	83 ec 0c             	sub    esp,0xc
c0009f9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9f:	e8 a0 fe ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c0009fa4:	83 c4 10             	add    esp,0x10
c0009fa7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009fab:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009fb3:	7e 23                	jle    c0009fd8 <tcp_recved+0xb4>
c0009fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009fbc:	83 c8 02             	or     eax,0x2
c0009fbf:	88 c2                	mov    dl,al
c0009fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fc5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009fc8:	83 ec 0c             	sub    esp,0xc
c0009fcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fcf:	e8 e0 60 00 00       	call   c00100b4 <tcp_output>
c0009fd4:	83 c4 10             	add    esp,0x10
c0009fd7:	90                   	nop
c0009fd8:	90                   	nop
c0009fd9:	83 c4 2c             	add    esp,0x2c
c0009fdc:	c3                   	ret    
c0009fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0009fe0 <tcp_new_port>:
c0009fe0:	83 ec 10             	sub    esp,0x10
c0009fe3:	90                   	nop
c0009fe4:	66 a1 20 3f 03 c0    	mov    ax,ds:0xc0033f20
c0009fea:	8d 50 01             	lea    edx,[eax+0x1]
c0009fed:	66 89 15 20 3f 03 c0 	mov    WORD PTR ds:0xc0033f20,dx
c0009ff4:	0f b7 c0             	movzx  eax,ax
c0009ff7:	3d ff ff 00 00       	cmp    eax,0xffff
c0009ffc:	75 0a                	jne    c000a008 <tcp_new_port+0x28>
c0009ffe:	66 c7 05 20 3f 03 c0 00 c0 	mov    WORD PTR ds:0xc0033f20,0xc000
c000a007:	90                   	nop
c000a008:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a010:	eb 4a                	jmp    c000a05c <tcp_new_port+0x7c>
c000a012:	66 90                	xchg   ax,ax
c000a014:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a018:	8b 04 85 00 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf900]
c000a01f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a021:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a025:	eb 29                	jmp    c000a050 <tcp_new_port+0x70>
c000a027:	90                   	nop
c000a028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a02c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000a02f:	66 a1 20 3f 03 c0    	mov    ax,ds:0xc0033f20
c000a035:	0f b7 d2             	movzx  edx,dx
c000a038:	0f b7 c0             	movzx  eax,ax
c000a03b:	39 c2                	cmp    edx,eax
c000a03d:	75 05                	jne    c000a044 <tcp_new_port+0x64>
c000a03f:	eb a3                	jmp    c0009fe4 <tcp_new_port+0x4>
c000a041:	8d 76 00             	lea    esi,[esi+0x0]
c000a044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a048:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a04b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a04f:	90                   	nop
c000a050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a055:	75 d1                	jne    c000a028 <tcp_new_port+0x48>
c000a057:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a05c:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a061:	7e b1                	jle    c000a014 <tcp_new_port+0x34>
c000a063:	66 a1 20 3f 03 c0    	mov    ax,ds:0xc0033f20
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	c3                   	ret    
c000a06d:	8d 76 00             	lea    esi,[esi+0x0]

c000a070 <tcp_bind>:
c000a070:	83 ec 2c             	sub    esp,0x2c
c000a073:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a077:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a07c:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a088:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a08b:	85 c0                	test   eax,eax
c000a08d:	74 1d                	je     c000a0ac <tcp_bind+0x3c>
c000a08f:	83 ec 08             	sub    esp,0x8
c000a092:	68 08 04 03 c0       	push   0xc0030408
c000a097:	68 26 fe 02 c0       	push   0xc002fe26
c000a09c:	e8 5f 5d 01 00       	call   c001fe00 <CPrintf>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	b0 fa                	mov    al,0xfa
c000a0a6:	e9 f1 00 00 00       	jmp    c000a19c <tcp_bind+0x12c>
c000a0ab:	90                   	nop
c000a0ac:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a0b1:	85 c0                	test   eax,eax
c000a0b3:	75 0b                	jne    c000a0c0 <tcp_bind+0x50>
c000a0b5:	e8 26 ff ff ff       	call   c0009fe0 <tcp_new_port>
c000a0ba:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a0bf:	90                   	nop
c000a0c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0c8:	eb 7a                	jmp    c000a144 <tcp_bind+0xd4>
c000a0ca:	66 90                	xchg   ax,ax
c000a0cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0d0:	8b 04 85 00 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf900]
c000a0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0dd:	eb 59                	jmp    c000a138 <tcp_bind+0xc8>
c000a0df:	90                   	nop
c000a0e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0e7:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0ec:	0f b7 c0             	movzx  eax,ax
c000a0ef:	39 c2                	cmp    edx,eax
c000a0f1:	75 39                	jne    c000a12c <tcp_bind+0xbc>
c000a0f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0f7:	85 c0                	test   eax,eax
c000a0f9:	74 2d                	je     c000a128 <tcp_bind+0xb8>
c000a0fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000a101:	85 c0                	test   eax,eax
c000a103:	74 23                	je     c000a128 <tcp_bind+0xb8>
c000a105:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a10a:	74 1c                	je     c000a128 <tcp_bind+0xb8>
c000a10c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a110:	8b 00                	mov    eax,DWORD PTR [eax]
c000a112:	85 c0                	test   eax,eax
c000a114:	74 12                	je     c000a128 <tcp_bind+0xb8>
c000a116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a11c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a120:	8b 00                	mov    eax,DWORD PTR [eax]
c000a122:	39 c2                	cmp    edx,eax
c000a124:	75 06                	jne    c000a12c <tcp_bind+0xbc>
c000a126:	66 90                	xchg   ax,ax
c000a128:	b0 f8                	mov    al,0xf8
c000a12a:	eb 70                	jmp    c000a19c <tcp_bind+0x12c>
c000a12c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a130:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a133:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a137:	90                   	nop
c000a138:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a13d:	75 a1                	jne    c000a0e0 <tcp_bind+0x70>
c000a13f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a144:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a148:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a14c:	0f 8c 7a ff ff ff    	jl     c000a0cc <tcp_bind+0x5c>
c000a152:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a157:	74 17                	je     c000a170 <tcp_bind+0x100>
c000a159:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a15d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a15f:	85 c0                	test   eax,eax
c000a161:	74 0d                	je     c000a170 <tcp_bind+0x100>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a16b:	8b 12                	mov    edx,DWORD PTR [edx]
c000a16d:	89 10                	mov    DWORD PTR [eax],edx
c000a16f:	90                   	nop
c000a170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a174:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a178:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000a17c:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c000a182:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a186:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a18d:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000a192:	e8 c5 6b 00 00       	call   c0010d5c <tcp_timer_needed>
c000a197:	b0 00                	mov    al,0x0
c000a199:	8d 76 00             	lea    esi,[esi+0x0]
c000a19c:	83 c4 2c             	add    esp,0x2c
c000a19f:	c3                   	ret    

c000a1a0 <tcp_seg_free>:
c000a1a0:	83 ec 0c             	sub    esp,0xc
c000a1a3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a1a8:	74 32                	je     c000a1dc <tcp_seg_free+0x3c>
c000a1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a1b1:	85 c0                	test   eax,eax
c000a1b3:	74 13                	je     c000a1c8 <tcp_seg_free+0x28>
c000a1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a1bc:	83 ec 0c             	sub    esp,0xc
c000a1bf:	50                   	push   eax
c000a1c0:	e8 4f e3 ff ff       	call   c0008514 <pbuf_free>
c000a1c5:	83 c4 10             	add    esp,0x10
c000a1c8:	83 ec 08             	sub    esp,0x8
c000a1cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a1cf:	6a 04                	push   0x4
c000a1d1:	e8 7e da ff ff       	call   c0007c54 <memp_free>
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	90                   	nop
c000a1dd:	83 c4 0c             	add    esp,0xc
c000a1e0:	c3                   	ret    
c000a1e1:	8d 76 00             	lea    esi,[esi+0x0]

c000a1e4 <tcp_segs_free>:
c000a1e4:	83 ec 1c             	sub    esp,0x1c
c000a1e7:	eb 27                	jmp    c000a210 <tcp_segs_free+0x2c>
c000a1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1f6:	83 ec 0c             	sub    esp,0xc
c000a1f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1fd:	e8 9e ff ff ff       	call   c000a1a0 <tcp_seg_free>
c000a202:	83 c4 10             	add    esp,0x10
c000a205:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a209:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a20d:	8d 76 00             	lea    esi,[esi+0x0]
c000a210:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a215:	75 d5                	jne    c000a1ec <tcp_segs_free+0x8>
c000a217:	90                   	nop
c000a218:	83 c4 1c             	add    esp,0x1c
c000a21b:	c3                   	ret    

c000a21c <tcp_setprio>:
c000a21c:	83 ec 04             	sub    esp,0x4
c000a21f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a223:	88 04 24             	mov    BYTE PTR [esp],al
c000a226:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a22a:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a22d:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a230:	90                   	nop
c000a231:	83 c4 04             	add    esp,0x4
c000a234:	c3                   	ret    
c000a235:	8d 76 00             	lea    esi,[esi+0x0]

c000a238 <tcp_seg_copy>:
c000a238:	83 ec 1c             	sub    esp,0x1c
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 04                	push   0x4
c000a240:	e8 e3 d8 ff ff       	call   c0007b28 <memp_malloc>
c000a245:	83 c4 10             	add    esp,0x10
c000a248:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a24c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a251:	75 09                	jne    c000a25c <tcp_seg_copy+0x24>
c000a253:	b8 00 00 00 00       	mov    eax,0x0
c000a258:	eb 2e                	jmp    c000a288 <tcp_seg_copy+0x50>
c000a25a:	66 90                	xchg   ax,ax
c000a25c:	83 ec 04             	sub    esp,0x4
c000a25f:	6a 10                	push   0x10
c000a261:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a269:	e8 0c 61 ff ff       	call   c000037a <memcpy>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a275:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 a3 ea ff ff       	call   c0008d24 <pbuf_ref>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a288:	83 c4 1c             	add    esp,0x1c
c000a28b:	c3                   	ret    

c000a28c <tcp_arg>:
c000a28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a297:	90                   	nop
c000a298:	c3                   	ret    
c000a299:	8d 76 00             	lea    esi,[esi+0x0]

c000a29c <tcp_recv>:
c000a29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a4:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a2aa:	90                   	nop
c000a2ab:	c3                   	ret    

c000a2ac <tcp_sent>:
c000a2ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2b4:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a2ba:	90                   	nop
c000a2bb:	c3                   	ret    

c000a2bc <tcp_err>:
c000a2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2c4:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a2ca:	90                   	nop
c000a2cb:	c3                   	ret    

c000a2cc <tcp_accept>:
c000a2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2d4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2d7:	90                   	nop
c000a2d8:	c3                   	ret    
c000a2d9:	8d 76 00             	lea    esi,[esi+0x0]

c000a2dc <tcp_poll>:
c000a2dc:	83 ec 04             	sub    esp,0x4
c000a2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e3:	88 04 24             	mov    BYTE PTR [esp],al
c000a2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ee:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2f8:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2fb:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2fe:	90                   	nop
c000a2ff:	83 c4 04             	add    esp,0x4
c000a302:	c3                   	ret    
c000a303:	90                   	nop

c000a304 <tcp_pcb_purge>:
c000a304:	83 ec 0c             	sub    esp,0xc
c000a307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a30b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a30e:	85 c0                	test   eax,eax
c000a310:	0f 84 ca 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a31a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a31d:	83 f8 0a             	cmp    eax,0xa
c000a320:	0f 84 ba 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a32d:	83 f8 01             	cmp    eax,0x1
c000a330:	0f 84 aa 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a33a:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a340:	85 c0                	test   eax,eax
c000a342:	74 24                	je     c000a368 <tcp_pcb_purge+0x64>
c000a344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a348:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a34e:	83 ec 0c             	sub    esp,0xc
c000a351:	50                   	push   eax
c000a352:	e8 bd e1 ff ff       	call   c0008514 <pbuf_free>
c000a357:	83 c4 10             	add    esp,0x10
c000a35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35e:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a36c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a372:	83 ec 0c             	sub    esp,0xc
c000a375:	50                   	push   eax
c000a376:	e8 69 fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a382:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a390:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a39d:	83 ec 0c             	sub    esp,0xc
c000a3a0:	50                   	push   eax
c000a3a1:	e8 3e fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a3a6:	83 c4 10             	add    esp,0x10
c000a3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ad:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a3b0:	83 ec 0c             	sub    esp,0xc
c000a3b3:	50                   	push   eax
c000a3b4:	e8 2b fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a3b9:	83 c4 10             	add    esp,0x10
c000a3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3c0:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3cb:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d2:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d9:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3df:	90                   	nop
c000a3e0:	90                   	nop
c000a3e1:	83 c4 0c             	add    esp,0xc
c000a3e4:	c3                   	ret    
c000a3e5:	8d 76 00             	lea    esi,[esi+0x0]

c000a3e8 <tcp_slowtmr>:
c000a3e8:	57                   	push   edi
c000a3e9:	56                   	push   esi
c000a3ea:	53                   	push   ebx
c000a3eb:	83 ec 20             	sub    esp,0x20
c000a3ee:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3f3:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a3f8:	83 c0 01             	add    eax,0x1
c000a3fb:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a400:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a408:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a40d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a411:	e9 0e 06 00 00       	jmp    c000aa24 <tcp_slowtmr+0x63c>
c000a416:	66 90                	xchg   ax,ax
c000a418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a41c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a41f:	85 c0                	test   eax,eax
c000a421:	75 15                	jne    c000a438 <tcp_slowtmr+0x50>
c000a423:	83 ec 08             	sub    esp,0x8
c000a426:	68 30 04 03 c0       	push   0xc0030430
c000a42b:	68 26 fe 02 c0       	push   0xc002fe26
c000a430:	e8 cb 59 01 00       	call   c001fe00 <CPrintf>
c000a435:	83 c4 10             	add    esp,0x10
c000a438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a43c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a43f:	83 f8 01             	cmp    eax,0x1
c000a442:	75 18                	jne    c000a45c <tcp_slowtmr+0x74>
c000a444:	83 ec 08             	sub    esp,0x8
c000a447:	68 5c 04 03 c0       	push   0xc003045c
c000a44c:	68 26 fe 02 c0       	push   0xc002fe26
c000a451:	e8 aa 59 01 00       	call   c001fe00 <CPrintf>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	8d 76 00             	lea    esi,[esi+0x0]
c000a45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a460:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a463:	83 f8 0a             	cmp    eax,0xa
c000a466:	75 18                	jne    c000a480 <tcp_slowtmr+0x98>
c000a468:	83 ec 08             	sub    esp,0x8
c000a46b:	68 88 04 03 c0       	push   0xc0030488
c000a470:	68 26 fe 02 c0       	push   0xc002fe26
c000a475:	e8 86 59 01 00       	call   c001fe00 <CPrintf>
c000a47a:	83 c4 10             	add    esp,0x10
c000a47d:	8d 76 00             	lea    esi,[esi+0x0]
c000a480:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a485:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a48a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a491:	83 f8 02             	cmp    eax,0x2
c000a494:	75 22                	jne    c000a4b8 <tcp_slowtmr+0xd0>
c000a496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49a:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a49d:	0f b6 c0             	movzx  eax,al
c000a4a0:	83 f8 06             	cmp    eax,0x6
c000a4a3:	75 13                	jne    c000a4b8 <tcp_slowtmr+0xd0>
c000a4a5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4a9:	83 c0 01             	add    eax,0x1
c000a4ac:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4b0:	e9 eb 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a4b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bc:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a4bf:	0f b6 c0             	movzx  eax,al
c000a4c2:	83 f8 0c             	cmp    eax,0xc
c000a4c5:	75 11                	jne    c000a4d8 <tcp_slowtmr+0xf0>
c000a4c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4cb:	83 c0 01             	add    eax,0x1
c000a4ce:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4d2:	e9 c9 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a4d7:	90                   	nop
c000a4d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4dc:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e2:	0f b6 c0             	movzx  eax,al
c000a4e5:	85 c0                	test   eax,eax
c000a4e7:	0f 84 8f 00 00 00    	je     c000a57c <tcp_slowtmr+0x194>
c000a4ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4f1:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4f7:	8d 50 01             	lea    edx,[eax+0x1]
c000a4fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fe:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a508:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a50e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a512:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a518:	0f b6 c0             	movzx  eax,al
c000a51b:	83 e8 01             	sub    eax,0x1
c000a51e:	8a 80 10 07 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf8f0]
c000a524:	0f b6 c0             	movzx  eax,al
c000a527:	39 c2                	cmp    edx,eax
c000a529:	0f 82 71 01 00 00    	jb     c000a6a0 <tcp_slowtmr+0x2b8>
c000a52f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a533:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a53d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a541:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a547:	0f b6 c0             	movzx  eax,al
c000a54a:	83 f8 06             	cmp    eax,0x6
c000a54d:	77 19                	ja     c000a568 <tcp_slowtmr+0x180>
c000a54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a553:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a559:	83 c0 01             	add    eax,0x1
c000a55c:	88 c2                	mov    dl,al
c000a55e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a562:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a568:	83 ec 0c             	sub    esp,0xc
c000a56b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a56f:	e8 58 64 00 00       	call   c00109cc <tcp_zero_window_probe>
c000a574:	83 c4 10             	add    esp,0x10
c000a577:	e9 24 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a580:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a584:	98                   	cwde   
c000a585:	85 c0                	test   eax,eax
c000a587:	78 17                	js     c000a5a0 <tcp_slowtmr+0x1b8>
c000a589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58d:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a591:	83 c0 01             	add    eax,0x1
c000a594:	89 c2                	mov    edx,eax
c000a596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a59a:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a59e:	66 90                	xchg   ax,ax
c000a5a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a5a7:	85 c0                	test   eax,eax
c000a5a9:	0f 84 f1 00 00 00    	je     c000a6a0 <tcp_slowtmr+0x2b8>
c000a5af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b3:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a5be:	0f bf d2             	movsx  edx,dx
c000a5c1:	98                   	cwde   
c000a5c2:	39 c2                	cmp    edx,eax
c000a5c4:	0f 8c d6 00 00 00    	jl     c000a6a0 <tcp_slowtmr+0x2b8>
c000a5ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5d1:	83 f8 02             	cmp    eax,0x2
c000a5d4:	74 3e                	je     c000a614 <tcp_slowtmr+0x22c>
c000a5d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5da:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5dd:	98                   	cwde   
c000a5de:	c1 f8 03             	sar    eax,0x3
c000a5e1:	0f bf d0             	movsx  edx,ax
c000a5e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5ec:	98                   	cwde   
c000a5ed:	01 c2                	add    edx,eax
c000a5ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5f3:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5f6:	0f b6 c0             	movzx  eax,al
c000a5f9:	8a 80 18 07 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf8e8]
c000a5ff:	0f b6 c0             	movzx  eax,al
c000a602:	88 c1                	mov    cl,al
c000a604:	d3 e2                	shl    edx,cl
c000a606:	89 d0                	mov    eax,edx
c000a608:	89 c2                	mov    edx,eax
c000a60a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60e:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a612:	66 90                	xchg   ax,ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a629:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a62d:	89 c8                	mov    eax,ecx
c000a62f:	0f b7 d8             	movzx  ebx,ax
c000a632:	0f b7 ca             	movzx  ecx,dx
c000a635:	39 cb                	cmp    ebx,ecx
c000a637:	76 03                	jbe    c000a63c <tcp_slowtmr+0x254>
c000a639:	89 d0                	mov    eax,edx
c000a63b:	90                   	nop
c000a63c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a641:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a646:	d1 e8                	shr    eax,1
c000a648:	89 c2                	mov    edx,eax
c000a64a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a64e:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a656:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a659:	0f b7 d0             	movzx  edx,ax
c000a65c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a660:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a663:	0f b7 c0             	movzx  eax,ax
c000a666:	d1 e0                	shl    eax,1
c000a668:	39 c2                	cmp    edx,eax
c000a66a:	7d 14                	jge    c000a680 <tcp_slowtmr+0x298>
c000a66c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a670:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a673:	d1 e0                	shl    eax,1
c000a675:	89 c2                	mov    edx,eax
c000a677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a67b:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a67f:	90                   	nop
c000a680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a684:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a68b:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a68f:	83 ec 0c             	sub    esp,0xc
c000a692:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a696:	e8 21 60 00 00       	call   c00106bc <tcp_rexmit_rto>
c000a69b:	83 c4 10             	add    esp,0x10
c000a69e:	66 90                	xchg   ax,ax
c000a6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6a7:	83 f8 06             	cmp    eax,0x6
c000a6aa:	75 24                	jne    c000a6d0 <tcp_slowtmr+0x2e8>
c000a6ac:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6b9:	29 c2                	sub    edx,eax
c000a6bb:	89 d0                	mov    eax,edx
c000a6bd:	83 f8 28             	cmp    eax,0x28
c000a6c0:	76 0e                	jbe    c000a6d0 <tcp_slowtmr+0x2e8>
c000a6c2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6c6:	83 c0 01             	add    eax,0x1
c000a6c9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a6d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d4:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a6d7:	0f b6 c0             	movzx  eax,al
c000a6da:	83 e0 08             	and    eax,0x8
c000a6dd:	0f 84 cd 00 00 00    	je     c000a7b0 <tcp_slowtmr+0x3c8>
c000a6e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6ea:	83 f8 04             	cmp    eax,0x4
c000a6ed:	74 11                	je     c000a700 <tcp_slowtmr+0x318>
c000a6ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6f6:	83 f8 07             	cmp    eax,0x7
c000a6f9:	0f 85 b1 00 00 00    	jne    c000a7b0 <tcp_slowtmr+0x3c8>
c000a6ff:	90                   	nop
c000a700:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a706:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a70a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a70d:	89 d1                	mov    ecx,edx
c000a70f:	29 c1                	sub    ecx,eax
c000a711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a715:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a71b:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a720:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a725:	f7 e2                	mul    edx
c000a727:	89 d0                	mov    eax,edx
c000a729:	c1 e8 05             	shr    eax,0x5
c000a72c:	39 c1                	cmp    ecx,eax
c000a72e:	76 18                	jbe    c000a748 <tcp_slowtmr+0x360>
c000a730:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a734:	83 c0 01             	add    eax,0x1
c000a737:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a73b:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a73f:	83 c0 01             	add    eax,0x1
c000a742:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a746:	eb 68                	jmp    c000a7b0 <tcp_slowtmr+0x3c8>
c000a748:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a74e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a752:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a755:	89 d1                	mov    ecx,edx
c000a757:	29 c1                	sub    ecx,eax
c000a759:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a75d:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a767:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a76d:	0f b6 c0             	movzx  eax,al
c000a770:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a776:	01 d0                	add    eax,edx
c000a778:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a77d:	f7 e2                	mul    edx
c000a77f:	89 d0                	mov    eax,edx
c000a781:	c1 e8 05             	shr    eax,0x5
c000a784:	39 c1                	cmp    ecx,eax
c000a786:	76 28                	jbe    c000a7b0 <tcp_slowtmr+0x3c8>
c000a788:	83 ec 0c             	sub    esp,0xc
c000a78b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a78f:	e8 6c 61 00 00       	call   c0010900 <tcp_keepalive>
c000a794:	83 c4 10             	add    esp,0x10
c000a797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79b:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a7a1:	83 c0 01             	add    eax,0x1
c000a7a4:	88 c2                	mov    dl,al
c000a7a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7aa:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a7b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7b4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7ba:	85 c0                	test   eax,eax
c000a7bc:	74 4e                	je     c000a80c <tcp_slowtmr+0x424>
c000a7be:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7c8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7cb:	89 d1                	mov    ecx,edx
c000a7cd:	29 c1                	sub    ecx,eax
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7d6:	0f bf d0             	movsx  edx,ax
c000a7d9:	89 d0                	mov    eax,edx
c000a7db:	d1 e0                	shl    eax,1
c000a7dd:	01 d0                	add    eax,edx
c000a7df:	d1 e0                	shl    eax,1
c000a7e1:	39 c1                	cmp    ecx,eax
c000a7e3:	72 27                	jb     c000a80c <tcp_slowtmr+0x424>
c000a7e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e9:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7ef:	83 ec 0c             	sub    esp,0xc
c000a7f2:	50                   	push   eax
c000a7f3:	e8 ec f9 ff ff       	call   c000a1e4 <tcp_segs_free>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ff:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a809:	8d 76 00             	lea    esi,[esi+0x0]
c000a80c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a813:	83 f8 03             	cmp    eax,0x3
c000a816:	75 24                	jne    c000a83c <tcp_slowtmr+0x454>
c000a818:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a81e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a822:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a825:	29 c2                	sub    edx,eax
c000a827:	89 d0                	mov    eax,edx
c000a829:	83 f8 28             	cmp    eax,0x28
c000a82c:	76 0e                	jbe    c000a83c <tcp_slowtmr+0x454>
c000a82e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a832:	83 c0 01             	add    eax,0x1
c000a835:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a839:	8d 76 00             	lea    esi,[esi+0x0]
c000a83c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a840:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a843:	83 f8 09             	cmp    eax,0x9
c000a846:	75 24                	jne    c000a86c <tcp_slowtmr+0x484>
c000a848:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a84e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a852:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a855:	29 c2                	sub    edx,eax
c000a857:	89 d0                	mov    eax,edx
c000a859:	3d f0 00 00 00       	cmp    eax,0xf0
c000a85e:	76 0c                	jbe    c000a86c <tcp_slowtmr+0x484>
c000a860:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a864:	83 c0 01             	add    eax,0x1
c000a867:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a86b:	90                   	nop
c000a86c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a871:	85 c0                	test   eax,eax
c000a873:	0f 84 13 01 00 00    	je     c000a98c <tcp_slowtmr+0x5a4>
c000a879:	83 ec 0c             	sub    esp,0xc
c000a87c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a880:	e8 7f fa ff ff       	call   c000a304 <tcp_pcb_purge>
c000a885:	83 c4 10             	add    esp,0x10
c000a888:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a88d:	74 31                	je     c000a8c0 <tcp_slowtmr+0x4d8>
c000a88f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a894:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a898:	75 16                	jne    c000a8b0 <tcp_slowtmr+0x4c8>
c000a89a:	83 ec 08             	sub    esp,0x8
c000a89d:	68 b8 04 03 c0       	push   0xc00304b8
c000a8a2:	68 26 fe 02 c0       	push   0xc002fe26
c000a8a7:	e8 54 55 01 00       	call   c001fe00 <CPrintf>
c000a8ac:	83 c4 10             	add    esp,0x10
c000a8af:	90                   	nop
c000a8b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a8b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a8be:	eb 2c                	jmp    c000a8ec <tcp_slowtmr+0x504>
c000a8c0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a8c5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8c9:	74 15                	je     c000a8e0 <tcp_slowtmr+0x4f8>
c000a8cb:	83 ec 08             	sub    esp,0x8
c000a8ce:	68 e4 04 03 c0       	push   0xc00304e4
c000a8d3:	68 26 fe 02 c0       	push   0xc002fe26
c000a8d8:	e8 23 55 01 00       	call   c001fe00 <CPrintf>
c000a8dd:	83 c4 10             	add    esp,0x10
c000a8e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8e7:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a8ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f0:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8f6:	85 c0                	test   eax,eax
c000a8f8:	74 1e                	je     c000a918 <tcp_slowtmr+0x530>
c000a8fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8fe:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a904:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a908:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a90b:	83 ec 08             	sub    esp,0x8
c000a90e:	6a f6                	push   0xfffffff6
c000a910:	52                   	push   edx
c000a911:	ff d0                	call   eax
c000a913:	83 c4 10             	add    esp,0x10
c000a916:	66 90                	xchg   ax,ax
c000a918:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a91d:	85 c0                	test   eax,eax
c000a91f:	74 3f                	je     c000a960 <tcp_slowtmr+0x578>
c000a921:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a925:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a929:	0f b7 f0             	movzx  esi,ax
c000a92c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a930:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a933:	0f b7 d8             	movzx  ebx,ax
c000a936:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a93a:	8d 78 04             	lea    edi,[eax+0x4]
c000a93d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a945:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a94c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a94f:	83 ec 08             	sub    esp,0x8
c000a952:	56                   	push   esi
c000a953:	53                   	push   ebx
c000a954:	57                   	push   edi
c000a955:	51                   	push   ecx
c000a956:	52                   	push   edx
c000a957:	50                   	push   eax
c000a958:	e8 e3 5b 00 00       	call   c0010540 <tcp_rst>
c000a95d:	83 c4 20             	add    esp,0x20
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	83 ec 08             	sub    esp,0x8
c000a976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a97a:	6a 02                	push   0x2
c000a97c:	e8 d3 d2 ff ff       	call   c0007c54 <memp_free>
c000a981:	83 c4 10             	add    esp,0x10
c000a984:	e9 9b 00 00 00       	jmp    c000aa24 <tcp_slowtmr+0x63c>
c000a989:	8d 76 00             	lea    esi,[esi+0x0]
c000a98c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a990:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a998:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a99b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a99f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a3:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a9a6:	83 c0 01             	add    eax,0x1
c000a9a9:	88 c2                	mov    dl,al
c000a9ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9af:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a9b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b6:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a9b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9bd:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a9c0:	0f b6 d2             	movzx  edx,dl
c000a9c3:	0f b6 c0             	movzx  eax,al
c000a9c6:	39 c2                	cmp    edx,eax
c000a9c8:	72 5a                	jb     c000aa24 <tcp_slowtmr+0x63c>
c000a9ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9ce:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9d6:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9dc:	85 c0                	test   eax,eax
c000a9de:	74 24                	je     c000aa04 <tcp_slowtmr+0x61c>
c000a9e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9e4:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9ee:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9f1:	83 ec 08             	sub    esp,0x8
c000a9f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9f8:	52                   	push   edx
c000a9f9:	ff d0                	call   eax
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000aa02:	eb 08                	jmp    c000aa0c <tcp_slowtmr+0x624>
c000aa04:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000aa09:	8d 76 00             	lea    esi,[esi+0x0]
c000aa0c:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000aa11:	85 c0                	test   eax,eax
c000aa13:	75 0f                	jne    c000aa24 <tcp_slowtmr+0x63c>
c000aa15:	83 ec 0c             	sub    esp,0xc
c000aa18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa1c:	e8 93 56 00 00       	call   c00100b4 <tcp_output>
c000aa21:	83 c4 10             	add    esp,0x10
c000aa24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000aa29:	0f 85 e9 f9 ff ff    	jne    c000a418 <tcp_slowtmr+0x30>
c000aa2f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa37:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa40:	e9 0b 01 00 00       	jmp    c000ab50 <tcp_slowtmr+0x768>
c000aa45:	8d 76 00             	lea    esi,[esi+0x0]
c000aa48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa4f:	83 f8 0a             	cmp    eax,0xa
c000aa52:	74 18                	je     c000aa6c <tcp_slowtmr+0x684>
c000aa54:	83 ec 08             	sub    esp,0x8
c000aa57:	68 10 05 03 c0       	push   0xc0030510
c000aa5c:	68 26 fe 02 c0       	push   0xc002fe26
c000aa61:	e8 9a 53 01 00       	call   c001fe00 <CPrintf>
c000aa66:	83 c4 10             	add    esp,0x10
c000aa69:	8d 76 00             	lea    esi,[esi+0x0]
c000aa6c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa71:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000aa77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa7b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa7e:	29 c2                	sub    edx,eax
c000aa80:	89 d0                	mov    eax,edx
c000aa82:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa87:	76 0b                	jbe    c000aa94 <tcp_slowtmr+0x6ac>
c000aa89:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa8d:	83 c0 01             	add    eax,0x1
c000aa90:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa94:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa99:	85 c0                	test   eax,eax
c000aa9b:	0f 84 9b 00 00 00    	je     c000ab3c <tcp_slowtmr+0x754>
c000aaa1:	83 ec 0c             	sub    esp,0xc
c000aaa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aaa8:	e8 57 f8 ff ff       	call   c000a304 <tcp_pcb_purge>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aab5:	74 31                	je     c000aae8 <tcp_slowtmr+0x700>
c000aab7:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aabc:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac0:	75 16                	jne    c000aad8 <tcp_slowtmr+0x6f0>
c000aac2:	83 ec 08             	sub    esp,0x8
c000aac5:	68 40 05 03 c0       	push   0xc0030540
c000aaca:	68 26 fe 02 c0       	push   0xc002fe26
c000aacf:	e8 2c 53 01 00       	call   c001fe00 <CPrintf>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	90                   	nop
c000aad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aadc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aadf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aae3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aae6:	eb 2c                	jmp    c000ab14 <tcp_slowtmr+0x72c>
c000aae8:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aaed:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aaf1:	74 15                	je     c000ab08 <tcp_slowtmr+0x720>
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	68 68 05 03 c0       	push   0xc0030568
c000aafb:	68 26 fe 02 c0       	push   0xc002fe26
c000ab00:	e8 fb 52 01 00       	call   c001fe00 <CPrintf>
c000ab05:	83 c4 10             	add    esp,0x10
c000ab08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab0f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ab14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab27:	83 ec 08             	sub    esp,0x8
c000ab2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab2e:	6a 02                	push   0x2
c000ab30:	e8 1f d1 ff ff       	call   c0007c54 <memp_free>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	eb 16                	jmp    c000ab50 <tcp_slowtmr+0x768>
c000ab3a:	66 90                	xchg   ax,ax
c000ab3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab4f:	90                   	nop
c000ab50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab55:	0f 85 ed fe ff ff    	jne    c000aa48 <tcp_slowtmr+0x660>
c000ab5b:	90                   	nop
c000ab5c:	83 c4 20             	add    esp,0x20
c000ab5f:	5b                   	pop    ebx
c000ab60:	5e                   	pop    esi
c000ab61:	5f                   	pop    edi
c000ab62:	c3                   	ret    
c000ab63:	90                   	nop

c000ab64 <tcp_pcb_remove>:
c000ab64:	83 ec 0c             	sub    esp,0xc
c000ab67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab6d:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab71:	75 11                	jne    c000ab84 <tcp_pcb_remove+0x20>
c000ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab77:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab79:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab80:	89 10                	mov    DWORD PTR [eax],edx
c000ab82:	eb 4c                	jmp    c000abd0 <tcp_pcb_remove+0x6c>
c000ab84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab8a:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab8f:	eb 33                	jmp    c000abc4 <tcp_pcb_remove+0x60>
c000ab91:	8d 76 00             	lea    esi,[esi+0x0]
c000ab94:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab9c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000aba0:	75 12                	jne    c000abb4 <tcp_pcb_remove+0x50>
c000aba2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aba7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abab:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abb1:	eb 1d                	jmp    c000abd0 <tcp_pcb_remove+0x6c>
c000abb3:	90                   	nop
c000abb4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abbc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]
c000abc4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abc9:	85 c0                	test   eax,eax
c000abcb:	75 c7                	jne    c000ab94 <tcp_pcb_remove+0x30>
c000abcd:	8d 76 00             	lea    esi,[esi+0x0]
c000abd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abd4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abe2:	e8 1d f7 ff ff       	call   c000a304 <tcp_pcb_purge>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abf1:	83 f8 0a             	cmp    eax,0xa
c000abf4:	74 3e                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000abf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abfd:	83 f8 01             	cmp    eax,0x1
c000ac00:	74 32                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000ac02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ac09:	0f b6 c0             	movzx  eax,al
c000ac0c:	83 e0 01             	and    eax,0x1
c000ac0f:	74 23                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000ac11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac15:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ac18:	83 c8 02             	or     eax,0x2
c000ac1b:	88 c2                	mov    dl,al
c000ac1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac21:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ac2b:	e8 84 54 00 00       	call   c00100b4 <tcp_output>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac3b:	83 f8 01             	cmp    eax,0x1
c000ac3e:	74 64                	je     c000aca4 <tcp_pcb_remove+0x140>
c000ac40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac44:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac47:	85 c0                	test   eax,eax
c000ac49:	74 15                	je     c000ac60 <tcp_pcb_remove+0xfc>
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	68 0e 06 03 c0       	push   0xc003060e
c000ac53:	68 26 fe 02 c0       	push   0xc002fe26
c000ac58:	e8 a3 51 01 00       	call   c001fe00 <CPrintf>
c000ac5d:	83 c4 10             	add    esp,0x10
c000ac60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac64:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac67:	85 c0                	test   eax,eax
c000ac69:	74 15                	je     c000ac80 <tcp_pcb_remove+0x11c>
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	68 26 06 03 c0       	push   0xc0030626
c000ac73:	68 26 fe 02 c0       	push   0xc002fe26
c000ac78:	e8 83 51 01 00       	call   c001fe00 <CPrintf>
c000ac7d:	83 c4 10             	add    esp,0x10
c000ac80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac84:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac8a:	85 c0                	test   eax,eax
c000ac8c:	74 16                	je     c000aca4 <tcp_pcb_remove+0x140>
c000ac8e:	83 ec 08             	sub    esp,0x8
c000ac91:	68 3f 06 03 c0       	push   0xc003063f
c000ac96:	68 26 fe 02 c0       	push   0xc002fe26
c000ac9b:	e8 60 51 01 00       	call   c001fe00 <CPrintf>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	90                   	nop
c000aca4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aca8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000acaf:	90                   	nop
c000acb0:	83 c4 0c             	add    esp,0xc
c000acb3:	c3                   	ret    

c000acb4 <tcp_close_shutdown>:
c000acb4:	57                   	push   edi
c000acb5:	56                   	push   esi
c000acb6:	53                   	push   ebx
c000acb7:	83 ec 20             	sub    esp,0x20
c000acba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000acbe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000acc2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000acc7:	85 c0                	test   eax,eax
c000acc9:	0f 84 41 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000accf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acd6:	83 f8 01             	cmp    eax,0x1
c000acd9:	0f 84 31 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000acdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ace9:	85 c0                	test   eax,eax
c000aceb:	75 17                	jne    c000ad04 <tcp_close_shutdown+0x50>
c000aced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acf1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acf4:	0f b7 c0             	movzx  eax,ax
c000acf7:	3d 60 08 00 00       	cmp    eax,0x860
c000acfc:	0f 84 0e 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000ad02:	66 90                	xchg   ax,ax
c000ad04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad08:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ad0b:	0f b6 c0             	movzx  eax,al
c000ad0e:	83 e0 10             	and    eax,0x10
c000ad11:	75 15                	jne    c000ad28 <tcp_close_shutdown+0x74>
c000ad13:	83 ec 08             	sub    esp,0x8
c000ad16:	68 56 06 03 c0       	push   0xc0030656
c000ad1b:	68 26 fe 02 c0       	push   0xc002fe26
c000ad20:	e8 db 50 01 00       	call   c001fe00 <CPrintf>
c000ad25:	83 c4 10             	add    esp,0x10
c000ad28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad2c:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad30:	0f b7 f0             	movzx  esi,ax
c000ad33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad3a:	0f b7 d8             	movzx  ebx,ax
c000ad3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad41:	8d 78 04             	lea    edi,[eax+0x4]
c000ad44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad4c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad53:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad56:	83 ec 08             	sub    esp,0x8
c000ad59:	56                   	push   esi
c000ad5a:	53                   	push   ebx
c000ad5b:	57                   	push   edi
c000ad5c:	51                   	push   ecx
c000ad5d:	52                   	push   edx
c000ad5e:	50                   	push   eax
c000ad5f:	e8 dc 57 00 00       	call   c0010540 <tcp_rst>
c000ad64:	83 c4 20             	add    esp,0x20
c000ad67:	83 ec 0c             	sub    esp,0xc
c000ad6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad6e:	e8 91 f5 ff ff       	call   c000a304 <tcp_pcb_purge>
c000ad73:	83 c4 10             	add    esp,0x10
c000ad76:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad7b:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7f:	75 0f                	jne    c000ad90 <tcp_close_shutdown+0xdc>
c000ad81:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad89:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ad8e:	eb 48                	jmp    c000add8 <tcp_close_shutdown+0x124>
c000ad90:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad95:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad9a:	eb 30                	jmp    c000adcc <tcp_close_shutdown+0x118>
c000ad9c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ada1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ada4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ada8:	75 12                	jne    c000adbc <tcp_close_shutdown+0x108>
c000adaa:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000adaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000adb3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000adb6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adb9:	eb 1d                	jmp    c000add8 <tcp_close_shutdown+0x124>
c000adbb:	90                   	nop
c000adbc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000adc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adc4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000adc9:	8d 76 00             	lea    esi,[esi+0x0]
c000adcc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000add1:	85 c0                	test   eax,eax
c000add3:	75 c7                	jne    c000ad9c <tcp_close_shutdown+0xe8>
c000add5:	8d 76 00             	lea    esi,[esi+0x0]
c000add8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000addc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ade3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade7:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adee:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000adf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adff:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ae04:	e8 53 5f 00 00       	call   c0010d5c <tcp_timer_needed>
c000ae09:	b0 00                	mov    al,0x0
c000ae0b:	e9 f4 01 00 00       	jmp    c000b004 <tcp_close_shutdown+0x350>
c000ae10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae17:	83 f8 07             	cmp    eax,0x7
c000ae1a:	0f 87 a4 01 00 00    	ja     c000afc4 <tcp_close_shutdown+0x310>
c000ae20:	8b 04 85 e0 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf920]
c000ae27:	ff e0                	jmp    eax
c000ae29:	8d 76 00             	lea    esi,[esi+0x0]
c000ae2c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae38:	0f b7 c0             	movzx  eax,ax
c000ae3b:	85 c0                	test   eax,eax
c000ae3d:	74 71                	je     c000aeb0 <tcp_close_shutdown+0x1fc>
c000ae3f:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1a8>
c000ae4a:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae52:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ae57:	eb 4b                	jmp    c000aea4 <tcp_close_shutdown+0x1f0>
c000ae59:	8d 76 00             	lea    esi,[esi+0x0]
c000ae5c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae61:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae66:	eb 30                	jmp    c000ae98 <tcp_close_shutdown+0x1e4>
c000ae68:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae70:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae74:	75 12                	jne    c000ae88 <tcp_close_shutdown+0x1d4>
c000ae76:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae85:	eb 1d                	jmp    c000aea4 <tcp_close_shutdown+0x1f0>
c000ae87:	90                   	nop
c000ae88:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae90:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae95:	8d 76 00             	lea    esi,[esi+0x0]
c000ae98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae9d:	85 c0                	test   eax,eax
c000ae9f:	75 c7                	jne    c000ae68 <tcp_close_shutdown+0x1b4>
c000aea1:	8d 76 00             	lea    esi,[esi+0x0]
c000aea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aea8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aeaf:	90                   	nop
c000aeb0:	83 ec 08             	sub    esp,0x8
c000aeb3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb7:	6a 02                	push   0x2
c000aeb9:	e8 96 cd ff ff       	call   c0007c54 <memp_free>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aec9:	e9 12 01 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000aece:	66 90                	xchg   ax,ax
c000aed0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aed5:	83 ec 08             	sub    esp,0x8
c000aed8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aedc:	68 78 68 03 c0       	push   0xc0036878
c000aee1:	e8 7e fc ff ff       	call   c000ab64 <tcp_pcb_remove>
c000aee6:	83 c4 10             	add    esp,0x10
c000aee9:	83 ec 08             	sub    esp,0x8
c000aeec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aef0:	6a 03                	push   0x3
c000aef2:	e8 5d cd ff ff       	call   c0007c54 <memp_free>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af02:	e9 d9 00 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000af07:	90                   	nop
c000af08:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af0d:	83 ec 08             	sub    esp,0x8
c000af10:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af14:	68 70 68 03 c0       	push   0xc0036870
c000af19:	e8 46 fc ff ff       	call   c000ab64 <tcp_pcb_remove>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	83 ec 08             	sub    esp,0x8
c000af24:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af28:	6a 02                	push   0x2
c000af2a:	e8 25 cd ff ff       	call   c0007c54 <memp_free>
c000af2f:	83 c4 10             	add    esp,0x10
c000af32:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af3a:	e9 a1 00 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000af3f:	90                   	nop
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 b8 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 78                	jne    c000afd4 <tcp_close_shutdown+0x320>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 6b                	jmp    c000afd4 <tcp_close_shutdown+0x320>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 8c 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 50                	jne    c000afd8 <tcp_close_shutdown+0x324>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af93:	eb 43                	jmp    c000afd8 <tcp_close_shutdown+0x324>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	83 ec 0c             	sub    esp,0xc
c000af9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af9f:	e8 60 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000afa4:	83 c4 10             	add    esp,0x10
c000afa7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000afab:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afb0:	85 c0                	test   eax,eax
c000afb2:	75 28                	jne    c000afdc <tcp_close_shutdown+0x328>
c000afb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000afb8:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000afbf:	eb 1b                	jmp    c000afdc <tcp_close_shutdown+0x328>
c000afc1:	8d 76 00             	lea    esi,[esi+0x0]
c000afc4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000afc9:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afd1:	eb 0d                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afd3:	90                   	nop
c000afd4:	90                   	nop
c000afd5:	eb 09                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afd7:	90                   	nop
c000afd8:	90                   	nop
c000afd9:	eb 05                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afdb:	90                   	nop
c000afdc:	90                   	nop
c000afdd:	8d 76 00             	lea    esi,[esi+0x0]
c000afe0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afe5:	74 19                	je     c000b000 <tcp_close_shutdown+0x34c>
c000afe7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afec:	85 c0                	test   eax,eax
c000afee:	75 10                	jne    c000b000 <tcp_close_shutdown+0x34c>
c000aff0:	83 ec 0c             	sub    esp,0xc
c000aff3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aff7:	e8 b8 50 00 00       	call   c00100b4 <tcp_output>
c000affc:	83 c4 10             	add    esp,0x10
c000afff:	90                   	nop
c000b000:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000b004:	83 c4 20             	add    esp,0x20
c000b007:	5b                   	pop    ebx
c000b008:	5e                   	pop    esi
c000b009:	5f                   	pop    edi
c000b00a:	c3                   	ret    
c000b00b:	90                   	nop

c000b00c <tcp_close>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b013:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b016:	83 f8 01             	cmp    eax,0x1
c000b019:	74 15                	je     c000b030 <tcp_close+0x24>
c000b01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b022:	83 c8 10             	or     eax,0x10
c000b025:	88 c2                	mov    dl,al
c000b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b02e:	66 90                	xchg   ax,ax
c000b030:	83 ec 08             	sub    esp,0x8
c000b033:	6a 01                	push   0x1
c000b035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b039:	e8 76 fc ff ff       	call   c000acb4 <tcp_close_shutdown>
c000b03e:	83 c4 10             	add    esp,0x10
c000b041:	83 c4 0c             	add    esp,0xc
c000b044:	c3                   	ret    
c000b045:	8d 76 00             	lea    esi,[esi+0x0]

c000b048 <tcp_recv_null>:
c000b048:	83 ec 1c             	sub    esp,0x1c
c000b04b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b04f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b053:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b058:	74 2e                	je     c000b088 <tcp_recv_null+0x40>
c000b05a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b05e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b061:	0f b7 c0             	movzx  eax,ax
c000b064:	83 ec 08             	sub    esp,0x8
c000b067:	50                   	push   eax
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 b3 ee ff ff       	call   c0009f24 <tcp_recved>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07b:	e8 94 d4 ff ff       	call   c0008514 <pbuf_free>
c000b080:	83 c4 10             	add    esp,0x10
c000b083:	eb 1f                	jmp    c000b0a4 <tcp_recv_null+0x5c>
c000b085:	8d 76 00             	lea    esi,[esi+0x0]
c000b088:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b08d:	85 c0                	test   eax,eax
c000b08f:	75 13                	jne    c000b0a4 <tcp_recv_null+0x5c>
c000b091:	83 ec 0c             	sub    esp,0xc
c000b094:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b098:	e8 6f ff ff ff       	call   c000b00c <tcp_close>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	eb 06                	jmp    c000b0a8 <tcp_recv_null+0x60>
c000b0a2:	66 90                	xchg   ax,ax
c000b0a4:	b0 00                	mov    al,0x0
c000b0a6:	66 90                	xchg   ax,ax
c000b0a8:	83 c4 1c             	add    esp,0x1c
c000b0ab:	c3                   	ret    

c000b0ac <tcp_fasttmr>:
c000b0ac:	83 ec 1c             	sub    esp,0x1c
c000b0af:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b0b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0b8:	e9 03 01 00 00       	jmp    c000b1c0 <tcp_fasttmr+0x114>
c000b0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b0c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0cf:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0d5:	85 c0                	test   eax,eax
c000b0d7:	0f 84 8f 00 00 00    	je     c000b16c <tcp_fasttmr+0xc0>
c000b0dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0e1:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0e7:	85 c0                	test   eax,eax
c000b0e9:	74 31                	je     c000b11c <tcp_fasttmr+0x70>
c000b0eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0ef:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0f9:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b103:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b106:	6a 00                	push   0x0
c000b108:	51                   	push   ecx
c000b109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10d:	52                   	push   edx
c000b10e:	ff d0                	call   eax
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b117:	eb 23                	jmp    c000b13c <tcp_fasttmr+0x90>
c000b119:	8d 76 00             	lea    esi,[esi+0x0]
c000b11c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b120:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b126:	6a 00                	push   0x0
c000b128:	50                   	push   eax
c000b129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12d:	6a 00                	push   0x0
c000b12f:	e8 14 ff ff ff       	call   c000b048 <tcp_recv_null>
c000b134:	83 c4 10             	add    esp,0x10
c000b137:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b13b:	90                   	nop
c000b13c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b141:	85 c0                	test   eax,eax
c000b143:	75 13                	jne    c000b158 <tcp_fasttmr+0xac>
c000b145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b149:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b153:	eb 17                	jmp    c000b16c <tcp_fasttmr+0xc0>
c000b155:	8d 76 00             	lea    esi,[esi+0x0]
c000b158:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b15d:	83 f8 f6             	cmp    eax,0xfffffff6
c000b160:	75 0a                	jne    c000b16c <tcp_fasttmr+0xc0>
c000b162:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b16a:	66 90                	xchg   ax,ax
c000b16c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b171:	74 45                	je     c000b1b8 <tcp_fasttmr+0x10c>
c000b173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b177:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17a:	0f b6 c0             	movzx  eax,al
c000b17d:	83 e0 01             	and    eax,0x1
c000b180:	74 36                	je     c000b1b8 <tcp_fasttmr+0x10c>
c000b182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b186:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b189:	83 c8 02             	or     eax,0x2
c000b18c:	88 c2                	mov    dl,al
c000b18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b192:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b195:	83 ec 0c             	sub    esp,0xc
c000b198:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b19c:	e8 13 4f 00 00       	call   c00100b4 <tcp_output>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1a8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b1ab:	83 e0 fc             	and    eax,0xfffffffc
c000b1ae:	88 c2                	mov    dl,al
c000b1b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1b4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b1b7:	90                   	nop
c000b1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b1c5:	0f 85 f5 fe ff ff    	jne    c000b0c0 <tcp_fasttmr+0x14>
c000b1cb:	90                   	nop
c000b1cc:	83 c4 1c             	add    esp,0x1c
c000b1cf:	c3                   	ret    

c000b1d0 <tcp_tmr>:
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	e8 d4 fe ff ff       	call   c000b0ac <tcp_fasttmr>
c000b1d8:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1dd:	83 c0 01             	add    eax,0x1
c000b1e0:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b1e5:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1ea:	0f b6 c0             	movzx  eax,al
c000b1ed:	83 e0 01             	and    eax,0x1
c000b1f0:	74 06                	je     c000b1f8 <tcp_tmr+0x28>
c000b1f2:	e8 f1 f1 ff ff       	call   c000a3e8 <tcp_slowtmr>
c000b1f7:	90                   	nop
c000b1f8:	90                   	nop
c000b1f9:	83 c4 0c             	add    esp,0xc
c000b1fc:	c3                   	ret    
c000b1fd:	8d 76 00             	lea    esi,[esi+0x0]

c000b200 <tcp_shutdown>:
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b207:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b20a:	83 f8 01             	cmp    eax,0x1
c000b20d:	75 09                	jne    c000b218 <tcp_shutdown+0x18>
c000b20f:	b0 f3                	mov    al,0xf3
c000b211:	e9 92 00 00 00       	jmp    c000b2a8 <tcp_shutdown+0xa8>
c000b216:	66 90                	xchg   ax,ax
c000b218:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b21d:	74 49                	je     c000b268 <tcp_shutdown+0x68>
c000b21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b223:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b229:	85 c0                	test   eax,eax
c000b22b:	74 27                	je     c000b254 <tcp_shutdown+0x54>
c000b22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b231:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b237:	83 ec 0c             	sub    esp,0xc
c000b23a:	50                   	push   eax
c000b23b:	e8 d4 d2 ff ff       	call   c0008514 <pbuf_free>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b251:	8d 76 00             	lea    esi,[esi+0x0]
c000b254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b258:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b25b:	83 c8 10             	or     eax,0x10
c000b25e:	88 c2                	mov    dl,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b267:	90                   	nop
c000b268:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b26d:	74 2d                	je     c000b29c <tcp_shutdown+0x9c>
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b276:	83 f8 03             	cmp    eax,0x3
c000b279:	72 25                	jb     c000b2a0 <tcp_shutdown+0xa0>
c000b27b:	83 f8 04             	cmp    eax,0x4
c000b27e:	76 08                	jbe    c000b288 <tcp_shutdown+0x88>
c000b280:	83 f8 07             	cmp    eax,0x7
c000b283:	75 1b                	jne    c000b2a0 <tcp_shutdown+0xa0>
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	83 ec 08             	sub    esp,0x8
c000b28b:	6a 00                	push   0x0
c000b28d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b291:	e8 1e fa ff ff       	call   c000acb4 <tcp_close_shutdown>
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	eb 0d                	jmp    c000b2a8 <tcp_shutdown+0xa8>
c000b29b:	90                   	nop
c000b29c:	90                   	nop
c000b29d:	eb 05                	jmp    c000b2a4 <tcp_shutdown+0xa4>
c000b29f:	90                   	nop
c000b2a0:	90                   	nop
c000b2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b2a4:	b0 00                	mov    al,0x0
c000b2a6:	66 90                	xchg   ax,ax
c000b2a8:	83 c4 0c             	add    esp,0xc
c000b2ab:	c3                   	ret    

c000b2ac <tcp_abandon>:
c000b2ac:	83 ec 2c             	sub    esp,0x2c
c000b2af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2b6:	83 f8 01             	cmp    eax,0x1
c000b2b9:	75 15                	jne    c000b2d0 <tcp_abandon+0x24>
c000b2bb:	83 ec 08             	sub    esp,0x8
c000b2be:	68 90 05 03 c0       	push   0xc0030590
c000b2c3:	68 26 fe 02 c0       	push   0xc002fe26
c000b2c8:	e8 33 4b 01 00       	call   c001fe00 <CPrintf>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2d7:	83 f8 0a             	cmp    eax,0xa
c000b2da:	75 2c                	jne    c000b308 <tcp_abandon+0x5c>
c000b2dc:	83 ec 08             	sub    esp,0x8
c000b2df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2e3:	68 84 68 03 c0       	push   0xc0036884
c000b2e8:	e8 77 f8 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 08             	sub    esp,0x8
c000b2f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2f7:	6a 02                	push   0x2
c000b2f9:	e8 56 c9 ff ff       	call   c0007c54 <memp_free>
c000b2fe:	83 c4 10             	add    esp,0x10
c000b301:	e9 32 01 00 00       	jmp    c000b438 <tcp_abandon+0x18c>
c000b306:	66 90                	xchg   ax,ax
c000b308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b30f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b31a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b322:	8b 00                	mov    eax,DWORD PTR [eax]
c000b324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b32c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b333:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b337:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b33a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b33f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b343:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b347:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b34c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b350:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b356:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b35a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b365:	83 ec 08             	sub    esp,0x8
c000b368:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b36c:	68 70 68 03 c0       	push   0xc0036870
c000b371:	e8 ee f7 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37d:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b380:	85 c0                	test   eax,eax
c000b382:	74 14                	je     c000b398 <tcp_abandon+0xec>
c000b384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b388:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b38b:	83 ec 0c             	sub    esp,0xc
c000b38e:	50                   	push   eax
c000b38f:	e8 50 ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b394:	83 c4 10             	add    esp,0x10
c000b397:	90                   	nop
c000b398:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b39f:	85 c0                	test   eax,eax
c000b3a1:	74 15                	je     c000b3b8 <tcp_abandon+0x10c>
c000b3a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3a7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b3aa:	83 ec 0c             	sub    esp,0xc
c000b3ad:	50                   	push   eax
c000b3ae:	e8 31 ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b3b3:	83 c4 10             	add    esp,0x10
c000b3b6:	66 90                	xchg   ax,ax
c000b3b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3bc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3c2:	85 c0                	test   eax,eax
c000b3c4:	74 16                	je     c000b3dc <tcp_abandon+0x130>
c000b3c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3ca:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3d0:	83 ec 0c             	sub    esp,0xc
c000b3d3:	50                   	push   eax
c000b3d4:	e8 0b ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b3d9:	83 c4 10             	add    esp,0x10
c000b3dc:	83 ec 08             	sub    esp,0x8
c000b3df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3e3:	6a 02                	push   0x2
c000b3e5:	e8 6a c8 ff ff       	call   c0007c54 <memp_free>
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3f2:	74 14                	je     c000b408 <tcp_abandon+0x15c>
c000b3f4:	83 ec 08             	sub    esp,0x8
c000b3f7:	6a f6                	push   0xfffffff6
c000b3f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b401:	ff d0                	call   eax
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	66 90                	xchg   ax,ax
c000b408:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b40d:	74 29                	je     c000b438 <tcp_abandon+0x18c>
c000b40f:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b414:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b419:	83 ec 08             	sub    esp,0x8
c000b41c:	52                   	push   edx
c000b41d:	50                   	push   eax
c000b41e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b422:	50                   	push   eax
c000b423:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b427:	50                   	push   eax
c000b428:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b42c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b430:	e8 0b 51 00 00       	call   c0010540 <tcp_rst>
c000b435:	83 c4 20             	add    esp,0x20
c000b438:	90                   	nop
c000b439:	83 c4 2c             	add    esp,0x2c
c000b43c:	c3                   	ret    
c000b43d:	8d 76 00             	lea    esi,[esi+0x0]

c000b440 <tcp_abort>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	83 ec 08             	sub    esp,0x8
c000b446:	6a 01                	push   0x1
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	e8 5b fe ff ff       	call   c000b2ac <tcp_abandon>
c000b451:	83 c4 10             	add    esp,0x10
c000b454:	90                   	nop
c000b455:	83 c4 0c             	add    esp,0xc
c000b458:	c3                   	ret    
c000b459:	8d 76 00             	lea    esi,[esi+0x0]

c000b45c <tcp_kill_prio>:
c000b45c:	83 ec 2c             	sub    esp,0x2c
c000b45f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b463:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b467:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b46c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b474:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b47c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b481:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b485:	eb 75                	jmp    c000b4fc <tcp_kill_prio+0xa0>
c000b487:	90                   	nop
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b48f:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b494:	0f b6 c0             	movzx  eax,al
c000b497:	39 c2                	cmp    edx,eax
c000b499:	72 55                	jb     c000b4f0 <tcp_kill_prio+0x94>
c000b49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49f:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4a2:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b4a7:	0f b6 c0             	movzx  eax,al
c000b4aa:	39 c2                	cmp    edx,eax
c000b4ac:	72 42                	jb     c000b4f0 <tcp_kill_prio+0x94>
c000b4ae:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4bb:	29 c2                	sub    edx,eax
c000b4bd:	89 d0                	mov    eax,edx
c000b4bf:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b4c3:	77 2b                	ja     c000b4f0 <tcp_kill_prio+0x94>
c000b4c5:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4cf:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4d2:	29 c2                	sub    edx,eax
c000b4d4:	89 d0                	mov    eax,edx
c000b4d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e6:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4e9:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4fb:	90                   	nop
c000b4fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b501:	75 85                	jne    c000b488 <tcp_kill_prio+0x2c>
c000b503:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b508:	74 12                	je     c000b51c <tcp_kill_prio+0xc0>
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b511:	e8 2a ff ff ff       	call   c000b440 <tcp_abort>
c000b516:	83 c4 10             	add    esp,0x10
c000b519:	8d 76 00             	lea    esi,[esi+0x0]
c000b51c:	90                   	nop
c000b51d:	83 c4 2c             	add    esp,0x2c
c000b520:	c3                   	ret    
c000b521:	8d 76 00             	lea    esi,[esi+0x0]

c000b524 <tcp_kill_timewait>:
c000b524:	83 ec 1c             	sub    esp,0x1c
c000b527:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b52f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b537:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b53c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b540:	eb 42                	jmp    c000b584 <tcp_kill_timewait+0x60>
c000b542:	66 90                	xchg   ax,ax
c000b544:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b54a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b54e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b551:	29 c2                	sub    edx,eax
c000b553:	89 d0                	mov    eax,edx
c000b555:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b559:	77 1d                	ja     c000b578 <tcp_kill_timewait+0x54>
c000b55b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b565:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b568:	29 c2                	sub    edx,eax
c000b56a:	89 d0                	mov    eax,edx
c000b56c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b574:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b57c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b57f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b583:	90                   	nop
c000b584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b589:	75 b9                	jne    c000b544 <tcp_kill_timewait+0x20>
c000b58b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b590:	74 12                	je     c000b5a4 <tcp_kill_timewait+0x80>
c000b592:	83 ec 0c             	sub    esp,0xc
c000b595:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b599:	e8 a2 fe ff ff       	call   c000b440 <tcp_abort>
c000b59e:	83 c4 10             	add    esp,0x10
c000b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a4:	90                   	nop
c000b5a5:	83 c4 1c             	add    esp,0x1c
c000b5a8:	c3                   	ret    
c000b5a9:	8d 76 00             	lea    esi,[esi+0x0]

c000b5ac <tcp_next_iss>:
c000b5ac:	8b 15 1c 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033f1c
c000b5b2:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b5b7:	01 d0                	add    eax,edx
c000b5b9:	a3 1c 3f 03 c0       	mov    ds:0xc0033f1c,eax
c000b5be:	a1 1c 3f 03 c0       	mov    eax,ds:0xc0033f1c
c000b5c3:	c3                   	ret    

c000b5c4 <tcp_alloc>:
c000b5c4:	83 ec 2c             	sub    esp,0x2c
c000b5c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5cf:	83 ec 0c             	sub    esp,0xc
c000b5d2:	6a 02                	push   0x2
c000b5d4:	e8 4f c5 ff ff       	call   c0007b28 <memp_malloc>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5e5:	75 6d                	jne    c000b654 <tcp_alloc+0x90>
c000b5e7:	e8 38 ff ff ff       	call   c000b524 <tcp_kill_timewait>
c000b5ec:	83 ec 0c             	sub    esp,0xc
c000b5ef:	6a 02                	push   0x2
c000b5f1:	e8 32 c5 ff ff       	call   c0007b28 <memp_malloc>
c000b5f6:	83 c4 10             	add    esp,0x10
c000b5f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b602:	75 38                	jne    c000b63c <tcp_alloc+0x78>
c000b604:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b609:	83 ec 0c             	sub    esp,0xc
c000b60c:	50                   	push   eax
c000b60d:	e8 4a fe ff ff       	call   c000b45c <tcp_kill_prio>
c000b612:	83 c4 10             	add    esp,0x10
c000b615:	83 ec 0c             	sub    esp,0xc
c000b618:	6a 02                	push   0x2
c000b61a:	e8 09 c5 ff ff       	call   c0007b28 <memp_malloc>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b626:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62b:	74 0f                	je     c000b63c <tcp_alloc+0x78>
c000b62d:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b633:	83 e8 01             	sub    eax,0x1
c000b636:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b63c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b641:	74 11                	je     c000b654 <tcp_alloc+0x90>
c000b643:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b649:	83 e8 01             	sub    eax,0x1
c000b64c:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b652:	66 90                	xchg   ax,ax
c000b654:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b659:	0f 84 09 01 00 00    	je     c000b768 <tcp_alloc+0x1a4>
c000b65f:	83 ec 04             	sub    esp,0x4
c000b662:	68 a8 00 00 00       	push   0xa8
c000b667:	6a 00                	push   0x0
c000b669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b66d:	e8 7e 4e ff ff       	call   c00004f0 <memset>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b679:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b67d:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b684:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b68a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b68e:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b694:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b698:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b69e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a2:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b6a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ac:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b6b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b4:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b6b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6bc:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c6:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d0:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6da:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e4:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ee:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6f4:	e8 b3 fe ff ff       	call   c000b5ac <tcp_next_iss>
c000b6f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b701:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b705:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b710:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b713:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b71b:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b71e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b726:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b729:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b72f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b733:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b73a:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b73e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b742:	c7 80 8c 00 00 00 48 b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b048
c000b74c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b750:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b75a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b75e:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b765:	8d 76 00             	lea    esi,[esi+0x0]
c000b768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b76c:	83 c4 2c             	add    esp,0x2c
c000b76f:	c3                   	ret    

c000b770 <tcp_new>:
c000b770:	83 ec 0c             	sub    esp,0xc
c000b773:	83 ec 0c             	sub    esp,0xc
c000b776:	6a 40                	push   0x40
c000b778:	e8 47 fe ff ff       	call   c000b5c4 <tcp_alloc>
c000b77d:	83 c4 10             	add    esp,0x10
c000b780:	83 c4 0c             	add    esp,0xc
c000b783:	c3                   	ret    

c000b784 <tcp_eff_send_mss>:
c000b784:	53                   	push   ebx
c000b785:	83 ec 28             	sub    esp,0x28
c000b788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b78c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b791:	83 ec 0c             	sub    esp,0xc
c000b794:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b798:	e8 bf 80 00 00       	call   c001385c <ip_route>
c000b79d:	83 c4 10             	add    esp,0x10
c000b7a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b7a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b7a9:	74 3d                	je     c000b7e8 <tcp_eff_send_mss+0x64>
c000b7ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7b2:	0f b7 c0             	movzx  eax,ax
c000b7b5:	85 c0                	test   eax,eax
c000b7b7:	74 2f                	je     c000b7e8 <tcp_eff_send_mss+0x64>
c000b7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7c0:	83 e8 28             	sub    eax,0x28
c000b7c3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b7c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7cc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7d1:	0f b7 d8             	movzx  ebx,ax
c000b7d4:	0f b7 ca             	movzx  ecx,dx
c000b7d7:	39 cb                	cmp    ebx,ecx
c000b7d9:	76 05                	jbe    c000b7e0 <tcp_eff_send_mss+0x5c>
c000b7db:	89 d0                	mov    eax,edx
c000b7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e0:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7ec:	83 c4 28             	add    esp,0x28
c000b7ef:	5b                   	pop    ebx
c000b7f0:	c3                   	ret    
c000b7f1:	8d 76 00             	lea    esi,[esi+0x0]

c000b7f4 <tcp_connect>:
c000b7f4:	83 ec 2c             	sub    esp,0x2c
c000b7f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7fb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b800:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b807:	85 c0                	test   eax,eax
c000b809:	74 1d                	je     c000b828 <tcp_connect+0x34>
c000b80b:	83 ec 08             	sub    esp,0x8
c000b80e:	68 c4 05 03 c0       	push   0xc00305c4
c000b813:	68 26 fe 02 c0       	push   0xc002fe26
c000b818:	e8 e3 45 01 00       	call   c001fe00 <CPrintf>
c000b81d:	83 c4 10             	add    esp,0x10
c000b820:	b0 f7                	mov    al,0xf7
c000b822:	e9 41 02 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b827:	90                   	nop
c000b828:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b82d:	74 25                	je     c000b854 <tcp_connect+0x60>
c000b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b833:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b837:	8b 12                	mov    edx,DWORD PTR [edx]
c000b839:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b844:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b848:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b84c:	85 c0                	test   eax,eax
c000b84e:	74 18                	je     c000b868 <tcp_connect+0x74>
c000b850:	eb 0a                	jmp    c000b85c <tcp_connect+0x68>
c000b852:	66 90                	xchg   ax,ax
c000b854:	b0 fa                	mov    al,0xfa
c000b856:	e9 0d 02 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b85b:	90                   	nop
c000b85c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b860:	8b 00                	mov    eax,DWORD PTR [eax]
c000b862:	85 c0                	test   eax,eax
c000b864:	75 3a                	jne    c000b8a0 <tcp_connect+0xac>
c000b866:	66 90                	xchg   ax,ax
c000b868:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86c:	83 c0 04             	add    eax,0x4
c000b86f:	83 ec 0c             	sub    esp,0xc
c000b872:	50                   	push   eax
c000b873:	e8 e4 7f 00 00       	call   c001385c <ip_route>
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b87f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b884:	75 0a                	jne    c000b890 <tcp_connect+0x9c>
c000b886:	b0 fc                	mov    al,0xfc
c000b888:	e9 db 01 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b88d:	8d 76 00             	lea    esi,[esi+0x0]
c000b890:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b894:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b89b:	89 10                	mov    DWORD PTR [eax],edx
c000b89d:	8d 76 00             	lea    esi,[esi+0x0]
c000b8a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b8a7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b8ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b8b3:	0f b7 c0             	movzx  eax,ax
c000b8b6:	85 c0                	test   eax,eax
c000b8b8:	75 12                	jne    c000b8cc <tcp_connect+0xd8>
c000b8ba:	e8 21 e7 ff ff       	call   c0009fe0 <tcp_new_port>
c000b8bf:	89 c2                	mov    edx,eax
c000b8c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c5:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b8c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b8cc:	e8 db fc ff ff       	call   c000b5ac <tcp_next_iss>
c000b8d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8e8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8ef:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8fd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b904:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b907:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b90b:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b915:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b91b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b91f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b926:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b92d:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b937:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b93d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b941:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b944:	0f b7 c0             	movzx  eax,ax
c000b947:	83 ec 08             	sub    esp,0x8
c000b94a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b94e:	50                   	push   eax
c000b94f:	e8 30 fe ff ff       	call   c000b784 <tcp_eff_send_mss>
c000b954:	83 c4 10             	add    esp,0x10
c000b957:	89 c2                	mov    edx,eax
c000b959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b95d:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b965:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b96b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b96f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b972:	89 c2                	mov    edx,eax
c000b974:	c1 e2 02             	shl    edx,0x2
c000b977:	01 d0                	add    eax,edx
c000b979:	d1 e0                	shl    eax,1
c000b97b:	89 c2                	mov    edx,eax
c000b97d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b981:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b989:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b98d:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b993:	83 ec 08             	sub    esp,0x8
c000b996:	6a 02                	push   0x2
c000b998:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b99c:	e8 73 40 00 00       	call   c000fa14 <tcp_enqueue_flags>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b9a8:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b9ad:	85 c0                	test   eax,eax
c000b9af:	0f 85 af 00 00 00    	jne    c000ba64 <tcp_connect+0x270>
c000b9b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9b9:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b9c0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b9c5:	85 c0                	test   eax,eax
c000b9c7:	74 6f                	je     c000ba38 <tcp_connect+0x244>
c000b9c9:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9ce:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9d2:	75 10                	jne    c000b9e4 <tcp_connect+0x1f0>
c000b9d4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9dc:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b9e1:	eb 49                	jmp    c000ba2c <tcp_connect+0x238>
c000b9e3:	90                   	nop
c000b9e4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9e9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9ee:	eb 30                	jmp    c000ba20 <tcp_connect+0x22c>
c000b9f0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9f8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9fc:	75 12                	jne    c000ba10 <tcp_connect+0x21c>
c000b9fe:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ba03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ba07:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ba0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba0d:	eb 1d                	jmp    c000ba2c <tcp_connect+0x238>
c000ba0f:	90                   	nop
c000ba10:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ba15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba18:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ba1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ba20:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ba25:	85 c0                	test   eax,eax
c000ba27:	75 c7                	jne    c000b9f0 <tcp_connect+0x1fc>
c000ba29:	8d 76 00             	lea    esi,[esi+0x0]
c000ba2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba30:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba37:	90                   	nop
c000ba38:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000ba3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba49:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ba4e:	e8 09 53 00 00       	call   c0010d5c <tcp_timer_needed>
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba5a:	e8 55 46 00 00       	call   c00100b4 <tcp_output>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	66 90                	xchg   ax,ax
c000ba64:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba68:	83 c4 2c             	add    esp,0x2c
c000ba6b:	c3                   	ret    

c000ba6c <tcp_debug_state_str>:
c000ba6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba70:	8b 04 85 40 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf8c0]
c000ba77:	c3                   	ret    

c000ba78 <tcp_timewait_input>:
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 08             	sub    esp,0x8
c000ba7c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba81:	0f b6 c0             	movzx  eax,al
c000ba84:	83 e0 04             	and    eax,0x4
c000ba87:	74 07                	je     c000ba90 <tcp_timewait_input+0x18>
c000ba89:	b0 00                	mov    al,0x0
c000ba8b:	e9 e8 00 00 00       	jmp    c000bb78 <tcp_timewait_input+0x100>
c000ba90:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba95:	0f b6 c0             	movzx  eax,al
c000ba98:	83 e0 02             	and    eax,0x2
c000ba9b:	0f 84 83 00 00 00    	je     c000bb24 <tcp_timewait_input+0xac>
c000baa1:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000baa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000baae:	29 c2                	sub    edx,eax
c000bab0:	89 d0                	mov    eax,edx
c000bab2:	0f 88 88 00 00 00    	js     c000bb40 <tcp_timewait_input+0xc8>
c000bab8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000babe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bac2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000bac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bac9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000bacc:	0f b7 c0             	movzx  eax,ax
c000bacf:	01 c8                	add    eax,ecx
c000bad1:	29 c2                	sub    edx,eax
c000bad3:	89 d0                	mov    eax,edx
c000bad5:	85 c0                	test   eax,eax
c000bad7:	7f 67                	jg     c000bb40 <tcp_timewait_input+0xc8>
c000bad9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bade:	66 8b 00             	mov    ax,WORD PTR [eax]
c000bae1:	0f b7 c8             	movzx  ecx,ax
c000bae4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bae9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000baed:	0f b7 d0             	movzx  edx,ax
c000baf0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000baf6:	0f b7 d8             	movzx  ebx,ax
c000baf9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bafe:	01 c3                	add    ebx,eax
c000bb00:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb05:	83 ec 08             	sub    esp,0x8
c000bb08:	51                   	push   ecx
c000bb09:	52                   	push   edx
c000bb0a:	68 90 68 03 c0       	push   0xc0036890
c000bb0f:	68 98 68 03 c0       	push   0xc0036898
c000bb14:	53                   	push   ebx
c000bb15:	50                   	push   eax
c000bb16:	e8 25 4a 00 00       	call   c0010540 <tcp_rst>
c000bb1b:	83 c4 20             	add    esp,0x20
c000bb1e:	b0 00                	mov    al,0x0
c000bb20:	eb 56                	jmp    c000bb78 <tcp_timewait_input+0x100>
c000bb22:	66 90                	xchg   ax,ax
c000bb24:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bb29:	0f b6 c0             	movzx  eax,al
c000bb2c:	83 e0 01             	and    eax,0x1
c000bb2f:	74 0f                	je     c000bb40 <tcp_timewait_input+0xc8>
c000bb31:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000bb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb3b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb3e:	66 90                	xchg   ax,ax
c000bb40:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb46:	0f b7 c0             	movzx  eax,ax
c000bb49:	85 c0                	test   eax,eax
c000bb4b:	74 27                	je     c000bb74 <tcp_timewait_input+0xfc>
c000bb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb54:	83 c8 02             	or     eax,0x2
c000bb57:	88 c2                	mov    dl,al
c000bb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb60:	83 ec 0c             	sub    esp,0xc
c000bb63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb67:	e8 48 45 00 00       	call   c00100b4 <tcp_output>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	eb 07                	jmp    c000bb78 <tcp_timewait_input+0x100>
c000bb71:	8d 76 00             	lea    esi,[esi+0x0]
c000bb74:	b0 00                	mov    al,0x0
c000bb76:	66 90                	xchg   ax,ax
c000bb78:	83 c4 08             	add    esp,0x8
c000bb7b:	5b                   	pop    ebx
c000bb7c:	c3                   	ret    
c000bb7d:	8d 76 00             	lea    esi,[esi+0x0]

c000bb80 <tcp_oos_insert_segment>:
c000bb80:	53                   	push   ebx
c000bb81:	83 ec 18             	sub    esp,0x18
c000bb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb8b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb8f:	0f b7 c0             	movzx  eax,ax
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	50                   	push   eax
c000bb96:	e8 81 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bb9b:	83 c4 10             	add    esp,0x10
c000bb9e:	0f b7 c0             	movzx  eax,ax
c000bba1:	83 e0 01             	and    eax,0x1
c000bba4:	0f 84 8e 00 00 00    	je     c000bc38 <tcp_oos_insert_segment+0xb8>
c000bbaa:	83 ec 0c             	sub    esp,0xc
c000bbad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bbb1:	e8 2e e6 ff ff       	call   c000a1e4 <tcp_segs_free>
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bbc1:	e9 1a 01 00 00       	jmp    c000bce0 <tcp_oos_insert_segment+0x160>
c000bbc6:	66 90                	xchg   ax,ax
c000bbc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbcf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bbd3:	0f b7 c0             	movzx  eax,ax
c000bbd6:	83 ec 0c             	sub    esp,0xc
c000bbd9:	50                   	push   eax
c000bbda:	e8 3d 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bbdf:	83 c4 10             	add    esp,0x10
c000bbe2:	0f b7 c0             	movzx  eax,ax
c000bbe5:	83 e0 01             	and    eax,0x1
c000bbe8:	74 2a                	je     c000bc14 <tcp_oos_insert_segment+0x94>
c000bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbf1:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbf5:	83 ec 0c             	sub    esp,0xc
c000bbf8:	6a 01                	push   0x1
c000bbfa:	e8 1d 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bbff:	83 c4 10             	add    esp,0x10
c000bc02:	89 c2                	mov    edx,eax
c000bc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc0b:	09 da                	or     edx,ebx
c000bc0d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000bc11:	8d 76 00             	lea    esi,[esi+0x0]
c000bc14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bc26:	83 ec 0c             	sub    esp,0xc
c000bc29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc2d:	e8 6e e5 ff ff       	call   c000a1a0 <tcp_seg_free>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	8d 76 00             	lea    esi,[esi+0x0]
c000bc38:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc3d:	74 35                	je     c000bc74 <tcp_oos_insert_segment+0xf4>
c000bc3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc46:	0f b7 d0             	movzx  edx,ax
c000bc49:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc4e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc58:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc62:	0f b7 c0             	movzx  eax,ax
c000bc65:	01 d0                	add    eax,edx
c000bc67:	29 c1                	sub    ecx,eax
c000bc69:	89 c8                	mov    eax,ecx
c000bc6b:	0f 89 57 ff ff ff    	jns    c000bbc8 <tcp_oos_insert_segment+0x48>
c000bc71:	8d 76 00             	lea    esi,[esi+0x0]
c000bc74:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc79:	74 65                	je     c000bce0 <tcp_oos_insert_segment+0x160>
c000bc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc82:	0f b7 d0             	movzx  edx,ax
c000bc85:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc8a:	01 c2                	add    edx,eax
c000bc8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc96:	29 c2                	sub    edx,eax
c000bc98:	89 d0                	mov    eax,edx
c000bc9a:	85 c0                	test   eax,eax
c000bc9c:	7e 42                	jle    c000bce0 <tcp_oos_insert_segment+0x160>
c000bc9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bca2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bca5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bca8:	89 c2                	mov    edx,eax
c000bcaa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bcaf:	89 d3                	mov    ebx,edx
c000bcb1:	29 c3                	sub    ebx,eax
c000bcb3:	89 d8                	mov    eax,ebx
c000bcb5:	89 c2                	mov    edx,eax
c000bcb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbb:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000bcbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bcc6:	0f b7 d0             	movzx  edx,ax
c000bcc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bccd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bcd0:	83 ec 08             	sub    esp,0x8
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	e8 0e ce ff ff       	call   c0008ae8 <pbuf_realloc>
c000bcda:	83 c4 10             	add    esp,0x10
c000bcdd:	8d 76 00             	lea    esi,[esi+0x0]
c000bce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bce4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bce8:	89 10                	mov    DWORD PTR [eax],edx
c000bcea:	90                   	nop
c000bceb:	83 c4 18             	add    esp,0x18
c000bcee:	5b                   	pop    ebx
c000bcef:	c3                   	ret    

c000bcf0 <tcp_receive>:
c000bcf0:	57                   	push   edi
c000bcf1:	56                   	push   esi
c000bcf2:	53                   	push   ebx
c000bcf3:	83 ec 30             	sub    esp,0x30
c000bcf6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcfe:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bd03:	0f b6 c0             	movzx  eax,al
c000bd06:	83 e0 10             	and    eax,0x10
c000bd09:	0f 84 f5 07 00 00    	je     c000c504 <tcp_receive+0x814>
c000bd0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd13:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd16:	0f b7 d0             	movzx  edx,ax
c000bd19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1d:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bd20:	01 d0                	add    eax,edx
c000bd22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd2a:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd2d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bd32:	29 c2                	sub    edx,eax
c000bd34:	89 d0                	mov    eax,edx
c000bd36:	78 50                	js     c000bd88 <tcp_receive+0x98>
c000bd38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd3c:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd3f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bd44:	39 c2                	cmp    edx,eax
c000bd46:	75 14                	jne    c000bd5c <tcp_receive+0x6c>
c000bd48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd4f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd54:	29 c2                	sub    edx,eax
c000bd56:	89 d0                	mov    eax,edx
c000bd58:	78 2e                	js     c000bd88 <tcp_receive+0x98>
c000bd5a:	66 90                	xchg   ax,ax
c000bd5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd60:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd63:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd68:	39 c2                	cmp    edx,eax
c000bd6a:	75 74                	jne    c000bde0 <tcp_receive+0xf0>
c000bd6c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd71:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd79:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd7c:	0f b7 d2             	movzx  edx,dx
c000bd7f:	0f b7 c0             	movzx  eax,ax
c000bd82:	39 c2                	cmp    edx,eax
c000bd84:	76 5a                	jbe    c000bde0 <tcp_receive+0xf0>
c000bd86:	66 90                	xchg   ax,ax
c000bd88:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd8d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd95:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bd99:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bd9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda3:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bda6:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb0:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bdb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdba:	0f b7 c0             	movzx  eax,ax
c000bdbd:	85 c0                	test   eax,eax
c000bdbf:	74 1f                	je     c000bde0 <tcp_receive+0xf0>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bdcb:	0f b6 c0             	movzx  eax,al
c000bdce:	85 c0                	test   eax,eax
c000bdd0:	74 0e                	je     c000bde0 <tcp_receive+0xf0>
c000bdd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd6:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bddd:	8d 76 00             	lea    esi,[esi+0x0]
c000bde0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bde6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdea:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bded:	29 c2                	sub    edx,eax
c000bdef:	89 d0                	mov    eax,edx
c000bdf1:	85 c0                	test   eax,eax
c000bdf3:	0f 8f 03 01 00 00    	jg     c000befc <tcp_receive+0x20c>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000be03:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000be09:	0f b7 c0             	movzx  eax,ax
c000be0c:	85 c0                	test   eax,eax
c000be0e:	0f 85 d0 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be18:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000be1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be1f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000be22:	0f b7 c0             	movzx  eax,ax
c000be25:	01 d0                	add    eax,edx
c000be27:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000be2b:	0f 85 b3 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be35:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be39:	98                   	cwde   
c000be3a:	85 c0                	test   eax,eax
c000be3c:	0f 88 a2 00 00 00    	js     c000bee4 <tcp_receive+0x1f4>
c000be42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be46:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be49:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000be4e:	39 c2                	cmp    edx,eax
c000be50:	0f 85 8e 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be56:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be62:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be65:	83 c0 01             	add    eax,0x1
c000be68:	88 c2                	mov    dl,al
c000be6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be6e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be75:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be78:	0f b6 c0             	movzx  eax,al
c000be7b:	83 f8 03             	cmp    eax,0x3
c000be7e:	76 44                	jbe    c000bec4 <tcp_receive+0x1d4>
c000be80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be84:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be8f:	01 d0                	add    eax,edx
c000be91:	89 c2                	mov    edx,eax
c000be93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be97:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be9b:	0f b7 d2             	movzx  edx,dx
c000be9e:	0f b7 c0             	movzx  eax,ax
c000bea1:	39 c2                	cmp    edx,eax
c000bea3:	76 3f                	jbe    c000bee4 <tcp_receive+0x1f4>
c000bea5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bead:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000beb4:	01 d0                	add    eax,edx
c000beb6:	89 c2                	mov    edx,eax
c000beb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bebc:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bec0:	eb 22                	jmp    c000bee4 <tcp_receive+0x1f4>
c000bec2:	66 90                	xchg   ax,ax
c000bec4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bec8:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000becb:	0f b6 c0             	movzx  eax,al
c000bece:	83 f8 03             	cmp    eax,0x3
c000bed1:	75 11                	jne    c000bee4 <tcp_receive+0x1f4>
c000bed3:	83 ec 0c             	sub    esp,0xc
c000bed6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000beda:	e8 35 49 00 00       	call   c0010814 <tcp_rexmit_fast>
c000bedf:	83 c4 10             	add    esp,0x10
c000bee2:	66 90                	xchg   ax,ax
c000bee4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bee9:	0f 85 a1 04 00 00    	jne    c000c390 <tcp_receive+0x6a0>
c000beef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef3:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bef7:	e9 94 04 00 00       	jmp    c000c390 <tcp_receive+0x6a0>
c000befc:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf09:	29 c2                	sub    edx,eax
c000bf0b:	89 d0                	mov    eax,edx
c000bf0d:	83 e8 01             	sub    eax,0x1
c000bf10:	0f 88 52 03 00 00    	js     c000c268 <tcp_receive+0x578>
c000bf16:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bf1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf20:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bf23:	29 c2                	sub    edx,eax
c000bf25:	89 d0                	mov    eax,edx
c000bf27:	85 c0                	test   eax,eax
c000bf29:	0f 8f 39 03 00 00    	jg     c000c268 <tcp_receive+0x578>
c000bf2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf33:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf36:	0f b6 c0             	movzx  eax,al
c000bf39:	83 e0 04             	and    eax,0x4
c000bf3c:	74 22                	je     c000bf60 <tcp_receive+0x270>
c000bf3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf42:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf45:	83 e0 fb             	and    eax,0xfffffffb
c000bf48:	88 c2                	mov    dl,al
c000bf4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf4e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf55:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bf58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf5c:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bf60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf64:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6c:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf6f:	98                   	cwde   
c000bf70:	c1 f8 03             	sar    eax,0x3
c000bf73:	89 c2                	mov    edx,eax
c000bf75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf79:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf7d:	01 d0                	add    eax,edx
c000bf7f:	89 c2                	mov    edx,eax
c000bf81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf85:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bf89:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf8e:	89 c2                	mov    edx,eax
c000bf90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf94:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf97:	89 d7                	mov    edi,edx
c000bf99:	29 c7                	sub    edi,eax
c000bf9b:	89 f8                	mov    eax,edi
c000bf9d:	89 c2                	mov    edx,eax
c000bf9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa3:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bfa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfab:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bfaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb3:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bfb6:	01 d0                	add    eax,edx
c000bfb8:	89 c2                	mov    edx,eax
c000bfba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbe:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000bfc2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc6:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bfca:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bfd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd4:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bfd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bfde:	83 f8 03             	cmp    eax,0x3
c000bfe1:	0f 86 dd 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bff6:	0f b7 d2             	movzx  edx,dx
c000bff9:	0f b7 c0             	movzx  eax,ax
c000bffc:	39 c2                	cmp    edx,eax
c000bffe:	73 4c                	jae    c000c04c <tcp_receive+0x35c>
c000c000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c004:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c00f:	01 d0                	add    eax,edx
c000c011:	89 c2                	mov    edx,eax
c000c013:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c017:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c01b:	0f b7 d2             	movzx  edx,dx
c000c01e:	0f b7 c0             	movzx  eax,ax
c000c021:	39 c2                	cmp    edx,eax
c000c023:	0f 86 9b 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000c029:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000c031:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c035:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c038:	01 d0                	add    eax,edx
c000c03a:	89 c2                	mov    edx,eax
c000c03c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c040:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000c044:	e9 7b 01 00 00       	jmp    c000c1c4 <tcp_receive+0x4d4>
c000c049:	8d 76 00             	lea    esi,[esi+0x0]
c000c04c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c050:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c054:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c058:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c05b:	0f b7 d0             	movzx  edx,ax
c000c05e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c062:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c065:	0f b7 c0             	movzx  eax,ax
c000c068:	0f af c2             	imul   eax,edx
c000c06b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c06f:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000c073:	0f b7 f2             	movzx  esi,dx
c000c076:	89 c2                	mov    edx,eax
c000c078:	c1 fa 1f             	sar    edx,0x1f
c000c07b:	f7 fe                	idiv   esi
c000c07d:	01 c8                	add    eax,ecx
c000c07f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c084:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c088:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c08c:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c091:	0f b7 c0             	movzx  eax,ax
c000c094:	39 c2                	cmp    edx,eax
c000c096:	0f 86 28 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000c09c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0a0:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000c0a5:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000c0a9:	e9 16 01 00 00       	jmp    c000c1c4 <tcp_receive+0x4d4>
c000c0ae:	66 90                	xchg   ax,ax
c000c0b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bf:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c0cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0cf:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0d9:	83 ec 0c             	sub    esp,0xc
c000c0dc:	50                   	push   eax
c000c0dd:	e8 0e cc ff ff       	call   c0008cf0 <pbuf_clen>
c000c0e2:	83 c4 10             	add    esp,0x10
c000c0e5:	0f b6 c0             	movzx  eax,al
c000c0e8:	0f b7 d3             	movzx  edx,bx
c000c0eb:	0f b7 c0             	movzx  eax,ax
c000c0ee:	39 c2                	cmp    edx,eax
c000c0f0:	73 16                	jae    c000c108 <tcp_receive+0x418>
c000c0f2:	83 ec 08             	sub    esp,0x8
c000c0f5:	68 6c 07 03 c0       	push   0xc003076c
c000c0fa:	68 26 fe 02 c0       	push   0xc002fe26
c000c0ff:	e8 fc 3c 01 00       	call   c001fe00 <CPrintf>
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	90                   	nop
c000c108:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c10c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c10f:	0f b7 c0             	movzx  eax,ax
c000c112:	85 c0                	test   eax,eax
c000c114:	74 36                	je     c000c14c <tcp_receive+0x45c>
c000c116:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c11a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c11d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c121:	0f b7 c0             	movzx  eax,ax
c000c124:	83 ec 0c             	sub    esp,0xc
c000c127:	50                   	push   eax
c000c128:	e8 ef 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c12d:	83 c4 10             	add    esp,0x10
c000c130:	0f b7 c0             	movzx  eax,ax
c000c133:	83 e0 01             	and    eax,0x1
c000c136:	74 14                	je     c000c14c <tcp_receive+0x45c>
c000c138:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c13c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c13f:	83 e8 01             	sub    eax,0x1
c000c142:	89 c2                	mov    edx,eax
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c14c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c153:	83 ec 0c             	sub    esp,0xc
c000c156:	50                   	push   eax
c000c157:	e8 94 cb ff ff       	call   c0008cf0 <pbuf_clen>
c000c15c:	83 c4 10             	add    esp,0x10
c000c15f:	88 c1                	mov    cl,al
c000c161:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c165:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c168:	0f b6 c1             	movzx  eax,cl
c000c16b:	89 d7                	mov    edi,edx
c000c16d:	29 c7                	sub    edi,eax
c000c16f:	89 f8                	mov    eax,edi
c000c171:	89 c2                	mov    edx,eax
c000c173:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c177:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c17b:	83 ec 0c             	sub    esp,0xc
c000c17e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c182:	e8 19 e0 ff ff       	call   c000a1a0 <tcp_seg_free>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18e:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c191:	0f b7 c0             	movzx  eax,ax
c000c194:	85 c0                	test   eax,eax
c000c196:	74 2c                	je     c000c1c4 <tcp_receive+0x4d4>
c000c198:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c19c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c19f:	85 c0                	test   eax,eax
c000c1a1:	75 21                	jne    c000c1c4 <tcp_receive+0x4d4>
c000c1a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1aa:	85 c0                	test   eax,eax
c000c1ac:	75 16                	jne    c000c1c4 <tcp_receive+0x4d4>
c000c1ae:	83 ec 08             	sub    esp,0x8
c000c1b1:	68 94 07 03 c0       	push   0xc0030794
c000c1b6:	68 26 fe 02 c0       	push   0xc002fe26
c000c1bb:	e8 40 3c 01 00       	call   c001fe00 <CPrintf>
c000c1c0:	83 c4 10             	add    esp,0x10
c000c1c3:	90                   	nop
c000c1c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1cb:	85 c0                	test   eax,eax
c000c1cd:	74 69                	je     c000c238 <tcp_receive+0x548>
c000c1cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1d3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	50                   	push   eax
c000c1e0:	e8 5b 4a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c1e5:	83 c4 10             	add    esp,0x10
c000c1e8:	89 c3                	mov    ebx,eax
c000c1ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1ee:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1f4:	0f b7 f0             	movzx  esi,ax
c000c1f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1fb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c201:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c205:	0f b7 c0             	movzx  eax,ax
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	50                   	push   eax
c000c20c:	e8 0b 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c211:	83 c4 10             	add    esp,0x10
c000c214:	0f b7 c0             	movzx  eax,ax
c000c217:	83 e0 03             	and    eax,0x3
c000c21a:	0f 95 c0             	setne  al
c000c21d:	0f b6 c0             	movzx  eax,al
c000c220:	01 f0                	add    eax,esi
c000c222:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c225:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c22a:	29 c2                	sub    edx,eax
c000c22c:	89 d0                	mov    eax,edx
c000c22e:	85 c0                	test   eax,eax
c000c230:	0f 8e 7a fe ff ff    	jle    c000c0b0 <tcp_receive+0x3c0>
c000c236:	66 90                	xchg   ax,ax
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c23f:	85 c0                	test   eax,eax
c000c241:	75 0d                	jne    c000c250 <tcp_receive+0x560>
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c24d:	eb 0d                	jmp    c000c25c <tcp_receive+0x56c>
c000c24f:	90                   	nop
c000c250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c254:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c25a:	66 90                	xchg   ax,ax
c000c25c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c260:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c264:	eb 0e                	jmp    c000c274 <tcp_receive+0x584>
c000c266:	66 90                	xchg   ax,ax
c000c268:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26c:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c272:	66 90                	xchg   ax,ax
c000c274:	e9 17 01 00 00       	jmp    c000c390 <tcp_receive+0x6a0>
c000c279:	8d 76 00             	lea    esi,[esi+0x0]
c000c27c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c280:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c283:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c287:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c28e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2a5:	83 ec 0c             	sub    esp,0xc
c000c2a8:	50                   	push   eax
c000c2a9:	e8 42 ca ff ff       	call   c0008cf0 <pbuf_clen>
c000c2ae:	83 c4 10             	add    esp,0x10
c000c2b1:	0f b6 c0             	movzx  eax,al
c000c2b4:	0f b7 d3             	movzx  edx,bx
c000c2b7:	0f b7 c0             	movzx  eax,ax
c000c2ba:	39 c2                	cmp    edx,eax
c000c2bc:	73 16                	jae    c000c2d4 <tcp_receive+0x5e4>
c000c2be:	83 ec 08             	sub    esp,0x8
c000c2c1:	68 6c 07 03 c0       	push   0xc003076c
c000c2c6:	68 26 fe 02 c0       	push   0xc002fe26
c000c2cb:	e8 30 3b 01 00       	call   c001fe00 <CPrintf>
c000c2d0:	83 c4 10             	add    esp,0x10
c000c2d3:	90                   	nop
c000c2d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2d8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2db:	0f b7 c0             	movzx  eax,ax
c000c2de:	85 c0                	test   eax,eax
c000c2e0:	74 36                	je     c000c318 <tcp_receive+0x628>
c000c2e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2ed:	0f b7 c0             	movzx  eax,ax
c000c2f0:	83 ec 0c             	sub    esp,0xc
c000c2f3:	50                   	push   eax
c000c2f4:	e8 23 49 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c2f9:	83 c4 10             	add    esp,0x10
c000c2fc:	0f b7 c0             	movzx  eax,ax
c000c2ff:	83 e0 01             	and    eax,0x1
c000c302:	74 14                	je     c000c318 <tcp_receive+0x628>
c000c304:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c308:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c30b:	83 e8 01             	sub    eax,0x1
c000c30e:	89 c2                	mov    edx,eax
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c318:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c31c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c31f:	83 ec 0c             	sub    esp,0xc
c000c322:	50                   	push   eax
c000c323:	e8 c8 c9 ff ff       	call   c0008cf0 <pbuf_clen>
c000c328:	83 c4 10             	add    esp,0x10
c000c32b:	88 c1                	mov    cl,al
c000c32d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c331:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c334:	0f b6 c1             	movzx  eax,cl
c000c337:	89 d6                	mov    esi,edx
c000c339:	29 c6                	sub    esi,eax
c000c33b:	89 f0                	mov    eax,esi
c000c33d:	89 c2                	mov    edx,eax
c000c33f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c343:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c347:	83 ec 0c             	sub    esp,0xc
c000c34a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c34e:	e8 4d de ff ff       	call   c000a1a0 <tcp_seg_free>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c35a:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c35d:	0f b7 c0             	movzx  eax,ax
c000c360:	85 c0                	test   eax,eax
c000c362:	74 2c                	je     c000c390 <tcp_receive+0x6a0>
c000c364:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c368:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c36b:	85 c0                	test   eax,eax
c000c36d:	75 21                	jne    c000c390 <tcp_receive+0x6a0>
c000c36f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c373:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c376:	85 c0                	test   eax,eax
c000c378:	75 16                	jne    c000c390 <tcp_receive+0x6a0>
c000c37a:	83 ec 08             	sub    esp,0x8
c000c37d:	68 94 07 03 c0       	push   0xc0030794
c000c382:	68 26 fe 02 c0       	push   0xc002fe26
c000c387:	e8 74 3a 01 00       	call   c001fe00 <CPrintf>
c000c38c:	83 c4 10             	add    esp,0x10
c000c38f:	90                   	nop
c000c390:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c394:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c397:	85 c0                	test   eax,eax
c000c399:	74 7d                	je     c000c418 <tcp_receive+0x728>
c000c39b:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c3a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3a5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3ae:	83 ec 0c             	sub    esp,0xc
c000c3b1:	50                   	push   eax
c000c3b2:	e8 89 48 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 c6                	mov    esi,eax
c000c3bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3c6:	0f b7 f8             	movzx  edi,ax
c000c3c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3cd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3d3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c3d7:	0f b7 c0             	movzx  eax,ax
c000c3da:	83 ec 0c             	sub    esp,0xc
c000c3dd:	50                   	push   eax
c000c3de:	e8 39 48 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c3e3:	83 c4 10             	add    esp,0x10
c000c3e6:	0f b7 c0             	movzx  eax,ax
c000c3e9:	83 e0 03             	and    eax,0x3
c000c3ec:	0f 95 c0             	setne  al
c000c3ef:	0f b6 c0             	movzx  eax,al
c000c3f2:	01 f8                	add    eax,edi
c000c3f4:	01 f0                	add    eax,esi
c000c3f6:	29 c3                	sub    ebx,eax
c000c3f8:	89 d8                	mov    eax,ebx
c000c3fa:	78 1c                	js     c000c418 <tcp_receive+0x728>
c000c3fc:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c402:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c406:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c409:	29 c2                	sub    edx,eax
c000c40b:	89 d0                	mov    eax,edx
c000c40d:	85 c0                	test   eax,eax
c000c40f:	0f 8e 67 fe ff ff    	jle    c000c27c <tcp_receive+0x58c>
c000c415:	8d 76 00             	lea    esi,[esi+0x0]
c000c418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c41f:	85 c0                	test   eax,eax
c000c421:	0f 84 dd 00 00 00    	je     c000c504 <tcp_receive+0x814>
c000c427:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c42b:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c42e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c433:	29 c2                	sub    edx,eax
c000c435:	89 d0                	mov    eax,edx
c000c437:	0f 89 c7 00 00 00    	jns    c000c504 <tcp_receive+0x814>
c000c43d:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c442:	89 c2                	mov    edx,eax
c000c444:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c448:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c44b:	89 d7                	mov    edi,edx
c000c44d:	29 c7                	sub    edi,eax
c000c44f:	89 f8                	mov    eax,edi
c000c451:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c456:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c45b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c45f:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c462:	98                   	cwde   
c000c463:	c1 f8 03             	sar    eax,0x3
c000c466:	89 d6                	mov    esi,edx
c000c468:	29 c6                	sub    esi,eax
c000c46a:	89 f0                	mov    eax,esi
c000c46c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c475:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c478:	89 c2                	mov    edx,eax
c000c47a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c47f:	01 d0                	add    eax,edx
c000c481:	89 c2                	mov    edx,eax
c000c483:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c487:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c48b:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c490:	85 c0                	test   eax,eax
c000c492:	79 0c                	jns    c000c4a0 <tcp_receive+0x7b0>
c000c494:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c499:	f7 d8                	neg    eax
c000c49b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c4a0:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c4a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a9:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4ad:	98                   	cwde   
c000c4ae:	c1 f8 02             	sar    eax,0x2
c000c4b1:	89 d7                	mov    edi,edx
c000c4b3:	29 c7                	sub    edi,eax
c000c4b5:	89 f8                	mov    eax,edi
c000c4b7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c4bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4c0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4c4:	89 c2                	mov    edx,eax
c000c4c6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c4cb:	01 d0                	add    eax,edx
c000c4cd:	89 c2                	mov    edx,eax
c000c4cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d3:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c4d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4db:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c4de:	98                   	cwde   
c000c4df:	c1 f8 03             	sar    eax,0x3
c000c4e2:	89 c2                	mov    edx,eax
c000c4e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4e8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4ec:	01 d0                	add    eax,edx
c000c4ee:	89 c2                	mov    edx,eax
c000c4f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4f4:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c4f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fc:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c503:	90                   	nop
c000c504:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c50a:	0f b7 c0             	movzx  eax,ax
c000c50d:	85 c0                	test   eax,eax
c000c50f:	0f 84 43 0e 00 00    	je     c000d358 <tcp_receive+0x1668>
c000c515:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c519:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c51c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c521:	29 c2                	sub    edx,eax
c000c523:	89 d0                	mov    eax,edx
c000c525:	83 e8 01             	sub    eax,0x1
c000c528:	0f 88 c6 01 00 00    	js     c000c6f4 <tcp_receive+0xa04>
c000c52e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c532:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c535:	66 8b 15 aa a8 03 c0 	mov    dx,WORD PTR ds:0xc003a8aa
c000c53c:	0f b7 ca             	movzx  ecx,dx
c000c53f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c545:	01 ca                	add    edx,ecx
c000c547:	29 d0                	sub    eax,edx
c000c549:	83 c0 01             	add    eax,0x1
c000c54c:	85 c0                	test   eax,eax
c000c54e:	0f 8f a0 01 00 00    	jg     c000c6f4 <tcp_receive+0xa04>
c000c554:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c558:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c55b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c560:	29 c2                	sub    edx,eax
c000c562:	89 d0                	mov    eax,edx
c000c564:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c568:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c56d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c571:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c576:	85 c0                	test   eax,eax
c000c578:	75 16                	jne    c000c590 <tcp_receive+0x8a0>
c000c57a:	83 ec 08             	sub    esp,0x8
c000c57d:	68 91 09 03 c0       	push   0xc0030991
c000c582:	68 26 fe 02 c0       	push   0xc002fe26
c000c587:	e8 74 38 01 00       	call   c001fe00 <CPrintf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	90                   	nop
c000c590:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c598:	7e 16                	jle    c000c5b0 <tcp_receive+0x8c0>
c000c59a:	83 ec 08             	sub    esp,0x8
c000c59d:	68 a1 09 03 c0       	push   0xc00309a1
c000c5a2:	68 26 fe 02 c0       	push   0xc002fe26
c000c5a7:	e8 54 38 01 00       	call   c001fe00 <CPrintf>
c000c5ac:	83 c4 10             	add    esp,0x10
c000c5af:	90                   	nop
c000c5b0:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5b9:	0f b7 c0             	movzx  eax,ax
c000c5bc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5c0:	0f 8e b6 00 00 00    	jle    c000c67c <tcp_receive+0x98c>
c000c5c6:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ce:	0f b7 c0             	movzx  eax,ax
c000c5d1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5d5:	7e 15                	jle    c000c5ec <tcp_receive+0x8fc>
c000c5d7:	83 ec 08             	sub    esp,0x8
c000c5da:	68 b0 09 03 c0       	push   0xc00309b0
c000c5df:	68 26 fe 02 c0       	push   0xc002fe26
c000c5e4:	e8 17 38 01 00       	call   c001fe00 <CPrintf>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5f8:	29 d0                	sub    eax,edx
c000c5fa:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5ff:	eb 33                	jmp    c000c634 <tcp_receive+0x944>
c000c601:	8d 76 00             	lea    esi,[esi+0x0]
c000c604:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c608:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c60c:	0f b7 c0             	movzx  eax,ax
c000c60f:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c613:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c617:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c61b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c61f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c623:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c629:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c62d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c62f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c633:	90                   	nop
c000c634:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c638:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c63c:	0f b7 c0             	movzx  eax,ax
c000c63f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c643:	7f bf                	jg     c000c604 <tcp_receive+0x914>
c000c645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c649:	f7 d8                	neg    eax
c000c64b:	98                   	cwde   
c000c64c:	83 ec 08             	sub    esp,0x8
c000c64f:	50                   	push   eax
c000c650:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c654:	e8 1b bd ff ff       	call   c0008374 <pbuf_header>
c000c659:	83 c4 10             	add    esp,0x10
c000c65c:	0f b6 c0             	movzx  eax,al
c000c65f:	85 c0                	test   eax,eax
c000c661:	74 51                	je     c000c6b4 <tcp_receive+0x9c4>
c000c663:	83 ec 08             	sub    esp,0x8
c000c666:	68 c0 09 03 c0       	push   0xc00309c0
c000c66b:	68 26 fe 02 c0       	push   0xc002fe26
c000c670:	e8 8b 37 01 00       	call   c001fe00 <CPrintf>
c000c675:	83 c4 10             	add    esp,0x10
c000c678:	eb 3a                	jmp    c000c6b4 <tcp_receive+0x9c4>
c000c67a:	66 90                	xchg   ax,ax
c000c67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c680:	f7 d8                	neg    eax
c000c682:	0f bf d0             	movsx  edx,ax
c000c685:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c68a:	83 ec 08             	sub    esp,0x8
c000c68d:	52                   	push   edx
c000c68e:	50                   	push   eax
c000c68f:	e8 e0 bc ff ff       	call   c0008374 <pbuf_header>
c000c694:	83 c4 10             	add    esp,0x10
c000c697:	0f b6 c0             	movzx  eax,al
c000c69a:	85 c0                	test   eax,eax
c000c69c:	74 16                	je     c000c6b4 <tcp_receive+0x9c4>
c000c69e:	83 ec 08             	sub    esp,0x8
c000c6a1:	68 c0 09 03 c0       	push   0xc00309c0
c000c6a6:	68 26 fe 02 c0       	push   0xc002fe26
c000c6ab:	e8 50 37 01 00       	call   c001fe00 <CPrintf>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	90                   	nop
c000c6b4:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000c6ba:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c6bf:	89 c1                	mov    ecx,eax
c000c6c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6c8:	89 ce                	mov    esi,ecx
c000c6ca:	29 c6                	sub    esi,eax
c000c6cc:	89 f0                	mov    eax,esi
c000c6ce:	01 d0                	add    eax,edx
c000c6d0:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c6d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6da:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6dd:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c6e2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6e7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6f0:	eb 2a                	jmp    c000c71c <tcp_receive+0xa2c>
c000c6f2:	66 90                	xchg   ax,ax
c000c6f4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c701:	29 c2                	sub    edx,eax
c000c703:	89 d0                	mov    eax,edx
c000c705:	79 15                	jns    c000c71c <tcp_receive+0xa2c>
c000c707:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c70b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c70e:	83 c8 02             	or     eax,0x2
c000c711:	88 c2                	mov    dl,al
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c71a:	66 90                	xchg   ax,ax
c000c71c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c722:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c726:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c729:	29 c2                	sub    edx,eax
c000c72b:	89 d0                	mov    eax,edx
c000c72d:	0f 88 11 0c 00 00    	js     c000d344 <tcp_receive+0x1654>
c000c733:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c739:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c73d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c740:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c744:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c747:	0f b7 c0             	movzx  eax,ax
c000c74a:	01 c8                	add    eax,ecx
c000c74c:	29 c2                	sub    edx,eax
c000c74e:	89 d0                	mov    eax,edx
c000c750:	83 c0 01             	add    eax,0x1
c000c753:	85 c0                	test   eax,eax
c000c755:	0f 8f e9 0b 00 00    	jg     c000d344 <tcp_receive+0x1654>
c000c75b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c762:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c767:	39 c2                	cmp    edx,eax
c000c769:	0f 85 25 07 00 00    	jne    c000ce94 <tcp_receive+0x11a4>
c000c76f:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c775:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c77a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77e:	0f b7 c0             	movzx  eax,ax
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	50                   	push   eax
c000c785:	e8 92 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	0f b7 c0             	movzx  eax,ax
c000c790:	83 e0 03             	and    eax,0x3
c000c793:	0f 95 c0             	setne  al
c000c796:	0f b6 c0             	movzx  eax,al
c000c799:	01 d8                	add    eax,ebx
c000c79b:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c7a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7a5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c7a8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7ae:	0f b7 d2             	movzx  edx,dx
c000c7b1:	0f b7 c0             	movzx  eax,ax
c000c7b4:	39 c2                	cmp    edx,eax
c000c7b6:	0f 83 30 01 00 00    	jae    c000c8ec <tcp_receive+0xbfc>
c000c7bc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7c1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7c5:	0f b7 c0             	movzx  eax,ax
c000c7c8:	83 ec 0c             	sub    esp,0xc
c000c7cb:	50                   	push   eax
c000c7cc:	e8 4b 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	0f b7 c0             	movzx  eax,ax
c000c7d7:	83 e0 01             	and    eax,0x1
c000c7da:	74 48                	je     c000c824 <tcp_receive+0xb34>
c000c7dc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7e1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7e5:	80 e4 c0             	and    ah,0xc0
c000c7e8:	89 c3                	mov    ebx,eax
c000c7ea:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7ef:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7f3:	0f b7 c0             	movzx  eax,ax
c000c7f6:	83 ec 0c             	sub    esp,0xc
c000c7f9:	50                   	push   eax
c000c7fa:	e8 1d 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7ff:	83 c4 10             	add    esp,0x10
c000c802:	0f b7 c0             	movzx  eax,ax
c000c805:	83 e0 3e             	and    eax,0x3e
c000c808:	83 ec 0c             	sub    esp,0xc
c000c80b:	50                   	push   eax
c000c80c:	e8 0b 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c811:	83 c4 10             	add    esp,0x10
c000c814:	09 d8                	or     eax,ebx
c000c816:	89 c2                	mov    edx,eax
c000c818:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c81d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c821:	8d 76 00             	lea    esi,[esi+0x0]
c000c824:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c828:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c82b:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c831:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c836:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83a:	0f b7 c0             	movzx  eax,ax
c000c83d:	83 ec 0c             	sub    esp,0xc
c000c840:	50                   	push   eax
c000c841:	e8 d6 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c846:	83 c4 10             	add    esp,0x10
c000c849:	0f b7 c0             	movzx  eax,ax
c000c84c:	83 e0 02             	and    eax,0x2
c000c84f:	74 0f                	je     c000c860 <tcp_receive+0xb70>
c000c851:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c856:	83 e8 01             	sub    eax,0x1
c000c859:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c85f:	90                   	nop
c000c860:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c865:	0f b7 d0             	movzx  edx,ax
c000c868:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c86d:	83 ec 08             	sub    esp,0x8
c000c870:	52                   	push   edx
c000c871:	50                   	push   eax
c000c872:	e8 71 c2 ff ff       	call   c0008ae8 <pbuf_realloc>
c000c877:	83 c4 10             	add    esp,0x10
c000c87a:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c880:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c885:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c889:	0f b7 c0             	movzx  eax,ax
c000c88c:	83 ec 0c             	sub    esp,0xc
c000c88f:	50                   	push   eax
c000c890:	e8 87 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	0f b7 c0             	movzx  eax,ax
c000c89b:	83 e0 03             	and    eax,0x3
c000c89e:	0f 95 c0             	setne  al
c000c8a1:	0f b6 c0             	movzx  eax,al
c000c8a4:	01 d8                	add    eax,ebx
c000c8a6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c8ac:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8b2:	0f b7 d0             	movzx  edx,ax
c000c8b5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c8bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8c1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c8c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8c8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c8cb:	0f b7 c0             	movzx  eax,ax
c000c8ce:	01 d0                	add    eax,edx
c000c8d0:	39 c1                	cmp    ecx,eax
c000c8d2:	74 18                	je     c000c8ec <tcp_receive+0xbfc>
c000c8d4:	83 ec 08             	sub    esp,0x8
c000c8d7:	68 b4 07 03 c0       	push   0xc00307b4
c000c8dc:	68 26 fe 02 c0       	push   0xc002fe26
c000c8e1:	e8 1a 35 01 00       	call   c001fe00 <CPrintf>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c8ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8f6:	85 c0                	test   eax,eax
c000c8f8:	0f 84 7e 02 00 00    	je     c000cb7c <tcp_receive+0xe8c>
c000c8fe:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c903:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c907:	0f b7 c0             	movzx  eax,ax
c000c90a:	83 ec 0c             	sub    esp,0xc
c000c90d:	50                   	push   eax
c000c90e:	e8 09 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c913:	83 c4 10             	add    esp,0x10
c000c916:	0f b7 c0             	movzx  eax,ax
c000c919:	83 e0 01             	and    eax,0x1
c000c91c:	74 4a                	je     c000c968 <tcp_receive+0xc78>
c000c91e:	eb 34                	jmp    c000c954 <tcp_receive+0xc64>
c000c920:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c924:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c92a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c92e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c932:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c938:	8b 10                	mov    edx,DWORD PTR [eax]
c000c93a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c93e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c94b:	e8 50 d8 ff ff       	call   c000a1a0 <tcp_seg_free>
c000c950:	83 c4 10             	add    esp,0x10
c000c953:	90                   	nop
c000c954:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c958:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c95e:	85 c0                	test   eax,eax
c000c960:	75 be                	jne    c000c920 <tcp_receive+0xc30>
c000c962:	e9 15 02 00 00       	jmp    c000cb7c <tcp_receive+0xe8c>
c000c967:	90                   	nop
c000c968:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c96c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c972:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c976:	e9 bd 00 00 00       	jmp    c000ca38 <tcp_receive+0xd48>
c000c97b:	90                   	nop
c000c97c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c983:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c987:	0f b7 c0             	movzx  eax,ax
c000c98a:	83 ec 0c             	sub    esp,0xc
c000c98d:	50                   	push   eax
c000c98e:	e8 89 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c993:	83 c4 10             	add    esp,0x10
c000c996:	0f b7 c0             	movzx  eax,ax
c000c999:	83 e0 01             	and    eax,0x1
c000c99c:	74 76                	je     c000ca14 <tcp_receive+0xd24>
c000c99e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9a3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a7:	0f b7 c0             	movzx  eax,ax
c000c9aa:	83 ec 0c             	sub    esp,0xc
c000c9ad:	50                   	push   eax
c000c9ae:	e8 69 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9b3:	83 c4 10             	add    esp,0x10
c000c9b6:	0f b7 c0             	movzx  eax,ax
c000c9b9:	83 e0 02             	and    eax,0x2
c000c9bc:	75 56                	jne    c000ca14 <tcp_receive+0xd24>
c000c9be:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9c3:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c9c7:	83 ec 0c             	sub    esp,0xc
c000c9ca:	6a 01                	push   0x1
c000c9cc:	e8 4b 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9d1:	83 c4 10             	add    esp,0x10
c000c9d4:	89 c2                	mov    edx,eax
c000c9d6:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9db:	09 da                	or     edx,ebx
c000c9dd:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c9e1:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c9e7:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9ec:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9f0:	0f b7 c0             	movzx  eax,ax
c000c9f3:	83 ec 0c             	sub    esp,0xc
c000c9f6:	50                   	push   eax
c000c9f7:	e8 20 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9fc:	83 c4 10             	add    esp,0x10
c000c9ff:	0f b7 c0             	movzx  eax,ax
c000ca02:	83 e0 03             	and    eax,0x3
c000ca05:	0f 95 c0             	setne  al
c000ca08:	0f b6 c0             	movzx  eax,al
c000ca0b:	01 d8                	add    eax,ebx
c000ca0d:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000ca13:	90                   	nop
c000ca14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca20:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	83 ec 0c             	sub    esp,0xc
c000ca29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca2d:	e8 6e d7 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	8d 76 00             	lea    esi,[esi+0x0]
c000ca38:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca3d:	74 31                	je     c000ca70 <tcp_receive+0xd80>
c000ca3f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca45:	0f b7 d0             	movzx  edx,ax
c000ca48:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca4d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca57:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca61:	0f b7 c0             	movzx  eax,ax
c000ca64:	01 d0                	add    eax,edx
c000ca66:	29 c1                	sub    ecx,eax
c000ca68:	89 c8                	mov    eax,ecx
c000ca6a:	0f 89 0c ff ff ff    	jns    c000c97c <tcp_receive+0xc8c>
c000ca70:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca75:	0f 84 f1 00 00 00    	je     c000cb6c <tcp_receive+0xe7c>
c000ca7b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca81:	0f b7 d0             	movzx  edx,ax
c000ca84:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca89:	01 c2                	add    edx,eax
c000ca8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca95:	29 c2                	sub    edx,eax
c000ca97:	89 d0                	mov    eax,edx
c000ca99:	85 c0                	test   eax,eax
c000ca9b:	0f 8e cb 00 00 00    	jle    c000cb6c <tcp_receive+0xe7c>
c000caa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caa5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000caa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000caab:	89 c2                	mov    edx,eax
c000caad:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cab2:	89 d7                	mov    edi,edx
c000cab4:	29 c7                	sub    edi,eax
c000cab6:	89 f8                	mov    eax,edi
c000cab8:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000cabe:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cac3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac7:	0f b7 c0             	movzx  eax,ax
c000caca:	83 ec 0c             	sub    esp,0xc
c000cacd:	50                   	push   eax
c000cace:	e8 49 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	0f b7 c0             	movzx  eax,ax
c000cad9:	83 e0 02             	and    eax,0x2
c000cadc:	74 0e                	je     c000caec <tcp_receive+0xdfc>
c000cade:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000cae3:	83 e8 01             	sub    eax,0x1
c000cae6:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000caec:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000caf1:	0f b7 d0             	movzx  edx,ax
c000caf4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000caf9:	83 ec 08             	sub    esp,0x8
c000cafc:	52                   	push   edx
c000cafd:	50                   	push   eax
c000cafe:	e8 e5 bf ff ff       	call   c0008ae8 <pbuf_realloc>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000cb0c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cb11:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb15:	0f b7 c0             	movzx  eax,ax
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	50                   	push   eax
c000cb1c:	e8 fb 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb21:	83 c4 10             	add    esp,0x10
c000cb24:	0f b7 c0             	movzx  eax,ax
c000cb27:	83 e0 03             	and    eax,0x3
c000cb2a:	0f 95 c0             	setne  al
c000cb2d:	0f b6 c0             	movzx  eax,al
c000cb30:	01 d8                	add    eax,ebx
c000cb32:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000cb38:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb3e:	0f b7 d0             	movzx  edx,ax
c000cb41:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cb46:	01 c2                	add    edx,eax
c000cb48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb52:	39 c2                	cmp    edx,eax
c000cb54:	74 16                	je     c000cb6c <tcp_receive+0xe7c>
c000cb56:	83 ec 08             	sub    esp,0x8
c000cb59:	68 ec 07 03 c0       	push   0xc00307ec
c000cb5e:	68 26 fe 02 c0       	push   0xc002fe26
c000cb63:	e8 98 32 01 00       	call   c001fe00 <CPrintf>
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	90                   	nop
c000cb6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb74:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb7a:	66 90                	xchg   ax,ax
c000cb7c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb82:	0f b7 d0             	movzx  edx,ax
c000cb85:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cb8a:	01 c2                	add    edx,eax
c000cb8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb90:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb97:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb9a:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cba0:	0f b7 d2             	movzx  edx,dx
c000cba3:	0f b7 c0             	movzx  eax,ax
c000cba6:	39 c2                	cmp    edx,eax
c000cba8:	73 16                	jae    c000cbc0 <tcp_receive+0xed0>
c000cbaa:	83 ec 08             	sub    esp,0x8
c000cbad:	68 28 08 03 c0       	push   0xc0030828
c000cbb2:	68 26 fe 02 c0       	push   0xc002fe26
c000cbb7:	e8 44 32 01 00       	call   c001fe00 <CPrintf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	90                   	nop
c000cbc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbc4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cbc7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cbcd:	89 d6                	mov    esi,edx
c000cbcf:	29 c6                	sub    esi,eax
c000cbd1:	89 f0                	mov    eax,esi
c000cbd3:	89 c2                	mov    edx,eax
c000cbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbd9:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cbdd:	83 ec 0c             	sub    esp,0xc
c000cbe0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbe4:	e8 5b d2 ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cbf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cbf4:	0f b7 c0             	movzx  eax,ax
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	74 15                	je     c000cc10 <tcp_receive+0xf20>
c000cbfb:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cc00:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cc05:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000cc0f:	90                   	nop
c000cc10:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cc15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc19:	0f b7 c0             	movzx  eax,ax
c000cc1c:	83 ec 0c             	sub    esp,0xc
c000cc1f:	50                   	push   eax
c000cc20:	e8 f7 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc25:	83 c4 10             	add    esp,0x10
c000cc28:	0f b7 c0             	movzx  eax,ax
c000cc2b:	83 e0 01             	and    eax,0x1
c000cc2e:	0f 84 dc 01 00 00    	je     c000ce10 <tcp_receive+0x1120>
c000cc34:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cc39:	83 c8 20             	or     eax,0x20
c000cc3c:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cc41:	e9 ca 01 00 00       	jmp    c000ce10 <tcp_receive+0x1120>
c000cc46:	66 90                	xchg   ax,ax
c000cc48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc66:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc72:	0f b7 d8             	movzx  ebx,ax
c000cc75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc80:	0f b7 c0             	movzx  eax,ax
c000cc83:	83 ec 0c             	sub    esp,0xc
c000cc86:	50                   	push   eax
c000cc87:	e8 90 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	0f b7 c0             	movzx  eax,ax
c000cc92:	83 e0 03             	and    eax,0x3
c000cc95:	0f 95 c0             	setne  al
c000cc98:	0f b6 c0             	movzx  eax,al
c000cc9b:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cca5:	01 c2                	add    edx,eax
c000cca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccab:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ccae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccb2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccb5:	0f b7 d8             	movzx  ebx,ax
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 f0             	movzx  esi,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 43 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	01 f0                	add    eax,esi
c000ccea:	39 c3                	cmp    ebx,eax
c000ccec:	7d 16                	jge    c000cd04 <tcp_receive+0x1014>
c000ccee:	83 ec 08             	sub    esp,0x8
c000ccf1:	68 48 08 03 c0       	push   0xc0030848
c000ccf6:	68 26 fe 02 c0       	push   0xc002fe26
c000ccfb:	e8 00 31 01 00       	call   c001fe00 <CPrintf>
c000cd00:	83 c4 10             	add    esp,0x10
c000cd03:	90                   	nop
c000cd04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd0b:	0f b7 d8             	movzx  ebx,ax
c000cd0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd19:	0f b7 c0             	movzx  eax,ax
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	50                   	push   eax
c000cd20:	e8 f7 3e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cd25:	83 c4 10             	add    esp,0x10
c000cd28:	0f b7 c0             	movzx  eax,ax
c000cd2b:	83 e0 03             	and    eax,0x3
c000cd2e:	0f 95 c0             	setne  al
c000cd31:	0f b6 c0             	movzx  eax,al
c000cd34:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cd37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd3b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cd3e:	29 d0                	sub    eax,edx
c000cd40:	89 c2                	mov    edx,eax
c000cd42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd46:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cd4a:	83 ec 0c             	sub    esp,0xc
c000cd4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd51:	e8 ee d0 ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c000cd56:	83 c4 10             	add    esp,0x10
c000cd59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	85 c0                	test   eax,eax
c000cd68:	74 3e                	je     c000cda8 <tcp_receive+0x10b8>
c000cd6a:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd6f:	85 c0                	test   eax,eax
c000cd71:	74 1d                	je     c000cd90 <tcp_receive+0x10a0>
c000cd73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd77:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd7a:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd7f:	83 ec 08             	sub    esp,0x8
c000cd82:	52                   	push   edx
c000cd83:	50                   	push   eax
c000cd84:	e8 cf bf ff ff       	call   c0008d58 <pbuf_cat>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	eb 0e                	jmp    c000cd9c <tcp_receive+0x10ac>
c000cd8e:	66 90                	xchg   ax,ax
c000cd90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd97:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cd9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cda7:	90                   	nop
c000cda8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cdac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdaf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cdb3:	0f b7 c0             	movzx  eax,ax
c000cdb6:	83 ec 0c             	sub    esp,0xc
c000cdb9:	50                   	push   eax
c000cdba:	e8 5d 3e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cdbf:	83 c4 10             	add    esp,0x10
c000cdc2:	0f b7 c0             	movzx  eax,ax
c000cdc5:	83 e0 01             	and    eax,0x1
c000cdc8:	74 26                	je     c000cdf0 <tcp_receive+0x1100>
c000cdca:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cdcf:	83 c8 20             	or     eax,0x20
c000cdd2:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cdd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cddb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cdde:	83 f8 04             	cmp    eax,0x4
c000cde1:	75 0d                	jne    c000cdf0 <tcp_receive+0x1100>
c000cde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde7:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cdee:	66 90                	xchg   ax,ax
c000cdf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cdf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdfa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce00:	83 ec 0c             	sub    esp,0xc
c000ce03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce07:	e8 94 d3 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ce0c:	83 c4 10             	add    esp,0x10
c000ce0f:	90                   	nop
c000ce10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce14:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce1a:	85 c0                	test   eax,eax
c000ce1c:	74 22                	je     c000ce40 <tcp_receive+0x1150>
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce2b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce32:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ce35:	39 c2                	cmp    edx,eax
c000ce37:	0f 84 0b fe ff ff    	je     c000cc48 <tcp_receive+0xf58>
c000ce3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ce40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce44:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce47:	0f b6 c0             	movzx  eax,al
c000ce4a:	83 e0 01             	and    eax,0x1
c000ce4d:	74 2d                	je     c000ce7c <tcp_receive+0x118c>
c000ce4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce53:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce56:	83 e0 fe             	and    eax,0xfffffffe
c000ce59:	88 c2                	mov    dl,al
c000ce5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce5f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce66:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce69:	83 c8 02             	or     eax,0x2
c000ce6c:	88 c2                	mov    dl,al
c000ce6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce72:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce75:	e9 2e 05 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ce7a:	66 90                	xchg   ax,ax
c000ce7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce80:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce83:	83 c8 01             	or     eax,0x1
c000ce86:	88 c2                	mov    dl,al
c000ce88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce8c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce8f:	e9 14 05 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce9b:	e8 00 2f 00 00       	call   c000fda0 <tcp_send_empty_ack>
c000cea0:	83 c4 10             	add    esp,0x10
c000cea3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cea7:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cead:	85 c0                	test   eax,eax
c000ceaf:	75 23                	jne    c000ced4 <tcp_receive+0x11e4>
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ceb9:	e8 7a d3 ff ff       	call   c000a238 <tcp_seg_copy>
c000cebe:	83 c4 10             	add    esp,0x10
c000cec1:	89 c2                	mov    edx,eax
c000cec3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cec7:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cecd:	e9 d6 04 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ced2:	66 90                	xchg   ax,ax
c000ced4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cedc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cee0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cee6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ceea:	e9 2d 04 00 00       	jmp    c000d31c <tcp_receive+0x162c>
c000ceef:	90                   	nop
c000cef0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cef7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cefa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceff:	39 c2                	cmp    edx,eax
c000cf01:	75 75                	jne    c000cf78 <tcp_receive+0x1288>
c000cf03:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cf09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf10:	0f b7 d2             	movzx  edx,dx
c000cf13:	0f b7 c0             	movzx  eax,ax
c000cf16:	39 c2                	cmp    edx,eax
c000cf18:	0f 86 0e 04 00 00    	jbe    c000d32c <tcp_receive+0x163c>
c000cf1e:	83 ec 0c             	sub    esp,0xc
c000cf21:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf26:	e8 0d d3 ff ff       	call   c000a238 <tcp_seg_copy>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf32:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf37:	0f 84 f3 03 00 00    	je     c000d330 <tcp_receive+0x1640>
c000cf3d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf42:	74 0c                	je     c000cf50 <tcp_receive+0x1260>
c000cf44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf4c:	89 10                	mov    DWORD PTR [eax],edx
c000cf4e:	eb 10                	jmp    c000cf60 <tcp_receive+0x1270>
c000cf50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf58:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf5e:	66 90                	xchg   ax,ax
c000cf60:	83 ec 08             	sub    esp,0x8
c000cf63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6b:	e8 10 ec ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000cf70:	83 c4 10             	add    esp,0x10
c000cf73:	e9 b8 03 00 00       	jmp    c000d330 <tcp_receive+0x1640>
c000cf78:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf7d:	75 61                	jne    c000cfe0 <tcp_receive+0x12f0>
c000cf7f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf8f:	29 c2                	sub    edx,eax
c000cf91:	89 d0                	mov    eax,edx
c000cf93:	0f 89 2b 01 00 00    	jns    c000d0c4 <tcp_receive+0x13d4>
c000cf99:	83 ec 0c             	sub    esp,0xc
c000cf9c:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cfa1:	e8 92 d2 ff ff       	call   c000a238 <tcp_seg_copy>
c000cfa6:	83 c4 10             	add    esp,0x10
c000cfa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfad:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfb2:	0f 84 7c 03 00 00    	je     c000d334 <tcp_receive+0x1644>
c000cfb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cfc0:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cfc6:	83 ec 08             	sub    esp,0x8
c000cfc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd1:	e8 aa eb ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	e9 56 03 00 00       	jmp    c000d334 <tcp_receive+0x1644>
c000cfde:	66 90                	xchg   ax,ax
c000cfe0:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cfe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cff0:	29 c2                	sub    edx,eax
c000cff2:	89 d0                	mov    eax,edx
c000cff4:	83 e8 01             	sub    eax,0x1
c000cff7:	0f 88 c7 00 00 00    	js     c000d0c4 <tcp_receive+0x13d4>
c000cffd:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d007:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d00a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d00d:	29 c2                	sub    edx,eax
c000d00f:	89 d0                	mov    eax,edx
c000d011:	83 c0 01             	add    eax,0x1
c000d014:	85 c0                	test   eax,eax
c000d016:	0f 8f a8 00 00 00    	jg     c000d0c4 <tcp_receive+0x13d4>
c000d01c:	83 ec 0c             	sub    esp,0xc
c000d01f:	68 c0 a8 03 c0       	push   0xc003a8c0
c000d024:	e8 0f d2 ff ff       	call   c000a238 <tcp_seg_copy>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d030:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d035:	0f 84 fd 02 00 00    	je     c000d338 <tcp_receive+0x1648>
c000d03b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d042:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d045:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d049:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d04c:	0f b7 c0             	movzx  eax,ax
c000d04f:	01 c2                	add    edx,eax
c000d051:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d056:	29 c2                	sub    edx,eax
c000d058:	89 d0                	mov    eax,edx
c000d05a:	85 c0                	test   eax,eax
c000d05c:	7e 42                	jle    c000d0a0 <tcp_receive+0x13b0>
c000d05e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d063:	89 c2                	mov    edx,eax
c000d065:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d069:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d06c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d06f:	89 d7                	mov    edi,edx
c000d071:	29 c7                	sub    edi,eax
c000d073:	89 f8                	mov    eax,edi
c000d075:	89 c2                	mov    edx,eax
c000d077:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d07b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d07f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d083:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d086:	0f b7 d0             	movzx  edx,ax
c000d089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d08d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d090:	83 ec 08             	sub    esp,0x8
c000d093:	52                   	push   edx
c000d094:	50                   	push   eax
c000d095:	e8 4e ba ff ff       	call   c0008ae8 <pbuf_realloc>
c000d09a:	83 c4 10             	add    esp,0x10
c000d09d:	8d 76 00             	lea    esi,[esi+0x0]
c000d0a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d0a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0a8:	89 10                	mov    DWORD PTR [eax],edx
c000d0aa:	83 ec 08             	sub    esp,0x8
c000d0ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b5:	e8 c6 ea ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000d0ba:	83 c4 10             	add    esp,0x10
c000d0bd:	e9 76 02 00 00       	jmp    c000d338 <tcp_receive+0x1648>
c000d0c2:	66 90                	xchg   ax,ax
c000d0c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0ca:	85 c0                	test   eax,eax
c000d0cc:	0f 85 36 02 00 00    	jne    c000d308 <tcp_receive+0x1618>
c000d0d2:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d0e2:	29 c2                	sub    edx,eax
c000d0e4:	89 d0                	mov    eax,edx
c000d0e6:	85 c0                	test   eax,eax
c000d0e8:	0f 8e 1a 02 00 00    	jle    c000d308 <tcp_receive+0x1618>
c000d0ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0f5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0f9:	0f b7 c0             	movzx  eax,ax
c000d0fc:	83 ec 0c             	sub    esp,0xc
c000d0ff:	50                   	push   eax
c000d100:	e8 17 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d105:	83 c4 10             	add    esp,0x10
c000d108:	0f b7 c0             	movzx  eax,ax
c000d10b:	83 e0 01             	and    eax,0x1
c000d10e:	0f 85 28 02 00 00    	jne    c000d33c <tcp_receive+0x164c>
c000d114:	83 ec 0c             	sub    esp,0xc
c000d117:	68 c0 a8 03 c0       	push   0xc003a8c0
c000d11c:	e8 17 d1 ff ff       	call   c000a238 <tcp_seg_copy>
c000d121:	83 c4 10             	add    esp,0x10
c000d124:	89 c2                	mov    edx,eax
c000d126:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12a:	89 10                	mov    DWORD PTR [eax],edx
c000d12c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d130:	8b 00                	mov    eax,DWORD PTR [eax]
c000d132:	85 c0                	test   eax,eax
c000d134:	0f 84 06 02 00 00    	je     c000d340 <tcp_receive+0x1650>
c000d13a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d13e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d141:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d144:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d14b:	0f b7 c0             	movzx  eax,ax
c000d14e:	01 c2                	add    edx,eax
c000d150:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d155:	29 c2                	sub    edx,eax
c000d157:	89 d0                	mov    eax,edx
c000d159:	85 c0                	test   eax,eax
c000d15b:	7e 3f                	jle    c000d19c <tcp_receive+0x14ac>
c000d15d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d162:	89 c2                	mov    edx,eax
c000d164:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d168:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d16e:	89 d6                	mov    esi,edx
c000d170:	29 c6                	sub    esi,eax
c000d172:	89 f0                	mov    eax,esi
c000d174:	89 c2                	mov    edx,eax
c000d176:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d17a:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d17e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d182:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d185:	0f b7 d0             	movzx  edx,ax
c000d188:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d18c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d18f:	83 ec 08             	sub    esp,0x8
c000d192:	52                   	push   edx
c000d193:	50                   	push   eax
c000d194:	e8 4f b9 ff ff       	call   c0008ae8 <pbuf_realloc>
c000d199:	83 c4 10             	add    esp,0x10
c000d19c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d1a2:	0f b7 d0             	movzx  edx,ax
c000d1a5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d1aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d1ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1b1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d1b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1b8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1bb:	0f b7 c0             	movzx  eax,ax
c000d1be:	01 d0                	add    eax,edx
c000d1c0:	39 c1                	cmp    ecx,eax
c000d1c2:	0f 86 78 01 00 00    	jbe    c000d340 <tcp_receive+0x1650>
c000d1c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1d1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1d5:	0f b7 c0             	movzx  eax,ax
c000d1d8:	83 ec 0c             	sub    esp,0xc
c000d1db:	50                   	push   eax
c000d1dc:	e8 3b 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	0f b7 c0             	movzx  eax,ax
c000d1e7:	83 e0 01             	and    eax,0x1
c000d1ea:	74 54                	je     c000d240 <tcp_receive+0x1550>
c000d1ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1f5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1f9:	80 e4 c0             	and    ah,0xc0
c000d1fc:	89 c3                	mov    ebx,eax
c000d1fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d202:	8b 00                	mov    eax,DWORD PTR [eax]
c000d204:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d207:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d20b:	0f b7 c0             	movzx  eax,ax
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	50                   	push   eax
c000d212:	e8 05 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	0f b7 c0             	movzx  eax,ax
c000d21d:	83 e0 3e             	and    eax,0x3e
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	50                   	push   eax
c000d224:	e8 f3 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d229:	83 c4 10             	add    esp,0x10
c000d22c:	09 d8                	or     eax,ebx
c000d22e:	89 c2                	mov    edx,eax
c000d230:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d234:	8b 00                	mov    eax,DWORD PTR [eax]
c000d236:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d239:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000d23d:	8d 76 00             	lea    esi,[esi+0x0]
c000d240:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d244:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d247:	89 c2                	mov    edx,eax
c000d249:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d24d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d250:	01 d0                	add    eax,edx
c000d252:	89 c1                	mov    ecx,eax
c000d254:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d259:	89 c2                	mov    edx,eax
c000d25b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d25f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d261:	89 cf                	mov    edi,ecx
c000d263:	29 d7                	sub    edi,edx
c000d265:	89 fa                	mov    edx,edi
c000d267:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d26b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d26f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d271:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d274:	0f b7 d0             	movzx  edx,ax
c000d277:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d27b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d27d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d280:	83 ec 08             	sub    esp,0x8
c000d283:	52                   	push   edx
c000d284:	50                   	push   eax
c000d285:	e8 5e b8 ff ff       	call   c0008ae8 <pbuf_realloc>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d291:	8b 00                	mov    eax,DWORD PTR [eax]
c000d293:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d296:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d29a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d29c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d29f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d2a3:	0f b7 c0             	movzx  eax,ax
c000d2a6:	83 ec 0c             	sub    esp,0xc
c000d2a9:	50                   	push   eax
c000d2aa:	e8 6d 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	0f b7 c0             	movzx  eax,ax
c000d2b5:	83 e0 03             	and    eax,0x3
c000d2b8:	0f 95 c0             	setne  al
c000d2bb:	0f b6 c0             	movzx  eax,al
c000d2be:	01 d8                	add    eax,ebx
c000d2c0:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d2c6:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d2cc:	0f b7 d0             	movzx  edx,ax
c000d2cf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d2d4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d2d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d2db:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d2de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d2e2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d2e5:	0f b7 c0             	movzx  eax,ax
c000d2e8:	01 d0                	add    eax,edx
c000d2ea:	39 c1                	cmp    ecx,eax
c000d2ec:	74 52                	je     c000d340 <tcp_receive+0x1650>
c000d2ee:	83 ec 08             	sub    esp,0x8
c000d2f1:	68 b4 07 03 c0       	push   0xc00307b4
c000d2f6:	68 26 fe 02 c0       	push   0xc002fe26
c000d2fb:	e8 00 2b 01 00       	call   c001fe00 <CPrintf>
c000d300:	83 c4 10             	add    esp,0x10
c000d303:	eb 3b                	jmp    c000d340 <tcp_receive+0x1650>
c000d305:	8d 76 00             	lea    esi,[esi+0x0]
c000d308:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d310:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d314:	8b 00                	mov    eax,DWORD PTR [eax]
c000d316:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d31a:	66 90                	xchg   ax,ax
c000d31c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d321:	0f 85 c9 fb ff ff    	jne    c000cef0 <tcp_receive+0x1200>
c000d327:	eb 7f                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d329:	8d 76 00             	lea    esi,[esi+0x0]
c000d32c:	90                   	nop
c000d32d:	eb 79                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d32f:	90                   	nop
c000d330:	90                   	nop
c000d331:	eb 75                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d333:	90                   	nop
c000d334:	90                   	nop
c000d335:	eb 71                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d337:	90                   	nop
c000d338:	90                   	nop
c000d339:	eb 6d                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d33b:	90                   	nop
c000d33c:	90                   	nop
c000d33d:	eb 69                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d33f:	90                   	nop
c000d340:	90                   	nop
c000d341:	eb 65                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d343:	90                   	nop
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d34b:	e8 50 2a 00 00       	call   c000fda0 <tcp_send_empty_ack>
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	eb 53                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d355:	8d 76 00             	lea    esi,[esi+0x0]
c000d358:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d35e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d362:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d365:	29 c2                	sub    edx,eax
c000d367:	89 d0                	mov    eax,edx
c000d369:	78 25                	js     c000d390 <tcp_receive+0x16a0>
c000d36b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d371:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d375:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d37c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d37f:	0f b7 c0             	movzx  eax,ax
c000d382:	01 c8                	add    eax,ecx
c000d384:	29 c2                	sub    edx,eax
c000d386:	89 d0                	mov    eax,edx
c000d388:	83 c0 01             	add    eax,0x1
c000d38b:	85 c0                	test   eax,eax
c000d38d:	7e 19                	jle    c000d3a8 <tcp_receive+0x16b8>
c000d38f:	90                   	nop
c000d390:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d394:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d397:	83 c8 02             	or     eax,0x2
c000d39a:	88 c2                	mov    dl,al
c000d39c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d3a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d3a3:	eb 03                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3a8:	90                   	nop
c000d3a9:	83 c4 30             	add    esp,0x30
c000d3ac:	5b                   	pop    ebx
c000d3ad:	5e                   	pop    esi
c000d3ae:	5f                   	pop    edi
c000d3af:	c3                   	ret    

c000d3b0 <tcp_parseopt>:
c000d3b0:	83 ec 1c             	sub    esp,0x1c
c000d3b3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3b8:	83 c0 14             	add    eax,0x14
c000d3bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3bf:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3c4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d3c8:	0f b7 c0             	movzx  eax,ax
c000d3cb:	83 ec 0c             	sub    esp,0xc
c000d3ce:	50                   	push   eax
c000d3cf:	e8 48 38 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	0f b7 c0             	movzx  eax,ax
c000d3da:	c1 e8 0c             	shr    eax,0xc
c000d3dd:	0f b7 c0             	movzx  eax,ax
c000d3e0:	83 f8 05             	cmp    eax,0x5
c000d3e3:	0f 86 6f 01 00 00    	jbe    c000d558 <tcp_parseopt+0x1a8>
c000d3e9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3ee:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d3f2:	0f b7 c0             	movzx  eax,ax
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	50                   	push   eax
c000d3f9:	e8 1e 38 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d3fe:	83 c4 10             	add    esp,0x10
c000d401:	0f b7 c0             	movzx  eax,ax
c000d404:	c1 e8 0c             	shr    eax,0xc
c000d407:	83 e8 05             	sub    eax,0x5
c000d40a:	c1 e0 02             	shl    eax,0x2
c000d40d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d412:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d419:	e9 1e 01 00 00       	jmp    c000d53c <tcp_parseopt+0x18c>
c000d41e:	66 90                	xchg   ax,ax
c000d420:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d425:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d429:	01 d0                	add    eax,edx
c000d42b:	8a 00                	mov    al,BYTE PTR [eax]
c000d42d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d431:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d436:	83 f8 01             	cmp    eax,0x1
c000d439:	74 15                	je     c000d450 <tcp_parseopt+0xa0>
c000d43b:	83 f8 02             	cmp    eax,0x2
c000d43e:	74 24                	je     c000d464 <tcp_parseopt+0xb4>
c000d440:	85 c0                	test   eax,eax
c000d442:	0f 85 bc 00 00 00    	jne    c000d504 <tcp_parseopt+0x154>
c000d448:	e9 0b 01 00 00       	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d44d:	8d 76 00             	lea    esi,[esi+0x0]
c000d450:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d455:	83 c0 01             	add    eax,0x1
c000d458:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d45d:	e9 da 00 00 00       	jmp    c000d53c <tcp_parseopt+0x18c>
c000d462:	66 90                	xchg   ax,ax
c000d464:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d469:	8d 50 01             	lea    edx,[eax+0x1]
c000d46c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d470:	01 d0                	add    eax,edx
c000d472:	8a 00                	mov    al,BYTE PTR [eax]
c000d474:	0f b6 c0             	movzx  eax,al
c000d477:	83 f8 04             	cmp    eax,0x4
c000d47a:	0f 85 d0 00 00 00    	jne    c000d550 <tcp_parseopt+0x1a0>
c000d480:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d485:	8d 50 03             	lea    edx,[eax+0x3]
c000d488:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d48d:	39 c2                	cmp    edx,eax
c000d48f:	0f 8d bb 00 00 00    	jge    c000d550 <tcp_parseopt+0x1a0>
c000d495:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d49a:	8d 50 02             	lea    edx,[eax+0x2]
c000d49d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4a1:	01 d0                	add    eax,edx
c000d4a3:	8a 00                	mov    al,BYTE PTR [eax]
c000d4a5:	0f b6 c0             	movzx  eax,al
c000d4a8:	c1 e0 08             	shl    eax,0x8
c000d4ab:	89 c2                	mov    edx,eax
c000d4ad:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4b2:	8d 48 03             	lea    ecx,[eax+0x3]
c000d4b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b9:	01 c8                	add    eax,ecx
c000d4bb:	8a 00                	mov    al,BYTE PTR [eax]
c000d4bd:	0f b6 c0             	movzx  eax,al
c000d4c0:	09 d0                	or     eax,edx
c000d4c2:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d4c7:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d4cc:	3d 18 02 00 00       	cmp    eax,0x218
c000d4d1:	77 11                	ja     c000d4e4 <tcp_parseopt+0x134>
c000d4d3:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d4d8:	85 c0                	test   eax,eax
c000d4da:	74 08                	je     c000d4e4 <tcp_parseopt+0x134>
c000d4dc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d4e1:	eb 09                	jmp    c000d4ec <tcp_parseopt+0x13c>
c000d4e3:	90                   	nop
c000d4e4:	b8 18 02 00 00       	mov    eax,0x218
c000d4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d4f0:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d4f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d4f9:	83 c0 04             	add    eax,0x4
c000d4fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d501:	eb 39                	jmp    c000d53c <tcp_parseopt+0x18c>
c000d503:	90                   	nop
c000d504:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d509:	8d 50 01             	lea    edx,[eax+0x1]
c000d50c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d510:	01 d0                	add    eax,edx
c000d512:	8a 00                	mov    al,BYTE PTR [eax]
c000d514:	0f b6 c0             	movzx  eax,al
c000d517:	85 c0                	test   eax,eax
c000d519:	74 39                	je     c000d554 <tcp_parseopt+0x1a4>
c000d51b:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d520:	8d 50 01             	lea    edx,[eax+0x1]
c000d523:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d527:	01 d0                	add    eax,edx
c000d529:	8a 00                	mov    al,BYTE PTR [eax]
c000d52b:	0f b6 c0             	movzx  eax,al
c000d52e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d533:	01 d0                	add    eax,edx
c000d535:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d53a:	66 90                	xchg   ax,ax
c000d53c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d541:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d546:	39 c2                	cmp    edx,eax
c000d548:	0f 82 d2 fe ff ff    	jb     c000d420 <tcp_parseopt+0x70>
c000d54e:	eb 08                	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d550:	90                   	nop
c000d551:	eb 05                	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d553:	90                   	nop
c000d554:	90                   	nop
c000d555:	8d 76 00             	lea    esi,[esi+0x0]
c000d558:	83 c4 1c             	add    esp,0x1c
c000d55b:	c3                   	ret    

c000d55c <tcp_listen_input>:
c000d55c:	53                   	push   ebx
c000d55d:	83 ec 18             	sub    esp,0x18
c000d560:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 10             	and    eax,0x10
c000d56b:	74 53                	je     c000d5c0 <tcp_listen_input+0x64>
c000d56d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d572:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d575:	0f b7 d0             	movzx  edx,ax
c000d578:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d57d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d581:	0f b7 c0             	movzx  eax,ax
c000d584:	66 8b 0d aa a8 03 c0 	mov    cx,WORD PTR ds:0xc003a8aa
c000d58b:	0f b7 d9             	movzx  ebx,cx
c000d58e:	8b 0d b4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b4
c000d594:	01 cb                	add    ebx,ecx
c000d596:	8b 0d b0 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b0
c000d59c:	83 c1 01             	add    ecx,0x1
c000d59f:	83 ec 08             	sub    esp,0x8
c000d5a2:	52                   	push   edx
c000d5a3:	50                   	push   eax
c000d5a4:	68 90 68 03 c0       	push   0xc0036890
c000d5a9:	68 98 68 03 c0       	push   0xc0036898
c000d5ae:	53                   	push   ebx
c000d5af:	51                   	push   ecx
c000d5b0:	e8 8b 2f 00 00       	call   c0010540 <tcp_rst>
c000d5b5:	83 c4 20             	add    esp,0x20
c000d5b8:	e9 a7 01 00 00       	jmp    c000d764 <tcp_listen_input+0x208>
c000d5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5c5:	0f b6 c0             	movzx  eax,al
c000d5c8:	83 e0 02             	and    eax,0x2
c000d5cb:	0f 84 93 01 00 00    	je     c000d764 <tcp_listen_input+0x208>
c000d5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d5:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d5d8:	0f b6 c0             	movzx  eax,al
c000d5db:	83 ec 0c             	sub    esp,0xc
c000d5de:	50                   	push   eax
c000d5df:	e8 e0 df ff ff       	call   c000b5c4 <tcp_alloc>
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d5f0:	75 16                	jne    c000d608 <tcp_listen_input+0xac>
c000d5f2:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d5f8:	83 c0 01             	add    eax,0x1
c000d5fb:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d601:	b0 ff                	mov    al,0xff
c000d603:	e9 60 01 00 00       	jmp    c000d768 <tcp_listen_input+0x20c>
c000d608:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d60e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d612:	89 10                	mov    DWORD PTR [eax],edx
c000d614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d618:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d61b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61f:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d623:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d629:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d62d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d630:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d635:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d63c:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d644:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d64b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d650:	8d 50 01             	lea    edx,[eax+0x1]
c000d653:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d657:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d65a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d65e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d665:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d668:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d66d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d675:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d67d:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d684:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d688:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d68d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d69b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d69e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d6ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6b0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b7:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d6ba:	83 e0 8c             	and    eax,0xffffff8c
c000d6bd:	88 c2                	mov    dl,al
c000d6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6c3:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d6c6:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d6cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6d0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d6d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6d7:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d6dc:	e8 7b 36 00 00       	call   c0010d5c <tcp_timer_needed>
c000d6e1:	83 ec 0c             	sub    esp,0xc
c000d6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6e8:	e8 c3 fc ff ff       	call   c000d3b0 <tcp_parseopt>
c000d6ed:	83 c4 10             	add    esp,0x10
c000d6f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6f4:	8d 50 04             	lea    edx,[eax+0x4]
c000d6f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6fe:	0f b7 c0             	movzx  eax,ax
c000d701:	83 ec 08             	sub    esp,0x8
c000d704:	52                   	push   edx
c000d705:	50                   	push   eax
c000d706:	e8 79 e0 ff ff       	call   c000b784 <tcp_eff_send_mss>
c000d70b:	83 c4 10             	add    esp,0x10
c000d70e:	89 c2                	mov    edx,eax
c000d710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d714:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d718:	83 ec 08             	sub    esp,0x8
c000d71b:	6a 12                	push   0x12
c000d71d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d721:	e8 ee 22 00 00       	call   c000fa14 <tcp_enqueue_flags>
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d72d:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d732:	85 c0                	test   eax,eax
c000d734:	74 1a                	je     c000d750 <tcp_listen_input+0x1f4>
c000d736:	83 ec 08             	sub    esp,0x8
c000d739:	6a 00                	push   0x0
c000d73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d73f:	e8 68 db ff ff       	call   c000b2ac <tcp_abandon>
c000d744:	83 c4 10             	add    esp,0x10
c000d747:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d74b:	eb 1b                	jmp    c000d768 <tcp_listen_input+0x20c>
c000d74d:	8d 76 00             	lea    esi,[esi+0x0]
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d757:	e8 58 29 00 00       	call   c00100b4 <tcp_output>
c000d75c:	83 c4 10             	add    esp,0x10
c000d75f:	eb 07                	jmp    c000d768 <tcp_listen_input+0x20c>
c000d761:	8d 76 00             	lea    esi,[esi+0x0]
c000d764:	b0 00                	mov    al,0x0
c000d766:	66 90                	xchg   ax,ax
c000d768:	83 c4 18             	add    esp,0x18
c000d76b:	5b                   	pop    ebx
c000d76c:	c3                   	ret    
c000d76d:	8d 76 00             	lea    esi,[esi+0x0]

c000d770 <tcp_process>:
c000d770:	53                   	push   ebx
c000d771:	83 ec 18             	sub    esp,0x18
c000d774:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d779:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d77e:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d783:	0f b6 c0             	movzx  eax,al
c000d786:	83 e0 04             	and    eax,0x4
c000d789:	0f 84 bd 00 00 00    	je     c000d84c <tcp_process+0xdc>
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d796:	83 f8 02             	cmp    eax,0x2
c000d799:	75 19                	jne    c000d7b4 <tcp_process+0x44>
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d7a2:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d7a7:	39 c2                	cmp    edx,eax
c000d7a9:	75 45                	jne    c000d7f0 <tcp_process+0x80>
c000d7ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d7b0:	eb 3e                	jmp    c000d7f0 <tcp_process+0x80>
c000d7b2:	66 90                	xchg   ax,ax
c000d7b4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7be:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d7c1:	29 c2                	sub    edx,eax
c000d7c3:	89 d0                	mov    eax,edx
c000d7c5:	78 29                	js     c000d7f0 <tcp_process+0x80>
c000d7c7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d7db:	0f b7 c0             	movzx  eax,ax
c000d7de:	01 c8                	add    eax,ecx
c000d7e0:	29 c2                	sub    edx,eax
c000d7e2:	89 d0                	mov    eax,edx
c000d7e4:	85 c0                	test   eax,eax
c000d7e6:	7f 08                	jg     c000d7f0 <tcp_process+0x80>
c000d7e8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d7f0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d7f5:	85 c0                	test   eax,eax
c000d7f7:	74 4b                	je     c000d844 <tcp_process+0xd4>
c000d7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d800:	85 c0                	test   eax,eax
c000d802:	75 18                	jne    c000d81c <tcp_process+0xac>
c000d804:	83 ec 08             	sub    esp,0x8
c000d807:	68 70 08 03 c0       	push   0xc0030870
c000d80c:	68 26 fe 02 c0       	push   0xc002fe26
c000d811:	e8 ea 25 01 00       	call   c001fe00 <CPrintf>
c000d816:	83 c4 10             	add    esp,0x10
c000d819:	8d 76 00             	lea    esi,[esi+0x0]
c000d81c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d821:	83 c8 08             	or     eax,0x8
c000d824:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d830:	83 e0 fe             	and    eax,0xfffffffe
c000d833:	88 c2                	mov    dl,al
c000d835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d839:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d83c:	b0 f5                	mov    al,0xf5
c000d83e:	e9 c9 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d843:	90                   	nop
c000d844:	b0 00                	mov    al,0x0
c000d846:	e9 c1 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d84b:	90                   	nop
c000d84c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d851:	0f b6 c0             	movzx  eax,al
c000d854:	83 e0 02             	and    eax,0x2
c000d857:	74 33                	je     c000d88c <tcp_process+0x11c>
c000d859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d85d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d860:	83 f8 02             	cmp    eax,0x2
c000d863:	74 27                	je     c000d88c <tcp_process+0x11c>
c000d865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d869:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d86c:	83 f8 03             	cmp    eax,0x3
c000d86f:	74 1b                	je     c000d88c <tcp_process+0x11c>
c000d871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d875:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d878:	83 c8 02             	or     eax,0x2
c000d87b:	88 c2                	mov    dl,al
c000d87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d881:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d884:	b0 00                	mov    al,0x0
c000d886:	e9 81 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d88b:	90                   	nop
c000d88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d890:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d893:	0f b6 c0             	movzx  eax,al
c000d896:	83 e0 10             	and    eax,0x10
c000d899:	75 0d                	jne    c000d8a8 <tcp_process+0x138>
c000d89b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d8a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ac:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d8b3:	83 ec 0c             	sub    esp,0xc
c000d8b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8ba:	e8 f1 fa ff ff       	call   c000d3b0 <tcp_parseopt>
c000d8bf:	83 c4 10             	add    esp,0x10
c000d8c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d8c9:	83 f8 09             	cmp    eax,0x9
c000d8cc:	0f 87 16 08 00 00    	ja     c000e0e8 <tcp_process+0x978>
c000d8d2:	8b 04 85 18 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5e8]
c000d8d9:	ff e0                	jmp    eax
c000d8db:	90                   	nop
c000d8dc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8e1:	0f b6 c0             	movzx  eax,al
c000d8e4:	83 e0 10             	and    eax,0x10
c000d8e7:	0f 84 07 02 00 00    	je     c000daf4 <tcp_process+0x384>
c000d8ed:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8f2:	0f b6 c0             	movzx  eax,al
c000d8f5:	83 e0 02             	and    eax,0x2
c000d8f8:	0f 84 f6 01 00 00    	je     c000daf4 <tcp_process+0x384>
c000d8fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d902:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d905:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	50                   	push   eax
c000d90f:	e8 2c 33 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d914:	83 c4 10             	add    esp,0x10
c000d917:	8d 50 01             	lea    edx,[eax+0x1]
c000d91a:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d91f:	39 c2                	cmp    edx,eax
c000d921:	0f 85 cd 01 00 00    	jne    c000daf4 <tcp_process+0x384>
c000d927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92b:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d92f:	83 c0 01             	add    eax,0x1
c000d932:	89 c2                	mov    edx,eax
c000d934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d938:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d93c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d941:	8d 50 01             	lea    edx,[eax+0x1]
c000d944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d948:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d956:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d959:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d963:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d966:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d96b:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d973:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d977:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d97c:	8d 50 ff             	lea    edx,[eax-0x1]
c000d97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d983:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d995:	8d 50 04             	lea    edx,[eax+0x4]
c000d998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d99f:	0f b7 c0             	movzx  eax,ax
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	52                   	push   edx
c000d9a6:	50                   	push   eax
c000d9a7:	e8 d8 dd ff ff       	call   c000b784 <tcp_eff_send_mss>
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	89 c2                	mov    edx,eax
c000d9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b5:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9c0:	89 c2                	mov    edx,eax
c000d9c2:	c1 e2 02             	shl    edx,0x2
c000d9c5:	01 d0                	add    eax,edx
c000d9c7:	d1 e0                	shl    eax,1
c000d9c9:	89 c2                	mov    edx,eax
c000d9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cf:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d9db:	0f b7 c0             	movzx  eax,ax
c000d9de:	83 f8 01             	cmp    eax,0x1
c000d9e1:	75 0d                	jne    c000d9f0 <tcp_process+0x280>
c000d9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ea:	d1 e0                	shl    eax,1
c000d9ec:	eb 0a                	jmp    c000d9f8 <tcp_process+0x288>
c000d9ee:	66 90                	xchg   ax,ax
c000d9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9f7:	90                   	nop
c000d9f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9fc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da04:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000da07:	0f b7 c0             	movzx  eax,ax
c000da0a:	85 c0                	test   eax,eax
c000da0c:	75 16                	jne    c000da24 <tcp_process+0x2b4>
c000da0e:	83 ec 08             	sub    esp,0x8
c000da11:	68 d3 09 03 c0       	push   0xc00309d3
c000da16:	68 26 fe 02 c0       	push   0xc002fe26
c000da1b:	e8 e0 23 01 00       	call   c001fe00 <CPrintf>
c000da20:	83 c4 10             	add    esp,0x10
c000da23:	90                   	nop
c000da24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da28:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000da2b:	83 e8 01             	sub    eax,0x1
c000da2e:	89 c2                	mov    edx,eax
c000da30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da34:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000da38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000da3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da47:	8b 10                	mov    edx,DWORD PTR [eax]
c000da49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4d:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000da50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da54:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000da57:	85 c0                	test   eax,eax
c000da59:	75 0d                	jne    c000da68 <tcp_process+0x2f8>
c000da5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5f:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000da65:	eb 15                	jmp    c000da7c <tcp_process+0x30c>
c000da67:	90                   	nop
c000da68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da76:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da7a:	66 90                	xchg   ax,ax
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da83:	e8 18 c7 ff ff       	call   c000a1a0 <tcp_seg_free>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8f:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da95:	85 c0                	test   eax,eax
c000da97:	74 27                	je     c000dac0 <tcp_process+0x350>
c000da99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9d:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000daa3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000daa7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000daaa:	83 ec 04             	sub    esp,0x4
c000daad:	6a 00                	push   0x0
c000daaf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dab3:	52                   	push   edx
c000dab4:	ff d0                	call   eax
c000dab6:	83 c4 10             	add    esp,0x10
c000dab9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dabd:	eb 09                	jmp    c000dac8 <tcp_process+0x358>
c000dabf:	90                   	nop
c000dac0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000dac5:	8d 76 00             	lea    esi,[esi+0x0]
c000dac8:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dacd:	83 f8 f6             	cmp    eax,0xfffffff6
c000dad0:	75 0a                	jne    c000dadc <tcp_process+0x36c>
c000dad2:	b0 f6                	mov    al,0xf6
c000dad4:	e9 33 06 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000dad9:	8d 76 00             	lea    esi,[esi+0x0]
c000dadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dae3:	83 c8 02             	or     eax,0x2
c000dae6:	88 c2                	mov    dl,al
c000dae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daec:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000daef:	e9 f8 05 00 00       	jmp    c000e0ec <tcp_process+0x97c>
c000daf4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000daf9:	0f b6 c0             	movzx  eax,al
c000dafc:	83 e0 10             	and    eax,0x10
c000daff:	0f 84 e7 05 00 00    	je     c000e0ec <tcp_process+0x97c>
c000db05:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000db0d:	0f b7 c8             	movzx  ecx,ax
c000db10:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db15:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000db19:	0f b7 d0             	movzx  edx,ax
c000db1c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000db22:	0f b7 d8             	movzx  ebx,ax
c000db25:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000db2a:	01 c3                	add    ebx,eax
c000db2c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db31:	83 ec 08             	sub    esp,0x8
c000db34:	51                   	push   ecx
c000db35:	52                   	push   edx
c000db36:	68 90 68 03 c0       	push   0xc0036890
c000db3b:	68 98 68 03 c0       	push   0xc0036898
c000db40:	53                   	push   ebx
c000db41:	50                   	push   eax
c000db42:	e8 f9 29 00 00       	call   c0010540 <tcp_rst>
c000db47:	83 c4 20             	add    esp,0x20
c000db4a:	e9 9d 05 00 00       	jmp    c000e0ec <tcp_process+0x97c>
c000db4f:	90                   	nop
c000db50:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db55:	0f b6 c0             	movzx  eax,al
c000db58:	83 e0 10             	and    eax,0x10
c000db5b:	0f 84 ab 01 00 00    	je     c000dd0c <tcp_process+0x59c>
c000db61:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000db67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db6e:	29 c2                	sub    edx,eax
c000db70:	89 d0                	mov    eax,edx
c000db72:	83 e8 01             	sub    eax,0x1
c000db75:	0f 88 45 01 00 00    	js     c000dcc0 <tcp_process+0x550>
c000db7b:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000db81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db85:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db88:	29 c2                	sub    edx,eax
c000db8a:	89 d0                	mov    eax,edx
c000db8c:	85 c0                	test   eax,eax
c000db8e:	0f 8f 2c 01 00 00    	jg     c000dcc0 <tcp_process+0x550>
c000db94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db98:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dba6:	85 c0                	test   eax,eax
c000dba8:	75 16                	jne    c000dbc0 <tcp_process+0x450>
c000dbaa:	83 ec 08             	sub    esp,0x8
c000dbad:	68 e9 09 03 c0       	push   0xc00309e9
c000dbb2:	68 26 fe 02 c0       	push   0xc002fe26
c000dbb7:	e8 44 22 01 00       	call   c001fe00 <CPrintf>
c000dbbc:	83 c4 10             	add    esp,0x10
c000dbbf:	90                   	nop
c000dbc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dbc7:	85 c0                	test   eax,eax
c000dbc9:	74 25                	je     c000dbf0 <tcp_process+0x480>
c000dbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dbd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbd6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000dbd9:	83 ec 04             	sub    esp,0x4
c000dbdc:	6a 00                	push   0x0
c000dbde:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dbe2:	52                   	push   edx
c000dbe3:	ff d0                	call   eax
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dbec:	eb 0a                	jmp    c000dbf8 <tcp_process+0x488>
c000dbee:	66 90                	xchg   ax,ax
c000dbf0:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf8:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dbfd:	85 c0                	test   eax,eax
c000dbff:	74 23                	je     c000dc24 <tcp_process+0x4b4>
c000dc01:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dc06:	83 f8 f6             	cmp    eax,0xfffffff6
c000dc09:	74 11                	je     c000dc1c <tcp_process+0x4ac>
c000dc0b:	83 ec 0c             	sub    esp,0xc
c000dc0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc12:	e8 29 d8 ff ff       	call   c000b440 <tcp_abort>
c000dc17:	83 c4 10             	add    esp,0x10
c000dc1a:	66 90                	xchg   ax,ax
c000dc1c:	b0 f6                	mov    al,0xf6
c000dc1e:	e9 e9 04 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000dc23:	90                   	nop
c000dc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc28:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dc2c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dc31:	83 ec 0c             	sub    esp,0xc
c000dc34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc38:	e8 b3 e0 ff ff       	call   c000bcf0 <tcp_receive>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dc47:	0f b7 c0             	movzx  eax,ax
c000dc4a:	85 c0                	test   eax,eax
c000dc4c:	74 16                	je     c000dc64 <tcp_process+0x4f4>
c000dc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc52:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dc55:	83 e8 01             	sub    eax,0x1
c000dc58:	89 c2                	mov    edx,eax
c000dc5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5e:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000dc62:	66 90                	xchg   ax,ax
c000dc64:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dc69:	83 f8 01             	cmp    eax,0x1
c000dc6c:	75 0e                	jne    c000dc7c <tcp_process+0x50c>
c000dc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc75:	d1 e0                	shl    eax,1
c000dc77:	eb 0b                	jmp    c000dc84 <tcp_process+0x514>
c000dc79:	8d 76 00             	lea    esi,[esi+0x0]
c000dc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc83:	90                   	nop
c000dc84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc88:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc8c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc91:	0f b6 c0             	movzx  eax,al
c000dc94:	83 e0 20             	and    eax,0x20
c000dc97:	0f 84 ab 00 00 00    	je     c000dd48 <tcp_process+0x5d8>
c000dc9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dca4:	83 c8 02             	or     eax,0x2
c000dca7:	88 c2                	mov    dl,al
c000dca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcad:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb4:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dcbb:	e9 88 00 00 00       	jmp    c000dd48 <tcp_process+0x5d8>
c000dcc0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dcc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dcc8:	0f b7 c8             	movzx  ecx,ax
c000dccb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dcd0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dcd4:	0f b7 d0             	movzx  edx,ax
c000dcd7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dcdd:	0f b7 d8             	movzx  ebx,ax
c000dce0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dce5:	01 c3                	add    ebx,eax
c000dce7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dcec:	83 ec 08             	sub    esp,0x8
c000dcef:	51                   	push   ecx
c000dcf0:	52                   	push   edx
c000dcf1:	68 90 68 03 c0       	push   0xc0036890
c000dcf6:	68 98 68 03 c0       	push   0xc0036898
c000dcfb:	53                   	push   ebx
c000dcfc:	50                   	push   eax
c000dcfd:	e8 3e 28 00 00       	call   c0010540 <tcp_rst>
c000dd02:	83 c4 20             	add    esp,0x20
c000dd05:	e9 e6 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd11:	0f b6 c0             	movzx  eax,al
c000dd14:	83 e0 02             	and    eax,0x2
c000dd17:	0f 84 d3 03 00 00    	je     c000e0f0 <tcp_process+0x980>
c000dd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd21:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dd24:	8d 50 ff             	lea    edx,[eax-0x1]
c000dd27:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dd2c:	39 c2                	cmp    edx,eax
c000dd2e:	0f 85 bc 03 00 00    	jne    c000e0f0 <tcp_process+0x980>
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd3b:	e8 0c 2a 00 00       	call   c001074c <tcp_rexmit>
c000dd40:	83 c4 10             	add    esp,0x10
c000dd43:	e9 a8 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd48:	90                   	nop
c000dd49:	e9 a2 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd4e:	66 90                	xchg   ax,ax
c000dd50:	83 ec 0c             	sub    esp,0xc
c000dd53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd57:	e8 94 df ff ff       	call   c000bcf0 <tcp_receive>
c000dd5c:	83 c4 10             	add    esp,0x10
c000dd5f:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd64:	0f b6 c0             	movzx  eax,al
c000dd67:	83 e0 20             	and    eax,0x20
c000dd6a:	0f 84 84 03 00 00    	je     c000e0f4 <tcp_process+0x984>
c000dd70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd77:	83 c8 02             	or     eax,0x2
c000dd7a:	88 c2                	mov    dl,al
c000dd7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd87:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd8e:	e9 61 03 00 00       	jmp    c000e0f4 <tcp_process+0x984>
c000dd93:	90                   	nop
c000dd94:	83 ec 0c             	sub    esp,0xc
c000dd97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd9b:	e8 50 df ff ff       	call   c000bcf0 <tcp_receive>
c000dda0:	83 c4 10             	add    esp,0x10
c000dda3:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dda8:	0f b6 c0             	movzx  eax,al
c000ddab:	83 e0 20             	and    eax,0x20
c000ddae:	0f 84 08 01 00 00    	je     c000debc <tcp_process+0x74c>
c000ddb4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ddb9:	0f b6 c0             	movzx  eax,al
c000ddbc:	83 e0 10             	and    eax,0x10
c000ddbf:	0f 84 d3 00 00 00    	je     c000de98 <tcp_process+0x728>
c000ddc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc9:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddcc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddd1:	39 c2                	cmp    edx,eax
c000ddd3:	0f 85 bf 00 00 00    	jne    c000de98 <tcp_process+0x728>
c000ddd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dde0:	83 c8 02             	or     eax,0x2
c000dde3:	88 c2                	mov    dl,al
c000dde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ddec:	83 ec 0c             	sub    esp,0xc
c000ddef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf3:	e8 0c c5 ff ff       	call   c000a304 <tcp_pcb_purge>
c000ddf8:	83 c4 10             	add    esp,0x10
c000ddfb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de00:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de04:	75 12                	jne    c000de18 <tcp_process+0x6a8>
c000de06:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de0e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000de13:	eb 4b                	jmp    c000de60 <tcp_process+0x6f0>
c000de15:	8d 76 00             	lea    esi,[esi+0x0]
c000de18:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de1d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de22:	eb 30                	jmp    c000de54 <tcp_process+0x6e4>
c000de24:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de2c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de30:	75 12                	jne    c000de44 <tcp_process+0x6d4>
c000de32:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de3b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de41:	eb 1d                	jmp    c000de60 <tcp_process+0x6f0>
c000de43:	90                   	nop
c000de44:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de4c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de51:	8d 76 00             	lea    esi,[esi+0x0]
c000de54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de59:	85 c0                	test   eax,eax
c000de5b:	75 c7                	jne    c000de24 <tcp_process+0x6b4>
c000de5d:	8d 76 00             	lea    esi,[esi+0x0]
c000de60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de64:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de6f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de76:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de80:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de87:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de8c:	e8 cb 2e 00 00       	call   c0010d5c <tcp_timer_needed>
c000de91:	e9 62 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000de96:	66 90                	xchg   ax,ax
c000de98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de9c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de9f:	83 c8 02             	or     eax,0x2
c000dea2:	88 c2                	mov    dl,al
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deaf:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000deb6:	e9 3d 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000debb:	90                   	nop
c000debc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dec1:	0f b6 c0             	movzx  eax,al
c000dec4:	83 e0 10             	and    eax,0x10
c000dec7:	0f 84 2b 02 00 00    	je     c000e0f8 <tcp_process+0x988>
c000decd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded1:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ded4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ded9:	39 c2                	cmp    edx,eax
c000dedb:	0f 85 17 02 00 00    	jne    c000e0f8 <tcp_process+0x988>
c000dee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee5:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000deec:	e9 07 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000def1:	8d 76 00             	lea    esi,[esi+0x0]
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000defb:	e8 f0 dd ff ff       	call   c000bcf0 <tcp_receive>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000df08:	0f b6 c0             	movzx  eax,al
c000df0b:	83 e0 20             	and    eax,0x20
c000df0e:	0f 84 e8 01 00 00    	je     c000e0fc <tcp_process+0x98c>
c000df14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df18:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000df1b:	83 c8 02             	or     eax,0x2
c000df1e:	88 c2                	mov    dl,al
c000df20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df24:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000df27:	83 ec 0c             	sub    esp,0xc
c000df2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df2e:	e8 d1 c3 ff ff       	call   c000a304 <tcp_pcb_purge>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000df3b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000df3f:	75 0f                	jne    c000df50 <tcp_process+0x7e0>
c000df41:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000df46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df49:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000df4e:	eb 48                	jmp    c000df98 <tcp_process+0x828>
c000df50:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000df55:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000df5a:	eb 30                	jmp    c000df8c <tcp_process+0x81c>
c000df5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df64:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000df68:	75 12                	jne    c000df7c <tcp_process+0x80c>
c000df6a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df73:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df79:	eb 1d                	jmp    c000df98 <tcp_process+0x828>
c000df7b:	90                   	nop
c000df7c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df84:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000df89:	8d 76 00             	lea    esi,[esi+0x0]
c000df8c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df91:	85 c0                	test   eax,eax
c000df93:	75 c7                	jne    c000df5c <tcp_process+0x7ec>
c000df95:	8d 76 00             	lea    esi,[esi+0x0]
c000df98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dfa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa7:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dfae:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfbf:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dfc4:	e8 93 2d 00 00       	call   c0010d5c <tcp_timer_needed>
c000dfc9:	e9 2e 01 00 00       	jmp    c000e0fc <tcp_process+0x98c>
c000dfce:	66 90                	xchg   ax,ax
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfd7:	e8 14 dd ff ff       	call   c000bcf0 <tcp_receive>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dfe4:	0f b6 c0             	movzx  eax,al
c000dfe7:	83 e0 10             	and    eax,0x10
c000dfea:	0f 84 10 01 00 00    	je     c000e100 <tcp_process+0x990>
c000dff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dff7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dffc:	39 c2                	cmp    edx,eax
c000dffe:	0f 85 fc 00 00 00    	jne    c000e100 <tcp_process+0x990>
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00b:	e8 f4 c2 ff ff       	call   c000a304 <tcp_pcb_purge>
c000e010:	83 c4 10             	add    esp,0x10
c000e013:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e018:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000e01c:	75 12                	jne    c000e030 <tcp_process+0x8c0>
c000e01e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e023:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e026:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e02b:	eb 4b                	jmp    c000e078 <tcp_process+0x908>
c000e02d:	8d 76 00             	lea    esi,[esi+0x0]
c000e030:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e035:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000e03a:	eb 30                	jmp    c000e06c <tcp_process+0x8fc>
c000e03c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e041:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e044:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000e048:	75 12                	jne    c000e05c <tcp_process+0x8ec>
c000e04a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e04f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e053:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000e056:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e059:	eb 1d                	jmp    c000e078 <tcp_process+0x908>
c000e05b:	90                   	nop
c000e05c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e061:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e064:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000e069:	8d 76 00             	lea    esi,[esi+0x0]
c000e06c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e071:	85 c0                	test   eax,eax
c000e073:	75 c7                	jne    c000e03c <tcp_process+0x8cc>
c000e075:	8d 76 00             	lea    esi,[esi+0x0]
c000e078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e07c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e087:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e08e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000e094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e098:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e09b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e09f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000e0a4:	e8 b3 2c 00 00       	call   c0010d5c <tcp_timer_needed>
c000e0a9:	eb 55                	jmp    c000e100 <tcp_process+0x990>
c000e0ab:	90                   	nop
c000e0ac:	83 ec 0c             	sub    esp,0xc
c000e0af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b3:	e8 38 dc ff ff       	call   c000bcf0 <tcp_receive>
c000e0b8:	83 c4 10             	add    esp,0x10
c000e0bb:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e0c0:	0f b6 c0             	movzx  eax,al
c000e0c3:	83 e0 10             	and    eax,0x10
c000e0c6:	74 3c                	je     c000e104 <tcp_process+0x994>
c000e0c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0cc:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e0cf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e0d4:	39 c2                	cmp    edx,eax
c000e0d6:	75 2c                	jne    c000e104 <tcp_process+0x994>
c000e0d8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e0dd:	83 c8 10             	or     eax,0x10
c000e0e0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000e0e5:	eb 1d                	jmp    c000e104 <tcp_process+0x994>
c000e0e7:	90                   	nop
c000e0e8:	90                   	nop
c000e0e9:	eb 1d                	jmp    c000e108 <tcp_process+0x998>
c000e0eb:	90                   	nop
c000e0ec:	90                   	nop
c000e0ed:	eb 19                	jmp    c000e108 <tcp_process+0x998>
c000e0ef:	90                   	nop
c000e0f0:	90                   	nop
c000e0f1:	eb 15                	jmp    c000e108 <tcp_process+0x998>
c000e0f3:	90                   	nop
c000e0f4:	90                   	nop
c000e0f5:	eb 11                	jmp    c000e108 <tcp_process+0x998>
c000e0f7:	90                   	nop
c000e0f8:	90                   	nop
c000e0f9:	eb 0d                	jmp    c000e108 <tcp_process+0x998>
c000e0fb:	90                   	nop
c000e0fc:	90                   	nop
c000e0fd:	eb 09                	jmp    c000e108 <tcp_process+0x998>
c000e0ff:	90                   	nop
c000e100:	90                   	nop
c000e101:	eb 05                	jmp    c000e108 <tcp_process+0x998>
c000e103:	90                   	nop
c000e104:	90                   	nop
c000e105:	8d 76 00             	lea    esi,[esi+0x0]
c000e108:	b0 00                	mov    al,0x0
c000e10a:	66 90                	xchg   ax,ax
c000e10c:	83 c4 18             	add    esp,0x18
c000e10f:	5b                   	pop    ebx
c000e110:	c3                   	ret    
c000e111:	8d 76 00             	lea    esi,[esi+0x0]

c000e114 <tcp_input>:
c000e114:	53                   	push   ebx
c000e115:	83 ec 18             	sub    esp,0x18
c000e118:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000e11e:	83 c0 01             	add    eax,0x1
c000e121:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000e127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e12b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e12e:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000e133:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e137:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e13a:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e13f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e142:	0f b7 c0             	movzx  eax,ax
c000e145:	83 ec 0c             	sub    esp,0xc
c000e148:	50                   	push   eax
c000e149:	e8 ce 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e14e:	83 c4 10             	add    esp,0x10
c000e151:	0f b7 c0             	movzx  eax,ax
c000e154:	c1 e8 08             	shr    eax,0x8
c000e157:	0f b7 c0             	movzx  eax,ax
c000e15a:	83 e0 0f             	and    eax,0xf
c000e15d:	c1 e0 02             	shl    eax,0x2
c000e160:	01 d8                	add    eax,ebx
c000e162:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000e167:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e16c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e16f:	0f b7 c0             	movzx  eax,ax
c000e172:	83 ec 0c             	sub    esp,0xc
c000e175:	50                   	push   eax
c000e176:	e8 a1 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e17b:	83 c4 10             	add    esp,0x10
c000e17e:	0f b7 c0             	movzx  eax,ax
c000e181:	c1 e8 08             	shr    eax,0x8
c000e184:	83 e0 0f             	and    eax,0xf
c000e187:	c1 e0 02             	shl    eax,0x2
c000e18a:	f7 d8                	neg    eax
c000e18c:	98                   	cwde   
c000e18d:	83 ec 08             	sub    esp,0x8
c000e190:	50                   	push   eax
c000e191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e195:	e8 da a1 ff ff       	call   c0008374 <pbuf_header>
c000e19a:	83 c4 10             	add    esp,0x10
c000e19d:	0f b6 c0             	movzx  eax,al
c000e1a0:	85 c0                	test   eax,eax
c000e1a2:	75 10                	jne    c000e1b4 <tcp_input+0xa0>
c000e1a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1ab:	0f b7 c0             	movzx  eax,ax
c000e1ae:	83 f8 13             	cmp    eax,0x13
c000e1b1:	77 35                	ja     c000e1e8 <tcp_input+0xd4>
c000e1b3:	90                   	nop
c000e1b4:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e1ba:	83 c0 01             	add    eax,0x1
c000e1bd:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e1c3:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e1c9:	83 c0 01             	add    eax,0x1
c000e1cc:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e1d2:	83 ec 0c             	sub    esp,0xc
c000e1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1d9:	e8 36 a3 ff ff       	call   c0008514 <pbuf_free>
c000e1de:	83 c4 10             	add    esp,0x10
c000e1e1:	e9 fe 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e1ed:	83 ec 08             	sub    esp,0x8
c000e1f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1f4:	50                   	push   eax
c000e1f5:	e8 be 5e 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c000e1fa:	83 c4 10             	add    esp,0x10
c000e1fd:	0f b6 c0             	movzx  eax,al
c000e200:	85 c0                	test   eax,eax
c000e202:	75 14                	jne    c000e218 <tcp_input+0x104>
c000e204:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e209:	25 f0 00 00 00       	and    eax,0xf0
c000e20e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e213:	75 37                	jne    c000e24c <tcp_input+0x138>
c000e215:	8d 76 00             	lea    esi,[esi+0x0]
c000e218:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e227:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e22d:	83 c0 01             	add    eax,0x1
c000e230:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e236:	83 ec 0c             	sub    esp,0xc
c000e239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e23d:	e8 d2 a2 ff ff       	call   c0008514 <pbuf_free>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	e9 9a 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e24a:	66 90                	xchg   ax,ax
c000e24c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e250:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e253:	0f b7 c0             	movzx  eax,ax
c000e256:	83 ec 0c             	sub    esp,0xc
c000e259:	50                   	push   eax
c000e25a:	6a 06                	push   0x6
c000e25c:	68 98 68 03 c0       	push   0xc0036898
c000e261:	68 90 68 03 c0       	push   0xc0036890
c000e266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e26a:	e8 61 51 00 00       	call   c00133d0 <inet_chksum_pseudo>
c000e26f:	83 c4 20             	add    esp,0x20
c000e272:	0f b7 c0             	movzx  eax,ax
c000e275:	85 c0                	test   eax,eax
c000e277:	74 33                	je     c000e2ac <tcp_input+0x198>
c000e279:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e27f:	83 c0 01             	add    eax,0x1
c000e282:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e288:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e28e:	83 c0 01             	add    eax,0x1
c000e291:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e297:	83 ec 0c             	sub    esp,0xc
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	e8 71 a2 ff ff       	call   c0008514 <pbuf_free>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	e9 39 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e2ab:	90                   	nop
c000e2ac:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2b1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e2b5:	0f b7 c0             	movzx  eax,ax
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	50                   	push   eax
c000e2bc:	e8 5b 29 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	c1 e8 0c             	shr    eax,0xc
c000e2ca:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e2ce:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e2d3:	ba 00 00 00 00       	mov    edx,0x0
c000e2d8:	89 d1                	mov    ecx,edx
c000e2da:	29 c1                	sub    ecx,eax
c000e2dc:	89 c8                	mov    eax,ecx
c000e2de:	c1 e0 02             	shl    eax,0x2
c000e2e1:	98                   	cwde   
c000e2e2:	83 ec 08             	sub    esp,0x8
c000e2e5:	50                   	push   eax
c000e2e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ea:	e8 85 a0 ff ff       	call   c0008374 <pbuf_header>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	0f b6 c0             	movzx  eax,al
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	74 33                	je     c000e32c <tcp_input+0x218>
c000e2f9:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e2ff:	83 c0 01             	add    eax,0x1
c000e302:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e308:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e30e:	83 c0 01             	add    eax,0x1
c000e311:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e317:	83 ec 0c             	sub    esp,0xc
c000e31a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e31e:	e8 f1 a1 ff ff       	call   c0008514 <pbuf_free>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	e9 b9 08 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e32b:	90                   	nop
c000e32c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e331:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e334:	0f b7 c0             	movzx  eax,ax
c000e337:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	50                   	push   eax
c000e341:	e8 d6 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	66 89 03             	mov    WORD PTR [ebx],ax
c000e34c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e351:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e355:	0f b7 c0             	movzx  eax,ax
c000e358:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e35e:	83 ec 0c             	sub    esp,0xc
c000e361:	50                   	push   eax
c000e362:	e8 b5 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e36e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e373:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e376:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e37c:	83 ec 0c             	sub    esp,0xc
c000e37f:	50                   	push   eax
c000e380:	e8 bb 28 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e385:	83 c4 10             	add    esp,0x10
c000e388:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e38b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e38e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e393:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e398:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e39b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	50                   	push   eax
c000e3a5:	e8 96 28 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e3b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e3b3:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e3b8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3bd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e3c1:	0f b7 c0             	movzx  eax,ax
c000e3c4:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e3ca:	83 ec 0c             	sub    esp,0xc
c000e3cd:	50                   	push   eax
c000e3ce:	e8 49 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e3da:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3df:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e3e3:	0f b7 c0             	movzx  eax,ax
c000e3e6:	83 ec 0c             	sub    esp,0xc
c000e3e9:	50                   	push   eax
c000e3ea:	e8 2d 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	83 e0 3f             	and    eax,0x3f
c000e3f5:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3fe:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e401:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e406:	0f b6 c0             	movzx  eax,al
c000e409:	83 e0 03             	and    eax,0x3
c000e40c:	0f 95 c0             	setne  al
c000e40f:	0f b6 c0             	movzx  eax,al
c000e412:	01 d0                	add    eax,edx
c000e414:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e41a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e422:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e42b:	e9 50 01 00 00       	jmp    c000e580 <tcp_input+0x46c>
c000e430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e434:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e437:	85 c0                	test   eax,eax
c000e439:	75 15                	jne    c000e450 <tcp_input+0x33c>
c000e43b:	83 ec 08             	sub    esp,0x8
c000e43e:	68 90 08 03 c0       	push   0xc0030890
c000e443:	68 26 fe 02 c0       	push   0xc002fe26
c000e448:	e8 b3 19 01 00       	call   c001fe00 <CPrintf>
c000e44d:	83 c4 10             	add    esp,0x10
c000e450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e454:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e457:	83 f8 0a             	cmp    eax,0xa
c000e45a:	75 18                	jne    c000e474 <tcp_input+0x360>
c000e45c:	83 ec 08             	sub    esp,0x8
c000e45f:	68 b8 08 03 c0       	push   0xc00308b8
c000e464:	68 26 fe 02 c0       	push   0xc002fe26
c000e469:	e8 92 19 01 00       	call   c001fe00 <CPrintf>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	8d 76 00             	lea    esi,[esi+0x0]
c000e474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e478:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e47b:	83 f8 01             	cmp    eax,0x1
c000e47e:	75 18                	jne    c000e498 <tcp_input+0x384>
c000e480:	83 ec 08             	sub    esp,0x8
c000e483:	68 e4 08 03 c0       	push   0xc00308e4
c000e488:	68 26 fe 02 c0       	push   0xc002fe26
c000e48d:	e8 6e 19 01 00       	call   c001fe00 <CPrintf>
c000e492:	83 c4 10             	add    esp,0x10
c000e495:	8d 76 00             	lea    esi,[esi+0x0]
c000e498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e49c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e4a0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e4a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e4a8:	0f b7 d2             	movzx  edx,dx
c000e4ab:	0f b7 c0             	movzx  eax,ax
c000e4ae:	39 c2                	cmp    edx,eax
c000e4b0:	0f 85 b6 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e4bd:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e4c2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e4c6:	0f b7 d2             	movzx  edx,dx
c000e4c9:	0f b7 c0             	movzx  eax,ax
c000e4cc:	39 c2                	cmp    edx,eax
c000e4ce:	0f 85 98 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4db:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e4e0:	39 c2                	cmp    edx,eax
c000e4e2:	0f 85 84 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ee:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e4f3:	39 c2                	cmp    edx,eax
c000e4f5:	75 75                	jne    c000e56c <tcp_input+0x458>
c000e4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4fe:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e502:	75 18                	jne    c000e51c <tcp_input+0x408>
c000e504:	83 ec 08             	sub    esp,0x8
c000e507:	68 0c 09 03 c0       	push   0xc003090c
c000e50c:	68 26 fe 02 c0       	push   0xc002fe26
c000e511:	e8 ea 18 01 00       	call   c001fe00 <CPrintf>
c000e516:	83 c4 10             	add    esp,0x10
c000e519:	8d 76 00             	lea    esi,[esi+0x0]
c000e51c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e521:	74 25                	je     c000e548 <tcp_input+0x434>
c000e523:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e527:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e52a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e52e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e531:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e53b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e53e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e542:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e547:	90                   	nop
c000e548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e54f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e553:	75 3b                	jne    c000e590 <tcp_input+0x47c>
c000e555:	83 ec 08             	sub    esp,0x8
c000e558:	68 38 09 03 c0       	push   0xc0030938
c000e55d:	68 26 fe 02 c0       	push   0xc002fe26
c000e562:	e8 99 18 01 00       	call   c001fe00 <CPrintf>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	eb 24                	jmp    c000e590 <tcp_input+0x47c>
c000e56c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e570:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e578:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e57b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e57f:	90                   	nop
c000e580:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e585:	0f 85 a5 fe ff ff    	jne    c000e430 <tcp_input+0x31c>
c000e58b:	eb 07                	jmp    c000e594 <tcp_input+0x480>
c000e58d:	8d 76 00             	lea    esi,[esi+0x0]
c000e590:	90                   	nop
c000e591:	8d 76 00             	lea    esi,[esi+0x0]
c000e594:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e599:	0f 85 89 01 00 00    	jne    c000e728 <tcp_input+0x614>
c000e59f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e5a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a8:	e9 ab 00 00 00       	jmp    c000e658 <tcp_input+0x544>
c000e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e5b7:	83 f8 0a             	cmp    eax,0xa
c000e5ba:	74 18                	je     c000e5d4 <tcp_input+0x4c0>
c000e5bc:	83 ec 08             	sub    esp,0x8
c000e5bf:	68 64 09 03 c0       	push   0xc0030964
c000e5c4:	68 26 fe 02 c0       	push   0xc002fe26
c000e5c9:	e8 32 18 01 00       	call   c001fe00 <CPrintf>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5d8:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e5dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e5e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e5e4:	0f b7 d2             	movzx  edx,dx
c000e5e7:	0f b7 c0             	movzx  eax,ax
c000e5ea:	39 c2                	cmp    edx,eax
c000e5ec:	75 5e                	jne    c000e64c <tcp_input+0x538>
c000e5ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e5f5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e5fa:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e5fe:	0f b7 d2             	movzx  edx,dx
c000e601:	0f b7 c0             	movzx  eax,ax
c000e604:	39 c2                	cmp    edx,eax
c000e606:	75 44                	jne    c000e64c <tcp_input+0x538>
c000e608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e60c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e60f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e614:	39 c2                	cmp    edx,eax
c000e616:	75 34                	jne    c000e64c <tcp_input+0x538>
c000e618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e61c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e623:	39 c2                	cmp    edx,eax
c000e625:	75 25                	jne    c000e64c <tcp_input+0x538>
c000e627:	83 ec 0c             	sub    esp,0xc
c000e62a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e62e:	e8 45 d4 ff ff       	call   c000ba78 <tcp_timewait_input>
c000e633:	83 c4 10             	add    esp,0x10
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e63d:	e8 d2 9e ff ff       	call   c0008514 <pbuf_free>
c000e642:	83 c4 10             	add    esp,0x10
c000e645:	e9 9a 05 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e64a:	66 90                	xchg   ax,ax
c000e64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e65d:	0f 85 4d ff ff ff    	jne    c000e5b0 <tcp_input+0x49c>
c000e663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e66b:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e670:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e674:	eb 52                	jmp    c000e6c8 <tcp_input+0x5b4>
c000e676:	66 90                	xchg   ax,ax
c000e678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e67c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e67f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e684:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e688:	0f b7 d2             	movzx  edx,dx
c000e68b:	0f b7 c0             	movzx  eax,ax
c000e68e:	39 c2                	cmp    edx,eax
c000e690:	75 22                	jne    c000e6b4 <tcp_input+0x5a0>
c000e692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e696:	8b 10                	mov    edx,DWORD PTR [eax]
c000e698:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e69d:	39 c2                	cmp    edx,eax
c000e69f:	74 2f                	je     c000e6d0 <tcp_input+0x5bc>
c000e6a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6a5:	85 c0                	test   eax,eax
c000e6a7:	74 27                	je     c000e6d0 <tcp_input+0x5bc>
c000e6a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6af:	85 c0                	test   eax,eax
c000e6b1:	74 1d                	je     c000e6d0 <tcp_input+0x5bc>
c000e6b3:	90                   	nop
c000e6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e6c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e6c7:	90                   	nop
c000e6c8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e6cd:	75 a9                	jne    c000e678 <tcp_input+0x564>
c000e6cf:	90                   	nop
c000e6d0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e6d5:	74 51                	je     c000e728 <tcp_input+0x614>
c000e6d7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e6dc:	74 26                	je     c000e704 <tcp_input+0x5f0>
c000e6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6e2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e6e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e6e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6ec:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6fd:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e702:	66 90                	xchg   ax,ax
c000e704:	83 ec 0c             	sub    esp,0xc
c000e707:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e70b:	e8 4c ee ff ff       	call   c000d55c <tcp_listen_input>
c000e710:	83 c4 10             	add    esp,0x10
c000e713:	83 ec 0c             	sub    esp,0xc
c000e716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e71a:	e8 f5 9d ff ff       	call   c0008514 <pbuf_free>
c000e71f:	83 c4 10             	add    esp,0x10
c000e722:	e9 bd 04 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e727:	90                   	nop
c000e728:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e72d:	0f 84 1d 04 00 00    	je     c000eb50 <tcp_input+0xa3c>
c000e733:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e73d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e741:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e744:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74e:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e753:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e758:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e75d:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e767:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e772:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e778:	85 c0                	test   eax,eax
c000e77a:	0f 84 b4 00 00 00    	je     c000e834 <tcp_input+0x720>
c000e780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e784:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e78a:	85 c0                	test   eax,eax
c000e78c:	74 2e                	je     c000e7bc <tcp_input+0x6a8>
c000e78e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e792:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e798:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e79c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e7a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7a6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7a9:	6a 00                	push   0x0
c000e7ab:	51                   	push   ecx
c000e7ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b0:	52                   	push   edx
c000e7b1:	ff d0                	call   eax
c000e7b3:	83 c4 10             	add    esp,0x10
c000e7b6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7ba:	eb 20                	jmp    c000e7dc <tcp_input+0x6c8>
c000e7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c0:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e7c6:	6a 00                	push   0x0
c000e7c8:	50                   	push   eax
c000e7c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7cd:	6a 00                	push   0x0
c000e7cf:	e8 74 c8 ff ff       	call   c000b048 <tcp_recv_null>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7db:	90                   	nop
c000e7dc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e1:	85 c0                	test   eax,eax
c000e7e3:	75 13                	jne    c000e7f8 <tcp_input+0x6e4>
c000e7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e9:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e7f3:	eb 3f                	jmp    c000e834 <tcp_input+0x720>
c000e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7fd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e800:	74 0e                	je     c000e810 <tcp_input+0x6fc>
c000e802:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e808:	0f b7 c0             	movzx  eax,ax
c000e80b:	85 c0                	test   eax,eax
c000e80d:	74 25                	je     c000e834 <tcp_input+0x720>
c000e80f:	90                   	nop
c000e810:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e816:	83 c0 01             	add    eax,0x1
c000e819:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e81f:	83 ec 0c             	sub    esp,0xc
c000e822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e826:	e8 e9 9c ff ff       	call   c0008514 <pbuf_free>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	e9 b1 03 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e833:	90                   	nop
c000e834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e838:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e83d:	83 ec 0c             	sub    esp,0xc
c000e840:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e844:	e8 27 ef ff ff       	call   c000d770 <tcp_process>
c000e849:	83 c4 10             	add    esp,0x10
c000e84c:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e850:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e855:	83 f8 f6             	cmp    eax,0xfffffff6
c000e858:	0f 84 9e 02 00 00    	je     c000eafc <tcp_input+0x9e8>
c000e85e:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e863:	0f b6 c0             	movzx  eax,al
c000e866:	83 e0 08             	and    eax,0x8
c000e869:	74 59                	je     c000e8c4 <tcp_input+0x7b0>
c000e86b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86f:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e875:	85 c0                	test   eax,eax
c000e877:	74 1f                	je     c000e898 <tcp_input+0x784>
c000e879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e887:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e88a:	83 ec 08             	sub    esp,0x8
c000e88d:	6a f5                	push   0xfffffff5
c000e88f:	52                   	push   edx
c000e890:	ff d0                	call   eax
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e89f:	68 70 68 03 c0       	push   0xc0036870
c000e8a4:	e8 bb c2 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	83 ec 08             	sub    esp,0x8
c000e8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b3:	6a 02                	push   0x2
c000e8b5:	e8 9a 93 ff ff       	call   c0007c54 <memp_free>
c000e8ba:	83 c4 10             	add    esp,0x10
c000e8bd:	e9 4a 02 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e8c2:	66 90                	xchg   ax,ax
c000e8c4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e8c9:	0f b6 c0             	movzx  eax,al
c000e8cc:	83 e0 10             	and    eax,0x10
c000e8cf:	74 2b                	je     c000e8fc <tcp_input+0x7e8>
c000e8d1:	83 ec 08             	sub    esp,0x8
c000e8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d8:	68 70 68 03 c0       	push   0xc0036870
c000e8dd:	e8 82 c2 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	83 ec 08             	sub    esp,0x8
c000e8e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8ec:	6a 02                	push   0x2
c000e8ee:	e8 61 93 ff ff       	call   c0007c54 <memp_free>
c000e8f3:	83 c4 10             	add    esp,0x10
c000e8f6:	e9 11 02 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e8fb:	90                   	nop
c000e8fc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e908:	0f b7 c0             	movzx  eax,ax
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 55                	je     c000e964 <tcp_input+0x850>
c000e90f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e913:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e919:	85 c0                	test   eax,eax
c000e91b:	74 2f                	je     c000e94c <tcp_input+0x838>
c000e91d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e921:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e927:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e92b:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e92e:	0f b7 ca             	movzx  ecx,dx
c000e931:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e935:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e938:	83 ec 04             	sub    esp,0x4
c000e93b:	51                   	push   ecx
c000e93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e940:	52                   	push   edx
c000e941:	ff d0                	call   eax
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e94a:	eb 08                	jmp    c000e954 <tcp_input+0x840>
c000e94c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e951:	8d 76 00             	lea    esi,[esi+0x0]
c000e954:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e959:	83 f8 f6             	cmp    eax,0xfffffff6
c000e95c:	0f 84 9e 01 00 00    	je     c000eb00 <tcp_input+0x9ec>
c000e962:	66 90                	xchg   ax,ax
c000e964:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e969:	85 c0                	test   eax,eax
c000e96b:	0f 84 f3 00 00 00    	je     c000ea64 <tcp_input+0x950>
c000e971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e975:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e97b:	85 c0                	test   eax,eax
c000e97d:	74 15                	je     c000e994 <tcp_input+0x880>
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	68 fd 09 03 c0       	push   0xc00309fd
c000e987:	68 26 fe 02 c0       	push   0xc002fe26
c000e98c:	e8 6f 14 01 00       	call   c001fe00 <CPrintf>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e998:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e99b:	0f b6 c0             	movzx  eax,al
c000e99e:	83 e0 10             	and    eax,0x10
c000e9a1:	74 25                	je     c000e9c8 <tcp_input+0x8b4>
c000e9a3:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9a8:	83 ec 0c             	sub    esp,0xc
c000e9ab:	50                   	push   eax
c000e9ac:	e8 63 9b ff ff       	call   c0008514 <pbuf_free>
c000e9b1:	83 c4 10             	add    esp,0x10
c000e9b4:	83 ec 0c             	sub    esp,0xc
c000e9b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9bb:	e8 80 ca ff ff       	call   c000b440 <tcp_abort>
c000e9c0:	83 c4 10             	add    esp,0x10
c000e9c3:	e9 44 01 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e9c8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e9cd:	0f b6 c0             	movzx  eax,al
c000e9d0:	83 e0 08             	and    eax,0x8
c000e9d3:	74 13                	je     c000e9e8 <tcp_input+0x8d4>
c000e9d5:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9da:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e9dd:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9e2:	83 ca 01             	or     edx,0x1
c000e9e5:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e9e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ec:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e9f2:	85 c0                	test   eax,eax
c000e9f4:	74 2a                	je     c000ea20 <tcp_input+0x90c>
c000e9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9fa:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea00:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000ea06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea0a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea0d:	6a 00                	push   0x0
c000ea0f:	51                   	push   ecx
c000ea10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea14:	52                   	push   edx
c000ea15:	ff d0                	call   eax
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea1e:	eb 1c                	jmp    c000ea3c <tcp_input+0x928>
c000ea20:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000ea25:	6a 00                	push   0x0
c000ea27:	50                   	push   eax
c000ea28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea2c:	6a 00                	push   0x0
c000ea2e:	e8 15 c6 ff ff       	call   c000b048 <tcp_recv_null>
c000ea33:	83 c4 10             	add    esp,0x10
c000ea36:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea3a:	66 90                	xchg   ax,ax
c000ea3c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea41:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea44:	0f 84 ba 00 00 00    	je     c000eb04 <tcp_input+0x9f0>
c000ea4a:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea4f:	85 c0                	test   eax,eax
c000ea51:	74 11                	je     c000ea64 <tcp_input+0x950>
c000ea53:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000ea59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5d:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000ea63:	90                   	nop
c000ea64:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ea69:	0f b6 c0             	movzx  eax,al
c000ea6c:	83 e0 20             	and    eax,0x20
c000ea6f:	74 6f                	je     c000eae0 <tcp_input+0x9cc>
c000ea71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea75:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea78:	0f b7 c0             	movzx  eax,ax
c000ea7b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea80:	74 16                	je     c000ea98 <tcp_input+0x984>
c000ea82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea86:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea89:	83 c0 01             	add    eax,0x1
c000ea8c:	89 c2                	mov    edx,eax
c000ea8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea92:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000ea96:	66 90                	xchg   ax,ax
c000ea98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000eaa2:	85 c0                	test   eax,eax
c000eaa4:	74 26                	je     c000eacc <tcp_input+0x9b8>
c000eaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaaa:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000eab0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eab4:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000eab7:	6a 00                	push   0x0
c000eab9:	6a 00                	push   0x0
c000eabb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eabf:	52                   	push   edx
c000eac0:	ff d0                	call   eax
c000eac2:	83 c4 10             	add    esp,0x10
c000eac5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000eac9:	eb 09                	jmp    c000ead4 <tcp_input+0x9c0>
c000eacb:	90                   	nop
c000eacc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ead1:	8d 76 00             	lea    esi,[esi+0x0]
c000ead4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ead9:	83 f8 f6             	cmp    eax,0xfffffff6
c000eadc:	74 2a                	je     c000eb08 <tcp_input+0x9f4>
c000eade:	66 90                	xchg   ax,ax
c000eae0:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000eaea:	83 ec 0c             	sub    esp,0xc
c000eaed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaf1:	e8 be 15 00 00       	call   c00100b4 <tcp_output>
c000eaf6:	83 c4 10             	add    esp,0x10
c000eaf9:	eb 11                	jmp    c000eb0c <tcp_input+0x9f8>
c000eafb:	90                   	nop
c000eafc:	90                   	nop
c000eafd:	eb 0d                	jmp    c000eb0c <tcp_input+0x9f8>
c000eaff:	90                   	nop
c000eb00:	90                   	nop
c000eb01:	eb 09                	jmp    c000eb0c <tcp_input+0x9f8>
c000eb03:	90                   	nop
c000eb04:	90                   	nop
c000eb05:	eb 05                	jmp    c000eb0c <tcp_input+0x9f8>
c000eb07:	90                   	nop
c000eb08:	90                   	nop
c000eb09:	8d 76 00             	lea    esi,[esi+0x0]
c000eb0c:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000eb16:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000eb20:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eb25:	85 c0                	test   eax,eax
c000eb27:	0f 84 b7 00 00 00    	je     c000ebe4 <tcp_input+0xad0>
c000eb2d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eb32:	83 ec 0c             	sub    esp,0xc
c000eb35:	50                   	push   eax
c000eb36:	e8 d9 99 ff ff       	call   c0008514 <pbuf_free>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000eb48:	e9 97 00 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb55:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eb59:	0f b7 c0             	movzx  eax,ax
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	50                   	push   eax
c000eb60:	e8 b7 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	0f b7 c0             	movzx  eax,ax
c000eb6b:	83 e0 04             	and    eax,0x4
c000eb6e:	75 64                	jne    c000ebd4 <tcp_input+0xac0>
c000eb70:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000eb76:	83 c0 01             	add    eax,0x1
c000eb79:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000eb7f:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000eb85:	83 c0 01             	add    eax,0x1
c000eb88:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000eb8e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb93:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb96:	0f b7 c8             	movzx  ecx,ax
c000eb99:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb9e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eba2:	0f b7 d0             	movzx  edx,ax
c000eba5:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ebab:	0f b7 d8             	movzx  ebx,ax
c000ebae:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ebb3:	01 c3                	add    ebx,eax
c000ebb5:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ebba:	83 ec 08             	sub    esp,0x8
c000ebbd:	51                   	push   ecx
c000ebbe:	52                   	push   edx
c000ebbf:	68 90 68 03 c0       	push   0xc0036890
c000ebc4:	68 98 68 03 c0       	push   0xc0036898
c000ebc9:	53                   	push   ebx
c000ebca:	50                   	push   eax
c000ebcb:	e8 70 19 00 00       	call   c0010540 <tcp_rst>
c000ebd0:	83 c4 20             	add    esp,0x20
c000ebd3:	90                   	nop
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebdb:	e8 34 99 ff ff       	call   c0008514 <pbuf_free>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	90                   	nop
c000ebe4:	83 c4 18             	add    esp,0x18
c000ebe7:	5b                   	pop    ebx
c000ebe8:	c3                   	ret    
c000ebe9:	66 90                	xchg   ax,ax
c000ebeb:	90                   	nop

c000ebec <tcp_output_alloc_header>:
c000ebec:	83 ec 2c             	sub    esp,0x2c
c000ebef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebf7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ebfc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec09:	01 d0                	add    eax,edx
c000ec0b:	83 c0 14             	add    eax,0x14
c000ec0e:	0f b7 c0             	movzx  eax,ax
c000ec11:	83 ec 04             	sub    esp,0x4
c000ec14:	6a 00                	push   0x0
c000ec16:	50                   	push   eax
c000ec17:	6a 01                	push   0x1
c000ec19:	e8 d2 9a ff ff       	call   c00086f0 <pbuf_alloc>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec25:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ec2a:	0f 84 18 01 00 00    	je     c000ed48 <tcp_output_alloc_header+0x15c>
c000ec30:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec35:	8d 50 13             	lea    edx,[eax+0x13]
c000ec38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec3c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ec40:	0f b7 c0             	movzx  eax,ax
c000ec43:	39 c2                	cmp    edx,eax
c000ec45:	7c 15                	jl     c000ec5c <tcp_output_alloc_header+0x70>
c000ec47:	83 ec 08             	sub    esp,0x8
c000ec4a:	68 40 0a 03 c0       	push   0xc0030a40
c000ec4f:	68 26 fe 02 c0       	push   0xc002fe26
c000ec54:	e8 a7 11 01 00       	call   c001fe00 <CPrintf>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec6e:	0f b7 c0             	movzx  eax,ax
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	50                   	push   eax
c000ec75:	e8 a2 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec7a:	83 c4 10             	add    esp,0x10
c000ec7d:	89 c2                	mov    edx,eax
c000ec7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec83:	66 89 10             	mov    WORD PTR [eax],dx
c000ec86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec8a:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec8e:	0f b7 c0             	movzx  eax,ax
c000ec91:	83 ec 0c             	sub    esp,0xc
c000ec94:	50                   	push   eax
c000ec95:	e8 82 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec9a:	83 c4 10             	add    esp,0x10
c000ec9d:	89 c2                	mov    edx,eax
c000ec9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ecaf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ecb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ecb9:	83 ec 0c             	sub    esp,0xc
c000ecbc:	50                   	push   eax
c000ecbd:	e8 7e 1f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ecc2:	83 c4 10             	add    esp,0x10
c000ecc5:	89 c2                	mov    edx,eax
c000ecc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eccb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ecce:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ecd3:	c1 e8 02             	shr    eax,0x2
c000ecd6:	83 c0 05             	add    eax,0x5
c000ecd9:	c1 e0 0c             	shl    eax,0xc
c000ecdc:	83 c8 10             	or     eax,0x10
c000ecdf:	0f b7 c0             	movzx  eax,ax
c000ece2:	83 ec 0c             	sub    esp,0xc
c000ece5:	50                   	push   eax
c000ece6:	e8 31 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eceb:	83 c4 10             	add    esp,0x10
c000ecee:	89 c2                	mov    edx,eax
c000ecf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecf4:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000ecf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecfc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ed00:	0f b7 c0             	movzx  eax,ax
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	50                   	push   eax
c000ed07:	e8 10 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ed0c:	83 c4 10             	add    esp,0x10
c000ed0f:	89 c2                	mov    edx,eax
c000ed11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed15:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000ed19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed1d:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ed23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed27:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ed2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed31:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ed34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed38:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ed3c:	0f b7 c0             	movzx  eax,ax
c000ed3f:	01 c2                	add    edx,eax
c000ed41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed45:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ed48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ed4c:	83 c4 2c             	add    esp,0x2c
c000ed4f:	c3                   	ret    

c000ed50 <tcp_create_segment>:
c000ed50:	53                   	push   ebx
c000ed51:	83 ec 28             	sub    esp,0x28
c000ed54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed58:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed5c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed60:	88 d0                	mov    al,dl
c000ed62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ed66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ed6b:	c1 e0 02             	shl    eax,0x2
c000ed6e:	83 e0 04             	and    eax,0x4
c000ed71:	88 c2                	mov    dl,al
c000ed73:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ed78:	83 e0 02             	and    eax,0x2
c000ed7b:	74 07                	je     c000ed84 <tcp_create_segment+0x34>
c000ed7d:	b0 0c                	mov    al,0xc
c000ed7f:	eb 07                	jmp    c000ed88 <tcp_create_segment+0x38>
c000ed81:	8d 76 00             	lea    esi,[esi+0x0]
c000ed84:	b0 00                	mov    al,0x0
c000ed86:	66 90                	xchg   ax,ax
c000ed88:	01 d0                	add    eax,edx
c000ed8a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed8e:	83 ec 0c             	sub    esp,0xc
c000ed91:	6a 04                	push   0x4
c000ed93:	e8 90 8d ff ff       	call   c0007b28 <memp_malloc>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed9f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eda4:	75 1a                	jne    c000edc0 <tcp_create_segment+0x70>
c000eda6:	83 ec 0c             	sub    esp,0xc
c000eda9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000edad:	e8 62 97 ff ff       	call   c0008514 <pbuf_free>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	b8 00 00 00 00       	mov    eax,0x0
c000edba:	e9 31 01 00 00       	jmp    c000eef0 <tcp_create_segment+0x1a0>
c000edbf:	90                   	nop
c000edc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc4:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000edc8:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000edcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ede0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ede4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ede7:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edec:	89 d1                	mov    ecx,edx
c000edee:	29 c1                	sub    ecx,eax
c000edf0:	89 c8                	mov    eax,ecx
c000edf2:	89 c2                	mov    edx,eax
c000edf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000edfc:	83 ec 08             	sub    esp,0x8
c000edff:	6a 14                	push   0x14
c000ee01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ee05:	e8 6a 95 ff ff       	call   c0008374 <pbuf_header>
c000ee0a:	83 c4 10             	add    esp,0x10
c000ee0d:	0f b6 c0             	movzx  eax,al
c000ee10:	85 c0                	test   eax,eax
c000ee12:	74 28                	je     c000ee3c <tcp_create_segment+0xec>
c000ee14:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ee1a:	83 c0 01             	add    eax,0x1
c000ee1d:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ee23:	83 ec 0c             	sub    esp,0xc
c000ee26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ee2a:	e8 71 b3 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ee2f:	83 c4 10             	add    esp,0x10
c000ee32:	b8 00 00 00 00       	mov    eax,0x0
c000ee37:	e9 b4 00 00 00       	jmp    c000eef0 <tcp_create_segment+0x1a0>
c000ee3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee4a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ee4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ee54:	0f b7 c0             	movzx  eax,ax
c000ee57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee5b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	50                   	push   eax
c000ee62:	e8 b5 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ee67:	83 c4 10             	add    esp,0x10
c000ee6a:	66 89 03             	mov    WORD PTR [ebx],ax
c000ee6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee71:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ee75:	0f b7 c0             	movzx  eax,ax
c000ee78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee7c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee7f:	83 ec 0c             	sub    esp,0xc
c000ee82:	50                   	push   eax
c000ee83:	e8 94 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ee88:	83 c4 10             	add    esp,0x10
c000ee8b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee93:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee96:	83 ec 0c             	sub    esp,0xc
c000ee99:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee9d:	e8 9e 1d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000eea8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eead:	c1 e8 02             	shr    eax,0x2
c000eeb0:	0f b6 c0             	movzx  eax,al
c000eeb3:	83 c0 05             	add    eax,0x5
c000eeb6:	c1 e0 0c             	shl    eax,0xc
c000eeb9:	89 c2                	mov    edx,eax
c000eebb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000eec0:	09 d0                	or     eax,edx
c000eec2:	0f b7 c0             	movzx  eax,ax
c000eec5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eec9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000eecc:	83 ec 0c             	sub    esp,0xc
c000eecf:	50                   	push   eax
c000eed0:	e8 47 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eed5:	83 c4 10             	add    esp,0x10
c000eed8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000eedc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eee0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eee3:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eeed:	8d 76 00             	lea    esi,[esi+0x0]
c000eef0:	83 c4 28             	add    esp,0x28
c000eef3:	5b                   	pop    ebx
c000eef4:	c3                   	ret    
c000eef5:	8d 76 00             	lea    esi,[esi+0x0]

c000eef8 <tcp_pbuf_prealloc>:
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 28             	sub    esp,0x28
c000eefc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ef00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef04:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef08:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ef0c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ef11:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ef16:	88 d8                	mov    al,bl
c000ef18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ef1c:	88 c8                	mov    al,cl
c000ef1e:	88 04 24             	mov    BYTE PTR [esp],al
c000ef21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef25:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef2a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ef2f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef34:	39 c2                	cmp    edx,eax
c000ef36:	73 64                	jae    c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ef3d:	83 e0 02             	and    eax,0x2
c000ef40:	75 2e                	jne    c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef46:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ef49:	0f b6 c0             	movzx  eax,al
c000ef4c:	83 e0 40             	and    eax,0x40
c000ef4f:	75 4b                	jne    c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef51:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef55:	85 c0                	test   eax,eax
c000ef57:	74 17                	je     c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef5d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef60:	85 c0                	test   eax,eax
c000ef62:	75 0c                	jne    c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef68:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef6b:	85 c0                	test   eax,eax
c000ef6d:	74 2d                	je     c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef6f:	90                   	nop
c000ef70:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ef75:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ef7b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef80:	39 c2                	cmp    edx,eax
c000ef82:	7d 0c                	jge    c000ef90 <tcp_pbuf_prealloc+0x98>
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	05 18 02 00 00       	add    eax,0x218
c000ef8d:	eb 05                	jmp    c000ef94 <tcp_pbuf_prealloc+0x9c>
c000ef8f:	90                   	nop
c000ef90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef94:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000efa1:	83 ec 04             	sub    esp,0x4
c000efa4:	6a 00                	push   0x0
c000efa6:	50                   	push   eax
c000efa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000efab:	e8 40 97 ff ff       	call   c00086f0 <pbuf_alloc>
c000efb0:	83 c4 10             	add    esp,0x10
c000efb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efb7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efbc:	75 0a                	jne    c000efc8 <tcp_pbuf_prealloc+0xd0>
c000efbe:	b8 00 00 00 00       	mov    eax,0x0
c000efc3:	eb 5f                	jmp    c000f024 <tcp_pbuf_prealloc+0x12c>
c000efc5:	8d 76 00             	lea    esi,[esi+0x0]
c000efc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000efce:	85 c0                	test   eax,eax
c000efd0:	74 16                	je     c000efe8 <tcp_pbuf_prealloc+0xf0>
c000efd2:	83 ec 08             	sub    esp,0x8
c000efd5:	68 c4 0c 03 c0       	push   0xc0030cc4
c000efda:	68 26 fe 02 c0       	push   0xc002fe26
c000efdf:	e8 1c 0e 01 00       	call   c001fe00 <CPrintf>
c000efe4:	83 c4 10             	add    esp,0x10
c000efe7:	90                   	nop
c000efe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efec:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000eff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eff4:	89 d1                	mov    ecx,edx
c000eff6:	29 c1                	sub    ecx,eax
c000eff8:	89 c8                	mov    eax,ecx
c000effa:	89 c2                	mov    edx,eax
c000effc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f000:	66 89 10             	mov    WORD PTR [eax],dx
c000f003:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f007:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f00b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f00f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f013:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f016:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f01a:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f01e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f022:	66 90                	xchg   ax,ax
c000f024:	83 c4 28             	add    esp,0x28
c000f027:	5b                   	pop    ebx
c000f028:	c3                   	ret    
c000f029:	8d 76 00             	lea    esi,[esi+0x0]

c000f02c <tcp_write_checks>:
c000f02c:	83 ec 1c             	sub    esp,0x1c
c000f02f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f033:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f03f:	83 f8 04             	cmp    eax,0x4
c000f042:	74 2c                	je     c000f070 <tcp_write_checks+0x44>
c000f044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f048:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f04b:	83 f8 07             	cmp    eax,0x7
c000f04e:	74 20                	je     c000f070 <tcp_write_checks+0x44>
c000f050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f057:	83 f8 02             	cmp    eax,0x2
c000f05a:	74 14                	je     c000f070 <tcp_write_checks+0x44>
c000f05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f060:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f063:	83 f8 03             	cmp    eax,0x3
c000f066:	74 08                	je     c000f070 <tcp_write_checks+0x44>
c000f068:	b0 f3                	mov    al,0xf3
c000f06a:	e9 f9 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f06f:	90                   	nop
c000f070:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f075:	85 c0                	test   eax,eax
c000f077:	75 07                	jne    c000f080 <tcp_write_checks+0x54>
c000f079:	b0 00                	mov    al,0x0
c000f07b:	e9 e8 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f084:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f088:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f08d:	0f b7 c0             	movzx  eax,ax
c000f090:	39 c2                	cmp    edx,eax
c000f092:	76 1c                	jbe    c000f0b0 <tcp_write_checks+0x84>
c000f094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f098:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f09b:	83 c8 80             	or     eax,0xffffff80
c000f09e:	88 c2                	mov    dl,al
c000f0a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0a4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f0a7:	b0 ff                	mov    al,0xff
c000f0a9:	e9 ba 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f0ae:	66 90                	xchg   ax,ax
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0b7:	0f b7 c0             	movzx  eax,ax
c000f0ba:	83 f8 01             	cmp    eax,0x1
c000f0bd:	77 11                	ja     c000f0d0 <tcp_write_checks+0xa4>
c000f0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0c3:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0c6:	0f b7 c0             	movzx  eax,ax
c000f0c9:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f0ce:	76 28                	jbe    c000f0f8 <tcp_write_checks+0xcc>
c000f0d0:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f0d6:	83 c0 01             	add    eax,0x1
c000f0d9:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f0df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0e3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f0e6:	83 c8 80             	or     eax,0xffffff80
c000f0e9:	88 c2                	mov    dl,al
c000f0eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0ef:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f0f2:	b0 ff                	mov    al,0xff
c000f0f4:	eb 72                	jmp    c000f168 <tcp_write_checks+0x13c>
c000f0f6:	66 90                	xchg   ax,ax
c000f0f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0fc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0ff:	0f b7 c0             	movzx  eax,ax
c000f102:	85 c0                	test   eax,eax
c000f104:	74 2e                	je     c000f134 <tcp_write_checks+0x108>
c000f106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f10a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f10d:	85 c0                	test   eax,eax
c000f10f:	75 53                	jne    c000f164 <tcp_write_checks+0x138>
c000f111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f115:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f118:	85 c0                	test   eax,eax
c000f11a:	75 48                	jne    c000f164 <tcp_write_checks+0x138>
c000f11c:	83 ec 08             	sub    esp,0x8
c000f11f:	68 70 0a 03 c0       	push   0xc0030a70
c000f124:	68 26 fe 02 c0       	push   0xc002fe26
c000f129:	e8 d2 0c 01 00       	call   c001fe00 <CPrintf>
c000f12e:	83 c4 10             	add    esp,0x10
c000f131:	eb 31                	jmp    c000f164 <tcp_write_checks+0x138>
c000f133:	90                   	nop
c000f134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f13b:	85 c0                	test   eax,eax
c000f13d:	75 0d                	jne    c000f14c <tcp_write_checks+0x120>
c000f13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f143:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f146:	85 c0                	test   eax,eax
c000f148:	74 1a                	je     c000f164 <tcp_write_checks+0x138>
c000f14a:	66 90                	xchg   ax,ax
c000f14c:	83 ec 08             	sub    esp,0x8
c000f14f:	68 ac 0a 03 c0       	push   0xc0030aac
c000f154:	68 26 fe 02 c0       	push   0xc002fe26
c000f159:	e8 a2 0c 01 00       	call   c001fe00 <CPrintf>
c000f15e:	83 c4 10             	add    esp,0x10
c000f161:	8d 76 00             	lea    esi,[esi+0x0]
c000f164:	b0 00                	mov    al,0x0
c000f166:	66 90                	xchg   ax,ax
c000f168:	83 c4 1c             	add    esp,0x1c
c000f16b:	c3                   	ret    

c000f16c <tcp_write>:
c000f16c:	56                   	push   esi
c000f16d:	53                   	push   ebx
c000f16e:	83 ec 54             	sub    esp,0x54
c000f171:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f175:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f179:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f17e:	88 d0                	mov    al,dl
c000f180:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f184:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f18c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f194:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f19c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f1a4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f1ac:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f1b3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f1b8:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f1bd:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f1c4:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f1cb:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f1d0:	75 1e                	jne    c000f1f0 <tcp_write+0x84>
c000f1d2:	83 ec 08             	sub    esp,0x8
c000f1d5:	68 e0 0a 03 c0       	push   0xc0030ae0
c000f1da:	68 26 fe 02 c0       	push   0xc002fe26
c000f1df:	e8 1c 0c 01 00       	call   c001fe00 <CPrintf>
c000f1e4:	83 c4 10             	add    esp,0x10
c000f1e7:	b0 f2                	mov    al,0xf2
c000f1e9:	e9 1e 08 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f1ee:	66 90                	xchg   ax,ax
c000f1f0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f1f5:	83 ec 08             	sub    esp,0x8
c000f1f8:	50                   	push   eax
c000f1f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1fd:	e8 2a fe ff ff       	call   c000f02c <tcp_write_checks>
c000f202:	83 c4 10             	add    esp,0x10
c000f205:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f209:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f20e:	85 c0                	test   eax,eax
c000f210:	74 0a                	je     c000f21c <tcp_write+0xb0>
c000f212:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f216:	e9 f1 07 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f21b:	90                   	nop
c000f21c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f220:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f223:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f228:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f22f:	85 c0                	test   eax,eax
c000f231:	0f 84 79 02 00 00    	je     c000f4b0 <tcp_write+0x344>
c000f237:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f23b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f23e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f242:	eb 0c                	jmp    c000f250 <tcp_write+0xe4>
c000f244:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f248:	8b 00                	mov    eax,DWORD PTR [eax]
c000f24a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f24e:	66 90                	xchg   ax,ax
c000f250:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f254:	8b 00                	mov    eax,DWORD PTR [eax]
c000f256:	85 c0                	test   eax,eax
c000f258:	75 ea                	jne    c000f244 <tcp_write+0xd8>
c000f25a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f25e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f261:	0f b6 c0             	movzx  eax,al
c000f264:	c1 e0 02             	shl    eax,0x2
c000f267:	83 e0 04             	and    eax,0x4
c000f26a:	89 c2                	mov    edx,eax
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f273:	0f b6 c0             	movzx  eax,al
c000f276:	83 e0 02             	and    eax,0x2
c000f279:	74 09                	je     c000f284 <tcp_write+0x118>
c000f27b:	b8 0c 00 00 00       	mov    eax,0xc
c000f280:	eb 0a                	jmp    c000f28c <tcp_write+0x120>
c000f282:	66 90                	xchg   ax,ax
c000f284:	b8 00 00 00 00       	mov    eax,0x0
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	01 d0                	add    eax,edx
c000f28e:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f293:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f297:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f29a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f29e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f2a1:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f2a6:	01 c8                	add    eax,ecx
c000f2a8:	89 d6                	mov    esi,edx
c000f2aa:	29 c6                	sub    esi,eax
c000f2ac:	89 f0                	mov    eax,esi
c000f2ae:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2b7:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f2bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2c0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2c5:	0f b7 c0             	movzx  eax,ax
c000f2c8:	85 c0                	test   eax,eax
c000f2ca:	0f 84 84 00 00 00    	je     c000f354 <tcp_write+0x1e8>
c000f2d0:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f2d5:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f2da:	39 c2                	cmp    edx,eax
c000f2dc:	76 16                	jbe    c000f2f4 <tcp_write+0x188>
c000f2de:	83 ec 08             	sub    esp,0x8
c000f2e1:	68 14 0b 03 c0       	push   0xc0030b14
c000f2e6:	68 26 fe 02 c0       	push   0xc002fe26
c000f2eb:	e8 10 0b 01 00       	call   c001fe00 <CPrintf>
c000f2f0:	83 c4 10             	add    esp,0x10
c000f2f3:	90                   	nop
c000f2f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f2f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2fc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f305:	0f b7 d8             	movzx  ebx,ax
c000f308:	0f b7 ca             	movzx  ecx,dx
c000f30b:	39 cb                	cmp    ebx,ecx
c000f30d:	76 05                	jbe    c000f314 <tcp_write+0x1a8>
c000f30f:	89 d0                	mov    eax,edx
c000f311:	8d 76 00             	lea    esi,[esi+0x0]
c000f314:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f319:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f31e:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f323:	01 d0                	add    eax,edx
c000f325:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f32a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f32f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f334:	89 d6                	mov    esi,edx
c000f336:	29 c6                	sub    esi,eax
c000f338:	89 f0                	mov    eax,esi
c000f33a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f33f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f343:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f348:	89 d6                	mov    esi,edx
c000f34a:	29 c6                	sub    esi,eax
c000f34c:	89 f0                	mov    eax,esi
c000f34e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f353:	90                   	nop
c000f354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f359:	0f b7 c0             	movzx  eax,ax
c000f35c:	85 c0                	test   eax,eax
c000f35e:	74 24                	je     c000f384 <tcp_write+0x218>
c000f360:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f365:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f36a:	39 c2                	cmp    edx,eax
c000f36c:	74 16                	je     c000f384 <tcp_write+0x218>
c000f36e:	83 ec 08             	sub    esp,0x8
c000f371:	68 d8 0c 03 c0       	push   0xc0030cd8
c000f376:	68 26 fe 02 c0       	push   0xc002fe26
c000f37b:	e8 80 0a 01 00       	call   c001fe00 <CPrintf>
c000f380:	83 c4 10             	add    esp,0x10
c000f383:	90                   	nop
c000f384:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f389:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f38e:	39 c2                	cmp    edx,eax
c000f390:	0f 83 ca 03 00 00    	jae    c000f760 <tcp_write+0x5f4>
c000f396:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f39b:	85 c0                	test   eax,eax
c000f39d:	0f 84 bd 03 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f3a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f3a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f3aa:	0f b7 c0             	movzx  eax,ax
c000f3ad:	85 c0                	test   eax,eax
c000f3af:	0f 84 ab 03 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f3b5:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f3ba:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f3bf:	29 c2                	sub    edx,eax
c000f3c1:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f3c6:	39 c2                	cmp    edx,eax
c000f3c8:	0f 4e c2             	cmovle eax,edx
c000f3cb:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f3d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f3d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f3dd:	83 e0 01             	and    eax,0x1
c000f3e0:	74 62                	je     c000f444 <tcp_write+0x2d8>
c000f3e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f3e7:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f3ec:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3f1:	83 ec 04             	sub    esp,0x4
c000f3f4:	6a 01                	push   0x1
c000f3f6:	51                   	push   ecx
c000f3f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f3fb:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f3ff:	51                   	push   ecx
c000f400:	52                   	push   edx
c000f401:	50                   	push   eax
c000f402:	6a 03                	push   0x3
c000f404:	e8 ef fa ff ff       	call   c000eef8 <tcp_pbuf_prealloc>
c000f409:	83 c4 20             	add    esp,0x20
c000f40c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f410:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f415:	0f 84 4d 05 00 00    	je     c000f968 <tcp_write+0x7fc>
c000f41b:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f420:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f425:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f429:	01 c1                	add    ecx,eax
c000f42b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f42f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f432:	83 ec 04             	sub    esp,0x4
c000f435:	52                   	push   edx
c000f436:	51                   	push   ecx
c000f437:	50                   	push   eax
c000f438:	e8 3d 0f ff ff       	call   c000037a <memcpy>
c000f43d:	83 c4 10             	add    esp,0x10
c000f440:	eb 3a                	jmp    c000f47c <tcp_write+0x310>
c000f442:	66 90                	xchg   ax,ax
c000f444:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f449:	83 ec 04             	sub    esp,0x4
c000f44c:	6a 01                	push   0x1
c000f44e:	50                   	push   eax
c000f44f:	6a 03                	push   0x3
c000f451:	e8 9a 92 ff ff       	call   c00086f0 <pbuf_alloc>
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f45d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f462:	0f 84 04 05 00 00    	je     c000f96c <tcp_write+0x800>
c000f468:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f46d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f471:	01 c2                	add    edx,eax
c000f473:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f477:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f47a:	66 90                	xchg   ax,ax
c000f47c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f481:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f485:	01 d0                	add    eax,edx
c000f487:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f48c:	83 ec 0c             	sub    esp,0xc
c000f48f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f493:	e8 58 98 ff ff       	call   c0008cf0 <pbuf_clen>
c000f498:	83 c4 10             	add    esp,0x10
c000f49b:	0f b6 c0             	movzx  eax,al
c000f49e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f4a2:	01 d0                	add    eax,edx
c000f4a4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f4a9:	e9 b2 02 00 00       	jmp    c000f760 <tcp_write+0x5f4>
c000f4ae:	66 90                	xchg   ax,ax
c000f4b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4b4:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f4b8:	0f b7 c0             	movzx  eax,ax
c000f4bb:	85 c0                	test   eax,eax
c000f4bd:	0f 84 9d 02 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f4c3:	83 ec 08             	sub    esp,0x8
c000f4c6:	68 34 0b 03 c0       	push   0xc0030b34
c000f4cb:	68 26 fe 02 c0       	push   0xc002fe26
c000f4d0:	e8 2b 09 01 00       	call   c001fe00 <CPrintf>
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	e9 83 02 00 00       	jmp    c000f760 <tcp_write+0x5f4>
c000f4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4e4:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f4e9:	89 d3                	mov    ebx,edx
c000f4eb:	29 c3                	sub    ebx,eax
c000f4ed:	89 d8                	mov    eax,ebx
c000f4ef:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f4f4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4f8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f4fb:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f500:	89 d6                	mov    esi,edx
c000f502:	29 c6                	sub    esi,eax
c000f504:	89 f0                	mov    eax,esi
c000f506:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f50b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f50f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f514:	0f b7 d8             	movzx  ebx,ax
c000f517:	0f b7 ca             	movzx  ecx,dx
c000f51a:	39 cb                	cmp    ebx,ecx
c000f51c:	76 02                	jbe    c000f520 <tcp_write+0x3b4>
c000f51e:	89 d0                	mov    eax,edx
c000f520:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f525:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f52a:	83 e0 01             	and    eax,0x1
c000f52d:	0f 84 b1 00 00 00    	je     c000f5e4 <tcp_write+0x478>
c000f533:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f538:	0f 94 c0             	sete   al
c000f53b:	0f b6 d8             	movzx  ebx,al
c000f53e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f543:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f547:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f54a:	0f b7 d0             	movzx  edx,ax
c000f54d:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f552:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f557:	01 f0                	add    eax,esi
c000f559:	0f b7 c0             	movzx  eax,ax
c000f55c:	83 ec 04             	sub    esp,0x4
c000f55f:	53                   	push   ebx
c000f560:	51                   	push   ecx
c000f561:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f565:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f569:	51                   	push   ecx
c000f56a:	52                   	push   edx
c000f56b:	50                   	push   eax
c000f56c:	6a 00                	push   0x0
c000f56e:	e8 85 f9 ff ff       	call   c000eef8 <tcp_pbuf_prealloc>
c000f573:	83 c4 20             	add    esp,0x20
c000f576:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f57a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f57f:	0f 84 eb 03 00 00    	je     c000f970 <tcp_write+0x804>
c000f585:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f589:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f58d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f592:	0f b7 c0             	movzx  eax,ax
c000f595:	39 c2                	cmp    edx,eax
c000f597:	76 17                	jbe    c000f5b0 <tcp_write+0x444>
c000f599:	83 ec 08             	sub    esp,0x8
c000f59c:	68 64 0b 03 c0       	push   0xc0030b64
c000f5a1:	68 26 fe 02 c0       	push   0xc002fe26
c000f5a6:	e8 55 08 01 00       	call   c001fe00 <CPrintf>
c000f5ab:	83 c4 10             	add    esp,0x10
c000f5ae:	66 90                	xchg   ax,ax
c000f5b0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f5b5:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f5ba:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f5be:	01 d1                	add    ecx,edx
c000f5c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f5c4:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f5c7:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f5cc:	01 da                	add    edx,ebx
c000f5ce:	83 ec 04             	sub    esp,0x4
c000f5d1:	50                   	push   eax
c000f5d2:	51                   	push   ecx
c000f5d3:	52                   	push   edx
c000f5d4:	e8 a1 0d ff ff       	call   c000037a <memcpy>
c000f5d9:	83 c4 10             	add    esp,0x10
c000f5dc:	e9 a7 00 00 00       	jmp    c000f688 <tcp_write+0x51c>
c000f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5e4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f5e9:	0f b7 c0             	movzx  eax,ax
c000f5ec:	85 c0                	test   eax,eax
c000f5ee:	74 18                	je     c000f608 <tcp_write+0x49c>
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	68 f6 0c 03 c0       	push   0xc0030cf6
c000f5f8:	68 26 fe 02 c0       	push   0xc002fe26
c000f5fd:	e8 fe 07 01 00       	call   c001fe00 <CPrintf>
c000f602:	83 c4 10             	add    esp,0x10
c000f605:	8d 76 00             	lea    esi,[esi+0x0]
c000f608:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f60d:	83 ec 04             	sub    esp,0x4
c000f610:	6a 01                	push   0x1
c000f612:	50                   	push   eax
c000f613:	6a 00                	push   0x0
c000f615:	e8 d6 90 ff ff       	call   c00086f0 <pbuf_alloc>
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f621:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f626:	0f 84 48 03 00 00    	je     c000f974 <tcp_write+0x808>
c000f62c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f631:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f635:	01 c2                	add    edx,eax
c000f637:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f63b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f63e:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f643:	83 ec 04             	sub    esp,0x4
c000f646:	6a 00                	push   0x0
c000f648:	50                   	push   eax
c000f649:	6a 00                	push   0x0
c000f64b:	e8 a0 90 ff ff       	call   c00086f0 <pbuf_alloc>
c000f650:	83 c4 10             	add    esp,0x10
c000f653:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f657:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f65c:	75 16                	jne    c000f674 <tcp_write+0x508>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f665:	e8 aa 8e ff ff       	call   c0008514 <pbuf_free>
c000f66a:	83 c4 10             	add    esp,0x10
c000f66d:	e9 0a 03 00 00       	jmp    c000f97c <tcp_write+0x810>
c000f672:	66 90                	xchg   ax,ax
c000f674:	83 ec 08             	sub    esp,0x8
c000f677:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f67b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f67f:	e8 d4 96 ff ff       	call   c0008d58 <pbuf_cat>
c000f684:	83 c4 10             	add    esp,0x10
c000f687:	90                   	nop
c000f688:	83 ec 0c             	sub    esp,0xc
c000f68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f68f:	e8 5c 96 ff ff       	call   c0008cf0 <pbuf_clen>
c000f694:	83 c4 10             	add    esp,0x10
c000f697:	0f b6 c0             	movzx  eax,al
c000f69a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f69e:	01 d0                	add    eax,edx
c000f6a0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f6a5:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f6aa:	83 f8 02             	cmp    eax,0x2
c000f6ad:	77 0d                	ja     c000f6bc <tcp_write+0x550>
c000f6af:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f6b4:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f6b9:	76 15                	jbe    c000f6d0 <tcp_write+0x564>
c000f6bb:	90                   	nop
c000f6bc:	83 ec 0c             	sub    esp,0xc
c000f6bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f6c3:	e8 4c 8e ff ff       	call   c0008514 <pbuf_free>
c000f6c8:	83 c4 10             	add    esp,0x10
c000f6cb:	e9 ac 02 00 00       	jmp    c000f97c <tcp_write+0x810>
c000f6d0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f6d5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6d9:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	01 ca                	add    edx,ecx
c000f6e3:	83 ec 0c             	sub    esp,0xc
c000f6e6:	50                   	push   eax
c000f6e7:	52                   	push   edx
c000f6e8:	6a 00                	push   0x0
c000f6ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f6ee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f6f2:	e8 59 f6 ff ff       	call   c000ed50 <tcp_create_segment>
c000f6f7:	83 c4 20             	add    esp,0x20
c000f6fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f6fe:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f703:	0f 84 6f 02 00 00    	je     c000f978 <tcp_write+0x80c>
c000f709:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f70e:	75 0c                	jne    c000f71c <tcp_write+0x5b0>
c000f710:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f714:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f718:	eb 2a                	jmp    c000f744 <tcp_write+0x5d8>
c000f71a:	66 90                	xchg   ax,ax
c000f71c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f721:	75 15                	jne    c000f738 <tcp_write+0x5cc>
c000f723:	83 ec 08             	sub    esp,0x8
c000f726:	68 04 0d 03 c0       	push   0xc0030d04
c000f72b:	68 26 fe 02 c0       	push   0xc002fe26
c000f730:	e8 cb 06 01 00       	call   c001fe00 <CPrintf>
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f73c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f740:	89 10                	mov    DWORD PTR [eax],edx
c000f742:	66 90                	xchg   ax,ax
c000f744:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f748:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f74c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f751:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f756:	01 d0                	add    eax,edx
c000f758:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f75d:	8d 76 00             	lea    esi,[esi+0x0]
c000f760:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f765:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f76a:	39 c2                	cmp    edx,eax
c000f76c:	0f 82 6e fd ff ff    	jb     c000f4e0 <tcp_write+0x374>
c000f772:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f777:	85 c0                	test   eax,eax
c000f779:	0f 84 a1 00 00 00    	je     c000f820 <tcp_write+0x6b4>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f786:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f78a:	eb 74                	jmp    c000f800 <tcp_write+0x694>
c000f78c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f790:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f793:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f798:	01 d0                	add    eax,edx
c000f79a:	89 c2                	mov    edx,eax
c000f79c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7a0:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f7a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7aa:	85 c0                	test   eax,eax
c000f7ac:	75 46                	jne    c000f7f4 <tcp_write+0x688>
c000f7ae:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f7b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7b7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f7ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7be:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f7c2:	0f b7 d2             	movzx  edx,dx
c000f7c5:	01 ca                	add    edx,ecx
c000f7c7:	83 ec 04             	sub    esp,0x4
c000f7ca:	50                   	push   eax
c000f7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f7cf:	52                   	push   edx
c000f7d0:	e8 a5 0b ff ff       	call   c000037a <memcpy>
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f7e0:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f7e5:	01 d0                	add    eax,edx
c000f7e7:	89 c2                	mov    edx,eax
c000f7e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ed:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f7fe:	66 90                	xchg   ax,ax
c000f800:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f805:	75 85                	jne    c000f78c <tcp_write+0x620>
c000f807:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f80b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f80e:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f813:	01 d0                	add    eax,edx
c000f815:	89 c2                	mov    edx,eax
c000f817:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f81b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f81f:	90                   	nop
c000f820:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f825:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f829:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f82d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f832:	74 50                	je     c000f884 <tcp_write+0x718>
c000f834:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f839:	75 15                	jne    c000f850 <tcp_write+0x6e4>
c000f83b:	83 ec 08             	sub    esp,0x8
c000f83e:	68 a4 0b 03 c0       	push   0xc0030ba4
c000f843:	68 26 fe 02 c0       	push   0xc002fe26
c000f848:	e8 b3 05 01 00       	call   c001fe00 <CPrintf>
c000f84d:	83 c4 10             	add    esp,0x10
c000f850:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f857:	83 ec 08             	sub    esp,0x8
c000f85a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f85e:	50                   	push   eax
c000f85f:	e8 f4 94 ff ff       	call   c0008d58 <pbuf_cat>
c000f864:	83 c4 10             	add    esp,0x10
c000f867:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f86b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f86e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f875:	01 d0                	add    eax,edx
c000f877:	89 c2                	mov    edx,eax
c000f879:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f87d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f881:	8d 76 00             	lea    esi,[esi+0x0]
c000f884:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f889:	75 0d                	jne    c000f898 <tcp_write+0x72c>
c000f88b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f88f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f893:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f896:	eb 0c                	jmp    c000f8a4 <tcp_write+0x738>
c000f898:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f89c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f8a0:	89 10                	mov    DWORD PTR [eax],edx
c000f8a2:	66 90                	xchg   ax,ax
c000f8a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8a8:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f8ab:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f8b0:	01 c2                	add    edx,eax
c000f8b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8b6:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f8b9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8bd:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8c5:	89 d3                	mov    ebx,edx
c000f8c7:	29 c3                	sub    ebx,eax
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	89 c2                	mov    edx,eax
c000f8cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8d1:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f8d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8d9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f8dd:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f8e1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8e5:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f8e8:	0f b7 c0             	movzx  eax,ax
c000f8eb:	85 c0                	test   eax,eax
c000f8ed:	74 2d                	je     c000f91c <tcp_write+0x7b0>
c000f8ef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f8f6:	85 c0                	test   eax,eax
c000f8f8:	75 22                	jne    c000f91c <tcp_write+0x7b0>
c000f8fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8fe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f901:	85 c0                	test   eax,eax
c000f903:	75 17                	jne    c000f91c <tcp_write+0x7b0>
c000f905:	83 ec 08             	sub    esp,0x8
c000f908:	68 15 0d 03 c0       	push   0xc0030d15
c000f90d:	68 26 fe 02 c0       	push   0xc002fe26
c000f912:	e8 e9 04 01 00       	call   c001fe00 <CPrintf>
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	66 90                	xchg   ax,ax
c000f91c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f921:	74 3d                	je     c000f960 <tcp_write+0x7f4>
c000f923:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f927:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f92a:	85 c0                	test   eax,eax
c000f92c:	74 32                	je     c000f960 <tcp_write+0x7f4>
c000f92e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f933:	83 e0 02             	and    eax,0x2
c000f936:	75 28                	jne    c000f960 <tcp_write+0x7f4>
c000f938:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f93c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f93f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f943:	83 ec 0c             	sub    esp,0xc
c000f946:	6a 08                	push   0x8
c000f948:	e8 cf 12 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	89 c2                	mov    edx,eax
c000f952:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f959:	09 da                	or     edx,ebx
c000f95b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f95f:	90                   	nop
c000f960:	b0 00                	mov    al,0x0
c000f962:	e9 a5 00 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f967:	90                   	nop
c000f968:	90                   	nop
c000f969:	eb 11                	jmp    c000f97c <tcp_write+0x810>
c000f96b:	90                   	nop
c000f96c:	90                   	nop
c000f96d:	eb 0d                	jmp    c000f97c <tcp_write+0x810>
c000f96f:	90                   	nop
c000f970:	90                   	nop
c000f971:	eb 09                	jmp    c000f97c <tcp_write+0x810>
c000f973:	90                   	nop
c000f974:	90                   	nop
c000f975:	eb 05                	jmp    c000f97c <tcp_write+0x810>
c000f977:	90                   	nop
c000f978:	90                   	nop
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f980:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f983:	83 c8 80             	or     eax,0xffffff80
c000f986:	88 c2                	mov    dl,al
c000f988:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f98c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f98f:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f995:	83 c0 01             	add    eax,0x1
c000f998:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f99e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f9a3:	74 0f                	je     c000f9b4 <tcp_write+0x848>
c000f9a5:	83 ec 0c             	sub    esp,0xc
c000f9a8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f9ac:	e8 63 8b ff ff       	call   c0008514 <pbuf_free>
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f9b9:	74 11                	je     c000f9cc <tcp_write+0x860>
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f9c2:	e8 1d a8 ff ff       	call   c000a1e4 <tcp_segs_free>
c000f9c7:	83 c4 10             	add    esp,0x10
c000f9ca:	66 90                	xchg   ax,ax
c000f9cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9d0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d3:	0f b7 c0             	movzx  eax,ax
c000f9d6:	85 c0                	test   eax,eax
c000f9d8:	74 2e                	je     c000fa08 <tcp_write+0x89c>
c000f9da:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9de:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f9e1:	85 c0                	test   eax,eax
c000f9e3:	75 23                	jne    c000fa08 <tcp_write+0x89c>
c000f9e5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9e9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9ec:	85 c0                	test   eax,eax
c000f9ee:	75 18                	jne    c000fa08 <tcp_write+0x89c>
c000f9f0:	83 ec 08             	sub    esp,0x8
c000f9f3:	68 15 0d 03 c0       	push   0xc0030d15
c000f9f8:	68 26 fe 02 c0       	push   0xc002fe26
c000f9fd:	e8 fe 03 01 00       	call   c001fe00 <CPrintf>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	b0 ff                	mov    al,0xff
c000fa0a:	66 90                	xchg   ax,ax
c000fa0c:	83 c4 54             	add    esp,0x54
c000fa0f:	5b                   	pop    ebx
c000fa10:	5e                   	pop    esi
c000fa11:	c3                   	ret    
c000fa12:	66 90                	xchg   ax,ax

c000fa14 <tcp_enqueue_flags>:
c000fa14:	83 ec 3c             	sub    esp,0x3c
c000fa17:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fa1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000fa1f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000fa24:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000fa29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa2e:	83 e0 03             	and    eax,0x3
c000fa31:	75 15                	jne    c000fa48 <tcp_enqueue_flags+0x34>
c000fa33:	83 ec 08             	sub    esp,0x8
c000fa36:	68 dc 0b 03 c0       	push   0xc0030bdc
c000fa3b:	68 26 fe 02 c0       	push   0xc002fe26
c000fa40:	e8 bb 03 01 00       	call   c001fe00 <CPrintf>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa4c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa4f:	0f b7 c0             	movzx  eax,ax
c000fa52:	83 f8 01             	cmp    eax,0x1
c000fa55:	77 11                	ja     c000fa68 <tcp_enqueue_flags+0x54>
c000fa57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa5b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa5e:	0f b7 c0             	movzx  eax,ax
c000fa61:	3d fc ff 00 00       	cmp    eax,0xfffc
c000fa66:	76 2c                	jbe    c000fa94 <tcp_enqueue_flags+0x80>
c000fa68:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa6e:	83 c0 01             	add    eax,0x1
c000fa71:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fa77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa7b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa7e:	83 c8 80             	or     eax,0xffffff80
c000fa81:	88 c2                	mov    dl,al
c000fa83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa87:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa8a:	b0 ff                	mov    al,0xff
c000fa8c:	e9 6f 02 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fa91:	8d 76 00             	lea    esi,[esi+0x0]
c000fa94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa99:	83 e0 02             	and    eax,0x2
c000fa9c:	74 06                	je     c000faa4 <tcp_enqueue_flags+0x90>
c000fa9e:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000faa3:	90                   	nop
c000faa4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000faa9:	c1 e0 02             	shl    eax,0x2
c000faac:	83 e0 04             	and    eax,0x4
c000faaf:	88 c2                	mov    dl,al
c000fab1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fab6:	83 e0 02             	and    eax,0x2
c000fab9:	74 05                	je     c000fac0 <tcp_enqueue_flags+0xac>
c000fabb:	b0 0c                	mov    al,0xc
c000fabd:	eb 05                	jmp    c000fac4 <tcp_enqueue_flags+0xb0>
c000fabf:	90                   	nop
c000fac0:	b0 00                	mov    al,0x0
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	01 d0                	add    eax,edx
c000fac6:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000faca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000face:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fad2:	0f b7 c0             	movzx  eax,ax
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 17                	jne    c000faf0 <tcp_enqueue_flags+0xdc>
c000fad9:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fadf:	83 c0 01             	add    eax,0x1
c000fae2:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fae8:	b0 ff                	mov    al,0xff
c000faea:	e9 11 02 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000faef:	90                   	nop
c000faf0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000faf5:	83 ec 04             	sub    esp,0x4
c000faf8:	6a 00                	push   0x0
c000fafa:	50                   	push   eax
c000fafb:	6a 00                	push   0x0
c000fafd:	e8 ee 8b ff ff       	call   c00086f0 <pbuf_alloc>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb09:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fb0e:	75 2c                	jne    c000fb3c <tcp_enqueue_flags+0x128>
c000fb10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb14:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb17:	83 c8 80             	or     eax,0xffffff80
c000fb1a:	88 c2                	mov    dl,al
c000fb1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb20:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb23:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fb29:	83 c0 01             	add    eax,0x1
c000fb2c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fb32:	b0 ff                	mov    al,0xff
c000fb34:	e9 c7 01 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fb39:	8d 76 00             	lea    esi,[esi+0x0]
c000fb3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb40:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fb44:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fb49:	0f b7 d2             	movzx  edx,dx
c000fb4c:	0f b7 c0             	movzx  eax,ax
c000fb4f:	39 c2                	cmp    edx,eax
c000fb51:	73 15                	jae    c000fb68 <tcp_enqueue_flags+0x154>
c000fb53:	83 ec 08             	sub    esp,0x8
c000fb56:	68 34 0c 03 c0       	push   0xc0030c34
c000fb5b:	68 26 fe 02 c0       	push   0xc002fe26
c000fb60:	e8 9b 02 01 00       	call   c001fe00 <CPrintf>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fb6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb71:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fb74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fb79:	83 ec 0c             	sub    esp,0xc
c000fb7c:	51                   	push   ecx
c000fb7d:	52                   	push   edx
c000fb7e:	50                   	push   eax
c000fb7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000fb83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fb87:	e8 c4 f1 ff ff       	call   c000ed50 <tcp_create_segment>
c000fb8c:	83 c4 20             	add    esp,0x20
c000fb8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb93:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb98:	75 2a                	jne    c000fbc4 <tcp_enqueue_flags+0x1b0>
c000fb9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb9e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fba1:	83 c8 80             	or     eax,0xffffff80
c000fba4:	88 c2                	mov    dl,al
c000fba6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbaa:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbad:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fbb3:	83 c0 01             	add    eax,0x1
c000fbb6:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fbbc:	b0 ff                	mov    al,0xff
c000fbbe:	e9 3d 01 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fbc3:	90                   	nop
c000fbc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbcb:	0f b7 c0             	movzx  eax,ax
c000fbce:	85 c0                	test   eax,eax
c000fbd0:	74 16                	je     c000fbe8 <tcp_enqueue_flags+0x1d4>
c000fbd2:	83 ec 08             	sub    esp,0x8
c000fbd5:	68 70 0c 03 c0       	push   0xc0030c70
c000fbda:	68 26 fe 02 c0       	push   0xc002fe26
c000fbdf:	e8 1c 02 01 00       	call   c001fe00 <CPrintf>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	90                   	nop
c000fbe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbec:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fbef:	85 c0                	test   eax,eax
c000fbf1:	75 0d                	jne    c000fc00 <tcp_enqueue_flags+0x1ec>
c000fbf3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fbfb:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fbfe:	eb 30                	jmp    c000fc30 <tcp_enqueue_flags+0x21c>
c000fc00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc04:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc0b:	eb 0f                	jmp    c000fc1c <tcp_enqueue_flags+0x208>
c000fc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc22:	85 c0                	test   eax,eax
c000fc24:	75 ea                	jne    c000fc10 <tcp_enqueue_flags+0x1fc>
c000fc26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fc2e:	89 10                	mov    DWORD PTR [eax],edx
c000fc30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc34:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fc3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc3f:	83 e0 02             	and    eax,0x2
c000fc42:	75 0c                	jne    c000fc50 <tcp_enqueue_flags+0x23c>
c000fc44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc49:	83 e0 01             	and    eax,0x1
c000fc4c:	74 2a                	je     c000fc78 <tcp_enqueue_flags+0x264>
c000fc4e:	66 90                	xchg   ax,ax
c000fc50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc54:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fc57:	8d 50 01             	lea    edx,[eax+0x1]
c000fc5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc5e:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fc61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc65:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fc69:	83 e8 01             	sub    eax,0x1
c000fc6c:	89 c2                	mov    edx,eax
c000fc6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc72:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000fc76:	66 90                	xchg   ax,ax
c000fc78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc7d:	83 e0 01             	and    eax,0x1
c000fc80:	74 16                	je     c000fc98 <tcp_enqueue_flags+0x284>
c000fc82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc86:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fc89:	83 c8 20             	or     eax,0x20
c000fc8c:	88 c2                	mov    dl,al
c000fc8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc92:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc95:	8d 76 00             	lea    esi,[esi+0x0]
c000fc98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc9f:	83 ec 0c             	sub    esp,0xc
c000fca2:	50                   	push   eax
c000fca3:	e8 48 90 ff ff       	call   c0008cf0 <pbuf_clen>
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	88 c1                	mov    cl,al
c000fcad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcb1:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fcb4:	0f b6 c1             	movzx  eax,cl
c000fcb7:	01 d0                	add    eax,edx
c000fcb9:	89 c2                	mov    edx,eax
c000fcbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcbf:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fcc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcc7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fcca:	0f b7 c0             	movzx  eax,ax
c000fccd:	85 c0                	test   eax,eax
c000fccf:	74 2b                	je     c000fcfc <tcp_enqueue_flags+0x2e8>
c000fcd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcd5:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fcd8:	85 c0                	test   eax,eax
c000fcda:	75 20                	jne    c000fcfc <tcp_enqueue_flags+0x2e8>
c000fcdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fce0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fce3:	85 c0                	test   eax,eax
c000fce5:	75 15                	jne    c000fcfc <tcp_enqueue_flags+0x2e8>
c000fce7:	83 ec 08             	sub    esp,0x8
c000fcea:	68 9c 0c 03 c0       	push   0xc0030c9c
c000fcef:	68 26 fe 02 c0       	push   0xc002fe26
c000fcf4:	e8 07 01 01 00       	call   c001fe00 <CPrintf>
c000fcf9:	83 c4 10             	add    esp,0x10
c000fcfc:	b0 00                	mov    al,0x0
c000fcfe:	66 90                	xchg   ax,ax
c000fd00:	83 c4 3c             	add    esp,0x3c
c000fd03:	c3                   	ret    

c000fd04 <tcp_send_fin>:
c000fd04:	53                   	push   ebx
c000fd05:	83 ec 18             	sub    esp,0x18
c000fd08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd0c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fd0f:	85 c0                	test   eax,eax
c000fd11:	74 71                	je     c000fd84 <tcp_send_fin+0x80>
c000fd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd17:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fd1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd1e:	eb 0c                	jmp    c000fd2c <tcp_send_fin+0x28>
c000fd20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd24:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd2a:	66 90                	xchg   ax,ax
c000fd2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd30:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd32:	85 c0                	test   eax,eax
c000fd34:	75 ea                	jne    c000fd20 <tcp_send_fin+0x1c>
c000fd36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd3d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fd41:	0f b7 c0             	movzx  eax,ax
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	50                   	push   eax
c000fd48:	e8 cf 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd4d:	83 c4 10             	add    esp,0x10
c000fd50:	0f b7 c0             	movzx  eax,ax
c000fd53:	83 e0 07             	and    eax,0x7
c000fd56:	75 2c                	jne    c000fd84 <tcp_send_fin+0x80>
c000fd58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd5f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fd63:	83 ec 0c             	sub    esp,0xc
c000fd66:	6a 01                	push   0x1
c000fd68:	e8 af 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	89 c2                	mov    edx,eax
c000fd72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd79:	09 da                	or     edx,ebx
c000fd7b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fd7f:	b0 00                	mov    al,0x0
c000fd81:	eb 15                	jmp    c000fd98 <tcp_send_fin+0x94>
c000fd83:	90                   	nop
c000fd84:	83 ec 08             	sub    esp,0x8
c000fd87:	6a 01                	push   0x1
c000fd89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd8d:	e8 82 fc ff ff       	call   c000fa14 <tcp_enqueue_flags>
c000fd92:	83 c4 10             	add    esp,0x10
c000fd95:	8d 76 00             	lea    esi,[esi+0x0]
c000fd98:	83 c4 18             	add    esp,0x18
c000fd9b:	5b                   	pop    ebx
c000fd9c:	c3                   	ret    
c000fd9d:	8d 76 00             	lea    esi,[esi+0x0]

c000fda0 <tcp_send_empty_ack>:
c000fda0:	53                   	push   ebx
c000fda1:	83 ec 18             	sub    esp,0x18
c000fda4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fda9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdad:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	50                   	push   eax
c000fdb4:	e8 87 0e ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fdb9:	83 c4 10             	add    esp,0x10
c000fdbc:	89 c2                	mov    edx,eax
c000fdbe:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fdc3:	52                   	push   edx
c000fdc4:	6a 00                	push   0x0
c000fdc6:	50                   	push   eax
c000fdc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdcb:	e8 1c ee ff ff       	call   c000ebec <tcp_output_alloc_header>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdd7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fddc:	75 0a                	jne    c000fde8 <tcp_send_empty_ack+0x48>
c000fdde:	b0 fe                	mov    al,0xfe
c000fde0:	e9 9b 00 00 00       	jmp    c000fe80 <tcp_send_empty_ack+0xe0>
c000fde5:	8d 76 00             	lea    esi,[esi+0x0]
c000fde8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fdf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdf7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdfa:	83 e0 fc             	and    eax,0xfffffffc
c000fdfd:	88 c2                	mov    dl,al
c000fdff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe03:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fe06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe0d:	0f b7 d0             	movzx  edx,ax
c000fe10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe14:	8d 48 04             	lea    ecx,[eax+0x4]
c000fe17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe1b:	83 ec 0c             	sub    esp,0xc
c000fe1e:	52                   	push   edx
c000fe1f:	6a 06                	push   0x6
c000fe21:	51                   	push   ecx
c000fe22:	50                   	push   eax
c000fe23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe27:	e8 a4 35 00 00       	call   c00133d0 <inet_chksum_pseudo>
c000fe2c:	83 c4 20             	add    esp,0x20
c000fe2f:	89 c2                	mov    edx,eax
c000fe31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe35:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fe39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe3d:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe40:	0f b6 c8             	movzx  ecx,al
c000fe43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe47:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe4a:	0f b6 d0             	movzx  edx,al
c000fe4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe51:	8d 58 04             	lea    ebx,[eax+0x4]
c000fe54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe58:	83 ec 08             	sub    esp,0x8
c000fe5b:	6a 06                	push   0x6
c000fe5d:	51                   	push   ecx
c000fe5e:	52                   	push   edx
c000fe5f:	53                   	push   ebx
c000fe60:	50                   	push   eax
c000fe61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe65:	e8 a6 41 00 00       	call   c0014010 <ip_output>
c000fe6a:	83 c4 20             	add    esp,0x20
c000fe6d:	83 ec 0c             	sub    esp,0xc
c000fe70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe74:	e8 9b 86 ff ff       	call   c0008514 <pbuf_free>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	b0 00                	mov    al,0x0
c000fe7e:	66 90                	xchg   ax,ax
c000fe80:	83 c4 18             	add    esp,0x18
c000fe83:	5b                   	pop    ebx
c000fe84:	c3                   	ret    
c000fe85:	8d 76 00             	lea    esi,[esi+0x0]

c000fe88 <tcp_output_segment>:
c000fe88:	56                   	push   esi
c000fe89:	53                   	push   ebx
c000fe8a:	83 ec 14             	sub    esp,0x14
c000fe8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe91:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe98:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe9b:	83 ec 0c             	sub    esp,0xc
c000fe9e:	50                   	push   eax
c000fe9f:	e8 9c 0d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000feaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feae:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000feb2:	0f b7 c0             	movzx  eax,ax
c000feb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000feb9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	50                   	push   eax
c000fec0:	e8 57 0d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fecc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fed0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fed3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fed7:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fedb:	0f b7 c0             	movzx  eax,ax
c000fede:	01 c2                	add    edx,eax
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feeb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feee:	83 c0 14             	add    eax,0x14
c000fef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fef9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fefc:	0f b6 c0             	movzx  eax,al
c000feff:	83 e0 01             	and    eax,0x1
c000ff02:	74 10                	je     c000ff14 <tcp_output_segment+0x8c>
c000ff04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff08:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000ff0e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000ff13:	90                   	nop
c000ff14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff18:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000ff1c:	98                   	cwde   
c000ff1d:	83 f8 ff             	cmp    eax,0xffffffff
c000ff20:	75 0a                	jne    c000ff2c <tcp_output_segment+0xa4>
c000ff22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff26:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000ff2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff30:	85 c0                	test   eax,eax
c000ff32:	74 0c                	je     c000ff40 <tcp_output_segment+0xb8>
c000ff34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff38:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	75 32                	jne    c000ff70 <tcp_output_segment+0xe8>
c000ff3e:	66 90                	xchg   ax,ax
c000ff40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff44:	83 c0 04             	add    eax,0x4
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	50                   	push   eax
c000ff4b:	e8 0c 39 00 00       	call   c001385c <ip_route>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff57:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff5c:	0f 84 46 01 00 00    	je     c00100a8 <tcp_output_segment+0x220>
c000ff62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff66:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ff69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff6d:	89 10                	mov    DWORD PTR [eax],edx
c000ff6f:	90                   	nop
c000ff70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff74:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff77:	85 c0                	test   eax,eax
c000ff79:	75 2d                	jne    c000ffa8 <tcp_output_segment+0x120>
c000ff7b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000ff81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff85:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000ff88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	50                   	push   eax
c000ff96:	e8 a5 0c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	89 c2                	mov    edx,eax
c000ffa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ffa7:	90                   	nop
c000ffa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ffaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb9:	29 c2                	sub    edx,eax
c000ffbb:	89 d0                	mov    eax,edx
c000ffbd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ffc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffc9:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000ffcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffd4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000ffd9:	89 ce                	mov    esi,ecx
c000ffdb:	29 d6                	sub    esi,edx
c000ffdd:	89 f2                	mov    edx,esi
c000ffdf:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000ffe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffe7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffea:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000ffed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fff4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fff9:	89 ce                	mov    esi,ecx
c000fffb:	29 d6                	sub    esi,edx
c000fffd:	89 f2                	mov    edx,esi
c000ffff:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0010003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010007:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001000a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001000e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0010011:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001001b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c0010021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010025:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010028:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001002b:	0f b7 c8             	movzx  ecx,ax
c001002e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010032:	8d 70 04             	lea    esi,[eax+0x4]
c0010035:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001003d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010040:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010044:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0010047:	83 ec 0c             	sub    esp,0xc
c001004a:	51                   	push   ecx
c001004b:	6a 06                	push   0x6
c001004d:	56                   	push   esi
c001004e:	52                   	push   edx
c001004f:	50                   	push   eax
c0010050:	e8 7b 33 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010055:	83 c4 20             	add    esp,0x20
c0010058:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c001005c:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010062:	83 c0 01             	add    eax,0x1
c0010065:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001006b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001006f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0010072:	0f b6 d8             	movzx  ebx,al
c0010075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010079:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001007c:	0f b6 c8             	movzx  ecx,al
c001007f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010083:	8d 70 04             	lea    esi,[eax+0x4]
c0010086:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001008a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001008e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010091:	83 ec 08             	sub    esp,0x8
c0010094:	6a 06                	push   0x6
c0010096:	53                   	push   ebx
c0010097:	51                   	push   ecx
c0010098:	56                   	push   esi
c0010099:	52                   	push   edx
c001009a:	50                   	push   eax
c001009b:	e8 70 3f 00 00       	call   c0014010 <ip_output>
c00100a0:	83 c4 20             	add    esp,0x20
c00100a3:	eb 07                	jmp    c00100ac <tcp_output_segment+0x224>
c00100a5:	8d 76 00             	lea    esi,[esi+0x0]
c00100a8:	90                   	nop
c00100a9:	8d 76 00             	lea    esi,[esi+0x0]
c00100ac:	83 c4 14             	add    esp,0x14
c00100af:	5b                   	pop    ebx
c00100b0:	5e                   	pop    esi
c00100b1:	c3                   	ret    
c00100b2:	66 90                	xchg   ax,ax

c00100b4 <tcp_output>:
c00100b4:	56                   	push   esi
c00100b5:	53                   	push   ebx
c00100b6:	83 ec 24             	sub    esp,0x24
c00100b9:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c00100be:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00100c2:	75 08                	jne    c00100cc <tcp_output+0x18>
c00100c4:	b0 00                	mov    al,0x0
c00100c6:	e9 6d 04 00 00       	jmp    c0010538 <tcp_output+0x484>
c00100cb:	90                   	nop
c00100cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d0:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c00100d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d8:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c00100db:	89 c8                	mov    eax,ecx
c00100dd:	0f b7 d8             	movzx  ebx,ax
c00100e0:	0f b7 ca             	movzx  ecx,dx
c00100e3:	39 cb                	cmp    ebx,ecx
c00100e5:	76 05                	jbe    c00100ec <tcp_output+0x38>
c00100e7:	89 d0                	mov    eax,edx
c00100e9:	8d 76 00             	lea    esi,[esi+0x0]
c00100ec:	0f b7 c0             	movzx  eax,ax
c00100ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100f7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00100fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00100fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010102:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010105:	0f b6 c0             	movzx  eax,al
c0010108:	83 e0 02             	and    eax,0x2
c001010b:	74 4f                	je     c001015c <tcp_output+0xa8>
c001010d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010112:	74 34                	je     c0010148 <tcp_output+0x94>
c0010114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010118:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001011b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001011e:	83 ec 0c             	sub    esp,0xc
c0010121:	50                   	push   eax
c0010122:	e8 19 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010127:	83 c4 10             	add    esp,0x10
c001012a:	89 c2                	mov    edx,eax
c001012c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010130:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010133:	29 c2                	sub    edx,eax
c0010135:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010139:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001013c:	0f b7 c0             	movzx  eax,ax
c001013f:	01 d0                	add    eax,edx
c0010141:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010145:	73 15                	jae    c001015c <tcp_output+0xa8>
c0010147:	90                   	nop
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001014f:	e8 4c fc ff ff       	call   c000fda0 <tcp_send_empty_ack>
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	e9 dc 03 00 00       	jmp    c0010538 <tcp_output+0x484>
c001015c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010160:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010163:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010167:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001016c:	0f 84 e6 02 00 00    	je     c0010458 <tcp_output+0x3a4>
c0010172:	eb 0c                	jmp    c0010180 <tcp_output+0xcc>
c0010174:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010178:	8b 00                	mov    eax,DWORD PTR [eax]
c001017a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001017e:	66 90                	xchg   ax,ax
c0010180:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010184:	8b 00                	mov    eax,DWORD PTR [eax]
c0010186:	85 c0                	test   eax,eax
c0010188:	75 ea                	jne    c0010174 <tcp_output+0xc0>
c001018a:	e9 c9 02 00 00       	jmp    c0010458 <tcp_output+0x3a4>
c001018f:	90                   	nop
c0010190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010194:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010197:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001019b:	0f b7 c0             	movzx  eax,ax
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	50                   	push   eax
c00101a2:	e8 75 0a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00101a7:	83 c4 10             	add    esp,0x10
c00101aa:	0f b7 c0             	movzx  eax,ax
c00101ad:	83 e0 04             	and    eax,0x4
c00101b0:	74 16                	je     c00101c8 <tcp_output+0x114>
c00101b2:	83 ec 08             	sub    esp,0x8
c00101b5:	68 33 0d 03 c0       	push   0xc0030d33
c00101ba:	68 26 fe 02 c0       	push   0xc002fe26
c00101bf:	e8 3c fc 00 00       	call   c001fe00 <CPrintf>
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	90                   	nop
c00101c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00101cf:	85 c0                	test   eax,eax
c00101d1:	74 45                	je     c0010218 <tcp_output+0x164>
c00101d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101d7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101da:	0f b6 c0             	movzx  eax,al
c00101dd:	83 e0 44             	and    eax,0x44
c00101e0:	75 36                	jne    c0010218 <tcp_output+0x164>
c00101e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101e9:	85 c0                	test   eax,eax
c00101eb:	74 33                	je     c0010220 <tcp_output+0x16c>
c00101ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00101f6:	85 c0                	test   eax,eax
c00101f8:	75 1e                	jne    c0010218 <tcp_output+0x164>
c00101fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101fe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010201:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001020b:	0f b7 d2             	movzx  edx,dx
c001020e:	0f b7 c0             	movzx  eax,ax
c0010211:	39 c2                	cmp    edx,eax
c0010213:	72 0b                	jb     c0010220 <tcp_output+0x16c>
c0010215:	8d 76 00             	lea    esi,[esi+0x0]
c0010218:	b8 01 00 00 00       	mov    eax,0x1
c001021d:	eb 09                	jmp    c0010228 <tcp_output+0x174>
c001021f:	90                   	nop
c0010220:	b8 00 00 00 00       	mov    eax,0x0
c0010225:	8d 76 00             	lea    esi,[esi+0x0]
c0010228:	85 c0                	test   eax,eax
c001022a:	75 18                	jne    c0010244 <tcp_output+0x190>
c001022c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010230:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010233:	0f b6 c0             	movzx  eax,al
c0010236:	25 a0 00 00 00       	and    eax,0xa0
c001023b:	0f 84 57 02 00 00    	je     c0010498 <tcp_output+0x3e4>
c0010241:	8d 76 00             	lea    esi,[esi+0x0]
c0010244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010248:	8b 10                	mov    edx,DWORD PTR [eax]
c001024a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001024e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010251:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010255:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0010258:	83 f8 02             	cmp    eax,0x2
c001025b:	74 3b                	je     c0010298 <tcp_output+0x1e4>
c001025d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010261:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010264:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	6a 10                	push   0x10
c001026d:	e8 aa 09 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010272:	83 c4 10             	add    esp,0x10
c0010275:	89 c2                	mov    edx,eax
c0010277:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001027b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001027e:	09 da                	or     edx,ebx
c0010280:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010288:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001028b:	83 e0 fc             	and    eax,0xfffffffc
c001028e:	88 c2                	mov    dl,al
c0010290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010294:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010297:	90                   	nop
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001029f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00102a3:	e8 e0 fb ff ff       	call   c000fe88 <tcp_output_segment>
c00102a8:	83 c4 10             	add    esp,0x10
c00102ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102b5:	83 ec 0c             	sub    esp,0xc
c00102b8:	50                   	push   eax
c00102b9:	e8 82 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00102be:	83 c4 10             	add    esp,0x10
c00102c1:	89 c3                	mov    ebx,eax
c00102c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102ca:	0f b7 f0             	movzx  esi,ax
c00102cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102d4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00102d8:	0f b7 c0             	movzx  eax,ax
c00102db:	83 ec 0c             	sub    esp,0xc
c00102de:	50                   	push   eax
c00102df:	e8 38 09 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00102e4:	83 c4 10             	add    esp,0x10
c00102e7:	0f b7 c0             	movzx  eax,ax
c00102ea:	83 e0 03             	and    eax,0x3
c00102ed:	0f 95 c0             	setne  al
c00102f0:	0f b6 c0             	movzx  eax,al
c00102f3:	01 f0                	add    eax,esi
c00102f5:	01 d8                	add    eax,ebx
c00102f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102ff:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010302:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010306:	79 0c                	jns    c0010314 <tcp_output+0x260>
c0010308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001030c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010310:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010313:	90                   	nop
c0010314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010318:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001031b:	0f b7 d8             	movzx  ebx,ax
c001031e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010322:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010325:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010329:	0f b7 c0             	movzx  eax,ax
c001032c:	83 ec 0c             	sub    esp,0xc
c001032f:	50                   	push   eax
c0010330:	e8 e7 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010335:	83 c4 10             	add    esp,0x10
c0010338:	0f b7 c0             	movzx  eax,ax
c001033b:	83 e0 03             	and    eax,0x3
c001033e:	0f 95 c0             	setne  al
c0010341:	0f b6 c0             	movzx  eax,al
c0010344:	01 d8                	add    eax,ebx
c0010346:	85 c0                	test   eax,eax
c0010348:	0f 8e ee 00 00 00    	jle    c001043c <tcp_output+0x388>
c001034e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010352:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001035c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001035f:	85 c0                	test   eax,eax
c0010361:	75 19                	jne    c001037c <tcp_output+0x2c8>
c0010363:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001036b:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001036e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010376:	e9 d1 00 00 00       	jmp    c001044c <tcp_output+0x398>
c001037b:	90                   	nop
c001037c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010380:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010383:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	50                   	push   eax
c001038a:	e8 b1 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001038f:	83 c4 10             	add    esp,0x10
c0010392:	89 c3                	mov    ebx,eax
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001039b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001039e:	83 ec 0c             	sub    esp,0xc
c00103a1:	50                   	push   eax
c00103a2:	e8 99 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	29 c3                	sub    ebx,eax
c00103ac:	89 d8                	mov    eax,ebx
c00103ae:	79 74                	jns    c0010424 <tcp_output+0x370>
c00103b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103b4:	83 c0 7c             	add    eax,0x7c
c00103b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00103bb:	eb 0f                	jmp    c00103cc <tcp_output+0x318>
c00103bd:	8d 76 00             	lea    esi,[esi+0x0]
c00103c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00103c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00103ca:	66 90                	xchg   ax,ax
c00103cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00103d2:	85 c0                	test   eax,eax
c00103d4:	74 36                	je     c001040c <tcp_output+0x358>
c00103d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103da:	8b 00                	mov    eax,DWORD PTR [eax]
c00103dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103e2:	83 ec 0c             	sub    esp,0xc
c00103e5:	50                   	push   eax
c00103e6:	e8 55 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103eb:	83 c4 10             	add    esp,0x10
c00103ee:	89 c3                	mov    ebx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103fa:	83 ec 0c             	sub    esp,0xc
c00103fd:	50                   	push   eax
c00103fe:	e8 3d 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010403:	83 c4 10             	add    esp,0x10
c0010406:	29 c3                	sub    ebx,eax
c0010408:	89 d8                	mov    eax,ebx
c001040a:	78 b4                	js     c00103c0 <tcp_output+0x30c>
c001040c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010410:	8b 10                	mov    edx,DWORD PTR [eax]
c0010412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010416:	89 10                	mov    DWORD PTR [eax],edx
c0010418:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001041c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	eb 28                	jmp    c001044c <tcp_output+0x398>
c0010424:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010428:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001042c:	89 10                	mov    DWORD PTR [eax],edx
c001042e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010432:	8b 00                	mov    eax,DWORD PTR [eax]
c0010434:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010438:	eb 12                	jmp    c001044c <tcp_output+0x398>
c001043a:	66 90                	xchg   ax,ax
c001043c:	83 ec 0c             	sub    esp,0xc
c001043f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010443:	e8 58 9d ff ff       	call   c000a1a0 <tcp_seg_free>
c0010448:	83 c4 10             	add    esp,0x10
c001044b:	90                   	nop
c001044c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010450:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010457:	90                   	nop
c0010458:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001045d:	74 3d                	je     c001049c <tcp_output+0x3e8>
c001045f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010463:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010469:	83 ec 0c             	sub    esp,0xc
c001046c:	50                   	push   eax
c001046d:	e8 ce 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010472:	83 c4 10             	add    esp,0x10
c0010475:	89 c2                	mov    edx,eax
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001047e:	29 c2                	sub    edx,eax
c0010480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010484:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010487:	0f b7 c0             	movzx  eax,ax
c001048a:	01 d0                	add    eax,edx
c001048c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010490:	0f 83 fa fc ff ff    	jae    c0010190 <tcp_output+0xdc>
c0010496:	eb 04                	jmp    c001049c <tcp_output+0x3e8>
c0010498:	90                   	nop
c0010499:	8d 76 00             	lea    esi,[esi+0x0]
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00104a3:	85 c0                	test   eax,eax
c00104a5:	75 0d                	jne    c00104b4 <tcp_output+0x400>
c00104a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104ab:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c00104b1:	8d 76 00             	lea    esi,[esi+0x0]
c00104b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104b9:	74 65                	je     c0010520 <tcp_output+0x46c>
c00104bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104bf:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c00104c5:	0f b6 c0             	movzx  eax,al
c00104c8:	85 c0                	test   eax,eax
c00104ca:	75 54                	jne    c0010520 <tcp_output+0x46c>
c00104cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	50                   	push   eax
c00104da:	e8 61 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00104df:	83 c4 10             	add    esp,0x10
c00104e2:	89 c2                	mov    edx,eax
c00104e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104e8:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00104eb:	29 c2                	sub    edx,eax
c00104ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00104f4:	0f b7 c0             	movzx  eax,ax
c00104f7:	01 c2                	add    edx,eax
c00104f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104fd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010500:	0f b7 c0             	movzx  eax,ax
c0010503:	39 c2                	cmp    edx,eax
c0010505:	76 19                	jbe    c0010520 <tcp_output+0x46c>
c0010507:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001050b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010519:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010524:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010527:	83 e0 7f             	and    eax,0x7f
c001052a:	88 c2                	mov    dl,al
c001052c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010530:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010533:	b0 00                	mov    al,0x0
c0010535:	8d 76 00             	lea    esi,[esi+0x0]
c0010538:	83 c4 24             	add    esp,0x24
c001053b:	5b                   	pop    ebx
c001053c:	5e                   	pop    esi
c001053d:	c3                   	ret    
c001053e:	66 90                	xchg   ax,ax

c0010540 <tcp_rst>:
c0010540:	83 ec 2c             	sub    esp,0x2c
c0010543:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010547:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001054b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010550:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010555:	83 ec 04             	sub    esp,0x4
c0010558:	6a 00                	push   0x0
c001055a:	6a 14                	push   0x14
c001055c:	6a 01                	push   0x1
c001055e:	e8 8d 81 ff ff       	call   c00086f0 <pbuf_alloc>
c0010563:	83 c4 10             	add    esp,0x10
c0010566:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001056a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001056f:	0f 84 3f 01 00 00    	je     c00106b4 <tcp_rst+0x174>
c0010575:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010579:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001057d:	0f b7 c0             	movzx  eax,ax
c0010580:	83 f8 13             	cmp    eax,0x13
c0010583:	77 17                	ja     c001059c <tcp_rst+0x5c>
c0010585:	83 ec 08             	sub    esp,0x8
c0010588:	68 40 0a 03 c0       	push   0xc0030a40
c001058d:	68 26 fe 02 c0       	push   0xc002fe26
c0010592:	e8 69 f8 00 00       	call   c001fe00 <CPrintf>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	66 90                	xchg   ax,ax
c001059c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00105a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105a7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00105ac:	83 ec 0c             	sub    esp,0xc
c00105af:	50                   	push   eax
c00105b0:	e8 67 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	89 c2                	mov    edx,eax
c00105ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105be:	66 89 10             	mov    WORD PTR [eax],dx
c00105c1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00105c6:	83 ec 0c             	sub    esp,0xc
c00105c9:	50                   	push   eax
c00105ca:	e8 4d 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00105cf:	83 c4 10             	add    esp,0x10
c00105d2:	89 c2                	mov    edx,eax
c00105d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105d8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00105dc:	83 ec 0c             	sub    esp,0xc
c00105df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00105e3:	e8 58 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00105e8:	83 c4 10             	add    esp,0x10
c00105eb:	89 c2                	mov    edx,eax
c00105ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00105fb:	e8 40 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	89 c2                	mov    edx,eax
c0010605:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010609:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001060c:	83 ec 0c             	sub    esp,0xc
c001060f:	68 14 50 00 00       	push   0x5014
c0010614:	e8 03 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010619:	83 c4 10             	add    esp,0x10
c001061c:	89 c2                	mov    edx,eax
c001061e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010622:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001062a:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c0010630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010634:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c001063a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001063e:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010644:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010648:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001064b:	0f b7 c0             	movzx  eax,ax
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	50                   	push   eax
c0010652:	6a 06                	push   0x6
c0010654:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010658:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001065c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010660:	e8 6b 2d 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010665:	83 c4 20             	add    esp,0x20
c0010668:	89 c2                	mov    edx,eax
c001066a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001066e:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010672:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010678:	83 c0 01             	add    eax,0x1
c001067b:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010681:	83 ec 08             	sub    esp,0x8
c0010684:	6a 06                	push   0x6
c0010686:	6a 00                	push   0x0
c0010688:	68 ff 00 00 00       	push   0xff
c001068d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010691:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010699:	e8 72 39 00 00       	call   c0014010 <ip_output>
c001069e:	83 c4 20             	add    esp,0x20
c00106a1:	83 ec 0c             	sub    esp,0xc
c00106a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106a8:	e8 67 7e ff ff       	call   c0008514 <pbuf_free>
c00106ad:	83 c4 10             	add    esp,0x10
c00106b0:	eb 06                	jmp    c00106b8 <tcp_rst+0x178>
c00106b2:	66 90                	xchg   ax,ax
c00106b4:	90                   	nop
c00106b5:	8d 76 00             	lea    esi,[esi+0x0]
c00106b8:	83 c4 2c             	add    esp,0x2c
c00106bb:	c3                   	ret    

c00106bc <tcp_rexmit_rto>:
c00106bc:	83 ec 1c             	sub    esp,0x1c
c00106bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106c6:	85 c0                	test   eax,eax
c00106c8:	74 7a                	je     c0010744 <tcp_rexmit_rto+0x88>
c00106ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106d5:	eb 0d                	jmp    c00106e4 <tcp_rexmit_rto+0x28>
c00106d7:	90                   	nop
c00106d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106e2:	66 90                	xchg   ax,ax
c00106e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00106ea:	85 c0                	test   eax,eax
c00106ec:	75 ea                	jne    c00106d8 <tcp_rexmit_rto+0x1c>
c00106ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106f2:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00106f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f9:	89 10                	mov    DWORD PTR [eax],edx
c00106fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ff:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c0010702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010706:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001070d:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010718:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c001071b:	83 c0 01             	add    eax,0x1
c001071e:	88 c2                	mov    dl,al
c0010720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010724:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001072b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010732:	83 ec 0c             	sub    esp,0xc
c0010735:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010739:	e8 76 f9 ff ff       	call   c00100b4 <tcp_output>
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	eb 05                	jmp    c0010748 <tcp_rexmit_rto+0x8c>
c0010743:	90                   	nop
c0010744:	90                   	nop
c0010745:	8d 76 00             	lea    esi,[esi+0x0]
c0010748:	83 c4 1c             	add    esp,0x1c
c001074b:	c3                   	ret    

c001074c <tcp_rexmit>:
c001074c:	53                   	push   ebx
c001074d:	83 ec 18             	sub    esp,0x18
c0010750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010754:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010757:	85 c0                	test   eax,eax
c0010759:	0f 84 a9 00 00 00    	je     c0010808 <tcp_rexmit+0xbc>
c001075f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010763:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010766:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001076a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001076e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010774:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001077b:	83 c0 78             	add    eax,0x78
c001077e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010782:	eb 0c                	jmp    c0010790 <tcp_rexmit+0x44>
c0010784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010788:	8b 00                	mov    eax,DWORD PTR [eax]
c001078a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001078e:	66 90                	xchg   ax,ax
c0010790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010794:	8b 00                	mov    eax,DWORD PTR [eax]
c0010796:	85 c0                	test   eax,eax
c0010798:	74 36                	je     c00107d0 <tcp_rexmit+0x84>
c001079a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001079e:	8b 00                	mov    eax,DWORD PTR [eax]
c00107a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107a6:	83 ec 0c             	sub    esp,0xc
c00107a9:	50                   	push   eax
c00107aa:	e8 91 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00107af:	83 c4 10             	add    esp,0x10
c00107b2:	89 c3                	mov    ebx,eax
c00107b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107be:	83 ec 0c             	sub    esp,0xc
c00107c1:	50                   	push   eax
c00107c2:	e8 79 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00107c7:	83 c4 10             	add    esp,0x10
c00107ca:	29 c3                	sub    ebx,eax
c00107cc:	89 d8                	mov    eax,ebx
c00107ce:	78 b4                	js     c0010784 <tcp_rexmit+0x38>
c00107d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00107d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107da:	89 10                	mov    DWORD PTR [eax],edx
c00107dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107e4:	89 10                	mov    DWORD PTR [eax],edx
c00107e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107ea:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00107ed:	83 c0 01             	add    eax,0x1
c00107f0:	88 c2                	mov    dl,al
c00107f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107f6:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00107f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107fd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010804:	eb 06                	jmp    c001080c <tcp_rexmit+0xc0>
c0010806:	66 90                	xchg   ax,ax
c0010808:	90                   	nop
c0010809:	8d 76 00             	lea    esi,[esi+0x0]
c001080c:	83 c4 18             	add    esp,0x18
c001080f:	5b                   	pop    ebx
c0010810:	c3                   	ret    
c0010811:	8d 76 00             	lea    esi,[esi+0x0]

c0010814 <tcp_rexmit_fast>:
c0010814:	83 ec 0c             	sub    esp,0xc
c0010817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001081e:	85 c0                	test   eax,eax
c0010820:	0f 84 d2 00 00 00    	je     c00108f8 <tcp_rexmit_fast+0xe4>
c0010826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001082d:	0f b6 c0             	movzx  eax,al
c0010830:	83 e0 04             	and    eax,0x4
c0010833:	0f 85 bf 00 00 00    	jne    c00108f8 <tcp_rexmit_fast+0xe4>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010840:	e8 07 ff ff ff       	call   c001074c <tcp_rexmit>
c0010845:	83 c4 10             	add    esp,0x10
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010857:	0f b7 d2             	movzx  edx,dx
c001085a:	0f b7 c0             	movzx  eax,ax
c001085d:	39 c2                	cmp    edx,eax
c001085f:	76 1b                	jbe    c001087c <tcp_rexmit_fast+0x68>
c0010861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010865:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010868:	0f b7 c0             	movzx  eax,ax
c001086b:	d1 e8                	shr    eax,1
c001086d:	89 c2                	mov    edx,eax
c001086f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010873:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010877:	eb 1b                	jmp    c0010894 <tcp_rexmit_fast+0x80>
c0010879:	8d 76 00             	lea    esi,[esi+0x0]
c001087c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010880:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010884:	0f b7 c0             	movzx  eax,ax
c0010887:	d1 e8                	shr    eax,1
c0010889:	89 c2                	mov    edx,eax
c001088b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088f:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010893:	90                   	nop
c0010894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010898:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c001089b:	0f b7 d0             	movzx  edx,ax
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108a5:	0f b7 c0             	movzx  eax,ax
c00108a8:	d1 e0                	shl    eax,1
c00108aa:	39 c2                	cmp    edx,eax
c00108ac:	7d 16                	jge    c00108c4 <tcp_rexmit_fast+0xb0>
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108b5:	d1 e0                	shl    eax,1
c00108b7:	89 c2                	mov    edx,eax
c00108b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bd:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c00108c1:	8d 76 00             	lea    esi,[esi+0x0]
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c00108cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d2:	89 c1                	mov    ecx,eax
c00108d4:	d1 e1                	shl    ecx,1
c00108d6:	01 c8                	add    eax,ecx
c00108d8:	01 d0                	add    eax,edx
c00108da:	89 c2                	mov    edx,eax
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c00108e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00108eb:	83 c8 04             	or     eax,0x4
c00108ee:	88 c2                	mov    dl,al
c00108f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00108f7:	90                   	nop
c00108f8:	90                   	nop
c00108f9:	83 c4 0c             	add    esp,0xc
c00108fc:	c3                   	ret    
c00108fd:	8d 76 00             	lea    esi,[esi+0x0]

c0010900 <tcp_keepalive>:
c0010900:	83 ec 1c             	sub    esp,0x1c
c0010903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010907:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001090a:	83 e8 01             	sub    eax,0x1
c001090d:	83 ec 0c             	sub    esp,0xc
c0010910:	50                   	push   eax
c0010911:	e8 2a 03 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	50                   	push   eax
c001091a:	6a 00                	push   0x0
c001091c:	6a 00                	push   0x0
c001091e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010922:	e8 c5 e2 ff ff       	call   c000ebec <tcp_output_alloc_header>
c0010927:	83 c4 10             	add    esp,0x10
c001092a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001092e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010933:	0f 84 8b 00 00 00    	je     c00109c4 <tcp_keepalive+0xc4>
c0010939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001093d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010940:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010944:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010948:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001094b:	0f b7 d0             	movzx  edx,ax
c001094e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010952:	8d 48 04             	lea    ecx,[eax+0x4]
c0010955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010959:	83 ec 0c             	sub    esp,0xc
c001095c:	52                   	push   edx
c001095d:	6a 06                	push   0x6
c001095f:	51                   	push   ecx
c0010960:	50                   	push   eax
c0010961:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010965:	e8 66 2a 00 00       	call   c00133d0 <inet_chksum_pseudo>
c001096a:	83 c4 20             	add    esp,0x20
c001096d:	89 c2                	mov    edx,eax
c001096f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010973:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010977:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001097d:	83 c0 01             	add    eax,0x1
c0010980:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001098a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001098d:	0f b6 d0             	movzx  edx,al
c0010990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010994:	8d 48 04             	lea    ecx,[eax+0x4]
c0010997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001099b:	83 ec 08             	sub    esp,0x8
c001099e:	6a 06                	push   0x6
c00109a0:	6a 00                	push   0x0
c00109a2:	52                   	push   edx
c00109a3:	51                   	push   ecx
c00109a4:	50                   	push   eax
c00109a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00109a9:	e8 62 36 00 00       	call   c0014010 <ip_output>
c00109ae:	83 c4 20             	add    esp,0x20
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109b8:	e8 57 7b ff ff       	call   c0008514 <pbuf_free>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	eb 06                	jmp    c00109c8 <tcp_keepalive+0xc8>
c00109c2:	66 90                	xchg   ax,ax
c00109c4:	90                   	nop
c00109c5:	8d 76 00             	lea    esi,[esi+0x0]
c00109c8:	83 c4 1c             	add    esp,0x1c
c00109cb:	c3                   	ret    

c00109cc <tcp_zero_window_probe>:
c00109cc:	53                   	push   ebx
c00109cd:	83 ec 28             	sub    esp,0x28
c00109d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109d4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00109d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109db:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00109e0:	75 0e                	jne    c00109f0 <tcp_zero_window_probe+0x24>
c00109e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109e6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00109e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109ed:	8d 76 00             	lea    esi,[esi+0x0]
c00109f0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00109f5:	0f 84 99 01 00 00    	je     c0010b94 <tcp_zero_window_probe+0x1c8>
c00109fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a02:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a06:	0f b7 c0             	movzx  eax,ax
c0010a09:	83 ec 0c             	sub    esp,0xc
c0010a0c:	50                   	push   eax
c0010a0d:	e8 0a 02 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	0f b7 c0             	movzx  eax,ax
c0010a18:	83 e0 01             	and    eax,0x1
c0010a1b:	74 17                	je     c0010a34 <tcp_zero_window_probe+0x68>
c0010a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a24:	0f b7 c0             	movzx  eax,ax
c0010a27:	85 c0                	test   eax,eax
c0010a29:	75 09                	jne    c0010a34 <tcp_zero_window_probe+0x68>
c0010a2b:	b8 01 00 00 00       	mov    eax,0x1
c0010a30:	eb 0a                	jmp    c0010a3c <tcp_zero_window_probe+0x70>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	b8 00 00 00 00       	mov    eax,0x0
c0010a39:	8d 76 00             	lea    esi,[esi+0x0]
c0010a3c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010a40:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010a45:	85 c0                	test   eax,eax
c0010a47:	0f 94 c0             	sete   al
c0010a4a:	0f b6 c0             	movzx  eax,al
c0010a4d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a59:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a5c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010a61:	52                   	push   edx
c0010a62:	50                   	push   eax
c0010a63:	6a 00                	push   0x0
c0010a65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a69:	e8 7e e1 ff ff       	call   c000ebec <tcp_output_alloc_header>
c0010a6e:	83 c4 10             	add    esp,0x10
c0010a71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010a7a:	0f 84 18 01 00 00    	je     c0010b98 <tcp_zero_window_probe+0x1cc>
c0010a80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a8b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010a90:	85 c0                	test   eax,eax
c0010a92:	74 28                	je     c0010abc <tcp_zero_window_probe+0xf0>
c0010a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a98:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a9c:	80 e4 c0             	and    ah,0xc0
c0010a9f:	89 c3                	mov    ebx,eax
c0010aa1:	83 ec 0c             	sub    esp,0xc
c0010aa4:	6a 11                	push   0x11
c0010aa6:	e8 71 01 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	09 d8                	or     eax,ebx
c0010ab0:	89 c2                	mov    edx,eax
c0010ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab6:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010aba:	eb 58                	jmp    c0010b14 <tcp_zero_window_probe+0x148>
c0010abc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ad1:	83 c0 14             	add    eax,0x14
c0010ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010adc:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010ae0:	0f b7 c0             	movzx  eax,ax
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	50                   	push   eax
c0010ae7:	e8 30 01 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	0f b7 c0             	movzx  eax,ax
c0010af2:	c1 e8 0c             	shr    eax,0xc
c0010af5:	c1 e0 02             	shl    eax,0x2
c0010af8:	0f b7 d0             	movzx  edx,ax
c0010afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b02:	52                   	push   edx
c0010b03:	6a 01                	push   0x1
c0010b05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b09:	50                   	push   eax
c0010b0a:	e8 b1 86 ff ff       	call   c00091c0 <pbuf_copy_partial>
c0010b0f:	83 c4 10             	add    esp,0x10
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010b1b:	0f b7 d0             	movzx  edx,ax
c0010b1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b22:	8d 48 04             	lea    ecx,[eax+0x4]
c0010b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b29:	83 ec 0c             	sub    esp,0xc
c0010b2c:	52                   	push   edx
c0010b2d:	6a 06                	push   0x6
c0010b2f:	51                   	push   ecx
c0010b30:	50                   	push   eax
c0010b31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b35:	e8 96 28 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010b3a:	83 c4 20             	add    esp,0x20
c0010b3d:	89 c2                	mov    edx,eax
c0010b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b43:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010b47:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010b4d:	83 c0 01             	add    eax,0x1
c0010b50:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010b56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b5a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010b5d:	0f b6 d0             	movzx  edx,al
c0010b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b64:	8d 48 04             	lea    ecx,[eax+0x4]
c0010b67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b6b:	83 ec 08             	sub    esp,0x8
c0010b6e:	6a 06                	push   0x6
c0010b70:	6a 00                	push   0x0
c0010b72:	52                   	push   edx
c0010b73:	51                   	push   ecx
c0010b74:	50                   	push   eax
c0010b75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b79:	e8 92 34 00 00       	call   c0014010 <ip_output>
c0010b7e:	83 c4 20             	add    esp,0x20
c0010b81:	83 ec 0c             	sub    esp,0xc
c0010b84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b88:	e8 87 79 ff ff       	call   c0008514 <pbuf_free>
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	eb 0a                	jmp    c0010b9c <tcp_zero_window_probe+0x1d0>
c0010b92:	66 90                	xchg   ax,ax
c0010b94:	90                   	nop
c0010b95:	eb 05                	jmp    c0010b9c <tcp_zero_window_probe+0x1d0>
c0010b97:	90                   	nop
c0010b98:	90                   	nop
c0010b99:	8d 76 00             	lea    esi,[esi+0x0]
c0010b9c:	83 c4 28             	add    esp,0x28
c0010b9f:	5b                   	pop    ebx
c0010ba0:	c3                   	ret    
c0010ba1:	66 90                	xchg   ax,ax
c0010ba3:	90                   	nop

c0010ba4 <sys_timeout>:
c0010ba4:	83 ec 1c             	sub    esp,0x1c
c0010ba7:	83 ec 0c             	sub    esp,0xc
c0010baa:	6a 0b                	push   0xb
c0010bac:	e8 77 6f ff ff       	call   c0007b28 <memp_malloc>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010bbd:	75 25                	jne    c0010be4 <sys_timeout+0x40>
c0010bbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010bc4:	0f 85 3e 01 00 00    	jne    c0010d08 <sys_timeout+0x164>
c0010bca:	83 ec 08             	sub    esp,0x8
c0010bcd:	68 4c 0d 03 c0       	push   0xc0030d4c
c0010bd2:	68 26 fe 02 c0       	push   0xc002fe26
c0010bd7:	e8 24 f2 00 00       	call   c001fe00 <CPrintf>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	e9 24 01 00 00       	jmp    c0010d08 <sys_timeout+0x164>
c0010be4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010bf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010bf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010c01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c0f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c14:	85 c0                	test   eax,eax
c0010c16:	75 10                	jne    c0010c28 <sys_timeout+0x84>
c0010c18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1c:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c21:	e9 e6 00 00 00       	jmp    c0010d0c <sys_timeout+0x168>
c0010c26:	66 90                	xchg   ax,ax
c0010c28:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c30:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c34:	73 2e                	jae    c0010c64 <sys_timeout+0xc0>
c0010c36:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c3b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c3e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c43:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010c47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c4a:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c54:	89 10                	mov    DWORD PTR [eax],edx
c0010c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5a:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c5f:	e9 a8 00 00 00       	jmp    c0010d0c <sys_timeout+0x168>
c0010c64:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c6d:	e9 86 00 00 00       	jmp    c0010cf8 <sys_timeout+0x154>
c0010c72:	66 90                	xchg   ax,ax
c0010c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c82:	29 c2                	sub    edx,eax
c0010c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c91:	85 c0                	test   eax,eax
c0010c93:	74 17                	je     c0010cac <sys_timeout+0x108>
c0010c95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c9b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca5:	39 c2                	cmp    edx,eax
c0010ca7:	76 43                	jbe    c0010cec <sys_timeout+0x148>
c0010ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cb2:	85 c0                	test   eax,eax
c0010cb4:	74 1e                	je     c0010cd4 <sys_timeout+0x130>
c0010cb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cbc:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ccc:	29 d1                	sub    ecx,edx
c0010cce:	89 ca                	mov    edx,ecx
c0010cd0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cd3:	90                   	nop
c0010cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ce4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ce8:	89 10                	mov    DWORD PTR [eax],edx
c0010cea:	eb 20                	jmp    c0010d0c <sys_timeout+0x168>
c0010cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cf6:	66 90                	xchg   ax,ax
c0010cf8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010cfd:	0f 85 71 ff ff ff    	jne    c0010c74 <sys_timeout+0xd0>
c0010d03:	eb 07                	jmp    c0010d0c <sys_timeout+0x168>
c0010d05:	8d 76 00             	lea    esi,[esi+0x0]
c0010d08:	90                   	nop
c0010d09:	8d 76 00             	lea    esi,[esi+0x0]
c0010d0c:	83 c4 1c             	add    esp,0x1c
c0010d0f:	c3                   	ret    

c0010d10 <tcpip_tcp_timer>:
c0010d10:	83 ec 0c             	sub    esp,0xc
c0010d13:	e8 b8 a4 ff ff       	call   c000b1d0 <tcp_tmr>
c0010d18:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010d1d:	85 c0                	test   eax,eax
c0010d1f:	75 0b                	jne    c0010d2c <tcpip_tcp_timer+0x1c>
c0010d21:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010d26:	85 c0                	test   eax,eax
c0010d28:	74 1e                	je     c0010d48 <tcpip_tcp_timer+0x38>
c0010d2a:	66 90                	xchg   ax,ax
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 10 0d 01 c0       	push   0xc0010d10
c0010d36:	68 fa 00 00 00       	push   0xfa
c0010d3b:	e8 64 fe ff ff       	call   c0010ba4 <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	eb 0f                	jmp    c0010d54 <tcpip_tcp_timer+0x44>
c0010d45:	8d 76 00             	lea    esi,[esi+0x0]
c0010d48:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010d52:	66 90                	xchg   ax,ax
c0010d54:	90                   	nop
c0010d55:	83 c4 0c             	add    esp,0xc
c0010d58:	c3                   	ret    
c0010d59:	8d 76 00             	lea    esi,[esi+0x0]

c0010d5c <tcp_timer_needed>:
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010d64:	85 c0                	test   eax,eax
c0010d66:	75 38                	jne    c0010da0 <tcp_timer_needed+0x44>
c0010d68:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010d6d:	85 c0                	test   eax,eax
c0010d6f:	75 0b                	jne    c0010d7c <tcp_timer_needed+0x20>
c0010d71:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010d76:	85 c0                	test   eax,eax
c0010d78:	74 26                	je     c0010da0 <tcp_timer_needed+0x44>
c0010d7a:	66 90                	xchg   ax,ax
c0010d7c:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010d86:	83 ec 04             	sub    esp,0x4
c0010d89:	6a 00                	push   0x0
c0010d8b:	68 10 0d 01 c0       	push   0xc0010d10
c0010d90:	68 fa 00 00 00       	push   0xfa
c0010d95:	e8 0a fe ff ff       	call   c0010ba4 <sys_timeout>
c0010d9a:	83 c4 10             	add    esp,0x10
c0010d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010da0:	90                   	nop
c0010da1:	83 c4 0c             	add    esp,0xc
c0010da4:	c3                   	ret    
c0010da5:	8d 76 00             	lea    esi,[esi+0x0]

c0010da8 <ip_reass_timer>:
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	e8 18 3b 00 00       	call   c00148c8 <ip_reass_tmr>
c0010db0:	83 ec 04             	sub    esp,0x4
c0010db3:	6a 00                	push   0x0
c0010db5:	68 a8 0d 01 c0       	push   0xc0010da8
c0010dba:	68 e8 03 00 00       	push   0x3e8
c0010dbf:	e8 e0 fd ff ff       	call   c0010ba4 <sys_timeout>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	90                   	nop
c0010dc8:	83 c4 0c             	add    esp,0xc
c0010dcb:	c3                   	ret    

c0010dcc <arp_timer>:
c0010dcc:	83 ec 0c             	sub    esp,0xc
c0010dcf:	e8 64 0d 00 00       	call   c0011b38 <etharp_tmr>
c0010dd4:	83 ec 04             	sub    esp,0x4
c0010dd7:	6a 00                	push   0x0
c0010dd9:	68 cc 0d 01 c0       	push   0xc0010dcc
c0010dde:	68 88 13 00 00       	push   0x1388
c0010de3:	e8 bc fd ff ff       	call   c0010ba4 <sys_timeout>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	90                   	nop
c0010dec:	83 c4 0c             	add    esp,0xc
c0010def:	c3                   	ret    

c0010df0 <sys_timeouts_init>:
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	83 ec 04             	sub    esp,0x4
c0010df6:	6a 00                	push   0x0
c0010df8:	68 a8 0d 01 c0       	push   0xc0010da8
c0010dfd:	68 e8 03 00 00       	push   0x3e8
c0010e02:	e8 9d fd ff ff       	call   c0010ba4 <sys_timeout>
c0010e07:	83 c4 10             	add    esp,0x10
c0010e0a:	83 ec 04             	sub    esp,0x4
c0010e0d:	6a 00                	push   0x0
c0010e0f:	68 cc 0d 01 c0       	push   0xc0010dcc
c0010e14:	68 88 13 00 00       	push   0x1388
c0010e19:	e8 86 fd ff ff       	call   c0010ba4 <sys_timeout>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	90                   	nop
c0010e22:	83 c4 0c             	add    esp,0xc
c0010e25:	c3                   	ret    
c0010e26:	66 90                	xchg   ax,ax

c0010e28 <sys_untimeout>:
c0010e28:	83 ec 1c             	sub    esp,0x1c
c0010e2b:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e30:	85 c0                	test   eax,eax
c0010e32:	0f 84 b4 00 00 00    	je     c0010eec <sys_untimeout+0xc4>
c0010e38:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e49:	e9 8e 00 00 00       	jmp    c0010edc <sys_untimeout+0xb4>
c0010e4e:	66 90                	xchg   ax,ax
c0010e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010e57:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010e5b:	75 6b                	jne    c0010ec8 <sys_untimeout+0xa0>
c0010e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e64:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010e68:	75 5e                	jne    c0010ec8 <sys_untimeout+0xa0>
c0010e6a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010e6f:	75 0f                	jne    c0010e80 <sys_untimeout+0x58>
c0010e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e77:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010e7c:	eb 0e                	jmp    c0010e8c <sys_untimeout+0x64>
c0010e7e:	66 90                	xchg   ax,ax
c0010e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e84:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e8a:	89 10                	mov    DWORD PTR [eax],edx
c0010e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e92:	85 c0                	test   eax,eax
c0010e94:	74 1e                	je     c0010eb4 <sys_untimeout+0x8c>
c0010e96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e9c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010e9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0010eac:	01 ca                	add    edx,ecx
c0010eae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010eb4:	83 ec 08             	sub    esp,0x8
c0010eb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ebb:	6a 0b                	push   0xb
c0010ebd:	e8 92 6d ff ff       	call   c0007c54 <memp_free>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	eb 29                	jmp    c0010ef0 <sys_untimeout+0xc8>
c0010ec7:	90                   	nop
c0010ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ed4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eda:	66 90                	xchg   ax,ax
c0010edc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ee1:	0f 85 69 ff ff ff    	jne    c0010e50 <sys_untimeout+0x28>
c0010ee7:	90                   	nop
c0010ee8:	eb 06                	jmp    c0010ef0 <sys_untimeout+0xc8>
c0010eea:	66 90                	xchg   ax,ax
c0010eec:	90                   	nop
c0010eed:	8d 76 00             	lea    esi,[esi+0x0]
c0010ef0:	83 c4 1c             	add    esp,0x1c
c0010ef3:	c3                   	ret    

c0010ef4 <sys_timeouts_mbox_fetch>:
c0010ef4:	83 ec 1c             	sub    esp,0x1c
c0010ef7:	90                   	nop
c0010ef8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010efd:	85 c0                	test   eax,eax
c0010eff:	75 1f                	jne    c0010f20 <sys_timeouts_mbox_fetch+0x2c>
c0010f01:	83 ec 04             	sub    esp,0x4
c0010f04:	6a 00                	push   0x0
c0010f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f0e:	e8 4d fe fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f1a:	e9 cd 00 00 00       	jmp    c0010fec <sys_timeouts_mbox_fetch+0xf8>
c0010f1f:	90                   	nop
c0010f20:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 24                	je     c0010f50 <sys_timeouts_mbox_fetch+0x5c>
c0010f2c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f34:	83 ec 04             	sub    esp,0x4
c0010f37:	50                   	push   eax
c0010f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f40:	e8 1b fe fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f4c:	eb 0a                	jmp    c0010f58 <sys_timeouts_mbox_fetch+0x64>
c0010f4e:	66 90                	xchg   ax,ax
c0010f50:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010f58:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010f5d:	75 5d                	jne    c0010fbc <sys_timeouts_mbox_fetch+0xc8>
c0010f5f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f6e:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f85:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f88:	83 ec 08             	sub    esp,0x8
c0010f8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f8f:	6a 0b                	push   0xb
c0010f91:	e8 be 6c ff ff       	call   c0007c54 <memp_free>
c0010f96:	83 c4 10             	add    esp,0x10
c0010f99:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010f9e:	0f 84 54 ff ff ff    	je     c0010ef8 <sys_timeouts_mbox_fetch+0x4>
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010faf:	ff d0                	call   eax
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	e9 3f ff ff ff       	jmp    c0010ef8 <sys_timeouts_mbox_fetch+0x4>
c0010fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fbc:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010fc8:	73 16                	jae    c0010fe0 <sys_timeouts_mbox_fetch+0xec>
c0010fca:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fcf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010fd2:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fd7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010fdb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fde:	eb 0c                	jmp    c0010fec <sys_timeouts_mbox_fetch+0xf8>
c0010fe0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010fe5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fec:	90                   	nop
c0010fed:	83 c4 1c             	add    esp,0x1c
c0010ff0:	c3                   	ret    
c0010ff1:	66 90                	xchg   ax,ax
c0010ff3:	90                   	nop

c0010ff4 <udp_input>:
c0010ff4:	53                   	push   ebx
c0010ff5:	83 ec 28             	sub    esp,0x28
c0010ff8:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010ffe:	83 c0 01             	add    eax,0x1
c0011001:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0011007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001100b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011016:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011019:	0f b7 d8             	movzx  ebx,ax
c001101c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011020:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011023:	0f b7 c0             	movzx  eax,ax
c0011026:	83 ec 0c             	sub    esp,0xc
c0011029:	50                   	push   eax
c001102a:	e8 ed fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	0f b7 c0             	movzx  eax,ax
c0011035:	c1 e8 08             	shr    eax,0x8
c0011038:	0f b7 c0             	movzx  eax,ax
c001103b:	83 e0 0f             	and    eax,0xf
c001103e:	83 c0 02             	add    eax,0x2
c0011041:	c1 e0 02             	shl    eax,0x2
c0011044:	39 c3                	cmp    ebx,eax
c0011046:	7c 3c                	jl     c0011084 <udp_input+0x90>
c0011048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001104c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001104f:	0f b7 c0             	movzx  eax,ax
c0011052:	83 ec 0c             	sub    esp,0xc
c0011055:	50                   	push   eax
c0011056:	e8 c1 fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	0f b7 c0             	movzx  eax,ax
c0011061:	c1 e8 08             	shr    eax,0x8
c0011064:	83 e0 0f             	and    eax,0xf
c0011067:	c1 e0 02             	shl    eax,0x2
c001106a:	f7 d8                	neg    eax
c001106c:	98                   	cwde   
c001106d:	83 ec 08             	sub    esp,0x8
c0011070:	50                   	push   eax
c0011071:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011075:	e8 fa 72 ff ff       	call   c0008374 <pbuf_header>
c001107a:	83 c4 10             	add    esp,0x10
c001107d:	0f b6 c0             	movzx  eax,al
c0011080:	85 c0                	test   eax,eax
c0011082:	74 34                	je     c00110b8 <udp_input+0xc4>
c0011084:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c001108a:	83 c0 01             	add    eax,0x1
c001108d:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0011093:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011099:	83 c0 01             	add    eax,0x1
c001109c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110a9:	e8 66 74 ff ff       	call   c0008514 <pbuf_free>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	e9 aa 03 00 00       	jmp    c0011460 <udp_input+0x46c>
c00110b6:	66 90                	xchg   ax,ax
c00110b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00110c3:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110cf:	50                   	push   eax
c00110d0:	e8 e3 2f 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00110dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110e0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00110e3:	0f b7 c0             	movzx  eax,ax
c00110e6:	83 ec 0c             	sub    esp,0xc
c00110e9:	50                   	push   eax
c00110ea:	e8 2d fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00110f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110fb:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00110ff:	0f b7 c0             	movzx  eax,ax
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	50                   	push   eax
c0011106:	e8 11 fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0011113:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001111b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011120:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011128:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001112d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011131:	e9 0a 01 00 00       	jmp    c0011240 <udp_input+0x24c>
c0011136:	66 90                	xchg   ax,ax
c0011138:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001113d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011141:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011145:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001114a:	0f b7 c0             	movzx  eax,ax
c001114d:	39 c2                	cmp    edx,eax
c001114f:	75 57                	jne    c00111a8 <udp_input+0x1b4>
c0011151:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011156:	85 c0                	test   eax,eax
c0011158:	75 12                	jne    c001116c <udp_input+0x178>
c001115a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115e:	85 c0                	test   eax,eax
c0011160:	74 22                	je     c0011184 <udp_input+0x190>
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	8b 00                	mov    eax,DWORD PTR [eax]
c0011168:	85 c0                	test   eax,eax
c001116a:	74 18                	je     c0011184 <udp_input+0x190>
c001116c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011170:	8b 10                	mov    edx,DWORD PTR [eax]
c0011172:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011177:	39 c2                	cmp    edx,eax
c0011179:	74 09                	je     c0011184 <udp_input+0x190>
c001117b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011180:	85 c0                	test   eax,eax
c0011182:	74 24                	je     c00111a8 <udp_input+0x1b4>
c0011184:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0011189:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001118e:	75 18                	jne    c00111a8 <udp_input+0x1b4>
c0011190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011194:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011197:	0f b6 c0             	movzx  eax,al
c001119a:	83 e0 04             	and    eax,0x4
c001119d:	75 09                	jne    c00111a8 <udp_input+0x1b4>
c001119f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00111a7:	90                   	nop
c00111a8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00111ad:	85 c0                	test   eax,eax
c00111af:	74 7b                	je     c001122c <udp_input+0x238>
c00111b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00111b8:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00111bd:	0f b7 c0             	movzx  eax,ax
c00111c0:	39 c2                	cmp    edx,eax
c00111c2:	75 68                	jne    c001122c <udp_input+0x238>
c00111c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c8:	83 c0 04             	add    eax,0x4
c00111cb:	74 1b                	je     c00111e8 <udp_input+0x1f4>
c00111cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d4:	85 c0                	test   eax,eax
c00111d6:	74 10                	je     c00111e8 <udp_input+0x1f4>
c00111d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111df:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00111e4:	39 c2                	cmp    edx,eax
c00111e6:	75 44                	jne    c001122c <udp_input+0x238>
c00111e8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00111ed:	74 29                	je     c0011218 <udp_input+0x224>
c00111ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111f3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00111f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00111fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111fd:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011207:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001120a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001120e:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011213:	eb 37                	jmp    c001124c <udp_input+0x258>
c0011215:	8d 76 00             	lea    esi,[esi+0x0]
c0011218:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c001121e:	83 c0 01             	add    eax,0x1
c0011221:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0011227:	eb 23                	jmp    c001124c <udp_input+0x258>
c0011229:	8d 76 00             	lea    esi,[esi+0x0]
c001122c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011238:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001123b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001123f:	90                   	nop
c0011240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011245:	0f 85 ed fe ff ff    	jne    c0011138 <udp_input+0x144>
c001124b:	90                   	nop
c001124c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011251:	75 09                	jne    c001125c <udp_input+0x268>
c0011253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011257:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001125b:	90                   	nop
c001125c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011261:	75 15                	jne    c0011278 <udp_input+0x284>
c0011263:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011267:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001126a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001126f:	39 c2                	cmp    edx,eax
c0011271:	0f 85 d9 01 00 00    	jne    c0011450 <udp_input+0x45c>
c0011277:	90                   	nop
c0011278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001127c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011280:	0f b7 c0             	movzx  eax,ax
c0011283:	85 c0                	test   eax,eax
c0011285:	74 61                	je     c00112e8 <udp_input+0x2f4>
c0011287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001128b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001128e:	0f b7 c0             	movzx  eax,ax
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	50                   	push   eax
c0011295:	6a 11                	push   0x11
c0011297:	68 98 68 03 c0       	push   0xc0036898
c001129c:	68 90 68 03 c0       	push   0xc0036890
c00112a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00112a5:	e8 26 21 00 00       	call   c00133d0 <inet_chksum_pseudo>
c00112aa:	83 c4 20             	add    esp,0x20
c00112ad:	0f b7 c0             	movzx  eax,ax
c00112b0:	85 c0                	test   eax,eax
c00112b2:	74 34                	je     c00112e8 <udp_input+0x2f4>
c00112b4:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c00112ba:	83 c0 01             	add    eax,0x1
c00112bd:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c00112c3:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00112c9:	83 c0 01             	add    eax,0x1
c00112cc:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00112d2:	83 ec 0c             	sub    esp,0xc
c00112d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112d9:	e8 36 72 ff ff       	call   c0008514 <pbuf_free>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	e9 7a 01 00 00       	jmp    c0011460 <udp_input+0x46c>
c00112e6:	66 90                	xchg   ax,ax
c00112e8:	83 ec 08             	sub    esp,0x8
c00112eb:	6a f8                	push   0xfffffff8
c00112ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112f1:	e8 7e 70 ff ff       	call   c0008374 <pbuf_header>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	0f b6 c0             	movzx  eax,al
c00112fc:	85 c0                	test   eax,eax
c00112fe:	74 38                	je     c0011338 <udp_input+0x344>
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	68 89 0d 03 c0       	push   0xc0030d89
c0011308:	68 26 fe 02 c0       	push   0xc002fe26
c001130d:	e8 ee ea 00 00       	call   c001fe00 <CPrintf>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001131b:	83 c0 01             	add    eax,0x1
c001131e:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001132b:	e8 e4 71 ff ff       	call   c0008514 <pbuf_free>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	e9 28 01 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011338:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001133d:	74 51                	je     c0011390 <udp_input+0x39c>
c001133f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011343:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011346:	85 c0                	test   eax,eax
c0011348:	74 32                	je     c001137c <udp_input+0x388>
c001134a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011351:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011356:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001135a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001135d:	83 ec 0c             	sub    esp,0xc
c0011360:	51                   	push   ecx
c0011361:	68 90 68 03 c0       	push   0xc0036890
c0011366:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001136a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001136e:	52                   	push   edx
c001136f:	ff d0                	call   eax
c0011371:	83 c4 20             	add    esp,0x20
c0011374:	e9 e7 00 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011379:	8d 76 00             	lea    esi,[esi+0x0]
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011383:	e8 8c 71 ff ff       	call   c0008514 <pbuf_free>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	e9 d0 00 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011390:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011395:	85 c0                	test   eax,eax
c0011397:	0f 85 83 00 00 00    	jne    c0011420 <udp_input+0x42c>
c001139d:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00113a2:	25 f0 00 00 00       	and    eax,0xf0
c00113a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00113ac:	74 72                	je     c0011420 <udp_input+0x42c>
c00113ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113b2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00113b5:	0f b7 c0             	movzx  eax,ax
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	50                   	push   eax
c00113bc:	e8 5b f8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	0f b7 c0             	movzx  eax,ax
c00113c7:	c1 e8 08             	shr    eax,0x8
c00113ca:	0f b7 c0             	movzx  eax,ax
c00113cd:	83 e0 0f             	and    eax,0xf
c00113d0:	83 c0 02             	add    eax,0x2
c00113d3:	c1 e0 02             	shl    eax,0x2
c00113d6:	98                   	cwde   
c00113d7:	83 ec 08             	sub    esp,0x8
c00113da:	50                   	push   eax
c00113db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113df:	e8 90 6f ff ff       	call   c0008374 <pbuf_header>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ee:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00113f2:	74 18                	je     c001140c <udp_input+0x418>
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	68 9d 0d 03 c0       	push   0xc0030d9d
c00113fc:	68 26 fe 02 c0       	push   0xc002fe26
c0011401:	e8 fa e9 00 00       	call   c001fe00 <CPrintf>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	8d 76 00             	lea    esi,[esi+0x0]
c001140c:	83 ec 08             	sub    esp,0x8
c001140f:	6a 03                	push   0x3
c0011411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011415:	e8 76 1e 00 00       	call   c0013290 <icmp_dest_unreach>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	8d 76 00             	lea    esi,[esi+0x0]
c0011420:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c0011426:	83 c0 01             	add    eax,0x1
c0011429:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c001142f:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011435:	83 c0 01             	add    eax,0x1
c0011438:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011445:	e8 ca 70 ff ff       	call   c0008514 <pbuf_free>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	eb 11                	jmp    c0011460 <udp_input+0x46c>
c001144f:	90                   	nop
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011457:	e8 b8 70 ff ff       	call   c0008514 <pbuf_free>
c001145c:	83 c4 10             	add    esp,0x10
c001145f:	90                   	nop
c0011460:	90                   	nop
c0011461:	83 c4 28             	add    esp,0x28
c0011464:	5b                   	pop    ebx
c0011465:	c3                   	ret    
c0011466:	66 90                	xchg   ax,ax

c0011468 <udp_bind>:
c0011468:	83 ec 2c             	sub    esp,0x2c
c001146b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001146f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011474:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011479:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001147e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011482:	e9 8d 00 00 00       	jmp    c0011514 <udp_bind+0xac>
c0011487:	90                   	nop
c0011488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001148c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011490:	75 26                	jne    c00114b8 <udp_bind+0x50>
c0011492:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011497:	85 c0                	test   eax,eax
c0011499:	74 15                	je     c00114b0 <udp_bind+0x48>
c001149b:	83 ec 08             	sub    esp,0x8
c001149e:	68 b1 0d 03 c0       	push   0xc0030db1
c00114a3:	68 26 fe 02 c0       	push   0xc002fe26
c00114a8:	e8 53 e9 00 00       	call   c001fe00 <CPrintf>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c00114b5:	eb 51                	jmp    c0011508 <udp_bind+0xa0>
c00114b7:	90                   	nop
c00114b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114bc:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114c0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c5:	0f b7 c0             	movzx  eax,ax
c00114c8:	39 c2                	cmp    edx,eax
c00114ca:	75 3c                	jne    c0011508 <udp_bind+0xa0>
c00114cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d0:	85 c0                	test   eax,eax
c00114d2:	74 2c                	je     c0011500 <udp_bind+0x98>
c00114d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114da:	85 c0                	test   eax,eax
c00114dc:	74 22                	je     c0011500 <udp_bind+0x98>
c00114de:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00114e3:	74 1b                	je     c0011500 <udp_bind+0x98>
c00114e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114eb:	85 c0                	test   eax,eax
c00114ed:	74 11                	je     c0011500 <udp_bind+0x98>
c00114ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00114f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	39 c2                	cmp    edx,eax
c00114fd:	75 09                	jne    c0011508 <udp_bind+0xa0>
c00114ff:	90                   	nop
c0011500:	b0 f8                	mov    al,0xf8
c0011502:	e9 dd 00 00 00       	jmp    c00115e4 <udp_bind+0x17c>
c0011507:	90                   	nop
c0011508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001150c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001150f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011513:	90                   	nop
c0011514:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011519:	0f 85 69 ff ff ff    	jne    c0011488 <udp_bind+0x20>
c001151f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011524:	74 0a                	je     c0011530 <udp_bind+0xc8>
c0011526:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001152a:	8b 00                	mov    eax,DWORD PTR [eax]
c001152c:	eb 0a                	jmp    c0011538 <udp_bind+0xd0>
c001152e:	66 90                	xchg   ax,ax
c0011530:	b8 00 00 00 00       	mov    eax,0x0
c0011535:	8d 76 00             	lea    esi,[esi+0x0]
c0011538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001153c:	89 02                	mov    DWORD PTR [edx],eax
c001153e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011543:	85 c0                	test   eax,eax
c0011545:	75 6d                	jne    c00115b4 <udp_bind+0x14c>
c0011547:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001154e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011553:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011557:	eb 3b                	jmp    c0011594 <udp_bind+0x12c>
c0011559:	8d 76 00             	lea    esi,[esi+0x0]
c001155c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011560:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011564:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011569:	0f b7 c0             	movzx  eax,ax
c001156c:	39 c2                	cmp    edx,eax
c001156e:	75 18                	jne    c0011588 <udp_bind+0x120>
c0011570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011574:	83 c0 01             	add    eax,0x1
c0011577:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001157c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011585:	eb 0d                	jmp    c0011594 <udp_bind+0x12c>
c0011587:	90                   	nop
c0011588:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001158c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001158f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011593:	90                   	nop
c0011594:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011599:	74 0d                	je     c00115a8 <udp_bind+0x140>
c001159b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00115a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00115a5:	75 b5                	jne    c001155c <udp_bind+0xf4>
c00115a7:	90                   	nop
c00115a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00115ad:	74 05                	je     c00115b4 <udp_bind+0x14c>
c00115af:	b0 f8                	mov    al,0xf8
c00115b1:	eb 31                	jmp    c00115e4 <udp_bind+0x17c>
c00115b3:	90                   	nop
c00115b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115bc:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c00115c0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00115c5:	85 c0                	test   eax,eax
c00115c7:	75 17                	jne    c00115e0 <udp_bind+0x178>
c00115c9:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00115cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115da:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00115df:	90                   	nop
c00115e0:	b0 00                	mov    al,0x0
c00115e2:	66 90                	xchg   ax,ax
c00115e4:	83 c4 2c             	add    esp,0x2c
c00115e7:	c3                   	ret    

c00115e8 <udp_sendto_if>:
c00115e8:	83 ec 2c             	sub    esp,0x2c
c00115eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115ef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00115f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00115fc:	0f b7 c0             	movzx  eax,ax
c00115ff:	85 c0                	test   eax,eax
c0011601:	75 39                	jne    c001163c <udp_sendto_if+0x54>
c0011603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011607:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001160b:	0f b7 d0             	movzx  edx,ax
c001160e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011612:	83 ec 04             	sub    esp,0x4
c0011615:	52                   	push   edx
c0011616:	50                   	push   eax
c0011617:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001161b:	e8 48 fe ff ff       	call   c0011468 <udp_bind>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011627:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c001162c:	85 c0                	test   eax,eax
c001162e:	74 0c                	je     c001163c <udp_sendto_if+0x54>
c0011630:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011634:	e9 2f 02 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c0011639:	8d 76 00             	lea    esi,[esi+0x0]
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	6a 08                	push   0x8
c0011641:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011645:	e8 2a 6d ff ff       	call   c0008374 <pbuf_header>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	0f b6 c0             	movzx  eax,al
c0011650:	85 c0                	test   eax,eax
c0011652:	74 48                	je     c001169c <udp_sendto_if+0xb4>
c0011654:	83 ec 04             	sub    esp,0x4
c0011657:	6a 00                	push   0x0
c0011659:	6a 08                	push   0x8
c001165b:	6a 01                	push   0x1
c001165d:	e8 8e 70 ff ff       	call   c00086f0 <pbuf_alloc>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011669:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001166e:	75 08                	jne    c0011678 <udp_sendto_if+0x90>
c0011670:	b0 ff                	mov    al,0xff
c0011672:	e9 f1 01 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c0011677:	90                   	nop
c0011678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001167c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001167f:	0f b7 c0             	movzx  eax,ax
c0011682:	85 c0                	test   eax,eax
c0011684:	74 1e                	je     c00116a4 <udp_sendto_if+0xbc>
c0011686:	83 ec 08             	sub    esp,0x8
c0011689:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001168d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011691:	e8 a2 77 ff ff       	call   c0008e38 <pbuf_chain>
c0011696:	83 c4 10             	add    esp,0x10
c0011699:	eb 09                	jmp    c00116a4 <udp_sendto_if+0xbc>
c001169b:	90                   	nop
c001169c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00116ac:	0f b7 c0             	movzx  eax,ax
c00116af:	83 f8 07             	cmp    eax,0x7
c00116b2:	77 18                	ja     c00116cc <udp_sendto_if+0xe4>
c00116b4:	83 ec 08             	sub    esp,0x8
c00116b7:	68 c0 0d 03 c0       	push   0xc0030dc0
c00116bc:	68 26 fe 02 c0       	push   0xc002fe26
c00116c1:	e8 3a e7 00 00       	call   c001fe00 <CPrintf>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	8d 76 00             	lea    esi,[esi+0x0]
c00116cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00116d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116db:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 31 f5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	89 c2                	mov    edx,eax
c00116f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116f4:	66 89 10             	mov    WORD PTR [eax],dx
c00116f7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	50                   	push   eax
c0011700:	e8 17 f5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	89 c2                	mov    edx,eax
c001170a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001170e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0011712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011716:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001171c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011720:	85 c0                	test   eax,eax
c0011722:	74 0c                	je     c0011730 <udp_sendto_if+0x148>
c0011724:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011728:	8b 00                	mov    eax,DWORD PTR [eax]
c001172a:	85 c0                	test   eax,eax
c001172c:	75 12                	jne    c0011740 <udp_sendto_if+0x158>
c001172e:	66 90                	xchg   ax,ax
c0011730:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011734:	83 c0 04             	add    eax,0x4
c0011737:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001173b:	eb 47                	jmp    c0011784 <udp_sendto_if+0x19c>
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011744:	8b 10                	mov    edx,DWORD PTR [eax]
c0011746:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001174a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001174d:	39 c2                	cmp    edx,eax
c001174f:	74 2b                	je     c001177c <udp_sendto_if+0x194>
c0011751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011755:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011759:	74 19                	je     c0011774 <udp_sendto_if+0x18c>
c001175b:	83 ec 0c             	sub    esp,0xc
c001175e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011762:	e8 ad 6d ff ff       	call   c0008514 <pbuf_free>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011772:	66 90                	xchg   ax,ax
c0011774:	b0 fa                	mov    al,0xfa
c0011776:	e9 ed 00 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c001177b:	90                   	nop
c001177c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011780:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011784:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011788:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001178b:	0f b7 c0             	movzx  eax,ax
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	50                   	push   eax
c0011792:	e8 85 f4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	89 c2                	mov    edx,eax
c001179c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00117a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117a8:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117ab:	0f b6 c0             	movzx  eax,al
c00117ae:	83 e0 01             	and    eax,0x1
c00117b1:	75 49                	jne    c00117fc <udp_sendto_if+0x214>
c00117b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00117ba:	0f b7 c0             	movzx  eax,ax
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	50                   	push   eax
c00117c1:	6a 11                	push   0x11
c00117c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00117c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117cf:	e8 fc 1b 00 00       	call   c00133d0 <inet_chksum_pseudo>
c00117d4:	83 c4 20             	add    esp,0x20
c00117d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00117dc:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00117e1:	85 c0                	test   eax,eax
c00117e3:	75 07                	jne    c00117ec <udp_sendto_if+0x204>
c00117e5:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00117ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00117f5:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011800:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011803:	0f b6 d0             	movzx  edx,al
c0011806:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001180a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001180d:	0f b6 c0             	movzx  eax,al
c0011810:	83 ec 04             	sub    esp,0x4
c0011813:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011817:	6a 11                	push   0x11
c0011819:	52                   	push   edx
c001181a:	50                   	push   eax
c001181b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001181f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011823:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011827:	e8 08 25 00 00       	call   c0013d34 <ip_output_if>
c001182c:	83 c4 20             	add    esp,0x20
c001182f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011833:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011837:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001183b:	74 17                	je     c0011854 <udp_sendto_if+0x26c>
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 cb 6c ff ff       	call   c0008514 <pbuf_free>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011854:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c001185a:	83 c0 01             	add    eax,0x1
c001185d:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c0011863:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011867:	90                   	nop
c0011868:	83 c4 2c             	add    esp,0x2c
c001186b:	c3                   	ret    

c001186c <udp_sendto>:
c001186c:	83 ec 2c             	sub    esp,0x2c
c001186f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011873:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001187f:	e8 d8 1f 00 00       	call   c001385c <ip_route>
c0011884:	83 c4 10             	add    esp,0x10
c0011887:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001188b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011890:	75 16                	jne    c00118a8 <udp_sendto+0x3c>
c0011892:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011898:	83 c0 01             	add    eax,0x1
c001189b:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c00118a1:	b0 fc                	mov    al,0xfc
c00118a3:	eb 27                	jmp    c00118cc <udp_sendto+0x60>
c00118a5:	8d 76 00             	lea    esi,[esi+0x0]
c00118a8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00118ad:	83 ec 0c             	sub    esp,0xc
c00118b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00118b4:	50                   	push   eax
c00118b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118c1:	e8 22 fd ff ff       	call   c00115e8 <udp_sendto_if>
c00118c6:	83 c4 20             	add    esp,0x20
c00118c9:	8d 76 00             	lea    esi,[esi+0x0]
c00118cc:	83 c4 2c             	add    esp,0x2c
c00118cf:	c3                   	ret    

c00118d0 <udp_send>:
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00118da:	0f b7 c0             	movzx  eax,ax
c00118dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00118e1:	83 c2 04             	add    edx,0x4
c00118e4:	50                   	push   eax
c00118e5:	52                   	push   edx
c00118e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ee:	e8 79 ff ff ff       	call   c001186c <udp_sendto>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	83 c4 0c             	add    esp,0xc
c00118f9:	c3                   	ret    
c00118fa:	66 90                	xchg   ax,ax

c00118fc <udp_connect>:
c00118fc:	83 ec 2c             	sub    esp,0x2c
c00118ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011903:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011910:	0f b7 c0             	movzx  eax,ax
c0011913:	85 c0                	test   eax,eax
c0011915:	75 39                	jne    c0011950 <udp_connect+0x54>
c0011917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001191f:	0f b7 d0             	movzx  edx,ax
c0011922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011926:	83 ec 04             	sub    esp,0x4
c0011929:	52                   	push   edx
c001192a:	50                   	push   eax
c001192b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001192f:	e8 34 fb ff ff       	call   c0011468 <udp_bind>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001193b:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011940:	85 c0                	test   eax,eax
c0011942:	74 0c                	je     c0011950 <udp_connect+0x54>
c0011944:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011948:	e9 8b 00 00 00       	jmp    c00119d8 <udp_connect+0xdc>
c001194d:	8d 76 00             	lea    esi,[esi+0x0]
c0011950:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011955:	74 09                	je     c0011960 <udp_connect+0x64>
c0011957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001195b:	8b 00                	mov    eax,DWORD PTR [eax]
c001195d:	eb 09                	jmp    c0011968 <udp_connect+0x6c>
c001195f:	90                   	nop
c0011960:	b8 00 00 00 00       	mov    eax,0x0
c0011965:	8d 76 00             	lea    esi,[esi+0x0]
c0011968:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001196c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001196f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011973:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011977:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c001197b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001197f:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011982:	83 c8 04             	or     eax,0x4
c0011985:	88 c2                	mov    dl,al
c0011987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001198b:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001198e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011997:	eb 1f                	jmp    c00119b8 <udp_connect+0xbc>
c0011999:	8d 76 00             	lea    esi,[esi+0x0]
c001199c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119a0:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00119a4:	75 06                	jne    c00119ac <udp_connect+0xb0>
c00119a6:	b0 00                	mov    al,0x0
c00119a8:	eb 2e                	jmp    c00119d8 <udp_connect+0xdc>
c00119aa:	66 90                	xchg   ax,ax
c00119ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119b7:	90                   	nop
c00119b8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00119bd:	75 dd                	jne    c001199c <udp_connect+0xa0>
c00119bf:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00119c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119d0:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00119d5:	b0 00                	mov    al,0x0
c00119d7:	90                   	nop
c00119d8:	83 c4 2c             	add    esp,0x2c
c00119db:	c3                   	ret    

c00119dc <udp_disconnect>:
c00119dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119eb:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00119f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119f5:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00119f8:	83 e0 fb             	and    eax,0xfffffffb
c00119fb:	88 c2                	mov    dl,al
c00119fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a01:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011a04:	90                   	nop
c0011a05:	c3                   	ret    
c0011a06:	66 90                	xchg   ax,ax

c0011a08 <udp_recv>:
c0011a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011a13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a1b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a1e:	90                   	nop
c0011a1f:	c3                   	ret    

c0011a20 <udp_remove>:
c0011a20:	83 ec 1c             	sub    esp,0x1c
c0011a23:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011a28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011a2c:	75 12                	jne    c0011a40 <udp_remove+0x20>
c0011a2e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011a33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a36:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011a3b:	eb 4b                	jmp    c0011a88 <udp_remove+0x68>
c0011a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a40:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011a45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a49:	eb 35                	jmp    c0011a80 <udp_remove+0x60>
c0011a4b:	90                   	nop
c0011a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a53:	85 c0                	test   eax,eax
c0011a55:	74 1d                	je     c0011a74 <udp_remove+0x54>
c0011a57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a5e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011a62:	75 10                	jne    c0011a74 <udp_remove+0x54>
c0011a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a68:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a6f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011a72:	66 90                	xchg   ax,ax
c0011a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a7f:	90                   	nop
c0011a80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a85:	75 c5                	jne    c0011a4c <udp_remove+0x2c>
c0011a87:	90                   	nop
c0011a88:	83 ec 08             	sub    esp,0x8
c0011a8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011a8f:	6a 01                	push   0x1
c0011a91:	e8 be 61 ff ff       	call   c0007c54 <memp_free>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	90                   	nop
c0011a9a:	83 c4 1c             	add    esp,0x1c
c0011a9d:	c3                   	ret    
c0011a9e:	66 90                	xchg   ax,ax

c0011aa0 <udp_new>:
c0011aa0:	83 ec 1c             	sub    esp,0x1c
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	6a 01                	push   0x1
c0011aa8:	e8 7b 60 ff ff       	call   c0007b28 <memp_malloc>
c0011aad:	83 c4 10             	add    esp,0x10
c0011ab0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ab4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011ab9:	74 1d                	je     c0011ad8 <udp_new+0x38>
c0011abb:	83 ec 04             	sub    esp,0x4
c0011abe:	6a 20                	push   0x20
c0011ac0:	6a 00                	push   0x0
c0011ac2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ac6:	e8 25 ea fe ff       	call   c00004f0 <memset>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ad2:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011ad6:	66 90                	xchg   ax,ax
c0011ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011adc:	83 c4 1c             	add    esp,0x1c
c0011adf:	c3                   	ret    

c0011ae0 <free_entry>:
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ae7:	c1 e0 04             	shl    eax,0x4
c0011aea:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011af1:	85 c0                	test   eax,eax
c0011af3:	74 2f                	je     c0011b24 <free_entry+0x44>
c0011af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af9:	c1 e0 04             	shl    eax,0x4
c0011afc:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b03:	83 ec 0c             	sub    esp,0xc
c0011b06:	50                   	push   eax
c0011b07:	e8 08 6a ff ff       	call   c0008514 <pbuf_free>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b13:	c1 e0 04             	shl    eax,0x4
c0011b16:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011b21:	8d 76 00             	lea    esi,[esi+0x0]
c0011b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b28:	c1 e0 04             	shl    eax,0x4
c0011b2b:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011b30:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011b33:	90                   	nop
c0011b34:	83 c4 0c             	add    esp,0xc
c0011b37:	c3                   	ret    

c0011b38 <etharp_tmr>:
c0011b38:	83 ec 1c             	sub    esp,0x1c
c0011b3b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b40:	e9 a7 00 00 00       	jmp    c0011bec <etharp_tmr+0xb4>
c0011b45:	8d 76 00             	lea    esi,[esi+0x0]
c0011b48:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b4d:	c1 e0 04             	shl    eax,0x4
c0011b50:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011b55:	8a 00                	mov    al,BYTE PTR [eax]
c0011b57:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011b5b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011b60:	85 c0                	test   eax,eax
c0011b62:	74 7c                	je     c0011be0 <etharp_tmr+0xa8>
c0011b64:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b69:	89 c2                	mov    edx,eax
c0011b6b:	c1 e2 04             	shl    edx,0x4
c0011b6e:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011b74:	8a 12                	mov    dl,BYTE PTR [edx]
c0011b76:	83 c2 01             	add    edx,0x1
c0011b79:	c1 e0 04             	shl    eax,0x4
c0011b7c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b81:	88 10                	mov    BYTE PTR [eax],dl
c0011b83:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b88:	c1 e0 04             	shl    eax,0x4
c0011b8b:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b90:	8a 00                	mov    al,BYTE PTR [eax]
c0011b92:	0f b6 c0             	movzx  eax,al
c0011b95:	3d ef 00 00 00       	cmp    eax,0xef
c0011b9a:	77 30                	ja     c0011bcc <etharp_tmr+0x94>
c0011b9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011ba1:	c1 e0 04             	shl    eax,0x4
c0011ba4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ba9:	8a 00                	mov    al,BYTE PTR [eax]
c0011bab:	0f b6 c0             	movzx  eax,al
c0011bae:	83 f8 01             	cmp    eax,0x1
c0011bb1:	75 2d                	jne    c0011be0 <etharp_tmr+0xa8>
c0011bb3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bb8:	c1 e0 04             	shl    eax,0x4
c0011bbb:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bc0:	8a 00                	mov    al,BYTE PTR [eax]
c0011bc2:	0f b6 c0             	movzx  eax,al
c0011bc5:	83 f8 01             	cmp    eax,0x1
c0011bc8:	76 16                	jbe    c0011be0 <etharp_tmr+0xa8>
c0011bca:	66 90                	xchg   ax,ax
c0011bcc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bd1:	83 ec 0c             	sub    esp,0xc
c0011bd4:	50                   	push   eax
c0011bd5:	e8 06 ff ff ff       	call   c0011ae0 <free_entry>
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0011be0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011be4:	83 c0 01             	add    eax,0x1
c0011be7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011beb:	90                   	nop
c0011bec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bf1:	83 f8 09             	cmp    eax,0x9
c0011bf4:	0f 86 4e ff ff ff    	jbe    c0011b48 <etharp_tmr+0x10>
c0011bfa:	90                   	nop
c0011bfb:	83 c4 1c             	add    esp,0x1c
c0011bfe:	c3                   	ret    
c0011bff:	90                   	nop

c0011c00 <find_entry>:
c0011c00:	83 ec 2c             	sub    esp,0x2c
c0011c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011c0b:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011c10:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011c15:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011c1a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011c1f:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011c24:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011c29:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011c2e:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011c33:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011c38:	e9 7f 01 00 00       	jmp    c0011dbc <find_entry+0x1bc>
c0011c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c40:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c45:	c1 e0 04             	shl    eax,0x4
c0011c48:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c4d:	8a 00                	mov    al,BYTE PTR [eax]
c0011c4f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011c53:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011c58:	83 f8 0a             	cmp    eax,0xa
c0011c5b:	75 17                	jne    c0011c74 <find_entry+0x74>
c0011c5d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c62:	85 c0                	test   eax,eax
c0011c64:	75 0e                	jne    c0011c74 <find_entry+0x74>
c0011c66:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c6a:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011c6e:	e9 3d 01 00 00       	jmp    c0011db0 <find_entry+0x1b0>
c0011c73:	90                   	nop
c0011c74:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c79:	85 c0                	test   eax,eax
c0011c7b:	0f 84 2f 01 00 00    	je     c0011db0 <find_entry+0x1b0>
c0011c81:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c86:	83 f8 01             	cmp    eax,0x1
c0011c89:	74 21                	je     c0011cac <find_entry+0xac>
c0011c8b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c90:	83 f8 02             	cmp    eax,0x2
c0011c93:	74 17                	je     c0011cac <find_entry+0xac>
c0011c95:	83 ec 08             	sub    esp,0x8
c0011c98:	68 f0 0d 03 c0       	push   0xc0030df0
c0011c9d:	68 26 fe 02 c0       	push   0xc002fe26
c0011ca2:	e8 59 e1 00 00       	call   c001fe00 <CPrintf>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	66 90                	xchg   ax,ax
c0011cac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb1:	74 25                	je     c0011cd8 <find_entry+0xd8>
c0011cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cb9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cbe:	c1 e0 04             	shl    eax,0x4
c0011cc1:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc8:	39 c2                	cmp    edx,eax
c0011cca:	75 0c                	jne    c0011cd8 <find_entry+0xd8>
c0011ccc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cd0:	e9 53 02 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cdd:	83 f8 01             	cmp    eax,0x1
c0011ce0:	0f 85 8a 00 00 00    	jne    c0011d70 <find_entry+0x170>
c0011ce6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ceb:	c1 e0 04             	shl    eax,0x4
c0011cee:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	74 3f                	je     c0011d38 <find_entry+0x138>
c0011cf9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cfe:	c1 e0 04             	shl    eax,0x4
c0011d01:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d06:	8a 00                	mov    al,BYTE PTR [eax]
c0011d08:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011d0d:	0f b6 c0             	movzx  eax,al
c0011d10:	39 c2                	cmp    edx,eax
c0011d12:	0f 87 98 00 00 00    	ja     c0011db0 <find_entry+0x1b0>
c0011d18:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d1c:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011d20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d25:	c1 e0 04             	shl    eax,0x4
c0011d28:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d2d:	8a 00                	mov    al,BYTE PTR [eax]
c0011d2f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011d33:	eb 7b                	jmp    c0011db0 <find_entry+0x1b0>
c0011d35:	8d 76 00             	lea    esi,[esi+0x0]
c0011d38:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d3d:	c1 e0 04             	shl    eax,0x4
c0011d40:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d45:	8a 00                	mov    al,BYTE PTR [eax]
c0011d47:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011d4c:	0f b6 c0             	movzx  eax,al
c0011d4f:	39 c2                	cmp    edx,eax
c0011d51:	77 5d                	ja     c0011db0 <find_entry+0x1b0>
c0011d53:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011d5b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d60:	c1 e0 04             	shl    eax,0x4
c0011d63:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d68:	8a 00                	mov    al,BYTE PTR [eax]
c0011d6a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011d6e:	eb 40                	jmp    c0011db0 <find_entry+0x1b0>
c0011d70:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011d75:	83 f8 02             	cmp    eax,0x2
c0011d78:	75 36                	jne    c0011db0 <find_entry+0x1b0>
c0011d7a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d7f:	c1 e0 04             	shl    eax,0x4
c0011d82:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d87:	8a 00                	mov    al,BYTE PTR [eax]
c0011d89:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011d8e:	0f b6 c0             	movzx  eax,al
c0011d91:	39 c2                	cmp    edx,eax
c0011d93:	77 1b                	ja     c0011db0 <find_entry+0x1b0>
c0011d95:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d99:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011d9d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011da2:	c1 e0 04             	shl    eax,0x4
c0011da5:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011daa:	8a 00                	mov    al,BYTE PTR [eax]
c0011dac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011db0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011db4:	83 c0 01             	add    eax,0x1
c0011db7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbb:	90                   	nop
c0011dbc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dc1:	83 f8 09             	cmp    eax,0x9
c0011dc4:	0f 86 76 fe ff ff    	jbe    c0011c40 <find_entry+0x40>
c0011dca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011dcf:	83 e0 02             	and    eax,0x2
c0011dd2:	75 14                	jne    c0011de8 <find_entry+0x1e8>
c0011dd4:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011dd9:	83 f8 0a             	cmp    eax,0xa
c0011ddc:	75 12                	jne    c0011df0 <find_entry+0x1f0>
c0011dde:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011de3:	83 e0 01             	and    eax,0x1
c0011de6:	75 08                	jne    c0011df0 <find_entry+0x1f0>
c0011de8:	b0 ff                	mov    al,0xff
c0011dea:	e9 39 01 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011def:	90                   	nop
c0011df0:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011df5:	83 f8 09             	cmp    eax,0x9
c0011df8:	7f 0e                	jg     c0011e08 <find_entry+0x208>
c0011dfa:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011dfe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e02:	e9 a1 00 00 00       	jmp    c0011ea8 <find_entry+0x2a8>
c0011e07:	90                   	nop
c0011e08:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011e0d:	83 f8 09             	cmp    eax,0x9
c0011e10:	7f 32                	jg     c0011e44 <find_entry+0x244>
c0011e12:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011e16:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e1a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e1f:	c1 e0 04             	shl    eax,0x4
c0011e22:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e29:	85 c0                	test   eax,eax
c0011e2b:	74 47                	je     c0011e74 <find_entry+0x274>
c0011e2d:	83 ec 08             	sub    esp,0x8
c0011e30:	68 69 0f 03 c0       	push   0xc0030f69
c0011e35:	68 26 fe 02 c0       	push   0xc002fe26
c0011e3a:	e8 c1 df 00 00       	call   c001fe00 <CPrintf>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	eb 30                	jmp    c0011e74 <find_entry+0x274>
c0011e44:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e49:	83 f8 09             	cmp    eax,0x9
c0011e4c:	7f 0a                	jg     c0011e58 <find_entry+0x258>
c0011e4e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e56:	eb 1c                	jmp    c0011e74 <find_entry+0x274>
c0011e58:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011e5d:	83 f8 09             	cmp    eax,0x9
c0011e60:	7f 0a                	jg     c0011e6c <find_entry+0x26c>
c0011e62:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011e66:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e6a:	eb 08                	jmp    c0011e74 <find_entry+0x274>
c0011e6c:	b0 ff                	mov    al,0xff
c0011e6e:	e9 b5 00 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011e73:	90                   	nop
c0011e74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e79:	83 f8 09             	cmp    eax,0x9
c0011e7c:	76 16                	jbe    c0011e94 <find_entry+0x294>
c0011e7e:	83 ec 08             	sub    esp,0x8
c0011e81:	68 80 0f 03 c0       	push   0xc0030f80
c0011e86:	68 26 fe 02 c0       	push   0xc002fe26
c0011e8b:	e8 70 df 00 00       	call   c001fe00 <CPrintf>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	90                   	nop
c0011e94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	50                   	push   eax
c0011e9d:	e8 3e fc ff ff       	call   c0011ae0 <free_entry>
c0011ea2:	83 c4 10             	add    esp,0x10
c0011ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ea8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ead:	83 f8 09             	cmp    eax,0x9
c0011eb0:	76 16                	jbe    c0011ec8 <find_entry+0x2c8>
c0011eb2:	83 ec 08             	sub    esp,0x8
c0011eb5:	68 80 0f 03 c0       	push   0xc0030f80
c0011eba:	68 26 fe 02 c0       	push   0xc002fe26
c0011ebf:	e8 3c df 00 00       	call   c001fe00 <CPrintf>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	90                   	nop
c0011ec8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ecd:	c1 e0 04             	shl    eax,0x4
c0011ed0:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ed5:	8a 00                	mov    al,BYTE PTR [eax]
c0011ed7:	0f b6 c0             	movzx  eax,al
c0011eda:	85 c0                	test   eax,eax
c0011edc:	74 16                	je     c0011ef4 <find_entry+0x2f4>
c0011ede:	83 ec 08             	sub    esp,0x8
c0011ee1:	68 30 0e 03 c0       	push   0xc0030e30
c0011ee6:	68 26 fe 02 c0       	push   0xc002fe26
c0011eeb:	e8 10 df 00 00       	call   c001fe00 <CPrintf>
c0011ef0:	83 c4 10             	add    esp,0x10
c0011ef3:	90                   	nop
c0011ef4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011ef9:	74 19                	je     c0011f14 <find_entry+0x314>
c0011efb:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011f00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f06:	c1 e2 04             	shl    edx,0x4
c0011f09:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011f0f:	89 02                	mov    DWORD PTR [edx],eax
c0011f11:	8d 76 00             	lea    esi,[esi+0x0]
c0011f14:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011f19:	c1 e0 04             	shl    eax,0x4
c0011f1c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011f21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f24:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011f28:	83 c4 2c             	add    esp,0x2c
c0011f2b:	c3                   	ret    

c0011f2c <etharp_send_ip>:
c0011f2c:	83 ec 1c             	sub    esp,0x1c
c0011f2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011f33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f3e:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f41:	0f b6 c0             	movzx  eax,al
c0011f44:	83 f8 06             	cmp    eax,0x6
c0011f47:	74 17                	je     c0011f60 <etharp_send_ip+0x34>
c0011f49:	83 ec 08             	sub    esp,0x8
c0011f4c:	68 5c 0e 03 c0       	push   0xc0030e5c
c0011f51:	68 26 fe 02 c0       	push   0xc002fe26
c0011f56:	e8 a5 de 00 00       	call   c001fe00 <CPrintf>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	66 90                	xchg   ax,ax
c0011f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f64:	83 ec 04             	sub    esp,0x4
c0011f67:	6a 06                	push   0x6
c0011f69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f6d:	50                   	push   eax
c0011f6e:	e8 07 e4 fe ff       	call   c000037a <memcpy>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f7a:	83 c0 06             	add    eax,0x6
c0011f7d:	83 ec 04             	sub    esp,0x4
c0011f80:	6a 06                	push   0x6
c0011f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011f86:	50                   	push   eax
c0011f87:	e8 ee e3 fe ff       	call   c000037a <memcpy>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f93:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f9d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011fa0:	83 ec 08             	sub    esp,0x8
c0011fa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fab:	ff d0                	call   eax
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	83 c4 1c             	add    esp,0x1c
c0011fb3:	c3                   	ret    

c0011fb4 <update_arp_entry>:
c0011fb4:	83 ec 2c             	sub    esp,0x2c
c0011fb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fc3:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011fc6:	0f b6 c0             	movzx  eax,al
c0011fc9:	83 f8 06             	cmp    eax,0x6
c0011fcc:	74 16                	je     c0011fe4 <update_arp_entry+0x30>
c0011fce:	83 ec 08             	sub    esp,0x8
c0011fd1:	68 a0 0e 03 c0       	push   0xc0030ea0
c0011fd6:	68 26 fe 02 c0       	push   0xc002fe26
c0011fdb:	e8 20 de 00 00       	call   c001fe00 <CPrintf>
c0011fe0:	83 c4 10             	add    esp,0x10
c0011fe3:	90                   	nop
c0011fe4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011fe9:	74 39                	je     c0012024 <update_arp_entry+0x70>
c0011feb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff1:	85 c0                	test   eax,eax
c0011ff3:	74 2f                	je     c0012024 <update_arp_entry+0x70>
c0011ff5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffb:	83 ec 08             	sub    esp,0x8
c0011ffe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012002:	50                   	push   eax
c0012003:	e8 b0 20 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	0f b6 c0             	movzx  eax,al
c001200e:	85 c0                	test   eax,eax
c0012010:	75 12                	jne    c0012024 <update_arp_entry+0x70>
c0012012:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012016:	8b 00                	mov    eax,DWORD PTR [eax]
c0012018:	25 f0 00 00 00       	and    eax,0xf0
c001201d:	3d e0 00 00 00       	cmp    eax,0xe0
c0012022:	75 08                	jne    c001202c <update_arp_entry+0x78>
c0012024:	b0 f2                	mov    al,0xf2
c0012026:	e9 d9 00 00 00       	jmp    c0012104 <update_arp_entry+0x150>
c001202b:	90                   	nop
c001202c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0012031:	83 ec 08             	sub    esp,0x8
c0012034:	50                   	push   eax
c0012035:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012039:	e8 c2 fb ff ff       	call   c0011c00 <find_entry>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012045:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001204a:	85 c0                	test   eax,eax
c001204c:	79 0a                	jns    c0012058 <update_arp_entry+0xa4>
c001204e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012052:	e9 ad 00 00 00       	jmp    c0012104 <update_arp_entry+0x150>
c0012057:	90                   	nop
c0012058:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001205d:	c1 e0 04             	shl    eax,0x4
c0012060:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012065:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0012068:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001206d:	c1 e0 04             	shl    eax,0x4
c0012070:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012075:	83 c0 08             	add    eax,0x8
c0012078:	83 ec 04             	sub    esp,0x4
c001207b:	6a 06                	push   0x6
c001207d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012081:	50                   	push   eax
c0012082:	e8 f3 e2 fe ff       	call   c000037a <memcpy>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001208f:	c1 e0 04             	shl    eax,0x4
c0012092:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0012097:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001209a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001209f:	c1 e0 04             	shl    eax,0x4
c00120a2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00120a9:	85 c0                	test   eax,eax
c00120ab:	74 53                	je     c0012100 <update_arp_entry+0x14c>
c00120ad:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c00120b2:	c1 e0 04             	shl    eax,0x4
c00120b5:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00120bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120c0:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c00120c5:	c1 e0 04             	shl    eax,0x4
c00120c8:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120d7:	83 c0 23             	add    eax,0x23
c00120da:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00120de:	50                   	push   eax
c00120df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e7:	e8 40 fe ff ff       	call   c0011f2c <etharp_send_ip>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	83 ec 0c             	sub    esp,0xc
c00120f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00120f6:	e8 19 64 ff ff       	call   c0008514 <pbuf_free>
c00120fb:	83 c4 10             	add    esp,0x10
c00120fe:	66 90                	xchg   ax,ax
c0012100:	b0 00                	mov    al,0x0
c0012102:	66 90                	xchg   ax,ax
c0012104:	83 c4 2c             	add    esp,0x2c
c0012107:	c3                   	ret    

c0012108 <etharp_find_addr>:
c0012108:	83 ec 1c             	sub    esp,0x1c
c001210b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012110:	74 0a                	je     c001211c <etharp_find_addr+0x14>
c0012112:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0012117:	75 1b                	jne    c0012134 <etharp_find_addr+0x2c>
c0012119:	8d 76 00             	lea    esi,[esi+0x0]
c001211c:	83 ec 08             	sub    esp,0x8
c001211f:	68 c8 0e 03 c0       	push   0xc0030ec8
c0012124:	68 26 fe 02 c0       	push   0xc002fe26
c0012129:	e8 d2 dc 00 00       	call   c001fe00 <CPrintf>
c001212e:	83 c4 10             	add    esp,0x10
c0012131:	8d 76 00             	lea    esi,[esi+0x0]
c0012134:	83 ec 08             	sub    esp,0x8
c0012137:	6a 02                	push   0x2
c0012139:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001213d:	e8 be fa ff ff       	call   c0011c00 <find_entry>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012149:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001214e:	85 c0                	test   eax,eax
c0012150:	78 4a                	js     c001219c <etharp_find_addr+0x94>
c0012152:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012157:	c1 e0 04             	shl    eax,0x4
c001215a:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001215f:	8a 00                	mov    al,BYTE PTR [eax]
c0012161:	0f b6 c0             	movzx  eax,al
c0012164:	83 f8 02             	cmp    eax,0x2
c0012167:	75 33                	jne    c001219c <etharp_find_addr+0x94>
c0012169:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001216e:	c1 e0 04             	shl    eax,0x4
c0012171:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012176:	8d 50 08             	lea    edx,[eax+0x8]
c0012179:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001217d:	89 10                	mov    DWORD PTR [eax],edx
c001217f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012184:	c1 e0 04             	shl    eax,0x4
c0012187:	05 00 a9 03 c0       	add    eax,0xc003a900
c001218c:	8d 50 04             	lea    edx,[eax+0x4]
c001218f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012193:	89 10                	mov    DWORD PTR [eax],edx
c0012195:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012199:	eb 05                	jmp    c00121a0 <etharp_find_addr+0x98>
c001219b:	90                   	nop
c001219c:	b0 ff                	mov    al,0xff
c001219e:	66 90                	xchg   ax,ax
c00121a0:	83 c4 1c             	add    esp,0x1c
c00121a3:	c3                   	ret    

c00121a4 <etharp_arp_input>:
c00121a4:	83 ec 2c             	sub    esp,0x2c
c00121a7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00121ac:	75 1a                	jne    c00121c8 <etharp_arp_input+0x24>
c00121ae:	83 ec 08             	sub    esp,0x8
c00121b1:	68 93 0f 03 c0       	push   0xc0030f93
c00121b6:	68 26 fe 02 c0       	push   0xc002fe26
c00121bb:	e8 40 dc 00 00       	call   c001fe00 <CPrintf>
c00121c0:	83 c4 10             	add    esp,0x10
c00121c3:	e9 d4 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c00121c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00121cc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00121d0:	0f b7 c0             	movzx  eax,ax
c00121d3:	83 f8 29             	cmp    eax,0x29
c00121d6:	77 34                	ja     c001220c <etharp_arp_input+0x68>
c00121d8:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c00121de:	83 c0 01             	add    eax,0x1
c00121e1:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c00121e7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00121ed:	83 c0 01             	add    eax,0x1
c00121f0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121fd:	e8 12 63 ff ff       	call   c0008514 <pbuf_free>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	e9 92 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c001220a:	66 90                	xchg   ax,ax
c001220c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012213:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001221b:	83 c0 0e             	add    eax,0xe
c001221e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012222:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012226:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012229:	0f b7 c0             	movzx  eax,ax
c001222c:	3d 00 01 00 00       	cmp    eax,0x100
c0012231:	75 31                	jne    c0012264 <etharp_arp_input+0xc0>
c0012233:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012237:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001223a:	0f b6 c0             	movzx  eax,al
c001223d:	83 f8 06             	cmp    eax,0x6
c0012240:	75 22                	jne    c0012264 <etharp_arp_input+0xc0>
c0012242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012246:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012249:	0f b6 c0             	movzx  eax,al
c001224c:	83 f8 04             	cmp    eax,0x4
c001224f:	75 13                	jne    c0012264 <etharp_arp_input+0xc0>
c0012251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012255:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012259:	0f b7 c0             	movzx  eax,ax
c001225c:	83 f8 08             	cmp    eax,0x8
c001225f:	74 37                	je     c0012298 <etharp_arp_input+0xf4>
c0012261:	8d 76 00             	lea    esi,[esi+0x0]
c0012264:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c001226a:	83 c0 01             	add    eax,0x1
c001226d:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012273:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012279:	83 c0 01             	add    eax,0x1
c001227c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012289:	e8 86 62 ff ff       	call   c0008514 <pbuf_free>
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	e9 06 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c0012296:	66 90                	xchg   ax,ax
c0012298:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c001229e:	83 c0 01             	add    eax,0x1
c00122a1:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c00122a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122ab:	83 c0 0e             	add    eax,0xe
c00122ae:	83 ec 04             	sub    esp,0x4
c00122b1:	6a 04                	push   0x4
c00122b3:	50                   	push   eax
c00122b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00122b8:	50                   	push   eax
c00122b9:	e8 bc e0 fe ff       	call   c000037a <memcpy>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122c5:	83 c0 18             	add    eax,0x18
c00122c8:	83 ec 04             	sub    esp,0x4
c00122cb:	6a 04                	push   0x4
c00122cd:	50                   	push   eax
c00122ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122d2:	50                   	push   eax
c00122d3:	e8 a2 e0 fe ff       	call   c000037a <memcpy>
c00122d8:	83 c4 10             	add    esp,0x10
c00122db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122df:	83 c0 04             	add    eax,0x4
c00122e2:	74 0c                	je     c00122f0 <etharp_arp_input+0x14c>
c00122e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122eb:	85 c0                	test   eax,eax
c00122ed:	75 09                	jne    c00122f8 <etharp_arp_input+0x154>
c00122ef:	90                   	nop
c00122f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00122f5:	eb 15                	jmp    c001230c <etharp_arp_input+0x168>
c00122f7:	90                   	nop
c00122f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012303:	39 c2                	cmp    edx,eax
c0012305:	0f 94 c0             	sete   al
c0012308:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001230c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012311:	85 c0                	test   eax,eax
c0012313:	74 07                	je     c001231c <etharp_arp_input+0x178>
c0012315:	b8 01 00 00 00       	mov    eax,0x1
c001231a:	eb 08                	jmp    c0012324 <etharp_arp_input+0x180>
c001231c:	b8 02 00 00 00       	mov    eax,0x2
c0012321:	8d 76 00             	lea    esi,[esi+0x0]
c0012324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012328:	83 c2 08             	add    edx,0x8
c001232b:	50                   	push   eax
c001232c:	52                   	push   edx
c001232d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012331:	50                   	push   eax
c0012332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012336:	e8 79 fc ff ff       	call   c0011fb4 <update_arp_entry>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012342:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012346:	0f b7 c0             	movzx  eax,ax
c0012349:	3d 00 01 00 00       	cmp    eax,0x100
c001234e:	74 10                	je     c0012360 <etharp_arp_input+0x1bc>
c0012350:	3d 00 02 00 00       	cmp    eax,0x200
c0012355:	0f 84 2d 01 00 00    	je     c0012488 <etharp_arp_input+0x2e4>
c001235b:	e9 14 01 00 00       	jmp    c0012474 <etharp_arp_input+0x2d0>
c0012360:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012365:	85 c0                	test   eax,eax
c0012367:	0f 84 fb 00 00 00    	je     c0012468 <etharp_arp_input+0x2c4>
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	6a 02                	push   0x2
c0012372:	e8 a5 e8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	89 c2                	mov    edx,eax
c001237c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012380:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0012384:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012388:	8d 50 0e             	lea    edx,[eax+0xe]
c001238b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001238f:	83 c0 18             	add    eax,0x18
c0012392:	83 ec 04             	sub    esp,0x4
c0012395:	6a 04                	push   0x4
c0012397:	52                   	push   edx
c0012398:	50                   	push   eax
c0012399:	e8 dc df fe ff       	call   c000037a <memcpy>
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a5:	8d 50 04             	lea    edx,[eax+0x4]
c00123a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ac:	83 c0 0e             	add    eax,0xe
c00123af:	83 ec 04             	sub    esp,0x4
c00123b2:	6a 04                	push   0x4
c00123b4:	52                   	push   edx
c00123b5:	50                   	push   eax
c00123b6:	e8 bf df fe ff       	call   c000037a <memcpy>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c2:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00123c5:	0f b6 c0             	movzx  eax,al
c00123c8:	83 f8 06             	cmp    eax,0x6
c00123cb:	74 17                	je     c00123e4 <etharp_arp_input+0x240>
c00123cd:	83 ec 08             	sub    esp,0x8
c00123d0:	68 5c 0e 03 c0       	push   0xc0030e5c
c00123d5:	68 26 fe 02 c0       	push   0xc002fe26
c00123da:	e8 21 da 00 00       	call   c001fe00 <CPrintf>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	66 90                	xchg   ax,ax
c00123e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123e8:	8d 50 08             	lea    edx,[eax+0x8]
c00123eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ef:	83 c0 12             	add    eax,0x12
c00123f2:	83 ec 04             	sub    esp,0x4
c00123f5:	6a 06                	push   0x6
c00123f7:	52                   	push   edx
c00123f8:	50                   	push   eax
c00123f9:	e8 7c df fe ff       	call   c000037a <memcpy>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012405:	8d 50 08             	lea    edx,[eax+0x8]
c0012408:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001240c:	83 ec 04             	sub    esp,0x4
c001240f:	6a 06                	push   0x6
c0012411:	52                   	push   edx
c0012412:	50                   	push   eax
c0012413:	e8 62 df fe ff       	call   c000037a <memcpy>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001241f:	83 c0 08             	add    eax,0x8
c0012422:	83 ec 04             	sub    esp,0x4
c0012425:	6a 06                	push   0x6
c0012427:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001242b:	50                   	push   eax
c001242c:	e8 49 df fe ff       	call   c000037a <memcpy>
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	83 c0 06             	add    eax,0x6
c001243b:	83 ec 04             	sub    esp,0x4
c001243e:	6a 06                	push   0x6
c0012440:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012444:	50                   	push   eax
c0012445:	e8 30 df fe ff       	call   c000037a <memcpy>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012451:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012454:	83 ec 08             	sub    esp,0x8
c0012457:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001245b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001245f:	ff d0                	call   eax
c0012461:	83 c4 10             	add    esp,0x10
c0012464:	eb 26                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012466:	66 90                	xchg   ax,ax
c0012468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246c:	83 c0 04             	add    eax,0x4
c001246f:	eb 1b                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012471:	8d 76 00             	lea    esi,[esi+0x0]
c0012474:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c001247a:	83 c0 01             	add    eax,0x1
c001247d:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c0012483:	eb 07                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012485:	8d 76 00             	lea    esi,[esi+0x0]
c0012488:	90                   	nop
c0012489:	8d 76 00             	lea    esi,[esi+0x0]
c001248c:	83 ec 0c             	sub    esp,0xc
c001248f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012493:	e8 7c 60 ff ff       	call   c0008514 <pbuf_free>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	90                   	nop
c001249c:	83 c4 2c             	add    esp,0x2c
c001249f:	c3                   	ret    

c00124a0 <etharp_raw>:
c00124a0:	83 ec 2c             	sub    esp,0x2c
c00124a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00124a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00124ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00124b1:	83 ec 04             	sub    esp,0x4
c00124b4:	6a 00                	push   0x0
c00124b6:	6a 2a                	push   0x2a
c00124b8:	6a 03                	push   0x3
c00124ba:	e8 31 62 ff ff       	call   c00086f0 <pbuf_alloc>
c00124bf:	83 c4 10             	add    esp,0x10
c00124c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124c6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00124cb:	75 17                	jne    c00124e4 <etharp_raw+0x44>
c00124cd:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00124d3:	83 c0 01             	add    eax,0x1
c00124d6:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124dc:	b0 ff                	mov    al,0xff
c00124de:	e9 89 01 00 00       	jmp    c001266c <etharp_raw+0x1cc>
c00124e3:	90                   	nop
c00124e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124e8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00124ec:	0f b7 c0             	movzx  eax,ax
c00124ef:	83 f8 29             	cmp    eax,0x29
c00124f2:	77 18                	ja     c001250c <etharp_raw+0x6c>
c00124f4:	83 ec 08             	sub    esp,0x8
c00124f7:	68 ec 0e 03 c0       	push   0xc0030eec
c00124fc:	68 26 fe 02 c0       	push   0xc002fe26
c0012501:	e8 fa d8 00 00       	call   c001fe00 <CPrintf>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	8d 76 00             	lea    esi,[esi+0x0]
c001250c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012513:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001251b:	83 c0 0e             	add    eax,0xe
c001251e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012522:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012527:	83 ec 0c             	sub    esp,0xc
c001252a:	50                   	push   eax
c001252b:	e8 ec e6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	89 c2                	mov    edx,eax
c0012535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012539:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001253d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012541:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012544:	0f b6 c0             	movzx  eax,al
c0012547:	83 f8 06             	cmp    eax,0x6
c001254a:	74 18                	je     c0012564 <etharp_raw+0xc4>
c001254c:	83 ec 08             	sub    esp,0x8
c001254f:	68 5c 0e 03 c0       	push   0xc0030e5c
c0012554:	68 26 fe 02 c0       	push   0xc002fe26
c0012559:	e8 a2 d8 00 00       	call   c001fe00 <CPrintf>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	8d 76 00             	lea    esi,[esi+0x0]
c0012564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012568:	83 c0 08             	add    eax,0x8
c001256b:	83 ec 04             	sub    esp,0x4
c001256e:	6a 06                	push   0x6
c0012570:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012574:	50                   	push   eax
c0012575:	e8 00 de fe ff       	call   c000037a <memcpy>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012581:	83 c0 12             	add    eax,0x12
c0012584:	83 ec 04             	sub    esp,0x4
c0012587:	6a 06                	push   0x6
c0012589:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001258d:	50                   	push   eax
c001258e:	e8 e7 dd fe ff       	call   c000037a <memcpy>
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001259a:	83 ec 04             	sub    esp,0x4
c001259d:	6a 06                	push   0x6
c001259f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125a3:	50                   	push   eax
c00125a4:	e8 d1 dd fe ff       	call   c000037a <memcpy>
c00125a9:	83 c4 10             	add    esp,0x10
c00125ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b0:	83 c0 06             	add    eax,0x6
c00125b3:	83 ec 04             	sub    esp,0x4
c00125b6:	6a 06                	push   0x6
c00125b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125bc:	50                   	push   eax
c00125bd:	e8 b8 dd fe ff       	call   c000037a <memcpy>
c00125c2:	83 c4 10             	add    esp,0x10
c00125c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c9:	83 c0 0e             	add    eax,0xe
c00125cc:	83 ec 04             	sub    esp,0x4
c00125cf:	6a 04                	push   0x4
c00125d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00125d5:	50                   	push   eax
c00125d6:	e8 9f dd fe ff       	call   c000037a <memcpy>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125e2:	83 c0 18             	add    eax,0x18
c00125e5:	83 ec 04             	sub    esp,0x4
c00125e8:	6a 04                	push   0x4
c00125ea:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00125ee:	50                   	push   eax
c00125ef:	e8 86 dd fe ff       	call   c000037a <memcpy>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fb:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c0012600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012604:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c001260a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001260e:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c0012612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012616:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c001261a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001261e:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012628:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001262b:	83 ec 08             	sub    esp,0x8
c001262e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012632:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012636:	ff d0                	call   eax
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001263f:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c0012645:	83 c0 01             	add    eax,0x1
c0012648:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012655:	e8 ba 5e ff ff       	call   c0008514 <pbuf_free>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012665:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012669:	8d 76 00             	lea    esi,[esi+0x0]
c001266c:	83 c4 2c             	add    esp,0x2c
c001266f:	c3                   	ret    

c0012670 <etharp_request>:
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012677:	8d 48 04             	lea    ecx,[eax+0x4]
c001267a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001267e:	8d 50 23             	lea    edx,[eax+0x23]
c0012681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012685:	83 c0 23             	add    eax,0x23
c0012688:	6a 01                	push   0x1
c001268a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001268e:	68 bc 0f 03 c0       	push   0xc0030fbc
c0012693:	51                   	push   ecx
c0012694:	52                   	push   edx
c0012695:	68 c4 0f 03 c0       	push   0xc0030fc4
c001269a:	50                   	push   eax
c001269b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001269f:	e8 fc fd ff ff       	call   c00124a0 <etharp_raw>
c00126a4:	83 c4 20             	add    esp,0x20
c00126a7:	83 c4 0c             	add    esp,0xc
c00126aa:	c3                   	ret    
c00126ab:	90                   	nop

c00126ac <etharp_query>:
c00126ac:	83 ec 2c             	sub    esp,0x2c
c00126af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b3:	83 c0 23             	add    eax,0x23
c00126b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126ba:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00126bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c5:	83 ec 08             	sub    esp,0x8
c00126c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00126cc:	50                   	push   eax
c00126cd:	e8 e6 19 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	0f b6 c0             	movzx  eax,al
c00126d8:	85 c0                	test   eax,eax
c00126da:	75 24                	jne    c0012700 <etharp_query+0x54>
c00126dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e2:	25 f0 00 00 00       	and    eax,0xf0
c00126e7:	3d e0 00 00 00       	cmp    eax,0xe0
c00126ec:	74 12                	je     c0012700 <etharp_query+0x54>
c00126ee:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00126f3:	74 0b                	je     c0012700 <etharp_query+0x54>
c00126f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00126fb:	85 c0                	test   eax,eax
c00126fd:	75 09                	jne    c0012708 <etharp_query+0x5c>
c00126ff:	90                   	nop
c0012700:	b0 f2                	mov    al,0xf2
c0012702:	e9 dd 02 00 00       	jmp    c00129e4 <etharp_query+0x338>
c0012707:	90                   	nop
c0012708:	83 ec 08             	sub    esp,0x8
c001270b:	6a 01                	push   0x1
c001270d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012711:	e8 ea f4 ff ff       	call   c0011c00 <find_entry>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001271d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012722:	85 c0                	test   eax,eax
c0012724:	79 22                	jns    c0012748 <etharp_query+0x9c>
c0012726:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001272b:	74 0f                	je     c001273c <etharp_query+0x90>
c001272d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012733:	83 c0 01             	add    eax,0x1
c0012736:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001273c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012740:	e9 9f 02 00 00       	jmp    c00129e4 <etharp_query+0x338>
c0012745:	8d 76 00             	lea    esi,[esi+0x0]
c0012748:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001274d:	c1 e0 04             	shl    eax,0x4
c0012750:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012755:	8a 00                	mov    al,BYTE PTR [eax]
c0012757:	0f b6 c0             	movzx  eax,al
c001275a:	85 c0                	test   eax,eax
c001275c:	75 12                	jne    c0012770 <etharp_query+0xc4>
c001275e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012763:	c1 e0 04             	shl    eax,0x4
c0012766:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001276b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001276e:	66 90                	xchg   ax,ax
c0012770:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012775:	c1 e0 04             	shl    eax,0x4
c0012778:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001277d:	8a 00                	mov    al,BYTE PTR [eax]
c001277f:	0f b6 c0             	movzx  eax,al
c0012782:	83 f8 01             	cmp    eax,0x1
c0012785:	74 2d                	je     c00127b4 <etharp_query+0x108>
c0012787:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001278c:	c1 e0 04             	shl    eax,0x4
c001278f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012794:	8a 00                	mov    al,BYTE PTR [eax]
c0012796:	0f b6 c0             	movzx  eax,al
c0012799:	83 f8 02             	cmp    eax,0x2
c001279c:	74 16                	je     c00127b4 <etharp_query+0x108>
c001279e:	83 ec 08             	sub    esp,0x8
c00127a1:	68 20 0f 03 c0       	push   0xc0030f20
c00127a6:	68 26 fe 02 c0       	push   0xc002fe26
c00127ab:	e8 50 d6 00 00       	call   c001fe00 <CPrintf>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	90                   	nop
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	74 09                	je     c00127d4 <etharp_query+0x128>
c00127cb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00127d0:	75 2a                	jne    c00127fc <etharp_query+0x150>
c00127d2:	66 90                	xchg   ax,ax
c00127d4:	83 ec 08             	sub    esp,0x8
c00127d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127df:	e8 8c fe ff ff       	call   c0012670 <etharp_request>
c00127e4:	83 c4 10             	add    esp,0x10
c00127e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127eb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00127f0:	75 0a                	jne    c00127fc <etharp_query+0x150>
c00127f2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00127f6:	e9 e9 01 00 00       	jmp    c00129e4 <etharp_query+0x338>
c00127fb:	90                   	nop
c00127fc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012801:	75 15                	jne    c0012818 <etharp_query+0x16c>
c0012803:	83 ec 08             	sub    esp,0x8
c0012806:	68 9a 02 03 c0       	push   0xc003029a
c001280b:	68 26 fe 02 c0       	push   0xc002fe26
c0012810:	e8 eb d5 00 00       	call   c001fe00 <CPrintf>
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001281d:	c1 e0 04             	shl    eax,0x4
c0012820:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012825:	8a 00                	mov    al,BYTE PTR [eax]
c0012827:	0f b6 c0             	movzx  eax,al
c001282a:	83 f8 02             	cmp    eax,0x2
c001282d:	75 39                	jne    c0012868 <etharp_query+0x1bc>
c001282f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012833:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c0012838:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001283d:	c1 e0 04             	shl    eax,0x4
c0012840:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012845:	83 c0 08             	add    eax,0x8
c0012848:	50                   	push   eax
c0012849:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001284d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012851:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012855:	e8 d2 f6 ff ff       	call   c0011f2c <etharp_send_ip>
c001285a:	83 c4 10             	add    esp,0x10
c001285d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012861:	e9 7a 01 00 00       	jmp    c00129e0 <etharp_query+0x334>
c0012866:	66 90                	xchg   ax,ax
c0012868:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001286d:	c1 e0 04             	shl    eax,0x4
c0012870:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012875:	8a 00                	mov    al,BYTE PTR [eax]
c0012877:	0f b6 c0             	movzx  eax,al
c001287a:	83 f8 01             	cmp    eax,0x1
c001287d:	0f 85 5d 01 00 00    	jne    c00129e0 <etharp_query+0x334>
c0012883:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001288b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001288f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012893:	eb 63                	jmp    c00128f8 <etharp_query+0x24c>
c0012895:	8d 76 00             	lea    esi,[esi+0x0]
c0012898:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001289c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00128a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a7:	0f b7 d2             	movzx  edx,dx
c00128aa:	0f b7 c0             	movzx  eax,ax
c00128ad:	39 c2                	cmp    edx,eax
c00128af:	75 1f                	jne    c00128d0 <etharp_query+0x224>
c00128b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128b7:	85 c0                	test   eax,eax
c00128b9:	74 15                	je     c00128d0 <etharp_query+0x224>
c00128bb:	83 ec 08             	sub    esp,0x8
c00128be:	68 a1 0f 03 c0       	push   0xc0030fa1
c00128c3:	68 26 fe 02 c0       	push   0xc002fe26
c00128c8:	e8 33 d5 00 00       	call   c001fe00 <CPrintf>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128d4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00128d7:	0f b6 c0             	movzx  eax,al
c00128da:	83 f8 01             	cmp    eax,0x1
c00128dd:	74 0d                	je     c00128ec <etharp_query+0x240>
c00128df:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c00128e7:	eb 17                	jmp    c0012900 <etharp_query+0x254>
c00128e9:	8d 76 00             	lea    esi,[esi+0x0]
c00128ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128f6:	66 90                	xchg   ax,ax
c00128f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128fd:	75 99                	jne    c0012898 <etharp_query+0x1ec>
c00128ff:	90                   	nop
c0012900:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012905:	74 59                	je     c0012960 <etharp_query+0x2b4>
c0012907:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290e:	0f b7 c0             	movzx  eax,ax
c0012911:	83 ec 04             	sub    esp,0x4
c0012914:	6a 00                	push   0x0
c0012916:	50                   	push   eax
c0012917:	6a 03                	push   0x3
c0012919:	e8 d2 5d ff ff       	call   c00086f0 <pbuf_alloc>
c001291e:	83 c4 10             	add    esp,0x10
c0012921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012925:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001292a:	74 4c                	je     c0012978 <etharp_query+0x2cc>
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012933:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012937:	e8 1c 66 ff ff       	call   c0008f58 <pbuf_copy>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	0f be c0             	movsx  eax,al
c0012942:	85 c0                	test   eax,eax
c0012944:	74 32                	je     c0012978 <etharp_query+0x2cc>
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001294d:	e8 c2 5b ff ff       	call   c0008514 <pbuf_free>
c0012952:	83 c4 10             	add    esp,0x10
c0012955:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001295d:	eb 19                	jmp    c0012978 <etharp_query+0x2cc>
c001295f:	90                   	nop
c0012960:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001296f:	e8 b0 63 ff ff       	call   c0008d24 <pbuf_ref>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	90                   	nop
c0012978:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001297d:	74 4d                	je     c00129cc <etharp_query+0x320>
c001297f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012984:	c1 e0 04             	shl    eax,0x4
c0012987:	05 00 a9 03 c0       	add    eax,0xc003a900
c001298c:	8b 00                	mov    eax,DWORD PTR [eax]
c001298e:	85 c0                	test   eax,eax
c0012990:	74 1e                	je     c00129b0 <etharp_query+0x304>
c0012992:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012997:	c1 e0 04             	shl    eax,0x4
c001299a:	05 00 a9 03 c0       	add    eax,0xc003a900
c001299f:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	50                   	push   eax
c00129a5:	e8 6a 5b ff ff       	call   c0008514 <pbuf_free>
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	8d 76 00             	lea    esi,[esi+0x0]
c00129b0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00129b5:	c1 e0 04             	shl    eax,0x4
c00129b8:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c00129be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129c2:	89 02                	mov    DWORD PTR [edx],eax
c00129c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00129c9:	eb 15                	jmp    c00129e0 <etharp_query+0x334>
c00129cb:	90                   	nop
c00129cc:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00129d2:	83 c0 01             	add    eax,0x1
c00129d5:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00129db:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00129e0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00129e4:	83 c4 2c             	add    esp,0x2c
c00129e7:	c3                   	ret    

c00129e8 <etharp_output>:
c00129e8:	83 ec 1c             	sub    esp,0x1c
c00129eb:	83 ec 08             	sub    esp,0x8
c00129ee:	6a 0e                	push   0xe
c00129f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00129f4:	e8 7b 59 ff ff       	call   c0008374 <pbuf_header>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	0f b6 c0             	movzx  eax,al
c00129ff:	85 c0                	test   eax,eax
c0012a01:	74 19                	je     c0012a1c <etharp_output+0x34>
c0012a03:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012a09:	83 c0 01             	add    eax,0x1
c0012a0c:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c0012a12:	b0 fe                	mov    al,0xfe
c0012a14:	e9 8b 01 00 00       	jmp    c0012ba4 <etharp_output+0x1bc>
c0012a19:	8d 76 00             	lea    esi,[esi+0x0]
c0012a1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012a24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a2a:	83 ec 08             	sub    esp,0x8
c0012a2d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a31:	50                   	push   eax
c0012a32:	e8 81 16 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	0f b6 c0             	movzx  eax,al
c0012a3d:	85 c0                	test   eax,eax
c0012a3f:	74 0f                	je     c0012a50 <etharp_output+0x68>
c0012a41:	c7 44 24 0c c4 0f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030fc4
c0012a49:	e9 3a 01 00 00       	jmp    c0012b88 <etharp_output+0x1a0>
c0012a4e:	66 90                	xchg   ax,ax
c0012a50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a56:	25 f0 00 00 00       	and    eax,0xf0
c0012a5b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012a60:	75 42                	jne    c0012aa4 <etharp_output+0xbc>
c0012a62:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0012a67:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012a6c:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012a71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a75:	83 c0 01             	add    eax,0x1
c0012a78:	8a 00                	mov    al,BYTE PTR [eax]
c0012a7a:	83 e0 7f             	and    eax,0x7f
c0012a7d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012a81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a85:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012a88:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012a8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a90:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012a93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012a97:	8d 44 24 06          	lea    eax,[esp+0x6]
c0012a9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a9f:	e9 e4 00 00 00       	jmp    c0012b88 <etharp_output+0x1a0>
c0012aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012aa8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab1:	31 c2                	xor    edx,eax
c0012ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012aba:	21 d0                	and    eax,edx
c0012abc:	74 3a                	je     c0012af8 <etharp_output+0x110>
c0012abe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ac4:	0f b7 c0             	movzx  eax,ax
c0012ac7:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012acc:	74 2a                	je     c0012af8 <etharp_output+0x110>
c0012ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad2:	83 c0 0c             	add    eax,0xc
c0012ad5:	74 19                	je     c0012af0 <etharp_output+0x108>
c0012ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012adb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ade:	85 c0                	test   eax,eax
c0012ae0:	74 0e                	je     c0012af0 <etharp_output+0x108>
c0012ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ae6:	83 c0 0c             	add    eax,0xc
c0012ae9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012aed:	eb 09                	jmp    c0012af8 <etharp_output+0x110>
c0012aef:	90                   	nop
c0012af0:	b0 fc                	mov    al,0xfc
c0012af2:	e9 ad 00 00 00       	jmp    c0012ba4 <etharp_output+0x1bc>
c0012af7:	90                   	nop
c0012af8:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012afd:	0f b6 c0             	movzx  eax,al
c0012b00:	c1 e0 04             	shl    eax,0x4
c0012b03:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012b08:	8a 00                	mov    al,BYTE PTR [eax]
c0012b0a:	0f b6 c0             	movzx  eax,al
c0012b0d:	83 f8 02             	cmp    eax,0x2
c0012b10:	75 5a                	jne    c0012b6c <etharp_output+0x184>
c0012b12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b18:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012b1d:	0f b6 c0             	movzx  eax,al
c0012b20:	c1 e0 04             	shl    eax,0x4
c0012b23:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b2a:	39 c2                	cmp    edx,eax
c0012b2c:	75 3e                	jne    c0012b6c <etharp_output+0x184>
c0012b2e:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c0012b34:	83 c0 01             	add    eax,0x1
c0012b37:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c0012b3d:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012b42:	0f b6 c0             	movzx  eax,al
c0012b45:	c1 e0 04             	shl    eax,0x4
c0012b48:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012b4d:	8d 50 08             	lea    edx,[eax+0x8]
c0012b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b54:	83 c0 23             	add    eax,0x23
c0012b57:	52                   	push   edx
c0012b58:	50                   	push   eax
c0012b59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b61:	e8 c6 f3 ff ff       	call   c0011f2c <etharp_send_ip>
c0012b66:	83 c4 10             	add    esp,0x10
c0012b69:	eb 39                	jmp    c0012ba4 <etharp_output+0x1bc>
c0012b6b:	90                   	nop
c0012b6c:	83 ec 04             	sub    esp,0x4
c0012b6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012b77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b7b:	e8 2c fb ff ff       	call   c00126ac <etharp_query>
c0012b80:	83 c4 10             	add    esp,0x10
c0012b83:	eb 1f                	jmp    c0012ba4 <etharp_output+0x1bc>
c0012b85:	8d 76 00             	lea    esi,[esi+0x0]
c0012b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b8c:	83 c0 23             	add    eax,0x23
c0012b8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012b93:	50                   	push   eax
c0012b94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b9c:	e8 8b f3 ff ff       	call   c0011f2c <etharp_send_ip>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	83 c4 1c             	add    esp,0x1c
c0012ba7:	c3                   	ret    

c0012ba8 <ethernet_input>:
c0012ba8:	83 ec 1c             	sub    esp,0x1c
c0012bab:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bb6:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012bba:	0f b7 c0             	movzx  eax,ax
c0012bbd:	83 f8 0e             	cmp    eax,0xe
c0012bc0:	77 26                	ja     c0012be8 <ethernet_input+0x40>
c0012bc2:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012bc8:	83 c0 01             	add    eax,0x1
c0012bcb:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012bd1:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012bd7:	83 c0 01             	add    eax,0x1
c0012bda:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012be0:	e9 ef 00 00 00       	jmp    c0012cd4 <ethernet_input+0x12c>
c0012be5:	8d 76 00             	lea    esi,[esi+0x0]
c0012be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bf7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012bfb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012c00:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012c05:	83 f8 08             	cmp    eax,0x8
c0012c08:	74 0e                	je     c0012c18 <ethernet_input+0x70>
c0012c0a:	3d 08 06 00 00       	cmp    eax,0x608
c0012c0f:	74 6b                	je     c0012c7c <ethernet_input+0xd4>
c0012c11:	e9 92 00 00 00       	jmp    c0012ca8 <ethernet_input+0x100>
c0012c16:	66 90                	xchg   ax,ax
c0012c18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c1c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012c1f:	0f b6 c0             	movzx  eax,al
c0012c22:	83 e0 20             	and    eax,0x20
c0012c25:	0f 84 a1 00 00 00    	je     c0012ccc <ethernet_input+0x124>
c0012c2b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012c30:	f7 d8                	neg    eax
c0012c32:	98                   	cwde   
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	50                   	push   eax
c0012c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c3b:	e8 34 57 ff ff       	call   c0008374 <pbuf_header>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	0f b6 c0             	movzx  eax,al
c0012c46:	85 c0                	test   eax,eax
c0012c48:	74 1a                	je     c0012c64 <ethernet_input+0xbc>
c0012c4a:	83 ec 08             	sub    esp,0x8
c0012c4d:	68 48 0f 03 c0       	push   0xc0030f48
c0012c52:	68 26 fe 02 c0       	push   0xc002fe26
c0012c57:	e8 a4 d1 00 00       	call   c001fe00 <CPrintf>
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	eb 73                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012c61:	8d 76 00             	lea    esi,[esi+0x0]
c0012c64:	83 ec 08             	sub    esp,0x8
c0012c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c6f:	e8 7c 0c 00 00       	call   c00138f0 <ip_input>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	eb 4f                	jmp    c0012cc8 <ethernet_input+0x120>
c0012c79:	8d 76 00             	lea    esi,[esi+0x0]
c0012c7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c80:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012c83:	0f b6 c0             	movzx  eax,al
c0012c86:	83 e0 20             	and    eax,0x20
c0012c89:	74 45                	je     c0012cd0 <ethernet_input+0x128>
c0012c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c8f:	83 c0 23             	add    eax,0x23
c0012c92:	83 ec 04             	sub    esp,0x4
c0012c95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012c99:	50                   	push   eax
c0012c9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c9e:	e8 01 f5 ff ff       	call   c00121a4 <etharp_arp_input>
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	eb 20                	jmp    c0012cc8 <ethernet_input+0x120>
c0012ca8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012cae:	83 c0 01             	add    eax,0x1
c0012cb1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012cb7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012cbd:	83 c0 01             	add    eax,0x1
c0012cc0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012cc6:	eb 0c                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012cc8:	b0 00                	mov    al,0x0
c0012cca:	eb 1c                	jmp    c0012ce8 <ethernet_input+0x140>
c0012ccc:	90                   	nop
c0012ccd:	eb 05                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012ccf:	90                   	nop
c0012cd0:	90                   	nop
c0012cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cdb:	e8 34 58 ff ff       	call   c0008514 <pbuf_free>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	b0 00                	mov    al,0x0
c0012ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ce8:	83 c4 1c             	add    esp,0x1c
c0012ceb:	c3                   	ret    

c0012cec <icmp_input>:
c0012cec:	83 ec 2c             	sub    esp,0x2c
c0012cef:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012cf5:	83 c0 01             	add    eax,0x1
c0012cf8:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012cfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d0d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012d10:	0f b7 c0             	movzx  eax,ax
c0012d13:	83 ec 0c             	sub    esp,0xc
c0012d16:	50                   	push   eax
c0012d17:	e8 00 df fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	0f b7 c0             	movzx  eax,ax
c0012d22:	c1 e8 08             	shr    eax,0x8
c0012d25:	83 e0 0f             	and    eax,0xf
c0012d28:	c1 e0 02             	shl    eax,0x2
c0012d2b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012d30:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012d35:	f7 d8                	neg    eax
c0012d37:	98                   	cwde   
c0012d38:	83 ec 08             	sub    esp,0x8
c0012d3b:	50                   	push   eax
c0012d3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d40:	e8 2f 56 ff ff       	call   c0008374 <pbuf_header>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	0f b6 c0             	movzx  eax,al
c0012d4b:	85 c0                	test   eax,eax
c0012d4d:	0f 85 b1 03 00 00    	jne    c0013104 <icmp_input+0x418>
c0012d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d5a:	0f b7 c0             	movzx  eax,ax
c0012d5d:	83 f8 03             	cmp    eax,0x3
c0012d60:	0f 86 9e 03 00 00    	jbe    c0013104 <icmp_input+0x418>
c0012d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0012d6f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012d73:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012d78:	85 c0                	test   eax,eax
c0012d7a:	0f 84 6c 03 00 00    	je     c00130ec <icmp_input+0x400>
c0012d80:	83 f8 08             	cmp    eax,0x8
c0012d83:	0f 85 43 03 00 00    	jne    c00130cc <icmp_input+0x3e0>
c0012d89:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012d91:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012d96:	25 f0 00 00 00       	and    eax,0xf0
c0012d9b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012da0:	75 0a                	jne    c0012dac <icmp_input+0xc0>
c0012da2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012daa:	66 90                	xchg   ax,ax
c0012dac:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012db1:	83 ec 08             	sub    esp,0x8
c0012db4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012db8:	50                   	push   eax
c0012db9:	e8 fa 12 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	0f b6 c0             	movzx  eax,al
c0012dc4:	85 c0                	test   eax,eax
c0012dc6:	74 08                	je     c0012dd0 <icmp_input+0xe4>
c0012dc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012dd0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012dd5:	75 25                	jne    c0012dfc <icmp_input+0x110>
c0012dd7:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012ddd:	83 c0 01             	add    eax,0x1
c0012de0:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ded:	e8 22 57 ff ff       	call   c0008514 <pbuf_free>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	e9 56 03 00 00       	jmp    c0013150 <icmp_input+0x464>
c0012dfa:	66 90                	xchg   ax,ax
c0012dfc:	90                   	nop
c0012dfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012e04:	0f b7 c0             	movzx  eax,ax
c0012e07:	83 f8 07             	cmp    eax,0x7
c0012e0a:	0f 86 f8 02 00 00    	jbe    c0013108 <icmp_input+0x41c>
c0012e10:	83 ec 0c             	sub    esp,0xc
c0012e13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e17:	e8 5c 09 00 00       	call   c0013778 <inet_chksum_pbuf>
c0012e1c:	83 c4 10             	add    esp,0x10
c0012e1f:	0f b7 c0             	movzx  eax,ax
c0012e22:	85 c0                	test   eax,eax
c0012e24:	74 26                	je     c0012e4c <icmp_input+0x160>
c0012e26:	83 ec 0c             	sub    esp,0xc
c0012e29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e2d:	e8 e2 56 ff ff       	call   c0008514 <pbuf_free>
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012e3b:	83 c0 01             	add    eax,0x1
c0012e3e:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012e44:	e9 07 03 00 00       	jmp    c0013150 <icmp_input+0x464>
c0012e49:	8d 76 00             	lea    esi,[esi+0x0]
c0012e4c:	83 ec 08             	sub    esp,0x8
c0012e4f:	6a 22                	push   0x22
c0012e51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e55:	e8 1a 55 ff ff       	call   c0008374 <pbuf_header>
c0012e5a:	83 c4 10             	add    esp,0x10
c0012e5d:	0f b6 c0             	movzx  eax,al
c0012e60:	85 c0                	test   eax,eax
c0012e62:	0f 84 24 01 00 00    	je     c0012f8c <icmp_input+0x2a0>
c0012e68:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e6d:	83 ec 08             	sub    esp,0x8
c0012e70:	50                   	push   eax
c0012e71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e75:	e8 fa 54 ff ff       	call   c0008374 <pbuf_header>
c0012e7a:	83 c4 10             	add    esp,0x10
c0012e7d:	0f b6 c0             	movzx  eax,al
c0012e80:	85 c0                	test   eax,eax
c0012e82:	74 1c                	je     c0012ea0 <icmp_input+0x1b4>
c0012e84:	83 ec 08             	sub    esp,0x8
c0012e87:	68 cc 0f 03 c0       	push   0xc0030fcc
c0012e8c:	68 26 fe 02 c0       	push   0xc002fe26
c0012e91:	e8 6a cf 00 00       	call   c001fe00 <CPrintf>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	e9 92 02 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012e9e:	66 90                	xchg   ax,ax
c0012ea0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ea4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ea7:	0f b7 c0             	movzx  eax,ax
c0012eaa:	83 ec 04             	sub    esp,0x4
c0012ead:	6a 00                	push   0x0
c0012eaf:	50                   	push   eax
c0012eb0:	6a 02                	push   0x2
c0012eb2:	e8 39 58 ff ff       	call   c00086f0 <pbuf_alloc>
c0012eb7:	83 c4 10             	add    esp,0x10
c0012eba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ebe:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012ec3:	0f 84 63 02 00 00    	je     c001312c <icmp_input+0x440>
c0012ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012ed1:	0f b7 c0             	movzx  eax,ax
c0012ed4:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012ed9:	83 c2 08             	add    edx,0x8
c0012edc:	39 d0                	cmp    eax,edx
c0012ede:	73 18                	jae    c0012ef8 <icmp_input+0x20c>
c0012ee0:	83 ec 08             	sub    esp,0x8
c0012ee3:	68 00 10 03 c0       	push   0xc0031000
c0012ee8:	68 26 fe 02 c0       	push   0xc002fe26
c0012eed:	e8 0e cf 00 00       	call   c001fe00 <CPrintf>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ef8:	83 ec 08             	sub    esp,0x8
c0012efb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f03:	e8 50 60 ff ff       	call   c0008f58 <pbuf_copy>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	0f be c0             	movsx  eax,al
c0012f0e:	85 c0                	test   eax,eax
c0012f10:	74 1a                	je     c0012f2c <icmp_input+0x240>
c0012f12:	83 ec 08             	sub    esp,0x8
c0012f15:	68 38 10 03 c0       	push   0xc0031038
c0012f1a:	68 26 fe 02 c0       	push   0xc002fe26
c0012f1f:	e8 dc ce 00 00       	call   c001fe00 <CPrintf>
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	e9 04 02 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f37:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012f3c:	f7 d8                	neg    eax
c0012f3e:	98                   	cwde   
c0012f3f:	83 ec 08             	sub    esp,0x8
c0012f42:	50                   	push   eax
c0012f43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f47:	e8 28 54 ff ff       	call   c0008374 <pbuf_header>
c0012f4c:	83 c4 10             	add    esp,0x10
c0012f4f:	0f b6 c0             	movzx  eax,al
c0012f52:	85 c0                	test   eax,eax
c0012f54:	74 1a                	je     c0012f70 <icmp_input+0x284>
c0012f56:	83 ec 08             	sub    esp,0x8
c0012f59:	68 60 10 03 c0       	push   0xc0031060
c0012f5e:	68 26 fe 02 c0       	push   0xc002fe26
c0012f63:	e8 98 ce 00 00       	call   c001fe00 <CPrintf>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	e9 c0 01 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f77:	e8 98 55 ff ff       	call   c0008514 <pbuf_free>
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012f87:	eb 37                	jmp    c0012fc0 <icmp_input+0x2d4>
c0012f89:	8d 76 00             	lea    esi,[esi+0x0]
c0012f8c:	83 ec 08             	sub    esp,0x8
c0012f8f:	6a de                	push   0xffffffde
c0012f91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f95:	e8 da 53 ff ff       	call   c0008374 <pbuf_header>
c0012f9a:	83 c4 10             	add    esp,0x10
c0012f9d:	0f b6 c0             	movzx  eax,al
c0012fa0:	85 c0                	test   eax,eax
c0012fa2:	74 1c                	je     c0012fc0 <icmp_input+0x2d4>
c0012fa4:	83 ec 08             	sub    esp,0x8
c0012fa7:	68 60 10 03 c0       	push   0xc0031060
c0012fac:	68 26 fe 02 c0       	push   0xc002fe26
c0012fb1:	e8 4a ce 00 00       	call   c001fe00 <CPrintf>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	e9 72 01 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012fbe:	66 90                	xchg   ax,ax
c0012fc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012fcb:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fd5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fd8:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ff0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012ff4:	0f b7 c0             	movzx  eax,ax
c0012ff7:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012ffc:	76 1a                	jbe    c0013018 <icmp_input+0x32c>
c0012ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013002:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013006:	83 c0 09             	add    eax,0x9
c0013009:	89 c2                	mov    edx,eax
c001300b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001300f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013013:	eb 1b                	jmp    c0013030 <icmp_input+0x344>
c0013015:	8d 76 00             	lea    esi,[esi+0x0]
c0013018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001301c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013020:	83 c0 08             	add    eax,0x8
c0013023:	89 c2                	mov    edx,eax
c0013025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013029:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001302d:	8d 76 00             	lea    esi,[esi+0x0]
c0013030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013034:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0013038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001303c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0013042:	83 ec 08             	sub    esp,0x8
c0013045:	6a 14                	push   0x14
c0013047:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001304b:	e8 00 07 00 00       	call   c0013750 <inet_chksum>
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	89 c2                	mov    edx,eax
c0013055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013059:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001305d:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013063:	83 c0 01             	add    eax,0x1
c0013066:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001306c:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0013071:	83 ec 08             	sub    esp,0x8
c0013074:	50                   	push   eax
c0013075:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013079:	e8 f6 52 ff ff       	call   c0008374 <pbuf_header>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	0f b6 c0             	movzx  eax,al
c0013084:	85 c0                	test   eax,eax
c0013086:	74 18                	je     c00130a0 <icmp_input+0x3b4>
c0013088:	83 ec 08             	sub    esp,0x8
c001308b:	68 48 0f 03 c0       	push   0xc0030f48
c0013090:	68 26 fe 02 c0       	push   0xc002fe26
c0013095:	e8 66 cd 00 00       	call   c001fe00 <CPrintf>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	eb 51                	jmp    c00130f0 <icmp_input+0x404>
c001309f:	90                   	nop
c00130a0:	83 ec 04             	sub    esp,0x4
c00130a3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130a7:	6a 01                	push   0x1
c00130a9:	6a 00                	push   0x0
c00130ab:	68 ff 00 00 00       	push   0xff
c00130b0:	6a 00                	push   0x0
c00130b2:	68 98 68 03 c0       	push   0xc0036898
c00130b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00130bb:	e8 74 0c 00 00       	call   c0013d34 <ip_output_if>
c00130c0:	83 c4 20             	add    esp,0x20
c00130c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00130c7:	eb 27                	jmp    c00130f0 <icmp_input+0x404>
c00130c9:	8d 76 00             	lea    esi,[esi+0x0]
c00130cc:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c00130d2:	83 c0 01             	add    eax,0x1
c00130d5:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c00130db:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c00130e1:	83 c0 01             	add    eax,0x1
c00130e4:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c00130ea:	eb 04                	jmp    c00130f0 <icmp_input+0x404>
c00130ec:	90                   	nop
c00130ed:	8d 76 00             	lea    esi,[esi+0x0]
c00130f0:	83 ec 0c             	sub    esp,0xc
c00130f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00130f7:	e8 18 54 ff ff       	call   c0008514 <pbuf_free>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	eb 4f                	jmp    c0013150 <icmp_input+0x464>
c0013101:	8d 76 00             	lea    esi,[esi+0x0]
c0013104:	90                   	nop
c0013105:	eb 05                	jmp    c001310c <icmp_input+0x420>
c0013107:	90                   	nop
c0013108:	90                   	nop
c0013109:	8d 76 00             	lea    esi,[esi+0x0]
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013113:	e8 fc 53 ff ff       	call   c0008514 <pbuf_free>
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0013121:	83 c0 01             	add    eax,0x1
c0013124:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c001312a:	eb 24                	jmp    c0013150 <icmp_input+0x464>
c001312c:	90                   	nop
c001312d:	8d 76 00             	lea    esi,[esi+0x0]
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013137:	e8 d8 53 ff ff       	call   c0008514 <pbuf_free>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0013145:	83 c0 01             	add    eax,0x1
c0013148:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c001314e:	90                   	nop
c001314f:	90                   	nop
c0013150:	83 c4 2c             	add    esp,0x2c
c0013153:	c3                   	ret    

c0013154 <icmp_send_response>:
c0013154:	83 ec 2c             	sub    esp,0x2c
c0013157:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001315b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001315f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013163:	88 d0                	mov    al,dl
c0013165:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013169:	83 ec 04             	sub    esp,0x4
c001316c:	6a 00                	push   0x0
c001316e:	6a 24                	push   0x24
c0013170:	6a 01                	push   0x1
c0013172:	e8 79 55 ff ff       	call   c00086f0 <pbuf_alloc>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001317e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013183:	0f 84 ff 00 00 00    	je     c0013288 <icmp_send_response+0x134>
c0013189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013191:	0f b7 c0             	movzx  eax,ax
c0013194:	83 f8 23             	cmp    eax,0x23
c0013197:	77 17                	ja     c00131b0 <icmp_send_response+0x5c>
c0013199:	83 ec 08             	sub    esp,0x8
c001319c:	68 94 10 03 c0       	push   0xc0031094
c00131a1:	68 26 fe 02 c0       	push   0xc002fe26
c00131a6:	e8 55 cc 00 00       	call   c001fe00 <CPrintf>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	66 90                	xchg   ax,ax
c00131b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00131ce:	88 10                	mov    BYTE PTR [eax],dl
c00131d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d4:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00131d8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00131db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131df:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c00131e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131e9:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00131ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131fa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00131fd:	83 c2 08             	add    edx,0x8
c0013200:	83 ec 04             	sub    esp,0x4
c0013203:	6a 1c                	push   0x1c
c0013205:	50                   	push   eax
c0013206:	52                   	push   edx
c0013207:	e8 6e d1 fe ff       	call   c000037a <memcpy>
c001320c:	83 c4 10             	add    esp,0x10
c001320f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013213:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001321d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013221:	0f b7 c0             	movzx  eax,ax
c0013224:	83 ec 08             	sub    esp,0x8
c0013227:	50                   	push   eax
c0013228:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001322c:	e8 1f 05 00 00       	call   c0013750 <inet_chksum>
c0013231:	83 c4 10             	add    esp,0x10
c0013234:	89 c2                	mov    edx,eax
c0013236:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001323a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001323e:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013244:	83 c0 01             	add    eax,0x1
c0013247:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001324d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013251:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013254:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013258:	83 ec 08             	sub    esp,0x8
c001325b:	6a 01                	push   0x1
c001325d:	6a 00                	push   0x0
c001325f:	68 ff 00 00 00       	push   0xff
c0013264:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013268:	50                   	push   eax
c0013269:	6a 00                	push   0x0
c001326b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001326f:	e8 9c 0d 00 00       	call   c0014010 <ip_output>
c0013274:	83 c4 20             	add    esp,0x20
c0013277:	83 ec 0c             	sub    esp,0xc
c001327a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001327e:	e8 91 52 ff ff       	call   c0008514 <pbuf_free>
c0013283:	83 c4 10             	add    esp,0x10
c0013286:	eb 04                	jmp    c001328c <icmp_send_response+0x138>
c0013288:	90                   	nop
c0013289:	8d 76 00             	lea    esi,[esi+0x0]
c001328c:	83 c4 2c             	add    esp,0x2c
c001328f:	c3                   	ret    

c0013290 <icmp_dest_unreach>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013297:	0f b6 c0             	movzx  eax,al
c001329a:	83 ec 04             	sub    esp,0x4
c001329d:	50                   	push   eax
c001329e:	6a 03                	push   0x3
c00132a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a4:	e8 ab fe ff ff       	call   c0013154 <icmp_send_response>
c00132a9:	83 c4 10             	add    esp,0x10
c00132ac:	90                   	nop
c00132ad:	83 c4 0c             	add    esp,0xc
c00132b0:	c3                   	ret    
c00132b1:	8d 76 00             	lea    esi,[esi+0x0]

c00132b4 <icmp_time_exceeded>:
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bb:	0f b6 c0             	movzx  eax,al
c00132be:	83 ec 04             	sub    esp,0x4
c00132c1:	50                   	push   eax
c00132c2:	6a 0b                	push   0xb
c00132c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c8:	e8 87 fe ff ff       	call   c0013154 <icmp_send_response>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	90                   	nop
c00132d1:	83 c4 0c             	add    esp,0xc
c00132d4:	c3                   	ret    
c00132d5:	66 90                	xchg   ax,ax
c00132d7:	90                   	nop

c00132d8 <lwip_standard_chksum>:
c00132d8:	83 ec 2c             	sub    esp,0x2c
c00132db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132e3:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00132ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00132f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f6:	83 e0 01             	and    eax,0x1
c00132f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00132fd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013302:	74 24                	je     c0013328 <lwip_standard_chksum+0x50>
c0013304:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013309:	7e 1d                	jle    c0013328 <lwip_standard_chksum+0x50>
c001330b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001330f:	8d 42 01             	lea    eax,[edx+0x1]
c0013312:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013316:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001331a:	83 c0 01             	add    eax,0x1
c001331d:	8a 12                	mov    dl,BYTE PTR [edx]
c001331f:	88 10                	mov    BYTE PTR [eax],dl
c0013321:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013326:	66 90                	xchg   ax,ax
c0013328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001332c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013330:	eb 1e                	jmp    c0013350 <lwip_standard_chksum+0x78>
c0013332:	66 90                	xchg   ax,ax
c0013334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013338:	8d 50 02             	lea    edx,[eax+0x2]
c001333b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001333f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013342:	0f b7 c0             	movzx  eax,ax
c0013345:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013349:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001334e:	66 90                	xchg   ax,ax
c0013350:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013355:	7f dd                	jg     c0013334 <lwip_standard_chksum+0x5c>
c0013357:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001335c:	7e 0e                	jle    c001336c <lwip_standard_chksum+0x94>
c001335e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013362:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013366:	8a 12                	mov    dl,BYTE PTR [edx]
c0013368:	88 10                	mov    BYTE PTR [eax],dl
c001336a:	66 90                	xchg   ax,ax
c001336c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013371:	0f b7 c0             	movzx  eax,ax
c0013374:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001337c:	c1 e8 10             	shr    eax,0x10
c001337f:	89 c2                	mov    edx,eax
c0013381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013385:	0f b7 c0             	movzx  eax,ax
c0013388:	01 d0                	add    eax,edx
c001338a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001338e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013392:	c1 e8 10             	shr    eax,0x10
c0013395:	89 c2                	mov    edx,eax
c0013397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001339b:	0f b7 c0             	movzx  eax,ax
c001339e:	01 d0                	add    eax,edx
c00133a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133a4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00133a9:	74 1d                	je     c00133c8 <lwip_standard_chksum+0xf0>
c00133ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133af:	0f b7 c0             	movzx  eax,ax
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	50                   	push   eax
c00133b6:	e8 61 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	0f b7 c0             	movzx  eax,ax
c00133c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133c5:	8d 76 00             	lea    esi,[esi+0x0]
c00133c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133cc:	83 c4 2c             	add    esp,0x2c
c00133cf:	c3                   	ret    

c00133d0 <inet_chksum_pseudo>:
c00133d0:	83 ec 2c             	sub    esp,0x2c
c00133d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00133d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00133db:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00133df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00133e4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00133ec:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00133f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133f9:	e9 8a 00 00 00       	jmp    c0013488 <inet_chksum_pseudo+0xb8>
c00133fe:	66 90                	xchg   ax,ax
c0013400:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013404:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013408:	0f b7 d0             	movzx  edx,ax
c001340b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001340f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013412:	83 ec 08             	sub    esp,0x8
c0013415:	52                   	push   edx
c0013416:	50                   	push   eax
c0013417:	e8 bc fe ff ff       	call   c00132d8 <lwip_standard_chksum>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	0f b7 c0             	movzx  eax,ax
c0013422:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001342a:	c1 e8 10             	shr    eax,0x10
c001342d:	89 c2                	mov    edx,eax
c001342f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013433:	0f b7 c0             	movzx  eax,ax
c0013436:	01 d0                	add    eax,edx
c0013438:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001343c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013440:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013444:	83 e0 01             	and    eax,0x1
c0013447:	0f b7 c0             	movzx  eax,ax
c001344a:	85 c0                	test   eax,eax
c001344c:	74 2e                	je     c001347c <inet_chksum_pseudo+0xac>
c001344e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013452:	ba 01 00 00 00       	mov    edx,0x1
c0013457:	29 c2                	sub    edx,eax
c0013459:	89 d0                	mov    eax,edx
c001345b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001345f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013463:	0f b7 c0             	movzx  eax,ax
c0013466:	83 ec 0c             	sub    esp,0xc
c0013469:	50                   	push   eax
c001346a:	e8 ad d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	0f b7 c0             	movzx  eax,ax
c0013475:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013479:	8d 76 00             	lea    esi,[esi+0x0]
c001347c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013480:	8b 00                	mov    eax,DWORD PTR [eax]
c0013482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013486:	66 90                	xchg   ax,ax
c0013488:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001348d:	0f 85 6d ff ff ff    	jne    c0013400 <inet_chksum_pseudo+0x30>
c0013493:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013498:	85 c0                	test   eax,eax
c001349a:	74 1c                	je     c00134b8 <inet_chksum_pseudo+0xe8>
c001349c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a0:	0f b7 c0             	movzx  eax,ax
c00134a3:	83 ec 0c             	sub    esp,0xc
c00134a6:	50                   	push   eax
c00134a7:	e8 70 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	0f b7 c0             	movzx  eax,ax
c00134b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134b6:	66 90                	xchg   ax,ax
c00134b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	0f b7 c0             	movzx  eax,ax
c00134c9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d1:	c1 e8 10             	shr    eax,0x10
c00134d4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00134dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e6:	0f b7 c0             	movzx  eax,ax
c00134e9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f1:	c1 e8 10             	shr    eax,0x10
c00134f4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00134fd:	83 ec 0c             	sub    esp,0xc
c0013500:	50                   	push   eax
c0013501:	e8 16 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	0f b7 c0             	movzx  eax,ax
c001350c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013510:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013515:	83 ec 0c             	sub    esp,0xc
c0013518:	50                   	push   eax
c0013519:	e8 fe d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	0f b7 c0             	movzx  eax,ax
c0013524:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001352c:	c1 e8 10             	shr    eax,0x10
c001352f:	89 c2                	mov    edx,eax
c0013531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013535:	0f b7 c0             	movzx  eax,ax
c0013538:	01 d0                	add    eax,edx
c001353a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001353e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013542:	c1 e8 10             	shr    eax,0x10
c0013545:	89 c2                	mov    edx,eax
c0013547:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001354b:	0f b7 c0             	movzx  eax,ax
c001354e:	01 d0                	add    eax,edx
c0013550:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013558:	f7 d0                	not    eax
c001355a:	83 c4 2c             	add    esp,0x2c
c001355d:	c3                   	ret    
c001355e:	66 90                	xchg   ax,ax

c0013560 <inet_chksum_pseudo_partial>:
c0013560:	83 ec 2c             	sub    esp,0x2c
c0013563:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013567:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001356b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001356f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013573:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013578:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001357d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001358a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001358e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013592:	e9 d9 00 00 00       	jmp    c0013670 <inet_chksum_pseudo_partial+0x110>
c0013597:	90                   	nop
c0013598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00135a0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00135a5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00135aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135af:	39 c2                	cmp    edx,eax
c00135b1:	76 09                	jbe    c00135bc <inet_chksum_pseudo_partial+0x5c>
c00135b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00135bc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00135c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135c8:	83 ec 08             	sub    esp,0x8
c00135cb:	52                   	push   edx
c00135cc:	50                   	push   eax
c00135cd:	e8 06 fd ff ff       	call   c00132d8 <lwip_standard_chksum>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	0f b7 c0             	movzx  eax,ax
c00135d8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00135e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135e4:	89 d1                	mov    ecx,edx
c00135e6:	29 c1                	sub    ecx,eax
c00135e8:	89 c8                	mov    eax,ecx
c00135ea:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00135ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135f4:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00135f9:	76 15                	jbe    c0013610 <inet_chksum_pseudo_partial+0xb0>
c00135fb:	83 ec 08             	sub    esp,0x8
c00135fe:	68 c0 10 03 c0       	push   0xc00310c0
c0013603:	68 26 fe 02 c0       	push   0xc002fe26
c0013608:	e8 f3 c7 00 00       	call   c001fe00 <CPrintf>
c001360d:	83 c4 10             	add    esp,0x10
c0013610:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013614:	c1 e8 10             	shr    eax,0x10
c0013617:	89 c2                	mov    edx,eax
c0013619:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001361d:	0f b7 c0             	movzx  eax,ax
c0013620:	01 d0                	add    eax,edx
c0013622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001362a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001362e:	83 e0 01             	and    eax,0x1
c0013631:	0f b7 c0             	movzx  eax,ax
c0013634:	85 c0                	test   eax,eax
c0013636:	74 2c                	je     c0013664 <inet_chksum_pseudo_partial+0x104>
c0013638:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001363c:	ba 01 00 00 00       	mov    edx,0x1
c0013641:	29 c2                	sub    edx,eax
c0013643:	89 d0                	mov    eax,edx
c0013645:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001364d:	0f b7 c0             	movzx  eax,ax
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	50                   	push   eax
c0013654:	e8 c3 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013659:	83 c4 10             	add    esp,0x10
c001365c:	0f b7 c0             	movzx  eax,ax
c001365f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013663:	90                   	nop
c0013664:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013668:	8b 00                	mov    eax,DWORD PTR [eax]
c001366a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001366e:	66 90                	xchg   ax,ax
c0013670:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013675:	74 0d                	je     c0013684 <inet_chksum_pseudo_partial+0x124>
c0013677:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001367c:	85 c0                	test   eax,eax
c001367e:	0f 85 14 ff ff ff    	jne    c0013598 <inet_chksum_pseudo_partial+0x38>
c0013684:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013689:	85 c0                	test   eax,eax
c001368b:	74 1b                	je     c00136a8 <inet_chksum_pseudo_partial+0x148>
c001368d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013691:	0f b7 c0             	movzx  eax,ax
c0013694:	83 ec 0c             	sub    esp,0xc
c0013697:	50                   	push   eax
c0013698:	e8 7f d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001369d:	83 c4 10             	add    esp,0x10
c00136a0:	0f b7 c0             	movzx  eax,ax
c00136a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00136a7:	90                   	nop
c00136a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b6:	0f b7 c0             	movzx  eax,ax
c00136b9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c1:	c1 e8 10             	shr    eax,0x10
c00136c4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00136cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d6:	0f b7 c0             	movzx  eax,ax
c00136d9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e1:	c1 e8 10             	shr    eax,0x10
c00136e4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	50                   	push   eax
c00136f1:	e8 26 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	0f b7 c0             	movzx  eax,ax
c00136fc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013700:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013705:	83 ec 0c             	sub    esp,0xc
c0013708:	50                   	push   eax
c0013709:	e8 0e d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	0f b7 c0             	movzx  eax,ax
c0013714:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001371c:	c1 e8 10             	shr    eax,0x10
c001371f:	89 c2                	mov    edx,eax
c0013721:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013725:	0f b7 c0             	movzx  eax,ax
c0013728:	01 d0                	add    eax,edx
c001372a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001372e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013732:	c1 e8 10             	shr    eax,0x10
c0013735:	89 c2                	mov    edx,eax
c0013737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	01 d0                	add    eax,edx
c0013740:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013748:	f7 d0                	not    eax
c001374a:	83 c4 2c             	add    esp,0x2c
c001374d:	c3                   	ret    
c001374e:	66 90                	xchg   ax,ax

c0013750 <inet_chksum>:
c0013750:	83 ec 1c             	sub    esp,0x1c
c0013753:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013757:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001375c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013761:	83 ec 08             	sub    esp,0x8
c0013764:	50                   	push   eax
c0013765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013769:	e8 6a fb ff ff       	call   c00132d8 <lwip_standard_chksum>
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	f7 d0                	not    eax
c0013773:	83 c4 1c             	add    esp,0x1c
c0013776:	c3                   	ret    
c0013777:	90                   	nop

c0013778 <inet_chksum_pbuf>:
c0013778:	83 ec 1c             	sub    esp,0x1c
c001377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013783:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001378c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013790:	e9 8b 00 00 00       	jmp    c0013820 <inet_chksum_pbuf+0xa8>
c0013795:	8d 76 00             	lea    esi,[esi+0x0]
c0013798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001379c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00137a0:	0f b7 d0             	movzx  edx,ax
c00137a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137aa:	83 ec 08             	sub    esp,0x8
c00137ad:	52                   	push   edx
c00137ae:	50                   	push   eax
c00137af:	e8 24 fb ff ff       	call   c00132d8 <lwip_standard_chksum>
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	0f b7 c0             	movzx  eax,ax
c00137ba:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00137be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c2:	c1 e8 10             	shr    eax,0x10
c00137c5:	89 c2                	mov    edx,eax
c00137c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137cb:	0f b7 c0             	movzx  eax,ax
c00137ce:	01 d0                	add    eax,edx
c00137d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00137dc:	83 e0 01             	and    eax,0x1
c00137df:	0f b7 c0             	movzx  eax,ax
c00137e2:	85 c0                	test   eax,eax
c00137e4:	74 2e                	je     c0013814 <inet_chksum_pbuf+0x9c>
c00137e6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00137ea:	ba 01 00 00 00       	mov    edx,0x1
c00137ef:	29 c2                	sub    edx,eax
c00137f1:	89 d0                	mov    eax,edx
c00137f3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137fb:	0f b7 c0             	movzx  eax,ax
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	50                   	push   eax
c0013802:	e8 15 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013807:	83 c4 10             	add    esp,0x10
c001380a:	0f b7 c0             	movzx  eax,ax
c001380d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013811:	8d 76 00             	lea    esi,[esi+0x0]
c0013814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013818:	8b 00                	mov    eax,DWORD PTR [eax]
c001381a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001381e:	66 90                	xchg   ax,ax
c0013820:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013825:	0f 85 6d ff ff ff    	jne    c0013798 <inet_chksum_pbuf+0x20>
c001382b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013830:	85 c0                	test   eax,eax
c0013832:	74 1c                	je     c0013850 <inet_chksum_pbuf+0xd8>
c0013834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013838:	0f b7 c0             	movzx  eax,ax
c001383b:	83 ec 0c             	sub    esp,0xc
c001383e:	50                   	push   eax
c001383f:	e8 d8 d3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	0f b7 c0             	movzx  eax,ax
c001384a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384e:	66 90                	xchg   ax,ax
c0013850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013854:	f7 d0                	not    eax
c0013856:	83 c4 1c             	add    esp,0x1c
c0013859:	c3                   	ret    
c001385a:	66 90                	xchg   ax,ax

c001385c <ip_route>:
c001385c:	83 ec 10             	sub    esp,0x10
c001385f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013868:	eb 42                	jmp    c00138ac <ip_route+0x50>
c001386a:	66 90                	xchg   ax,ax
c001386c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013870:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013873:	83 e0 01             	and    eax,0x1
c0013876:	0f b6 c0             	movzx  eax,al
c0013879:	85 c0                	test   eax,eax
c001387b:	74 23                	je     c00138a0 <ip_route+0x44>
c001387d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013881:	8b 10                	mov    edx,DWORD PTR [eax]
c0013883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001388a:	31 c2                	xor    edx,eax
c001388c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013890:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013893:	21 d0                	and    eax,edx
c0013895:	75 09                	jne    c00138a0 <ip_route+0x44>
c0013897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001389b:	eb 4f                	jmp    c00138ec <ip_route+0x90>
c001389d:	8d 76 00             	lea    esi,[esi+0x0]
c00138a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00138a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138aa:	66 90                	xchg   ax,ax
c00138ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00138b1:	75 b9                	jne    c001386c <ip_route+0x10>
c00138b3:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00138b8:	85 c0                	test   eax,eax
c00138ba:	74 10                	je     c00138cc <ip_route+0x70>
c00138bc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00138c1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00138c4:	0f b6 c0             	movzx  eax,al
c00138c7:	83 e0 01             	and    eax,0x1
c00138ca:	75 18                	jne    c00138e4 <ip_route+0x88>
c00138cc:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c00138d2:	83 c0 01             	add    eax,0x1
c00138d5:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c00138db:	b8 00 00 00 00       	mov    eax,0x0
c00138e0:	eb 0a                	jmp    c00138ec <ip_route+0x90>
c00138e2:	66 90                	xchg   ax,ax
c00138e4:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00138e9:	8d 76 00             	lea    esi,[esi+0x0]
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	c3                   	ret    

c00138f0 <ip_input>:
c00138f0:	83 ec 1c             	sub    esp,0x1c
c00138f3:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00138f9:	83 c0 01             	add    eax,0x1
c00138fc:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c0013902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001390d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013914:	0f b7 c0             	movzx  eax,ax
c0013917:	83 ec 0c             	sub    esp,0xc
c001391a:	50                   	push   eax
c001391b:	e8 fc d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	0f b7 c0             	movzx  eax,ax
c0013926:	c1 e8 0c             	shr    eax,0xc
c0013929:	0f b7 c0             	movzx  eax,ax
c001392c:	83 f8 04             	cmp    eax,0x4
c001392f:	74 37                	je     c0013968 <ip_input+0x78>
c0013931:	83 ec 0c             	sub    esp,0xc
c0013934:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013938:	e8 d7 4b ff ff       	call   c0008514 <pbuf_free>
c001393d:	83 c4 10             	add    esp,0x10
c0013940:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013946:	83 c0 01             	add    eax,0x1
c0013949:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c001394f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013955:	83 c0 01             	add    eax,0x1
c0013958:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001395e:	b0 00                	mov    al,0x0
c0013960:	e9 cb 03 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013965:	8d 76 00             	lea    esi,[esi+0x0]
c0013968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001396c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001396f:	0f b7 c0             	movzx  eax,ax
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	50                   	push   eax
c0013976:	e8 a1 d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001397b:	83 c4 10             	add    esp,0x10
c001397e:	0f b7 c0             	movzx  eax,ax
c0013981:	c1 e8 08             	shr    eax,0x8
c0013984:	83 e0 0f             	and    eax,0xf
c0013987:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001398c:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013991:	c1 e0 02             	shl    eax,0x2
c0013994:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001399d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00139a1:	0f b7 c0             	movzx  eax,ax
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	50                   	push   eax
c00139a8:	e8 6f d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00139b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139b8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00139bc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00139c1:	0f b7 c0             	movzx  eax,ax
c00139c4:	39 c2                	cmp    edx,eax
c00139c6:	77 14                	ja     c00139dc <ip_input+0xec>
c00139c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139cf:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00139d3:	0f b7 c0             	movzx  eax,ax
c00139d6:	39 c2                	cmp    edx,eax
c00139d8:	76 36                	jbe    c0013a10 <ip_input+0x120>
c00139da:	66 90                	xchg   ax,ax
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e3:	e8 2c 4b ff ff       	call   c0008514 <pbuf_free>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c00139f1:	83 c0 01             	add    eax,0x1
c00139f4:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00139fa:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a00:	83 c0 01             	add    eax,0x1
c0013a03:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013a09:	b0 00                	mov    al,0x0
c0013a0b:	e9 20 03 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013a10:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013a15:	83 ec 08             	sub    esp,0x8
c0013a18:	50                   	push   eax
c0013a19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a1d:	e8 2e fd ff ff       	call   c0013750 <inet_chksum>
c0013a22:	83 c4 10             	add    esp,0x10
c0013a25:	0f b7 c0             	movzx  eax,ax
c0013a28:	85 c0                	test   eax,eax
c0013a2a:	74 34                	je     c0013a60 <ip_input+0x170>
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a33:	e8 dc 4a ff ff       	call   c0008514 <pbuf_free>
c0013a38:	83 c4 10             	add    esp,0x10
c0013a3b:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c0013a41:	83 c0 01             	add    eax,0x1
c0013a44:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c0013a4a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a50:	83 c0 01             	add    eax,0x1
c0013a53:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013a59:	b0 00                	mov    al,0x0
c0013a5b:	e9 d0 02 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013a60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0013a64:	83 ec 08             	sub    esp,0x8
c0013a67:	50                   	push   eax
c0013a68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a6c:	e8 77 50 ff ff       	call   c0008ae8 <pbuf_realloc>
c0013a71:	83 c4 10             	add    esp,0x10
c0013a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a7b:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013a80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a87:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013a8c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013a94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aa0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013aa3:	83 e0 01             	and    eax,0x1
c0013aa6:	0f b6 c0             	movzx  eax,al
c0013aa9:	85 c0                	test   eax,eax
c0013aab:	74 43                	je     c0013af0 <ip_input+0x200>
c0013aad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ab1:	83 c0 04             	add    eax,0x4
c0013ab4:	74 3a                	je     c0013af0 <ip_input+0x200>
c0013ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013abd:	85 c0                	test   eax,eax
c0013abf:	74 2f                	je     c0013af0 <ip_input+0x200>
c0013ac1:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ace:	39 c2                	cmp    edx,eax
c0013ad0:	74 66                	je     c0013b38 <ip_input+0x248>
c0013ad2:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013ad7:	83 ec 08             	sub    esp,0x8
c0013ada:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ade:	50                   	push   eax
c0013adf:	e8 d4 05 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013ae4:	83 c4 10             	add    esp,0x10
c0013ae7:	0f b6 c0             	movzx  eax,al
c0013aea:	85 c0                	test   eax,eax
c0013aec:	75 4a                	jne    c0013b38 <ip_input+0x248>
c0013aee:	66 90                	xchg   ax,ax
c0013af0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013af5:	74 15                	je     c0013b0c <ip_input+0x21c>
c0013af7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013aff:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b08:	eb 0e                	jmp    c0013b18 <ip_input+0x228>
c0013b0a:	66 90                	xchg   ax,ax
c0013b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b16:	66 90                	xchg   ax,ax
c0013b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b1c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013b20:	75 0a                	jne    c0013b2c <ip_input+0x23c>
c0013b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013b31:	0f 85 65 ff ff ff    	jne    c0013a9c <ip_input+0x1ac>
c0013b37:	90                   	nop
c0013b38:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013b3d:	83 ec 08             	sub    esp,0x8
c0013b40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b44:	50                   	push   eax
c0013b45:	e8 6e 05 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	0f b6 c0             	movzx  eax,al
c0013b50:	85 c0                	test   eax,eax
c0013b52:	75 14                	jne    c0013b68 <ip_input+0x278>
c0013b54:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013b59:	25 f0 00 00 00       	and    eax,0xf0
c0013b5e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013b63:	75 2b                	jne    c0013b90 <ip_input+0x2a0>
c0013b65:	8d 76 00             	lea    esi,[esi+0x0]
c0013b68:	83 ec 0c             	sub    esp,0xc
c0013b6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b6f:	e8 a0 49 ff ff       	call   c0008514 <pbuf_free>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013b7d:	83 c0 01             	add    eax,0x1
c0013b80:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013b86:	b0 00                	mov    al,0x0
c0013b88:	e9 a3 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013b95:	75 19                	jne    c0013bb0 <ip_input+0x2c0>
c0013b97:	83 ec 0c             	sub    esp,0xc
c0013b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9e:	e8 71 49 ff ff       	call   c0008514 <pbuf_free>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	b0 00                	mov    al,0x0
c0013ba8:	e9 83 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013bad:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bb4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013bb8:	0f b7 c0             	movzx  eax,ax
c0013bbb:	25 3f ff 00 00       	and    eax,0xff3f
c0013bc0:	74 2e                	je     c0013bf0 <ip_input+0x300>
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bc9:	e8 8a 13 00 00       	call   c0014f58 <ip_reass>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013bd5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013bda:	75 08                	jne    c0013be4 <ip_input+0x2f4>
c0013bdc:	b0 00                	mov    al,0x0
c0013bde:	e9 4d 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013be3:	90                   	nop
c0013be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bef:	90                   	nop
c0013bf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013bf4:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bfd:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c0013c02:	83 ec 08             	sub    esp,0x8
c0013c05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c0d:	e8 32 5c ff ff       	call   c0009844 <raw_input>
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	0f b6 c0             	movzx  eax,al
c0013c18:	85 c0                	test   eax,eax
c0013c1a:	0f 85 e0 00 00 00    	jne    c0013d00 <ip_input+0x410>
c0013c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c24:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013c27:	0f b6 c0             	movzx  eax,al
c0013c2a:	83 f8 06             	cmp    eax,0x6
c0013c2d:	74 25                	je     c0013c54 <ip_input+0x364>
c0013c2f:	83 f8 11             	cmp    eax,0x11
c0013c32:	74 08                	je     c0013c3c <ip_input+0x34c>
c0013c34:	83 f8 01             	cmp    eax,0x1
c0013c37:	74 33                	je     c0013c6c <ip_input+0x37c>
c0013c39:	eb 49                	jmp    c0013c84 <ip_input+0x394>
c0013c3b:	90                   	nop
c0013c3c:	83 ec 08             	sub    esp,0x8
c0013c3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c47:	e8 a8 d3 ff ff       	call   c0010ff4 <udp_input>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	e9 b0 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c54:	83 ec 08             	sub    esp,0x8
c0013c57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5f:	e8 b0 a4 ff ff       	call   c000e114 <tcp_input>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	e9 98 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c6c:	83 ec 08             	sub    esp,0x8
c0013c6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c77:	e8 70 f0 ff ff       	call   c0012cec <icmp_input>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	e9 80 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c84:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013c89:	83 ec 08             	sub    esp,0x8
c0013c8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c90:	50                   	push   eax
c0013c91:	e8 22 04 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	0f b6 c0             	movzx  eax,al
c0013c9c:	85 c0                	test   eax,eax
c0013c9e:	75 30                	jne    c0013cd0 <ip_input+0x3e0>
c0013ca0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013ca5:	25 f0 00 00 00       	and    eax,0xf0
c0013caa:	3d e0 00 00 00       	cmp    eax,0xe0
c0013caf:	74 1f                	je     c0013cd0 <ip_input+0x3e0>
c0013cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013cbc:	83 ec 08             	sub    esp,0x8
c0013cbf:	6a 02                	push   0x2
c0013cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cc5:	e8 c6 f5 ff ff       	call   c0013290 <icmp_dest_unreach>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cd7:	e8 38 48 ff ff       	call   c0008514 <pbuf_free>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013ce5:	83 c0 01             	add    eax,0x1
c0013ce8:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013cee:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013cf4:	83 c0 01             	add    eax,0x1
c0013cf7:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013cfd:	eb 05                	jmp    c0013d04 <ip_input+0x414>
c0013cff:	90                   	nop
c0013d00:	90                   	nop
c0013d01:	8d 76 00             	lea    esi,[esi+0x0]
c0013d04:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013d0e:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013d18:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013d22:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013d2c:	b0 00                	mov    al,0x0
c0013d2e:	66 90                	xchg   ax,ax
c0013d30:	83 c4 1c             	add    esp,0x1c
c0013d33:	c3                   	ret    

c0013d34 <ip_output_if>:
c0013d34:	83 ec 2c             	sub    esp,0x2c
c0013d37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013d3f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013d43:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d47:	88 c8                	mov    al,cl
c0013d49:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013d4d:	88 d0                	mov    al,dl
c0013d4f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013d63:	0f b7 c0             	movzx  eax,ax
c0013d66:	83 f8 01             	cmp    eax,0x1
c0013d69:	74 15                	je     c0013d80 <ip_output_if+0x4c>
c0013d6b:	83 ec 08             	sub    esp,0x8
c0013d6e:	68 ca 10 03 c0       	push   0xc00310ca
c0013d73:	68 26 fe 02 c0       	push   0xc002fe26
c0013d78:	e8 83 c0 00 00       	call   c001fe00 <CPrintf>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013d85:	0f 84 f5 01 00 00    	je     c0013f80 <ip_output_if+0x24c>
c0013d8b:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013d92:	83 ec 08             	sub    esp,0x8
c0013d95:	6a 14                	push   0x14
c0013d97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9b:	e8 d4 45 ff ff       	call   c0008374 <pbuf_header>
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	0f b6 c0             	movzx  eax,al
c0013da6:	85 c0                	test   eax,eax
c0013da8:	74 16                	je     c0013dc0 <ip_output_if+0x8c>
c0013daa:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013db0:	83 c0 01             	add    eax,0x1
c0013db3:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013db9:	b0 fe                	mov    al,0xfe
c0013dbb:	e9 4c 02 00 00       	jmp    c001400c <ip_output_if+0x2d8>
c0013dc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013dd3:	0f b7 c0             	movzx  eax,ax
c0013dd6:	83 f8 13             	cmp    eax,0x13
c0013dd9:	77 15                	ja     c0013df0 <ip_output_if+0xbc>
c0013ddb:	83 ec 08             	sub    esp,0x8
c0013dde:	68 d8 10 03 c0       	push   0xc00310d8
c0013de3:	68 26 fe 02 c0       	push   0xc002fe26
c0013de8:	e8 13 c0 00 00       	call   c001fe00 <CPrintf>
c0013ded:	83 c4 10             	add    esp,0x10
c0013df0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013df4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013df8:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dff:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013e03:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013e06:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013e0b:	c1 e0 08             	shl    eax,0x8
c0013e0e:	89 c2                	mov    edx,eax
c0013e10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e15:	09 d0                	or     eax,edx
c0013e17:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e25:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013e28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e2f:	0f b7 c0             	movzx  eax,ax
c0013e32:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e3d:	c1 e8 10             	shr    eax,0x10
c0013e40:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e44:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013e49:	c1 e8 02             	shr    eax,0x2
c0013e4c:	0f b7 c0             	movzx  eax,ax
c0013e4f:	c1 e0 08             	shl    eax,0x8
c0013e52:	80 cc 40             	or     ah,0x40
c0013e55:	89 c2                	mov    edx,eax
c0013e57:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013e5c:	09 d0                	or     eax,edx
c0013e5e:	0f b7 c0             	movzx  eax,ax
c0013e61:	83 ec 0c             	sub    esp,0xc
c0013e64:	50                   	push   eax
c0013e65:	e8 b2 cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013e6a:	83 c4 10             	add    esp,0x10
c0013e6d:	89 c2                	mov    edx,eax
c0013e6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e73:	66 89 10             	mov    WORD PTR [eax],dx
c0013e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013e7d:	0f b7 c0             	movzx  eax,ax
c0013e80:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e8b:	0f b7 c0             	movzx  eax,ax
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	50                   	push   eax
c0013e92:	e8 85 cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	89 c2                	mov    edx,eax
c0013e9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013ea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013eac:	0f b7 c0             	movzx  eax,ax
c0013eaf:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013eb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eb7:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013ebd:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013ec3:	0f b7 c0             	movzx  eax,ax
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	50                   	push   eax
c0013eca:	e8 4d cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	89 c2                	mov    edx,eax
c0013ed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ed8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013edc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ee0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013ee4:	0f b7 c0             	movzx  eax,ax
c0013ee7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013eeb:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013ef1:	83 c0 01             	add    eax,0x1
c0013ef4:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013efa:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013eff:	74 0b                	je     c0013f0c <ip_output_if+0x1d8>
c0013f01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f07:	85 c0                	test   eax,eax
c0013f09:	75 11                	jne    c0013f1c <ip_output_if+0x1e8>
c0013f0b:	90                   	nop
c0013f0c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013f13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f17:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f1a:	eb 10                	jmp    c0013f2c <ip_output_if+0x1f8>
c0013f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f20:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f29:	8d 76 00             	lea    esi,[esi+0x0]
c0013f2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f33:	0f b7 c0             	movzx  eax,ax
c0013f36:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f41:	c1 e8 10             	shr    eax,0x10
c0013f44:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f4c:	c1 e8 10             	shr    eax,0x10
c0013f4f:	89 c2                	mov    edx,eax
c0013f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f55:	0f b7 c0             	movzx  eax,ax
c0013f58:	01 d0                	add    eax,edx
c0013f5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f62:	c1 e8 10             	shr    eax,0x10
c0013f65:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f69:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f71:	89 c2                	mov    edx,eax
c0013f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f77:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013f7b:	eb 23                	jmp    c0013fa0 <ip_output_if+0x26c>
c0013f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013f96:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013fa6:	83 c0 01             	add    eax,0x1
c0013fa9:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013faf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013fb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013fb6:	0f b7 c0             	movzx  eax,ax
c0013fb9:	85 c0                	test   eax,eax
c0013fbb:	74 33                	je     c0013ff0 <ip_output_if+0x2bc>
c0013fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013fc4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013fc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013fcb:	0f b7 d2             	movzx  edx,dx
c0013fce:	0f b7 c0             	movzx  eax,ax
c0013fd1:	39 c2                	cmp    edx,eax
c0013fd3:	76 1b                	jbe    c0013ff0 <ip_output_if+0x2bc>
c0013fd5:	83 ec 04             	sub    esp,0x4
c0013fd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fdc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fe4:	e8 37 14 00 00       	call   c0015420 <ip_frag>
c0013fe9:	83 c4 10             	add    esp,0x10
c0013fec:	eb 1e                	jmp    c001400c <ip_output_if+0x2d8>
c0013fee:	66 90                	xchg   ax,ax
c0013ff0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ff4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013ff7:	83 ec 04             	sub    esp,0x4
c0013ffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ffe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014002:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014006:	ff d0                	call   eax
c0014008:	83 c4 10             	add    esp,0x10
c001400b:	90                   	nop
c001400c:	83 c4 2c             	add    esp,0x2c
c001400f:	c3                   	ret    

c0014010 <ip_output>:
c0014010:	83 ec 2c             	sub    esp,0x2c
c0014013:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014017:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001401b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001401f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014023:	88 c8                	mov    al,cl
c0014025:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0014029:	88 d0                	mov    al,dl
c001402b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001402f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014033:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014037:	0f b7 c0             	movzx  eax,ax
c001403a:	83 f8 01             	cmp    eax,0x1
c001403d:	74 15                	je     c0014054 <ip_output+0x44>
c001403f:	83 ec 08             	sub    esp,0x8
c0014042:	68 ca 10 03 c0       	push   0xc00310ca
c0014047:	68 26 fe 02 c0       	push   0xc002fe26
c001404c:	e8 af bd 00 00       	call   c001fe00 <CPrintf>
c0014051:	83 c4 10             	add    esp,0x10
c0014054:	83 ec 0c             	sub    esp,0xc
c0014057:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001405b:	e8 fc f7 ff ff       	call   c001385c <ip_route>
c0014060:	83 c4 10             	add    esp,0x10
c0014063:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014067:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001406c:	75 16                	jne    c0014084 <ip_output+0x74>
c001406e:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0014074:	83 c0 01             	add    eax,0x1
c0014077:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001407d:	b0 fc                	mov    al,0xfc
c001407f:	eb 33                	jmp    c00140b4 <ip_output+0xa4>
c0014081:	8d 76 00             	lea    esi,[esi+0x0]
c0014084:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0014089:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001408e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014093:	83 ec 04             	sub    esp,0x4
c0014096:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001409a:	51                   	push   ecx
c001409b:	52                   	push   edx
c001409c:	50                   	push   eax
c001409d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a9:	e8 86 fc ff ff       	call   c0013d34 <ip_output_if>
c00140ae:	83 c4 20             	add    esp,0x20
c00140b1:	8d 76 00             	lea    esi,[esi+0x0]
c00140b4:	83 c4 2c             	add    esp,0x2c
c00140b7:	c3                   	ret    

c00140b8 <ip4_addr_isbroadcast>:
c00140b8:	83 ec 10             	sub    esp,0x10
c00140bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140c3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00140c8:	74 0a                	je     c00140d4 <ip4_addr_isbroadcast+0x1c>
c00140ca:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00140cf:	75 07                	jne    c00140d8 <ip4_addr_isbroadcast+0x20>
c00140d1:	8d 76 00             	lea    esi,[esi+0x0]
c00140d4:	b0 01                	mov    al,0x1
c00140d6:	eb 64                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140dc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00140df:	0f b6 c0             	movzx  eax,al
c00140e2:	83 e0 02             	and    eax,0x2
c00140e5:	75 05                	jne    c00140ec <ip4_addr_isbroadcast+0x34>
c00140e7:	b0 00                	mov    al,0x0
c00140e9:	eb 51                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140eb:	90                   	nop
c00140ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140f3:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00140f7:	75 07                	jne    c0014100 <ip4_addr_isbroadcast+0x48>
c00140f9:	b0 00                	mov    al,0x0
c00140fb:	eb 3f                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014100:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014104:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001410b:	31 c2                	xor    edx,eax
c001410d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014111:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014114:	21 d0                	and    eax,edx
c0014116:	75 20                	jne    c0014138 <ip4_addr_isbroadcast+0x80>
c0014118:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001411c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001411f:	f7 d0                	not    eax
c0014121:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014125:	89 c2                	mov    edx,eax
c0014127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001412b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001412e:	f7 d0                	not    eax
c0014130:	39 c2                	cmp    edx,eax
c0014132:	75 04                	jne    c0014138 <ip4_addr_isbroadcast+0x80>
c0014134:	b0 01                	mov    al,0x1
c0014136:	eb 04                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c0014138:	b0 00                	mov    al,0x0
c001413a:	66 90                	xchg   ax,ax
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	c3                   	ret    

c0014140 <ip4_addr_netmask_valid>:
c0014140:	83 ec 1c             	sub    esp,0x1c
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001414a:	e8 f1 ca fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014156:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001415e:	eb 10                	jmp    c0014170 <ip4_addr_netmask_valid+0x30>
c0014160:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014164:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014168:	74 12                	je     c001417c <ip4_addr_netmask_valid+0x3c>
c001416a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001416e:	66 90                	xchg   ax,ax
c0014170:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014175:	75 e9                	jne    c0014160 <ip4_addr_netmask_valid+0x20>
c0014177:	eb 1b                	jmp    c0014194 <ip4_addr_netmask_valid+0x54>
c0014179:	8d 76 00             	lea    esi,[esi+0x0]
c001417c:	90                   	nop
c001417d:	eb 15                	jmp    c0014194 <ip4_addr_netmask_valid+0x54>
c001417f:	90                   	nop
c0014180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014184:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014188:	74 06                	je     c0014190 <ip4_addr_netmask_valid+0x50>
c001418a:	b0 00                	mov    al,0x0
c001418c:	eb 12                	jmp    c00141a0 <ip4_addr_netmask_valid+0x60>
c001418e:	66 90                	xchg   ax,ax
c0014190:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0014194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014199:	75 e5                	jne    c0014180 <ip4_addr_netmask_valid+0x40>
c001419b:	b0 01                	mov    al,0x1
c001419d:	8d 76 00             	lea    esi,[esi+0x0]
c00141a0:	83 c4 1c             	add    esp,0x1c
c00141a3:	c3                   	ret    

c00141a4 <ipaddr_aton>:
c00141a4:	83 ec 2c             	sub    esp,0x2c
c00141a7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00141ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141b3:	8a 00                	mov    al,BYTE PTR [eax]
c00141b5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141b9:	8d 76 00             	lea    esi,[esi+0x0]
c00141bc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c0:	0f b6 c0             	movzx  eax,al
c00141c3:	83 f8 2f             	cmp    eax,0x2f
c00141c6:	76 0c                	jbe    c00141d4 <ipaddr_aton+0x30>
c00141c8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141cc:	0f b6 c0             	movzx  eax,al
c00141cf:	83 f8 39             	cmp    eax,0x39
c00141d2:	76 0c                	jbe    c00141e0 <ipaddr_aton+0x3c>
c00141d4:	b8 00 00 00 00       	mov    eax,0x0
c00141d9:	e9 f2 02 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c00141de:	66 90                	xchg   ax,ax
c00141e0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00141e8:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c00141ed:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00141f2:	83 f8 30             	cmp    eax,0x30
c00141f5:	75 45                	jne    c001423c <ipaddr_aton+0x98>
c00141f7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014200:	8a 00                	mov    al,BYTE PTR [eax]
c0014202:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014206:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001420b:	83 f8 78             	cmp    eax,0x78
c001420e:	74 0c                	je     c001421c <ipaddr_aton+0x78>
c0014210:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014215:	83 f8 58             	cmp    eax,0x58
c0014218:	75 1a                	jne    c0014234 <ipaddr_aton+0x90>
c001421a:	66 90                	xchg   ax,ax
c001421c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014221:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001422a:	8a 00                	mov    al,BYTE PTR [eax]
c001422c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014230:	eb 0a                	jmp    c001423c <ipaddr_aton+0x98>
c0014232:	66 90                	xchg   ax,ax
c0014234:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014239:	8d 76 00             	lea    esi,[esi+0x0]
c001423c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014240:	0f b6 c0             	movzx  eax,al
c0014243:	83 f8 2f             	cmp    eax,0x2f
c0014246:	76 3c                	jbe    c0014284 <ipaddr_aton+0xe0>
c0014248:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001424c:	0f b6 c0             	movzx  eax,al
c001424f:	83 f8 39             	cmp    eax,0x39
c0014252:	77 30                	ja     c0014284 <ipaddr_aton+0xe0>
c0014254:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014259:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001425e:	89 c2                	mov    edx,eax
c0014260:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014265:	01 d0                	add    eax,edx
c0014267:	83 e8 30             	sub    eax,0x30
c001426a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001426e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014277:	8a 00                	mov    al,BYTE PTR [eax]
c0014279:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001427d:	e9 ae 00 00 00       	jmp    c0014330 <ipaddr_aton+0x18c>
c0014282:	66 90                	xchg   ax,ax
c0014284:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014289:	83 f8 10             	cmp    eax,0x10
c001428c:	0f 85 a6 00 00 00    	jne    c0014338 <ipaddr_aton+0x194>
c0014292:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014296:	0f b6 c0             	movzx  eax,al
c0014299:	83 f8 2f             	cmp    eax,0x2f
c001429c:	76 0e                	jbe    c00142ac <ipaddr_aton+0x108>
c001429e:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142a2:	0f b6 c0             	movzx  eax,al
c00142a5:	83 f8 39             	cmp    eax,0x39
c00142a8:	76 32                	jbe    c00142dc <ipaddr_aton+0x138>
c00142aa:	66 90                	xchg   ax,ax
c00142ac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142b0:	0f b6 c0             	movzx  eax,al
c00142b3:	83 f8 60             	cmp    eax,0x60
c00142b6:	76 0c                	jbe    c00142c4 <ipaddr_aton+0x120>
c00142b8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142bc:	0f b6 c0             	movzx  eax,al
c00142bf:	83 f8 66             	cmp    eax,0x66
c00142c2:	76 18                	jbe    c00142dc <ipaddr_aton+0x138>
c00142c4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142c8:	0f b6 c0             	movzx  eax,al
c00142cb:	83 f8 40             	cmp    eax,0x40
c00142ce:	76 68                	jbe    c0014338 <ipaddr_aton+0x194>
c00142d0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142d4:	0f b6 c0             	movzx  eax,al
c00142d7:	83 f8 46             	cmp    eax,0x46
c00142da:	77 5c                	ja     c0014338 <ipaddr_aton+0x194>
c00142dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142e0:	c1 e0 04             	shl    eax,0x4
c00142e3:	89 c2                	mov    edx,eax
c00142e5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ea:	8d 48 0a             	lea    ecx,[eax+0xa]
c00142ed:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142f1:	0f b6 c0             	movzx  eax,al
c00142f4:	83 f8 60             	cmp    eax,0x60
c00142f7:	76 13                	jbe    c001430c <ipaddr_aton+0x168>
c00142f9:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142fd:	0f b6 c0             	movzx  eax,al
c0014300:	83 f8 7a             	cmp    eax,0x7a
c0014303:	77 07                	ja     c001430c <ipaddr_aton+0x168>
c0014305:	b8 61 00 00 00       	mov    eax,0x61
c001430a:	eb 08                	jmp    c0014314 <ipaddr_aton+0x170>
c001430c:	b8 41 00 00 00       	mov    eax,0x41
c0014311:	8d 76 00             	lea    esi,[esi+0x0]
c0014314:	29 c1                	sub    ecx,eax
c0014316:	89 c8                	mov    eax,ecx
c0014318:	09 d0                	or     eax,edx
c001431a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001431e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014327:	8a 00                	mov    al,BYTE PTR [eax]
c0014329:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001432d:	8d 76 00             	lea    esi,[esi+0x0]
c0014330:	e9 07 ff ff ff       	jmp    c001423c <ipaddr_aton+0x98>
c0014335:	8d 76 00             	lea    esi,[esi+0x0]
c0014338:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001433d:	83 f8 2e             	cmp    eax,0x2e
c0014340:	75 42                	jne    c0014384 <ipaddr_aton+0x1e0>
c0014342:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014346:	83 c0 0c             	add    eax,0xc
c0014349:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001434d:	72 0d                	jb     c001435c <ipaddr_aton+0x1b8>
c001434f:	b8 00 00 00 00       	mov    eax,0x0
c0014354:	e9 77 01 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014359:	8d 76 00             	lea    esi,[esi+0x0]
c001435c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014360:	8d 50 04             	lea    edx,[eax+0x4]
c0014363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001436b:	89 10                	mov    DWORD PTR [eax],edx
c001436d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014372:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014376:	8a 00                	mov    al,BYTE PTR [eax]
c0014378:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001437c:	e9 3b fe ff ff       	jmp    c00141bc <ipaddr_aton+0x18>
c0014381:	8d 76 00             	lea    esi,[esi+0x0]
c0014384:	90                   	nop
c0014385:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001438a:	85 c0                	test   eax,eax
c001438c:	74 46                	je     c00143d4 <ipaddr_aton+0x230>
c001438e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014393:	83 f8 20             	cmp    eax,0x20
c0014396:	74 3c                	je     c00143d4 <ipaddr_aton+0x230>
c0014398:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001439d:	83 f8 0c             	cmp    eax,0xc
c00143a0:	74 32                	je     c00143d4 <ipaddr_aton+0x230>
c00143a2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143a7:	83 f8 0a             	cmp    eax,0xa
c00143aa:	74 28                	je     c00143d4 <ipaddr_aton+0x230>
c00143ac:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143b1:	83 f8 0d             	cmp    eax,0xd
c00143b4:	74 1e                	je     c00143d4 <ipaddr_aton+0x230>
c00143b6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143bb:	83 f8 09             	cmp    eax,0x9
c00143be:	74 14                	je     c00143d4 <ipaddr_aton+0x230>
c00143c0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143c5:	83 f8 0b             	cmp    eax,0xb
c00143c8:	74 0a                	je     c00143d4 <ipaddr_aton+0x230>
c00143ca:	b8 00 00 00 00       	mov    eax,0x0
c00143cf:	e9 fc 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c00143d4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00143d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143dc:	29 c2                	sub    edx,eax
c00143de:	89 d0                	mov    eax,edx
c00143e0:	c1 f8 02             	sar    eax,0x2
c00143e3:	83 c0 01             	add    eax,0x1
c00143e6:	83 f8 04             	cmp    eax,0x4
c00143e9:	0f 87 9d 00 00 00    	ja     c001448c <ipaddr_aton+0x2e8>
c00143ef:	8b 04 85 10 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceef0]
c00143f6:	ff e0                	jmp    eax
c00143f8:	b8 00 00 00 00       	mov    eax,0x0
c00143fd:	e9 ce 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014402:	66 90                	xchg   ax,ax
c0014404:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001440c:	76 0a                	jbe    c0014418 <ipaddr_aton+0x274>
c001440e:	b8 00 00 00 00       	mov    eax,0x0
c0014413:	e9 b8 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001441c:	c1 e0 18             	shl    eax,0x18
c001441f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014423:	e9 80 00 00 00       	jmp    c00144a8 <ipaddr_aton+0x304>
c0014428:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014430:	76 0a                	jbe    c001443c <ipaddr_aton+0x298>
c0014432:	b8 00 00 00 00       	mov    eax,0x0
c0014437:	e9 94 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c001443c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014440:	c1 e0 18             	shl    eax,0x18
c0014443:	89 c2                	mov    edx,eax
c0014445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014449:	c1 e0 10             	shl    eax,0x10
c001444c:	09 d0                	or     eax,edx
c001444e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014452:	eb 54                	jmp    c00144a8 <ipaddr_aton+0x304>
c0014454:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001445c:	76 0a                	jbe    c0014468 <ipaddr_aton+0x2c4>
c001445e:	b8 00 00 00 00       	mov    eax,0x0
c0014463:	eb 6b                	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014465:	8d 76 00             	lea    esi,[esi+0x0]
c0014468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001446c:	c1 e0 18             	shl    eax,0x18
c001446f:	89 c2                	mov    edx,eax
c0014471:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014475:	c1 e0 10             	shl    eax,0x10
c0014478:	09 c2                	or     edx,eax
c001447a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001447e:	c1 e0 08             	shl    eax,0x8
c0014481:	09 d0                	or     eax,edx
c0014483:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014487:	eb 1f                	jmp    c00144a8 <ipaddr_aton+0x304>
c0014489:	8d 76 00             	lea    esi,[esi+0x0]
c001448c:	83 ec 08             	sub    esp,0x8
c001448f:	68 05 11 03 c0       	push   0xc0031105
c0014494:	68 26 fe 02 c0       	push   0xc002fe26
c0014499:	e8 62 b9 00 00       	call   c001fe00 <CPrintf>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	eb 05                	jmp    c00144a8 <ipaddr_aton+0x304>
c00144a3:	90                   	nop
c00144a4:	90                   	nop
c00144a5:	8d 76 00             	lea    esi,[esi+0x0]
c00144a8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00144ad:	74 19                	je     c00144c8 <ipaddr_aton+0x324>
c00144af:	83 ec 0c             	sub    esp,0xc
c00144b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00144b6:	e8 85 c7 fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	89 c2                	mov    edx,eax
c00144c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144c4:	89 10                	mov    DWORD PTR [eax],edx
c00144c6:	66 90                	xchg   ax,ax
c00144c8:	b8 01 00 00 00       	mov    eax,0x1
c00144cd:	8d 76 00             	lea    esi,[esi+0x0]
c00144d0:	83 c4 2c             	add    esp,0x2c
c00144d3:	c3                   	ret    

c00144d4 <ipaddr_addr>:
c00144d4:	83 ec 1c             	sub    esp,0x1c
c00144d7:	83 ec 08             	sub    esp,0x8
c00144da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00144de:	50                   	push   eax
c00144df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144e3:	e8 bc fc ff ff       	call   c00141a4 <ipaddr_aton>
c00144e8:	83 c4 10             	add    esp,0x10
c00144eb:	85 c0                	test   eax,eax
c00144ed:	74 09                	je     c00144f8 <ipaddr_addr+0x24>
c00144ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144f3:	eb 0b                	jmp    c0014500 <ipaddr_addr+0x2c>
c00144f5:	8d 76 00             	lea    esi,[esi+0x0]
c00144f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00144fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014500:	83 c4 1c             	add    esp,0x1c
c0014503:	c3                   	ret    

c0014504 <ipaddr_ntoa_r>:
c0014504:	83 ec 20             	sub    esp,0x20
c0014507:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001450f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014513:	8b 00                	mov    eax,DWORD PTR [eax]
c0014515:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014519:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001451d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014521:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014525:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014529:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001452e:	e9 f9 00 00 00       	jmp    c001462c <ipaddr_ntoa_r+0x128>
c0014533:	90                   	nop
c0014534:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014539:	8d 76 00             	lea    esi,[esi+0x0]
c001453c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014540:	8a 00                	mov    al,BYTE PTR [eax]
c0014542:	0f b6 c8             	movzx  ecx,al
c0014545:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001454a:	89 c8                	mov    eax,ecx
c001454c:	f7 e2                	mul    edx
c001454e:	c1 ea 03             	shr    edx,0x3
c0014551:	89 d0                	mov    eax,edx
c0014553:	c1 e0 02             	shl    eax,0x2
c0014556:	01 d0                	add    eax,edx
c0014558:	d1 e0                	shl    eax,1
c001455a:	29 c1                	sub    ecx,eax
c001455c:	89 c8                	mov    eax,ecx
c001455e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014562:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014566:	8a 00                	mov    al,BYTE PTR [eax]
c0014568:	0f b6 c0             	movzx  eax,al
c001456b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014570:	f7 e2                	mul    edx
c0014572:	89 d0                	mov    eax,edx
c0014574:	c1 e8 03             	shr    eax,0x3
c0014577:	88 c2                	mov    dl,al
c0014579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001457d:	88 10                	mov    BYTE PTR [eax],dl
c001457f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014583:	83 c0 30             	add    eax,0x30
c0014586:	88 c1                	mov    cl,al
c0014588:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001458c:	8d 50 01             	lea    edx,[eax+0x1]
c001458f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014593:	0f b6 c0             	movzx  eax,al
c0014596:	88 ca                	mov    dl,cl
c0014598:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c001459c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145a0:	8a 00                	mov    al,BYTE PTR [eax]
c00145a2:	0f b6 c0             	movzx  eax,al
c00145a5:	85 c0                	test   eax,eax
c00145a7:	75 93                	jne    c001453c <ipaddr_ntoa_r+0x38>
c00145a9:	eb 35                	jmp    c00145e0 <ipaddr_ntoa_r+0xdc>
c00145ab:	90                   	nop
c00145ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b0:	8d 50 01             	lea    edx,[eax+0x1]
c00145b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00145b7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00145bb:	7f 0b                	jg     c00145c8 <ipaddr_ntoa_r+0xc4>
c00145bd:	b8 00 00 00 00       	mov    eax,0x0
c00145c2:	e9 85 00 00 00       	jmp    c001464c <ipaddr_ntoa_r+0x148>
c00145c7:	90                   	nop
c00145c8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00145cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00145d4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00145d8:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c00145dc:	88 10                	mov    BYTE PTR [eax],dl
c00145de:	66 90                	xchg   ax,ax
c00145e0:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00145e4:	8d 50 ff             	lea    edx,[eax-0x1]
c00145e7:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00145eb:	0f b6 c0             	movzx  eax,al
c00145ee:	85 c0                	test   eax,eax
c00145f0:	75 ba                	jne    c00145ac <ipaddr_ntoa_r+0xa8>
c00145f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f6:	8d 50 01             	lea    edx,[eax+0x1]
c00145f9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00145fd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014601:	7f 09                	jg     c001460c <ipaddr_ntoa_r+0x108>
c0014603:	b8 00 00 00 00       	mov    eax,0x0
c0014608:	eb 42                	jmp    c001464c <ipaddr_ntoa_r+0x148>
c001460a:	66 90                	xchg   ax,ax
c001460c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014610:	8d 50 01             	lea    edx,[eax+0x1]
c0014613:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014617:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001461a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001461f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014623:	83 c0 01             	add    eax,0x1
c0014626:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001462a:	66 90                	xchg   ax,ax
c001462c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014631:	83 f8 03             	cmp    eax,0x3
c0014634:	0f 86 fa fe ff ff    	jbe    c0014534 <ipaddr_ntoa_r+0x30>
c001463a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001463f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014643:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014646:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001464a:	66 90                	xchg   ax,ax
c001464c:	83 c4 20             	add    esp,0x20
c001464f:	c3                   	ret    

c0014650 <ipaddr_ntoa>:
c0014650:	6a 10                	push   0x10
c0014652:	68 a4 a9 03 c0       	push   0xc003a9a4
c0014657:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001465b:	e8 a4 fe ff ff       	call   c0014504 <ipaddr_ntoa_r>
c0014660:	83 c4 0c             	add    esp,0xc
c0014663:	c3                   	ret    

c0014664 <ip_reass_dequeue_datagram>:
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001466c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014670:	75 0e                	jne    c0014680 <ip_reass_dequeue_datagram+0x1c>
c0014672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014676:	8b 00                	mov    eax,DWORD PTR [eax]
c0014678:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c001467d:	eb 29                	jmp    c00146a8 <ip_reass_dequeue_datagram+0x44>
c001467f:	90                   	nop
c0014680:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014685:	75 15                	jne    c001469c <ip_reass_dequeue_datagram+0x38>
c0014687:	83 ec 08             	sub    esp,0x8
c001468a:	68 2c 11 03 c0       	push   0xc003112c
c001468f:	68 26 fe 02 c0       	push   0xc002fe26
c0014694:	e8 67 b7 00 00       	call   c001fe00 <CPrintf>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00146a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146a6:	89 10                	mov    DWORD PTR [eax],edx
c00146a8:	83 ec 08             	sub    esp,0x8
c00146ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146af:	6a 05                	push   0x5
c00146b1:	e8 9e 35 ff ff       	call   c0007c54 <memp_free>
c00146b6:	83 c4 10             	add    esp,0x10
c00146b9:	90                   	nop
c00146ba:	83 c4 0c             	add    esp,0xc
c00146bd:	c3                   	ret    
c00146be:	66 90                	xchg   ax,ax

c00146c0 <ip_reass_free_complete_datagram>:
c00146c0:	83 ec 2c             	sub    esp,0x2c
c00146c3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00146ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146ce:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00146d2:	75 18                	jne    c00146ec <ip_reass_free_complete_datagram+0x2c>
c00146d4:	83 ec 08             	sub    esp,0x8
c00146d7:	68 45 11 03 c0       	push   0xc0031145
c00146dc:	68 26 fe 02 c0       	push   0xc002fe26
c00146e1:	e8 1a b7 00 00       	call   c001fe00 <CPrintf>
c00146e6:	83 c4 10             	add    esp,0x10
c00146e9:	8d 76 00             	lea    esi,[esi+0x0]
c00146ec:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00146f1:	74 21                	je     c0014714 <ip_reass_free_complete_datagram+0x54>
c00146f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00146f9:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00146fd:	74 15                	je     c0014714 <ip_reass_free_complete_datagram+0x54>
c00146ff:	83 ec 08             	sub    esp,0x8
c0014702:	68 51 11 03 c0       	push   0xc0031151
c0014707:	68 26 fe 02 c0       	push   0xc002fe26
c001470c:	e8 ef b6 00 00       	call   c001fe00 <CPrintf>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014726:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001472a:	0f b7 c0             	movzx  eax,ax
c001472d:	85 c0                	test   eax,eax
c001472f:	0f 85 a3 00 00 00    	jne    c00147d8 <ip_reass_free_complete_datagram+0x118>
c0014735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014739:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001473c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014744:	8b 10                	mov    edx,DWORD PTR [eax]
c0014746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001474a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001474d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014751:	8d 50 08             	lea    edx,[eax+0x8]
c0014754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001475b:	83 ec 04             	sub    esp,0x4
c001475e:	6a 14                	push   0x14
c0014760:	52                   	push   edx
c0014761:	50                   	push   eax
c0014762:	e8 13 bc fe ff       	call   c000037a <memcpy>
c0014767:	83 c4 10             	add    esp,0x10
c001476a:	83 ec 08             	sub    esp,0x8
c001476d:	6a 01                	push   0x1
c001476f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014773:	e8 3c eb ff ff       	call   c00132b4 <icmp_time_exceeded>
c0014778:	83 c4 10             	add    esp,0x10
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014782:	e8 69 45 ff ff       	call   c0008cf0 <pbuf_clen>
c0014787:	83 c4 10             	add    esp,0x10
c001478a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001478e:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014793:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014798:	01 d0                	add    eax,edx
c001479a:	3d ff ff 00 00       	cmp    eax,0xffff
c001479f:	7e 17                	jle    c00147b8 <ip_reass_free_complete_datagram+0xf8>
c00147a1:	83 ec 08             	sub    esp,0x8
c00147a4:	68 63 11 03 c0       	push   0xc0031163
c00147a9:	68 26 fe 02 c0       	push   0xc002fe26
c00147ae:	e8 4d b6 00 00       	call   c001fe00 <CPrintf>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00147bd:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00147c2:	01 d0                	add    eax,edx
c00147c4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00147c9:	83 ec 0c             	sub    esp,0xc
c00147cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147d0:	e8 3f 3d ff ff       	call   c0008514 <pbuf_free>
c00147d5:	83 c4 10             	add    esp,0x10
c00147d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147e3:	eb 7b                	jmp    c0014860 <ip_reass_free_complete_datagram+0x1a0>
c00147e5:	8d 76 00             	lea    esi,[esi+0x0]
c00147e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014801:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014805:	83 ec 0c             	sub    esp,0xc
c0014808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001480c:	e8 df 44 ff ff       	call   c0008cf0 <pbuf_clen>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014818:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001481d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014822:	01 d0                	add    eax,edx
c0014824:	3d ff ff 00 00       	cmp    eax,0xffff
c0014829:	7e 15                	jle    c0014840 <ip_reass_free_complete_datagram+0x180>
c001482b:	83 ec 08             	sub    esp,0x8
c001482e:	68 63 11 03 c0       	push   0xc0031163
c0014833:	68 26 fe 02 c0       	push   0xc002fe26
c0014838:	e8 c3 b5 00 00       	call   c001fe00 <CPrintf>
c001483d:	83 c4 10             	add    esp,0x10
c0014840:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014845:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001484a:	01 d0                	add    eax,edx
c001484c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014851:	83 ec 0c             	sub    esp,0xc
c0014854:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014858:	e8 b7 3c ff ff       	call   c0008514 <pbuf_free>
c001485d:	83 c4 10             	add    esp,0x10
c0014860:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014865:	75 81                	jne    c00147e8 <ip_reass_free_complete_datagram+0x128>
c0014867:	83 ec 08             	sub    esp,0x8
c001486a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001486e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014872:	e8 ed fd ff ff       	call   c0014664 <ip_reass_dequeue_datagram>
c0014877:	83 c4 10             	add    esp,0x10
c001487a:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014880:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014885:	0f b7 c0             	movzx  eax,ax
c0014888:	39 c2                	cmp    edx,eax
c001488a:	76 18                	jbe    c00148a4 <ip_reass_free_complete_datagram+0x1e4>
c001488c:	83 ec 08             	sub    esp,0x8
c001488f:	68 80 11 03 c0       	push   0xc0031180
c0014894:	68 26 fe 02 c0       	push   0xc002fe26
c0014899:	e8 62 b5 00 00       	call   c001fe00 <CPrintf>
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	8d 76 00             	lea    esi,[esi+0x0]
c00148a4:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c00148ab:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00148b0:	89 d1                	mov    ecx,edx
c00148b2:	29 c1                	sub    ecx,eax
c00148b4:	89 c8                	mov    eax,ecx
c00148b6:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00148bc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00148c1:	83 c4 2c             	add    esp,0x2c
c00148c4:	c3                   	ret    
c00148c5:	8d 76 00             	lea    esi,[esi+0x0]

c00148c8 <ip_reass_tmr>:
c00148c8:	83 ec 1c             	sub    esp,0x1c
c00148cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148d3:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00148d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148dc:	eb 62                	jmp    c0014940 <ip_reass_tmr+0x78>
c00148de:	66 90                	xchg   ax,ax
c00148e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e4:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00148e7:	0f b6 c0             	movzx  eax,al
c00148ea:	85 c0                	test   eax,eax
c00148ec:	74 2a                	je     c0014918 <ip_reass_tmr+0x50>
c00148ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148f2:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00148f5:	83 e8 01             	sub    eax,0x1
c00148f8:	88 c2                	mov    dl,al
c00148fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148fe:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014905:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001490d:	8b 00                	mov    eax,DWORD PTR [eax]
c001490f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014913:	eb 2b                	jmp    c0014940 <ip_reass_tmr+0x78>
c0014915:	8d 76 00             	lea    esi,[esi+0x0]
c0014918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001491c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014924:	8b 00                	mov    eax,DWORD PTR [eax]
c0014926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001492a:	83 ec 08             	sub    esp,0x8
c001492d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014931:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014935:	e8 86 fd ff ff       	call   c00146c0 <ip_reass_free_complete_datagram>
c001493a:	83 c4 10             	add    esp,0x10
c001493d:	8d 76 00             	lea    esi,[esi+0x0]
c0014940:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014945:	75 99                	jne    c00148e0 <ip_reass_tmr+0x18>
c0014947:	90                   	nop
c0014948:	83 c4 1c             	add    esp,0x1c
c001494b:	c3                   	ret    

c001494c <ip_reass_remove_oldest_datagram>:
c001494c:	83 ec 2c             	sub    esp,0x2c
c001494f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014957:	90                   	nop
c0014958:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014960:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014970:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014975:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014979:	e9 9a 00 00 00       	jmp    c0014a18 <ip_reass_remove_oldest_datagram+0xcc>
c001497e:	66 90                	xchg   ax,ax
c0014980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014984:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001498b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001498e:	39 c2                	cmp    edx,eax
c0014990:	75 2e                	jne    c00149c0 <ip_reass_remove_oldest_datagram+0x74>
c0014992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014996:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001499d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00149a0:	39 c2                	cmp    edx,eax
c00149a2:	75 1c                	jne    c00149c0 <ip_reass_remove_oldest_datagram+0x74>
c00149a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149a8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00149ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149af:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149b3:	0f b7 d2             	movzx  edx,dx
c00149b6:	0f b7 c0             	movzx  eax,ax
c00149b9:	39 c2                	cmp    edx,eax
c00149bb:	74 3b                	je     c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149bd:	8d 76 00             	lea    esi,[esi+0x0]
c00149c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00149c5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149ca:	75 0c                	jne    c00149d8 <ip_reass_remove_oldest_datagram+0x8c>
c00149cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149d4:	eb 22                	jmp    c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149d6:	66 90                	xchg   ax,ax
c00149d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149dc:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c00149df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149e3:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00149e6:	0f b6 d2             	movzx  edx,dl
c00149e9:	0f b6 c0             	movzx  eax,al
c00149ec:	39 c2                	cmp    edx,eax
c00149ee:	77 08                	ja     c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00149fe:	85 c0                	test   eax,eax
c0014a00:	74 0a                	je     c0014a0c <ip_reass_remove_oldest_datagram+0xc0>
c0014a02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a0a:	66 90                	xchg   ax,ax
c0014a0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a16:	66 90                	xchg   ax,ax
c0014a18:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014a1d:	0f 85 5d ff ff ff    	jne    c0014980 <ip_reass_remove_oldest_datagram+0x34>
c0014a23:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a28:	74 22                	je     c0014a4c <ip_reass_remove_oldest_datagram+0x100>
c0014a2a:	83 ec 08             	sub    esp,0x8
c0014a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a35:	e8 86 fc ff ff       	call   c00146c0 <ip_reass_free_complete_datagram>
c0014a3a:	83 c4 10             	add    esp,0x10
c0014a3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a45:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014a49:	8d 76 00             	lea    esi,[esi+0x0]
c0014a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a50:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014a54:	7d 0e                	jge    c0014a64 <ip_reass_remove_oldest_datagram+0x118>
c0014a56:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c0014a5b:	0f 8f f7 fe ff ff    	jg     c0014958 <ip_reass_remove_oldest_datagram+0xc>
c0014a61:	8d 76 00             	lea    esi,[esi+0x0]
c0014a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a68:	83 c4 2c             	add    esp,0x2c
c0014a6b:	c3                   	ret    

c0014a6c <ip_reass_enqueue_new_datagram>:
c0014a6c:	83 ec 1c             	sub    esp,0x1c
c0014a6f:	83 ec 0c             	sub    esp,0xc
c0014a72:	6a 05                	push   0x5
c0014a74:	e8 af 30 ff ff       	call   c0007b28 <memp_malloc>
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014a85:	75 4d                	jne    c0014ad4 <ip_reass_enqueue_new_datagram+0x68>
c0014a87:	83 ec 08             	sub    esp,0x8
c0014a8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a92:	e8 b5 fe ff ff       	call   c001494c <ip_reass_remove_oldest_datagram>
c0014a97:	83 c4 10             	add    esp,0x10
c0014a9a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014a9e:	7f 14                	jg     c0014ab4 <ip_reass_enqueue_new_datagram+0x48>
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	6a 05                	push   0x5
c0014aa5:	e8 7e 30 ff ff       	call   c0007b28 <memp_malloc>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ab4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ab9:	75 19                	jne    c0014ad4 <ip_reass_enqueue_new_datagram+0x68>
c0014abb:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014ac1:	83 c0 01             	add    eax,0x1
c0014ac4:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014aca:	b8 00 00 00 00       	mov    eax,0x0
c0014acf:	eb 53                	jmp    c0014b24 <ip_reass_enqueue_new_datagram+0xb8>
c0014ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ad4:	83 ec 04             	sub    esp,0x4
c0014ad7:	6a 20                	push   0x20
c0014ad9:	6a 00                	push   0x0
c0014adb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014adf:	e8 0c ba fe ff       	call   c00004f0 <memset>
c0014ae4:	83 c4 10             	add    esp,0x10
c0014ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014aeb:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014aef:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014af5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014af9:	89 10                	mov    DWORD PTR [eax],edx
c0014afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014aff:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014b04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b08:	83 c0 08             	add    eax,0x8
c0014b0b:	83 ec 04             	sub    esp,0x4
c0014b0e:	6a 14                	push   0x14
c0014b10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014b14:	50                   	push   eax
c0014b15:	e8 60 b8 fe ff       	call   c000037a <memcpy>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b21:	8d 76 00             	lea    esi,[esi+0x0]
c0014b24:	83 c4 1c             	add    esp,0x1c
c0014b27:	c3                   	ret    

c0014b28 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014b28:	53                   	push   ebx
c0014b29:	83 ec 28             	sub    esp,0x28
c0014b2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b34:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014b3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b4b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014b4f:	0f b7 c0             	movzx  eax,ax
c0014b52:	83 ec 0c             	sub    esp,0xc
c0014b55:	50                   	push   eax
c0014b56:	e8 c1 c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014b5b:	83 c4 10             	add    esp,0x10
c0014b5e:	89 c3                	mov    ebx,eax
c0014b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b64:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b67:	0f b7 c0             	movzx  eax,ax
c0014b6a:	83 ec 0c             	sub    esp,0xc
c0014b6d:	50                   	push   eax
c0014b6e:	e8 a9 c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014b73:	83 c4 10             	add    esp,0x10
c0014b76:	0f b7 c0             	movzx  eax,ax
c0014b79:	c1 e8 08             	shr    eax,0x8
c0014b7c:	83 e0 0f             	and    eax,0xf
c0014b7f:	c1 e0 02             	shl    eax,0x2
c0014b82:	89 d9                	mov    ecx,ebx
c0014b84:	29 c1                	sub    ecx,eax
c0014b86:	89 c8                	mov    eax,ecx
c0014b88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b91:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b95:	0f b7 c0             	movzx  eax,ax
c0014b98:	83 ec 0c             	sub    esp,0xc
c0014b9b:	50                   	push   eax
c0014b9c:	e8 7b c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ba9:	c1 e0 03             	shl    eax,0x3
c0014bac:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014bb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014bd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bd6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014bdb:	01 d0                	add    eax,edx
c0014bdd:	89 c2                	mov    edx,eax
c0014bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014be3:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0014be7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014beb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bf2:	e9 11 01 00 00       	jmp    c0014d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014bf7:	90                   	nop
c0014bf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c07:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c13:	0f b7 d2             	movzx  edx,dx
c0014c16:	0f b7 c0             	movzx  eax,ax
c0014c19:	39 c2                	cmp    edx,eax
c0014c1b:	73 6f                	jae    c0014c8c <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c25:	89 10                	mov    DWORD PTR [eax],edx
c0014c27:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c2c:	74 4e                	je     c0014c7c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c32:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c3a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014c3e:	0f b7 d2             	movzx  edx,dx
c0014c41:	0f b7 c0             	movzx  eax,ax
c0014c44:	39 c2                	cmp    edx,eax
c0014c46:	0f 82 bc 02 00 00    	jb     c0014f08 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c50:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c58:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c5c:	0f b7 d2             	movzx  edx,dx
c0014c5f:	0f b7 c0             	movzx  eax,ax
c0014c62:	39 c2                	cmp    edx,eax
c0014c64:	0f 87 9e 02 00 00    	ja     c0014f08 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014c6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c72:	89 10                	mov    DWORD PTR [eax],edx
c0014c74:	e9 9b 00 00 00       	jmp    c0014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014c79:	8d 76 00             	lea    esi,[esi+0x0]
c0014c7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c80:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014c87:	e9 88 00 00 00       	jmp    c0014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c90:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c98:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c9c:	0f b7 d2             	movzx  edx,dx
c0014c9f:	0f b7 c0             	movzx  eax,ax
c0014ca2:	39 c2                	cmp    edx,eax
c0014ca4:	0f 84 62 02 00 00    	je     c0014f0c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014caa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cae:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cb6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014cba:	0f b7 d2             	movzx  edx,dx
c0014cbd:	0f b7 c0             	movzx  eax,ax
c0014cc0:	39 c2                	cmp    edx,eax
c0014cc2:	0f 82 48 02 00 00    	jb     c0014f10 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014cc8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ccd:	74 25                	je     c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014ccf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cd3:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cdb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014cdf:	0f b7 d2             	movzx  edx,dx
c0014ce2:	0f b7 c0             	movzx  eax,ax
c0014ce5:	39 c2                	cmp    edx,eax
c0014ce7:	74 0b                	je     c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014ce9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d06:	66 90                	xchg   ax,ax
c0014d08:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d0d:	0f 85 e5 fe ff ff    	jne    c0014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014d13:	90                   	nop
c0014d14:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d19:	0f 85 95 00 00 00    	jne    c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014d24:	74 62                	je     c0014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014d26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d2a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d32:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d36:	0f b7 d2             	movzx  edx,dx
c0014d39:	0f b7 c0             	movzx  eax,ax
c0014d3c:	39 c2                	cmp    edx,eax
c0014d3e:	76 18                	jbe    c0014d58 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014d40:	83 ec 08             	sub    esp,0x8
c0014d43:	68 9b 11 03 c0       	push   0xc003119b
c0014d48:	68 26 fe 02 c0       	push   0xc002fe26
c0014d4d:	e8 ae b0 00 00       	call   c001fe00 <CPrintf>
c0014d52:	83 c4 10             	add    esp,0x10
c0014d55:	8d 76 00             	lea    esi,[esi+0x0]
c0014d58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014d60:	89 10                	mov    DWORD PTR [eax],edx
c0014d62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d66:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d72:	0f b7 d2             	movzx  edx,dx
c0014d75:	0f b7 c0             	movzx  eax,ax
c0014d78:	39 c2                	cmp    edx,eax
c0014d7a:	74 38                	je     c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d7c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d84:	eb 2e                	jmp    c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d86:	66 90                	xchg   ax,ax
c0014d88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d8f:	85 c0                	test   eax,eax
c0014d91:	74 15                	je     c0014da8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014d93:	83 ec 08             	sub    esp,0x8
c0014d96:	68 dc 11 03 c0       	push   0xc00311dc
c0014d9b:	68 26 fe 02 c0       	push   0xc002fe26
c0014da0:	e8 5b b0 00 00       	call   c001fe00 <CPrintf>
c0014da5:	83 c4 10             	add    esp,0x10
c0014da8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014db0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014db3:	90                   	nop
c0014db4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014dbb:	0f b6 c0             	movzx  eax,al
c0014dbe:	83 e0 01             	and    eax,0x1
c0014dc1:	0f 84 39 01 00 00    	je     c0014f00 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014dc7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014dcc:	0f 84 26 01 00 00    	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ddc:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014de0:	0f b7 c0             	movzx  eax,ax
c0014de3:	85 c0                	test   eax,eax
c0014de5:	74 0d                	je     c0014df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014de7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014def:	e9 04 01 00 00       	jmp    c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014df4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014df8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e06:	eb 44                	jmp    c0014e4c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014e08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e17:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e1f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e23:	0f b7 d2             	movzx  edx,dx
c0014e26:	0f b7 c0             	movzx  eax,ax
c0014e29:	39 c2                	cmp    edx,eax
c0014e2b:	74 0b                	je     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014e2d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014e35:	eb 1d                	jmp    c0014e54 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014e37:	90                   	nop
c0014e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e4a:	66 90                	xchg   ax,ax
c0014e4c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e51:	75 b5                	jne    c0014e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014e53:	90                   	nop
c0014e54:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e59:	0f 84 99 00 00 00    	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e66:	85 c0                	test   eax,eax
c0014e68:	75 16                	jne    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014e6a:	83 ec 08             	sub    esp,0x8
c0014e6d:	68 b9 11 03 c0       	push   0xc00311b9
c0014e72:	68 26 fe 02 c0       	push   0xc002fe26
c0014e77:	e8 84 af 00 00       	call   c001fe00 <CPrintf>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	90                   	nop
c0014e80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e8a:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014e8e:	75 18                	jne    c0014ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014e90:	83 ec 08             	sub    esp,0x8
c0014e93:	68 b9 11 03 c0       	push   0xc00311b9
c0014e98:	68 26 fe 02 c0       	push   0xc002fe26
c0014e9d:	e8 5e af 00 00       	call   c001fe00 <CPrintf>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eae:	85 c0                	test   eax,eax
c0014eb0:	74 16                	je     c0014ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014eb2:	83 ec 08             	sub    esp,0x8
c0014eb5:	68 14 12 03 c0       	push   0xc0031214
c0014eba:	68 26 fe 02 c0       	push   0xc002fe26
c0014ebf:	e8 3c af 00 00       	call   c001fe00 <CPrintf>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	90                   	nop
c0014ec8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ecc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ed0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ed4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ed7:	0f b7 d2             	movzx  edx,dx
c0014eda:	0f b7 c0             	movzx  eax,ax
c0014edd:	39 c2                	cmp    edx,eax
c0014edf:	74 17                	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014ee1:	83 ec 08             	sub    esp,0x8
c0014ee4:	68 38 12 03 c0       	push   0xc0031238
c0014ee9:	68 26 fe 02 c0       	push   0xc002fe26
c0014eee:	e8 0d af 00 00       	call   c001fe00 <CPrintf>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	66 90                	xchg   ax,ax
c0014ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014efc:	eb 52                	jmp    c0014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014efe:	66 90                	xchg   ax,ax
c0014f00:	b8 00 00 00 00       	mov    eax,0x0
c0014f05:	eb 49                	jmp    c0014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014f07:	90                   	nop
c0014f08:	90                   	nop
c0014f09:	eb 09                	jmp    c0014f14 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014f0b:	90                   	nop
c0014f0c:	90                   	nop
c0014f0d:	eb 05                	jmp    c0014f14 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014f0f:	90                   	nop
c0014f10:	90                   	nop
c0014f11:	8d 76 00             	lea    esi,[esi+0x0]
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014f1b:	e8 d0 3d ff ff       	call   c0008cf0 <pbuf_clen>
c0014f20:	83 c4 10             	add    esp,0x10
c0014f23:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014f2a:	0f b6 c0             	movzx  eax,al
c0014f2d:	89 d3                	mov    ebx,edx
c0014f2f:	29 c3                	sub    ebx,eax
c0014f31:	89 d8                	mov    eax,ebx
c0014f33:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f39:	83 ec 0c             	sub    esp,0xc
c0014f3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014f40:	e8 cf 35 ff ff       	call   c0008514 <pbuf_free>
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	b8 00 00 00 00       	mov    eax,0x0
c0014f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f50:	83 c4 28             	add    esp,0x28
c0014f53:	5b                   	pop    ebx
c0014f54:	c3                   	ret    
c0014f55:	8d 76 00             	lea    esi,[esi+0x0]

c0014f58 <ip_reass>:
c0014f58:	53                   	push   ebx
c0014f59:	83 ec 28             	sub    esp,0x28
c0014f5c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014f64:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014f6a:	83 c0 01             	add    eax,0x1
c0014f6d:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f85:	0f b7 c0             	movzx  eax,ax
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	50                   	push   eax
c0014f8c:	e8 8b bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	0f b7 c0             	movzx  eax,ax
c0014f97:	c1 e8 08             	shr    eax,0x8
c0014f9a:	0f b7 c0             	movzx  eax,ax
c0014f9d:	83 e0 0f             	and    eax,0xf
c0014fa0:	c1 e0 02             	shl    eax,0x2
c0014fa3:	83 f8 14             	cmp    eax,0x14
c0014fa6:	74 14                	je     c0014fbc <ip_reass+0x64>
c0014fa8:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014fae:	83 c0 01             	add    eax,0x1
c0014fb1:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014fb7:	e9 70 03 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0014fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fc0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014fc4:	0f b7 c0             	movzx  eax,ax
c0014fc7:	83 ec 0c             	sub    esp,0xc
c0014fca:	50                   	push   eax
c0014fcb:	e8 4c bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fd0:	83 c4 10             	add    esp,0x10
c0014fd3:	25 ff 1f 00 00       	and    eax,0x1fff
c0014fd8:	c1 e0 03             	shl    eax,0x3
c0014fdb:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014fe8:	0f b7 c0             	movzx  eax,ax
c0014feb:	83 ec 0c             	sub    esp,0xc
c0014fee:	50                   	push   eax
c0014fef:	e8 28 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014ff4:	83 c4 10             	add    esp,0x10
c0014ff7:	89 c3                	mov    ebx,eax
c0014ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015000:	0f b7 c0             	movzx  eax,ax
c0015003:	83 ec 0c             	sub    esp,0xc
c0015006:	50                   	push   eax
c0015007:	e8 10 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001500c:	83 c4 10             	add    esp,0x10
c001500f:	0f b7 c0             	movzx  eax,ax
c0015012:	c1 e8 08             	shr    eax,0x8
c0015015:	83 e0 0f             	and    eax,0xf
c0015018:	c1 e0 02             	shl    eax,0x2
c001501b:	89 d9                	mov    ecx,ebx
c001501d:	29 c1                	sub    ecx,eax
c001501f:	89 c8                	mov    eax,ecx
c0015021:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015026:	83 ec 0c             	sub    esp,0xc
c0015029:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001502d:	e8 be 3c ff ff       	call   c0008cf0 <pbuf_clen>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015039:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001503f:	0f b7 d0             	movzx  edx,ax
c0015042:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015047:	01 d0                	add    eax,edx
c0015049:	83 f8 0a             	cmp    eax,0xa
c001504c:	7e 42                	jle    c0015090 <ip_reass+0x138>
c001504e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015053:	83 ec 08             	sub    esp,0x8
c0015056:	50                   	push   eax
c0015057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001505b:	e8 ec f8 ff ff       	call   c001494c <ip_reass_remove_oldest_datagram>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	85 c0                	test   eax,eax
c0015065:	74 15                	je     c001507c <ip_reass+0x124>
c0015067:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001506d:	0f b7 d0             	movzx  edx,ax
c0015070:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015075:	01 d0                	add    eax,edx
c0015077:	83 f8 0a             	cmp    eax,0xa
c001507a:	7e 14                	jle    c0015090 <ip_reass+0x138>
c001507c:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0015082:	83 c0 01             	add    eax,0x1
c0015085:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c001508b:	e9 9c 02 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0015090:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0015095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015099:	eb 65                	jmp    c0015100 <ip_reass+0x1a8>
c001509b:	90                   	nop
c001509c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150a0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00150a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00150aa:	39 c2                	cmp    edx,eax
c00150ac:	75 3e                	jne    c00150ec <ip_reass+0x194>
c00150ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00150b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150bc:	39 c2                	cmp    edx,eax
c00150be:	75 2c                	jne    c00150ec <ip_reass+0x194>
c00150c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00150c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150cb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00150cf:	0f b7 d2             	movzx  edx,dx
c00150d2:	0f b7 c0             	movzx  eax,ax
c00150d5:	39 c2                	cmp    edx,eax
c00150d7:	75 13                	jne    c00150ec <ip_reass+0x194>
c00150d9:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c00150df:	83 c0 01             	add    eax,0x1
c00150e2:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c00150e8:	eb 1e                	jmp    c0015108 <ip_reass+0x1b0>
c00150ea:	66 90                	xchg   ax,ax
c00150ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00150fe:	66 90                	xchg   ax,ax
c0015100:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015105:	75 95                	jne    c001509c <ip_reass+0x144>
c0015107:	90                   	nop
c0015108:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001510d:	75 25                	jne    c0015134 <ip_reass+0x1dc>
c001510f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015114:	83 ec 08             	sub    esp,0x8
c0015117:	50                   	push   eax
c0015118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001511c:	e8 4b f9 ff ff       	call   c0014a6c <ip_reass_enqueue_new_datagram>
c0015121:	83 c4 10             	add    esp,0x10
c0015124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015128:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001512d:	75 61                	jne    c0015190 <ip_reass+0x238>
c001512f:	e9 f8 01 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0015134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015138:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001513c:	0f b7 c0             	movzx  eax,ax
c001513f:	83 ec 0c             	sub    esp,0xc
c0015142:	50                   	push   eax
c0015143:	e8 d4 ba fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	0f b7 c0             	movzx  eax,ax
c001514e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015153:	75 3b                	jne    c0015190 <ip_reass+0x238>
c0015155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015159:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001515d:	0f b7 c0             	movzx  eax,ax
c0015160:	83 ec 0c             	sub    esp,0xc
c0015163:	50                   	push   eax
c0015164:	e8 b3 ba fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	0f b7 c0             	movzx  eax,ax
c001516f:	25 ff 1f 00 00       	and    eax,0x1fff
c0015174:	74 1a                	je     c0015190 <ip_reass+0x238>
c0015176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001517a:	83 c0 08             	add    eax,0x8
c001517d:	83 ec 04             	sub    esp,0x4
c0015180:	6a 14                	push   0x14
c0015182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015186:	50                   	push   eax
c0015187:	e8 ee b1 fe ff       	call   c000037a <memcpy>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	90                   	nop
c0015190:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0015195:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001519b:	01 d0                	add    eax,edx
c001519d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00151a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151a7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00151ab:	0f b7 c0             	movzx  eax,ax
c00151ae:	83 e0 20             	and    eax,0x20
c00151b1:	75 29                	jne    c00151dc <ip_reass+0x284>
c00151b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151b7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00151ba:	83 c8 01             	or     eax,0x1
c00151bd:	88 c2                	mov    dl,al
c00151bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151c3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00151c6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00151cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151cf:	01 d0                	add    eax,edx
c00151d1:	89 c2                	mov    edx,eax
c00151d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151d7:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c00151db:	90                   	nop
c00151dc:	83 ec 08             	sub    esp,0x8
c00151df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00151e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151e7:	e8 3c f9 ff ff       	call   c0014b28 <ip_reass_chain_frag_into_datagram_and_validate>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	85 c0                	test   eax,eax
c00151f1:	0f 84 2d 01 00 00    	je     c0015324 <ip_reass+0x3cc>
c00151f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151fb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151fe:	83 c0 14             	add    eax,0x14
c0015201:	89 c2                	mov    edx,eax
c0015203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015207:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c001520b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001520f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015215:	8b 00                	mov    eax,DWORD PTR [eax]
c0015217:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001521b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001521f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015225:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001522d:	83 c0 08             	add    eax,0x8
c0015230:	83 ec 04             	sub    esp,0x4
c0015233:	6a 14                	push   0x14
c0015235:	50                   	push   eax
c0015236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523a:	e8 3b b1 fe ff       	call   c000037a <memcpy>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015246:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015249:	0f b7 c0             	movzx  eax,ax
c001524c:	83 ec 0c             	sub    esp,0xc
c001524f:	50                   	push   eax
c0015250:	e8 c7 b9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	89 c2                	mov    edx,eax
c001525a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001525e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015266:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001526c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015270:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015276:	83 ec 08             	sub    esp,0x8
c0015279:	6a 14                	push   0x14
c001527b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001527f:	e8 cc e4 ff ff       	call   c0013750 <inet_chksum>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	89 c2                	mov    edx,eax
c0015289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001528d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015295:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015298:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001529c:	eb 3e                	jmp    c00152dc <ip_reass+0x384>
c001529e:	66 90                	xchg   ax,ax
c00152a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00152a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ab:	83 ec 08             	sub    esp,0x8
c00152ae:	6a ec                	push   0xffffffec
c00152b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00152b4:	e8 bb 30 ff ff       	call   c0008374 <pbuf_header>
c00152b9:	83 c4 10             	add    esp,0x10
c00152bc:	83 ec 08             	sub    esp,0x8
c00152bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152c7:	e8 8c 3a ff ff       	call   c0008d58 <pbuf_cat>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152d9:	8d 76 00             	lea    esi,[esi+0x0]
c00152dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00152e1:	75 bd                	jne    c00152a0 <ip_reass+0x348>
c00152e3:	83 ec 08             	sub    esp,0x8
c00152e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152ee:	e8 71 f3 ff ff       	call   c0014664 <ip_reass_dequeue_datagram>
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	83 ec 0c             	sub    esp,0xc
c00152f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152fd:	e8 ee 39 ff ff       	call   c0008cf0 <pbuf_clen>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001530c:	0f b6 c0             	movzx  eax,al
c001530f:	89 d3                	mov    ebx,edx
c0015311:	29 c3                	sub    ebx,eax
c0015313:	89 d8                	mov    eax,ebx
c0015315:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c001531b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001531f:	eb 2f                	jmp    c0015350 <ip_reass+0x3f8>
c0015321:	8d 76 00             	lea    esi,[esi+0x0]
c0015324:	b8 00 00 00 00       	mov    eax,0x0
c0015329:	eb 25                	jmp    c0015350 <ip_reass+0x3f8>
c001532b:	90                   	nop
c001532c:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c0015332:	83 c0 01             	add    eax,0x1
c0015335:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c001533b:	83 ec 0c             	sub    esp,0xc
c001533e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015342:	e8 cd 31 ff ff       	call   c0008514 <pbuf_free>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	b8 00 00 00 00       	mov    eax,0x0
c001534f:	90                   	nop
c0015350:	83 c4 28             	add    esp,0x28
c0015353:	5b                   	pop    ebx
c0015354:	c3                   	ret    
c0015355:	8d 76 00             	lea    esi,[esi+0x0]

c0015358 <ip_frag_alloc_pbuf_custom_ref>:
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	83 ec 0c             	sub    esp,0xc
c001535e:	6a 06                	push   0x6
c0015360:	e8 c3 27 ff ff       	call   c0007b28 <memp_malloc>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	83 c4 0c             	add    esp,0xc
c001536b:	c3                   	ret    

c001536c <ip_frag_free_pbuf_custom_ref>:
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015374:	75 16                	jne    c001538c <ip_frag_free_pbuf_custom_ref+0x20>
c0015376:	83 ec 08             	sub    esp,0x8
c0015379:	68 56 02 03 c0       	push   0xc0030256
c001537e:	68 26 fe 02 c0       	push   0xc002fe26
c0015383:	e8 78 aa 00 00       	call   c001fe00 <CPrintf>
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	90                   	nop
c001538c:	83 ec 08             	sub    esp,0x8
c001538f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015393:	6a 06                	push   0x6
c0015395:	e8 ba 28 ff ff       	call   c0007c54 <memp_free>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	90                   	nop
c001539e:	83 c4 0c             	add    esp,0xc
c00153a1:	c3                   	ret    
c00153a2:	66 90                	xchg   ax,ax

c00153a4 <ipfrag_free_pbuf_custom>:
c00153a4:	83 ec 1c             	sub    esp,0x1c
c00153a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153b4:	75 16                	jne    c00153cc <ipfrag_free_pbuf_custom+0x28>
c00153b6:	83 ec 08             	sub    esp,0x8
c00153b9:	68 c6 11 03 c0       	push   0xc00311c6
c00153be:	68 26 fe 02 c0       	push   0xc002fe26
c00153c3:	e8 38 aa 00 00       	call   c001fe00 <CPrintf>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	90                   	nop
c00153cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00153d4:	74 16                	je     c00153ec <ipfrag_free_pbuf_custom+0x48>
c00153d6:	83 ec 08             	sub    esp,0x8
c00153d9:	68 d2 11 03 c0       	push   0xc00311d2
c00153de:	68 26 fe 02 c0       	push   0xc002fe26
c00153e3:	e8 18 aa 00 00       	call   c001fe00 <CPrintf>
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	90                   	nop
c00153ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153f3:	85 c0                	test   eax,eax
c00153f5:	74 15                	je     c001540c <ipfrag_free_pbuf_custom+0x68>
c00153f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153fb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	50                   	push   eax
c0015402:	e8 0d 31 ff ff       	call   c0008514 <pbuf_free>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	66 90                	xchg   ax,ax
c001540c:	83 ec 0c             	sub    esp,0xc
c001540f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015413:	e8 54 ff ff ff       	call   c001536c <ip_frag_free_pbuf_custom_ref>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	90                   	nop
c001541c:	83 c4 1c             	add    esp,0x1c
c001541f:	c3                   	ret    

c0015420 <ip_frag>:
c0015420:	53                   	push   ebx
c0015421:	83 ec 38             	sub    esp,0x38
c0015424:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015428:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001542b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015430:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c0015437:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c001543e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001544d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015455:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015459:	0f b7 c0             	movzx  eax,ax
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	50                   	push   eax
c0015460:	e8 b7 b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001546d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015471:	25 ff 1f 00 00       	and    eax,0x1fff
c0015476:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001547b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001547f:	25 00 20 00 00       	and    eax,0x2000
c0015484:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015489:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001548d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015490:	83 e8 14             	sub    eax,0x14
c0015493:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015498:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001549d:	83 e8 14             	sub    eax,0x14
c00154a0:	8d 50 07             	lea    edx,[eax+0x7]
c00154a3:	0f 48 c2             	cmovs  eax,edx
c00154a6:	c1 f8 03             	sar    eax,0x3
c00154a9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00154ae:	e9 05 03 00 00       	jmp    c00157b8 <ip_frag+0x398>
c00154b3:	90                   	nop
c00154b4:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00154b9:	8d 50 ed             	lea    edx,[eax-0x13]
c00154bc:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00154c1:	39 c2                	cmp    edx,eax
c00154c3:	0f 9f c0             	setg   al
c00154c6:	0f b6 c0             	movzx  eax,al
c00154c9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00154ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00154d2:	25 ff 1f 00 00       	and    eax,0x1fff
c00154d7:	89 c2                	mov    edx,eax
c00154d9:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00154de:	09 d0                	or     eax,edx
c00154e0:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00154e5:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00154ea:	85 c0                	test   eax,eax
c00154ec:	75 0e                	jne    c00154fc <ip_frag+0xdc>
c00154ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154f2:	80 cc 20             	or     ah,0x20
c00154f5:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00154fa:	66 90                	xchg   ax,ax
c00154fc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015501:	85 c0                	test   eax,eax
c0015503:	75 0b                	jne    c0015510 <ip_frag+0xf0>
c0015505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015509:	c1 e0 03             	shl    eax,0x3
c001550c:	eb 0a                	jmp    c0015518 <ip_frag+0xf8>
c001550e:	66 90                	xchg   ax,ax
c0015510:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015515:	8d 76 00             	lea    esi,[esi+0x0]
c0015518:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001551d:	83 ec 04             	sub    esp,0x4
c0015520:	6a 00                	push   0x0
c0015522:	6a 14                	push   0x14
c0015524:	6a 02                	push   0x2
c0015526:	e8 c5 31 ff ff       	call   c00086f0 <pbuf_alloc>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015532:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015537:	75 07                	jne    c0015540 <ip_frag+0x120>
c0015539:	b0 ff                	mov    al,0xff
c001553b:	e9 88 02 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c0015540:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015544:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015548:	0f b7 c0             	movzx  eax,ax
c001554b:	83 f8 13             	cmp    eax,0x13
c001554e:	77 18                	ja     c0015568 <ip_frag+0x148>
c0015550:	83 ec 08             	sub    esp,0x8
c0015553:	68 68 12 03 c0       	push   0xc0031268
c0015558:	68 26 fe 02 c0       	push   0xc002fe26
c001555d:	e8 9e a8 00 00       	call   c001fe00 <CPrintf>
c0015562:	83 c4 10             	add    esp,0x10
c0015565:	8d 76 00             	lea    esi,[esi+0x0]
c0015568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001556c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001556f:	83 ec 04             	sub    esp,0x4
c0015572:	6a 14                	push   0x14
c0015574:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015578:	50                   	push   eax
c0015579:	e8 fc ad fe ff       	call   c000037a <memcpy>
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015588:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001558c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015590:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015593:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015598:	01 c2                	add    edx,eax
c001559a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001559e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00155a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155a5:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00155a9:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00155ae:	89 d1                	mov    ecx,edx
c00155b0:	29 c1                	sub    ecx,eax
c00155b2:	89 c8                	mov    eax,ecx
c00155b4:	89 c2                	mov    edx,eax
c00155b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155ba:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00155be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155c2:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155c7:	e9 18 01 00 00       	jmp    c00156e4 <ip_frag+0x2c4>
c00155cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155d0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00155d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00155d8:	0f b7 d8             	movzx  ebx,ax
c00155db:	0f b7 ca             	movzx  ecx,dx
c00155de:	39 cb                	cmp    ebx,ecx
c00155e0:	76 02                	jbe    c00155e4 <ip_frag+0x1c4>
c00155e2:	89 d0                	mov    eax,edx
c00155e4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00155e9:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00155ee:	85 c0                	test   eax,eax
c00155f0:	75 12                	jne    c0015604 <ip_frag+0x1e4>
c00155f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00155fc:	e9 e3 00 00 00       	jmp    c00156e4 <ip_frag+0x2c4>
c0015601:	8d 76 00             	lea    esi,[esi+0x0]
c0015604:	e8 4f fd ff ff       	call   c0015358 <ip_frag_alloc_pbuf_custom_ref>
c0015609:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001560d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015612:	75 18                	jne    c001562c <ip_frag+0x20c>
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001561b:	e8 f4 2e ff ff       	call   c0008514 <pbuf_free>
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	b0 ff                	mov    al,0xff
c0015625:	e9 9e 01 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c001562a:	66 90                	xchg   ax,ax
c001562c:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c0015631:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015635:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001563c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015641:	83 ec 08             	sub    esp,0x8
c0015644:	53                   	push   ebx
c0015645:	51                   	push   ecx
c0015646:	52                   	push   edx
c0015647:	6a 02                	push   0x2
c0015649:	50                   	push   eax
c001564a:	6a 03                	push   0x3
c001564c:	e8 ff 2b ff ff       	call   c0008250 <pbuf_alloced_custom>
c0015651:	83 c4 20             	add    esp,0x20
c0015654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001565d:	75 25                	jne    c0015684 <ip_frag+0x264>
c001565f:	83 ec 0c             	sub    esp,0xc
c0015662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015666:	e8 01 fd ff ff       	call   c001536c <ip_frag_free_pbuf_custom_ref>
c001566b:	83 c4 10             	add    esp,0x10
c001566e:	83 ec 0c             	sub    esp,0xc
c0015671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015675:	e8 9a 2e ff ff       	call   c0008514 <pbuf_free>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	b0 ff                	mov    al,0xff
c001567f:	e9 44 01 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568b:	e8 94 36 ff ff       	call   c0008d24 <pbuf_ref>
c0015690:	83 c4 10             	add    esp,0x10
c0015693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015697:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001569b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001569e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156a2:	c7 40 10 a4 53 01 c0 	mov    DWORD PTR [eax+0x10],0xc00153a4
c00156a9:	83 ec 08             	sub    esp,0x8
c00156ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00156b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b4:	e8 9f 36 ff ff       	call   c0008d58 <pbuf_cat>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156c0:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00156c5:	89 d3                	mov    ebx,edx
c00156c7:	29 c3                	sub    ebx,eax
c00156c9:	89 d8                	mov    eax,ebx
c00156cb:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00156d0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00156d5:	85 c0                	test   eax,eax
c00156d7:	74 0b                	je     c00156e4 <ip_frag+0x2c4>
c00156d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00156dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00156e3:	90                   	nop
c00156e4:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00156e9:	85 c0                	test   eax,eax
c00156eb:	0f 85 db fe ff ff    	jne    c00155cc <ip_frag+0x1ac>
c00156f1:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00156f6:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00156fb:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	50                   	push   eax
c0015704:	e8 13 b5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	89 c2                	mov    edx,eax
c001570e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015712:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0015716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571a:	83 c0 14             	add    eax,0x14
c001571d:	0f b7 c0             	movzx  eax,ax
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	50                   	push   eax
c0015724:	e8 f3 b4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	89 c2                	mov    edx,eax
c001572e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015732:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001573a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015740:	83 ec 08             	sub    esp,0x8
c0015743:	6a 14                	push   0x14
c0015745:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015749:	e8 02 e0 ff ff       	call   c0013750 <inet_chksum>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	89 c2                	mov    edx,eax
c0015753:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015757:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001575b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001575f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015762:	83 ec 04             	sub    esp,0x4
c0015765:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001576d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015771:	ff d0                	call   eax
c0015773:	83 c4 10             	add    esp,0x10
c0015776:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c001577c:	83 c0 01             	add    eax,0x1
c001577f:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c0015785:	83 ec 0c             	sub    esp,0xc
c0015788:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001578c:	e8 83 2d ff ff       	call   c0008514 <pbuf_free>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579d:	89 d1                	mov    ecx,edx
c001579f:	29 c1                	sub    ecx,eax
c00157a1:	89 c8                	mov    eax,ecx
c00157a3:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00157a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00157ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157b0:	01 d0                	add    eax,edx
c00157b2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00157b7:	90                   	nop
c00157b8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00157bd:	85 c0                	test   eax,eax
c00157bf:	0f 85 ef fc ff ff    	jne    c00154b4 <ip_frag+0x94>
c00157c5:	b0 00                	mov    al,0x0
c00157c7:	90                   	nop
c00157c8:	83 c4 38             	add    esp,0x38
c00157cb:	5b                   	pop    ebx
c00157cc:	c3                   	ret    
c00157cd:	90                   	nop

c00157ce <Computer::close(int, int, void*)>:
c00157ce:	53                   	push   ebx
c00157cf:	83 ec 08             	sub    esp,0x8
c00157d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157d6:	e8 b7 a4 00 00       	call   c001fc92 <KeExecuteAtexit()>
c00157db:	83 ec 0c             	sub    esp,0xc
c00157de:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00157e4:	50                   	push   eax
c00157e5:	e8 5e 60 00 00       	call   c001b848 <Device::closeAll()>
c00157ea:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00157f0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00157f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157f6:	51                   	push   ecx
c00157f7:	68 0f 27 00 00       	push   0x270f
c00157fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015800:	53                   	push   ebx
c0015801:	50                   	push   eax
c0015802:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015805:	83 c4 14             	add    esp,0x14
c0015808:	68 88 12 03 c0       	push   0xc0031288
c001580d:	e8 c0 ac 00 00       	call   c00204d2 <KePanic(char const*)>
c0015812:	83 c4 18             	add    esp,0x18
c0015815:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001581a:	5b                   	pop    ebx
c001581b:	c3                   	ret    

c001581c <Krnl::firstTask()>:
c001581c:	53                   	push   ebx
c001581d:	83 ec 14             	sub    esp,0x14
c0015820:	fb                   	sti    
c0015821:	68 9e 12 03 c0       	push   0xc003129e
c0015826:	e8 46 a5 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001582b:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0015832:	e8 dd 0e 00 00       	call   c0016714 <malloc>
c0015837:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001583e:	89 c3                	mov    ebx,eax
c0015840:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0015845:	50                   	push   eax
c0015846:	68 b7 12 03 c0       	push   0xc00312b7
c001584b:	6a 01                	push   0x1
c001584d:	53                   	push   ebx
c001584e:	e8 6d f8 00 00       	call   c00250c0 <Process::Process(bool, char const*, Process*, char**)>
c0015853:	83 c4 20             	add    esp,0x20
c0015856:	68 ff 00 00 00       	push   0xff
c001585b:	6a 00                	push   0x0
c001585d:	68 73 60 01 c0       	push   0xc0016073
c0015862:	53                   	push   ebx
c0015863:	e8 80 fa 00 00       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c0015868:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c001586e:	6a 7a                	push   0x7a
c0015870:	6a 00                	push   0x0
c0015872:	68 a0 5b 02 c0       	push   0xc0025ba0
c0015877:	52                   	push   edx
c0015878:	e8 6b fa 00 00       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c001587d:	83 c4 14             	add    esp,0x14
c0015880:	68 b4 13 03 c0       	push   0xc00313b4
c0015885:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c001588a:	e8 e2 a4 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001588f:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015896:	e8 ee ad 00 00       	call   c0020689 <KeInitRand()>
c001589b:	e8 97 06 01 00       	call   c0025f37 <Vm::initialise8086()>
c00158a0:	e8 87 4b 00 00       	call   c001a42c <Fs::initVFS()>
c00158a5:	c7 04 24 c4 12 03 c0 	mov    DWORD PTR [esp],0xc00312c4
c00158ac:	e8 c0 a4 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c00158b1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00158b6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00158bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00158be:	6a 00                	push   0x0
c00158c0:	6a 00                	push   0x0
c00158c2:	6a 00                	push   0x0
c00158c4:	50                   	push   eax
c00158c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00158c8:	83 c4 14             	add    esp,0x14
c00158cb:	68 b4 13 03 c0       	push   0xc00313b4
c00158d0:	e8 9c a4 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c00158d5:	e8 ec 42 00 00       	call   c0019bc6 <KeInitialiseSymlinks()>
c00158da:	e8 3b aa 00 00       	call   c002031a <KeLoadSystemEnv()>
c00158df:	e8 b3 ac 00 00       	call   c0020597 <KeSetupPowerManager()>
c00158e4:	83 c4 0c             	add    esp,0xc
c00158e7:	6a 3a                	push   0x3a
c00158e9:	68 de 12 03 c0       	push   0xc00312de
c00158ee:	68 e7 12 03 c0       	push   0xc00312e7
c00158f3:	e8 61 d9 00 00       	call   c0023259 <Reg::readIntWithDefault(char*, char*, int)>
c00158f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00158fb:	e8 58 57 00 00       	call   c001b058 <User::loadClockSettings(int)>
c0015900:	c7 04 24 d8 13 03 c0 	mov    DWORD PTR [esp],0xc00313d8
c0015907:	e8 65 a4 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001590c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015911:	59                   	pop    ecx
c0015912:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0015918:	53                   	push   ebx
c0015919:	e8 de 5d 00 00       	call   c001b6fc <Device::loadDriversForAll()>
c001591e:	e8 a1 16 ff ff       	call   c0006fc4 <lwip_init>
c0015923:	c7 04 24 ef 12 03 c0 	mov    DWORD PTR [esp],0xc00312ef
c001592a:	e8 42 a4 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001592f:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c0015935:	58                   	pop    eax
c0015936:	5a                   	pop    edx
c0015937:	6a 01                	push   0x1
c0015939:	68 00 13 03 c0       	push   0xc0031300
c001593e:	e8 60 f1 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c0015943:	59                   	pop    ecx
c0015944:	5a                   	pop    edx
c0015945:	53                   	push   ebx
c0015946:	50                   	push   eax
c0015947:	e8 b8 f3 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	83 ec 0c             	sub    esp,0xc
c0015952:	6a 02                	push   0x2
c0015954:	e8 97 fc 00 00       	call   c00255f0 <blockTask(TaskState)>
c0015959:	83 c4 10             	add    esp,0x10
c001595c:	eb f1                	jmp    c001594f <Krnl::firstTask()+0x133>

c001595e <Computer::Computer()>:
c001595e:	83 ec 0c             	sub    esp,0xc
c0015961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015965:	83 ec 08             	sub    esp,0x8
c0015968:	68 1c 13 03 c0       	push   0xc003131c
c001596d:	50                   	push   eax
c001596e:	e8 cf 5d 00 00       	call   c001b742 <Device::Device(char const*)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	ba 24 14 03 c0       	mov    edx,0xc0031424
c001597b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597f:	89 10                	mov    DWORD PTR [eax],edx
c0015981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015985:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001598f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015993:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c001599d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00159a7:	83 ca 04             	or     edx,0x4
c00159aa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00159b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159ba:	0f b6 d0             	movzx  edx,al
c00159bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c1:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00159c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159d2:	0f b6 d0             	movzx  edx,al
c00159d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00159de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159e8:	8d 50 01             	lea    edx,[eax+0x1]
c00159eb:	88 d1                	mov    cl,dl
c00159ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159f1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00159f7:	0f b6 d0             	movzx  edx,al
c00159fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fe:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0015a02:	83 e1 3f             	and    ecx,0x3f
c0015a05:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015a09:	90                   	nop
c0015a0a:	83 c4 0c             	add    esp,0xc
c0015a0d:	c3                   	ret    

c0015a0e <Computer::setBootMessage(char const*)>:
c0015a0e:	c3                   	ret    
c0015a0f:	90                   	nop

c0015a10 <Computer::detectFeatures()>:
c0015a10:	55                   	push   ebp
c0015a11:	57                   	push   edi
c0015a12:	56                   	push   esi
c0015a13:	53                   	push   ebx
c0015a14:	83 ec 1c             	sub    esp,0x1c
c0015a17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015a1b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015a21:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0015a27:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015a2d:	e8 c7 a7 fe ff       	call   c00001f9 <detectCPUID>
c0015a32:	31 d2                	xor    edx,edx
c0015a34:	85 c0                	test   eax,eax
c0015a36:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a3c:	0f 95 c2             	setne  dl
c0015a3f:	d1 e2                	shl    edx,1
c0015a41:	83 e0 fd             	and    eax,0xfffffffd
c0015a44:	09 d0                	or     eax,edx
c0015a46:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a4c:	a8 02                	test   al,0x2
c0015a4e:	75 51                	jne    c0015aa1 <Computer::detectFeatures()+0x91>
c0015a50:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c0015a57:	74 0f                	je     c0015a68 <Computer::detectFeatures()+0x58>
c0015a59:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a5f:	83 e0 fb             	and    eax,0xfffffffb
c0015a62:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a68:	e8 e9 8b 01 00       	call   c002e656 <x87Detect>
c0015a6d:	83 e0 01             	and    eax,0x1
c0015a70:	c1 e0 04             	shl    eax,0x4
c0015a73:	89 c2                	mov    edx,eax
c0015a75:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a7b:	83 e0 ef             	and    eax,0xffffffef
c0015a7e:	09 d0                	or     eax,edx
c0015a80:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a86:	a8 10                	test   al,0x10
c0015a88:	88 c2                	mov    dl,al
c0015a8a:	0f 85 33 01 00 00    	jne    c0015bc3 <Computer::detectFeatures()+0x1b3>
c0015a90:	80 e2 80             	and    dl,0x80
c0015a93:	0f 85 4c 01 00 00    	jne    c0015be5 <Computer::detectFeatures()+0x1d5>
c0015a99:	83 c4 1c             	add    esp,0x1c
c0015a9c:	5b                   	pop    ebx
c0015a9d:	5e                   	pop    esi
c0015a9e:	5f                   	pop    edi
c0015a9f:	5d                   	pop    ebp
c0015aa0:	c3                   	ret    
c0015aa1:	83 ec 0c             	sub    esp,0xc
c0015aa4:	6a 20                	push   0x20
c0015aa6:	e8 ff 96 00 00       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c0015aab:	83 e0 01             	and    eax,0x1
c0015aae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015ab5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015abb:	83 e0 f7             	and    eax,0xfffffff7
c0015abe:	09 d0                	or     eax,edx
c0015ac0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015ac6:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015acd:	e8 d8 96 00 00       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c0015ad2:	89 c2                	mov    edx,eax
c0015ad4:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015ada:	83 e2 01             	and    edx,0x1
c0015add:	83 e0 fe             	and    eax,0xfffffffe
c0015ae0:	09 d0                	or     eax,edx
c0015ae2:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015ae8:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015aef:	e8 b6 96 00 00       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c0015af4:	89 c2                	mov    edx,eax
c0015af6:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015afc:	c1 e2 07             	shl    edx,0x7
c0015aff:	83 e0 7f             	and    eax,0x7f
c0015b02:	09 d0                	or     eax,edx
c0015b04:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015b0a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015b11:	e8 94 96 00 00       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	83 e0 01             	and    eax,0x1
c0015b1c:	c1 e0 05             	shl    eax,0x5
c0015b1f:	89 c2                	mov    edx,eax
c0015b21:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b27:	83 e0 df             	and    eax,0xffffffdf
c0015b2a:	09 d0                	or     eax,edx
c0015b2c:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c0015b36:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b3c:	0f 84 c9 00 00 00    	je     c0015c0b <Computer::detectFeatures()+0x1fb>
c0015b42:	83 e0 fe             	and    eax,0xfffffffe
c0015b45:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b4b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b51:	89 c2                	mov    edx,eax
c0015b53:	83 e2 09             	and    edx,0x9
c0015b56:	83 fa 01             	cmp    edx,0x1
c0015b59:	75 09                	jne    c0015b64 <Computer::detectFeatures()+0x154>
c0015b5b:	83 e0 fe             	and    eax,0xfffffffe
c0015b5e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b64:	83 ec 0c             	sub    esp,0xc
c0015b67:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015b6b:	50                   	push   eax
c0015b6c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015b70:	55                   	push   ebp
c0015b71:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015b75:	57                   	push   edi
c0015b76:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015b7a:	56                   	push   esi
c0015b7b:	68 00 00 00 80       	push   0x80000000
c0015b80:	e8 a1 95 00 00       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015b85:	83 c4 20             	add    esp,0x20
c0015b88:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015b8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015b93:	0f 86 b7 fe ff ff    	jbe    c0015a50 <Computer::detectFeatures()+0x40>
c0015b99:	83 ec 0c             	sub    esp,0xc
c0015b9c:	50                   	push   eax
c0015b9d:	55                   	push   ebp
c0015b9e:	57                   	push   edi
c0015b9f:	56                   	push   esi
c0015ba0:	68 01 00 00 80       	push   0x80000001
c0015ba5:	e8 7c 95 00 00       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015baa:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015bb0:	83 c4 20             	add    esp,0x20
c0015bb3:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015bb8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015bbe:	e9 8d fe ff ff       	jmp    c0015a50 <Computer::detectFeatures()+0x40>
c0015bc3:	e8 48 8a 01 00       	call   c002e610 <sseDetect>
c0015bc8:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015bce:	83 e2 7f             	and    edx,0x7f
c0015bd1:	c1 e0 07             	shl    eax,0x7
c0015bd4:	09 c2                	or     edx,eax
c0015bd6:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015bdc:	80 e2 80             	and    dl,0x80
c0015bdf:	0f 84 b4 fe ff ff    	je     c0015a99 <Computer::detectFeatures()+0x89>
c0015be5:	e8 b6 86 01 00       	call   c002e2a0 <avxDetect>
c0015bea:	83 e0 01             	and    eax,0x1
c0015bed:	c1 e0 05             	shl    eax,0x5
c0015bf0:	89 c2                	mov    edx,eax
c0015bf2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015bf8:	83 e0 df             	and    eax,0xffffffdf
c0015bfb:	09 d0                	or     eax,edx
c0015bfd:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015c03:	83 c4 1c             	add    esp,0x1c
c0015c06:	5b                   	pop    ebx
c0015c07:	5e                   	pop    esi
c0015c08:	5f                   	pop    edi
c0015c09:	5d                   	pop    ebp
c0015c0a:	c3                   	ret    
c0015c0b:	83 ec 0c             	sub    esp,0xc
c0015c0e:	68 00 02 00 00       	push   0x200
c0015c13:	e8 92 95 00 00       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c0015c18:	83 c4 10             	add    esp,0x10
c0015c1b:	89 c2                	mov    edx,eax
c0015c1d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015c23:	83 e2 01             	and    edx,0x1
c0015c26:	83 e0 fe             	and    eax,0xfffffffe
c0015c29:	09 d0                	or     eax,edx
c0015c2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015c31:	e9 15 ff ff ff       	jmp    c0015b4b <Computer::detectFeatures()+0x13b>

c0015c36 <Computer::displayFeatures()>:
c0015c36:	c3                   	ret    
c0015c37:	90                   	nop

c0015c38 <Computer::rdmsr(unsigned int)>:
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c3f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015c46:	74 0a                	je     c0015c52 <Computer::rdmsr(unsigned int)+0x1a>
c0015c48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c4c:	0f 32                	rdmsr  
c0015c4e:	83 c4 0c             	add    esp,0xc
c0015c51:	c3                   	ret    
c0015c52:	83 ec 0c             	sub    esp,0xc
c0015c55:	68 25 13 03 c0       	push   0xc0031325
c0015c5a:	e8 73 a8 00 00       	call   c00204d2 <KePanic(char const*)>
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	eb e4                	jmp    c0015c48 <Computer::rdmsr(unsigned int)+0x10>

c0015c64 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015c64:	57                   	push   edi
c0015c65:	56                   	push   esi
c0015c66:	83 ec 04             	sub    esp,0x4
c0015c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015c71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015c75:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015c7c:	74 10                	je     c0015c8e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015c7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c82:	89 f0                	mov    eax,esi
c0015c84:	89 fa                	mov    edx,edi
c0015c86:	0f 30                	wrmsr  
c0015c88:	83 c4 04             	add    esp,0x4
c0015c8b:	5e                   	pop    esi
c0015c8c:	5f                   	pop    edi
c0015c8d:	c3                   	ret    
c0015c8e:	83 ec 0c             	sub    esp,0xc
c0015c91:	68 2b 13 03 c0       	push   0xc003132b
c0015c96:	e8 37 a8 00 00       	call   c00204d2 <KePanic(char const*)>
c0015c9b:	83 c4 10             	add    esp,0x10
c0015c9e:	eb de                	jmp    c0015c7e <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015ca0 <Computer::shutdown()>:
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ca9:	6a 00                	push   0x0
c0015cab:	6a 00                	push   0x0
c0015cad:	6a 00                	push   0x0
c0015caf:	50                   	push   eax
c0015cb0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015cb3:	83 c4 1c             	add    esp,0x1c
c0015cb6:	c3                   	ret    
c0015cb7:	90                   	nop

c0015cb8 <Computer::restart()>:
c0015cb8:	83 ec 0c             	sub    esp,0xc
c0015cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cc1:	6a 00                	push   0x0
c0015cc3:	6a 00                	push   0x0
c0015cc5:	6a 01                	push   0x1
c0015cc7:	50                   	push   eax
c0015cc8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ccb:	83 c4 1c             	add    esp,0x1c
c0015cce:	c3                   	ret    
c0015ccf:	90                   	nop

c0015cd0 <Computer::sleep()>:
c0015cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cd4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015cda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015cde:	e9 99 8f 00 00       	jmp    c001ec7c <ACPI::sleep()>
c0015ce3:	90                   	nop

c0015ce4 <Computer::nmiEnabled()>:
c0015ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ce8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop

c0015cf0 <Computer::readCMOS(unsigned char)>:
c0015cf0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015cf4:	31 d2                	xor    edx,edx
c0015cf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cfa:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015d01:	75 02                	jne    c0015d05 <Computer::readCMOS(unsigned char)+0x15>
c0015d03:	b2 80                	mov    dl,0x80
c0015d05:	09 d0                	or     eax,edx
c0015d07:	e6 70                	out    0x70,al
c0015d09:	e4 71                	in     al,0x71
c0015d0b:	c3                   	ret    

c0015d0c <Computer::enableNMI(bool)>:
c0015d0c:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015d1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015d22:	eb cc                	jmp    c0015cf0 <Computer::readCMOS(unsigned char)>

c0015d24 <Computer::open(int, int, void*)>:
c0015d24:	56                   	push   esi
c0015d25:	53                   	push   ebx
c0015d26:	83 ec 10             	sub    esp,0x10
c0015d29:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015d30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d34:	68 31 13 03 c0       	push   0xc0031331
c0015d39:	0f 94 05 40 3f 03 c0 	sete   BYTE PTR ds:0xc0033f40
c0015d40:	e8 2c a0 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c0015d45:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015d4c:	e8 c3 09 00 00       	call   c0016714 <malloc>
c0015d51:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d54:	89 c6                	mov    esi,eax
c0015d56:	e8 95 8a 00 00       	call   c001e7f0 <ACPI::ACPI()>
c0015d5b:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015d61:	58                   	pop    eax
c0015d62:	5a                   	pop    edx
c0015d63:	56                   	push   esi
c0015d64:	53                   	push   ebx
c0015d65:	e8 76 58 00 00       	call   c001b5e0 <Device::addChild(Device*)>
c0015d6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d6d:	e8 9e fc ff ff       	call   c0015a10 <Computer::detectFeatures()>
c0015d72:	59                   	pop    ecx
c0015d73:	5e                   	pop    esi
c0015d74:	6a 01                	push   0x1
c0015d76:	53                   	push   ebx
c0015d77:	e8 90 ff ff ff       	call   c0015d0c <Computer::enableNMI(bool)>
c0015d7c:	c7 04 24 49 13 03 c0 	mov    DWORD PTR [esp],0xc0031349
c0015d83:	e8 e9 9f 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c0015d88:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015d8f:	e8 80 09 00 00       	call   c0016714 <malloc>
c0015d94:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d97:	89 c6                	mov    esi,eax
c0015d99:	e8 c4 94 00 00       	call   c001f262 <CPU::CPU()>
c0015d9e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015da4:	58                   	pop    eax
c0015da5:	5a                   	pop    edx
c0015da6:	56                   	push   esi
c0015da7:	53                   	push   ebx
c0015da8:	e8 33 58 00 00       	call   c001b5e0 <Device::addChild(Device*)>
c0015dad:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015db3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015db7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015db9:	51                   	push   ecx
c0015dba:	6a 00                	push   0x0
c0015dbc:	6a 00                	push   0x0
c0015dbe:	50                   	push   eax
c0015dbf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015dc2:	83 c4 14             	add    esp,0x14
c0015dc5:	68 f8 13 03 c0       	push   0xc00313f8
c0015dca:	e8 a2 9f 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c0015dcf:	e8 aa 13 01 00       	call   c002717e <HalInitialiseCoprocessor()>
c0015dd4:	c7 04 24 63 13 03 c0 	mov    DWORD PTR [esp],0xc0031363
c0015ddb:	e8 91 9f 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c0015de0:	c7 04 24 1c 58 01 c0 	mov    DWORD PTR [esp],0xc001581c
c0015de7:	e8 24 f6 00 00       	call   c0025410 <setupMultitasking(void (*)())>
c0015dec:	83 c4 14             	add    esp,0x14
c0015def:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015df4:	5b                   	pop    ebx
c0015df5:	5e                   	pop    esi
c0015df6:	c3                   	ret    
c0015df7:	90                   	nop

c0015df8 <Computer::disableNMI()>:
c0015df8:	6a 00                	push   0x0
c0015dfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dfe:	50                   	push   eax
c0015dff:	e8 08 ff ff ff       	call   c0015d0c <Computer::enableNMI(bool)>
c0015e04:	5a                   	pop    edx
c0015e05:	59                   	pop    ecx
c0015e06:	c3                   	ret    
c0015e07:	90                   	nop

c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015e08:	53                   	push   ebx
c0015e09:	b2 80                	mov    dl,0x80
c0015e0b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015e0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e17:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015e1e:	74 02                	je     c0015e22 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015e20:	31 d2                	xor    edx,edx
c0015e22:	09 d0                	or     eax,edx
c0015e24:	e6 70                	out    0x70,al
c0015e26:	88 c8                	mov    al,cl
c0015e28:	e6 71                	out    0x71,al
c0015e2a:	5b                   	pop    ebx
c0015e2b:	c3                   	ret    

c0015e2c <Computer::handleNMI()>:
c0015e2c:	56                   	push   esi
c0015e2d:	53                   	push   ebx
c0015e2e:	83 ec 10             	sub    esp,0x10
c0015e31:	e4 92                	in     al,0x92
c0015e33:	89 c6                	mov    esi,eax
c0015e35:	e4 61                	in     al,0x61
c0015e37:	68 7e 13 03 c0       	push   0xc003137e
c0015e3c:	88 c3                	mov    bl,al
c0015e3e:	e8 07 37 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0015e43:	83 c4 10             	add    esp,0x10
c0015e46:	83 e6 10             	and    esi,0x10
c0015e49:	75 10                	jne    c0015e5b <Computer::handleNMI()+0x2f>
c0015e4b:	f6 c3 40             	test   bl,0x40
c0015e4e:	75 20                	jne    c0015e70 <Computer::handleNMI()+0x44>
c0015e50:	80 e3 80             	and    bl,0x80
c0015e53:	75 30                	jne    c0015e85 <Computer::handleNMI()+0x59>
c0015e55:	83 c4 04             	add    esp,0x4
c0015e58:	5b                   	pop    ebx
c0015e59:	5e                   	pop    esi
c0015e5a:	c3                   	ret    
c0015e5b:	83 ec 0c             	sub    esp,0xc
c0015e5e:	68 8f 13 03 c0       	push   0xc003138f
c0015e63:	e8 6a a6 00 00       	call   c00204d2 <KePanic(char const*)>
c0015e68:	83 c4 10             	add    esp,0x10
c0015e6b:	f6 c3 40             	test   bl,0x40
c0015e6e:	74 e0                	je     c0015e50 <Computer::handleNMI()+0x24>
c0015e70:	83 ec 0c             	sub    esp,0xc
c0015e73:	68 9c 13 03 c0       	push   0xc003139c
c0015e78:	e8 55 a6 00 00       	call   c00204d2 <KePanic(char const*)>
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	80 e3 80             	and    bl,0x80
c0015e83:	74 d0                	je     c0015e55 <Computer::handleNMI()+0x29>
c0015e85:	c7 44 24 10 a6 13 03 c0 	mov    DWORD PTR [esp+0x10],0xc00313a6
c0015e8d:	83 c4 04             	add    esp,0x4
c0015e90:	5b                   	pop    ebx
c0015e91:	5e                   	pop    esi
c0015e92:	e9 3b a6 00 00       	jmp    c00204d2 <KePanic(char const*)>
c0015e97:	90                   	nop

c0015e98 <GDTEntry::setBase(unsigned int)>:
c0015e98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ea0:	89 c1                	mov    ecx,eax
c0015ea2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015ea6:	c1 e9 10             	shr    ecx,0x10
c0015ea9:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015eac:	c1 e8 18             	shr    eax,0x18
c0015eaf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015eb2:	c3                   	ret    
c0015eb3:	90                   	nop

c0015eb4 <GDTEntry::setLimit(unsigned int)>:
c0015eb4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015eb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ebc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015ebf:	66 89 01             	mov    WORD PTR [ecx],ax
c0015ec2:	c1 e8 10             	shr    eax,0x10
c0015ec5:	83 e0 0f             	and    eax,0xf
c0015ec8:	83 e2 f0             	and    edx,0xfffffff0
c0015ecb:	09 d0                	or     eax,edx
c0015ecd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015ed0:	c3                   	ret    
c0015ed1:	90                   	nop

c0015ed2 <GDT::GDT()>:
c0015ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ed6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ee0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ee6:	90                   	nop
c0015ee7:	c3                   	ret    

c0015ee8 <GDT::addEntry(GDTEntry)>:
c0015ee8:	53                   	push   ebx
c0015ee9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015eed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ef1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ef5:	8b 02                	mov    eax,DWORD PTR [edx]
c0015ef7:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015efb:	8d 48 01             	lea    ecx,[eax+0x1]
c0015efe:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015f02:	c1 e0 03             	shl    eax,0x3
c0015f05:	89 0a                	mov    DWORD PTR [edx],ecx
c0015f07:	5b                   	pop    ebx
c0015f08:	c3                   	ret    
c0015f09:	90                   	nop

c0015f0a <GDT::getNumberOfEntries()>:
c0015f0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015f10:	c3                   	ret    
c0015f11:	90                   	nop

c0015f12 <GDT::flush()>:
c0015f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f16:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f18:	83 c0 04             	add    eax,0x4
c0015f1b:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015f20:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015f27:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015f2e:	e9 27 a4 fe ff       	jmp    c000035a <loadGDT>
c0015f33:	90                   	nop

c0015f34 <GDT::setup()>:
c0015f34:	57                   	push   edi
c0015f35:	56                   	push   esi
c0015f36:	53                   	push   ebx
c0015f37:	83 ec 30             	sub    esp,0x30
c0015f3a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015f3e:	6a 00                	push   0x0
c0015f40:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015f44:	56                   	push   esi
c0015f45:	e8 4e ff ff ff       	call   c0015e98 <GDTEntry::setBase(unsigned int)>
c0015f4a:	6a 00                	push   0x0
c0015f4c:	56                   	push   esi
c0015f4d:	e8 62 ff ff ff       	call   c0015eb4 <GDTEntry::setLimit(unsigned int)>
c0015f52:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015f5a:	6a 00                	push   0x0
c0015f5c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015f60:	56                   	push   esi
c0015f61:	e8 32 ff ff ff       	call   c0015e98 <GDTEntry::setBase(unsigned int)>
c0015f66:	68 ff ff ff 00       	push   0xffffff
c0015f6b:	56                   	push   esi
c0015f6c:	e8 43 ff ff ff       	call   c0015eb4 <GDTEntry::setLimit(unsigned int)>
c0015f71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015f75:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015f79:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015f7e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015f82:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015f87:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f8b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015f8f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015f93:	89 f8                	mov    eax,edi
c0015f95:	89 fa                	mov    edx,edi
c0015f97:	80 e4 f7             	and    ah,0xf7
c0015f9a:	80 ce 60             	or     dh,0x60
c0015f9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015fa1:	89 c7                	mov    edi,eax
c0015fa3:	80 cc 60             	or     ah,0x60
c0015fa6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015faa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fb2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015fb6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015fba:	83 c4 20             	add    esp,0x20
c0015fbd:	6a 00                	push   0x0
c0015fbf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015fc3:	50                   	push   eax
c0015fc4:	e8 cf fe ff ff       	call   c0015e98 <GDTEntry::setBase(unsigned int)>
c0015fc9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015fcd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015fd1:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015fd5:	83 e0 3f             	and    eax,0x3f
c0015fd8:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015fdc:	6a 00                	push   0x0
c0015fde:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015fe2:	50                   	push   eax
c0015fe3:	e8 b0 fe ff ff       	call   c0015e98 <GDTEntry::setBase(unsigned int)>
c0015fe8:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015fec:	83 e0 3f             	and    eax,0x3f
c0015fef:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015ff3:	83 c4 0c             	add    esp,0xc
c0015ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ffa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ffe:	53                   	push   ebx
c0015fff:	e8 e4 fe ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0016004:	83 c4 0c             	add    esp,0xc
c0016007:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001600b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001600f:	53                   	push   ebx
c0016010:	e8 d3 fe ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0016015:	83 c4 0c             	add    esp,0xc
c0016018:	57                   	push   edi
c0016019:	56                   	push   esi
c001601a:	53                   	push   ebx
c001601b:	e8 c8 fe ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0016020:	83 c4 0c             	add    esp,0xc
c0016023:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016027:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001602b:	53                   	push   ebx
c001602c:	e8 b7 fe ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0016031:	83 c4 0c             	add    esp,0xc
c0016034:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016038:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001603c:	53                   	push   ebx
c001603d:	e8 a6 fe ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0016042:	83 c4 0c             	add    esp,0xc
c0016045:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016049:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001604d:	53                   	push   ebx
c001604e:	e8 95 fe ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0016053:	83 c4 0c             	add    esp,0xc
c0016056:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001605a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001605e:	53                   	push   ebx
c001605f:	e8 84 fe ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0016064:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016067:	e8 a6 fe ff ff       	call   c0015f12 <GDT::flush()>
c001606c:	83 c4 40             	add    esp,0x40
c001606f:	5b                   	pop    ebx
c0016070:	5e                   	pop    esi
c0016071:	5f                   	pop    edi
c0016072:	c3                   	ret    

c0016073 <idleFunction(void*)>:
c0016073:	83 ec 0c             	sub    esp,0xc
c0016076:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001607b:	48                   	dec    eax
c001607c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016081:	75 01                	jne    c0016084 <idleFunction(void*)+0x11>
c0016083:	fb                   	sti    
c0016084:	e8 c1 0d 01 00       	call   c0026e4a <HalSystemIdle()>
c0016089:	e8 84 8b 01 00       	call   c002ec12 <idleCommon()>
c001608e:	eb f4                	jmp    c0016084 <idleFunction(void*)+0x11>

c0016090 <IDTEntry::IDTEntry(bool)>:
c0016090:	53                   	push   ebx
c0016091:	83 ec 04             	sub    esp,0x4
c0016094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016098:	88 04 24             	mov    BYTE PTR [esp],al
c001609b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001609f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00160a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00160ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160b1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160b4:	83 e2 f0             	and    edx,0xfffffff0
c00160b7:	83 ca 0e             	or     edx,0xe
c00160ba:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160c1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160c4:	83 e2 ef             	and    edx,0xffffffef
c00160c7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160ca:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00160ce:	85 c0                	test   eax,eax
c00160d0:	74 06                	je     c00160d8 <IDTEntry::IDTEntry(bool)+0x48>
c00160d2:	b2 03                	mov    dl,0x3
c00160d4:	eb 06                	jmp    c00160dc <IDTEntry::IDTEntry(bool)+0x4c>
c00160d6:	66 90                	xchg   ax,ax
c00160d8:	b2 00                	mov    dl,0x0
c00160da:	66 90                	xchg   ax,ax
c00160dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160e0:	83 e2 03             	and    edx,0x3
c00160e3:	89 d3                	mov    ebx,edx
c00160e5:	c1 e3 05             	shl    ebx,0x5
c00160e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160eb:	83 e2 9f             	and    edx,0xffffff9f
c00160ee:	88 d1                	mov    cl,dl
c00160f0:	88 da                	mov    dl,bl
c00160f2:	09 ca                	or     edx,ecx
c00160f4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160fb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160fe:	83 ca 80             	or     edx,0xffffff80
c0016101:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016104:	90                   	nop
c0016105:	83 c4 04             	add    esp,0x4
c0016108:	5b                   	pop    ebx
c0016109:	c3                   	ret    

c001610a <IDTEntry::setOffset(unsigned int)>:
c001610a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001610e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016112:	66 89 02             	mov    WORD PTR [edx],ax
c0016115:	c1 e8 10             	shr    eax,0x10
c0016118:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001611c:	c3                   	ret    
c001611d:	90                   	nop
c001611e:	66 90                	xchg   ax,ax

c0016120 <IDT::IDT()>:
c0016120:	90                   	nop
c0016121:	c3                   	ret    

c0016122 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0016122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016126:	83 c0 30             	add    eax,0x30
c0016129:	c3                   	ret    

c001612a <IDT::addEntry(IDTEntry, int)>:
c001612a:	53                   	push   ebx
c001612b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001612f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016133:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016137:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001613b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c001613e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0016142:	5b                   	pop    ebx
c0016143:	c3                   	ret    

c0016144 <IDT::addEntry(int, void (*)(), bool)>:
c0016144:	53                   	push   ebx
c0016145:	83 ec 10             	sub    esp,0x10
c0016148:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c001614d:	50                   	push   eax
c001614e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016152:	53                   	push   ebx
c0016153:	e8 38 ff ff ff       	call   c0016090 <IDTEntry::IDTEntry(bool)>
c0016158:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001615c:	53                   	push   ebx
c001615d:	e8 a8 ff ff ff       	call   c001610a <IDTEntry::setOffset(unsigned int)>
c0016162:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016166:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001616a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001616e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016172:	e8 b3 ff ff ff       	call   c001612a <IDT::addEntry(IDTEntry, int)>
c0016177:	83 c4 30             	add    esp,0x30
c001617a:	5b                   	pop    ebx
c001617b:	c3                   	ret    

c001617c <IDT::flush()>:
c001617c:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0016185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016189:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c001618e:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0016195:	c3                   	ret    

c0016196 <IDT::setup()>:
c0016196:	57                   	push   edi
c0016197:	56                   	push   esi
c0016198:	53                   	push   ebx
c0016199:	83 ec 10             	sub    esp,0x10
c001619c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00161a0:	6a 00                	push   0x0
c00161a2:	68 10 e3 02 c0       	push   0xc002e310
c00161a7:	6a 00                	push   0x0
c00161a9:	53                   	push   ebx
c00161aa:	e8 95 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00161af:	6a 00                	push   0x0
c00161b1:	68 20 e3 02 c0       	push   0xc002e320
c00161b6:	6a 01                	push   0x1
c00161b8:	53                   	push   ebx
c00161b9:	e8 86 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00161be:	83 c4 20             	add    esp,0x20
c00161c1:	6a 00                	push   0x0
c00161c3:	68 2a e3 02 c0       	push   0xc002e32a
c00161c8:	6a 02                	push   0x2
c00161ca:	53                   	push   ebx
c00161cb:	e8 74 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00161d0:	6a 00                	push   0x0
c00161d2:	68 34 e3 02 c0       	push   0xc002e334
c00161d7:	6a 03                	push   0x3
c00161d9:	53                   	push   ebx
c00161da:	e8 65 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00161df:	83 c4 20             	add    esp,0x20
c00161e2:	6a 00                	push   0x0
c00161e4:	68 3e e3 02 c0       	push   0xc002e33e
c00161e9:	6a 04                	push   0x4
c00161eb:	53                   	push   ebx
c00161ec:	e8 53 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00161f1:	6a 00                	push   0x0
c00161f3:	68 48 e3 02 c0       	push   0xc002e348
c00161f8:	6a 05                	push   0x5
c00161fa:	53                   	push   ebx
c00161fb:	e8 44 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016200:	83 c4 20             	add    esp,0x20
c0016203:	6a 00                	push   0x0
c0016205:	68 52 e3 02 c0       	push   0xc002e352
c001620a:	6a 06                	push   0x6
c001620c:	53                   	push   ebx
c001620d:	e8 32 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016212:	6a 00                	push   0x0
c0016214:	68 5c e3 02 c0       	push   0xc002e35c
c0016219:	6a 07                	push   0x7
c001621b:	53                   	push   ebx
c001621c:	e8 23 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016221:	83 c4 20             	add    esp,0x20
c0016224:	6a 00                	push   0x0
c0016226:	68 66 e3 02 c0       	push   0xc002e366
c001622b:	6a 08                	push   0x8
c001622d:	53                   	push   ebx
c001622e:	e8 11 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016233:	6a 00                	push   0x0
c0016235:	68 6e e3 02 c0       	push   0xc002e36e
c001623a:	6a 09                	push   0x9
c001623c:	53                   	push   ebx
c001623d:	e8 02 ff ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016242:	83 c4 20             	add    esp,0x20
c0016245:	6a 00                	push   0x0
c0016247:	68 78 e3 02 c0       	push   0xc002e378
c001624c:	6a 0a                	push   0xa
c001624e:	53                   	push   ebx
c001624f:	e8 f0 fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016254:	6a 00                	push   0x0
c0016256:	68 80 e3 02 c0       	push   0xc002e380
c001625b:	6a 0b                	push   0xb
c001625d:	53                   	push   ebx
c001625e:	e8 e1 fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016263:	83 c4 20             	add    esp,0x20
c0016266:	6a 00                	push   0x0
c0016268:	68 88 e3 02 c0       	push   0xc002e388
c001626d:	6a 0c                	push   0xc
c001626f:	53                   	push   ebx
c0016270:	e8 cf fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016275:	6a 00                	push   0x0
c0016277:	68 90 e3 02 c0       	push   0xc002e390
c001627c:	6a 0d                	push   0xd
c001627e:	53                   	push   ebx
c001627f:	e8 c0 fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016284:	83 c4 20             	add    esp,0x20
c0016287:	6a 00                	push   0x0
c0016289:	68 aa e3 02 c0       	push   0xc002e3aa
c001628e:	6a 0e                	push   0xe
c0016290:	53                   	push   ebx
c0016291:	e8 ae fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016296:	6a 00                	push   0x0
c0016298:	68 b2 e3 02 c0       	push   0xc002e3b2
c001629d:	6a 0f                	push   0xf
c001629f:	53                   	push   ebx
c00162a0:	e8 9f fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00162a5:	83 c4 20             	add    esp,0x20
c00162a8:	6a 00                	push   0x0
c00162aa:	68 bc e3 02 c0       	push   0xc002e3bc
c00162af:	6a 10                	push   0x10
c00162b1:	53                   	push   ebx
c00162b2:	e8 8d fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00162b7:	6a 00                	push   0x0
c00162b9:	68 c6 e3 02 c0       	push   0xc002e3c6
c00162be:	6a 11                	push   0x11
c00162c0:	53                   	push   ebx
c00162c1:	e8 7e fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00162c6:	83 c4 20             	add    esp,0x20
c00162c9:	6a 00                	push   0x0
c00162cb:	68 d0 e3 02 c0       	push   0xc002e3d0
c00162d0:	6a 12                	push   0x12
c00162d2:	53                   	push   ebx
c00162d3:	e8 6c fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00162d8:	6a 01                	push   0x1
c00162da:	68 6a e4 02 c0       	push   0xc002e46a
c00162df:	6a 60                	push   0x60
c00162e1:	53                   	push   ebx
c00162e2:	e8 5d fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00162e7:	83 c4 20             	add    esp,0x20
c00162ea:	6a 00                	push   0x0
c00162ec:	68 71 e4 02 c0       	push   0xc002e471
c00162f1:	6a 20                	push   0x20
c00162f3:	53                   	push   ebx
c00162f4:	e8 4b fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00162f9:	6a 00                	push   0x0
c00162fb:	68 5c e4 02 c0       	push   0xc002e45c
c0016300:	6a 21                	push   0x21
c0016302:	53                   	push   ebx
c0016303:	e8 3c fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016308:	83 c4 20             	add    esp,0x20
c001630b:	6a 00                	push   0x0
c001630d:	68 63 e4 02 c0       	push   0xc002e463
c0016312:	6a 22                	push   0x22
c0016314:	53                   	push   ebx
c0016315:	e8 2a fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001631a:	6a 00                	push   0x0
c001631c:	68 da e3 02 c0       	push   0xc002e3da
c0016321:	6a 23                	push   0x23
c0016323:	53                   	push   ebx
c0016324:	e8 1b fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016329:	83 c4 20             	add    esp,0x20
c001632c:	6a 00                	push   0x0
c001632e:	68 e4 e3 02 c0       	push   0xc002e3e4
c0016333:	6a 24                	push   0x24
c0016335:	53                   	push   ebx
c0016336:	e8 09 fe ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001633b:	6a 00                	push   0x0
c001633d:	68 ee e3 02 c0       	push   0xc002e3ee
c0016342:	6a 25                	push   0x25
c0016344:	53                   	push   ebx
c0016345:	e8 fa fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001634a:	83 c4 20             	add    esp,0x20
c001634d:	6a 00                	push   0x0
c001634f:	68 f8 e3 02 c0       	push   0xc002e3f8
c0016354:	6a 26                	push   0x26
c0016356:	53                   	push   ebx
c0016357:	e8 e8 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001635c:	6a 00                	push   0x0
c001635e:	68 02 e4 02 c0       	push   0xc002e402
c0016363:	6a 27                	push   0x27
c0016365:	53                   	push   ebx
c0016366:	e8 d9 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001636b:	83 c4 20             	add    esp,0x20
c001636e:	6a 00                	push   0x0
c0016370:	68 0c e4 02 c0       	push   0xc002e40c
c0016375:	6a 28                	push   0x28
c0016377:	53                   	push   ebx
c0016378:	e8 c7 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001637d:	6a 00                	push   0x0
c001637f:	68 16 e4 02 c0       	push   0xc002e416
c0016384:	6a 29                	push   0x29
c0016386:	53                   	push   ebx
c0016387:	e8 b8 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001638c:	83 c4 20             	add    esp,0x20
c001638f:	6a 00                	push   0x0
c0016391:	68 20 e4 02 c0       	push   0xc002e420
c0016396:	6a 2a                	push   0x2a
c0016398:	53                   	push   ebx
c0016399:	e8 a6 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c001639e:	6a 00                	push   0x0
c00163a0:	68 2a e4 02 c0       	push   0xc002e42a
c00163a5:	6a 2b                	push   0x2b
c00163a7:	53                   	push   ebx
c00163a8:	e8 97 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00163ad:	83 c4 20             	add    esp,0x20
c00163b0:	6a 00                	push   0x0
c00163b2:	68 34 e4 02 c0       	push   0xc002e434
c00163b7:	6a 2c                	push   0x2c
c00163b9:	53                   	push   ebx
c00163ba:	e8 85 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00163bf:	6a 00                	push   0x0
c00163c1:	68 3e e4 02 c0       	push   0xc002e43e
c00163c6:	6a 2d                	push   0x2d
c00163c8:	53                   	push   ebx
c00163c9:	e8 76 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00163ce:	83 c4 20             	add    esp,0x20
c00163d1:	6a 00                	push   0x0
c00163d3:	68 48 e4 02 c0       	push   0xc002e448
c00163d8:	6a 2e                	push   0x2e
c00163da:	53                   	push   ebx
c00163db:	e8 64 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00163e0:	6a 00                	push   0x0
c00163e2:	68 52 e4 02 c0       	push   0xc002e452
c00163e7:	6a 2f                	push   0x2f
c00163e9:	53                   	push   ebx
c00163ea:	e8 55 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c00163ef:	83 c4 20             	add    esp,0x20
c00163f2:	6a 00                	push   0x0
c00163f4:	68 ac e5 02 c0       	push   0xc002e5ac
c00163f9:	6a 30                	push   0x30
c00163fb:	53                   	push   ebx
c00163fc:	e8 43 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016401:	6a 00                	push   0x0
c0016403:	68 b6 e5 02 c0       	push   0xc002e5b6
c0016408:	6a 31                	push   0x31
c001640a:	53                   	push   ebx
c001640b:	e8 34 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016410:	83 c4 20             	add    esp,0x20
c0016413:	6a 00                	push   0x0
c0016415:	68 c0 e5 02 c0       	push   0xc002e5c0
c001641a:	6a 32                	push   0x32
c001641c:	53                   	push   ebx
c001641d:	e8 22 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016422:	6a 00                	push   0x0
c0016424:	68 ca e5 02 c0       	push   0xc002e5ca
c0016429:	6a 33                	push   0x33
c001642b:	53                   	push   ebx
c001642c:	e8 13 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016431:	83 c4 20             	add    esp,0x20
c0016434:	6a 00                	push   0x0
c0016436:	68 d4 e5 02 c0       	push   0xc002e5d4
c001643b:	6a 34                	push   0x34
c001643d:	53                   	push   ebx
c001643e:	e8 01 fd ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016443:	6a 00                	push   0x0
c0016445:	68 de e5 02 c0       	push   0xc002e5de
c001644a:	6a 35                	push   0x35
c001644c:	53                   	push   ebx
c001644d:	e8 f2 fc ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016452:	83 c4 20             	add    esp,0x20
c0016455:	6a 00                	push   0x0
c0016457:	68 e8 e5 02 c0       	push   0xc002e5e8
c001645c:	6a 36                	push   0x36
c001645e:	53                   	push   ebx
c001645f:	e8 e0 fc ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016464:	6a 00                	push   0x0
c0016466:	68 f2 e5 02 c0       	push   0xc002e5f2
c001646b:	6a 37                	push   0x37
c001646d:	53                   	push   ebx
c001646e:	e8 d1 fc ff ff       	call   c0016144 <IDT::addEntry(int, void (*)(), bool)>
c0016473:	83 c4 1c             	add    esp,0x1c
c0016476:	6a 03                	push   0x3
c0016478:	6a 02                	push   0x2
c001647a:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016480:	e8 c1 25 00 00       	call   c0018a46 <VAS::allocatePages(int, int)>
c0016485:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001648c:	89 c6                	mov    esi,eax
c001648e:	e8 81 02 00 00       	call   c0016714 <malloc>
c0016493:	81 c6 00 20 00 00    	add    esi,0x2000
c0016499:	89 04 24             	mov    DWORD PTR [esp],eax
c001649c:	89 c7                	mov    edi,eax
c001649e:	e8 c9 16 00 00       	call   c0017b6c <TSS::TSS()>
c00164a3:	83 c4 0c             	add    esp,0xc
c00164a6:	68 66 e3 02 c0       	push   0xc002e366
c00164ab:	56                   	push   esi
c00164ac:	57                   	push   edi
c00164ad:	e8 fe 16 00 00       	call   c0017bb0 <TSS::setup(unsigned long, unsigned long)>
c00164b2:	89 c6                	mov    esi,eax
c00164b4:	58                   	pop    eax
c00164b5:	5a                   	pop    edx
c00164b6:	6a 00                	push   0x0
c00164b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164bc:	50                   	push   eax
c00164bd:	e8 ce fb ff ff       	call   c0016090 <IDTEntry::IDTEntry(bool)>
c00164c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164c6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00164cb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00164d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164d6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00164dc:	80 ce 05             	or     dh,0x5
c00164df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164e3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00164e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164ea:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00164ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164f0:	e8 87 fc ff ff       	call   c001617c <IDT::flush()>
c00164f5:	83 c4 20             	add    esp,0x20
c00164f8:	5b                   	pop    ebx
c00164f9:	5e                   	pop    esi
c00164fa:	5f                   	pop    edi
c00164fb:	c3                   	ret    

c00164fc <sbrk>:
c00164fc:	55                   	push   ebp
c00164fd:	57                   	push   edi
c00164fe:	56                   	push   esi
c00164ff:	53                   	push   ebx
c0016500:	83 ec 1c             	sub    esp,0x1c
c0016503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016507:	85 c0                	test   eax,eax
c0016509:	74 66                	je     c0016571 <sbrk+0x75>
c001650b:	78 6b                	js     c0016578 <sbrk+0x7c>
c001650d:	8b 15 24 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033f24
c0016513:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016517:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c001651d:	05 ff 0f 00 00       	add    eax,0xfff
c0016522:	0f 49 e8             	cmovns ebp,eax
c0016525:	c1 fd 0c             	sar    ebp,0xc
c0016528:	bb 00 00 00 00       	mov    ebx,0x0
c001652d:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c0016533:	8b 3d 24 3f 03 c0    	mov    edi,DWORD PTR ds:0xc0033f24
c0016539:	e8 e5 04 00 00       	call   c0016a23 <Phys::allocatePage()>
c001653e:	68 01 04 00 00       	push   0x401
c0016543:	57                   	push   edi
c0016544:	50                   	push   eax
c0016545:	56                   	push   esi
c0016546:	e8 f3 23 00 00       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c001654b:	81 05 24 3f 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033f24,0x1000
c0016555:	83 c3 01             	add    ebx,0x1
c0016558:	83 c4 10             	add    esp,0x10
c001655b:	39 dd                	cmp    ebp,ebx
c001655d:	75 ce                	jne    c001652d <sbrk+0x31>
c001655f:	0f 20 d8             	mov    eax,cr3
c0016562:	0f 22 d8             	mov    cr3,eax
c0016565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016569:	83 c4 1c             	add    esp,0x1c
c001656c:	5b                   	pop    ebx
c001656d:	5e                   	pop    esi
c001656e:	5f                   	pop    edi
c001656f:	5d                   	pop    ebp
c0016570:	c3                   	ret    
c0016571:	a1 24 3f 03 c0       	mov    eax,ds:0xc0033f24
c0016576:	eb f1                	jmp    c0016569 <sbrk+0x6d>
c0016578:	83 ec 08             	sub    esp,0x8
c001657b:	50                   	push   eax
c001657c:	68 48 14 03 c0       	push   0xc0031448
c0016581:	e8 c4 2f 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0016586:	83 c4 10             	add    esp,0x10
c0016589:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001658e:	eb d9                	jmp    c0016569 <sbrk+0x6d>

c0016590 <sbrk_thunk>:
c0016590:	83 ec 0c             	sub    esp,0xc
c0016593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016597:	3d ff bf 00 00       	cmp    eax,0xbfff
c001659c:	7f 10                	jg     c00165ae <sbrk_thunk+0x1e>
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	50                   	push   eax
c00165a2:	e8 55 ff ff ff       	call   c00164fc <sbrk>
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	83 c4 0c             	add    esp,0xc
c00165ad:	c3                   	ret    
c00165ae:	83 ec 08             	sub    esp,0x8
c00165b1:	50                   	push   eax
c00165b2:	68 78 14 03 c0       	push   0xc0031478
c00165b7:	e8 8e 2f 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00165bc:	83 c4 10             	add    esp,0x10
c00165bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165c4:	eb e4                	jmp    c00165aa <sbrk_thunk+0x1a>

c00165c6 <mmap>:
c00165c6:	55                   	push   ebp
c00165c7:	57                   	push   edi
c00165c8:	56                   	push   esi
c00165c9:	53                   	push   ebx
c00165ca:	83 ec 14             	sub    esp,0x14
c00165cd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00165d1:	89 f0                	mov    eax,esi
c00165d3:	c1 e8 0a             	shr    eax,0xa
c00165d6:	50                   	push   eax
c00165d7:	68 87 14 03 c0       	push   0xc0031487
c00165dc:	e8 69 2f 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00165e1:	81 c6 ff 0f 00 00    	add    esi,0xfff
c00165e7:	89 f3                	mov    ebx,esi
c00165e9:	c1 eb 0c             	shr    ebx,0xc
c00165ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165ef:	e8 41 1c 00 00       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c00165f4:	89 c5                	mov    ebp,eax
c00165f6:	83 c4 10             	add    esp,0x10
c00165f9:	85 db                	test   ebx,ebx
c00165fb:	7e 2f                	jle    c001662c <mmap+0x66>
c00165fd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0016603:	01 c6                	add    esi,eax
c0016605:	89 c3                	mov    ebx,eax
c0016607:	8b 3d b0 aa 03 c0    	mov    edi,DWORD PTR ds:0xc003aab0
c001660d:	e8 11 04 00 00       	call   c0016a23 <Phys::allocatePage()>
c0016612:	68 01 04 00 00       	push   0x401
c0016617:	53                   	push   ebx
c0016618:	50                   	push   eax
c0016619:	57                   	push   edi
c001661a:	e8 1f 23 00 00       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c001661f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	39 f3                	cmp    ebx,esi
c001662a:	75 db                	jne    c0016607 <mmap+0x41>
c001662c:	83 ec 08             	sub    esp,0x8
c001662f:	55                   	push   ebp
c0016630:	68 a1 14 03 c0       	push   0xc00314a1
c0016635:	e8 10 2f 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001663a:	89 e8                	mov    eax,ebp
c001663c:	83 c4 1c             	add    esp,0x1c
c001663f:	5b                   	pop    ebx
c0016640:	5e                   	pop    esi
c0016641:	5f                   	pop    edi
c0016642:	5d                   	pop    ebp
c0016643:	c3                   	ret    

c0016644 <munmap>:
c0016644:	57                   	push   edi
c0016645:	56                   	push   esi
c0016646:	53                   	push   ebx
c0016647:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001664b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001664f:	83 ec 08             	sub    esp,0x8
c0016652:	89 f0                	mov    eax,esi
c0016654:	c1 e8 0a             	shr    eax,0xa
c0016657:	50                   	push   eax
c0016658:	68 b0 14 03 c0       	push   0xc00314b0
c001665d:	e8 e8 2e 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0016662:	83 c4 08             	add    esp,0x8
c0016665:	57                   	push   edi
c0016666:	68 a1 14 03 c0       	push   0xc00314a1
c001666b:	e8 da 2e 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0016670:	81 c6 ff 0f 00 00    	add    esi,0xfff
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	89 f0                	mov    eax,esi
c001667b:	c1 e8 0c             	shr    eax,0xc
c001667e:	74 20                	je     c00166a0 <munmap+0x5c>
c0016680:	89 fb                	mov    ebx,edi
c0016682:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0016688:	01 fe                	add    esi,edi
c001668a:	83 ec 0c             	sub    esp,0xc
c001668d:	53                   	push   ebx
c001668e:	e8 b6 1e 00 00       	call   c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c0016693:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016699:	83 c4 10             	add    esp,0x10
c001669c:	39 f3                	cmp    ebx,esi
c001669e:	75 ea                	jne    c001668a <munmap+0x46>
c00166a0:	b8 00 00 00 00       	mov    eax,0x0
c00166a5:	5b                   	pop    ebx
c00166a6:	5e                   	pop    esi
c00166a7:	5f                   	pop    edi
c00166a8:	c3                   	ret    

c00166a9 <liballoc_lock()>:
c00166a9:	fa                   	cli    
c00166aa:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c00166b1:	b8 00 00 00 00       	mov    eax,0x0
c00166b6:	c3                   	ret    

c00166b7 <liballoc_unlock()>:
c00166b7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00166bc:	83 e8 01             	sub    eax,0x1
c00166bf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00166c4:	75 01                	jne    c00166c7 <liballoc_unlock()+0x10>
c00166c6:	fb                   	sti    
c00166c7:	b8 00 00 00 00       	mov    eax,0x0
c00166cc:	c3                   	ret    

c00166cd <liballoc_alloc(int)>:
c00166cd:	83 ec 10             	sub    esp,0x10
c00166d0:	6a 01                	push   0x1
c00166d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166d6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00166dc:	e8 65 23 00 00       	call   c0018a46 <VAS::allocatePages(int, int)>
c00166e1:	83 c4 1c             	add    esp,0x1c
c00166e4:	c3                   	ret    

c00166e5 <liballoc_free(void*, int)>:
c00166e5:	83 ec 14             	sub    esp,0x14
c00166e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166ec:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00166f2:	e8 8f 1f 00 00       	call   c0018686 <VAS::freeAllocatedPages(unsigned long)>
c00166f7:	b8 00 00 00 00       	mov    eax,0x0
c00166fc:	83 c4 1c             	add    esp,0x1c
c00166ff:	c3                   	ret    

c0016700 <realloc>:
c0016700:	83 ec 14             	sub    esp,0x14
c0016703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001670b:	e8 2c b2 fe ff       	call   c000193c <dlrealloc>
c0016710:	83 c4 1c             	add    esp,0x1c
c0016713:	c3                   	ret    

c0016714 <malloc>:
c0016714:	83 ec 18             	sub    esp,0x18
c0016717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001671b:	e8 df ac fe ff       	call   c00013ff <dlmalloc>
c0016720:	83 c4 1c             	add    esp,0x1c
c0016723:	c3                   	ret    

c0016724 <free>:
c0016724:	83 ec 18             	sub    esp,0x18
c0016727:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001672b:	e8 0d a8 fe ff       	call   c0000f3d <dlfree>
c0016730:	83 c4 1c             	add    esp,0x1c
c0016733:	c3                   	ret    

c0016734 <rfree>:
c0016734:	83 ec 18             	sub    esp,0x18
c0016737:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001673b:	e8 fd a7 fe ff       	call   c0000f3d <dlfree>
c0016740:	83 c4 1c             	add    esp,0x1c
c0016743:	c3                   	ret    

c0016744 <calloc>:
c0016744:	56                   	push   esi
c0016745:	53                   	push   ebx
c0016746:	83 ec 10             	sub    esp,0x10
c0016749:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001674d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0016752:	53                   	push   ebx
c0016753:	e8 bc ff ff ff       	call   c0016714 <malloc>
c0016758:	89 c6                	mov    esi,eax
c001675a:	83 c4 0c             	add    esp,0xc
c001675d:	53                   	push   ebx
c001675e:	6a 00                	push   0x0
c0016760:	50                   	push   eax
c0016761:	e8 8a 9d fe ff       	call   c00004f0 <memset>
c0016766:	89 f0                	mov    eax,esi
c0016768:	83 c4 14             	add    esp,0x14
c001676b:	5b                   	pop    ebx
c001676c:	5e                   	pop    esi
c001676d:	c3                   	ret    

c001676e <KeEntryPoint>:
c001676e:	57                   	push   edi
c001676f:	bf f9 03 00 00       	mov    edi,0x3f9
c0016774:	56                   	push   esi
c0016775:	31 f6                	xor    esi,esi
c0016777:	53                   	push   ebx
c0016778:	89 fa                	mov    edx,edi
c001677a:	83 ec 2c             	sub    esp,0x2c
c001677d:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016782:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016787:	89 f0                	mov    eax,esi
c0016789:	ee                   	out    dx,al
c001678a:	bb fb 03 00 00       	mov    ebx,0x3fb
c001678f:	b0 80                	mov    al,0x80
c0016791:	89 da                	mov    edx,ebx
c0016793:	ee                   	out    dx,al
c0016794:	b1 03                	mov    cl,0x3
c0016796:	ba f8 03 00 00       	mov    edx,0x3f8
c001679b:	88 c8                	mov    al,cl
c001679d:	ee                   	out    dx,al
c001679e:	89 f0                	mov    eax,esi
c00167a0:	89 fa                	mov    edx,edi
c00167a2:	ee                   	out    dx,al
c00167a3:	88 c8                	mov    al,cl
c00167a5:	89 da                	mov    edx,ebx
c00167a7:	ee                   	out    dx,al
c00167a8:	b0 c7                	mov    al,0xc7
c00167aa:	ba fa 03 00 00       	mov    edx,0x3fa
c00167af:	ee                   	out    dx,al
c00167b0:	b0 0b                	mov    al,0xb
c00167b2:	ba fc 03 00 00       	mov    edx,0x3fc
c00167b7:	ee                   	out    dx,al
c00167b8:	68 c9 14 03 c0       	push   0xc00314c9
c00167bd:	e8 88 2d 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00167c2:	e8 2e 95 00 00       	call   c001fcf5 <KeDisplaySplashScreen()>
c00167c7:	a1 24 05 00 00       	mov    eax,ds:0x524
c00167cc:	05 ff 0f 00 00       	add    eax,0xfff
c00167d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00167d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00167d9:	e8 b3 03 00 00       	call   c0016b91 <Phys::physicalMemorySetup(unsigned int)>
c00167de:	e8 26 1c 00 00       	call   c0018409 <Virt::virtualMemorySetup()>
c00167e3:	e8 57 94 00 00       	call   c001fc3f <KeInitialiseAtexit()>
c00167e8:	58                   	pop    eax
c00167e9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00167ed:	53                   	push   ebx
c00167ee:	e8 13 1f 00 00       	call   c0018706 <VAS::VAS()>
c00167f3:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00167f9:	e8 ac 83 01 00       	call   c002ebaa <_init>
c00167fe:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0016805:	e8 0a ff ff ff       	call   c0016714 <malloc>
c001680a:	89 04 24             	mov    DWORD PTR [esp],eax
c001680d:	89 c6                	mov    esi,eax
c001680f:	e8 4a f1 ff ff       	call   c001595e <Computer::Computer()>
c0016814:	53                   	push   ebx
c0016815:	6a 00                	push   0x0
c0016817:	6a 00                	push   0x0
c0016819:	56                   	push   esi
c001681a:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c0016820:	e8 ff f4 ff ff       	call   c0015d24 <Computer::open(int, int, void*)>
c0016825:	83 c4 14             	add    esp,0x14
c0016828:	53                   	push   ebx
c0016829:	e8 a2 1f 00 00       	call   c00187d0 <VAS::~VAS()>
c001682e:	83 c4 30             	add    esp,0x30
c0016831:	5b                   	pop    ebx
c0016832:	5e                   	pop    esi
c0016833:	5f                   	pop    edi
c0016834:	c3                   	ret    

c0016835 <Phys::allocateDMA(unsigned long)>:
c0016835:	55                   	push   ebp
c0016836:	31 ed                	xor    ebp,ebp
c0016838:	57                   	push   edi
c0016839:	56                   	push   esi
c001683a:	31 f6                	xor    esi,esi
c001683c:	53                   	push   ebx
c001683d:	31 db                	xor    ebx,ebx
c001683f:	83 ec 1c             	sub    esp,0x1c
c0016842:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016846:	05 ff 0f 00 00       	add    eax,0xfff
c001684b:	c1 e8 0c             	shr    eax,0xc
c001684e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016852:	31 c0                	xor    eax,eax
c0016854:	eb 1b                	jmp    c0016871 <Phys::allocateDMA(unsigned long)+0x3c>
c0016856:	8d 78 01             	lea    edi,[eax+0x1]
c0016859:	85 c0                	test   eax,eax
c001685b:	0f 44 eb             	cmove  ebp,ebx
c001685e:	0f 44 f3             	cmove  esi,ebx
c0016861:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016865:	74 37                	je     c001689e <Phys::allocateDMA(unsigned long)+0x69>
c0016867:	89 f8                	mov    eax,edi
c0016869:	83 c3 01             	add    ebx,0x1
c001686c:	83 fb 0f             	cmp    ebx,0xf
c001686f:	7f 13                	jg     c0016884 <Phys::allocateDMA(unsigned long)+0x4f>
c0016871:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016878:	74 dc                	je     c0016856 <Phys::allocateDMA(unsigned long)+0x21>
c001687a:	31 c0                	xor    eax,eax
c001687c:	83 c3 01             	add    ebx,0x1
c001687f:	83 fb 0f             	cmp    ebx,0xf
c0016882:	7e ed                	jle    c0016871 <Phys::allocateDMA(unsigned long)+0x3c>
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	68 e0 14 03 c0       	push   0xc00314e0
c001688c:	e8 41 9c 00 00       	call   c00204d2 <KePanic(char const*)>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	31 c0                	xor    eax,eax
c0016896:	83 c4 1c             	add    esp,0x1c
c0016899:	5b                   	pop    ebx
c001689a:	5e                   	pop    esi
c001689b:	5f                   	pop    edi
c001689c:	5d                   	pop    ebp
c001689d:	c3                   	ret    
c001689e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00168a2:	89 f2                	mov    edx,esi
c00168a4:	c1 fa 04             	sar    edx,0x4
c00168a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00168ab:	01 f1                	add    ecx,esi
c00168ad:	8d 51 0e             	lea    edx,[ecx+0xe]
c00168b0:	83 e9 01             	sub    ecx,0x1
c00168b3:	0f 48 ca             	cmovs  ecx,edx
c00168b6:	c1 f9 04             	sar    ecx,0x4
c00168b9:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00168bd:	74 06                	je     c00168c5 <Phys::allocateDMA(unsigned long)+0x90>
c00168bf:	89 eb                	mov    ebx,ebp
c00168c1:	31 c0                	xor    eax,eax
c00168c3:	eb b7                	jmp    c001687c <Phys::allocateDMA(unsigned long)+0x47>
c00168c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00168c9:	85 d2                	test   edx,edx
c00168cb:	74 17                	je     c00168e4 <Phys::allocateDMA(unsigned long)+0xaf>
c00168cd:	8d 96 f0 a9 03 c0    	lea    edx,[esi-0x3ffc5610]
c00168d3:	8d 84 06 f1 a9 03 c0 	lea    eax,[esi+eax*1-0x3ffc560f]
c00168da:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00168dd:	83 c2 01             	add    edx,0x1
c00168e0:	39 d0                	cmp    eax,edx
c00168e2:	75 f6                	jne    c00168da <Phys::allocateDMA(unsigned long)+0xa5>
c00168e4:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c00168ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168f2:	01 c2                	add    edx,eax
c00168f4:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c00168fa:	85 c9                	test   ecx,ecx
c00168fc:	74 17                	je     c0016915 <Phys::allocateDMA(unsigned long)+0xe0>
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	68 e0 14 03 c0       	push   0xc00314e0
c0016906:	e8 c7 9b 00 00       	call   c00204d2 <KePanic(char const*)>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	89 f8                	mov    eax,edi
c0016910:	e9 54 ff ff ff       	jmp    c0016869 <Phys::allocateDMA(unsigned long)+0x34>
c0016915:	c1 e6 0c             	shl    esi,0xc
c0016918:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c001691e:	e9 73 ff ff ff       	jmp    c0016896 <Phys::allocateDMA(unsigned long)+0x61>

c0016923 <Phys::freeDMA(unsigned long, unsigned long)>:
c0016923:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016927:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001692d:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016932:	c1 ea 0c             	shr    edx,0xc
c0016935:	29 d0                	sub    eax,edx
c0016937:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001693c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016940:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0016945:	c1 e8 0c             	shr    eax,0xc
c0016948:	85 d2                	test   edx,edx
c001694a:	74 11                	je     c001695d <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c001694c:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c0016951:	01 c2                	add    edx,eax
c0016953:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016956:	83 c0 01             	add    eax,0x1
c0016959:	39 d0                	cmp    eax,edx
c001695b:	75 f6                	jne    c0016953 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001695d:	c3                   	ret    

c001695e <Phys::setPageState(unsigned long, bool)>:
c001695e:	57                   	push   edi
c001695f:	56                   	push   esi
c0016960:	8b 35 28 3f 03 c0    	mov    esi,DWORD PTR ds:0xc0033f28
c0016966:	53                   	push   ebx
c0016967:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001696c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016970:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016974:	89 ca                	mov    edx,ecx
c0016976:	83 e1 07             	and    ecx,0x7
c0016979:	c1 ea 03             	shr    edx,0x3
c001697c:	0f b6 c0             	movzx  eax,al
c001697f:	d3 c3                	rol    ebx,cl
c0016981:	01 d6                	add    esi,edx
c0016983:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016986:	d3 e0                	shl    eax,cl
c0016988:	21 fb                	and    ebx,edi
c001698a:	88 1e                	mov    BYTE PTR [esi],bl
c001698c:	8b 1d 28 3f 03 c0    	mov    ebx,DWORD PTR ds:0xc0033f28
c0016992:	01 da                	add    edx,ebx
c0016994:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016996:	09 c8                	or     eax,ecx
c0016998:	88 02                	mov    BYTE PTR [edx],al
c001699a:	5b                   	pop    ebx
c001699b:	5e                   	pop    esi
c001699c:	5f                   	pop    edi
c001699d:	c3                   	ret    

c001699e <Phys::getPageState(unsigned long)>:
c001699e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00169a2:	8b 15 28 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033f28
c00169a8:	89 c8                	mov    eax,ecx
c00169aa:	83 e1 07             	and    ecx,0x7
c00169ad:	c1 e8 03             	shr    eax,0x3
c00169b0:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00169b4:	d3 f8                	sar    eax,cl
c00169b6:	83 e0 01             	and    eax,0x1
c00169b9:	c3                   	ret    

c00169ba <Phys::freePage(unsigned long)>:
c00169ba:	53                   	push   ebx
c00169bb:	83 ec 08             	sub    esp,0x8
c00169be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169c2:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00169c8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00169ce:	76 41                	jbe    c0016a11 <Phys::freePage(unsigned long)+0x57>
c00169d0:	c1 e8 0c             	shr    eax,0xc
c00169d3:	50                   	push   eax
c00169d4:	89 c3                	mov    ebx,eax
c00169d6:	e8 c3 ff ff ff       	call   c001699e <Phys::getPageState(unsigned long)>
c00169db:	5a                   	pop    edx
c00169dc:	84 c0                	test   al,al
c00169de:	74 20                	je     c0016a00 <Phys::freePage(unsigned long)+0x46>
c00169e0:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00169e5:	83 ec 08             	sub    esp,0x8
c00169e8:	6a 00                	push   0x0
c00169ea:	53                   	push   ebx
c00169eb:	83 e8 01             	sub    eax,0x1
c00169ee:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00169f3:	e8 66 ff ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c00169f8:	83 c4 10             	add    esp,0x10
c00169fb:	83 c4 08             	add    esp,0x8
c00169fe:	5b                   	pop    ebx
c00169ff:	c3                   	ret    
c0016a00:	c7 44 24 10 85 15 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031585
c0016a08:	83 c4 08             	add    esp,0x8
c0016a0b:	5b                   	pop    ebx
c0016a0c:	e9 c1 9a 00 00       	jmp    c00204d2 <KePanic(char const*)>
c0016a11:	68 00 10 00 00       	push   0x1000
c0016a16:	50                   	push   eax
c0016a17:	e8 07 ff ff ff       	call   c0016923 <Phys::freeDMA(unsigned long, unsigned long)>
c0016a1c:	59                   	pop    ecx
c0016a1d:	5b                   	pop    ebx
c0016a1e:	83 c4 08             	add    esp,0x8
c0016a21:	5b                   	pop    ebx
c0016a22:	c3                   	ret    

c0016a23 <Phys::allocatePage()>:
c0016a23:	56                   	push   esi
c0016a24:	53                   	push   ebx
c0016a25:	83 ec 14             	sub    esp,0x14
c0016a28:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c0016a2e:	89 f3                	mov    ebx,esi
c0016a30:	eb 0a                	jmp    c0016a3c <Phys::allocatePage()+0x19>
c0016a32:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c0016a38:	39 de                	cmp    esi,ebx
c0016a3a:	74 26                	je     c0016a62 <Phys::allocatePage()+0x3f>
c0016a3c:	53                   	push   ebx
c0016a3d:	e8 5c ff ff ff       	call   c001699e <Phys::getPageState(unsigned long)>
c0016a42:	5a                   	pop    edx
c0016a43:	84 c0                	test   al,al
c0016a45:	74 67                	je     c0016aae <Phys::allocatePage()+0x8b>
c0016a47:	83 c3 01             	add    ebx,0x1
c0016a4a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016a50:	75 e0                	jne    c0016a32 <Phys::allocatePage()+0xf>
c0016a52:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c0016a5c:	31 db                	xor    ebx,ebx
c0016a5e:	39 de                	cmp    esi,ebx
c0016a60:	75 da                	jne    c0016a3c <Phys::allocatePage()+0x19>
c0016a62:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c0016a67:	83 ec 0c             	sub    esp,0xc
c0016a6a:	83 f0 01             	xor    eax,0x1
c0016a6d:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016a7a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016a80:	50                   	push   eax
c0016a81:	e8 78 27 00 00       	call   c00191fe <VAS::scanForEviction()>
c0016a86:	83 c4 10             	add    esp,0x10
c0016a89:	85 c0                	test   eax,eax
c0016a8b:	75 48                	jne    c0016ad5 <Phys::allocatePage()+0xb2>
c0016a8d:	83 ec 0c             	sub    esp,0xc
c0016a90:	68 08 15 03 c0       	push   0xc0031508
c0016a95:	e8 38 9a 00 00       	call   c00204d2 <KePanic(char const*)>
c0016a9a:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016aa0:	83 c4 10             	add    esp,0x10
c0016aa3:	53                   	push   ebx
c0016aa4:	e8 f5 fe ff ff       	call   c001699e <Phys::getPageState(unsigned long)>
c0016aa9:	5a                   	pop    edx
c0016aaa:	84 c0                	test   al,al
c0016aac:	75 99                	jne    c0016a47 <Phys::allocatePage()+0x24>
c0016aae:	6a 01                	push   0x1
c0016ab0:	53                   	push   ebx
c0016ab1:	e8 a8 fe ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016ab6:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016abc:	59                   	pop    ecx
c0016abd:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016ac2:	5b                   	pop    ebx
c0016ac3:	83 c2 01             	add    edx,0x1
c0016ac6:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016acc:	c1 e0 0c             	shl    eax,0xc
c0016acf:	83 c4 14             	add    esp,0x14
c0016ad2:	5b                   	pop    ebx
c0016ad3:	5e                   	pop    esi
c0016ad4:	c3                   	ret    
c0016ad5:	83 ec 08             	sub    esp,0x8
c0016ad8:	89 c2                	mov    edx,eax
c0016ada:	6a 01                	push   0x1
c0016adc:	c1 ea 0c             	shr    edx,0xc
c0016adf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ae3:	52                   	push   edx
c0016ae4:	e8 75 fe ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016ae9:	83 c4 10             	add    esp,0x10
c0016aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016af0:	eb dd                	jmp    c0016acf <Phys::allocatePage()+0xac>

c0016af2 <Phys::allocateContiguousPages(int)>:
c0016af2:	57                   	push   edi
c0016af3:	56                   	push   esi
c0016af4:	53                   	push   ebx
c0016af5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016af9:	fa                   	cli    
c0016afa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016aff:	31 db                	xor    ebx,ebx
c0016b01:	83 c0 01             	add    eax,0x1
c0016b04:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016b09:	85 db                	test   ebx,ebx
c0016b0b:	75 11                	jne    c0016b1e <Phys::allocateContiguousPages(int)+0x2c>
c0016b0d:	e8 11 ff ff ff       	call   c0016a23 <Phys::allocatePage()>
c0016b12:	83 fe 01             	cmp    esi,0x1
c0016b15:	89 c7                	mov    edi,eax
c0016b17:	74 21                	je     c0016b3a <Phys::allocateContiguousPages(int)+0x48>
c0016b19:	bb 01 00 00 00       	mov    ebx,0x1
c0016b1e:	e8 00 ff ff ff       	call   c0016a23 <Phys::allocatePage()>
c0016b23:	89 da                	mov    edx,ebx
c0016b25:	c1 e2 0c             	shl    edx,0xc
c0016b28:	01 fa                	add    edx,edi
c0016b2a:	39 c2                	cmp    edx,eax
c0016b2c:	74 22                	je     c0016b50 <Phys::allocateContiguousPages(int)+0x5e>
c0016b2e:	83 fe 01             	cmp    esi,0x1
c0016b31:	bb 01 00 00 00       	mov    ebx,0x1
c0016b36:	89 c7                	mov    edi,eax
c0016b38:	75 e4                	jne    c0016b1e <Phys::allocateContiguousPages(int)+0x2c>
c0016b3a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016b3f:	83 e8 01             	sub    eax,0x1
c0016b42:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016b47:	75 01                	jne    c0016b4a <Phys::allocateContiguousPages(int)+0x58>
c0016b49:	fb                   	sti    
c0016b4a:	5b                   	pop    ebx
c0016b4b:	89 f8                	mov    eax,edi
c0016b4d:	5e                   	pop    esi
c0016b4e:	5f                   	pop    edi
c0016b4f:	c3                   	ret    
c0016b50:	83 c3 01             	add    ebx,0x1
c0016b53:	39 f3                	cmp    ebx,esi
c0016b55:	75 b2                	jne    c0016b09 <Phys::allocateContiguousPages(int)+0x17>
c0016b57:	eb e1                	jmp    c0016b3a <Phys::allocateContiguousPages(int)+0x48>

c0016b59 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016b59:	56                   	push   esi
c0016b5a:	53                   	push   ebx
c0016b5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b5f:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016b65:	73 06                	jae    c0016b6d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016b67:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b71:	c1 eb 0c             	shr    ebx,0xc
c0016b74:	c1 e8 0c             	shr    eax,0xc
c0016b77:	39 d8                	cmp    eax,ebx
c0016b79:	73 13                	jae    c0016b8e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016b7b:	6a 00                	push   0x0
c0016b7d:	50                   	push   eax
c0016b7e:	8d 70 01             	lea    esi,[eax+0x1]
c0016b81:	e8 d8 fd ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016b86:	39 f3                	cmp    ebx,esi
c0016b88:	89 f0                	mov    eax,esi
c0016b8a:	5a                   	pop    edx
c0016b8b:	59                   	pop    ecx
c0016b8c:	75 ed                	jne    c0016b7b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016b8e:	5b                   	pop    ebx
c0016b8f:	5e                   	pop    esi
c0016b90:	c3                   	ret    

c0016b91 <Phys::physicalMemorySetup(unsigned int)>:
c0016b91:	55                   	push   ebp
c0016b92:	57                   	push   edi
c0016b93:	56                   	push   esi
c0016b94:	53                   	push   ebx
c0016b95:	31 db                	xor    ebx,ebx
c0016b97:	83 ec 40             	sub    esp,0x40
c0016b9a:	6a 10                	push   0x10
c0016b9c:	6a 00                	push   0x0
c0016b9e:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016ba3:	e8 48 99 fe ff       	call   c00004f0 <memset>
c0016ba8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016bac:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016bb1:	05 00 10 00 00       	add    eax,0x1000
c0016bb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016bba:	5a                   	pop    edx
c0016bbb:	59                   	pop    ecx
c0016bbc:	50                   	push   eax
c0016bbd:	68 9b 15 03 c0       	push   0xc003159b
c0016bc2:	e8 83 29 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0016bc7:	83 c4 10             	add    esp,0x10
c0016bca:	83 ec 08             	sub    esp,0x8
c0016bcd:	6a 01                	push   0x1
c0016bcf:	53                   	push   ebx
c0016bd0:	83 c3 01             	add    ebx,0x1
c0016bd3:	e8 86 fd ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016be1:	75 e7                	jne    c0016bca <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016be3:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016bea:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016bf1:	c1 e0 08             	shl    eax,0x8
c0016bf4:	09 c2                	or     edx,eax
c0016bf6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0016bfa:	0f 84 43 01 00 00    	je     c0016d43 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0016c00:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c08:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016c0d:	e9 82 00 00 00       	jmp    c0016c94 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0016c12:	ba 00 00 08 00       	mov    edx,0x80000
c0016c17:	89 c1                	mov    ecx,eax
c0016c19:	39 f2                	cmp    edx,esi
c0016c1b:	19 f9                	sbb    ecx,edi
c0016c1d:	0f 82 c0 00 00 00    	jb     c0016ce3 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0016c23:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c27:	89 c5                	mov    ebp,eax
c0016c29:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016c2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c31:	19 cd                	sbb    ebp,ecx
c0016c33:	0f 83 af 00 00 00    	jae    c0016ce8 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0016c39:	89 d6                	mov    esi,edx
c0016c3b:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016c40:	39 f2                	cmp    edx,esi
c0016c42:	89 cf                	mov    edi,ecx
c0016c44:	19 c8                	sbb    eax,ecx
c0016c46:	73 07                	jae    c0016c4f <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0016c48:	be 00 00 0a 00       	mov    esi,0xa0000
c0016c4d:	31 ff                	xor    edi,edi
c0016c4f:	89 f2                	mov    edx,esi
c0016c51:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0016c56:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0016c5c:	89 f9                	mov    ecx,edi
c0016c5e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016c62:	83 d1 ff             	adc    ecx,0xffffffff
c0016c65:	39 d0                	cmp    eax,edx
c0016c67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0016c6b:	b8 00 00 00 00       	mov    eax,0x0
c0016c70:	19 c8                	sbb    eax,ecx
c0016c72:	0f 82 9d 01 00 00    	jb     c0016e15 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0016c78:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016c7c:	83 c3 18             	add    ebx,0x18
c0016c7f:	83 c6 01             	add    esi,0x1
c0016c82:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016c86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c8a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016c8e:	0f 84 bf 00 00 00    	je     c0016d53 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016c94:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016c96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c99:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016c9c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016c9f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016ca3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016ca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016caa:	01 f0                	add    eax,esi
c0016cac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016cb0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016cb4:	55                   	push   ebp
c0016cb5:	11 fa                	adc    edx,edi
c0016cb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cbb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cc3:	50                   	push   eax
c0016cc4:	56                   	push   esi
c0016cc5:	68 38 15 03 c0       	push   0xc0031538
c0016cca:	e8 7b 28 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0016ccf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	09 f8                	or     eax,edi
c0016cd8:	75 79                	jne    c0016d53 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016cda:	83 fd 01             	cmp    ebp,0x1
c0016cdd:	0f 84 2f ff ff ff    	je     c0016c12 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0016ce3:	83 fd 01             	cmp    ebp,0x1
c0016ce6:	75 90                	jne    c0016c78 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016ce8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016cec:	31 d2                	xor    edx,edx
c0016cee:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0016cf2:	89 c8                	mov    eax,ecx
c0016cf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cf8:	19 d1                	sbb    ecx,edx
c0016cfa:	0f 82 78 ff ff ff    	jb     c0016c78 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016d00:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0016d05:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0016d09:	b9 00 00 00 00       	mov    ecx,0x0
c0016d0e:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0016d12:	0f 83 60 ff ff ff    	jae    c0016c78 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016d18:	39 c6                	cmp    esi,eax
c0016d1a:	19 d7                	sbb    edi,edx
c0016d1c:	0f 83 ff 00 00 00    	jae    c0016e21 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016d22:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016d26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016d2a:	29 c7                	sub    edi,eax
c0016d2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d30:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016d34:	19 d5                	sbb    ebp,edx
c0016d36:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016d3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016d3e:	e9 de 00 00 00       	jmp    c0016e21 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	68 b3 15 03 c0       	push   0xc00315b3
c0016d4b:	e8 82 97 00 00       	call   c00204d2 <KePanic(char const*)>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	83 ec 08             	sub    esp,0x8
c0016d56:	bb 60 00 00 00       	mov    ebx,0x60
c0016d5b:	6a 00                	push   0x0
c0016d5d:	6a 06                	push   0x6
c0016d5f:	e8 fa fb ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016d64:	58                   	pop    eax
c0016d65:	5a                   	pop    edx
c0016d66:	6a 00                	push   0x0
c0016d68:	6a 07                	push   0x7
c0016d6a:	e8 ef fb ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016d6f:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	83 c1 02             	add    ecx,0x2
c0016d7b:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016d81:	83 ec 08             	sub    esp,0x8
c0016d84:	6a 00                	push   0x0
c0016d86:	53                   	push   ebx
c0016d87:	83 c3 01             	add    ebx,0x1
c0016d8a:	e8 cf fb ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016d8f:	83 c4 10             	add    esp,0x10
c0016d92:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016d98:	75 e7                	jne    c0016d81 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016d9a:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d9f:	bb 40 01 00 00       	mov    ebx,0x140
c0016da4:	83 c0 20             	add    eax,0x20
c0016da7:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016dac:	eb 26                	jmp    c0016dd4 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016dae:	83 ec 08             	sub    esp,0x8
c0016db1:	6a 00                	push   0x0
c0016db3:	53                   	push   ebx
c0016db4:	83 c3 01             	add    ebx,0x1
c0016db7:	e8 a2 fb ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016dbc:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016dc1:	83 c4 10             	add    esp,0x10
c0016dc4:	83 c0 01             	add    eax,0x1
c0016dc7:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016dcd:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016dd2:	74 07                	je     c0016ddb <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016dd4:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016dd9:	7e d3                	jle    c0016dae <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016ddb:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016de0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016de5:	7f 26                	jg     c0016e0d <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016de7:	83 ec 08             	sub    esp,0x8
c0016dea:	6a 00                	push   0x0
c0016dec:	53                   	push   ebx
c0016ded:	83 c3 01             	add    ebx,0x1
c0016df0:	e8 69 fb ff ff       	call   c001695e <Phys::setPageState(unsigned long, bool)>
c0016df5:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016dfa:	83 c4 10             	add    esp,0x10
c0016dfd:	83 c0 01             	add    eax,0x1
c0016e00:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016e06:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016e0b:	75 d3                	jne    c0016de0 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016e0d:	83 c4 3c             	add    esp,0x3c
c0016e10:	5b                   	pop    ebx
c0016e11:	5e                   	pop    esi
c0016e12:	5f                   	pop    edi
c0016e13:	5d                   	pop    ebp
c0016e14:	c3                   	ret    
c0016e15:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016e19:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016e21:	83 ec 04             	sub    esp,0x4
c0016e24:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016e28:	56                   	push   esi
c0016e29:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e2d:	57                   	push   edi
c0016e2e:	68 5c 15 03 c0       	push   0xc003155c
c0016e33:	e8 12 27 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0016e38:	5d                   	pop    ebp
c0016e39:	58                   	pop    eax
c0016e3a:	56                   	push   esi
c0016e3b:	57                   	push   edi
c0016e3c:	e8 18 fd ff ff       	call   c0016b59 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016e41:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016e45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e49:	83 c4 0c             	add    esp,0xc
c0016e4c:	8b 35 ec a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9ec
c0016e52:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016e56:	01 f0                	add    eax,esi
c0016e58:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016e5d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016e64:	52                   	push   edx
c0016e65:	50                   	push   eax
c0016e66:	68 c1 15 03 c0       	push   0xc00315c1
c0016e6b:	e8 da 26 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0016e70:	83 c4 10             	add    esp,0x10
c0016e73:	e9 00 fe ff ff       	jmp    c0016c78 <Phys::physicalMemorySetup(unsigned int)+0xe7>

c0016e78 <Pipe::isAtty()>:
c0016e78:	31 c0                	xor    eax,eax
c0016e7a:	c3                   	ret    
c0016e7b:	90                   	nop

c0016e7c <Pipe::~Pipe()>:
c0016e7c:	83 ec 0c             	sub    esp,0xc
c0016e7f:	ba 20 16 03 c0       	mov    edx,0xc0031620
c0016e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e88:	89 10                	mov    DWORD PTR [eax],edx
c0016e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e8e:	83 ec 0c             	sub    esp,0xc
c0016e91:	50                   	push   eax
c0016e92:	e8 35 11 00 00       	call   c0017fcc <UnixFile::~UnixFile()>
c0016e97:	83 c4 10             	add    esp,0x10
c0016e9a:	90                   	nop
c0016e9b:	83 c4 0c             	add    esp,0xc
c0016e9e:	c3                   	ret    
c0016e9f:	90                   	nop

c0016ea0 <Pipe::~Pipe()>:
c0016ea0:	83 ec 0c             	sub    esp,0xc
c0016ea3:	83 ec 0c             	sub    esp,0xc
c0016ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eaa:	e8 cd ff ff ff       	call   c0016e7c <Pipe::~Pipe()>
c0016eaf:	83 c4 10             	add    esp,0x10
c0016eb2:	83 ec 08             	sub    esp,0x8
c0016eb5:	6a 20                	push   0x20
c0016eb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ebb:	e8 8c 25 00 00       	call   c001944c <operator delete(void*, unsigned long)>
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	83 c4 0c             	add    esp,0xc
c0016ec6:	c3                   	ret    
c0016ec7:	90                   	nop

c0016ec8 <Pipe::write(unsigned long long, void*, int*)>:
c0016ec8:	55                   	push   ebp
c0016ec9:	57                   	push   edi
c0016eca:	56                   	push   esi
c0016ecb:	53                   	push   ebx
c0016ecc:	83 ec 1c             	sub    esp,0x1c
c0016ecf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ed3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016ed7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016edb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016ede:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ee2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ee8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016eec:	89 d8                	mov    eax,ebx
c0016eee:	89 d6                	mov    esi,edx
c0016ef0:	89 d7                	mov    edi,edx
c0016ef2:	c1 ff 1f             	sar    edi,0x1f
c0016ef5:	03 34 24             	add    esi,DWORD PTR [esp]
c0016ef8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016efc:	c1 f8 1f             	sar    eax,0x1f
c0016eff:	39 f3                	cmp    ebx,esi
c0016f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f09:	19 f8                	sbb    eax,edi
c0016f0b:	b8 01 00 00 00       	mov    eax,0x1
c0016f10:	72 72                	jb     c0016f84 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016f12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016f15:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016f19:	01 d0                	add    eax,edx
c0016f1b:	99                   	cdq    
c0016f1c:	f7 fb                	idiv   ebx
c0016f1e:	89 d8                	mov    eax,ebx
c0016f20:	29 d0                	sub    eax,edx
c0016f22:	89 d6                	mov    esi,edx
c0016f24:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016f27:	89 c3                	mov    ebx,eax
c0016f29:	c1 fb 1f             	sar    ebx,0x1f
c0016f2c:	39 c2                	cmp    edx,eax
c0016f2e:	19 df                	sbb    edi,ebx
c0016f30:	bb 00 00 00 00       	mov    ebx,0x0
c0016f35:	72 04                	jb     c0016f3b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016f37:	89 d3                	mov    ebx,edx
c0016f39:	29 c3                	sub    ebx,eax
c0016f3b:	89 d0                	mov    eax,edx
c0016f3d:	29 d8                	sub    eax,ebx
c0016f3f:	74 0d                	je     c0016f4e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016f41:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016f44:	89 c1                	mov    ecx,eax
c0016f46:	01 f7                	add    edi,esi
c0016f48:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f4e:	85 db                	test   ebx,ebx
c0016f50:	74 0d                	je     c0016f5f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016f52:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016f56:	89 d9                	mov    ecx,ebx
c0016f58:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016f5b:	89 c6                	mov    esi,eax
c0016f5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f5f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016f62:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016f67:	75 10                	jne    c0016f79 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016f69:	83 ec 0c             	sub    esp,0xc
c0016f6c:	68 dd 15 03 c0       	push   0xc00315dd
c0016f71:	e8 5c 95 00 00       	call   c00204d2 <KePanic(char const*)>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f7d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016f80:	89 08                	mov    DWORD PTR [eax],ecx
c0016f82:	31 c0                	xor    eax,eax
c0016f84:	83 c4 1c             	add    esp,0x1c
c0016f87:	5b                   	pop    ebx
c0016f88:	5e                   	pop    esi
c0016f89:	5f                   	pop    edi
c0016f8a:	5d                   	pop    ebp
c0016f8b:	c3                   	ret    

c0016f8c <Pipe::read(unsigned long long, void*, int*)>:
c0016f8c:	55                   	push   ebp
c0016f8d:	57                   	push   edi
c0016f8e:	56                   	push   esi
c0016f8f:	53                   	push   ebx
c0016f90:	83 ec 1c             	sub    esp,0x1c
c0016f93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016f97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016f9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016f9f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016fa2:	89 c8                	mov    eax,ecx
c0016fa4:	99                   	cdq    
c0016fa5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016fa9:	74 24                	je     c0016fcf <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016fab:	39 f9                	cmp    ecx,edi
c0016fad:	89 d1                	mov    ecx,edx
c0016faf:	19 f1                	sbb    ecx,esi
c0016fb1:	73 1c                	jae    c0016fcf <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016fb3:	fa                   	cli    
c0016fb4:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016fba:	e8 75 e5 00 00       	call   c0025534 <schedule()>
c0016fbf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016fc4:	48                   	dec    eax
c0016fc5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016fca:	75 d3                	jne    c0016f9f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016fcc:	fb                   	sti    
c0016fcd:	eb d0                	jmp    c0016f9f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016fcf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016fd3:	39 f8                	cmp    eax,edi
c0016fd5:	89 d1                	mov    ecx,edx
c0016fd7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016fdb:	19 f1                	sbb    ecx,esi
c0016fdd:	73 08                	jae    c0016fe7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016fdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fe3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016fe7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016fea:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016fed:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016ff1:	29 f7                	sub    edi,esi
c0016ff3:	89 f8                	mov    eax,edi
c0016ff5:	99                   	cdq    
c0016ff6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016ffa:	89 d0                	mov    eax,edx
c0016ffc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017000:	19 c2                	sbb    edx,eax
c0017002:	89 f8                	mov    eax,edi
c0017004:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0017009:	89 ea                	mov    edx,ebp
c001700b:	29 c2                	sub    edx,eax
c001700d:	85 c0                	test   eax,eax
c001700f:	74 0b                	je     c001701c <Pipe::read(unsigned long long, void*, int*)+0x90>
c0017011:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017014:	89 c1                	mov    ecx,eax
c0017016:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001701a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001701c:	85 d2                	test   edx,edx
c001701e:	74 0d                	je     c001702d <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0017020:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017024:	89 d1                	mov    ecx,edx
c0017026:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0017029:	89 c7                	mov    edi,eax
c001702b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001702d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017030:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0017033:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0017036:	99                   	cdq    
c0017037:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001703b:	89 f7                	mov    edi,esi
c001703d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0017041:	c1 ff 1f             	sar    edi,0x1f
c0017044:	57                   	push   edi
c0017045:	56                   	push   esi
c0017046:	52                   	push   edx
c0017047:	50                   	push   eax
c0017048:	e8 43 7a 01 00       	call   c002ea90 <__umoddi3>
c001704d:	83 c4 10             	add    esp,0x10
c0017050:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0017055:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017058:	75 10                	jne    c001706a <Pipe::read(unsigned long long, void*, int*)+0xde>
c001705a:	83 ec 0c             	sub    esp,0xc
c001705d:	68 fa 15 03 c0       	push   0xc00315fa
c0017062:	e8 6b 94 00 00       	call   c00204d2 <KePanic(char const*)>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001706e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017072:	89 10                	mov    DWORD PTR [eax],edx
c0017074:	83 c4 1c             	add    esp,0x1c
c0017077:	31 c0                	xor    eax,eax
c0017079:	5b                   	pop    ebx
c001707a:	5e                   	pop    esi
c001707b:	5f                   	pop    edi
c001707c:	5d                   	pop    ebp
c001707d:	c3                   	ret    

c001707e <Pipe::Pipe(int)>:
c001707e:	83 ec 0c             	sub    esp,0xc
c0017081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017085:	83 ec 08             	sub    esp,0x8
c0017088:	6a 00                	push   0x0
c001708a:	50                   	push   eax
c001708b:	e8 56 0d 00 00       	call   c0017de6 <UnixFile::UnixFile(int)>
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	ba 20 16 03 c0       	mov    edx,0xc0031620
c0017098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001709c:	89 10                	mov    DWORD PTR [eax],edx
c001709e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00170a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00170a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00170b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00170bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170c3:	83 ec 0c             	sub    esp,0xc
c00170c6:	50                   	push   eax
c00170c7:	e8 48 f6 ff ff       	call   c0016714 <malloc>
c00170cc:	83 c4 10             	add    esp,0x10
c00170cf:	89 c2                	mov    edx,eax
c00170d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00170e0:	90                   	nop
c00170e1:	83 c4 0c             	add    esp,0xc
c00170e4:	c3                   	ret    
c00170e5:	90                   	nop

c00170e6 <VgaText::isAtty()>:
c00170e6:	b0 01                	mov    al,0x1
c00170e8:	c3                   	ret    
c00170e9:	90                   	nop

c00170ea <VgaText::~VgaText()>:
c00170ea:	83 ec 0c             	sub    esp,0xc
c00170ed:	ba 68 16 03 c0       	mov    edx,0xc0031668
c00170f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170f6:	89 10                	mov    DWORD PTR [eax],edx
c00170f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170fc:	83 ec 0c             	sub    esp,0xc
c00170ff:	50                   	push   eax
c0017100:	e8 c7 0e 00 00       	call   c0017fcc <UnixFile::~UnixFile()>
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	90                   	nop
c0017109:	83 c4 0c             	add    esp,0xc
c001710c:	c3                   	ret    
c001710d:	90                   	nop

c001710e <VgaText::~VgaText()>:
c001710e:	83 ec 0c             	sub    esp,0xc
c0017111:	83 ec 0c             	sub    esp,0xc
c0017114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017118:	e8 cd ff ff ff       	call   c00170ea <VgaText::~VgaText()>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	83 ec 08             	sub    esp,0x8
c0017123:	68 84 01 00 00       	push   0x184
c0017128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001712c:	e8 1b 23 00 00       	call   c001944c <operator delete(void*, unsigned long)>
c0017131:	83 c4 10             	add    esp,0x10
c0017134:	83 c4 0c             	add    esp,0xc
c0017137:	c3                   	ret    

c0017138 <VgaText::read(unsigned long long, void*, int*)>:
c0017138:	83 ec 10             	sub    esp,0x10
c001713b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001713f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017147:	e8 82 53 00 00       	call   c001c4ce <readKeyboard(VgaText*, char*, unsigned long)>
c001714c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017150:	89 02                	mov    DWORD PTR [edx],eax
c0017152:	31 c0                	xor    eax,eax
c0017154:	83 c4 1c             	add    esp,0x1c
c0017157:	c3                   	ret    

c0017158 <setTerminalScrollLock(bool)>:
c0017158:	c3                   	ret    

c0017159 <doTerminalCycle()>:
c0017159:	c3                   	ret    

c001715a <addToTerminalCycle(VgaText*)>:
c001715a:	c3                   	ret    

c001715b <scrollTerminalScrollLock(int)>:
c001715b:	c3                   	ret    

c001715c <VgaText::updateTitle()>:
c001715c:	c3                   	ret    
c001715d:	90                   	nop

c001715e <VgaText::load()>:
c001715e:	c3                   	ret    
c001715f:	90                   	nop

c0017160 <VgaText::updateCursor()>:
c0017160:	83 ec 14             	sub    esp,0x14
c0017163:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017167:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001716a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001716d:	e8 ca 0e 01 00       	call   c002803c <HalConsoleCursorUpdate(int, int)>
c0017172:	83 c4 1c             	add    esp,0x1c
c0017175:	c3                   	ret    

c0017176 <VgaText::doANSI_SGR(int)>:
c0017176:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001717e:	85 d2                	test   edx,edx
c0017180:	75 0b                	jne    c001718d <VgaText::doANSI_SGR(int)+0x17>
c0017182:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0017185:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017188:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001718b:	eb 59                	jmp    c00171e6 <VgaText::doANSI_SGR(int)+0x70>
c001718d:	83 fa 07             	cmp    edx,0x7
c0017190:	75 0b                	jne    c001719d <VgaText::doANSI_SGR(int)+0x27>
c0017192:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0017195:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0017198:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001719b:	eb 49                	jmp    c00171e6 <VgaText::doANSI_SGR(int)+0x70>
c001719d:	83 fa 1b             	cmp    edx,0x1b
c00171a0:	74 e0                	je     c0017182 <VgaText::doANSI_SGR(int)+0xc>
c00171a2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00171a5:	83 f9 07             	cmp    ecx,0x7
c00171a8:	77 09                	ja     c00171b3 <VgaText::doANSI_SGR(int)+0x3d>
c00171aa:	8b 14 8d 60 3f 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc0a0]
c00171b1:	eb 20                	jmp    c00171d3 <VgaText::doANSI_SGR(int)+0x5d>
c00171b3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00171b6:	83 f9 07             	cmp    ecx,0x7
c00171b9:	77 09                	ja     c00171c4 <VgaText::doANSI_SGR(int)+0x4e>
c00171bb:	8b 14 8d 60 3f 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc0a0]
c00171c2:	eb 22                	jmp    c00171e6 <VgaText::doANSI_SGR(int)+0x70>
c00171c4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00171c7:	83 f9 07             	cmp    ecx,0x7
c00171ca:	77 0b                	ja     c00171d7 <VgaText::doANSI_SGR(int)+0x61>
c00171cc:	8b 14 95 18 3e 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc1e8]
c00171d3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00171d6:	c3                   	ret    
c00171d7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00171da:	83 f9 07             	cmp    ecx,0x7
c00171dd:	77 0a                	ja     c00171e9 <VgaText::doANSI_SGR(int)+0x73>
c00171df:	8b 14 95 f0 3d 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc210]
c00171e6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00171e9:	c3                   	ret    

c00171ea <VgaText::setDefaultBgColour(VgaColour)>:
c00171ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00171f5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00171f8:	c3                   	ret    
c00171f9:	90                   	nop

c00171fa <VgaText::setDefaultFgColour(VgaColour)>:
c00171fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017202:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0017205:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017208:	c3                   	ret    
c0017209:	90                   	nop

c001720a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001720a:	53                   	push   ebx
c001720b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001720f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0017213:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017217:	51                   	push   ecx
c0017218:	e8 cd ff ff ff       	call   c00171ea <VgaText::setDefaultBgColour(VgaColour)>
c001721d:	58                   	pop    eax
c001721e:	5a                   	pop    edx
c001721f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017223:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017227:	5b                   	pop    ebx
c0017228:	eb d0                	jmp    c00171fa <VgaText::setDefaultFgColour(VgaColour)>

c001722a <VgaText::setTitleTextColour(VgaColour)>:
c001722a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001722e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017232:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017235:	c3                   	ret    

c0017236 <VgaText::setTitleColour(VgaColour)>:
c0017236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001723a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001723e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017241:	c3                   	ret    

c0017242 <VgaText::setTitle(char*)>:
c0017242:	c3                   	ret    
c0017243:	90                   	nop

c0017244 <VgaText::combineColours(unsigned char, unsigned char)>:
c0017244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017248:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001724d:	83 e0 0f             	and    eax,0xf
c0017250:	c1 e2 04             	shl    edx,0x4
c0017253:	09 d0                	or     eax,edx
c0017255:	c3                   	ret    

c0017256 <VgaText::scrollScreen()>:
c0017256:	55                   	push   ebp
c0017257:	57                   	push   edi
c0017258:	56                   	push   esi
c0017259:	be 01 00 00 00       	mov    esi,0x1
c001725e:	53                   	push   ebx
c001725f:	83 ec 0c             	sub    esp,0xc
c0017262:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017266:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0017269:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001726f:	31 ff                	xor    edi,edi
c0017271:	01 e9                	add    ecx,ebp
c0017273:	8a 01                	mov    al,BYTE PTR [ecx]
c0017275:	83 fe 18             	cmp    esi,0x18
c0017278:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001727e:	75 20                	jne    c00172a0 <VgaText::scrollScreen()+0x4a>
c0017280:	f7 c7 01 00 00 00    	test   edi,0x1
c0017286:	74 15                	je     c001729d <VgaText::scrollScreen()+0x47>
c0017288:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001728c:	50                   	push   eax
c001728d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017291:	50                   	push   eax
c0017292:	e8 ad ff ff ff       	call   c0017244 <VgaText::combineColours(unsigned char, unsigned char)>
c0017297:	5a                   	pop    edx
c0017298:	5a                   	pop    edx
c0017299:	88 01                	mov    BYTE PTR [ecx],al
c001729b:	eb 03                	jmp    c00172a0 <VgaText::scrollScreen()+0x4a>
c001729d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00172a0:	47                   	inc    edi
c00172a1:	41                   	inc    ecx
c00172a2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00172a8:	75 c9                	jne    c0017273 <VgaText::scrollScreen()+0x1d>
c00172aa:	46                   	inc    esi
c00172ab:	83 fe 19             	cmp    esi,0x19
c00172ae:	75 b9                	jne    c0017269 <VgaText::scrollScreen()+0x13>
c00172b0:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c00172b6:	75 1f                	jne    c00172d7 <VgaText::scrollScreen()+0x81>
c00172b8:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00172bc:	74 05                	je     c00172c3 <VgaText::scrollScreen()+0x6d>
c00172be:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00172c1:	eb 14                	jmp    c00172d7 <VgaText::scrollScreen()+0x81>
c00172c3:	50                   	push   eax
c00172c4:	50                   	push   eax
c00172c5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00172c9:	50                   	push   eax
c00172ca:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00172ce:	50                   	push   eax
c00172cf:	e8 fc 0b 01 00       	call   c0027ed0 <HalConsoleScroll(int, int)>
c00172d4:	83 c4 10             	add    esp,0x10
c00172d7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00172db:	83 c4 0c             	add    esp,0xc
c00172de:	5b                   	pop    ebx
c00172df:	5e                   	pop    esi
c00172e0:	5f                   	pop    edi
c00172e1:	5d                   	pop    ebp
c00172e2:	e9 79 fe ff ff       	jmp    c0017160 <VgaText::updateCursor()>
c00172e7:	90                   	nop

c00172e8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00172e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00172ed:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00172f2:	c1 e0 08             	shl    eax,0x8
c00172f5:	09 d0                	or     eax,edx
c00172f7:	c3                   	ret    

c00172f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00172f8:	55                   	push   ebp
c00172f9:	57                   	push   edi
c00172fa:	56                   	push   esi
c00172fb:	53                   	push   ebx
c00172fc:	83 ec 1c             	sub    esp,0x1c
c00172ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017303:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017307:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001730b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001730f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017313:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017317:	0f b6 c3             	movzx  eax,bl
c001731a:	50                   	push   eax
c001731b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017320:	50                   	push   eax
c0017321:	e8 1e ff ff ff       	call   c0017244 <VgaText::combineColours(unsigned char, unsigned char)>
c0017326:	5a                   	pop    edx
c0017327:	59                   	pop    ecx
c0017328:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c001732d:	0f b6 c0             	movzx  eax,al
c0017330:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017334:	50                   	push   eax
c0017335:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017339:	e8 aa ff ff ff       	call   c00172e8 <VgaText::combineCharAndColour(char, unsigned char)>
c001733e:	5a                   	pop    edx
c001733f:	6b d7 50             	imul   edx,edi,0x50
c0017342:	59                   	pop    ecx
c0017343:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017346:	01 f2                	add    edx,esi
c0017348:	0f b7 d2             	movzx  edx,dx
c001734b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c001734f:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0017355:	75 28                	jne    c001737f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017357:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001735b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001735f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0017363:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017367:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001736b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001736f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017373:	83 c4 1c             	add    esp,0x1c
c0017376:	5b                   	pop    ebx
c0017377:	5e                   	pop    esi
c0017378:	5f                   	pop    edi
c0017379:	5d                   	pop    ebp
c001737a:	e9 59 0c 01 00       	jmp    c0027fd8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001737f:	83 c4 1c             	add    esp,0x1c
c0017382:	5b                   	pop    ebx
c0017383:	5e                   	pop    esi
c0017384:	5f                   	pop    edi
c0017385:	5d                   	pop    ebp
c0017386:	c3                   	ret    
c0017387:	90                   	nop

c0017388 <VgaText::getCursorX()>:
c0017388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001738c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001738f:	c3                   	ret    

c0017390 <VgaText::getCursorY()>:
c0017390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017394:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017397:	c3                   	ret    

c0017398 <VgaText::setCursor(int, int)>:
c0017398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001739c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00173a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00173a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00173aa:	e9 b1 fd ff ff       	jmp    c0017160 <VgaText::updateCursor()>

c00173af <setActiveTerminal(VgaText*)>:
c00173af:	53                   	push   ebx
c00173b0:	83 ec 08             	sub    esp,0x8
c00173b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173b7:	85 db                	test   ebx,ebx
c00173b9:	75 11                	jne    c00173cc <setActiveTerminal(VgaText*)+0x1d>
c00173bb:	c7 44 24 10 34 16 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031634
c00173c3:	83 c4 08             	add    esp,0x8
c00173c6:	5b                   	pop    ebx
c00173c7:	e9 06 91 00 00       	jmp    c00204d2 <KePanic(char const*)>
c00173cc:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c00173d1:	85 c0                	test   eax,eax
c00173d3:	74 0c                	je     c00173e1 <setActiveTerminal(VgaText*)+0x32>
c00173d5:	83 ec 0c             	sub    esp,0xc
c00173d8:	50                   	push   eax
c00173d9:	e8 82 fd ff ff       	call   c0017160 <VgaText::updateCursor()>
c00173de:	83 c4 10             	add    esp,0x10
c00173e1:	50                   	push   eax
c00173e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00173e5:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c00173eb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00173ee:	53                   	push   ebx
c00173ef:	e8 a4 ff ff ff       	call   c0017398 <VgaText::setCursor(int, int)>
c00173f4:	83 c4 18             	add    esp,0x18
c00173f7:	5b                   	pop    ebx
c00173f8:	c3                   	ret    
c00173f9:	90                   	nop

c00173fa <VgaText::clearScreen()>:
c00173fa:	57                   	push   edi
c00173fb:	56                   	push   esi
c00173fc:	31 f6                	xor    esi,esi
c00173fe:	53                   	push   ebx
c00173ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017403:	52                   	push   edx
c0017404:	6a 00                	push   0x0
c0017406:	6a 00                	push   0x0
c0017408:	53                   	push   ebx
c0017409:	e8 8a ff ff ff       	call   c0017398 <VgaText::setCursor(int, int)>
c001740e:	83 c4 10             	add    esp,0x10
c0017411:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017418:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001741b:	7e 20                	jle    c001743d <VgaText::clearScreen()+0x43>
c001741d:	31 ff                	xor    edi,edi
c001741f:	50                   	push   eax
c0017420:	50                   	push   eax
c0017421:	56                   	push   esi
c0017422:	57                   	push   edi
c0017423:	47                   	inc    edi
c0017424:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017427:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001742a:	6a 20                	push   0x20
c001742c:	53                   	push   ebx
c001742d:	e8 c6 fe ff ff       	call   c00172f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017432:	83 c4 20             	add    esp,0x20
c0017435:	83 ff 50             	cmp    edi,0x50
c0017438:	75 e5                	jne    c001741f <VgaText::clearScreen()+0x25>
c001743a:	46                   	inc    esi
c001743b:	eb db                	jmp    c0017418 <VgaText::clearScreen()+0x1e>
c001743d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017444:	5b                   	pop    ebx
c0017445:	5e                   	pop    esi
c0017446:	5f                   	pop    edi
c0017447:	c3                   	ret    

c0017448 <VgaText::setCursorX(int)>:
c0017448:	83 ec 10             	sub    esp,0x10
c001744b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001744f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017456:	50                   	push   eax
c0017457:	e8 3c ff ff ff       	call   c0017398 <VgaText::setCursor(int, int)>
c001745c:	83 c4 1c             	add    esp,0x1c
c001745f:	c3                   	ret    

c0017460 <VgaText::setCursorY(int)>:
c0017460:	83 ec 10             	sub    esp,0x10
c0017463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001746b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001746e:	50                   	push   eax
c001746f:	e8 24 ff ff ff       	call   c0017398 <VgaText::setCursor(int, int)>
c0017474:	83 c4 1c             	add    esp,0x1c
c0017477:	c3                   	ret    

c0017478 <VgaText::incrementCursor(bool)>:
c0017478:	56                   	push   esi
c0017479:	53                   	push   ebx
c001747a:	51                   	push   ecx
c001747b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001747f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017486:	40                   	inc    eax
c0017487:	83 f8 50             	cmp    eax,0x50
c001748a:	74 05                	je     c0017491 <VgaText::incrementCursor(bool)+0x19>
c001748c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001748f:	eb 24                	jmp    c00174b5 <VgaText::incrementCursor(bool)+0x3d>
c0017491:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017498:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001749b:	8d 50 01             	lea    edx,[eax+0x1]
c001749e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00174a1:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00174a4:	75 0f                	jne    c00174b5 <VgaText::incrementCursor(bool)+0x3d>
c00174a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00174a9:	83 ec 0c             	sub    esp,0xc
c00174ac:	53                   	push   ebx
c00174ad:	e8 a4 fd ff ff       	call   c0017256 <VgaText::scrollScreen()>
c00174b2:	83 c4 10             	add    esp,0x10
c00174b5:	89 f0                	mov    eax,esi
c00174b7:	84 c0                	test   al,al
c00174b9:	74 0c                	je     c00174c7 <VgaText::incrementCursor(bool)+0x4f>
c00174bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00174bf:	5a                   	pop    edx
c00174c0:	5b                   	pop    ebx
c00174c1:	5e                   	pop    esi
c00174c2:	e9 99 fc ff ff       	jmp    c0017160 <VgaText::updateCursor()>
c00174c7:	58                   	pop    eax
c00174c8:	5b                   	pop    ebx
c00174c9:	5e                   	pop    esi
c00174ca:	c3                   	ret    
c00174cb:	90                   	nop

c00174cc <VgaText::decrementCursor(bool)>:
c00174cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00174d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174d4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00174d7:	85 c0                	test   eax,eax
c00174d9:	74 04                	je     c00174df <VgaText::decrementCursor(bool)+0x13>
c00174db:	48                   	dec    eax
c00174dc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00174df:	84 c9                	test   cl,cl
c00174e1:	74 09                	je     c00174ec <VgaText::decrementCursor(bool)+0x20>
c00174e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00174e7:	e9 74 fc ff ff       	jmp    c0017160 <VgaText::updateCursor()>
c00174ec:	c3                   	ret    
c00174ed:	90                   	nop

c00174ee <VgaText::putchar(char, VgaColour, VgaColour)>:
c00174ee:	53                   	push   ebx
c00174ef:	83 ec 08             	sub    esp,0x8
c00174f2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00174f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00174fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00174ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017503:	83 f8 07             	cmp    eax,0x7
c0017506:	75 21                	jne    c0017529 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0017508:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017510:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0017518:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0017520:	83 c4 08             	add    esp,0x8
c0017523:	5b                   	pop    ebx
c0017524:	e9 d6 3a 00 00       	jmp    c001afff <Krnl::beep(int, int, bool)>
c0017529:	83 f8 0d             	cmp    eax,0xd
c001752c:	75 09                	jne    c0017537 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001752e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017535:	eb 2d                	jmp    c0017564 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0017537:	83 f8 0a             	cmp    eax,0xa
c001753a:	75 31                	jne    c001756d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001753c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017543:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017546:	8d 50 01             	lea    edx,[eax+0x1]
c0017549:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001754c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001754f:	75 0f                	jne    c0017560 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0017551:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017554:	83 ec 0c             	sub    esp,0xc
c0017557:	53                   	push   ebx
c0017558:	e8 f9 fc ff ff       	call   c0017256 <VgaText::scrollScreen()>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017564:	83 c4 08             	add    esp,0x8
c0017567:	5b                   	pop    ebx
c0017568:	e9 f3 fb ff ff       	jmp    c0017160 <VgaText::updateCursor()>
c001756d:	83 f8 08             	cmp    eax,0x8
c0017570:	75 25                	jne    c0017597 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017572:	50                   	push   eax
c0017573:	50                   	push   eax
c0017574:	6a 01                	push   0x1
c0017576:	53                   	push   ebx
c0017577:	e8 50 ff ff ff       	call   c00174cc <VgaText::decrementCursor(bool)>
c001757c:	5a                   	pop    edx
c001757d:	59                   	pop    ecx
c001757e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017581:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017584:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017587:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001758a:	6a 20                	push   0x20
c001758c:	53                   	push   ebx
c001758d:	e8 66 fd ff ff       	call   c00172f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017592:	83 c4 28             	add    esp,0x28
c0017595:	5b                   	pop    ebx
c0017596:	c3                   	ret    
c0017597:	83 ec 08             	sub    esp,0x8
c001759a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001759d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00175a0:	51                   	push   ecx
c00175a1:	52                   	push   edx
c00175a2:	50                   	push   eax
c00175a3:	53                   	push   ebx
c00175a4:	e8 4f fd ff ff       	call   c00172f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00175a9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00175ad:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00175b5:	83 c4 28             	add    esp,0x28
c00175b8:	5b                   	pop    ebx
c00175b9:	e9 ba fe ff ff       	jmp    c0017478 <VgaText::incrementCursor(bool)>

c00175be <VgaText::putchar(char)>:
c00175be:	57                   	push   edi
c00175bf:	56                   	push   esi
c00175c0:	53                   	push   ebx
c00175c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00175c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00175c9:	0f be c2             	movsx  eax,dl
c00175cc:	83 f8 5b             	cmp    eax,0x5b
c00175cf:	75 18                	jne    c00175e9 <VgaText::putchar(char)+0x2b>
c00175d1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00175d5:	74 20                	je     c00175f7 <VgaText::putchar(char)+0x39>
c00175d7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00175dd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00175e4:	e9 b8 00 00 00       	jmp    c00176a1 <VgaText::putchar(char)+0xe3>
c00175e9:	83 f8 1b             	cmp    eax,0x1b
c00175ec:	75 09                	jne    c00175f7 <VgaText::putchar(char)+0x39>
c00175ee:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00175f2:	e9 aa 00 00 00       	jmp    c00176a1 <VgaText::putchar(char)+0xe3>
c00175f7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00175fb:	89 f9                	mov    ecx,edi
c00175fd:	84 c9                	test   cl,cl
c00175ff:	0f 84 8c 00 00 00    	je     c0017691 <VgaText::putchar(char)+0xd3>
c0017605:	8d 4a c0             	lea    ecx,[edx-0x40]
c0017608:	80 f9 3e             	cmp    cl,0x3e
c001760b:	77 70                	ja     c001767d <VgaText::putchar(char)+0xbf>
c001760d:	83 f8 6d             	cmp    eax,0x6d
c0017610:	75 3f                	jne    c0017651 <VgaText::putchar(char)+0x93>
c0017612:	31 f6                	xor    esi,esi
c0017614:	31 d2                	xor    edx,edx
c0017616:	31 c0                	xor    eax,eax
c0017618:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001761b:	7e 25                	jle    c0017642 <VgaText::putchar(char)+0x84>
c001761d:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0017622:	83 fa 3b             	cmp    edx,0x3b
c0017625:	75 0f                	jne    c0017636 <VgaText::putchar(char)+0x78>
c0017627:	50                   	push   eax
c0017628:	53                   	push   ebx
c0017629:	e8 48 fb ff ff       	call   c0017176 <VgaText::doANSI_SGR(int)>
c001762e:	31 d2                	xor    edx,edx
c0017630:	59                   	pop    ecx
c0017631:	58                   	pop    eax
c0017632:	31 c0                	xor    eax,eax
c0017634:	eb 09                	jmp    c001763f <VgaText::putchar(char)+0x81>
c0017636:	6b c0 0a             	imul   eax,eax,0xa
c0017639:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001763d:	89 fa                	mov    edx,edi
c001763f:	46                   	inc    esi
c0017640:	eb d6                	jmp    c0017618 <VgaText::putchar(char)+0x5a>
c0017642:	84 d2                	test   dl,dl
c0017644:	74 2f                	je     c0017675 <VgaText::putchar(char)+0xb7>
c0017646:	50                   	push   eax
c0017647:	53                   	push   ebx
c0017648:	e8 29 fb ff ff       	call   c0017176 <VgaText::doANSI_SGR(int)>
c001764d:	58                   	pop    eax
c001764e:	5a                   	pop    edx
c001764f:	eb 24                	jmp    c0017675 <VgaText::putchar(char)+0xb7>
c0017651:	83 f8 4a             	cmp    eax,0x4a
c0017654:	75 1f                	jne    c0017675 <VgaText::putchar(char)+0xb7>
c0017656:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001765a:	75 19                	jne    c0017675 <VgaText::putchar(char)+0xb7>
c001765c:	83 ec 0c             	sub    esp,0xc
c001765f:	53                   	push   ebx
c0017660:	e8 95 fd ff ff       	call   c00173fa <VgaText::clearScreen()>
c0017665:	83 c4 0c             	add    esp,0xc
c0017668:	6a 00                	push   0x0
c001766a:	6a 00                	push   0x0
c001766c:	53                   	push   ebx
c001766d:	e8 26 fd ff ff       	call   c0017398 <VgaText::setCursor(int, int)>
c0017672:	83 c4 10             	add    esp,0x10
c0017675:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001767b:	eb 24                	jmp    c00176a1 <VgaText::putchar(char)+0xe3>
c001767d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017680:	83 f8 0e             	cmp    eax,0xe
c0017683:	7f 1c                	jg     c00176a1 <VgaText::putchar(char)+0xe3>
c0017685:	8d 48 01             	lea    ecx,[eax+0x1]
c0017688:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001768b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001768f:	eb 10                	jmp    c00176a1 <VgaText::putchar(char)+0xe3>
c0017691:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017694:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017697:	50                   	push   eax
c0017698:	53                   	push   ebx
c0017699:	e8 50 fe ff ff       	call   c00174ee <VgaText::putchar(char, VgaColour, VgaColour)>
c001769e:	83 c4 10             	add    esp,0x10
c00176a1:	5b                   	pop    ebx
c00176a2:	5e                   	pop    esi
c00176a3:	5f                   	pop    edi
c00176a4:	c3                   	ret    
c00176a5:	90                   	nop

c00176a6 <VgaText::putx(unsigned int)>:
c00176a6:	57                   	push   edi
c00176a7:	b9 11 00 00 00       	mov    ecx,0x11
c00176ac:	56                   	push   esi
c00176ad:	be 42 16 03 c0       	mov    esi,0xc0031642
c00176b2:	53                   	push   ebx
c00176b3:	83 ec 20             	sub    esp,0x20
c00176b6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00176ba:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00176be:	fc                   	cld    
c00176bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00176c1:	be 08 00 00 00       	mov    esi,0x8
c00176c6:	50                   	push   eax
c00176c7:	50                   	push   eax
c00176c8:	89 d8                	mov    eax,ebx
c00176ca:	c1 e8 1c             	shr    eax,0x1c
c00176cd:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00176d2:	c1 e3 04             	shl    ebx,0x4
c00176d5:	50                   	push   eax
c00176d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00176da:	e8 df fe ff ff       	call   c00175be <VgaText::putchar(char)>
c00176df:	83 c4 10             	add    esp,0x10
c00176e2:	4e                   	dec    esi
c00176e3:	75 e1                	jne    c00176c6 <VgaText::putx(unsigned int)+0x20>
c00176e5:	83 c4 20             	add    esp,0x20
c00176e8:	5b                   	pop    ebx
c00176e9:	5e                   	pop    esi
c00176ea:	5f                   	pop    edi
c00176eb:	c3                   	ret    

c00176ec <VgaText::puts(char const*)>:
c00176ec:	53                   	push   ebx
c00176ed:	83 ec 08             	sub    esp,0x8
c00176f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00176f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00176f7:	85 c0                	test   eax,eax
c00176f9:	74 12                	je     c001770d <VgaText::puts(char const*)+0x21>
c00176fb:	51                   	push   ecx
c00176fc:	43                   	inc    ebx
c00176fd:	51                   	push   ecx
c00176fe:	50                   	push   eax
c00176ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017703:	e8 b6 fe ff ff       	call   c00175be <VgaText::putchar(char)>
c0017708:	83 c4 10             	add    esp,0x10
c001770b:	eb e7                	jmp    c00176f4 <VgaText::puts(char const*)+0x8>
c001770d:	83 c4 08             	add    esp,0x8
c0017710:	5b                   	pop    ebx
c0017711:	c3                   	ret    

c0017712 <VgaText::write(unsigned long long, void*, int*)>:
c0017712:	55                   	push   ebp
c0017713:	57                   	push   edi
c0017714:	56                   	push   esi
c0017715:	53                   	push   ebx
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001771d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017721:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017725:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001772c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001772f:	39 eb                	cmp    ebx,ebp
c0017731:	74 13                	je     c0017746 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0017733:	50                   	push   eax
c0017734:	43                   	inc    ebx
c0017735:	50                   	push   eax
c0017736:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001773a:	50                   	push   eax
c001773b:	56                   	push   esi
c001773c:	e8 7d fe ff ff       	call   c00175be <VgaText::putchar(char)>
c0017741:	83 c4 10             	add    esp,0x10
c0017744:	eb e9                	jmp    c001772f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017746:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001774d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017751:	89 38                	mov    DWORD PTR [eax],edi
c0017753:	83 c4 0c             	add    esp,0xc
c0017756:	31 c0                	xor    eax,eax
c0017758:	5b                   	pop    ebx
c0017759:	5e                   	pop    esi
c001775a:	5f                   	pop    edi
c001775b:	5d                   	pop    ebp
c001775c:	c3                   	ret    
c001775d:	90                   	nop

c001775e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001775e:	55                   	push   ebp
c001775f:	57                   	push   edi
c0017760:	56                   	push   esi
c0017761:	53                   	push   ebx
c0017762:	83 ec 0c             	sub    esp,0xc
c0017765:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017769:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001776e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0017775:	50                   	push   eax
c0017776:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001777b:	50                   	push   eax
c001777c:	e8 c3 fa ff ff       	call   c0017244 <VgaText::combineColours(unsigned char, unsigned char)>
c0017781:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017785:	5a                   	pop    edx
c0017786:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017789:	59                   	pop    ecx
c001778a:	0f b6 f8             	movzx  edi,al
c001778d:	0f b7 db             	movzx  ebx,bx
c0017790:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017794:	01 db                	add    ebx,ebx
c0017796:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017799:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001779c:	85 c0                	test   eax,eax
c001779e:	0f 84 ef 00 00 00    	je     c0017893 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c00177a4:	83 f8 0d             	cmp    eax,0xd
c00177a7:	75 0c                	jne    c00177b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c00177a9:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c00177b0:	e9 d8 00 00 00       	jmp    c001788d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00177b5:	83 f8 0a             	cmp    eax,0xa
c00177b8:	75 44                	jne    c00177fe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c00177ba:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c00177c1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00177c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00177c7:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c00177ca:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00177cd:	75 0f                	jne    c00177de <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00177cf:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00177d2:	83 ec 0c             	sub    esp,0xc
c00177d5:	55                   	push   ebp
c00177d6:	e8 7b fa ff ff       	call   c0017256 <VgaText::scrollScreen()>
c00177db:	83 c4 10             	add    esp,0x10
c00177de:	83 ec 0c             	sub    esp,0xc
c00177e1:	55                   	push   ebp
c00177e2:	e8 79 f9 ff ff       	call   c0017160 <VgaText::updateCursor()>
c00177e7:	83 c4 10             	add    esp,0x10
c00177ea:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00177ee:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00177f1:	0f b7 db             	movzx  ebx,bx
c00177f4:	01 db                	add    ebx,ebx
c00177f6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00177f9:	e9 8f 00 00 00       	jmp    c001788d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00177fe:	83 f8 08             	cmp    eax,0x8
c0017801:	75 34                	jne    c0017837 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0017803:	51                   	push   ecx
c0017804:	51                   	push   ecx
c0017805:	6a 01                	push   0x1
c0017807:	55                   	push   ebp
c0017808:	e8 bf fc ff ff       	call   c00174cc <VgaText::decrementCursor(bool)>
c001780d:	5b                   	pop    ebx
c001780e:	58                   	pop    eax
c001780f:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0017812:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0017815:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0017818:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c001781b:	6a 20                	push   0x20
c001781d:	55                   	push   ebp
c001781e:	e8 d5 fa ff ff       	call   c00172f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017823:	83 c4 20             	add    esp,0x20
c0017826:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001782a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001782d:	0f b7 db             	movzx  ebx,bx
c0017830:	01 db                	add    ebx,ebx
c0017832:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017835:	eb 56                	jmp    c001788d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017837:	52                   	push   edx
c0017838:	52                   	push   edx
c0017839:	57                   	push   edi
c001783a:	50                   	push   eax
c001783b:	e8 a8 fa ff ff       	call   c00172e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	66 89 03             	mov    WORD PTR [ebx],ax
c0017846:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c001784c:	75 1d                	jne    c001786b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c001784e:	83 ec 0c             	sub    esp,0xc
c0017851:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0017854:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0017857:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001785b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001785f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017862:	50                   	push   eax
c0017863:	e8 70 07 01 00       	call   c0027fd8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017868:	83 c4 20             	add    esp,0x20
c001786b:	50                   	push   eax
c001786c:	83 c3 02             	add    ebx,0x2
c001786f:	50                   	push   eax
c0017870:	6a 00                	push   0x0
c0017872:	55                   	push   ebp
c0017873:	e8 00 fc ff ff       	call   c0017478 <VgaText::incrementCursor(bool)>
c0017878:	83 c4 10             	add    esp,0x10
c001787b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c001787f:	75 0c                	jne    c001788d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017881:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017885:	0f b7 db             	movzx  ebx,bx
c0017888:	01 db                	add    ebx,ebx
c001788a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001788d:	46                   	inc    esi
c001788e:	e9 06 ff ff ff       	jmp    c0017799 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017893:	83 ec 0c             	sub    esp,0xc
c0017896:	55                   	push   ebp
c0017897:	e8 c4 f8 ff ff       	call   c0017160 <VgaText::updateCursor()>
c001789c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c00178a3:	83 c4 1c             	add    esp,0x1c
c00178a6:	5b                   	pop    ebx
c00178a7:	5e                   	pop    esi
c00178a8:	5f                   	pop    edi
c00178a9:	5d                   	pop    ebp
c00178aa:	c3                   	ret    
c00178ab:	90                   	nop

c00178ac <VgaText::VgaText(char const*)>:
c00178ac:	56                   	push   esi
c00178ad:	53                   	push   ebx
c00178ae:	83 ec 04             	sub    esp,0x4
c00178b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b5:	83 ec 08             	sub    esp,0x8
c00178b8:	6a 00                	push   0x0
c00178ba:	50                   	push   eax
c00178bb:	e8 26 05 00 00       	call   c0017de6 <UnixFile::UnixFile(int)>
c00178c0:	83 c4 10             	add    esp,0x10
c00178c3:	ba 68 16 03 c0       	mov    edx,0xc0031668
c00178c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178cc:	89 10                	mov    DWORD PTR [eax],edx
c00178ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00178d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00178e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00178ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00178f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00178ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017903:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001790a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0017915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017919:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0017920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017924:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001792b:	83 ec 0c             	sub    esp,0xc
c001792e:	6a 01                	push   0x1
c0017930:	e8 00 09 00 00       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c0017935:	83 c4 10             	add    esp,0x10
c0017938:	89 c2                	mov    edx,eax
c001793a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017941:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001794b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001794e:	89 c6                	mov    esi,eax
c0017950:	e8 ce f0 ff ff       	call   c0016a23 <Phys::allocatePage()>
c0017955:	68 05 0c 00 00       	push   0xc05
c001795a:	56                   	push   esi
c001795b:	50                   	push   eax
c001795c:	53                   	push   ebx
c001795d:	e8 dc 0f 00 00       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017969:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001796c:	83 ec 04             	sub    esp,0x4
c001796f:	68 a0 0f 00 00       	push   0xfa0
c0017974:	6a 00                	push   0x0
c0017976:	50                   	push   eax
c0017977:	e8 74 8b fe ff       	call   c00004f0 <memset>
c001797c:	83 c4 10             	add    esp,0x10
c001797f:	83 ec 04             	sub    esp,0x4
c0017982:	6a 00                	push   0x0
c0017984:	6a 07                	push   0x7
c0017986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001798a:	e8 7b f8 ff ff       	call   c001720a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	83 ec 04             	sub    esp,0x4
c0017995:	6a 00                	push   0x0
c0017997:	6a 00                	push   0x0
c0017999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001799d:	e8 f6 f9 ff ff       	call   c0017398 <VgaText::setCursor(int, int)>
c00179a2:	83 c4 10             	add    esp,0x10
c00179a5:	83 ec 0c             	sub    esp,0xc
c00179a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179ac:	e8 49 fa ff ff       	call   c00173fa <VgaText::clearScreen()>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00179bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c0:	05 82 00 00 00       	add    eax,0x82
c00179c5:	83 ec 04             	sub    esp,0x4
c00179c8:	68 80 00 00 00       	push   0x80
c00179cd:	6a 00                	push   0x0
c00179cf:	50                   	push   eax
c00179d0:	e8 1b 8b fe ff       	call   c00004f0 <memset>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179dc:	05 02 01 00 00       	add    eax,0x102
c00179e1:	83 ec 04             	sub    esp,0x4
c00179e4:	68 80 00 00 00       	push   0x80
c00179e9:	6a 00                	push   0x0
c00179eb:	50                   	push   eax
c00179ec:	e8 ff 8a fe ff       	call   c00004f0 <memset>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	90                   	nop
c00179f5:	83 c4 04             	add    esp,0x4
c00179f8:	5b                   	pop    ebx
c00179f9:	5e                   	pop    esi
c00179fa:	c3                   	ret    
c00179fb:	90                   	nop

c00179fc <VgaText::receiveKey(unsigned char)>:
c00179fc:	55                   	push   ebp
c00179fd:	57                   	push   edi
c00179fe:	56                   	push   esi
c00179ff:	53                   	push   ebx
c0017a00:	83 ec 2c             	sub    esp,0x2c
c0017a03:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017a07:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017a0b:	89 fd                	mov    ebp,edi
c0017a0d:	81 e5 ff 00 00 00    	and    ebp,0xff
c0017a13:	0f 84 48 01 00 00    	je     c0017b61 <VgaText::receiveKey(unsigned char)+0x165>
c0017a19:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0017a1f:	83 fd 08             	cmp    ebp,0x8
c0017a22:	75 6a                	jne    c0017a8e <VgaText::receiveKey(unsigned char)+0x92>
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	56                   	push   esi
c0017a28:	e8 53 8b fe ff       	call   c0000580 <strlen>
c0017a2d:	83 c4 10             	add    esp,0x10
c0017a30:	85 c0                	test   eax,eax
c0017a32:	0f 84 ef 00 00 00    	je     c0017b27 <VgaText::receiveKey(unsigned char)+0x12b>
c0017a38:	50                   	push   eax
c0017a39:	50                   	push   eax
c0017a3a:	6a 08                	push   0x8
c0017a3c:	53                   	push   ebx
c0017a3d:	e8 7c fb ff ff       	call   c00175be <VgaText::putchar(char)>
c0017a42:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a45:	e8 36 8b fe ff       	call   c0000580 <strlen>
c0017a4a:	83 c4 10             	add    esp,0x10
c0017a4d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0017a55:	83 fa 1f             	cmp    edx,0x1f
c0017a58:	89 d0                	mov    eax,edx
c0017a5a:	7f 1c                	jg     c0017a78 <VgaText::receiveKey(unsigned char)+0x7c>
c0017a5c:	83 e8 08             	sub    eax,0x8
c0017a5f:	3c 02                	cmp    al,0x2
c0017a61:	76 15                	jbe    c0017a78 <VgaText::receiveKey(unsigned char)+0x7c>
c0017a63:	83 fa 0d             	cmp    edx,0xd
c0017a66:	74 10                	je     c0017a78 <VgaText::receiveKey(unsigned char)+0x7c>
c0017a68:	57                   	push   edi
c0017a69:	57                   	push   edi
c0017a6a:	68 53 16 03 c0       	push   0xc0031653
c0017a6f:	53                   	push   ebx
c0017a70:	e8 77 fc ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	83 ec 0c             	sub    esp,0xc
c0017a7b:	56                   	push   esi
c0017a7c:	e8 ff 8a fe ff       	call   c0000580 <strlen>
c0017a81:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017a89:	e9 96 00 00 00       	jmp    c0017b24 <VgaText::receiveKey(unsigned char)+0x128>
c0017a8e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017a94:	83 ec 0c             	sub    esp,0xc
c0017a97:	50                   	push   eax
c0017a98:	e8 e3 8a fe ff       	call   c0000580 <strlen>
c0017a9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017aa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017aa4:	e8 d7 8a fe ff       	call   c0000580 <strlen>
c0017aa9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017aad:	83 c4 10             	add    esp,0x10
c0017ab0:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017ab4:	3d 80 00 00 00       	cmp    eax,0x80
c0017ab9:	0f 87 a2 00 00 00    	ja     c0017b61 <VgaText::receiveKey(unsigned char)+0x165>
c0017abf:	8d 47 ff             	lea    eax,[edi-0x1]
c0017ac2:	3c 1e                	cmp    al,0x1e
c0017ac4:	77 35                	ja     c0017afb <VgaText::receiveKey(unsigned char)+0xff>
c0017ac6:	8d 47 f7             	lea    eax,[edi-0x9]
c0017ac9:	3c 01                	cmp    al,0x1
c0017acb:	76 2e                	jbe    c0017afb <VgaText::receiveKey(unsigned char)+0xff>
c0017acd:	83 fd 0d             	cmp    ebp,0xd
c0017ad0:	74 29                	je     c0017afb <VgaText::receiveKey(unsigned char)+0xff>
c0017ad2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017ad5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017ad8:	68 59 16 03 c0       	push   0xc0031659
c0017add:	53                   	push   ebx
c0017ade:	e8 7b fc ff ff       	call   c001775e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017ae3:	8d 47 40             	lea    eax,[edi+0x40]
c0017ae6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017ae9:	0f b6 c0             	movzx  eax,al
c0017aec:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017aef:	50                   	push   eax
c0017af0:	53                   	push   ebx
c0017af1:	e8 f8 f9 ff ff       	call   c00174ee <VgaText::putchar(char, VgaColour, VgaColour)>
c0017af6:	83 c4 20             	add    esp,0x20
c0017af9:	eb 11                	jmp    c0017b0c <VgaText::receiveKey(unsigned char)+0x110>
c0017afb:	51                   	push   ecx
c0017afc:	89 f8                	mov    eax,edi
c0017afe:	51                   	push   ecx
c0017aff:	0f be c0             	movsx  eax,al
c0017b02:	50                   	push   eax
c0017b03:	53                   	push   ebx
c0017b04:	e8 b5 fa ff ff       	call   c00175be <VgaText::putchar(char)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b11:	89 f8                	mov    eax,edi
c0017b13:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017b17:	52                   	push   edx
c0017b18:	52                   	push   edx
c0017b19:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017b1d:	50                   	push   eax
c0017b1e:	56                   	push   esi
c0017b1f:	e8 4c 8d fe ff       	call   c0000870 <strcat>
c0017b24:	83 c4 10             	add    esp,0x10
c0017b27:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0017b2e:	75 0f                	jne    c0017b3f <VgaText::receiveKey(unsigned char)+0x143>
c0017b30:	83 fd 1c             	cmp    ebp,0x1c
c0017b33:	77 2c                	ja     c0017b61 <VgaText::receiveKey(unsigned char)+0x165>
c0017b35:	b8 08 04 00 10       	mov    eax,0x10000408
c0017b3a:	0f a3 e8             	bt     eax,ebp
c0017b3d:	73 22                	jae    c0017b61 <VgaText::receiveKey(unsigned char)+0x165>
c0017b3f:	50                   	push   eax
c0017b40:	81 c3 02 01 00 00    	add    ebx,0x102
c0017b46:	50                   	push   eax
c0017b47:	56                   	push   esi
c0017b48:	53                   	push   ebx
c0017b49:	e8 22 8d fe ff       	call   c0000870 <strcat>
c0017b4e:	83 c4 0c             	add    esp,0xc
c0017b51:	68 80 00 00 00       	push   0x80
c0017b56:	6a 00                	push   0x0
c0017b58:	56                   	push   esi
c0017b59:	e8 92 89 fe ff       	call   c00004f0 <memset>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	83 c4 2c             	add    esp,0x2c
c0017b64:	5b                   	pop    ebx
c0017b65:	5e                   	pop    esi
c0017b66:	5f                   	pop    edi
c0017b67:	5d                   	pop    ebp
c0017b68:	c3                   	ret    
c0017b69:	90                   	nop

c0017b6a <VgaText::doUpdate()>:
c0017b6a:	c3                   	ret    
c0017b6b:	90                   	nop

c0017b6c <TSS::TSS()>:
c0017b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017b77:	90                   	nop
c0017b78:	c3                   	ret    
c0017b79:	90                   	nop
c0017b7a:	66 90                	xchg   ax,ax

c0017b7c <TSS::setESP(unsigned long)>:
c0017b7c:	55                   	push   ebp
c0017b7d:	89 e5                	mov    ebp,esp
c0017b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b8b:	90                   	nop
c0017b8c:	5d                   	pop    ebp
c0017b8d:	c3                   	ret    
c0017b8e:	66 90                	xchg   ax,ax

c0017b90 <TSS::flush()>:
c0017b90:	55                   	push   ebp
c0017b91:	89 e5                	mov    ebp,esp
c0017b93:	83 ec 10             	sub    esp,0x10
c0017b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b9b:	83 c8 03             	or     eax,0x3
c0017b9e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017ba2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017ba6:	66 89 d0             	mov    ax,dx
c0017ba9:	0f 00 d8             	ltr    ax
c0017bac:	90                   	nop
c0017bad:	c9                   	leave  
c0017bae:	c3                   	ret    
c0017baf:	90                   	nop

c0017bb0 <TSS::setup(unsigned long, unsigned long)>:
c0017bb0:	55                   	push   ebp
c0017bb1:	89 e5                	mov    ebp,esp
c0017bb3:	83 ec 18             	sub    esp,0x18
c0017bb6:	83 ec 0c             	sub    esp,0xc
c0017bb9:	6a 68                	push   0x68
c0017bbb:	e8 54 eb ff ff       	call   c0016714 <malloc>
c0017bc0:	83 c4 10             	add    esp,0x10
c0017bc3:	89 c2                	mov    edx,eax
c0017bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bc8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bd1:	83 ec 04             	sub    esp,0x4
c0017bd4:	6a 68                	push   0x68
c0017bd6:	6a 00                	push   0x0
c0017bd8:	50                   	push   eax
c0017bd9:	e8 12 89 fe ff       	call   c00004f0 <memset>
c0017bde:	83 c4 10             	add    esp,0x10
c0017be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017be7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bf3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017c02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c0b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c17:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c23:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c2f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c3b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c47:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c53:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017c56:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017c62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c6b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c78:	0f 20 da             	mov    edx,cr3
c0017c7b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017c7e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017c81:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c8a:	83 ec 08             	sub    esp,0x8
c0017c8d:	50                   	push   eax
c0017c8e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017c91:	50                   	push   eax
c0017c92:	e8 01 e2 ff ff       	call   c0015e98 <GDTEntry::setBase(unsigned int)>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	83 ec 08             	sub    esp,0x8
c0017c9d:	6a 68                	push   0x68
c0017c9f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017ca2:	50                   	push   eax
c0017ca3:	e8 0c e2 ff ff       	call   c0015eb4 <GDTEntry::setLimit(unsigned int)>
c0017ca8:	83 c4 10             	add    esp,0x10
c0017cab:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017caf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017cb2:	83 e0 0f             	and    eax,0xf
c0017cb5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017cb8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017cbb:	83 c8 40             	or     eax,0x40
c0017cbe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017cc1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017cc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ccc:	05 78 01 00 00       	add    eax,0x178
c0017cd1:	83 ec 04             	sub    esp,0x4
c0017cd4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017cd7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017cda:	50                   	push   eax
c0017cdb:	e8 08 e2 ff ff       	call   c0015ee8 <GDT::addEntry(GDTEntry)>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	89 c2                	mov    edx,eax
c0017ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ce8:	89 10                	mov    DWORD PTR [eax],edx
c0017cea:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017cef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cf5:	05 78 01 00 00       	add    eax,0x178
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	50                   	push   eax
c0017cfe:	e8 0f e2 ff ff       	call   c0015f12 <GDT::flush()>
c0017d03:	83 c4 10             	add    esp,0x10
c0017d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d0b:	c9                   	leave  
c0017d0c:	c3                   	ret    
c0017d0d:	90                   	nop

c0017d0e <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d19:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017d1e:	75 08                	jne    c0017d28 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017d20:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017d26:	eb 38                	jmp    c0017d60 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017d28:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017d2d:	75 17                	jne    c0017d46 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0017d3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d43:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017d46:	89 c1                	mov    ecx,eax
c0017d48:	83 e1 fd             	and    ecx,0xfffffffd
c0017d4b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017d51:	74 cd                	je     c0017d20 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017d53:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017d58:	83 e0 ef             	and    eax,0xffffffef
c0017d5b:	83 f8 08             	cmp    eax,0x8
c0017d5e:	76 c0                	jbe    c0017d20 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017d60:	31 c0                	xor    eax,eax
c0017d62:	c3                   	ret    
c0017d63:	90                   	nop

c0017d64 <ReservedFilename::isAtty()>:
c0017d64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d68:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017d6b:	31 c0                	xor    eax,eax
c0017d6d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017d73:	74 09                	je     c0017d7e <ReservedFilename::isAtty()+0x1a>
c0017d75:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017d7b:	0f 94 c0             	sete   al
c0017d7e:	c3                   	ret    
c0017d7f:	90                   	nop

c0017d80 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017d88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d8f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017d94:	75 08                	jne    c0017d9e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017d96:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017d9c:	eb 3d                	jmp    c0017ddb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017d9e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017da3:	75 17                	jne    c0017dbc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017daa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017db3:	8b 10                	mov    edx,DWORD PTR [eax]
c0017db5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017db9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017dbc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017dc1:	75 04                	jne    c0017dc7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017dc3:	89 0a                	mov    DWORD PTR [edx],ecx
c0017dc5:	eb 14                	jmp    c0017ddb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017dc7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017dcc:	74 c8                	je     c0017d96 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017dce:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017dd3:	83 e0 ef             	and    eax,0xffffffef
c0017dd6:	83 f8 08             	cmp    eax,0x8
c0017dd9:	76 bb                	jbe    c0017d96 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017ddb:	31 c0                	xor    eax,eax
c0017ddd:	c3                   	ret    

c0017dde <UnixFile::getFileDescriptor()>:
c0017dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017de2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017de5:	c3                   	ret    

c0017de6 <UnixFile::UnixFile(int)>:
c0017de6:	53                   	push   ebx
c0017de7:	83 ec 28             	sub    esp,0x28
c0017dea:	ba 30 17 03 c0       	mov    edx,0xc0031730
c0017def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017df3:	89 10                	mov    DWORD PTR [eax],edx
c0017df5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017dfd:	0f 8f 90 01 00 00    	jg     c0017f93 <UnixFile::UnixFile(int)+0x1ad>
c0017e03:	a1 a0 3f 03 c0       	mov    eax,ds:0xc0033fa0
c0017e08:	8d 50 01             	lea    edx,[eax+0x1]
c0017e0b:	89 15 a0 3f 03 c0    	mov    DWORD PTR ds:0xc0033fa0,edx
c0017e11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e15:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017e18:	83 ec 08             	sub    esp,0x8
c0017e1b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017e1f:	68 98 aa 03 c0       	push   0xc003aa98
c0017e24:	e8 4f 6e 01 00       	call   c002ec78 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017e31:	83 f0 01             	xor    eax,0x1
c0017e34:	0f b6 c0             	movzx  eax,al
c0017e37:	85 c0                	test   eax,eax
c0017e39:	0f 84 55 01 00 00    	je     c0017f94 <UnixFile::UnixFile(int)+0x1ae>
c0017e3f:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017e46:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017e4e:	83 ec 0c             	sub    esp,0xc
c0017e51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e55:	e8 ba e8 ff ff       	call   c0016714 <malloc>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	89 c3                	mov    ebx,eax
c0017e5f:	83 ec 08             	sub    esp,0x8
c0017e62:	68 03 ff ff 0f       	push   0xfffff03
c0017e67:	53                   	push   ebx
c0017e68:	e8 2d 01 00 00       	call   c0017f9a <ReservedFilename::ReservedFilename(int)>
c0017e6d:	83 c4 10             	add    esp,0x10
c0017e70:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017e76:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017e7e:	83 ec 0c             	sub    esp,0xc
c0017e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e85:	e8 8a e8 ff ff       	call   c0016714 <malloc>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	89 c3                	mov    ebx,eax
c0017e8f:	83 ec 08             	sub    esp,0x8
c0017e92:	68 01 ff ff 0f       	push   0xfffff01
c0017e97:	53                   	push   ebx
c0017e98:	e8 fd 00 00 00       	call   c0017f9a <ReservedFilename::ReservedFilename(int)>
c0017e9d:	83 c4 10             	add    esp,0x10
c0017ea0:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017ea6:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017eae:	83 ec 0c             	sub    esp,0xc
c0017eb1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017eb5:	e8 5a e8 ff ff       	call   c0016714 <malloc>
c0017eba:	83 c4 10             	add    esp,0x10
c0017ebd:	89 c3                	mov    ebx,eax
c0017ebf:	83 ec 08             	sub    esp,0x8
c0017ec2:	68 00 ff ff 0f       	push   0xfffff00
c0017ec7:	53                   	push   ebx
c0017ec8:	e8 cd 00 00 00       	call   c0017f9a <ReservedFilename::ReservedFilename(int)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017ed6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017ede:	83 ec 0c             	sub    esp,0xc
c0017ee1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ee5:	e8 2a e8 ff ff       	call   c0016714 <malloc>
c0017eea:	83 c4 10             	add    esp,0x10
c0017eed:	89 c3                	mov    ebx,eax
c0017eef:	83 ec 08             	sub    esp,0x8
c0017ef2:	68 02 ff ff 0f       	push   0xfffff02
c0017ef7:	53                   	push   ebx
c0017ef8:	e8 9d 00 00 00       	call   c0017f9a <ReservedFilename::ReservedFilename(int)>
c0017efd:	83 c4 10             	add    esp,0x10
c0017f00:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017f06:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017f0e:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017f13:	7f 7f                	jg     c0017f94 <UnixFile::UnixFile(int)+0x1ae>
c0017f15:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017f1d:	83 ec 0c             	sub    esp,0xc
c0017f20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f24:	e8 eb e7 ff ff       	call   c0016714 <malloc>
c0017f29:	83 c4 10             	add    esp,0x10
c0017f2c:	89 c3                	mov    ebx,eax
c0017f2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f32:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017f37:	83 ec 08             	sub    esp,0x8
c0017f3a:	50                   	push   eax
c0017f3b:	53                   	push   ebx
c0017f3c:	e8 59 00 00 00       	call   c0017f9a <ReservedFilename::ReservedFilename(int)>
c0017f41:	83 c4 10             	add    esp,0x10
c0017f44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f48:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017f4f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017f57:	83 ec 0c             	sub    esp,0xc
c0017f5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f5e:	e8 b1 e7 ff ff       	call   c0016714 <malloc>
c0017f63:	83 c4 10             	add    esp,0x10
c0017f66:	89 c3                	mov    ebx,eax
c0017f68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f6c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017f71:	83 ec 08             	sub    esp,0x8
c0017f74:	50                   	push   eax
c0017f75:	53                   	push   ebx
c0017f76:	e8 1f 00 00 00       	call   c0017f9a <ReservedFilename::ReservedFilename(int)>
c0017f7b:	83 c4 10             	add    esp,0x10
c0017f7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f82:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017f89:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017f8e:	e9 7b ff ff ff       	jmp    c0017f0e <UnixFile::UnixFile(int)+0x128>
c0017f93:	90                   	nop
c0017f94:	83 c4 28             	add    esp,0x28
c0017f97:	5b                   	pop    ebx
c0017f98:	c3                   	ret    
c0017f99:	90                   	nop

c0017f9a <ReservedFilename::ReservedFilename(int)>:
c0017f9a:	83 ec 0c             	sub    esp,0xc
c0017f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa1:	83 ec 08             	sub    esp,0x8
c0017fa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fa8:	50                   	push   eax
c0017fa9:	e8 38 fe ff ff       	call   c0017de6 <UnixFile::UnixFile(int)>
c0017fae:	83 c4 10             	add    esp,0x10
c0017fb1:	ba 4c 17 03 c0       	mov    edx,0xc003174c
c0017fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fba:	89 10                	mov    DWORD PTR [eax],edx
c0017fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017fc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017fc7:	90                   	nop
c0017fc8:	83 c4 0c             	add    esp,0xc
c0017fcb:	c3                   	ret    

c0017fcc <UnixFile::~UnixFile()>:
c0017fcc:	83 ec 1c             	sub    esp,0x1c
c0017fcf:	ba 30 17 03 c0       	mov    edx,0xc0031730
c0017fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd8:	89 10                	mov    DWORD PTR [eax],edx
c0017fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017fe1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017fe6:	7f 76                	jg     c001805e <UnixFile::~UnixFile()+0x92>
c0017fe8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ff0:	83 ec 0c             	sub    esp,0xc
c0017ff3:	68 98 aa 03 c0       	push   0xc003aa98
c0017ff8:	e8 4f 6d 01 00       	call   c002ed4c <LinkedList<UnixFile>::getFirstElement()>
c0017ffd:	83 c4 10             	add    esp,0x10
c0018000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018004:	83 ec 0c             	sub    esp,0xc
c0018007:	68 98 aa 03 c0       	push   0xc003aa98
c001800c:	e8 43 6d 01 00       	call   c002ed54 <LinkedList<UnixFile>::removeFirst()>
c0018011:	83 c4 10             	add    esp,0x10
c0018014:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018018:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001801c:	74 43                	je     c0018061 <UnixFile::~UnixFile()+0x95>
c001801e:	83 ec 08             	sub    esp,0x8
c0018021:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018025:	68 98 aa 03 c0       	push   0xc003aa98
c001802a:	e8 49 6c 01 00       	call   c002ec78 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001802f:	83 c4 10             	add    esp,0x10
c0018032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018036:	8d 50 01             	lea    edx,[eax+0x1]
c0018039:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001803d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0018042:	0f 94 c0             	sete   al
c0018045:	0f b6 c0             	movzx  eax,al
c0018048:	85 c0                	test   eax,eax
c001804a:	74 a4                	je     c0017ff0 <UnixFile::~UnixFile()+0x24>
c001804c:	83 ec 0c             	sub    esp,0xc
c001804f:	68 08 17 03 c0       	push   0xc0031708
c0018054:	e8 79 84 00 00       	call   c00204d2 <KePanic(char const*)>
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	eb 92                	jmp    c0017ff0 <UnixFile::~UnixFile()+0x24>
c001805e:	90                   	nop
c001805f:	eb 01                	jmp    c0018062 <UnixFile::~UnixFile()+0x96>
c0018061:	90                   	nop
c0018062:	90                   	nop
c0018063:	83 c4 1c             	add    esp,0x1c
c0018066:	c3                   	ret    
c0018067:	90                   	nop

c0018068 <UnixFile::~UnixFile()>:
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	83 ec 0c             	sub    esp,0xc
c001806e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018072:	e8 55 ff ff ff       	call   c0017fcc <UnixFile::~UnixFile()>
c0018077:	83 c4 10             	add    esp,0x10
c001807a:	83 ec 08             	sub    esp,0x8
c001807d:	6a 0c                	push   0xc
c001807f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018083:	e8 c4 13 00 00       	call   c001944c <operator delete(void*, unsigned long)>
c0018088:	83 c4 10             	add    esp,0x10
c001808b:	83 c4 0c             	add    esp,0xc
c001808e:	c3                   	ret    
c001808f:	90                   	nop

c0018090 <ReservedFilename::~ReservedFilename()>:
c0018090:	83 ec 0c             	sub    esp,0xc
c0018093:	ba 4c 17 03 c0       	mov    edx,0xc003174c
c0018098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001809c:	89 10                	mov    DWORD PTR [eax],edx
c001809e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a2:	83 ec 0c             	sub    esp,0xc
c00180a5:	50                   	push   eax
c00180a6:	e8 21 ff ff ff       	call   c0017fcc <UnixFile::~UnixFile()>
c00180ab:	83 c4 10             	add    esp,0x10
c00180ae:	90                   	nop
c00180af:	83 c4 0c             	add    esp,0xc
c00180b2:	c3                   	ret    
c00180b3:	90                   	nop

c00180b4 <ReservedFilename::~ReservedFilename()>:
c00180b4:	83 ec 0c             	sub    esp,0xc
c00180b7:	83 ec 0c             	sub    esp,0xc
c00180ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180be:	e8 cd ff ff ff       	call   c0018090 <ReservedFilename::~ReservedFilename()>
c00180c3:	83 c4 10             	add    esp,0x10
c00180c6:	83 ec 08             	sub    esp,0x8
c00180c9:	6a 0c                	push   0xc
c00180cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180cf:	e8 78 13 00 00       	call   c001944c <operator delete(void*, unsigned long)>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	83 c4 0c             	add    esp,0xc
c00180da:	c3                   	ret    

c00180db <KeGetFileFromDescriptor(int)>:
c00180db:	53                   	push   ebx
c00180dc:	83 ec 08             	sub    esp,0x8
c00180df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00180e3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00180e9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00180ef:	7f 2c                	jg     c001811d <KeGetFileFromDescriptor(int)+0x42>
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	68 98 aa 03 c0       	push   0xc003aa98
c00180f9:	e8 4e 6c 01 00       	call   c002ed4c <LinkedList<UnixFile>::getFirstElement()>
c00180fe:	83 c4 10             	add    esp,0x10
c0018101:	85 c0                	test   eax,eax
c0018103:	75 04                	jne    c0018109 <KeGetFileFromDescriptor(int)+0x2e>
c0018105:	31 c0                	xor    eax,eax
c0018107:	eb 6e                	jmp    c0018177 <KeGetFileFromDescriptor(int)+0x9c>
c0018109:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001810c:	74 69                	je     c0018177 <KeGetFileFromDescriptor(int)+0x9c>
c001810e:	52                   	push   edx
c001810f:	52                   	push   edx
c0018110:	50                   	push   eax
c0018111:	68 98 aa 03 c0       	push   0xc003aa98
c0018116:	e8 db 6c 01 00       	call   c002edf6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001811b:	eb e1                	jmp    c00180fe <KeGetFileFromDescriptor(int)+0x23>
c001811d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0018123:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0018128:	74 4d                	je     c0018177 <KeGetFileFromDescriptor(int)+0x9c>
c001812a:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0018130:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0018135:	74 40                	je     c0018177 <KeGetFileFromDescriptor(int)+0x9c>
c0018137:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001813d:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0018142:	74 33                	je     c0018177 <KeGetFileFromDescriptor(int)+0x9c>
c0018144:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001814a:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c001814f:	74 26                	je     c0018177 <KeGetFileFromDescriptor(int)+0x9c>
c0018151:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0018157:	83 f8 08             	cmp    eax,0x8
c001815a:	77 09                	ja     c0018165 <KeGetFileFromDescriptor(int)+0x8a>
c001815c:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0018163:	eb 12                	jmp    c0018177 <KeGetFileFromDescriptor(int)+0x9c>
c0018165:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001816b:	83 fb 08             	cmp    ebx,0x8
c001816e:	77 95                	ja     c0018105 <KeGetFileFromDescriptor(int)+0x2a>
c0018170:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0018177:	83 c4 08             	add    esp,0x8
c001817a:	5b                   	pop    ebx
c001817b:	c3                   	ret    

c001817c <__static_initialization_and_destruction_0(int, int)>:
c001817c:	83 ec 0c             	sub    esp,0xc
c001817f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018184:	75 34                	jne    c00181ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0018186:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001818e:	75 2a                	jne    c00181ba <__static_initialization_and_destruction_0(int, int)+0x3e>
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	68 98 aa 03 c0       	push   0xc003aa98
c0018198:	e8 99 6a 01 00       	call   c002ec36 <LinkedList<UnixFile>::LinkedList()>
c001819d:	83 c4 10             	add    esp,0x10
c00181a0:	83 ec 04             	sub    esp,0x4
c00181a3:	68 18 3f 03 c0       	push   0xc0033f18
c00181a8:	68 98 aa 03 c0       	push   0xc003aa98
c00181ad:	68 34 ec 02 c0       	push   0xc002ec34
c00181b2:	e8 45 12 00 00       	call   c00193fc <__cxa_atexit>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	90                   	nop
c00181bb:	83 c4 0c             	add    esp,0xc
c00181be:	c3                   	ret    

c00181bf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00181bf:	83 ec 0c             	sub    esp,0xc
c00181c2:	83 ec 08             	sub    esp,0x8
c00181c5:	68 ff ff 00 00       	push   0xffff
c00181ca:	6a 01                	push   0x1
c00181cc:	e8 ab ff ff ff       	call   c001817c <__static_initialization_and_destruction_0(int, int)>
c00181d1:	83 c4 10             	add    esp,0x10
c00181d4:	83 c4 0c             	add    esp,0xc
c00181d7:	c3                   	ret    

c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00181d8:	53                   	push   ebx
c00181d9:	8b 15 a8 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033fa8
c00181df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181e7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00181ed:	89 d8                	mov    eax,ebx
c00181ef:	d1 e8                	shr    eax,1
c00181f1:	01 d0                	add    eax,edx
c00181f3:	80 e3 01             	and    bl,0x1
c00181f6:	8a 10                	mov    dl,BYTE PTR [eax]
c00181f8:	75 09                	jne    c0018203 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00181fa:	83 e2 f0             	and    edx,0xfffffff0
c00181fd:	09 ca                	or     edx,ecx
c00181ff:	88 10                	mov    BYTE PTR [eax],dl
c0018201:	5b                   	pop    ebx
c0018202:	c3                   	ret    
c0018203:	0f b6 c9             	movzx  ecx,cl
c0018206:	83 e2 0f             	and    edx,0xf
c0018209:	c1 e1 04             	shl    ecx,0x4
c001820c:	09 ca                	or     edx,ecx
c001820e:	88 10                	mov    BYTE PTR [eax],dl
c0018210:	5b                   	pop    ebx
c0018211:	c3                   	ret    

c0018212 <Virt::getPageState(unsigned long)>:
c0018212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018216:	8b 0d a8 3f 03 c0    	mov    ecx,DWORD PTR ds:0xc0033fa8
c001821c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0018222:	89 d0                	mov    eax,edx
c0018224:	d1 e8                	shr    eax,1
c0018226:	80 e2 01             	and    dl,0x1
c0018229:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001822c:	74 03                	je     c0018231 <Virt::getPageState(unsigned long)+0x1f>
c001822e:	c1 e8 04             	shr    eax,0x4
c0018231:	83 e0 0f             	and    eax,0xf
c0018234:	c3                   	ret    

c0018235 <Virt::allocateKernelVirtualPages(int)>:
c0018235:	55                   	push   ebp
c0018236:	57                   	push   edi
c0018237:	56                   	push   esi
c0018238:	31 f6                	xor    esi,esi
c001823a:	53                   	push   ebx
c001823b:	31 db                	xor    ebx,ebx
c001823d:	83 ec 1c             	sub    esp,0x1c
c0018240:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018245:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018249:	8b 2d a4 3f 03 c0    	mov    ebp,DWORD PTR ds:0xc0033fa4
c001824f:	55                   	push   ebp
c0018250:	e8 bd ff ff ff       	call   c0018212 <Virt::getPageState(unsigned long)>
c0018255:	5a                   	pop    edx
c0018256:	84 c0                	test   al,al
c0018258:	75 3d                	jne    c0018297 <Virt::allocateKernelVirtualPages(int)+0x62>
c001825a:	85 db                	test   ebx,ebx
c001825c:	0f 44 f5             	cmove  esi,ebp
c001825f:	83 c3 01             	add    ebx,0x1
c0018262:	39 fb                	cmp    ebx,edi
c0018264:	74 5e                	je     c00182c4 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0018266:	83 c5 01             	add    ebp,0x1
c0018269:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001826f:	76 33                	jbe    c00182a4 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0018271:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018276:	c7 05 a4 3f 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033fa4,0xc8000
c0018280:	75 2a                	jne    c00182ac <Virt::allocateKernelVirtualPages(int)+0x77>
c0018282:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0018287:	bd 00 80 0c 00       	mov    ebp,0xc8000
c001828c:	55                   	push   ebp
c001828d:	e8 80 ff ff ff       	call   c0018212 <Virt::getPageState(unsigned long)>
c0018292:	5a                   	pop    edx
c0018293:	84 c0                	test   al,al
c0018295:	74 c3                	je     c001825a <Virt::allocateKernelVirtualPages(int)+0x25>
c0018297:	83 c5 01             	add    ebp,0x1
c001829a:	31 db                	xor    ebx,ebx
c001829c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00182a2:	77 cd                	ja     c0018271 <Virt::allocateKernelVirtualPages(int)+0x3c>
c00182a4:	89 2d a4 3f 03 c0    	mov    DWORD PTR ds:0xc0033fa4,ebp
c00182aa:	eb a3                	jmp    c001824f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00182ac:	83 ec 0c             	sub    esp,0xc
c00182af:	68 60 17 03 c0       	push   0xc0031760
c00182b4:	e8 19 82 00 00       	call   c00204d2 <KePanic(char const*)>
c00182b9:	8b 2d a4 3f 03 c0    	mov    ebp,DWORD PTR ds:0xc0033fa4
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	eb 8b                	jmp    c001824f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00182c4:	89 35 a4 3f 03 c0    	mov    DWORD PTR ds:0xc0033fa4,esi
c00182ca:	83 fb 01             	cmp    ebx,0x1
c00182cd:	74 63                	je     c0018332 <Virt::allocateKernelVirtualPages(int)+0xfd>
c00182cf:	85 ff                	test   edi,edi
c00182d1:	74 41                	je     c0018314 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00182d3:	89 f0                	mov    eax,esi
c00182d5:	31 db                	xor    ebx,ebx
c00182d7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00182da:	eb 16                	jmp    c00182f2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00182dc:	6a 01                	push   0x1
c00182de:	83 c3 01             	add    ebx,0x1
c00182e1:	50                   	push   eax
c00182e2:	e8 f1 fe ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182e7:	39 fb                	cmp    ebx,edi
c00182e9:	58                   	pop    eax
c00182ea:	5a                   	pop    edx
c00182eb:	74 27                	je     c0018314 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00182ed:	a1 a4 3f 03 c0       	mov    eax,ds:0xc0033fa4
c00182f2:	8d 50 01             	lea    edx,[eax+0x1]
c00182f5:	85 db                	test   ebx,ebx
c00182f7:	89 15 a4 3f 03 c0    	mov    DWORD PTR ds:0xc0033fa4,edx
c00182fd:	74 22                	je     c0018321 <Virt::allocateKernelVirtualPages(int)+0xec>
c00182ff:	39 dd                	cmp    ebp,ebx
c0018301:	75 d9                	jne    c00182dc <Virt::allocateKernelVirtualPages(int)+0xa7>
c0018303:	6a 03                	push   0x3
c0018305:	83 c3 01             	add    ebx,0x1
c0018308:	50                   	push   eax
c0018309:	e8 ca fe ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001830e:	39 fb                	cmp    ebx,edi
c0018310:	59                   	pop    ecx
c0018311:	58                   	pop    eax
c0018312:	75 d9                	jne    c00182ed <Virt::allocateKernelVirtualPages(int)+0xb8>
c0018314:	83 c4 1c             	add    esp,0x1c
c0018317:	89 f0                	mov    eax,esi
c0018319:	5b                   	pop    ebx
c001831a:	c1 e0 0c             	shl    eax,0xc
c001831d:	5e                   	pop    esi
c001831e:	5f                   	pop    edi
c001831f:	5d                   	pop    ebp
c0018320:	c3                   	ret    
c0018321:	6a 02                	push   0x2
c0018323:	bb 01 00 00 00       	mov    ebx,0x1
c0018328:	50                   	push   eax
c0018329:	e8 aa fe ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001832e:	58                   	pop    eax
c001832f:	5a                   	pop    edx
c0018330:	eb bb                	jmp    c00182ed <Virt::allocateKernelVirtualPages(int)+0xb8>
c0018332:	6a 04                	push   0x4
c0018334:	56                   	push   esi
c0018335:	8d 46 01             	lea    eax,[esi+0x1]
c0018338:	a3 a4 3f 03 c0       	mov    ds:0xc0033fa4,eax
c001833d:	e8 96 fe ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018342:	89 f0                	mov    eax,esi
c0018344:	59                   	pop    ecx
c0018345:	c1 e0 0c             	shl    eax,0xc
c0018348:	5b                   	pop    ebx
c0018349:	83 c4 1c             	add    esp,0x1c
c001834c:	5b                   	pop    ebx
c001834d:	5e                   	pop    esi
c001834e:	5f                   	pop    edi
c001834f:	5d                   	pop    ebp
c0018350:	c3                   	ret    

c0018351 <Virt::freeSwapfilePage(unsigned long)>:
c0018351:	53                   	push   ebx
c0018352:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0018358:	b8 01 00 00 00       	mov    eax,0x1
c001835d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018361:	d3 e0                	shl    eax,cl
c0018363:	89 cb                	mov    ebx,ecx
c0018365:	c1 eb 05             	shr    ebx,0x5
c0018368:	f7 d0                	not    eax
c001836a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001836d:	21 c1                	and    ecx,eax
c001836f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0018372:	5b                   	pop    ebx
c0018373:	c3                   	ret    

c0018374 <Virt::swapIDToSector(unsigned long)>:
c0018374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018378:	8b 15 ac 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033fac
c001837e:	8b 0d b4 3f 03 c0    	mov    ecx,DWORD PTR ds:0xc0033fb4
c0018384:	0f af c2             	imul   eax,edx
c0018387:	01 c8                	add    eax,ecx
c0018389:	c3                   	ret    

c001838a <Virt::allocateSwapfilePage()>:
c001838a:	55                   	push   ebp
c001838b:	31 d2                	xor    edx,edx
c001838d:	57                   	push   edi
c001838e:	56                   	push   esi
c001838f:	53                   	push   ebx
c0018390:	83 ec 0c             	sub    esp,0xc
c0018393:	8b 1d b0 3f 03 c0    	mov    ebx,DWORD PTR ds:0xc0033fb0
c0018399:	8b 0d ac 3f 03 c0    	mov    ecx,DWORD PTR ds:0xc0033fac
c001839f:	89 d8                	mov    eax,ebx
c00183a1:	f7 f1                	div    ecx
c00183a3:	39 cb                	cmp    ebx,ecx
c00183a5:	72 2f                	jb     c00183d6 <Virt::allocateSwapfilePage()+0x4c>
c00183a7:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c00183ad:	8b 16                	mov    edx,DWORD PTR [esi]
c00183af:	f6 c2 01             	test   dl,0x1
c00183b2:	74 3e                	je     c00183f2 <Virt::allocateSwapfilePage()+0x68>
c00183b4:	31 c9                	xor    ecx,ecx
c00183b6:	bf 01 00 00 00       	mov    edi,0x1
c00183bb:	eb 12                	jmp    c00183cf <Virt::allocateSwapfilePage()+0x45>
c00183bd:	89 ca                	mov    edx,ecx
c00183bf:	89 fd                	mov    ebp,edi
c00183c1:	c1 ea 05             	shr    edx,0x5
c00183c4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00183c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00183c9:	d3 e5                	shl    ebp,cl
c00183cb:	85 ea                	test   edx,ebp
c00183cd:	74 2c                	je     c00183fb <Virt::allocateSwapfilePage()+0x71>
c00183cf:	83 c1 01             	add    ecx,0x1
c00183d2:	39 c8                	cmp    eax,ecx
c00183d4:	77 e7                	ja     c00183bd <Virt::allocateSwapfilePage()+0x33>
c00183d6:	83 ec 0c             	sub    esp,0xc
c00183d9:	68 f4 19 03 c0       	push   0xc00319f4
c00183de:	e8 ef 80 00 00       	call   c00204d2 <KePanic(char const*)>
c00183e3:	83 c4 10             	add    esp,0x10
c00183e6:	31 c9                	xor    ecx,ecx
c00183e8:	83 c4 0c             	add    esp,0xc
c00183eb:	89 c8                	mov    eax,ecx
c00183ed:	5b                   	pop    ebx
c00183ee:	5e                   	pop    esi
c00183ef:	5f                   	pop    edi
c00183f0:	5d                   	pop    ebp
c00183f1:	c3                   	ret    
c00183f2:	89 f3                	mov    ebx,esi
c00183f4:	bd 01 00 00 00       	mov    ebp,0x1
c00183f9:	31 c9                	xor    ecx,ecx
c00183fb:	09 ea                	or     edx,ebp
c00183fd:	89 c8                	mov    eax,ecx
c00183ff:	89 13                	mov    DWORD PTR [ebx],edx
c0018401:	83 c4 0c             	add    esp,0xc
c0018404:	5b                   	pop    ebx
c0018405:	5e                   	pop    esi
c0018406:	5f                   	pop    edi
c0018407:	5d                   	pop    ebp
c0018408:	c3                   	ret    

c0018409 <Virt::virtualMemorySetup()>:
c0018409:	53                   	push   ebx
c001840a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001840f:	6a 0f                	push   0xf
c0018411:	53                   	push   ebx
c0018412:	83 c3 01             	add    ebx,0x1
c0018415:	e8 be fd ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001841a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018420:	58                   	pop    eax
c0018421:	5a                   	pop    edx
c0018422:	75 eb                	jne    c001840f <Virt::virtualMemorySetup()+0x6>
c0018424:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018429:	6a 00                	push   0x0
c001842b:	53                   	push   ebx
c001842c:	83 c3 01             	add    ebx,0x1
c001842f:	e8 a4 fd ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018434:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001843a:	59                   	pop    ecx
c001843b:	58                   	pop    eax
c001843c:	75 eb                	jne    c0018429 <Virt::virtualMemorySetup()+0x20>
c001843e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018443:	6a 0f                	push   0xf
c0018445:	53                   	push   ebx
c0018446:	83 c3 01             	add    ebx,0x1
c0018449:	e8 8a fd ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001844e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018454:	58                   	pop    eax
c0018455:	5a                   	pop    edx
c0018456:	75 eb                	jne    c0018443 <Virt::virtualMemorySetup()+0x3a>
c0018458:	5b                   	pop    ebx
c0018459:	c3                   	ret    

c001845a <Virt::setupPageSwapping(int)>:
c001845a:	53                   	push   ebx
c001845b:	83 ec 0c             	sub    esp,0xc
c001845e:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018463:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018467:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001846d:	8b 10                	mov    edx,DWORD PTR [eax]
c001846f:	53                   	push   ebx
c0018470:	68 0b 1a 03 c0       	push   0xc0031a0b
c0018475:	50                   	push   eax
c0018476:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018479:	c1 e3 0b             	shl    ebx,0xb
c001847c:	89 1d b0 3f 03 c0    	mov    DWORD PTR ds:0xc0033fb0,ebx
c0018482:	c1 eb 08             	shr    ebx,0x8
c0018485:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018488:	c6 05 b8 3f 03 c0 43 	mov    BYTE PTR ds:0xc0033fb8,0x43
c001848f:	c7 05 ac 3f 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033fac,0x8
c0018499:	a3 b4 3f 03 c0       	mov    ds:0xc0033fb4,eax
c001849e:	e8 71 e2 ff ff       	call   c0016714 <malloc>
c00184a3:	31 d2                	xor    edx,edx
c00184a5:	83 c4 0c             	add    esp,0xc
c00184a8:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c00184ad:	89 c1                	mov    ecx,eax
c00184af:	a1 b0 3f 03 c0       	mov    eax,ds:0xc0033fb0
c00184b4:	f7 35 ac 3f 03 c0    	div    DWORD PTR ds:0xc0033fac
c00184ba:	c1 e8 05             	shr    eax,0x5
c00184bd:	50                   	push   eax
c00184be:	6a 00                	push   0x0
c00184c0:	51                   	push   ecx
c00184c1:	e8 2a 80 fe ff       	call   c00004f0 <memset>
c00184c6:	83 c4 18             	add    esp,0x18
c00184c9:	5b                   	pop    ebx
c00184ca:	c3                   	ret    
c00184cb:	90                   	nop

c00184cc <VAS::setCPUSpecific(unsigned long)>:
c00184cc:	c3                   	ret    
c00184cd:	90                   	nop

c00184ce <VAS::VAS(VAS*)>:
c00184ce:	83 ec 0c             	sub    esp,0xc
c00184d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00184dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184e0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00184e7:	83 ec 0c             	sub    esp,0xc
c00184ea:	68 80 17 03 c0       	push   0xc0031780
c00184ef:	e8 de 7f 00 00       	call   c00204d2 <KePanic(char const*)>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	90                   	nop
c00184f8:	83 c4 0c             	add    esp,0xc
c00184fb:	c3                   	ret    

c00184fc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00184fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018500:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0018505:	89 c2                	mov    edx,eax
c0018507:	c1 ea 16             	shr    edx,0x16
c001850a:	c1 e8 0a             	shr    eax,0xa
c001850d:	83 f9 01             	cmp    ecx,0x1
c0018510:	19 c9                	sbb    ecx,ecx
c0018512:	25 fc 0f 00 00       	and    eax,0xffc
c0018517:	c1 e2 0c             	shl    edx,0xc
c001851a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0018520:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018527:	01 d0                	add    eax,edx
c0018529:	c3                   	ret    

c001852a <VAS::getPageTableEntry(unsigned long)>:
c001852a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001852e:	89 ca                	mov    edx,ecx
c0018530:	c1 ea 16             	shr    edx,0x16
c0018533:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018539:	c1 e9 0a             	shr    ecx,0xa
c001853c:	c1 e0 0c             	shl    eax,0xc
c001853f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0018545:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018548:	c3                   	ret    

c0018549 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018549:	55                   	push   ebp
c001854a:	57                   	push   edi
c001854b:	bf 01 00 00 00       	mov    edi,0x1
c0018550:	56                   	push   esi
c0018551:	53                   	push   ebx
c0018552:	83 ec 1c             	sub    esp,0x1c
c0018555:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018559:	c1 ee 0c             	shr    esi,0xc
c001855c:	eb 48                	jmp    c00185a6 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001855e:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018563:	83 ec 08             	sub    esp,0x8
c0018566:	55                   	push   ebp
c0018567:	50                   	push   eax
c0018568:	e8 bd ff ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c001856d:	83 c4 10             	add    esp,0x10
c0018570:	8b 10                	mov    edx,DWORD PTR [eax]
c0018572:	f6 c6 04             	test   dh,0x4
c0018575:	75 70                	jne    c00185e7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018577:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001857d:	83 fb 04             	cmp    ebx,0x4
c0018580:	0f 84 8a 00 00 00    	je     c0018610 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018586:	83 fb 02             	cmp    ebx,0x2
c0018589:	0f 84 9a 00 00 00    	je     c0018629 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001858f:	83 fb 03             	cmp    ebx,0x3
c0018592:	0f 84 be 00 00 00    	je     c0018656 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018598:	83 fb 01             	cmp    ebx,0x1
c001859b:	0f 84 a2 00 00 00    	je     c0018643 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00185a1:	83 c6 01             	add    esi,0x1
c00185a4:	31 ff                	xor    edi,edi
c00185a6:	56                   	push   esi
c00185a7:	89 f5                	mov    ebp,esi
c00185a9:	e8 64 fc ff ff       	call   c0018212 <Virt::getPageState(unsigned long)>
c00185ae:	c1 e5 0c             	shl    ebp,0xc
c00185b1:	5a                   	pop    edx
c00185b2:	0f b6 d8             	movzx  ebx,al
c00185b5:	85 db                	test   ebx,ebx
c00185b7:	75 a5                	jne    c001855e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00185b9:	83 ec 0c             	sub    esp,0xc
c00185bc:	68 22 1a 03 c0       	push   0xc0031a22
c00185c1:	e8 0c 7f 00 00       	call   c00204d2 <KePanic(char const*)>
c00185c6:	5a                   	pop    edx
c00185c7:	59                   	pop    ecx
c00185c8:	55                   	push   ebp
c00185c9:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00185cf:	55                   	push   ebp
c00185d0:	e8 55 ff ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c00185d5:	83 c4 10             	add    esp,0x10
c00185d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00185da:	f6 c6 04             	test   dh,0x4
c00185dd:	75 08                	jne    c00185e7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00185df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00185e5:	eb ba                	jmp    c00185a1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00185e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185eb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00185f1:	83 ec 0c             	sub    esp,0xc
c00185f4:	52                   	push   edx
c00185f5:	e8 c0 e3 ff ff       	call   c00169ba <Phys::freePage(unsigned long)>
c00185fa:	83 c4 10             	add    esp,0x10
c00185fd:	83 fb 04             	cmp    ebx,0x4
c0018600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018604:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001860a:	0f 85 76 ff ff ff    	jne    c0018586 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0018610:	83 e7 01             	and    edi,0x1
c0018613:	75 46                	jne    c001865b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018615:	c7 44 24 30 a4 17 03 c0 	mov    DWORD PTR [esp+0x30],0xc00317a4
c001861d:	83 c4 1c             	add    esp,0x1c
c0018620:	5b                   	pop    ebx
c0018621:	5e                   	pop    esi
c0018622:	5f                   	pop    edi
c0018623:	5d                   	pop    ebp
c0018624:	e9 a9 7e 00 00       	jmp    c00204d2 <KePanic(char const*)>
c0018629:	83 e7 01             	and    edi,0x1
c001862c:	75 15                	jne    c0018643 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001862e:	83 ec 0c             	sub    esp,0xc
c0018631:	68 3e 1a 03 c0       	push   0xc0031a3e
c0018636:	e8 97 7e 00 00       	call   c00204d2 <KePanic(char const*)>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	e9 5e ff ff ff       	jmp    c00185a1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018643:	83 ec 08             	sub    esp,0x8
c0018646:	6a 00                	push   0x0
c0018648:	56                   	push   esi
c0018649:	e8 8a fb ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001864e:	83 c4 10             	add    esp,0x10
c0018651:	e9 4b ff ff ff       	jmp    c00185a1 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018656:	83 e7 01             	and    edi,0x1
c0018659:	75 16                	jne    c0018671 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001865b:	83 ec 08             	sub    esp,0x8
c001865e:	6a 00                	push   0x0
c0018660:	56                   	push   esi
c0018661:	e8 72 fb ff ff       	call   c00181d8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018666:	83 c4 10             	add    esp,0x10
c0018669:	83 c4 1c             	add    esp,0x1c
c001866c:	5b                   	pop    ebx
c001866d:	5e                   	pop    esi
c001866e:	5f                   	pop    edi
c001866f:	5d                   	pop    ebp
c0018670:	c3                   	ret    
c0018671:	c7 44 24 30 5a 1a 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031a5a
c0018679:	83 c4 1c             	add    esp,0x1c
c001867c:	5b                   	pop    ebx
c001867d:	5e                   	pop    esi
c001867e:	5f                   	pop    edi
c001867f:	5d                   	pop    ebp
c0018680:	e9 4d 7e 00 00       	jmp    c00204d2 <KePanic(char const*)>
c0018685:	90                   	nop

c0018686 <VAS::freeAllocatedPages(unsigned long)>:
c0018686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001868a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001868e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018692:	74 09                	je     c001869d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018694:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018698:	e9 ac fe ff ff       	jmp    c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c001869d:	c7 44 24 04 c8 17 03 c0 	mov    DWORD PTR [esp+0x4],0xc00317c8
c00186a5:	e9 a0 0e 00 00       	jmp    c001954a <Dbg::kprintf(char const*, ...)>

c00186aa <VAS::virtualToPhysical(unsigned long)>:
c00186aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186ae:	50                   	push   eax
c00186af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186b3:	52                   	push   edx
c00186b4:	e8 71 fe ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c00186b9:	59                   	pop    ecx
c00186ba:	5a                   	pop    edx
c00186bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00186bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00186c2:	c3                   	ret    
c00186c3:	90                   	nop

c00186c4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00186c4:	55                   	push   ebp
c00186c5:	57                   	push   edi
c00186c6:	56                   	push   esi
c00186c7:	53                   	push   ebx
c00186c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186cc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00186d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00186d4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00186d8:	85 db                	test   ebx,ebx
c00186da:	7e 24                	jle    c0018700 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00186dc:	c1 e3 0c             	shl    ebx,0xc
c00186df:	01 f3                	add    ebx,esi
c00186e1:	56                   	push   esi
c00186e2:	81 c6 00 10 00 00    	add    esi,0x1000
c00186e8:	55                   	push   ebp
c00186e9:	e8 3c fe ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c00186ee:	5a                   	pop    edx
c00186ef:	59                   	pop    ecx
c00186f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00186f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00186f6:	21 f9                	and    ecx,edi
c00186f8:	09 d1                	or     ecx,edx
c00186fa:	39 f3                	cmp    ebx,esi
c00186fc:	89 08                	mov    DWORD PTR [eax],ecx
c00186fe:	75 e1                	jne    c00186e1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0018700:	5b                   	pop    ebx
c0018701:	5e                   	pop    esi
c0018702:	5f                   	pop    edi
c0018703:	5d                   	pop    ebp
c0018704:	c3                   	ret    
c0018705:	90                   	nop

c0018706 <VAS::VAS()>:
c0018706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001870a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018715:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018720:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c0018725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018729:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001872d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018731:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018738:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001873f:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c0018744:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018749:	29 c2                	sub    edx,eax
c001874b:	89 d0                	mov    eax,edx
c001874d:	05 ff 0f 00 00       	add    eax,0xfff
c0018752:	c1 e8 0c             	shr    eax,0xc
c0018755:	89 c2                	mov    edx,eax
c0018757:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001875c:	6a 04                	push   0x4
c001875e:	6a ff                	push   0xffffffff
c0018760:	52                   	push   edx
c0018761:	50                   	push   eax
c0018762:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018766:	e8 59 ff ff ff       	call   c00186c4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001876b:	83 c4 14             	add    esp,0x14
c001876e:	90                   	nop
c001876f:	c3                   	ret    

c0018770 <VAS::setToWriteCombining(unsigned long, int)>:
c0018770:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018775:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001877b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018782:	75 01                	jne    c0018785 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018784:	c3                   	ret    
c0018785:	68 80 00 00 00       	push   0x80
c001878a:	6a ff                	push   0xffffffff
c001878c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018790:	50                   	push   eax
c0018791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018795:	52                   	push   edx
c0018796:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001879a:	51                   	push   ecx
c001879b:	e8 24 ff ff ff       	call   c00186c4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00187a0:	83 c4 14             	add    esp,0x14
c00187a3:	c3                   	ret    

c00187a4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00187a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187a8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00187ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00187b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00187b7:	83 f8 01             	cmp    eax,0x1
c00187ba:	19 c0                	sbb    eax,eax
c00187bc:	83 ca 03             	or     edx,0x3
c00187bf:	83 e0 fc             	and    eax,0xfffffffc
c00187c2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00187c9:	0f 20 d8             	mov    eax,cr3
c00187cc:	0f 22 d8             	mov    cr3,eax
c00187cf:	c3                   	ret    

c00187d0 <VAS::~VAS()>:
c00187d0:	83 ec 2c             	sub    esp,0x2c
c00187d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00187db:	fa                   	cli    
c00187dc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00187e1:	83 c0 01             	add    eax,0x1
c00187e4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00187e9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00187ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00187f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187f3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00187f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187fd:	6a 01                	push   0x1
c00187ff:	50                   	push   eax
c0018800:	e8 9f ff ff ff       	call   c00187a4 <VAS::mapOtherVASIn(bool, VAS*)>
c0018805:	83 c4 0c             	add    esp,0xc
c0018808:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018810:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0018818:	0f 8f d8 00 00 00    	jg     c00188f6 <VAS::~VAS()+0x126>
c001881e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018822:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018825:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018829:	c1 e2 02             	shl    edx,0x2
c001882c:	01 d0                	add    eax,edx
c001882e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018830:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018838:	83 e0 01             	and    eax,0x1
c001883b:	0f 84 ab 00 00 00    	je     c00188ec <VAS::~VAS()+0x11c>
c0018841:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018849:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018851:	7f 74                	jg     c00188c7 <VAS::~VAS()+0xf7>
c0018853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018857:	c1 e0 0a             	shl    eax,0xa
c001885a:	89 c2                	mov    edx,eax
c001885c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018860:	01 d0                	add    eax,edx
c0018862:	c1 e0 0c             	shl    eax,0xc
c0018865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018869:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001886e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018870:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018873:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018879:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001887d:	6a 01                	push   0x1
c001887f:	50                   	push   eax
c0018880:	e8 77 fc ff ff       	call   c00184fc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018885:	83 c4 0c             	add    esp,0xc
c0018888:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001888c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018890:	8b 00                	mov    eax,DWORD PTR [eax]
c0018892:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001889a:	25 01 04 00 00       	and    eax,0x401
c001889f:	3d 01 04 00 00       	cmp    eax,0x401
c00188a4:	75 1a                	jne    c00188c0 <VAS::~VAS()+0xf0>
c00188a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00188af:	83 ec 0c             	sub    esp,0xc
c00188b2:	50                   	push   eax
c00188b3:	e8 02 e1 ff ff       	call   c00169ba <Phys::freePage(unsigned long)>
c00188b8:	83 c4 10             	add    esp,0x10
c00188bb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00188c0:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00188c5:	eb 82                	jmp    c0018849 <VAS::~VAS()+0x79>
c00188c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188cb:	25 00 04 00 00       	and    eax,0x400
c00188d0:	74 1a                	je     c00188ec <VAS::~VAS()+0x11c>
c00188d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00188db:	83 ec 0c             	sub    esp,0xc
c00188de:	50                   	push   eax
c00188df:	e8 d6 e0 ff ff       	call   c00169ba <Phys::freePage(unsigned long)>
c00188e4:	83 c4 10             	add    esp,0x10
c00188e7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00188ec:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00188f1:	e9 1a ff ff ff       	jmp    c0018810 <VAS::~VAS()+0x40>
c00188f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	50                   	push   eax
c0018901:	e8 43 fc ff ff       	call   c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c0018906:	83 c4 10             	add    esp,0x10
c0018909:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001890d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018910:	83 ec 0c             	sub    esp,0xc
c0018913:	50                   	push   eax
c0018914:	e8 a1 e0 ff ff       	call   c00169ba <Phys::freePage(unsigned long)>
c0018919:	83 c4 10             	add    esp,0x10
c001891c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018921:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018926:	83 e8 01             	sub    eax,0x1
c0018929:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001892e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018933:	85 c0                	test   eax,eax
c0018935:	75 01                	jne    c0018938 <VAS::~VAS()+0x168>
c0018937:	fb                   	sti    
c0018938:	90                   	nop
c0018939:	83 c4 2c             	add    esp,0x2c
c001893c:	c3                   	ret    
c001893d:	90                   	nop

c001893e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001893e:	55                   	push   ebp
c001893f:	57                   	push   edi
c0018940:	56                   	push   esi
c0018941:	53                   	push   ebx
c0018942:	83 ec 1c             	sub    esp,0x1c
c0018945:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018949:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001894d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018951:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018957:	77 08                	ja     c0018961 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0018959:	0f 20 d8             	mov    eax,cr3
c001895c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001895f:	75 43                	jne    c00189a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0018961:	89 d8                	mov    eax,ebx
c0018963:	09 f8                	or     eax,edi
c0018965:	a9 ff 0f 00 00       	test   eax,0xfff
c001896a:	75 53                	jne    c00189bf <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001896c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001896f:	89 de                	mov    esi,ebx
c0018971:	c1 ee 16             	shr    esi,0x16
c0018974:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001897b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001897f:	74 50                	je     c00189d1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0018981:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018985:	c1 eb 0a             	shr    ebx,0xa
c0018988:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001898e:	c1 e6 0c             	shl    esi,0xc
c0018991:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018997:	09 c7                	or     edi,eax
c0018999:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001899c:	83 c4 1c             	add    esp,0x1c
c001899f:	5b                   	pop    ebx
c00189a0:	5e                   	pop    esi
c00189a1:	5f                   	pop    edi
c00189a2:	5d                   	pop    ebp
c00189a3:	c3                   	ret    
c00189a4:	83 ec 0c             	sub    esp,0xc
c00189a7:	68 ec 17 03 c0       	push   0xc00317ec
c00189ac:	e8 99 0b 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00189b1:	89 d8                	mov    eax,ebx
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	09 f8                	or     eax,edi
c00189b8:	a9 ff 0f 00 00       	test   eax,0xfff
c00189bd:	74 ad                	je     c001896c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00189bf:	83 ec 0c             	sub    esp,0xc
c00189c2:	68 54 18 03 c0       	push   0xc0031854
c00189c7:	e8 06 7b 00 00       	call   c00204d2 <KePanic(char const*)>
c00189cc:	83 c4 10             	add    esp,0x10
c00189cf:	eb 9b                	jmp    c001896c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00189d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00189d5:	e8 49 e0 ff ff       	call   c0016a23 <Phys::allocatePage()>
c00189da:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00189e0:	83 ec 0c             	sub    esp,0xc
c00189e3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00189e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00189eb:	6a 01                	push   0x1
c00189ed:	e8 43 f8 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c00189f2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00189f9:	6a 01                	push   0x1
c00189fb:	50                   	push   eax
c00189fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a00:	52                   	push   edx
c0018a01:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018a05:	51                   	push   ecx
c0018a06:	e8 3d 01 00 00       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018a0b:	83 c4 1c             	add    esp,0x1c
c0018a0e:	68 00 10 00 00       	push   0x1000
c0018a13:	6a 00                	push   0x0
c0018a15:	50                   	push   eax
c0018a16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a1a:	e8 d1 7a fe ff       	call   c00004f0 <memset>
c0018a1f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018a23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018a26:	e8 1e fb ff ff       	call   c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c0018a2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a33:	83 c4 10             	add    esp,0x10
c0018a36:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0018a39:	0d 07 04 00 00       	or     eax,0x407
c0018a3e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0018a41:	e9 3b ff ff ff       	jmp    c0018981 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0018a46 <VAS::allocatePages(int, int)>:
c0018a46:	55                   	push   ebp
c0018a47:	57                   	push   edi
c0018a48:	56                   	push   esi
c0018a49:	53                   	push   ebx
c0018a4a:	83 ec 1c             	sub    esp,0x1c
c0018a4d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018a51:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a55:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018a59:	75 75                	jne    c0018ad0 <VAS::allocatePages(int, int)+0x8a>
c0018a5b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018a5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a62:	85 c0                	test   eax,eax
c0018a64:	74 49                	je     c0018aaf <VAS::allocatePages(int, int)+0x69>
c0018a66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018a6a:	89 d5                	mov    ebp,edx
c0018a6c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018a70:	c1 e5 0c             	shl    ebp,0xc
c0018a73:	01 dd                	add    ebp,ebx
c0018a75:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018a78:	81 cf 00 04 00 00    	or     edi,0x400
c0018a7e:	85 d2                	test   edx,edx
c0018a80:	7e 1b                	jle    c0018a9d <VAS::allocatePages(int, int)+0x57>
c0018a82:	e8 9c df ff ff       	call   c0016a23 <Phys::allocatePage()>
c0018a87:	57                   	push   edi
c0018a88:	53                   	push   ebx
c0018a89:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018a8f:	50                   	push   eax
c0018a90:	56                   	push   esi
c0018a91:	e8 a8 fe ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a96:	83 c4 10             	add    esp,0x10
c0018a99:	39 dd                	cmp    ebp,ebx
c0018a9b:	75 e5                	jne    c0018a82 <VAS::allocatePages(int, int)+0x3c>
c0018a9d:	0f 20 d8             	mov    eax,cr3
c0018aa0:	0f 22 d8             	mov    cr3,eax
c0018aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018aa7:	83 c4 1c             	add    esp,0x1c
c0018aaa:	5b                   	pop    ebx
c0018aab:	5e                   	pop    esi
c0018aac:	5f                   	pop    edi
c0018aad:	5d                   	pop    ebp
c0018aae:	c3                   	ret    
c0018aaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018ab3:	83 ec 0c             	sub    esp,0xc
c0018ab6:	68 78 18 03 c0       	push   0xc0031878
c0018abb:	e8 12 7a 00 00       	call   c00204d2 <KePanic(char const*)>
c0018ac0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018ac3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ac7:	83 c4 10             	add    esp,0x10
c0018aca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018ace:	eb 96                	jmp    c0018a66 <VAS::allocatePages(int, int)+0x20>
c0018ad0:	83 ec 0c             	sub    esp,0xc
c0018ad3:	52                   	push   edx
c0018ad4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0018ad8:	e8 58 f7 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c0018add:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ae1:	83 c4 10             	add    esp,0x10
c0018ae4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0018ae9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018aed:	77 38                	ja     c0018b27 <VAS::allocatePages(int, int)+0xe1>
c0018aef:	85 d2                	test   edx,edx
c0018af1:	7e aa                	jle    c0018a9d <VAS::allocatePages(int, int)+0x57>
c0018af3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018af7:	c1 e2 0c             	shl    edx,0xc
c0018afa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018afe:	81 cf 00 04 00 00    	or     edi,0x400
c0018b04:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0018b07:	e8 17 df ff ff       	call   c0016a23 <Phys::allocatePage()>
c0018b0c:	57                   	push   edi
c0018b0d:	53                   	push   ebx
c0018b0e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018b14:	50                   	push   eax
c0018b15:	56                   	push   esi
c0018b16:	e8 23 fe ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018b1b:	83 c4 10             	add    esp,0x10
c0018b1e:	39 dd                	cmp    ebp,ebx
c0018b20:	75 e5                	jne    c0018b07 <VAS::allocatePages(int, int)+0xc1>
c0018b22:	e9 76 ff ff ff       	jmp    c0018a9d <VAS::allocatePages(int, int)+0x57>
c0018b27:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b32:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018b39:	74 b4                	je     c0018aef <VAS::allocatePages(int, int)+0xa9>
c0018b3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b3f:	80 cc 01             	or     ah,0x1
c0018b42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0018b46:	eb a7                	jmp    c0018aef <VAS::allocatePages(int, int)+0xa9>

c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018b48:	55                   	push   ebp
c0018b49:	57                   	push   edi
c0018b4a:	56                   	push   esi
c0018b4b:	53                   	push   ebx
c0018b4c:	83 ec 1c             	sub    esp,0x1c
c0018b4f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018b53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018b5b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018b5f:	85 db                	test   ebx,ebx
c0018b61:	7e 2c                	jle    c0018b8f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0018b63:	c1 e3 0c             	shl    ebx,0xc
c0018b66:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018b69:	89 f3                	mov    ebx,esi
c0018b6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b6f:	55                   	push   ebp
c0018b70:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018b74:	29 f2                	sub    edx,esi
c0018b76:	01 da                	add    edx,ebx
c0018b78:	52                   	push   edx
c0018b79:	53                   	push   ebx
c0018b7a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018b80:	57                   	push   edi
c0018b81:	e8 b8 fd ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018b86:	83 c4 10             	add    esp,0x10
c0018b89:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0018b8d:	75 e0                	jne    c0018b6f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0018b8f:	0f 20 d8             	mov    eax,cr3
c0018b92:	0f 22 d8             	mov    cr3,eax
c0018b95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b99:	83 c4 1c             	add    esp,0x1c
c0018b9c:	5b                   	pop    ebx
c0018b9d:	5e                   	pop    esi
c0018b9e:	5f                   	pop    edi
c0018b9f:	5d                   	pop    ebp
c0018ba0:	c3                   	ret    
c0018ba1:	90                   	nop

c0018ba2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018ba2:	55                   	push   ebp
c0018ba3:	57                   	push   edi
c0018ba4:	56                   	push   esi
c0018ba5:	53                   	push   ebx
c0018ba6:	83 ec 1c             	sub    esp,0x1c
c0018ba9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018bad:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018bb1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018bb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bb9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018bbd:	09 d8                	or     eax,ebx
c0018bbf:	a9 ff 0f 00 00       	test   eax,0xfff
c0018bc4:	75 4b                	jne    c0018c11 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018bc6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018bc9:	89 de                	mov    esi,ebx
c0018bcb:	c1 ee 16             	shr    esi,0x16
c0018bce:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0018bd5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0018bd9:	74 48                	je     c0018c23 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0018bdb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0018be0:	c1 eb 0a             	shr    ebx,0xa
c0018be3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018be7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0018beb:	83 ff 01             	cmp    edi,0x1
c0018bee:	19 c0                	sbb    eax,eax
c0018bf0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018bf6:	c1 e6 0c             	shl    esi,0xc
c0018bf9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0018bfe:	01 f3                	add    ebx,esi
c0018c00:	09 ca                	or     edx,ecx
c0018c02:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0018c09:	83 c4 1c             	add    esp,0x1c
c0018c0c:	5b                   	pop    ebx
c0018c0d:	5e                   	pop    esi
c0018c0e:	5f                   	pop    edi
c0018c0f:	5d                   	pop    ebp
c0018c10:	c3                   	ret    
c0018c11:	83 ec 0c             	sub    esp,0xc
c0018c14:	68 a4 18 03 c0       	push   0xc00318a4
c0018c19:	e8 b4 78 00 00       	call   c00204d2 <KePanic(char const*)>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	eb a3                	jmp    c0018bc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0018c23:	e8 fb dd ff ff       	call   c0016a23 <Phys::allocatePage()>
c0018c28:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018c2e:	83 ec 0c             	sub    esp,0xc
c0018c31:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0018c35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c39:	6a 01                	push   0x1
c0018c3b:	e8 f5 f5 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c0018c40:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018c47:	6a 01                	push   0x1
c0018c49:	50                   	push   eax
c0018c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c4e:	50                   	push   eax
c0018c4f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018c53:	51                   	push   ecx
c0018c54:	e8 ef fe ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018c59:	83 c4 1c             	add    esp,0x1c
c0018c5c:	68 00 10 00 00       	push   0x1000
c0018c61:	6a 00                	push   0x0
c0018c63:	50                   	push   eax
c0018c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c68:	e8 83 78 fe ff       	call   c00004f0 <memset>
c0018c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018c71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018c74:	e8 d0 f8 ff ff       	call   c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c0018c79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c7d:	83 c4 10             	add    esp,0x10
c0018c80:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018c83:	81 ca 07 04 00 00    	or     edx,0x407
c0018c89:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0018c8c:	e9 4a ff ff ff       	jmp    c0018bdb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0018c91:	90                   	nop

c0018c92 <VAS::VAS(bool)>:
c0018c92:	53                   	push   ebx
c0018c93:	83 ec 28             	sub    esp,0x28
c0018c96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018c9a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ca2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cb8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018cbc:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018cbf:	e8 5f dd ff ff       	call   c0016a23 <Phys::allocatePage()>
c0018cc4:	89 c2                	mov    edx,eax
c0018cc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018ccd:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0018cd3:	83 ec 0c             	sub    esp,0xc
c0018cd6:	6a 01                	push   0x1
c0018cd8:	e8 58 f5 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c0018cdd:	83 c4 10             	add    esp,0x10
c0018ce0:	89 c2                	mov    edx,eax
c0018ce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ce6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ce9:	83 ec 0c             	sub    esp,0xc
c0018cec:	6a 03                	push   0x3
c0018cee:	6a 01                	push   0x1
c0018cf0:	52                   	push   edx
c0018cf1:	50                   	push   eax
c0018cf2:	53                   	push   ebx
c0018cf3:	e8 50 fe ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018cf8:	83 c4 20             	add    esp,0x20
c0018cfb:	89 c2                	mov    edx,eax
c0018cfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018d04:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018d0c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018d14:	7f 1d                	jg     c0018d33 <VAS::VAS(bool)+0xa1>
c0018d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d21:	c1 e2 02             	shl    edx,0x2
c0018d24:	01 d0                	add    eax,edx
c0018d26:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018d2c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018d31:	eb d9                	jmp    c0018d0c <VAS::VAS(bool)+0x7a>
c0018d33:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018d3b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018d43:	7f 7e                	jg     c0018dc3 <VAS::VAS(bool)+0x131>
c0018d45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d49:	2d 00 02 00 00       	sub    eax,0x200
c0018d4e:	c1 e0 0c             	shl    eax,0xc
c0018d51:	83 c8 05             	or     eax,0x5
c0018d54:	89 c2                	mov    edx,eax
c0018d56:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d61:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d67:	83 e0 10             	and    eax,0x10
c0018d6a:	0f b6 c0             	movzx  eax,al
c0018d6d:	85 c0                	test   eax,eax
c0018d6f:	74 07                	je     c0018d78 <VAS::VAS(bool)+0xe6>
c0018d71:	b8 00 01 00 00       	mov    eax,0x100
c0018d76:	eb 05                	jmp    c0018d7d <VAS::VAS(bool)+0xeb>
c0018d78:	b8 00 00 00 00       	mov    eax,0x0
c0018d7d:	09 d0                	or     eax,edx
c0018d7f:	89 c1                	mov    ecx,eax
c0018d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d8c:	c1 e2 02             	shl    edx,0x2
c0018d8f:	01 d0                	add    eax,edx
c0018d91:	89 ca                	mov    edx,ecx
c0018d93:	89 10                	mov    DWORD PTR [eax],edx
c0018d95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d99:	2d 40 03 00 00       	sub    eax,0x340
c0018d9e:	83 f8 7f             	cmp    eax,0x7f
c0018da1:	77 16                	ja     c0018db9 <VAS::VAS(bool)+0x127>
c0018da3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018da7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018daa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018dae:	c1 e2 02             	shl    edx,0x2
c0018db1:	01 d0                	add    eax,edx
c0018db3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018db9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018dbe:	e9 78 ff ff ff       	jmp    c0018d3b <VAS::VAS(bool)+0xa9>
c0018dc3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018dc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018dce:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018dd4:	83 e0 10             	and    eax,0x10
c0018dd7:	0f b6 c0             	movzx  eax,al
c0018dda:	85 c0                	test   eax,eax
c0018ddc:	74 07                	je     c0018de5 <VAS::VAS(bool)+0x153>
c0018dde:	b8 03 41 00 00       	mov    eax,0x4103
c0018de3:	eb 05                	jmp    c0018dea <VAS::VAS(bool)+0x158>
c0018de5:	b8 03 40 00 00       	mov    eax,0x4003
c0018dea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018dee:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018df1:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018df7:	89 02                	mov    DWORD PTR [edx],eax
c0018df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018dfd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018e00:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018e05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e0b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018e11:	83 e0 10             	and    eax,0x10
c0018e14:	0f b6 c0             	movzx  eax,al
c0018e17:	85 c0                	test   eax,eax
c0018e19:	74 07                	je     c0018e22 <VAS::VAS(bool)+0x190>
c0018e1b:	b8 00 01 00 00       	mov    eax,0x100
c0018e20:	eb 05                	jmp    c0018e27 <VAS::VAS(bool)+0x195>
c0018e22:	b8 00 00 00 00       	mov    eax,0x0
c0018e27:	09 c2                	or     edx,eax
c0018e29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018e2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e30:	05 fc 0f 00 00       	add    eax,0xffc
c0018e35:	83 ca 03             	or     edx,0x3
c0018e38:	89 10                	mov    DWORD PTR [eax],edx
c0018e3a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018e3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e45:	83 ec 0c             	sub    esp,0xc
c0018e48:	50                   	push   eax
c0018e49:	e8 f0 29 00 00       	call   c001b83e <Device::getName()>
c0018e4e:	83 c4 10             	add    esp,0x10
c0018e51:	83 ec 08             	sub    esp,0x8
c0018e54:	68 74 1a 03 c0       	push   0xc0031a74
c0018e59:	50                   	push   eax
c0018e5a:	e8 21 79 fe ff       	call   c0000780 <strcmp>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	85 c0                	test   eax,eax
c0018e64:	0f 94 c0             	sete   al
c0018e67:	0f b6 c0             	movzx  eax,al
c0018e6a:	85 c0                	test   eax,eax
c0018e6c:	74 68                	je     c0018ed6 <VAS::VAS(bool)+0x244>
c0018e6e:	fa                   	cli    
c0018e6f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018e74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e7a:	05 7c 09 00 00       	add    eax,0x97c
c0018e7f:	83 ec 0c             	sub    esp,0xc
c0018e82:	50                   	push   eax
c0018e83:	e8 9a d2 ff ff       	call   c0016122 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018e88:	83 c4 10             	add    esp,0x10
c0018e8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018e90:	89 c3                	mov    ebx,eax
c0018e92:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018e97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e9d:	05 7c 09 00 00       	add    eax,0x97c
c0018ea2:	83 ec 0c             	sub    esp,0xc
c0018ea5:	50                   	push   eax
c0018ea6:	e8 77 d2 ff ff       	call   c0016122 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	83 ec 08             	sub    esp,0x8
c0018eb1:	50                   	push   eax
c0018eb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018eb6:	e8 6f f6 ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c0018ebb:	83 c4 10             	add    esp,0x10
c0018ebe:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ec0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ec5:	6a 11                	push   0x11
c0018ec7:	53                   	push   ebx
c0018ec8:	50                   	push   eax
c0018ec9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018ecd:	e8 6c fa ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018ed2:	83 c4 10             	add    esp,0x10
c0018ed5:	fb                   	sti    
c0018ed6:	90                   	nop
c0018ed7:	83 c4 28             	add    esp,0x28
c0018eda:	5b                   	pop    ebx
c0018edb:	c3                   	ret    

c0018edc <VAS::evict(unsigned long)>:
c0018edc:	55                   	push   ebp
c0018edd:	57                   	push   edi
c0018ede:	56                   	push   esi
c0018edf:	53                   	push   ebx
c0018ee0:	83 ec 1c             	sub    esp,0x1c
c0018ee3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ee7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018eeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018eef:	e8 96 f4 ff ff       	call   c001838a <Virt::allocateSwapfilePage()>
c0018ef4:	89 c7                	mov    edi,eax
c0018ef6:	a1 ac 3f 03 c0       	mov    eax,ds:0xc0033fac
c0018efb:	85 c0                	test   eax,eax
c0018efd:	7e 40                	jle    c0018f3f <VAS::evict(unsigned long)+0x63>
c0018eff:	89 ee                	mov    esi,ebp
c0018f01:	31 db                	xor    ebx,ebx
c0018f03:	83 ec 0c             	sub    esp,0xc
c0018f06:	57                   	push   edi
c0018f07:	e8 68 f4 ff ff       	call   c0018374 <Virt::swapIDToSector(unsigned long)>
c0018f0c:	31 d2                	xor    edx,edx
c0018f0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0018f11:	81 c6 00 02 00 00    	add    esi,0x200
c0018f17:	6a 01                	push   0x1
c0018f19:	52                   	push   edx
c0018f1a:	01 d8                	add    eax,ebx
c0018f1c:	83 c3 01             	add    ebx,0x1
c0018f1f:	50                   	push   eax
c0018f20:	0f be 05 b8 3f 03 c0 	movsx  eax,BYTE PTR ds:0xc0033fb8
c0018f27:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018f2e:	50                   	push   eax
c0018f2f:	e8 0e 3b 00 00       	call   c001ca42 <LogicalDisk::write(unsigned long long, int, void*)>
c0018f34:	83 c4 20             	add    esp,0x20
c0018f37:	39 1d ac 3f 03 c0    	cmp    DWORD PTR ds:0xc0033fac,ebx
c0018f3d:	7f c4                	jg     c0018f03 <VAS::evict(unsigned long)+0x27>
c0018f3f:	c1 e7 0c             	shl    edi,0xc
c0018f42:	83 ec 08             	sub    esp,0x8
c0018f45:	55                   	push   ebp
c0018f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f4a:	50                   	push   eax
c0018f4b:	e8 da f5 ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c0018f50:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f52:	89 d3                	mov    ebx,edx
c0018f54:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018f5a:	09 d7                	or     edi,edx
c0018f5c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018f62:	89 38                	mov    DWORD PTR [eax],edi
c0018f64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f67:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018f6d:	83 c2 01             	add    edx,0x1
c0018f70:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018f76:	e8 3f da ff ff       	call   c00169ba <Phys::freePage(unsigned long)>
c0018f7b:	0f 20 d8             	mov    eax,cr3
c0018f7e:	0f 22 d8             	mov    cr3,eax
c0018f81:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018f87:	51                   	push   ecx
c0018f88:	55                   	push   ebp
c0018f89:	53                   	push   ebx
c0018f8a:	68 c8 18 03 c0       	push   0xc00318c8
c0018f8f:	e8 b6 05 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0018f94:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018f99:	c7 44 24 50 82 1a 03 c0 	mov    DWORD PTR [esp+0x50],0xc0031a82
c0018fa1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018fa5:	8d 50 01             	lea    edx,[eax+0x1]
c0018fa8:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018fae:	83 c4 3c             	add    esp,0x3c
c0018fb1:	5b                   	pop    ebx
c0018fb2:	5e                   	pop    esi
c0018fb3:	5f                   	pop    edi
c0018fb4:	5d                   	pop    ebp
c0018fb5:	e9 90 05 00 00       	jmp    c001954a <Dbg::kprintf(char const*, ...)>

c0018fba <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018fba:	55                   	push   ebp
c0018fbb:	57                   	push   edi
c0018fbc:	56                   	push   esi
c0018fbd:	53                   	push   ebx
c0018fbe:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018fc4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018fcb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018fd1:	77 78                	ja     c001904b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018fd3:	83 ec 08             	sub    esp,0x8
c0018fd6:	53                   	push   ebx
c0018fd7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018fdd:	68 a5 1a 03 c0       	push   0xc0031aa5
c0018fe2:	e8 63 05 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0018fe7:	58                   	pop    eax
c0018fe8:	5a                   	pop    edx
c0018fe9:	53                   	push   ebx
c0018fea:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018ff1:	51                   	push   ecx
c0018ff2:	e8 33 f5 ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	85 c0                	test   eax,eax
c0018ffc:	89 c5                	mov    ebp,eax
c0018ffe:	0f 95 c0             	setne  al
c0019001:	85 db                	test   ebx,ebx
c0019003:	0f 95 c2             	setne  dl
c0019006:	21 d0                	and    eax,edx
c0019008:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001900c:	a8 01                	test   al,0x1
c001900e:	75 0f                	jne    c001901f <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0019010:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019014:	81 c4 1c 10 00 00    	add    esp,0x101c
c001901a:	5b                   	pop    ebx
c001901b:	5e                   	pop    esi
c001901c:	5f                   	pop    edi
c001901d:	5d                   	pop    ebp
c001901e:	c3                   	ret    
c001901f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019022:	f6 c4 02             	test   ah,0x2
c0019025:	75 39                	jne    c0019060 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0019027:	89 c2                	mov    edx,eax
c0019029:	81 e2 01 04 00 00    	and    edx,0x401
c001902f:	81 fa 00 04 00 00    	cmp    edx,0x400
c0019035:	74 73                	je     c00190aa <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0019037:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001903c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019040:	81 c4 1c 10 00 00    	add    esp,0x101c
c0019046:	5b                   	pop    ebx
c0019047:	5e                   	pop    esi
c0019048:	5f                   	pop    edi
c0019049:	5d                   	pop    ebp
c001904a:	c3                   	ret    
c001904b:	83 ec 0c             	sub    esp,0xc
c001904e:	68 93 1a 03 c0       	push   0xc0031a93
c0019053:	e8 7a 74 00 00       	call   c00204d2 <KePanic(char const*)>
c0019058:	83 c4 10             	add    esp,0x10
c001905b:	e9 73 ff ff ff       	jmp    c0018fd3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0019060:	83 ec 0c             	sub    esp,0xc
c0019063:	89 de                	mov    esi,ebx
c0019065:	68 f8 18 03 c0       	push   0xc00318f8
c001906a:	e8 db 04 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001906f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019073:	e8 ab d9 ff ff       	call   c0016a23 <Phys::allocatePage()>
c0019078:	ba 00 10 00 00       	mov    edx,0x1000
c001907d:	89 d1                	mov    ecx,edx
c001907f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019081:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0019084:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001908a:	09 c8                	or     eax,ecx
c001908c:	83 c8 02             	or     eax,0x2
c001908f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019092:	0f 20 d8             	mov    eax,cr3
c0019095:	0f 22 d8             	mov    cr3,eax
c0019098:	8d 74 24 20          	lea    esi,[esp+0x20]
c001909c:	89 df                	mov    edi,ebx
c001909e:	89 d1                	mov    ecx,edx
c00190a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	e9 66 ff ff ff       	jmp    c0019010 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c00190aa:	c1 e8 0c             	shr    eax,0xc
c00190ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190b1:	e8 6d d9 ff ff       	call   c0016a23 <Phys::allocatePage()>
c00190b6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00190b9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00190bf:	09 c2                	or     edx,eax
c00190c1:	81 ca 01 08 00 00    	or     edx,0x801
c00190c7:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00190ca:	a1 ac 3f 03 c0       	mov    eax,ds:0xc0033fac
c00190cf:	85 c0                	test   eax,eax
c00190d1:	7e 44                	jle    c0019117 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c00190d3:	89 df                	mov    edi,ebx
c00190d5:	31 f6                	xor    esi,esi
c00190d7:	83 ec 0c             	sub    esp,0xc
c00190da:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00190de:	51                   	push   ecx
c00190df:	e8 90 f2 ff ff       	call   c0018374 <Virt::swapIDToSector(unsigned long)>
c00190e4:	31 d2                	xor    edx,edx
c00190e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00190e9:	81 c7 00 02 00 00    	add    edi,0x200
c00190ef:	6a 01                	push   0x1
c00190f1:	52                   	push   edx
c00190f2:	01 f0                	add    eax,esi
c00190f4:	83 c6 01             	add    esi,0x1
c00190f7:	50                   	push   eax
c00190f8:	0f be 05 b8 3f 03 c0 	movsx  eax,BYTE PTR ds:0xc0033fb8
c00190ff:	8b 2c 85 7c f2 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc0d84]
c0019106:	55                   	push   ebp
c0019107:	e8 ca 38 00 00       	call   c001c9d6 <LogicalDisk::read(unsigned long long, int, void*)>
c001910c:	83 c4 20             	add    esp,0x20
c001910f:	39 35 ac 3f 03 c0    	cmp    DWORD PTR ds:0xc0033fac,esi
c0019115:	7f c0                	jg     c00190d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c0019117:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c001911c:	83 ec 04             	sub    esp,0x4
c001911f:	83 e8 01             	sub    eax,0x1
c0019122:	50                   	push   eax
c0019123:	53                   	push   ebx
c0019124:	68 b8 1a 03 c0       	push   0xc0031ab8
c0019129:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c001912e:	e8 17 04 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019133:	58                   	pop    eax
c0019134:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019138:	52                   	push   edx
c0019139:	e8 13 f2 ff ff       	call   c0018351 <Virt::freeSwapfilePage(unsigned long)>
c001913e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	83 e8 01             	sub    eax,0x1
c0019149:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001914e:	85 c0                	test   eax,eax
c0019150:	75 01                	jne    c0019153 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c0019152:	fb                   	sti    
c0019153:	0f 20 d8             	mov    eax,cr3
c0019156:	0f 22 d8             	mov    cr3,eax
c0019159:	e9 b2 fe ff ff       	jmp    c0019010 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c001915e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001915e:	55                   	push   ebp
c001915f:	57                   	push   edi
c0019160:	56                   	push   esi
c0019161:	53                   	push   ebx
c0019162:	83 ec 28             	sub    esp,0x28
c0019165:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019169:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001916d:	50                   	push   eax
c001916e:	e8 c2 f0 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c0019173:	83 c4 0c             	add    esp,0xc
c0019176:	6a 07                	push   0x7
c0019178:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001917c:	52                   	push   edx
c001917d:	89 c5                	mov    ebp,eax
c001917f:	53                   	push   ebx
c0019180:	e8 c1 f8 ff ff       	call   c0018a46 <VAS::allocatePages(int, int)>
c0019185:	83 c4 10             	add    esp,0x10
c0019188:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001918c:	89 c7                	mov    edi,eax
c001918e:	85 c9                	test   ecx,ecx
c0019190:	74 2f                	je     c00191c1 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0019192:	31 f6                	xor    esi,esi
c0019194:	e8 8a d8 ff ff       	call   c0016a23 <Phys::allocatePage()>
c0019199:	83 c6 01             	add    esi,0x1
c001919c:	6a 03                	push   0x3
c001919e:	55                   	push   ebp
c001919f:	50                   	push   eax
c00191a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191a4:	53                   	push   ebx
c00191a5:	e8 94 f7 ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c00191aa:	6a 07                	push   0x7
c00191ac:	57                   	push   edi
c00191ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00191b1:	50                   	push   eax
c00191b2:	53                   	push   ebx
c00191b3:	e8 86 f7 ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c00191b8:	83 c4 20             	add    esp,0x20
c00191bb:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c00191bf:	75 d3                	jne    c0019194 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00191c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191c5:	89 28                	mov    DWORD PTR [eax],ebp
c00191c7:	83 c4 1c             	add    esp,0x1c
c00191ca:	89 f8                	mov    eax,edi
c00191cc:	5b                   	pop    ebx
c00191cd:	5e                   	pop    esi
c00191ce:	5f                   	pop    edi
c00191cf:	5d                   	pop    ebp
c00191d0:	c3                   	ret    
c00191d1:	90                   	nop

c00191d2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00191d2:	53                   	push   ebx
c00191d3:	83 ec 14             	sub    esp,0x14
c00191d6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00191da:	68 18 19 03 c0       	push   0xc0031918
c00191df:	e8 66 03 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00191e4:	c7 04 24 78 19 03 c0 	mov    DWORD PTR [esp],0xc0031978
c00191eb:	e8 5a 03 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00191f0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00191f4:	83 c4 18             	add    esp,0x18
c00191f7:	5b                   	pop    ebx
c00191f8:	e9 4c f3 ff ff       	jmp    c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c00191fd:	90                   	nop

c00191fe <VAS::scanForEviction()>:
c00191fe:	57                   	push   edi
c00191ff:	56                   	push   esi
c0019200:	31 f6                	xor    esi,esi
c0019202:	53                   	push   ebx
c0019203:	83 ec 10             	sub    esp,0x10
c0019206:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001920a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001920d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0019213:	75 0e                	jne    c0019223 <VAS::scanForEviction()+0x25>
c0019215:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0019218:	89 da                	mov    edx,ebx
c001921a:	c1 ea 16             	shr    edx,0x16
c001921d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019221:	74 57                	je     c001927a <VAS::scanForEviction()+0x7c>
c0019223:	53                   	push   ebx
c0019224:	57                   	push   edi
c0019225:	e8 00 f3 ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c001922a:	5a                   	pop    edx
c001922b:	59                   	pop    ecx
c001922c:	8b 10                	mov    edx,DWORD PTR [eax]
c001922e:	89 d1                	mov    ecx,edx
c0019230:	c1 e9 0c             	shr    ecx,0xc
c0019233:	74 10                	je     c0019245 <VAS::scanForEviction()+0x47>
c0019235:	89 d1                	mov    ecx,edx
c0019237:	81 e1 01 08 00 00    	and    ecx,0x801
c001923d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0019243:	74 40                	je     c0019285 <VAS::scanForEviction()+0x87>
c0019245:	81 c3 00 10 00 00    	add    ebx,0x1000
c001924b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0019251:	76 2d                	jbe    c0019280 <VAS::scanForEviction()+0x82>
c0019253:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001925a:	83 c6 01             	add    esi,0x1
c001925d:	83 fe 03             	cmp    esi,0x3
c0019260:	74 32                	je     c0019294 <VAS::scanForEviction()+0x96>
c0019262:	31 db                	xor    ebx,ebx
c0019264:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001926a:	75 b7                	jne    c0019223 <VAS::scanForEviction()+0x25>
c001926c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001926f:	89 da                	mov    edx,ebx
c0019271:	c1 ea 16             	shr    edx,0x16
c0019274:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019278:	75 a9                	jne    c0019223 <VAS::scanForEviction()+0x25>
c001927a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0019280:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0019283:	eb 88                	jmp    c001920d <VAS::scanForEviction()+0xf>
c0019285:	f6 c2 20             	test   dl,0x20
c0019288:	74 13                	je     c001929d <VAS::scanForEviction()+0x9f>
c001928a:	83 e2 df             	and    edx,0xffffffdf
c001928d:	89 10                	mov    DWORD PTR [eax],edx
c001928f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0019292:	eb b1                	jmp    c0019245 <VAS::scanForEviction()+0x47>
c0019294:	83 c4 10             	add    esp,0x10
c0019297:	31 c0                	xor    eax,eax
c0019299:	5b                   	pop    ebx
c001929a:	5e                   	pop    esi
c001929b:	5f                   	pop    edi
c001929c:	c3                   	ret    
c001929d:	89 d0                	mov    eax,edx
c001929f:	83 ec 08             	sub    esp,0x8
c00192a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00192a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192ab:	53                   	push   ebx
c00192ac:	68 cd 1a 03 c0       	push   0xc0031acd
c00192b1:	e8 94 02 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00192b6:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00192b9:	58                   	pop    eax
c00192ba:	5a                   	pop    edx
c00192bb:	51                   	push   ecx
c00192bc:	57                   	push   edi
c00192bd:	e8 1a fc ff ff       	call   c0018edc <VAS::evict(unsigned long)>
c00192c2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00192c5:	5b                   	pop    ebx
c00192c6:	5e                   	pop    esi
c00192c7:	50                   	push   eax
c00192c8:	68 e1 1a 03 c0       	push   0xc0031ae1
c00192cd:	e8 78 02 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00192d2:	58                   	pop    eax
c00192d3:	5a                   	pop    edx
c00192d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00192d8:	50                   	push   eax
c00192d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192dd:	68 f4 1a 03 c0       	push   0xc0031af4
c00192e2:	e8 63 02 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00192e7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	81 c1 00 10 00 00    	add    ecx,0x1000
c00192f3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00192f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	5b                   	pop    ebx
c00192fe:	5e                   	pop    esi
c00192ff:	5f                   	pop    edi
c0019300:	c3                   	ret    

c0019301 <mapVASFirstTime>:
c0019301:	55                   	push   ebp
c0019302:	57                   	push   edi
c0019303:	56                   	push   esi
c0019304:	53                   	push   ebx
c0019305:	83 ec 0c             	sub    esp,0xc
c0019308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001930d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0019310:	83 fa 01             	cmp    edx,0x1
c0019313:	0f 84 cb 00 00 00    	je     c00193e4 <mapVASFirstTime+0xe3>
c0019319:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001931c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0019321:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0019326:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0019329:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001932f:	c1 e5 15             	shl    ebp,0x15
c0019332:	29 eb                	sub    ebx,ebp
c0019334:	29 ef                	sub    edi,ebp
c0019336:	e8 e8 d6 ff ff       	call   c0016a23 <Phys::allocatePage()>
c001933b:	83 ec 0c             	sub    esp,0xc
c001933e:	68 03 04 00 00       	push   0x403
c0019343:	6a 01                	push   0x1
c0019345:	53                   	push   ebx
c0019346:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001934c:	50                   	push   eax
c001934d:	56                   	push   esi
c001934e:	e8 f5 f7 ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019353:	83 c4 20             	add    esp,0x20
c0019356:	39 fb                	cmp    ebx,edi
c0019358:	75 dc                	jne    c0019336 <mapVASFirstTime+0x35>
c001935a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001935f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019364:	29 eb                	sub    ebx,ebp
c0019366:	29 ef                	sub    edi,ebp
c0019368:	e8 b6 d6 ff ff       	call   c0016a23 <Phys::allocatePage()>
c001936d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019371:	83 fa 01             	cmp    edx,0x1
c0019374:	19 d2                	sbb    edx,edx
c0019376:	83 ec 0c             	sub    esp,0xc
c0019379:	83 e2 04             	and    edx,0x4
c001937c:	81 c2 03 04 00 00    	add    edx,0x403
c0019382:	52                   	push   edx
c0019383:	6a 01                	push   0x1
c0019385:	53                   	push   ebx
c0019386:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001938c:	50                   	push   eax
c001938d:	56                   	push   esi
c001938e:	e8 b5 f7 ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019393:	83 c4 20             	add    esp,0x20
c0019396:	39 df                	cmp    edi,ebx
c0019398:	75 ce                	jne    c0019368 <mapVASFirstTime+0x67>
c001939a:	83 ec 0c             	sub    esp,0xc
c001939d:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c00193a2:	6a 04                	push   0x4
c00193a4:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c00193aa:	6a ff                	push   0xffffffff
c00193ac:	c1 eb 0c             	shr    ebx,0xc
c00193af:	53                   	push   ebx
c00193b0:	68 00 50 03 c0       	push   0xc0035000
c00193b5:	56                   	push   esi
c00193b6:	e8 09 f3 ff ff       	call   c00186c4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00193bb:	83 c4 14             	add    esp,0x14
c00193be:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00193c3:	6a 04                	push   0x4
c00193c5:	6a ff                	push   0xffffffff
c00193c7:	53                   	push   ebx
c00193c8:	68 00 50 03 c0       	push   0xc0035000
c00193cd:	50                   	push   eax
c00193ce:	e8 f1 f2 ff ff       	call   c00186c4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00193d3:	0f 20 d8             	mov    eax,cr3
c00193d6:	0f 22 d8             	mov    cr3,eax
c00193d9:	83 c4 20             	add    esp,0x20
c00193dc:	83 c4 0c             	add    esp,0xc
c00193df:	5b                   	pop    ebx
c00193e0:	5e                   	pop    esi
c00193e1:	5f                   	pop    edi
c00193e2:	5d                   	pop    ebp
c00193e3:	c3                   	ret    
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	68 01 1b 03 c0       	push   0xc0031b01
c00193ec:	e8 59 01 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	83 c4 0c             	add    esp,0xc
c00193f7:	5b                   	pop    ebx
c00193f8:	5e                   	pop    esi
c00193f9:	5f                   	pop    edi
c00193fa:	5d                   	pop    ebp
c00193fb:	c3                   	ret    

c00193fc <__cxa_atexit>:
c00193fc:	31 c0                	xor    eax,eax
c00193fe:	c3                   	ret    

c00193ff <__cxa_finalize>:
c00193ff:	c3                   	ret    

c0019400 <__stack_chk_fail>:
c0019400:	55                   	push   ebp
c0019401:	89 e5                	mov    ebp,esp
c0019403:	83 ec 10             	sub    esp,0x10
c0019406:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019409:	68 1a 1b 03 c0       	push   0xc0031b1a
c001940e:	e8 37 01 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019413:	58                   	pop    eax
c0019414:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019417:	5a                   	pop    edx
c0019418:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001941b:	68 1a 1b 03 c0       	push   0xc0031b1a
c0019420:	e8 25 01 00 00       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019425:	c7 04 24 22 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b22
c001942c:	e8 a1 70 00 00       	call   c00204d2 <KePanic(char const*)>
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	c9                   	leave  
c0019435:	c3                   	ret    

c0019436 <__cxa_pure_virtual>:
c0019436:	83 ec 18             	sub    esp,0x18
c0019439:	68 3a 1b 03 c0       	push   0xc0031b3a
c001943e:	e8 8f 70 00 00       	call   c00204d2 <KePanic(char const*)>
c0019443:	83 c4 1c             	add    esp,0x1c
c0019446:	c3                   	ret    

c0019447 <operator new[](unsigned long)>:
c0019447:	e9 c8 d2 ff ff       	jmp    c0016714 <malloc>

c001944c <operator delete(void*, unsigned long)>:
c001944c:	e9 e3 d2 ff ff       	jmp    c0016734 <rfree>

c0019451 <operator delete[](void*)>:
c0019451:	e9 de d2 ff ff       	jmp    c0016734 <rfree>

c0019456 <operator delete[](void*, unsigned long)>:
c0019456:	e9 d9 d2 ff ff       	jmp    c0016734 <rfree>

c001945b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001945b:	55                   	push   ebp
c001945c:	57                   	push   edi
c001945d:	56                   	push   esi
c001945e:	53                   	push   ebx
c001945f:	83 ec 20             	sub    esp,0x20
c0019462:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019466:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c001946e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019472:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c001947a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001947e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0019486:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c001948e:	89 f7                	mov    edi,esi
c0019490:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019495:	89 eb                	mov    ebx,ebp
c0019497:	eb 02                	jmp    c001949b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0019499:	89 c7                	mov    edi,eax
c001949b:	31 d2                	xor    edx,edx
c001949d:	89 f8                	mov    eax,edi
c001949f:	f7 f1                	div    ecx
c00194a1:	83 c3 01             	add    ebx,0x1
c00194a4:	39 cf                	cmp    edi,ecx
c00194a6:	73 f1                	jae    c0019499 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c00194a8:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00194ab:	eb 02                	jmp    c00194af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c00194ad:	89 c6                	mov    esi,eax
c00194af:	31 d2                	xor    edx,edx
c00194b1:	89 f0                	mov    eax,esi
c00194b3:	f7 f1                	div    ecx
c00194b5:	83 eb 01             	sub    ebx,0x1
c00194b8:	39 ce                	cmp    esi,ecx
c00194ba:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00194be:	88 13                	mov    BYTE PTR [ebx],dl
c00194c0:	73 eb                	jae    c00194ad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c00194c2:	83 c4 20             	add    esp,0x20
c00194c5:	89 e8                	mov    eax,ebp
c00194c7:	5b                   	pop    ebx
c00194c8:	5e                   	pop    esi
c00194c9:	5f                   	pop    edi
c00194ca:	5d                   	pop    ebp
c00194cb:	c3                   	ret    

c00194cc <Dbg::logc(char)>:
c00194cc:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00194d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194d7:	75 12                	jne    c00194eb <Dbg::logc(char)+0x1f>
c00194d9:	ba fd 03 00 00       	mov    edx,0x3fd
c00194de:	ec                   	in     al,dx
c00194df:	a8 20                	test   al,0x20
c00194e1:	74 fb                	je     c00194de <Dbg::logc(char)+0x12>
c00194e3:	ba f8 03 00 00       	mov    edx,0x3f8
c00194e8:	88 c8                	mov    al,cl
c00194ea:	ee                   	out    dx,al
c00194eb:	c3                   	ret    

c00194ec <Dbg::logs(char*)>:
c00194ec:	53                   	push   ebx
c00194ed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00194f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194f4:	85 c0                	test   eax,eax
c00194f6:	74 11                	je     c0019509 <Dbg::logs(char*)+0x1d>
c00194f8:	50                   	push   eax
c00194f9:	83 c3 01             	add    ebx,0x1
c00194fc:	e8 cb ff ff ff       	call   c00194cc <Dbg::logc(char)>
c0019501:	58                   	pop    eax
c0019502:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019505:	85 c0                	test   eax,eax
c0019507:	75 ef                	jne    c00194f8 <Dbg::logs(char*)+0xc>
c0019509:	5b                   	pop    ebx
c001950a:	c3                   	ret    

c001950b <Dbg::logWriteInt(unsigned int)>:
c001950b:	83 ec 10             	sub    esp,0x10
c001950e:	6a 0a                	push   0xa
c0019510:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019514:	50                   	push   eax
c0019515:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019519:	50                   	push   eax
c001951a:	e8 3c ff ff ff       	call   c001945b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001951f:	50                   	push   eax
c0019520:	e8 c7 ff ff ff       	call   c00194ec <Dbg::logs(char*)>
c0019525:	83 c4 20             	add    esp,0x20
c0019528:	c3                   	ret    

c0019529 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019529:	83 ec 10             	sub    esp,0x10
c001952c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019530:	50                   	push   eax
c0019531:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019535:	50                   	push   eax
c0019536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001953a:	52                   	push   edx
c001953b:	e8 1b ff ff ff       	call   c001945b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019540:	50                   	push   eax
c0019541:	e8 a6 ff ff ff       	call   c00194ec <Dbg::logs(char*)>
c0019546:	83 c4 20             	add    esp,0x20
c0019549:	c3                   	ret    

c001954a <Dbg::kprintf(char const*, ...)>:
c001954a:	55                   	push   ebp
c001954b:	57                   	push   edi
c001954c:	56                   	push   esi
c001954d:	53                   	push   ebx
c001954e:	83 ec 0c             	sub    esp,0xc
c0019551:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019558:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001955c:	74 08                	je     c0019566 <Dbg::kprintf(char const*, ...)+0x1c>
c001955e:	83 c4 0c             	add    esp,0xc
c0019561:	5b                   	pop    ebx
c0019562:	5e                   	pop    esi
c0019563:	5f                   	pop    edi
c0019564:	5d                   	pop    ebp
c0019565:	c3                   	ret    
c0019566:	8d 44 24 24          	lea    eax,[esp+0x24]
c001956a:	31 ff                	xor    edi,edi
c001956c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019570:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019573:	85 c0                	test   eax,eax
c0019575:	74 e7                	je     c001955e <Dbg::kprintf(char const*, ...)+0x14>
c0019577:	8d 77 01             	lea    esi,[edi+0x1]
c001957a:	83 f8 25             	cmp    eax,0x25
c001957d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019580:	75 47                	jne    c00195c9 <Dbg::kprintf(char const*, ...)+0x7f>
c0019582:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0019585:	83 c7 02             	add    edi,0x2
c0019588:	8d 34 3b             	lea    esi,[ebx+edi*1]
c001958b:	83 e8 25             	sub    eax,0x25
c001958e:	0f b6 c0             	movzx  eax,al
c0019591:	83 f8 53             	cmp    eax,0x53
c0019594:	0f 87 ce 00 00 00    	ja     c0019668 <Dbg::kprintf(char const*, ...)+0x11e>
c001959a:	ff 24 85 50 1b 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce4b0]
c00195a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00195a5:	89 c8                	mov    eax,ecx
c00195a7:	83 c1 04             	add    ecx,0x4
c00195aa:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00195ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00195b0:	55                   	push   ebp
c00195b1:	e8 55 ff ff ff       	call   c001950b <Dbg::logWriteInt(unsigned int)>
c00195b6:	58                   	pop    eax
c00195b7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00195ba:	85 c0                	test   eax,eax
c00195bc:	74 a0                	je     c001955e <Dbg::kprintf(char const*, ...)+0x14>
c00195be:	8d 77 01             	lea    esi,[edi+0x1]
c00195c1:	83 f8 25             	cmp    eax,0x25
c00195c4:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00195c7:	74 b9                	je     c0019582 <Dbg::kprintf(char const*, ...)+0x38>
c00195c9:	50                   	push   eax
c00195ca:	89 f7                	mov    edi,esi
c00195cc:	e8 fb fe ff ff       	call   c00194cc <Dbg::logc(char)>
c00195d1:	89 ee                	mov    esi,ebp
c00195d3:	58                   	pop    eax
c00195d4:	eb e1                	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>
c00195d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00195da:	89 c8                	mov    eax,ecx
c00195dc:	83 c1 04             	add    ecx,0x4
c00195df:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00195e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00195e5:	50                   	push   eax
c00195e6:	e8 01 ff ff ff       	call   c00194ec <Dbg::logs(char*)>
c00195eb:	58                   	pop    eax
c00195ec:	eb c9                	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>
c00195ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195f2:	89 d0                	mov    eax,edx
c00195f4:	83 c2 04             	add    edx,0x4
c00195f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00195fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00195fd:	50                   	push   eax
c00195fe:	e8 08 ff ff ff       	call   c001950b <Dbg::logWriteInt(unsigned int)>
c0019603:	58                   	pop    eax
c0019604:	eb b1                	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>
c0019606:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001960a:	89 d0                	mov    eax,edx
c001960c:	83 c2 04             	add    edx,0x4
c001960f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019613:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019616:	50                   	push   eax
c0019617:	e8 b0 fe ff ff       	call   c00194cc <Dbg::logc(char)>
c001961c:	58                   	pop    eax
c001961d:	eb 98                	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>
c001961f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019623:	89 c8                	mov    eax,ecx
c0019625:	83 c1 04             	add    ecx,0x4
c0019628:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001962c:	6a 10                	push   0x10
c001962e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019630:	51                   	push   ecx
c0019631:	e8 f3 fe ff ff       	call   c0019529 <Dbg::logWriteIntBase(unsigned int, int)>
c0019636:	5d                   	pop    ebp
c0019637:	58                   	pop    eax
c0019638:	e9 7a ff ff ff       	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>
c001963d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019641:	89 d0                	mov    eax,edx
c0019643:	83 c2 08             	add    edx,0x8
c0019646:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001964a:	6a 10                	push   0x10
c001964c:	8b 00                	mov    eax,DWORD PTR [eax]
c001964e:	50                   	push   eax
c001964f:	e8 d5 fe ff ff       	call   c0019529 <Dbg::logWriteIntBase(unsigned int, int)>
c0019654:	58                   	pop    eax
c0019655:	5a                   	pop    edx
c0019656:	e9 5c ff ff ff       	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>
c001965b:	6a 25                	push   0x25
c001965d:	e8 6a fe ff ff       	call   c00194cc <Dbg::logc(char)>
c0019662:	5a                   	pop    edx
c0019663:	e9 4f ff ff ff       	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>
c0019668:	6a 25                	push   0x25
c001966a:	e8 5d fe ff ff       	call   c00194cc <Dbg::logc(char)>
c001966f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0019673:	50                   	push   eax
c0019674:	e8 53 fe ff ff       	call   c00194cc <Dbg::logc(char)>
c0019679:	5a                   	pop    edx
c001967a:	59                   	pop    ecx
c001967b:	e9 37 ff ff ff       	jmp    c00195b7 <Dbg::kprintf(char const*, ...)+0x6d>

c0019680 <KiUbsanPrintDetails(char const*, void*)>:
c0019680:	83 ec 1c             	sub    esp,0x1c
c0019683:	83 ec 08             	sub    esp,0x8
c0019686:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001968a:	68 a0 1c 03 c0       	push   0xc0031ca0
c001968f:	e8 b6 fe ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001969b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001969f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00196a5:	83 ec 08             	sub    esp,0x8
c00196a8:	50                   	push   eax
c00196a9:	68 b4 1c 03 c0       	push   0xc0031cb4
c00196ae:	e8 97 fe ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00196bd:	83 ec 08             	sub    esp,0x8
c00196c0:	50                   	push   eax
c00196c1:	68 be 1c 03 c0       	push   0xc0031cbe
c00196c6:	e8 7f fe ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00196cb:	83 c4 10             	add    esp,0x10
c00196ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00196d5:	83 ec 08             	sub    esp,0x8
c00196d8:	50                   	push   eax
c00196d9:	68 c8 1c 03 c0       	push   0xc0031cc8
c00196de:	e8 67 fe ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00196e3:	83 c4 10             	add    esp,0x10
c00196e6:	90                   	nop
c00196e7:	83 c4 1c             	add    esp,0x1c
c00196ea:	c3                   	ret    
c00196eb:	90                   	nop

c00196ec <__ubsan_handle_type_mismatch_v1>:
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	83 ec 08             	sub    esp,0x8
c00196f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196f6:	68 0c 1e 03 c0       	push   0xc0031e0c
c00196fb:	e8 80 ff ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c0019700:	83 c4 10             	add    esp,0x10
c0019703:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019708:	75 16                	jne    c0019720 <__ubsan_handle_type_mismatch_v1+0x34>
c001970a:	83 ec 0c             	sub    esp,0xc
c001970d:	68 d2 1c 03 c0       	push   0xc0031cd2
c0019712:	e8 33 fe ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	e9 91 00 00 00       	jmp    c00197b0 <__ubsan_handle_type_mismatch_v1+0xc4>
c001971f:	90                   	nop
c0019720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019724:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019727:	85 c0                	test   eax,eax
c0019729:	74 29                	je     c0019754 <__ubsan_handle_type_mismatch_v1+0x68>
c001972b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001972f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019732:	83 e8 01             	sub    eax,0x1
c0019735:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019739:	75 19                	jne    c0019754 <__ubsan_handle_type_mismatch_v1+0x68>
c001973b:	83 ec 08             	sub    esp,0x8
c001973e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019742:	68 2c 1e 03 c0       	push   0xc0031e2c
c0019747:	e8 fe fd ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001974c:	83 c4 10             	add    esp,0x10
c001974f:	eb 5f                	jmp    c00197b0 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019751:	8d 76 00             	lea    esi,[esi+0x0]
c0019754:	83 ec 0c             	sub    esp,0xc
c0019757:	68 e7 1c 03 c0       	push   0xc0031ce7
c001975c:	e8 e9 fd ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019768:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001976b:	0f b6 c0             	movzx  eax,al
c001976e:	83 ec 08             	sub    esp,0x8
c0019771:	50                   	push   eax
c0019772:	68 01 1d 03 c0       	push   0xc0031d01
c0019777:	e8 ce fd ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019783:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019786:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001978d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019791:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019794:	0f b6 c0             	movzx  eax,al
c0019797:	8b 04 85 c0 3f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc040]
c001979e:	51                   	push   ecx
c001979f:	52                   	push   edx
c00197a0:	50                   	push   eax
c00197a1:	68 54 1e 03 c0       	push   0xc0031e54
c00197a6:	e8 9f fd ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00197ab:	83 c4 10             	add    esp,0x10
c00197ae:	66 90                	xchg   ax,ax
c00197b0:	83 ec 0c             	sub    esp,0xc
c00197b3:	68 0c 1e 03 c0       	push   0xc0031e0c
c00197b8:	e8 15 6d 00 00       	call   c00204d2 <KePanic(char const*)>
c00197bd:	83 c4 10             	add    esp,0x10
c00197c0:	90                   	nop
c00197c1:	83 c4 0c             	add    esp,0xc
c00197c4:	c3                   	ret    
c00197c5:	8d 76 00             	lea    esi,[esi+0x0]

c00197c8 <__ubsan_handle_pointer_overflow>:
c00197c8:	83 ec 0c             	sub    esp,0xc
c00197cb:	83 ec 08             	sub    esp,0x8
c00197ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197d2:	68 9c 1e 03 c0       	push   0xc0031e9c
c00197d7:	e8 a4 fe ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c00197dc:	83 c4 10             	add    esp,0x10
c00197df:	83 ec 0c             	sub    esp,0xc
c00197e2:	68 9c 1e 03 c0       	push   0xc0031e9c
c00197e7:	e8 e6 6c 00 00       	call   c00204d2 <KePanic(char const*)>
c00197ec:	83 c4 10             	add    esp,0x10
c00197ef:	90                   	nop
c00197f0:	83 c4 0c             	add    esp,0xc
c00197f3:	c3                   	ret    

c00197f4 <__ubsan_handle_out_of_bounds>:
c00197f4:	83 ec 0c             	sub    esp,0xc
c00197f7:	83 ec 08             	sub    esp,0x8
c00197fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197fe:	68 0c 1d 03 c0       	push   0xc0031d0c
c0019803:	e8 78 fe ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c0019808:	83 c4 10             	add    esp,0x10
c001980b:	83 ec 0c             	sub    esp,0xc
c001980e:	68 0c 1d 03 c0       	push   0xc0031d0c
c0019813:	e8 ba 6c 00 00       	call   c00204d2 <KePanic(char const*)>
c0019818:	83 c4 10             	add    esp,0x10
c001981b:	90                   	nop
c001981c:	83 c4 0c             	add    esp,0xc
c001981f:	c3                   	ret    

c0019820 <__ubsan_handle_add_overflow>:
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	83 ec 08             	sub    esp,0x8
c0019826:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001982a:	68 29 1d 03 c0       	push   0xc0031d29
c001982f:	e8 4c fe ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c0019834:	83 c4 10             	add    esp,0x10
c0019837:	83 ec 0c             	sub    esp,0xc
c001983a:	68 29 1d 03 c0       	push   0xc0031d29
c001983f:	e8 8e 6c 00 00       	call   c00204d2 <KePanic(char const*)>
c0019844:	83 c4 10             	add    esp,0x10
c0019847:	90                   	nop
c0019848:	83 c4 0c             	add    esp,0xc
c001984b:	c3                   	ret    

c001984c <__ubsan_handle_load_invalid_value>:
c001984c:	83 ec 0c             	sub    esp,0xc
c001984f:	83 ec 08             	sub    esp,0x8
c0019852:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019856:	68 bc 1e 03 c0       	push   0xc0031ebc
c001985b:	e8 20 fe ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	83 ec 0c             	sub    esp,0xc
c0019866:	68 bc 1e 03 c0       	push   0xc0031ebc
c001986b:	e8 62 6c 00 00       	call   c00204d2 <KePanic(char const*)>
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	90                   	nop
c0019874:	83 c4 0c             	add    esp,0xc
c0019877:	c3                   	ret    

c0019878 <__ubsan_handle_divrem_overflow>:
c0019878:	83 ec 0c             	sub    esp,0xc
c001987b:	83 ec 08             	sub    esp,0x8
c001987e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019882:	68 e0 1e 03 c0       	push   0xc0031ee0
c0019887:	e8 f4 fd ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c001988c:	83 c4 10             	add    esp,0x10
c001988f:	83 ec 0c             	sub    esp,0xc
c0019892:	68 e0 1e 03 c0       	push   0xc0031ee0
c0019897:	e8 36 6c 00 00       	call   c00204d2 <KePanic(char const*)>
c001989c:	83 c4 10             	add    esp,0x10
c001989f:	90                   	nop
c00198a0:	83 c4 0c             	add    esp,0xc
c00198a3:	c3                   	ret    

c00198a4 <__ubsan_handle_mul_overflow>:
c00198a4:	83 ec 0c             	sub    esp,0xc
c00198a7:	83 ec 08             	sub    esp,0x8
c00198aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198ae:	68 45 1d 03 c0       	push   0xc0031d45
c00198b3:	e8 c8 fd ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c00198b8:	83 c4 10             	add    esp,0x10
c00198bb:	83 ec 0c             	sub    esp,0xc
c00198be:	68 45 1d 03 c0       	push   0xc0031d45
c00198c3:	e8 0a 6c 00 00       	call   c00204d2 <KePanic(char const*)>
c00198c8:	83 c4 10             	add    esp,0x10
c00198cb:	90                   	nop
c00198cc:	83 c4 0c             	add    esp,0xc
c00198cf:	c3                   	ret    

c00198d0 <__ubsan_handle_sub_overflow>:
c00198d0:	83 ec 0c             	sub    esp,0xc
c00198d3:	83 ec 08             	sub    esp,0x8
c00198d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198da:	68 61 1d 03 c0       	push   0xc0031d61
c00198df:	e8 9c fd ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c00198e4:	83 c4 10             	add    esp,0x10
c00198e7:	83 ec 0c             	sub    esp,0xc
c00198ea:	68 61 1d 03 c0       	push   0xc0031d61
c00198ef:	e8 de 6b 00 00       	call   c00204d2 <KePanic(char const*)>
c00198f4:	83 c4 10             	add    esp,0x10
c00198f7:	90                   	nop
c00198f8:	83 c4 0c             	add    esp,0xc
c00198fb:	c3                   	ret    

c00198fc <__ubsan_handle_shift_out_of_bounds>:
c00198fc:	83 ec 0c             	sub    esp,0xc
c00198ff:	83 ec 08             	sub    esp,0x8
c0019902:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019906:	68 00 1f 03 c0       	push   0xc0031f00
c001990b:	e8 70 fd ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c0019910:	83 c4 10             	add    esp,0x10
c0019913:	83 ec 0c             	sub    esp,0xc
c0019916:	68 00 1f 03 c0       	push   0xc0031f00
c001991b:	e8 b2 6b 00 00       	call   c00204d2 <KePanic(char const*)>
c0019920:	83 c4 10             	add    esp,0x10
c0019923:	90                   	nop
c0019924:	83 c4 0c             	add    esp,0xc
c0019927:	c3                   	ret    

c0019928 <__ubsan_handle_negate_overflow>:
c0019928:	83 ec 0c             	sub    esp,0xc
c001992b:	83 ec 08             	sub    esp,0x8
c001992e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019932:	68 24 1f 03 c0       	push   0xc0031f24
c0019937:	e8 44 fd ff ff       	call   c0019680 <KiUbsanPrintDetails(char const*, void*)>
c001993c:	83 c4 10             	add    esp,0x10
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	68 24 1f 03 c0       	push   0xc0031f24
c0019947:	e8 86 6b 00 00       	call   c00204d2 <KePanic(char const*)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	90                   	nop
c0019950:	83 c4 0c             	add    esp,0xc
c0019953:	c3                   	ret    

c0019954 <KiIsHashInTable(unsigned short)>:
c0019954:	0f b7 d0             	movzx  edx,ax
c0019957:	83 e0 07             	and    eax,0x7
c001995a:	c1 fa 03             	sar    edx,0x3
c001995d:	88 c1                	mov    cl,al
c001995f:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c0019966:	d3 fa                	sar    edx,cl
c0019968:	89 d0                	mov    eax,edx
c001996a:	83 e0 01             	and    eax,0x1
c001996d:	c3                   	ret    

c001996e <KiSetHashInTable(unsigned short, bool)>:
c001996e:	56                   	push   esi
c001996f:	53                   	push   ebx
c0019970:	0f b7 d8             	movzx  ebx,ax
c0019973:	c1 fb 03             	sar    ebx,0x3
c0019976:	83 e0 07             	and    eax,0x7
c0019979:	89 c1                	mov    ecx,eax
c001997b:	b8 01 00 00 00       	mov    eax,0x1
c0019980:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c0019987:	d3 e0                	shl    eax,cl
c0019989:	84 d2                	test   dl,dl
c001998b:	74 04                	je     c0019991 <KiSetHashInTable(unsigned short, bool)+0x23>
c001998d:	09 f0                	or     eax,esi
c001998f:	eb 04                	jmp    c0019995 <KiSetHashInTable(unsigned short, bool)+0x27>
c0019991:	f7 d0                	not    eax
c0019993:	21 f0                	and    eax,esi
c0019995:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c001999b:	5b                   	pop    ebx
c001999c:	5e                   	pop    esi
c001999d:	c3                   	ret    

c001999e <KiFlushSymlinkChanges()>:
c001999e:	57                   	push   edi
c001999f:	56                   	push   esi
c00199a0:	53                   	push   ebx
c00199a1:	83 ec 1c             	sub    esp,0x1c
c00199a4:	68 14 01 00 00       	push   0x114
c00199a9:	e8 66 cd ff ff       	call   c0016714 <malloc>
c00199ae:	83 c4 0c             	add    esp,0xc
c00199b1:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00199b7:	68 43 1f 03 c0       	push   0xc0031f43
c00199bc:	50                   	push   eax
c00199bd:	89 c3                	mov    ebx,eax
c00199bf:	e8 9e 0d 00 00       	call   c001a762 <File::File(char const*, Process*)>
c00199c4:	83 c4 10             	add    esp,0x10
c00199c7:	85 db                	test   ebx,ebx
c00199c9:	75 10                	jne    c00199db <KiFlushSymlinkChanges()+0x3d>
c00199cb:	83 ec 0c             	sub    esp,0xc
c00199ce:	68 61 1f 03 c0       	push   0xc0031f61
c00199d3:	e8 fa 6a 00 00       	call   c00204d2 <KePanic(char const*)>
c00199d8:	83 c4 10             	add    esp,0x10
c00199db:	50                   	push   eax
c00199dc:	50                   	push   eax
c00199dd:	6a 06                	push   0x6
c00199df:	53                   	push   ebx
c00199e0:	e8 9b 0d 00 00       	call   c001a780 <File::open(FileOpenMode)>
c00199e5:	83 c4 10             	add    esp,0x10
c00199e8:	85 c0                	test   eax,eax
c00199ea:	74 10                	je     c00199fc <KiFlushSymlinkChanges()+0x5e>
c00199ec:	83 ec 0c             	sub    esp,0xc
c00199ef:	68 7b 1f 03 c0       	push   0xc0031f7b
c00199f4:	e8 d9 6a 00 00       	call   c00204d2 <KePanic(char const*)>
c00199f9:	83 c4 10             	add    esp,0x10
c00199fc:	31 f6                	xor    esi,esi
c00199fe:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019a04:	7e 70                	jle    c0019a76 <KiFlushSymlinkChanges()+0xd8>
c0019a06:	83 ec 0c             	sub    esp,0xc
c0019a09:	89 f0                	mov    eax,esi
c0019a0b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019a0d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019a11:	c1 e0 08             	shl    eax,0x8
c0019a14:	57                   	push   edi
c0019a15:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a1a:	50                   	push   eax
c0019a1b:	6a 00                	push   0x0
c0019a1d:	68 00 01 00 00       	push   0x100
c0019a22:	53                   	push   ebx
c0019a23:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0019a26:	83 c4 20             	add    esp,0x20
c0019a29:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019a31:	74 10                	je     c0019a43 <KiFlushSymlinkChanges()+0xa5>
c0019a33:	83 ec 0c             	sub    esp,0xc
c0019a36:	68 95 1f 03 c0       	push   0xc0031f95
c0019a3b:	e8 92 6a 00 00       	call   c00204d2 <KePanic(char const*)>
c0019a40:	83 c4 10             	add    esp,0x10
c0019a43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a45:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c0019a4c:	83 ec 0c             	sub    esp,0xc
c0019a4f:	57                   	push   edi
c0019a50:	52                   	push   edx
c0019a51:	6a 00                	push   0x0
c0019a53:	6a 08                	push   0x8
c0019a55:	53                   	push   ebx
c0019a56:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019a59:	83 c4 20             	add    esp,0x20
c0019a5c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019a61:	74 10                	je     c0019a73 <KiFlushSymlinkChanges()+0xd5>
c0019a63:	83 ec 0c             	sub    esp,0xc
c0019a66:	68 af 1f 03 c0       	push   0xc0031faf
c0019a6b:	e8 62 6a 00 00       	call   c00204d2 <KePanic(char const*)>
c0019a70:	83 c4 10             	add    esp,0x10
c0019a73:	46                   	inc    esi
c0019a74:	eb 88                	jmp    c00199fe <KiFlushSymlinkChanges()+0x60>
c0019a76:	83 ec 0c             	sub    esp,0xc
c0019a79:	53                   	push   ebx
c0019a7a:	e8 5f 0d 00 00       	call   c001a7de <File::close()>
c0019a7f:	83 c4 10             	add    esp,0x10
c0019a82:	85 db                	test   ebx,ebx
c0019a84:	74 0c                	je     c0019a92 <KiFlushSymlinkChanges()+0xf4>
c0019a86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a88:	83 ec 0c             	sub    esp,0xc
c0019a8b:	53                   	push   ebx
c0019a8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019a9c:	83 c4 10             	add    esp,0x10
c0019a9f:	5b                   	pop    ebx
c0019aa0:	5e                   	pop    esi
c0019aa1:	5f                   	pop    edi
c0019aa2:	c3                   	ret    

c0019aa3 <KiDeinitialiseSymlinks(void*)>:
c0019aa3:	e9 f6 fe ff ff       	jmp    c001999e <KiFlushSymlinkChanges()>

c0019aa8 <KiGetSymlinkHash(char const*)>:
c0019aa8:	53                   	push   ebx
c0019aa9:	89 c3                	mov    ebx,eax
c0019aab:	83 ec 14             	sub    esp,0x14
c0019aae:	50                   	push   eax
c0019aaf:	e8 cc 6a fe ff       	call   c0000580 <strlen>
c0019ab4:	5a                   	pop    edx
c0019ab5:	59                   	pop    ecx
c0019ab6:	50                   	push   eax
c0019ab7:	53                   	push   ebx
c0019ab8:	e8 7c 63 00 00       	call   c001fe39 <KeCalculateCRC32(unsigned char*, int)>
c0019abd:	83 c4 18             	add    esp,0x18
c0019ac0:	5b                   	pop    ebx
c0019ac1:	89 c2                	mov    edx,eax
c0019ac3:	c1 ea 10             	shr    edx,0x10
c0019ac6:	31 d0                	xor    eax,edx
c0019ac8:	c3                   	ret    

c0019ac9 <KiCreateSymlinkID()>:
c0019ac9:	55                   	push   ebp
c0019aca:	57                   	push   edi
c0019acb:	56                   	push   esi
c0019acc:	53                   	push   ebx
c0019acd:	31 db                	xor    ebx,ebx
c0019acf:	83 ec 1c             	sub    esp,0x1c
c0019ad2:	e8 49 6b 00 00       	call   c0020620 <KeRand()>
c0019ad7:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019add:	31 d2                	xor    edx,edx
c0019adf:	43                   	inc    ebx
c0019ae0:	31 ff                	xor    edi,edi
c0019ae2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019ae5:	89 ee                	mov    esi,ebp
c0019ae7:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019aed:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019af1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019af5:	c1 e0 1f             	shl    eax,0x1f
c0019af8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019afe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b02:	75 10                	jne    c0019b14 <KiCreateSymlinkID()+0x4b>
c0019b04:	83 ec 0c             	sub    esp,0xc
c0019b07:	68 c9 1f 03 c0       	push   0xc0031fc9
c0019b0c:	e8 c1 69 00 00       	call   c00204d2 <KePanic(char const*)>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0019b18:	75 06                	jne    c0019b20 <KiCreateSymlinkID()+0x57>
c0019b1a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0019b1e:	74 b2                	je     c0019ad2 <KiCreateSymlinkID()+0x9>
c0019b20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b28:	83 c4 1c             	add    esp,0x1c
c0019b2b:	5b                   	pop    ebx
c0019b2c:	31 f0                	xor    eax,esi
c0019b2e:	5e                   	pop    esi
c0019b2f:	31 fa                	xor    edx,edi
c0019b31:	5f                   	pop    edi
c0019b32:	5d                   	pop    ebp
c0019b33:	c3                   	ret    

c0019b34 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019b34:	53                   	push   ebx
c0019b35:	83 ec 0c             	sub    esp,0xc
c0019b38:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019b40:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019b45:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b49:	68 00 01 00 00       	push   0x100
c0019b4e:	6a 00                	push   0x0
c0019b50:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c0019b57:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019b5e:	c1 e0 08             	shl    eax,0x8
c0019b61:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019b66:	50                   	push   eax
c0019b67:	e8 84 69 fe ff       	call   c00004f0 <memset>
c0019b6c:	58                   	pop    eax
c0019b6d:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019b72:	5a                   	pop    edx
c0019b73:	c1 e0 08             	shl    eax,0x8
c0019b76:	53                   	push   ebx
c0019b77:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019b7c:	50                   	push   eax
c0019b7d:	e8 ce 6a fe ff       	call   c0000650 <strcpy>
c0019b82:	89 d8                	mov    eax,ebx
c0019b84:	e8 1f ff ff ff       	call   c0019aa8 <KiGetSymlinkHash(char const*)>
c0019b89:	59                   	pop    ecx
c0019b8a:	0f b7 d8             	movzx  ebx,ax
c0019b8d:	58                   	pop    eax
c0019b8e:	53                   	push   ebx
c0019b8f:	68 d2 1f 03 c0       	push   0xc0031fd2
c0019b94:	e8 b1 f9 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019b99:	89 d8                	mov    eax,ebx
c0019b9b:	ba 01 00 00 00       	mov    edx,0x1
c0019ba0:	e8 c9 fd ff ff       	call   c001996e <KiSetHashInTable(unsigned short, bool)>
c0019ba5:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	40                   	inc    eax
c0019bae:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019bb3:	83 f8 03             	cmp    eax,0x3
c0019bb6:	7e 09                	jle    c0019bc1 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019bb8:	83 c4 08             	add    esp,0x8
c0019bbb:	5b                   	pop    ebx
c0019bbc:	e9 dd fd ff ff       	jmp    c001999e <KiFlushSymlinkChanges()>
c0019bc1:	83 c4 08             	add    esp,0x8
c0019bc4:	5b                   	pop    ebx
c0019bc5:	c3                   	ret    

c0019bc6 <KeInitialiseSymlinks()>:
c0019bc6:	57                   	push   edi
c0019bc7:	56                   	push   esi
c0019bc8:	53                   	push   ebx
c0019bc9:	81 ec 14 01 00 00    	sub    esp,0x114
c0019bcf:	68 00 20 00 00       	push   0x2000
c0019bd4:	6a 00                	push   0x0
c0019bd6:	68 00 af 03 c0       	push   0xc003af00
c0019bdb:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019be5:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019bef:	e8 fc 68 fe ff       	call   c00004f0 <memset>
c0019bf4:	59                   	pop    ecx
c0019bf5:	5b                   	pop    ebx
c0019bf6:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019bfc:	68 e6 1f 03 c0       	push   0xc0031fe6
c0019c01:	e8 44 f9 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019c06:	5e                   	pop    esi
c0019c07:	5f                   	pop    edi
c0019c08:	6a 00                	push   0x0
c0019c0a:	68 a3 9a 01 c0       	push   0xc0019aa3
c0019c0f:	e8 4a 60 00 00       	call   c001fc5e <KeRegisterAtexit(void (*)(void*), void*)>
c0019c14:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019c1b:	e8 f4 ca ff ff       	call   c0016714 <malloc>
c0019c20:	83 c4 0c             	add    esp,0xc
c0019c23:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019c29:	68 43 1f 03 c0       	push   0xc0031f43
c0019c2e:	50                   	push   eax
c0019c2f:	89 c3                	mov    ebx,eax
c0019c31:	e8 2c 0b 00 00       	call   c001a762 <File::File(char const*, Process*)>
c0019c36:	83 c4 10             	add    esp,0x10
c0019c39:	85 db                	test   ebx,ebx
c0019c3b:	75 10                	jne    c0019c4d <KeInitialiseSymlinks()+0x87>
c0019c3d:	83 ec 0c             	sub    esp,0xc
c0019c40:	68 03 20 03 c0       	push   0xc0032003
c0019c45:	e8 88 68 00 00       	call   c00204d2 <KePanic(char const*)>
c0019c4a:	83 c4 10             	add    esp,0x10
c0019c4d:	83 ec 0c             	sub    esp,0xc
c0019c50:	53                   	push   ebx
c0019c51:	e8 ee 0d 00 00       	call   c001aa44 <File::exists()>
c0019c56:	83 c4 10             	add    esp,0x10
c0019c59:	84 c0                	test   al,al
c0019c5b:	75 3a                	jne    c0019c97 <KeInitialiseSymlinks()+0xd1>
c0019c5d:	52                   	push   edx
c0019c5e:	52                   	push   edx
c0019c5f:	6a 12                	push   0x12
c0019c61:	53                   	push   ebx
c0019c62:	e8 19 0b 00 00       	call   c001a780 <File::open(FileOpenMode)>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	85 c0                	test   eax,eax
c0019c6c:	74 10                	je     c0019c7e <KeInitialiseSymlinks()+0xb8>
c0019c6e:	83 ec 0c             	sub    esp,0xc
c0019c71:	68 20 20 03 c0       	push   0xc0032020
c0019c76:	e8 57 68 00 00       	call   c00204d2 <KePanic(char const*)>
c0019c7b:	83 c4 10             	add    esp,0x10
c0019c7e:	83 ec 0c             	sub    esp,0xc
c0019c81:	53                   	push   ebx
c0019c82:	e8 57 0b 00 00       	call   c001a7de <File::close()>
c0019c87:	83 c4 10             	add    esp,0x10
c0019c8a:	85 db                	test   ebx,ebx
c0019c8c:	0f 84 9e 00 00 00    	je     c0019d30 <KeInitialiseSymlinks()+0x16a>
c0019c92:	e9 8d 00 00 00       	jmp    c0019d24 <KeInitialiseSymlinks()+0x15e>
c0019c97:	50                   	push   eax
c0019c98:	50                   	push   eax
c0019c99:	6a 01                	push   0x1
c0019c9b:	53                   	push   ebx
c0019c9c:	e8 df 0a 00 00       	call   c001a780 <File::open(FileOpenMode)>
c0019ca1:	83 c4 10             	add    esp,0x10
c0019ca4:	85 c0                	test   eax,eax
c0019ca6:	74 10                	je     c0019cb8 <KeInitialiseSymlinks()+0xf2>
c0019ca8:	83 ec 0c             	sub    esp,0xc
c0019cab:	68 3d 20 03 c0       	push   0xc003203d
c0019cb0:	e8 1d 68 00 00       	call   c00204d2 <KePanic(char const*)>
c0019cb5:	83 c4 10             	add    esp,0x10
c0019cb8:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019cbe:	83 ec 0c             	sub    esp,0xc
c0019cc1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cc7:	57                   	push   edi
c0019cc8:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019ccc:	56                   	push   esi
c0019ccd:	6a 00                	push   0x0
c0019ccf:	68 00 01 00 00       	push   0x100
c0019cd4:	53                   	push   ebx
c0019cd5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019cd8:	83 c4 20             	add    esp,0x20
c0019cdb:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019ce3:	75 33                	jne    c0019d18 <KeInitialiseSymlinks()+0x152>
c0019ce5:	83 ec 0c             	sub    esp,0xc
c0019ce8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cea:	57                   	push   edi
c0019ceb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019cef:	52                   	push   edx
c0019cf0:	6a 00                	push   0x0
c0019cf2:	6a 08                	push   0x8
c0019cf4:	53                   	push   ebx
c0019cf5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019cf8:	83 c4 20             	add    esp,0x20
c0019cfb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d00:	75 16                	jne    c0019d18 <KeInitialiseSymlinks()+0x152>
c0019d02:	89 f0                	mov    eax,esi
c0019d04:	e8 9f fd ff ff       	call   c0019aa8 <KiGetSymlinkHash(char const*)>
c0019d09:	ba 01 00 00 00       	mov    edx,0x1
c0019d0e:	0f b7 c0             	movzx  eax,ax
c0019d11:	e8 58 fc ff ff       	call   c001996e <KiSetHashInTable(unsigned short, bool)>
c0019d16:	eb a0                	jmp    c0019cb8 <KeInitialiseSymlinks()+0xf2>
c0019d18:	83 ec 0c             	sub    esp,0xc
c0019d1b:	53                   	push   ebx
c0019d1c:	e8 bd 0a 00 00       	call   c001a7de <File::close()>
c0019d21:	83 c4 10             	add    esp,0x10
c0019d24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d26:	83 ec 0c             	sub    esp,0xc
c0019d29:	53                   	push   ebx
c0019d2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	81 c4 10 01 00 00    	add    esp,0x110
c0019d36:	5b                   	pop    ebx
c0019d37:	5e                   	pop    esi
c0019d38:	5f                   	pop    edi
c0019d39:	c3                   	ret    

c0019d3a <KiIsSymlinkRegistered(char const*)>:
c0019d3a:	55                   	push   ebp
c0019d3b:	57                   	push   edi
c0019d3c:	56                   	push   esi
c0019d3d:	53                   	push   ebx
c0019d3e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d44:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019d4b:	89 f0                	mov    eax,esi
c0019d4d:	e8 56 fd ff ff       	call   c0019aa8 <KiGetSymlinkHash(char const*)>
c0019d52:	53                   	push   ebx
c0019d53:	56                   	push   esi
c0019d54:	0f b7 c0             	movzx  eax,ax
c0019d57:	50                   	push   eax
c0019d58:	68 58 20 03 c0       	push   0xc0032058
c0019d5d:	e8 e8 f7 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0019d62:	89 f0                	mov    eax,esi
c0019d64:	e8 3f fd ff ff       	call   c0019aa8 <KiGetSymlinkHash(char const*)>
c0019d69:	0f b7 c0             	movzx  eax,ax
c0019d6c:	e8 e3 fb ff ff       	call   c0019954 <KiIsHashInTable(unsigned short)>
c0019d71:	83 c4 10             	add    esp,0x10
c0019d74:	31 d2                	xor    edx,edx
c0019d76:	88 c1                	mov    cl,al
c0019d78:	31 c0                	xor    eax,eax
c0019d7a:	84 c9                	test   cl,cl
c0019d7c:	0f 84 31 01 00 00    	je     c0019eb3 <KiIsSymlinkRegistered(char const*)+0x179>
c0019d82:	31 db                	xor    ebx,ebx
c0019d84:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019d8a:	7e 30                	jle    c0019dbc <KiIsSymlinkRegistered(char const*)+0x82>
c0019d8c:	89 d8                	mov    eax,ebx
c0019d8e:	c1 e0 08             	shl    eax,0x8
c0019d91:	51                   	push   ecx
c0019d92:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019d97:	51                   	push   ecx
c0019d98:	50                   	push   eax
c0019d99:	56                   	push   esi
c0019d9a:	e8 e1 69 fe ff       	call   c0000780 <strcmp>
c0019d9f:	83 c4 10             	add    esp,0x10
c0019da2:	85 c0                	test   eax,eax
c0019da4:	75 13                	jne    c0019db9 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019da6:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019dad:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019db4:	e9 fa 00 00 00       	jmp    c0019eb3 <KiIsSymlinkRegistered(char const*)+0x179>
c0019db9:	43                   	inc    ebx
c0019dba:	eb c8                	jmp    c0019d84 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019dbc:	83 ec 0c             	sub    esp,0xc
c0019dbf:	68 14 01 00 00       	push   0x114
c0019dc4:	e8 4b c9 ff ff       	call   c0016714 <malloc>
c0019dc9:	83 c4 0c             	add    esp,0xc
c0019dcc:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019dd2:	68 43 1f 03 c0       	push   0xc0031f43
c0019dd7:	50                   	push   eax
c0019dd8:	89 c3                	mov    ebx,eax
c0019dda:	e8 83 09 00 00       	call   c001a762 <File::File(char const*, Process*)>
c0019ddf:	83 c4 10             	add    esp,0x10
c0019de2:	85 db                	test   ebx,ebx
c0019de4:	75 12                	jne    c0019df8 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019de6:	83 ec 0c             	sub    esp,0xc
c0019de9:	68 6d 20 03 c0       	push   0xc003206d
c0019dee:	e8 df 66 00 00       	call   c00204d2 <KePanic(char const*)>
c0019df3:	83 c4 10             	add    esp,0x10
c0019df6:	eb 10                	jmp    c0019e08 <KiIsSymlinkRegistered(char const*)+0xce>
c0019df8:	83 ec 0c             	sub    esp,0xc
c0019dfb:	53                   	push   ebx
c0019dfc:	e8 43 0c 00 00       	call   c001aa44 <File::exists()>
c0019e01:	83 c4 10             	add    esp,0x10
c0019e04:	84 c0                	test   al,al
c0019e06:	74 de                	je     c0019de6 <KiIsSymlinkRegistered(char const*)+0xac>
c0019e08:	52                   	push   edx
c0019e09:	52                   	push   edx
c0019e0a:	6a 01                	push   0x1
c0019e0c:	53                   	push   ebx
c0019e0d:	e8 6e 09 00 00       	call   c001a780 <File::open(FileOpenMode)>
c0019e12:	83 c4 10             	add    esp,0x10
c0019e15:	85 c0                	test   eax,eax
c0019e17:	74 10                	je     c0019e29 <KiIsSymlinkRegistered(char const*)+0xef>
c0019e19:	83 ec 0c             	sub    esp,0xc
c0019e1c:	68 88 20 03 c0       	push   0xc0032088
c0019e21:	e8 ac 66 00 00       	call   c00204d2 <KePanic(char const*)>
c0019e26:	83 c4 10             	add    esp,0x10
c0019e29:	83 ec 0c             	sub    esp,0xc
c0019e2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e2e:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019e32:	55                   	push   ebp
c0019e33:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019e37:	57                   	push   edi
c0019e38:	6a 00                	push   0x0
c0019e3a:	68 00 01 00 00       	push   0x100
c0019e3f:	53                   	push   ebx
c0019e40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e43:	83 c4 20             	add    esp,0x20
c0019e46:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019e4e:	75 4b                	jne    c0019e9b <KiIsSymlinkRegistered(char const*)+0x161>
c0019e50:	83 ec 0c             	sub    esp,0xc
c0019e53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e55:	55                   	push   ebp
c0019e56:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019e5a:	52                   	push   edx
c0019e5b:	6a 00                	push   0x0
c0019e5d:	6a 08                	push   0x8
c0019e5f:	53                   	push   ebx
c0019e60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e63:	83 c4 20             	add    esp,0x20
c0019e66:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019e6b:	75 2e                	jne    c0019e9b <KiIsSymlinkRegistered(char const*)+0x161>
c0019e6d:	50                   	push   eax
c0019e6e:	50                   	push   eax
c0019e6f:	57                   	push   edi
c0019e70:	56                   	push   esi
c0019e71:	e8 0a 69 fe ff       	call   c0000780 <strcmp>
c0019e76:	83 c4 10             	add    esp,0x10
c0019e79:	85 c0                	test   eax,eax
c0019e7b:	75 ac                	jne    c0019e29 <KiIsSymlinkRegistered(char const*)+0xef>
c0019e7d:	83 ec 0c             	sub    esp,0xc
c0019e80:	53                   	push   ebx
c0019e81:	e8 58 09 00 00       	call   c001a7de <File::close()>
c0019e86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e96:	83 c4 10             	add    esp,0x10
c0019e99:	eb 18                	jmp    c0019eb3 <KiIsSymlinkRegistered(char const*)+0x179>
c0019e9b:	83 ec 0c             	sub    esp,0xc
c0019e9e:	53                   	push   ebx
c0019e9f:	e8 3a 09 00 00       	call   c001a7de <File::close()>
c0019ea4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ea6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ea9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019eac:	83 c4 10             	add    esp,0x10
c0019eaf:	31 c0                	xor    eax,eax
c0019eb1:	31 d2                	xor    edx,edx
c0019eb3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eb9:	5b                   	pop    ebx
c0019eba:	5e                   	pop    esi
c0019ebb:	5f                   	pop    edi
c0019ebc:	5d                   	pop    ebp
c0019ebd:	c3                   	ret    

c0019ebe <KeDereferenceSymlink(char const*, char*)>:
c0019ebe:	55                   	push   ebp
c0019ebf:	57                   	push   edi
c0019ec0:	56                   	push   esi
c0019ec1:	53                   	push   ebx
c0019ec2:	83 ec 48             	sub    esp,0x48
c0019ec5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019ec9:	56                   	push   esi
c0019eca:	e8 6b fe ff ff       	call   c0019d3a <KiIsSymlinkRegistered(char const*)>
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	89 c7                	mov    edi,eax
c0019ed4:	89 d0                	mov    eax,edx
c0019ed6:	09 f8                	or     eax,edi
c0019ed8:	75 07                	jne    c0019ee1 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019eda:	31 c0                	xor    eax,eax
c0019edc:	e9 7c 01 00 00       	jmp    c001a05d <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019ee1:	83 ec 0c             	sub    esp,0xc
c0019ee4:	89 d5                	mov    ebp,edx
c0019ee6:	68 14 01 00 00       	push   0x114
c0019eeb:	e8 24 c8 ff ff       	call   c0016714 <malloc>
c0019ef0:	83 c4 0c             	add    esp,0xc
c0019ef3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019ef9:	56                   	push   esi
c0019efa:	50                   	push   eax
c0019efb:	89 c3                	mov    ebx,eax
c0019efd:	e8 60 08 00 00       	call   c001a762 <File::File(char const*, Process*)>
c0019f02:	83 c4 10             	add    esp,0x10
c0019f05:	85 db                	test   ebx,ebx
c0019f07:	0f 84 32 01 00 00    	je     c001a03f <KeDereferenceSymlink(char const*, char*)+0x181>
c0019f0d:	56                   	push   esi
c0019f0e:	56                   	push   esi
c0019f0f:	6a 01                	push   0x1
c0019f11:	53                   	push   ebx
c0019f12:	e8 69 08 00 00       	call   c001a780 <File::open(FileOpenMode)>
c0019f17:	83 c4 10             	add    esp,0x10
c0019f1a:	85 c0                	test   eax,eax
c0019f1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f1e:	74 09                	je     c0019f29 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019f20:	83 ec 0c             	sub    esp,0xc
c0019f23:	53                   	push   ebx
c0019f24:	e9 10 01 00 00       	jmp    c001a039 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019f29:	83 ec 0c             	sub    esp,0xc
c0019f2c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f30:	56                   	push   esi
c0019f31:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019f35:	52                   	push   edx
c0019f36:	6a 00                	push   0x0
c0019f38:	6a 08                	push   0x8
c0019f3a:	53                   	push   ebx
c0019f3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f3e:	83 c4 20             	add    esp,0x20
c0019f41:	85 c0                	test   eax,eax
c0019f43:	0f 85 e2 00 00 00    	jne    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f49:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019f4e:	0f 85 d7 00 00 00    	jne    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f59:	56                   	push   esi
c0019f5a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019f5e:	52                   	push   edx
c0019f5f:	6a 00                	push   0x0
c0019f61:	6a 08                	push   0x8
c0019f63:	53                   	push   ebx
c0019f64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f67:	83 c4 20             	add    esp,0x20
c0019f6a:	85 c0                	test   eax,eax
c0019f6c:	0f 85 b9 00 00 00    	jne    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f72:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019f77:	0f 85 ae 00 00 00    	jne    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f7d:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019f81:	0f 85 53 ff ff ff    	jne    c0019eda <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019f87:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019f8b:	0f 85 49 ff ff ff    	jne    c0019eda <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019f91:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019f99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019fa1:	51                   	push   ecx
c0019fa2:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019fa6:	50                   	push   eax
c0019fa7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019fab:	50                   	push   eax
c0019fac:	53                   	push   ebx
c0019fad:	e8 d0 0a 00 00       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c0019fb2:	83 c4 10             	add    esp,0x10
c0019fb5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019fba:	75 6f                	jne    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019fbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019fc0:	31 c9                	xor    ecx,ecx
c0019fc2:	bf 0f 00 00 00       	mov    edi,0xf
c0019fc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fcb:	39 c7                	cmp    edi,eax
c0019fcd:	89 cf                	mov    edi,ecx
c0019fcf:	19 d7                	sbb    edi,edx
c0019fd1:	73 58                	jae    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019fd3:	83 c0 f0             	add    eax,0xfffffff0
c0019fd6:	bf ff 00 00 00       	mov    edi,0xff
c0019fdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019fdf:	83 d2 ff             	adc    edx,0xffffffff
c0019fe2:	39 c7                	cmp    edi,eax
c0019fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019fe8:	19 d1                	sbb    ecx,edx
c0019fea:	72 53                	jb     c001a03f <KeDereferenceSymlink(char const*, char*)+0x181>
c0019fec:	40                   	inc    eax
c0019fed:	52                   	push   edx
c0019fee:	50                   	push   eax
c0019fef:	6a 00                	push   0x0
c0019ff1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019ff5:	e8 f6 64 fe ff       	call   c00004f0 <memset>
c0019ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ffc:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fff:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001a003:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a007:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a00b:	53                   	push   ebx
c001a00c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a00f:	83 c4 20             	add    esp,0x20
c001a012:	85 c0                	test   eax,eax
c001a014:	75 15                	jne    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c001a016:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a01a:	89 c7                	mov    edi,eax
c001a01c:	c1 ff 1f             	sar    edi,0x1f
c001a01f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001a023:	75 06                	jne    c001a02b <KeDereferenceSymlink(char const*, char*)+0x16d>
c001a025:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a029:	74 19                	je     c001a044 <KeDereferenceSymlink(char const*, char*)+0x186>
c001a02b:	83 ec 0c             	sub    esp,0xc
c001a02e:	53                   	push   ebx
c001a02f:	e8 aa 07 00 00       	call   c001a7de <File::close()>
c001a034:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a039:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a03c:	83 c4 10             	add    esp,0x10
c001a03f:	83 c8 ff             	or     eax,0xffffffff
c001a042:	eb 19                	jmp    c001a05d <KeDereferenceSymlink(char const*, char*)+0x19f>
c001a044:	83 ec 0c             	sub    esp,0xc
c001a047:	53                   	push   ebx
c001a048:	e8 91 07 00 00       	call   c001a7de <File::close()>
c001a04d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a04f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a052:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a055:	83 c4 10             	add    esp,0x10
c001a058:	b8 01 00 00 00       	mov    eax,0x1
c001a05d:	83 c4 3c             	add    esp,0x3c
c001a060:	5b                   	pop    ebx
c001a061:	5e                   	pop    esi
c001a062:	5f                   	pop    edi
c001a063:	5d                   	pop    ebp
c001a064:	c3                   	ret    

c001a065 <KeCreateSymlink(char const*, char const*)>:
c001a065:	55                   	push   ebp
c001a066:	57                   	push   edi
c001a067:	56                   	push   esi
c001a068:	53                   	push   ebx
c001a069:	83 ec 38             	sub    esp,0x38
c001a06c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a070:	68 14 01 00 00       	push   0x114
c001a075:	e8 9a c6 ff ff       	call   c0016714 <malloc>
c001a07a:	6a 00                	push   0x0
c001a07c:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001a082:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a086:	89 c3                	mov    ebx,eax
c001a088:	50                   	push   eax
c001a089:	e8 f6 05 00 00       	call   c001a684 <File::File(char const*, Process*, bool)>
c001a08e:	83 c4 20             	add    esp,0x20
c001a091:	85 db                	test   ebx,ebx
c001a093:	b8 01 00 00 00       	mov    eax,0x1
c001a098:	0f 84 19 01 00 00    	je     c001a1b7 <KeCreateSymlink(char const*, char const*)+0x152>
c001a09e:	52                   	push   edx
c001a09f:	52                   	push   edx
c001a0a0:	6a 12                	push   0x12
c001a0a2:	53                   	push   ebx
c001a0a3:	e8 d8 06 00 00       	call   c001a780 <File::open(FileOpenMode)>
c001a0a8:	83 c4 10             	add    esp,0x10
c001a0ab:	85 c0                	test   eax,eax
c001a0ad:	74 0b                	je     c001a0ba <KeCreateSymlink(char const*, char const*)+0x55>
c001a0af:	83 ec 0c             	sub    esp,0xc
c001a0b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b4:	53                   	push   ebx
c001a0b5:	e9 f2 00 00 00       	jmp    c001a1ac <KeCreateSymlink(char const*, char const*)+0x147>
c001a0ba:	8d 7c 24 17          	lea    edi,[esp+0x17]
c001a0be:	be d5 20 03 c0       	mov    esi,0xc00320d5
c001a0c3:	b9 09 00 00 00       	mov    ecx,0x9
c001a0c8:	fc                   	cld    
c001a0c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0cb:	83 ec 0c             	sub    esp,0xc
c001a0ce:	8d 74 24 10          	lea    esi,[esp+0x10]
c001a0d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0d4:	56                   	push   esi
c001a0d5:	8d 54 24 27          	lea    edx,[esp+0x27]
c001a0d9:	52                   	push   edx
c001a0da:	6a 00                	push   0x0
c001a0dc:	6a 08                	push   0x8
c001a0de:	53                   	push   ebx
c001a0df:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a0e2:	83 c4 20             	add    esp,0x20
c001a0e5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a0ea:	0f 85 ae 00 00 00    	jne    c001a19e <KeCreateSymlink(char const*, char const*)+0x139>
c001a0f0:	85 c0                	test   eax,eax
c001a0f2:	0f 85 a6 00 00 00    	jne    c001a19e <KeCreateSymlink(char const*, char const*)+0x139>
c001a0f8:	e8 cc f9 ff ff       	call   c0019ac9 <KiCreateSymlinkID()>
c001a0fd:	83 ec 0c             	sub    esp,0xc
c001a100:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a104:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a108:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a10a:	56                   	push   esi
c001a10b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a10f:	52                   	push   edx
c001a110:	6a 00                	push   0x0
c001a112:	6a 08                	push   0x8
c001a114:	53                   	push   ebx
c001a115:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a118:	83 c4 20             	add    esp,0x20
c001a11b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a120:	75 7c                	jne    c001a19e <KeCreateSymlink(char const*, char const*)+0x139>
c001a122:	85 c0                	test   eax,eax
c001a124:	75 78                	jne    c001a19e <KeCreateSymlink(char const*, char const*)+0x139>
c001a126:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a12e:	55                   	push   ebp
c001a12f:	e8 4c 64 fe ff       	call   c0000580 <strlen>
c001a134:	31 d2                	xor    edx,edx
c001a136:	89 34 24             	mov    DWORD PTR [esp],esi
c001a139:	55                   	push   ebp
c001a13a:	52                   	push   edx
c001a13b:	50                   	push   eax
c001a13c:	53                   	push   ebx
c001a13d:	ff d7                	call   edi
c001a13f:	83 c4 14             	add    esp,0x14
c001a142:	55                   	push   ebp
c001a143:	89 c6                	mov    esi,eax
c001a145:	e8 36 64 fe ff       	call   c0000580 <strlen>
c001a14a:	83 c4 10             	add    esp,0x10
c001a14d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a151:	75 4b                	jne    c001a19e <KeCreateSymlink(char const*, char const*)+0x139>
c001a153:	85 f6                	test   esi,esi
c001a155:	75 47                	jne    c001a19e <KeCreateSymlink(char const*, char const*)+0x139>
c001a157:	50                   	push   eax
c001a158:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a15c:	55                   	push   ebp
c001a15d:	68 a3 20 03 c0       	push   0xc00320a3
c001a162:	e8 e3 f3 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001a167:	83 c4 0c             	add    esp,0xc
c001a16a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a16e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a172:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a176:	e8 b9 f9 ff ff       	call   c0019b34 <KeRegisterSymlink(char const*, unsigned long long)>
c001a17b:	c7 04 24 c8 20 03 c0 	mov    DWORD PTR [esp],0xc00320c8
c001a182:	e8 c3 f3 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001a187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a18a:	e8 4f 06 00 00       	call   c001a7de <File::close()>
c001a18f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a191:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a194:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	31 c0                	xor    eax,eax
c001a19c:	eb 19                	jmp    c001a1b7 <KeCreateSymlink(char const*, char const*)+0x152>
c001a19e:	83 ec 0c             	sub    esp,0xc
c001a1a1:	53                   	push   ebx
c001a1a2:	e8 37 06 00 00       	call   c001a7de <File::close()>
c001a1a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	b8 01 00 00 00       	mov    eax,0x1
c001a1b7:	83 c4 2c             	add    esp,0x2c
c001a1ba:	5b                   	pop    ebx
c001a1bb:	5e                   	pop    esi
c001a1bc:	5f                   	pop    edi
c001a1bd:	5d                   	pop    ebp
c001a1be:	c3                   	ret    
c001a1bf:	90                   	nop

c001a1c0 <File::read(unsigned long long, void*, int*)>:
c001a1c0:	53                   	push   ebx
c001a1c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a1c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a1d0:	83 f8 19             	cmp    eax,0x19
c001a1d3:	77 35                	ja     c001a20a <File::read(unsigned long long, void*, int*)+0x4a>
c001a1d5:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a1dc:	85 c0                	test   eax,eax
c001a1de:	74 2a                	je     c001a20a <File::read(unsigned long long, void*, int*)+0x4a>
c001a1e0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a1e6:	85 c0                	test   eax,eax
c001a1e8:	74 20                	je     c001a20a <File::read(unsigned long long, void*, int*)+0x4a>
c001a1ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a1ee:	74 21                	je     c001a211 <File::read(unsigned long long, void*, int*)+0x51>
c001a1f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1f6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a200:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a204:	5b                   	pop    ebx
c001a205:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a208:	ff e0                	jmp    eax
c001a20a:	b8 0b 00 00 00       	mov    eax,0xb
c001a20f:	eb 05                	jmp    c001a216 <File::read(unsigned long long, void*, int*)+0x56>
c001a211:	b8 05 00 00 00       	mov    eax,0x5
c001a216:	5b                   	pop    ebx
c001a217:	c3                   	ret    

c001a218 <File::write(unsigned long long, void*, int*)>:
c001a218:	53                   	push   ebx
c001a219:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a21d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a221:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a228:	83 f8 19             	cmp    eax,0x19
c001a22b:	77 35                	ja     c001a262 <File::write(unsigned long long, void*, int*)+0x4a>
c001a22d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a234:	85 c0                	test   eax,eax
c001a236:	74 2a                	je     c001a262 <File::write(unsigned long long, void*, int*)+0x4a>
c001a238:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a23e:	85 c0                	test   eax,eax
c001a240:	74 20                	je     c001a262 <File::write(unsigned long long, void*, int*)+0x4a>
c001a242:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a246:	74 21                	je     c001a269 <File::write(unsigned long long, void*, int*)+0x51>
c001a248:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a24a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a24e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a254:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a258:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a25c:	5b                   	pop    ebx
c001a25d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a260:	ff e0                	jmp    eax
c001a262:	b8 0b 00 00 00       	mov    eax,0xb
c001a267:	eb 05                	jmp    c001a26e <File::write(unsigned long long, void*, int*)+0x56>
c001a269:	b8 05 00 00 00       	mov    eax,0x5
c001a26e:	5b                   	pop    ebx
c001a26f:	c3                   	ret    

c001a270 <Directory::read(unsigned long long, void*, int*)>:
c001a270:	53                   	push   ebx
c001a271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a275:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a279:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a280:	83 f8 19             	cmp    eax,0x19
c001a283:	77 35                	ja     c001a2ba <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a285:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a28c:	85 c0                	test   eax,eax
c001a28e:	74 2a                	je     c001a2ba <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a290:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a296:	85 c0                	test   eax,eax
c001a298:	74 20                	je     c001a2ba <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a29a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a29e:	74 21                	je     c001a2c1 <Directory::read(unsigned long long, void*, int*)+0x51>
c001a2a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a2a2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a2a6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a2ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a2b4:	5b                   	pop    ebx
c001a2b5:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a2b8:	ff e0                	jmp    eax
c001a2ba:	b8 0b 00 00 00       	mov    eax,0xb
c001a2bf:	eb 05                	jmp    c001a2c6 <Directory::read(unsigned long long, void*, int*)+0x56>
c001a2c1:	b8 05 00 00 00       	mov    eax,0x5
c001a2c6:	5b                   	pop    ebx
c001a2c7:	c3                   	ret    

c001a2c8 <Directory::write(unsigned long long, void*, int*)>:
c001a2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a2d3:	b8 0b 00 00 00       	mov    eax,0xb
c001a2d8:	83 fa 19             	cmp    edx,0x19
c001a2db:	77 18                	ja     c001a2f5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a2dd:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a2e4:	85 d2                	test   edx,edx
c001a2e6:	74 0d                	je     c001a2f5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a2e8:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a2ef:	19 c0                	sbb    eax,eax
c001a2f1:	83 e0 0a             	and    eax,0xa
c001a2f4:	40                   	inc    eax
c001a2f5:	c3                   	ret    

c001a2f6 <File::isAtty()>:
c001a2f6:	31 c0                	xor    eax,eax
c001a2f8:	c3                   	ret    
c001a2f9:	90                   	nop

c001a2fa <Directory::isAtty()>:
c001a2fa:	31 c0                	xor    eax,eax
c001a2fc:	c3                   	ret    
c001a2fd:	90                   	nop

c001a2fe <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a2fe:	b8 0a 00 00 00       	mov    eax,0xa
c001a303:	c3                   	ret    

c001a304 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a304:	b8 0a 00 00 00       	mov    eax,0xa
c001a309:	c3                   	ret    

c001a30a <Filesystem::allocateSwapfile(char const*, int)>:
c001a30a:	31 c0                	xor    eax,eax
c001a30c:	31 d2                	xor    edx,edx
c001a30e:	c3                   	ret    
c001a30f:	90                   	nop

c001a310 <File::~File()>:
c001a310:	83 ec 0c             	sub    esp,0xc
c001a313:	ba 94 21 03 c0       	mov    edx,0xc0032194
c001a318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a31c:	89 10                	mov    DWORD PTR [eax],edx
c001a31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a322:	83 ec 0c             	sub    esp,0xc
c001a325:	50                   	push   eax
c001a326:	e8 a1 dc ff ff       	call   c0017fcc <UnixFile::~UnixFile()>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	90                   	nop
c001a32f:	83 c4 0c             	add    esp,0xc
c001a332:	c3                   	ret    
c001a333:	90                   	nop

c001a334 <File::~File()>:
c001a334:	83 ec 0c             	sub    esp,0xc
c001a337:	83 ec 0c             	sub    esp,0xc
c001a33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a33e:	e8 cd ff ff ff       	call   c001a310 <File::~File()>
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	83 ec 08             	sub    esp,0x8
c001a349:	68 14 01 00 00       	push   0x114
c001a34e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a352:	e8 f5 f0 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001a357:	83 c4 10             	add    esp,0x10
c001a35a:	83 c4 0c             	add    esp,0xc
c001a35d:	c3                   	ret    

c001a35e <Directory::~Directory()>:
c001a35e:	83 ec 0c             	sub    esp,0xc
c001a361:	ba b0 21 03 c0       	mov    edx,0xc00321b0
c001a366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a36a:	89 10                	mov    DWORD PTR [eax],edx
c001a36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a370:	83 ec 0c             	sub    esp,0xc
c001a373:	50                   	push   eax
c001a374:	e8 53 dc ff ff       	call   c0017fcc <UnixFile::~UnixFile()>
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	90                   	nop
c001a37d:	83 c4 0c             	add    esp,0xc
c001a380:	c3                   	ret    
c001a381:	90                   	nop

c001a382 <Directory::~Directory()>:
c001a382:	83 ec 0c             	sub    esp,0xc
c001a385:	83 ec 0c             	sub    esp,0xc
c001a388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a38c:	e8 cd ff ff ff       	call   c001a35e <Directory::~Directory()>
c001a391:	83 c4 10             	add    esp,0x10
c001a394:	83 ec 08             	sub    esp,0x8
c001a397:	68 14 01 00 00       	push   0x114
c001a39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3a0:	e8 a7 f0 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001a3a5:	83 c4 10             	add    esp,0x10
c001a3a8:	83 c4 0c             	add    esp,0xc
c001a3ab:	c3                   	ret    

c001a3ac <Filesystem::Filesystem()>:
c001a3ac:	ba 28 21 03 c0       	mov    edx,0xc0032128
c001a3b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b5:	89 10                	mov    DWORD PTR [eax],edx
c001a3b7:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a3bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c8:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a3cd:	90                   	nop
c001a3ce:	c3                   	ret    
c001a3cf:	90                   	nop

c001a3d0 <Filesystem::~Filesystem()>:
c001a3d0:	ba 28 21 03 c0       	mov    edx,0xc0032128
c001a3d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d9:	89 10                	mov    DWORD PTR [eax],edx
c001a3db:	90                   	nop
c001a3dc:	c3                   	ret    
c001a3dd:	90                   	nop

c001a3de <Filesystem::~Filesystem()>:
c001a3de:	83 ec 0c             	sub    esp,0xc
c001a3e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a3e5:	e8 e6 ff ff ff       	call   c001a3d0 <Filesystem::~Filesystem()>
c001a3ea:	83 c4 04             	add    esp,0x4
c001a3ed:	83 ec 08             	sub    esp,0x8
c001a3f0:	6a 08                	push   0x8
c001a3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3f6:	e8 51 f0 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001a3fb:	83 c4 10             	add    esp,0x10
c001a3fe:	83 c4 0c             	add    esp,0xc
c001a401:	c3                   	ret    

c001a402 <Fs::getcwd(Process*, char*, int)>:
c001a402:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a406:	31 c0                	xor    eax,eax
c001a408:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a40c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a40f:	7d 15                	jge    c001a426 <Fs::getcwd(Process*, char*, int)+0x24>
c001a411:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a415:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a41c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a41f:	84 c9                	test   cl,cl
c001a421:	74 06                	je     c001a429 <Fs::getcwd(Process*, char*, int)+0x27>
c001a423:	40                   	inc    eax
c001a424:	eb e2                	jmp    c001a408 <Fs::getcwd(Process*, char*, int)+0x6>
c001a426:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a429:	31 c0                	xor    eax,eax
c001a42b:	c3                   	ret    

c001a42c <Fs::initVFS()>:
c001a42c:	83 ec 18             	sub    esp,0x18
c001a42f:	6a 08                	push   0x8
c001a431:	e8 de c2 ff ff       	call   c0016714 <malloc>
c001a436:	89 04 24             	mov    DWORD PTR [esp],eax
c001a439:	e8 d2 e9 00 00       	call   c0028e10 <FAT::FAT()>
c001a43e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a445:	e8 ca c2 ff ff       	call   c0016714 <malloc>
c001a44a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a44d:	e8 ec f8 00 00       	call   c0029d3e <ISO9660::ISO9660()>
c001a452:	83 c4 1c             	add    esp,0x1c
c001a455:	c3                   	ret    

c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a456:	55                   	push   ebp
c001a457:	57                   	push   edi
c001a458:	56                   	push   esi
c001a459:	53                   	push   ebx
c001a45a:	81 ec 20 04 00 00    	sub    esp,0x420
c001a460:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a467:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a46e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a475:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a47c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a480:	68 00 04 00 00       	push   0x400
c001a485:	6a 00                	push   0x0
c001a487:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a48b:	57                   	push   edi
c001a48c:	e8 5f 60 fe ff       	call   c00004f0 <memset>
c001a491:	83 c4 10             	add    esp,0x10
c001a494:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a498:	75 0b                	jne    c001a4a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a49a:	50                   	push   eax
c001a49b:	50                   	push   eax
c001a49c:	56                   	push   esi
c001a49d:	57                   	push   edi
c001a49e:	e8 ad 61 fe ff       	call   c0000650 <strcpy>
c001a4a3:	eb 45                	jmp    c001a4ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a4a5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a4a8:	83 f8 2f             	cmp    eax,0x2f
c001a4ab:	74 05                	je     c001a4b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a4ad:	83 f8 5c             	cmp    eax,0x5c
c001a4b0:	75 19                	jne    c001a4cb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a4b2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a4b5:	3c 60                	cmp    al,0x60
c001a4b7:	7e 03                	jle    c001a4bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a4b9:	83 e8 20             	sub    eax,0x20
c001a4bc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a4c0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a4c7:	50                   	push   eax
c001a4c8:	50                   	push   eax
c001a4c9:	eb 18                	jmp    c001a4e3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a4cb:	50                   	push   eax
c001a4cc:	50                   	push   eax
c001a4cd:	55                   	push   ebp
c001a4ce:	57                   	push   edi
c001a4cf:	e8 7c 61 fe ff       	call   c0000650 <strcpy>
c001a4d4:	58                   	pop    eax
c001a4d5:	5a                   	pop    edx
c001a4d6:	68 1f 32 03 c0       	push   0xc003321f
c001a4db:	57                   	push   edi
c001a4dc:	e8 8f 63 fe ff       	call   c0000870 <strcat>
c001a4e1:	59                   	pop    ecx
c001a4e2:	5d                   	pop    ebp
c001a4e3:	56                   	push   esi
c001a4e4:	57                   	push   edi
c001a4e5:	e8 86 63 fe ff       	call   c0000870 <strcat>
c001a4ea:	83 c4 10             	add    esp,0x10
c001a4ed:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a4f1:	3c 60                	cmp    al,0x60
c001a4f3:	7e 03                	jle    c001a4f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a4f5:	83 e8 20             	sub    eax,0x20
c001a4f8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a4fc:	be 03 00 00 00       	mov    esi,0x3
c001a501:	88 03                	mov    BYTE PTR [ebx],al
c001a503:	b8 03 00 00 00       	mov    eax,0x3
c001a508:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a50f:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a515:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a519:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a51e:	89 fa                	mov    edx,edi
c001a520:	0f be ea             	movsx  ebp,dl
c001a523:	85 ed                	test   ebp,ebp
c001a525:	0f 84 a1 00 00 00    	je     c001a5cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a52b:	8d 56 01             	lea    edx,[esi+0x1]
c001a52e:	83 fd 2f             	cmp    ebp,0x2f
c001a531:	74 05                	je     c001a538 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a533:	83 fd 5c             	cmp    ebp,0x5c
c001a536:	75 12                	jne    c001a54a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a538:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a53d:	89 c5                	mov    ebp,eax
c001a53f:	74 09                	je     c001a54a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a541:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a545:	40                   	inc    eax
c001a546:	89 d6                	mov    esi,edx
c001a548:	eb cf                	jmp    c001a519 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a54a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a54f:	89 f9                	mov    ecx,edi
c001a551:	0f be e9             	movsx  ebp,cl
c001a554:	75 61                	jne    c001a5b7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a556:	83 fd 2e             	cmp    ebp,0x2e
c001a559:	75 5c                	jne    c001a5b7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a55b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a560:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a565:	74 19                	je     c001a580 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a567:	83 fd 2e             	cmp    ebp,0x2e
c001a56a:	74 55                	je     c001a5c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a56c:	89 f2                	mov    edx,esi
c001a56e:	42                   	inc    edx
c001a56f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a574:	83 f9 2f             	cmp    ecx,0x2f
c001a577:	74 f5                	je     c001a56e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a579:	83 f9 5c             	cmp    ecx,0x5c
c001a57c:	74 f0                	je     c001a56e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a57e:	eb c6                	jmp    c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a580:	83 fd 2e             	cmp    ebp,0x2e
c001a583:	74 3c                	je     c001a5c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a585:	83 f8 03             	cmp    eax,0x3
c001a588:	74 bc                	je     c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a58a:	42                   	inc    edx
c001a58b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a590:	83 f9 2f             	cmp    ecx,0x2f
c001a593:	74 f5                	je     c001a58a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a595:	83 f9 5c             	cmp    ecx,0x5c
c001a598:	74 f0                	je     c001a58a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a59a:	48                   	dec    eax
c001a59b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a59f:	75 06                	jne    c001a5a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a5a1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a5a5:	eb f3                	jmp    c001a59a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a5a7:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a5ab:	74 07                	je     c001a5b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a5ad:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a5b1:	48                   	dec    eax
c001a5b2:	eb f3                	jmp    c001a5a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a5b4:	40                   	inc    eax
c001a5b5:	eb 8f                	jmp    c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a5b7:	83 fd 2f             	cmp    ebp,0x2f
c001a5ba:	74 8a                	je     c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a5bc:	83 fd 5c             	cmp    ebp,0x5c
c001a5bf:	74 85                	je     c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a5c1:	89 f9                	mov    ecx,edi
c001a5c3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a5c6:	40                   	inc    eax
c001a5c7:	e9 7a ff ff ff       	jmp    c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a5cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a5d0:	83 ec 0c             	sub    esp,0xc
c001a5d3:	53                   	push   ebx
c001a5d4:	e8 a7 5f fe ff       	call   c0000580 <strlen>
c001a5d9:	83 c4 10             	add    esp,0x10
c001a5dc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a5e1:	74 1c                	je     c001a5ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a5e3:	83 ec 0c             	sub    esp,0xc
c001a5e6:	53                   	push   ebx
c001a5e7:	e8 94 5f fe ff       	call   c0000580 <strlen>
c001a5ec:	83 c4 10             	add    esp,0x10
c001a5ef:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a5f4:	74 09                	je     c001a5ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a5f6:	31 ff                	xor    edi,edi
c001a5f8:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a5fd:	eb 5c                	jmp    c001a65b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a5ff:	83 ec 0c             	sub    esp,0xc
c001a602:	53                   	push   ebx
c001a603:	e8 78 5f fe ff       	call   c0000580 <strlen>
c001a608:	83 c4 10             	add    esp,0x10
c001a60b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a610:	74 e4                	je     c001a5f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a612:	83 ec 0c             	sub    esp,0xc
c001a615:	53                   	push   ebx
c001a616:	e8 65 5f fe ff       	call   c0000580 <strlen>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a623:	eb ab                	jmp    c001a5d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a625:	52                   	push   edx
c001a626:	52                   	push   edx
c001a627:	53                   	push   ebx
c001a628:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a62c:	55                   	push   ebp
c001a62d:	e8 1e 60 fe ff       	call   c0000650 <strcpy>
c001a632:	59                   	pop    ecx
c001a633:	58                   	pop    eax
c001a634:	53                   	push   ebx
c001a635:	55                   	push   ebp
c001a636:	e8 83 f8 ff ff       	call   c0019ebe <KeDereferenceSymlink(char const*, char*)>
c001a63b:	83 c4 10             	add    esp,0x10
c001a63e:	48                   	dec    eax
c001a63f:	75 37                	jne    c001a678 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a641:	50                   	push   eax
c001a642:	53                   	push   ebx
c001a643:	55                   	push   ebp
c001a644:	68 de 20 03 c0       	push   0xc00320de
c001a649:	e8 fc ee ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001a64e:	8d 47 01             	lea    eax,[edi+0x1]
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	83 ff 14             	cmp    edi,0x14
c001a657:	74 08                	je     c001a661 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a659:	89 c7                	mov    edi,eax
c001a65b:	85 f6                	test   esi,esi
c001a65d:	75 c6                	jne    c001a625 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a65f:	eb 17                	jmp    c001a678 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a661:	83 ec 0c             	sub    esp,0xc
c001a664:	bf 15 00 00 00       	mov    edi,0x15
c001a669:	68 f9 20 03 c0       	push   0xc00320f9
c001a66e:	e8 5f 5e 00 00       	call   c00204d2 <KePanic(char const*)>
c001a673:	83 c4 10             	add    esp,0x10
c001a676:	eb e3                	jmp    c001a65b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a678:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a67e:	5b                   	pop    ebx
c001a67f:	5e                   	pop    esi
c001a680:	5f                   	pop    edi
c001a681:	5d                   	pop    ebp
c001a682:	c3                   	ret    
c001a683:	90                   	nop

c001a684 <File::File(char const*, Process*, bool)>:
c001a684:	83 ec 1c             	sub    esp,0x1c
c001a687:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a68b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a693:	83 ec 08             	sub    esp,0x8
c001a696:	6a 00                	push   0x0
c001a698:	50                   	push   eax
c001a699:	e8 48 d7 ff ff       	call   c0017de6 <UnixFile::UnixFile(int)>
c001a69e:	83 c4 10             	add    esp,0x10
c001a6a1:	ba 94 21 03 c0       	mov    edx,0xc0032194
c001a6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6aa:	89 10                	mov    DWORD PTR [eax],edx
c001a6ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a6b1:	85 c0                	test   eax,eax
c001a6b3:	74 0f                	je     c001a6c4 <File::File(char const*, Process*, bool)+0x40>
c001a6b5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a6ba:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a6be:	74 04                	je     c001a6c4 <File::File(char const*, Process*, bool)+0x40>
c001a6c0:	b0 01                	mov    al,0x1
c001a6c2:	eb 02                	jmp    c001a6c6 <File::File(char const*, Process*, bool)+0x42>
c001a6c4:	b0 00                	mov    al,0x0
c001a6c6:	0f b6 c0             	movzx  eax,al
c001a6c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a6cd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a6d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a6d7:	83 c2 0d             	add    edx,0xd
c001a6da:	50                   	push   eax
c001a6db:	51                   	push   ecx
c001a6dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6e0:	52                   	push   edx
c001a6e1:	e8 70 fd ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a6e6:	83 c4 10             	add    esp,0x10
c001a6e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ed:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a6f0:	83 e8 41             	sub    eax,0x41
c001a6f3:	88 c2                	mov    dl,al
c001a6f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a6ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a703:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a70b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a711:	0f b6 c0             	movzx  eax,al
c001a714:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a71b:	85 c0                	test   eax,eax
c001a71d:	74 3e                	je     c001a75d <File::File(char const*, Process*, bool)+0xd9>
c001a71f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a723:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a729:	0f b6 c0             	movzx  eax,al
c001a72c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a733:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a739:	85 c0                	test   eax,eax
c001a73b:	75 20                	jne    c001a75d <File::File(char const*, Process*, bool)+0xd9>
c001a73d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a741:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a747:	0f b6 c0             	movzx  eax,al
c001a74a:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a751:	83 ec 0c             	sub    esp,0xc
c001a754:	50                   	push   eax
c001a755:	e8 ba 21 00 00       	call   c001c914 <LogicalDisk::mount()>
c001a75a:	83 c4 10             	add    esp,0x10
c001a75d:	90                   	nop
c001a75e:	83 c4 1c             	add    esp,0x1c
c001a761:	c3                   	ret    

c001a762 <File::File(char const*, Process*)>:
c001a762:	83 ec 0c             	sub    esp,0xc
c001a765:	6a 01                	push   0x1
c001a767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a76b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a76f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a773:	e8 0c ff ff ff       	call   c001a684 <File::File(char const*, Process*, bool)>
c001a778:	83 c4 10             	add    esp,0x10
c001a77b:	90                   	nop
c001a77c:	83 c4 0c             	add    esp,0xc
c001a77f:	c3                   	ret    

c001a780 <File::open(FileOpenMode)>:
c001a780:	53                   	push   ebx
c001a781:	b8 0b 00 00 00       	mov    eax,0xb
c001a786:	83 ec 08             	sub    esp,0x8
c001a789:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a78d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a794:	83 fa 19             	cmp    edx,0x19
c001a797:	77 40                	ja     c001a7d9 <File::open(FileOpenMode)+0x59>
c001a799:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a7a0:	85 d2                	test   edx,edx
c001a7a2:	74 35                	je     c001a7d9 <File::open(FileOpenMode)+0x59>
c001a7a4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7aa:	85 d2                	test   edx,edx
c001a7ac:	74 2b                	je     c001a7d9 <File::open(FileOpenMode)+0x59>
c001a7ae:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a7b2:	b8 06 00 00 00       	mov    eax,0x6
c001a7b7:	75 20                	jne    c001a7d9 <File::open(FileOpenMode)+0x59>
c001a7b9:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7bb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a7c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a7c5:	51                   	push   ecx
c001a7c6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a7c9:	51                   	push   ecx
c001a7ca:	52                   	push   edx
c001a7cb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a7ce:	83 c4 10             	add    esp,0x10
c001a7d1:	85 c0                	test   eax,eax
c001a7d3:	75 04                	jne    c001a7d9 <File::open(FileOpenMode)+0x59>
c001a7d5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a7d9:	83 c4 08             	add    esp,0x8
c001a7dc:	5b                   	pop    ebx
c001a7dd:	c3                   	ret    

c001a7de <File::close()>:
c001a7de:	53                   	push   ebx
c001a7df:	b8 0b 00 00 00       	mov    eax,0xb
c001a7e4:	83 ec 08             	sub    esp,0x8
c001a7e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7eb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a7f2:	83 f9 19             	cmp    ecx,0x19
c001a7f5:	77 41                	ja     c001a838 <File::close()+0x5a>
c001a7f7:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a7fe:	85 db                	test   ebx,ebx
c001a800:	74 36                	je     c001a838 <File::close()+0x5a>
c001a802:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a809:	74 2d                	je     c001a838 <File::close()+0x5a>
c001a80b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a80f:	b8 05 00 00 00       	mov    eax,0x5
c001a814:	74 22                	je     c001a838 <File::close()+0x5a>
c001a816:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a81a:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a821:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a827:	53                   	push   ebx
c001a828:	53                   	push   ebx
c001a829:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a82b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a831:	50                   	push   eax
c001a832:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a835:	83 c4 10             	add    esp,0x10
c001a838:	83 c4 08             	add    esp,0x8
c001a83b:	5b                   	pop    ebx
c001a83c:	c3                   	ret    
c001a83d:	90                   	nop

c001a83e <File::seek(unsigned long long)>:
c001a83e:	56                   	push   esi
c001a83f:	b8 0b 00 00 00       	mov    eax,0xb
c001a844:	53                   	push   ebx
c001a845:	51                   	push   ecx
c001a846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a84a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a84e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a852:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a859:	83 fa 19             	cmp    edx,0x19
c001a85c:	77 31                	ja     c001a88f <File::seek(unsigned long long)+0x51>
c001a85e:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a865:	85 d2                	test   edx,edx
c001a867:	74 26                	je     c001a88f <File::seek(unsigned long long)+0x51>
c001a869:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a86f:	85 d2                	test   edx,edx
c001a871:	74 1c                	je     c001a88f <File::seek(unsigned long long)+0x51>
c001a873:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a877:	b8 05 00 00 00       	mov    eax,0x5
c001a87c:	74 11                	je     c001a88f <File::seek(unsigned long long)+0x51>
c001a87e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a880:	53                   	push   ebx
c001a881:	51                   	push   ecx
c001a882:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a888:	52                   	push   edx
c001a889:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a88c:	83 c4 10             	add    esp,0x10
c001a88f:	5a                   	pop    edx
c001a890:	5b                   	pop    ebx
c001a891:	5e                   	pop    esi
c001a892:	c3                   	ret    
c001a893:	90                   	nop

c001a894 <File::truncate(unsigned long long)>:
c001a894:	56                   	push   esi
c001a895:	b8 0b 00 00 00       	mov    eax,0xb
c001a89a:	53                   	push   ebx
c001a89b:	51                   	push   ecx
c001a89c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a8a8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a8af:	83 fa 19             	cmp    edx,0x19
c001a8b2:	77 31                	ja     c001a8e5 <File::truncate(unsigned long long)+0x51>
c001a8b4:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a8bb:	85 d2                	test   edx,edx
c001a8bd:	74 26                	je     c001a8e5 <File::truncate(unsigned long long)+0x51>
c001a8bf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a8c5:	85 d2                	test   edx,edx
c001a8c7:	74 1c                	je     c001a8e5 <File::truncate(unsigned long long)+0x51>
c001a8c9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a8cd:	b8 05 00 00 00       	mov    eax,0x5
c001a8d2:	74 11                	je     c001a8e5 <File::truncate(unsigned long long)+0x51>
c001a8d4:	8b 02                	mov    eax,DWORD PTR [edx]
c001a8d6:	53                   	push   ebx
c001a8d7:	51                   	push   ecx
c001a8d8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a8de:	52                   	push   edx
c001a8df:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a8e2:	83 c4 10             	add    esp,0x10
c001a8e5:	5a                   	pop    edx
c001a8e6:	5b                   	pop    ebx
c001a8e7:	5e                   	pop    esi
c001a8e8:	c3                   	ret    
c001a8e9:	90                   	nop

c001a8ea <File::tell(unsigned long long*)>:
c001a8ea:	83 ec 0c             	sub    esp,0xc
c001a8ed:	b8 0b 00 00 00       	mov    eax,0xb
c001a8f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8f6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a8fd:	83 fa 19             	cmp    edx,0x19
c001a900:	77 34                	ja     c001a936 <File::tell(unsigned long long*)+0x4c>
c001a902:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a909:	85 d2                	test   edx,edx
c001a90b:	74 29                	je     c001a936 <File::tell(unsigned long long*)+0x4c>
c001a90d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a913:	85 d2                	test   edx,edx
c001a915:	74 1f                	je     c001a936 <File::tell(unsigned long long*)+0x4c>
c001a917:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a91b:	b8 05 00 00 00       	mov    eax,0x5
c001a920:	74 14                	je     c001a936 <File::tell(unsigned long long*)+0x4c>
c001a922:	50                   	push   eax
c001a923:	8b 02                	mov    eax,DWORD PTR [edx]
c001a925:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a929:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a92f:	52                   	push   edx
c001a930:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a933:	83 c4 10             	add    esp,0x10
c001a936:	83 c4 0c             	add    esp,0xc
c001a939:	c3                   	ret    

c001a93a <File::rewind()>:
c001a93a:	83 ec 10             	sub    esp,0x10
c001a93d:	6a 00                	push   0x0
c001a93f:	6a 00                	push   0x0
c001a941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a945:	e8 f4 fe ff ff       	call   c001a83e <File::seek(unsigned long long)>
c001a94a:	83 c4 1c             	add    esp,0x1c
c001a94d:	c3                   	ret    

c001a94e <File::unlink()>:
c001a94e:	83 ec 0c             	sub    esp,0xc
c001a951:	b8 0b 00 00 00       	mov    eax,0xb
c001a956:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a95a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a961:	83 f9 19             	cmp    ecx,0x19
c001a964:	77 2f                	ja     c001a995 <File::unlink()+0x47>
c001a966:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a96d:	85 c9                	test   ecx,ecx
c001a96f:	74 24                	je     c001a995 <File::unlink()+0x47>
c001a971:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a977:	85 c9                	test   ecx,ecx
c001a979:	74 1a                	je     c001a995 <File::unlink()+0x47>
c001a97b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a97f:	b8 06 00 00 00       	mov    eax,0x6
c001a984:	75 0f                	jne    c001a995 <File::unlink()+0x47>
c001a986:	50                   	push   eax
c001a987:	83 c2 0d             	add    edx,0xd
c001a98a:	50                   	push   eax
c001a98b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a98d:	52                   	push   edx
c001a98e:	51                   	push   ecx
c001a98f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a992:	83 c4 10             	add    esp,0x10
c001a995:	83 c4 0c             	add    esp,0xc
c001a998:	c3                   	ret    
c001a999:	90                   	nop

c001a99a <File::rename(char const*)>:
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	b8 0b 00 00 00       	mov    eax,0xb
c001a9a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9ad:	83 f9 19             	cmp    ecx,0x19
c001a9b0:	77 32                	ja     c001a9e4 <File::rename(char const*)+0x4a>
c001a9b2:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9b9:	85 c9                	test   ecx,ecx
c001a9bb:	74 27                	je     c001a9e4 <File::rename(char const*)+0x4a>
c001a9bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9c3:	85 c9                	test   ecx,ecx
c001a9c5:	74 1d                	je     c001a9e4 <File::rename(char const*)+0x4a>
c001a9c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9cb:	b8 06 00 00 00       	mov    eax,0x6
c001a9d0:	75 12                	jne    c001a9e4 <File::rename(char const*)+0x4a>
c001a9d2:	50                   	push   eax
c001a9d3:	83 c2 0d             	add    edx,0xd
c001a9d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a9dc:	52                   	push   edx
c001a9dd:	51                   	push   ecx
c001a9de:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a9e1:	83 c4 10             	add    esp,0x10
c001a9e4:	83 c4 0c             	add    esp,0xc
c001a9e7:	c3                   	ret    

c001a9e8 <File::chfatattr(unsigned char, unsigned char)>:
c001a9e8:	57                   	push   edi
c001a9e9:	b8 0b 00 00 00       	mov    eax,0xb
c001a9ee:	56                   	push   esi
c001a9ef:	53                   	push   ebx
c001a9f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a9f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a9fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa03:	83 f9 19             	cmp    ecx,0x19
c001aa06:	77 37                	ja     c001aa3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001aa08:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa0f:	85 c9                	test   ecx,ecx
c001aa11:	74 2c                	je     c001aa3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001aa13:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa19:	85 c9                	test   ecx,ecx
c001aa1b:	74 22                	je     c001aa3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001aa1d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa21:	b8 06 00 00 00       	mov    eax,0x6
c001aa26:	75 17                	jne    c001aa3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001aa28:	89 f0                	mov    eax,esi
c001aa2a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001aa2c:	0f b6 db             	movzx  ebx,bl
c001aa2f:	0f b6 f0             	movzx  esi,al
c001aa32:	83 c2 0d             	add    edx,0xd
c001aa35:	56                   	push   esi
c001aa36:	53                   	push   ebx
c001aa37:	52                   	push   edx
c001aa38:	51                   	push   ecx
c001aa39:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001aa3c:	83 c4 10             	add    esp,0x10
c001aa3f:	5b                   	pop    ebx
c001aa40:	5e                   	pop    esi
c001aa41:	5f                   	pop    edi
c001aa42:	c3                   	ret    
c001aa43:	90                   	nop

c001aa44 <File::exists()>:
c001aa44:	83 ec 0c             	sub    esp,0xc
c001aa47:	31 c0                	xor    eax,eax
c001aa49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa54:	83 f9 19             	cmp    ecx,0x19
c001aa57:	77 24                	ja     c001aa7d <File::exists()+0x39>
c001aa59:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa60:	85 c9                	test   ecx,ecx
c001aa62:	74 19                	je     c001aa7d <File::exists()+0x39>
c001aa64:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa6a:	85 c9                	test   ecx,ecx
c001aa6c:	74 0f                	je     c001aa7d <File::exists()+0x39>
c001aa6e:	50                   	push   eax
c001aa6f:	83 c2 0d             	add    edx,0xd
c001aa72:	50                   	push   eax
c001aa73:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa75:	52                   	push   edx
c001aa76:	51                   	push   ecx
c001aa77:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001aa7a:	83 c4 10             	add    esp,0x10
c001aa7d:	83 c4 0c             	add    esp,0xc
c001aa80:	c3                   	ret    
c001aa81:	90                   	nop

c001aa82 <File::stat(unsigned long long*, bool*)>:
c001aa82:	56                   	push   esi
c001aa83:	53                   	push   ebx
c001aa84:	50                   	push   eax
c001aa85:	b8 0b 00 00 00       	mov    eax,0xb
c001aa8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa96:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa9d:	83 f9 19             	cmp    ecx,0x19
c001aaa0:	77 3d                	ja     c001aadf <File::stat(unsigned long long*, bool*)+0x5d>
c001aaa2:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaa9:	85 c9                	test   ecx,ecx
c001aaab:	74 32                	je     c001aadf <File::stat(unsigned long long*, bool*)+0x5d>
c001aaad:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aab3:	85 c9                	test   ecx,ecx
c001aab5:	74 28                	je     c001aadf <File::stat(unsigned long long*, bool*)+0x5d>
c001aab7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aabb:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aabd:	74 13                	je     c001aad2 <File::stat(unsigned long long*, bool*)+0x50>
c001aabf:	83 ec 04             	sub    esp,0x4
c001aac2:	56                   	push   esi
c001aac3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aac9:	51                   	push   ecx
c001aaca:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001aacd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001aad0:	eb 0a                	jmp    c001aadc <File::stat(unsigned long long*, bool*)+0x5a>
c001aad2:	53                   	push   ebx
c001aad3:	83 c2 0d             	add    edx,0xd
c001aad6:	56                   	push   esi
c001aad7:	52                   	push   edx
c001aad8:	51                   	push   ecx
c001aad9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001aadc:	83 c4 10             	add    esp,0x10
c001aadf:	5a                   	pop    edx
c001aae0:	5b                   	pop    ebx
c001aae1:	5e                   	pop    esi
c001aae2:	c3                   	ret    

c001aae3 <Fs::setcwd(Process*, char*)>:
c001aae3:	55                   	push   ebp
c001aae4:	57                   	push   edi
c001aae5:	56                   	push   esi
c001aae6:	53                   	push   ebx
c001aae7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aaed:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001aaf4:	6a 00                	push   0x0
c001aaf6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001aafc:	57                   	push   edi
c001aafd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab04:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001ab08:	56                   	push   esi
c001ab09:	e8 48 f9 ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ab0e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ab11:	e8 6a 5a fe ff       	call   c0000580 <strlen>
c001ab16:	83 c4 10             	add    esp,0x10
c001ab19:	83 f8 02             	cmp    eax,0x2
c001ab1c:	77 15                	ja     c001ab33 <Fs::setcwd(Process*, char*)+0x50>
c001ab1e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001ab23:	83 eb 41             	sub    ebx,0x41
c001ab26:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001ab2d:	85 c0                	test   eax,eax
c001ab2f:	75 1c                	jne    c001ab4d <Fs::setcwd(Process*, char*)+0x6a>
c001ab31:	eb 2f                	jmp    c001ab62 <Fs::setcwd(Process*, char*)+0x7f>
c001ab33:	83 ec 0c             	sub    esp,0xc
c001ab36:	56                   	push   esi
c001ab37:	e8 44 5a fe ff       	call   c0000580 <strlen>
c001ab3c:	83 c4 10             	add    esp,0x10
c001ab3f:	83 f8 03             	cmp    eax,0x3
c001ab42:	75 57                	jne    c001ab9b <Fs::setcwd(Process*, char*)+0xb8>
c001ab44:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001ab49:	75 50                	jne    c001ab9b <Fs::setcwd(Process*, char*)+0xb8>
c001ab4b:	eb d1                	jmp    c001ab1e <Fs::setcwd(Process*, char*)+0x3b>
c001ab4d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001ab54:	75 0c                	jne    c001ab62 <Fs::setcwd(Process*, char*)+0x7f>
c001ab56:	83 ec 0c             	sub    esp,0xc
c001ab59:	50                   	push   eax
c001ab5a:	e8 b5 1d 00 00       	call   c001c914 <LogicalDisk::mount()>
c001ab5f:	83 c4 10             	add    esp,0x10
c001ab62:	83 fb 19             	cmp    ebx,0x19
c001ab65:	b8 03 00 00 00       	mov    eax,0x3
c001ab6a:	0f 87 c6 00 00 00    	ja     c001ac36 <Fs::setcwd(Process*, char*)+0x153>
c001ab70:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001ab77:	b8 05 00 00 00       	mov    eax,0x5
c001ab7c:	85 d2                	test   edx,edx
c001ab7e:	0f 84 b2 00 00 00    	je     c001ac36 <Fs::setcwd(Process*, char*)+0x153>
c001ab84:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001ab8b:	b8 06 00 00 00       	mov    eax,0x6
c001ab90:	0f 85 92 00 00 00    	jne    c001ac28 <Fs::setcwd(Process*, char*)+0x145>
c001ab96:	e9 9b 00 00 00       	jmp    c001ac36 <Fs::setcwd(Process*, char*)+0x153>
c001ab9b:	83 ec 0c             	sub    esp,0xc
c001ab9e:	68 14 01 00 00       	push   0x114
c001aba3:	e8 6c bb ff ff       	call   c0016714 <malloc>
c001aba8:	83 c4 0c             	add    esp,0xc
c001abab:	55                   	push   ebp
c001abac:	56                   	push   esi
c001abad:	50                   	push   eax
c001abae:	89 c3                	mov    ebx,eax
c001abb0:	e8 ad fb ff ff       	call   c001a762 <File::File(char const*, Process*)>
c001abb5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001abba:	83 c4 0c             	add    esp,0xc
c001abbd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001abc1:	50                   	push   eax
c001abc2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abc6:	50                   	push   eax
c001abc7:	53                   	push   ebx
c001abc8:	e8 b5 fe ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c001abcd:	83 c4 10             	add    esp,0x10
c001abd0:	83 f8 02             	cmp    eax,0x2
c001abd3:	74 27                	je     c001abfc <Fs::setcwd(Process*, char*)+0x119>
c001abd5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001abda:	75 1c                	jne    c001abf8 <Fs::setcwd(Process*, char*)+0x115>
c001abdc:	85 db                	test   ebx,ebx
c001abde:	b8 02 00 00 00       	mov    eax,0x2
c001abe3:	74 51                	je     c001ac36 <Fs::setcwd(Process*, char*)+0x153>
c001abe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abe7:	83 ec 0c             	sub    esp,0xc
c001abea:	53                   	push   ebx
c001abeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abee:	83 c4 10             	add    esp,0x10
c001abf1:	b8 02 00 00 00       	mov    eax,0x2
c001abf6:	eb 3e                	jmp    c001ac36 <Fs::setcwd(Process*, char*)+0x153>
c001abf8:	85 c0                	test   eax,eax
c001abfa:	74 1c                	je     c001ac18 <Fs::setcwd(Process*, char*)+0x135>
c001abfc:	85 db                	test   ebx,ebx
c001abfe:	b8 01 00 00 00       	mov    eax,0x1
c001ac03:	74 31                	je     c001ac36 <Fs::setcwd(Process*, char*)+0x153>
c001ac05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac07:	83 ec 0c             	sub    esp,0xc
c001ac0a:	53                   	push   ebx
c001ac0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac0e:	83 c4 10             	add    esp,0x10
c001ac11:	b8 01 00 00 00       	mov    eax,0x1
c001ac16:	eb 1e                	jmp    c001ac36 <Fs::setcwd(Process*, char*)+0x153>
c001ac18:	85 db                	test   ebx,ebx
c001ac1a:	74 0c                	je     c001ac28 <Fs::setcwd(Process*, char*)+0x145>
c001ac1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac1e:	83 ec 0c             	sub    esp,0xc
c001ac21:	53                   	push   ebx
c001ac22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	50                   	push   eax
c001ac29:	50                   	push   eax
c001ac2a:	56                   	push   esi
c001ac2b:	57                   	push   edi
c001ac2c:	e8 1f 5a fe ff       	call   c0000650 <strcpy>
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	31 c0                	xor    eax,eax
c001ac36:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ac3c:	5b                   	pop    ebx
c001ac3d:	5e                   	pop    esi
c001ac3e:	5f                   	pop    edi
c001ac3f:	5d                   	pop    ebp
c001ac40:	c3                   	ret    
c001ac41:	90                   	nop

c001ac42 <Directory::Directory(char const*, Process*)>:
c001ac42:	83 ec 0c             	sub    esp,0xc
c001ac45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac49:	83 ec 08             	sub    esp,0x8
c001ac4c:	6a 00                	push   0x0
c001ac4e:	50                   	push   eax
c001ac4f:	e8 92 d1 ff ff       	call   c0017de6 <UnixFile::UnixFile(int)>
c001ac54:	83 c4 10             	add    esp,0x10
c001ac57:	ba b0 21 03 c0       	mov    edx,0xc00321b0
c001ac5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac60:	89 10                	mov    DWORD PTR [eax],edx
c001ac62:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ac67:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ac6b:	0f 95 c0             	setne  al
c001ac6e:	0f b6 c0             	movzx  eax,al
c001ac71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac75:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001ac7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac7f:	83 c2 0d             	add    edx,0xd
c001ac82:	50                   	push   eax
c001ac83:	51                   	push   ecx
c001ac84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac88:	52                   	push   edx
c001ac89:	e8 c8 f7 ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ac8e:	83 c4 10             	add    esp,0x10
c001ac91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac95:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001ac98:	83 e8 41             	sub    eax,0x41
c001ac9b:	88 c2                	mov    dl,al
c001ac9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca1:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001aca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acab:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001acaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001acb9:	0f b6 c0             	movzx  eax,al
c001acbc:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001acc3:	85 c0                	test   eax,eax
c001acc5:	74 3e                	je     c001ad05 <Directory::Directory(char const*, Process*)+0xc3>
c001acc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001accb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001acd1:	0f b6 c0             	movzx  eax,al
c001acd4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001acdb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ace1:	85 c0                	test   eax,eax
c001ace3:	75 20                	jne    c001ad05 <Directory::Directory(char const*, Process*)+0xc3>
c001ace5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001acef:	0f b6 c0             	movzx  eax,al
c001acf2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001acf9:	83 ec 0c             	sub    esp,0xc
c001acfc:	50                   	push   eax
c001acfd:	e8 12 1c 00 00       	call   c001c914 <LogicalDisk::mount()>
c001ad02:	83 c4 10             	add    esp,0x10
c001ad05:	90                   	nop
c001ad06:	83 c4 0c             	add    esp,0xc
c001ad09:	c3                   	ret    

c001ad0a <Directory::open()>:
c001ad0a:	53                   	push   ebx
c001ad0b:	b8 0b 00 00 00       	mov    eax,0xb
c001ad10:	83 ec 08             	sub    esp,0x8
c001ad13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad17:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001ad1e:	83 fa 19             	cmp    edx,0x19
c001ad21:	77 3d                	ja     c001ad60 <Directory::open()+0x56>
c001ad23:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001ad2a:	85 d2                	test   edx,edx
c001ad2c:	74 32                	je     c001ad60 <Directory::open()+0x56>
c001ad2e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001ad34:	85 d2                	test   edx,edx
c001ad36:	74 28                	je     c001ad60 <Directory::open()+0x56>
c001ad38:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001ad3c:	b8 06 00 00 00       	mov    eax,0x6
c001ad41:	75 1d                	jne    c001ad60 <Directory::open()+0x56>
c001ad43:	50                   	push   eax
c001ad44:	8b 02                	mov    eax,DWORD PTR [edx]
c001ad46:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001ad4c:	51                   	push   ecx
c001ad4d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001ad50:	51                   	push   ecx
c001ad51:	52                   	push   edx
c001ad52:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	85 c0                	test   eax,eax
c001ad5a:	75 04                	jne    c001ad60 <Directory::open()+0x56>
c001ad5c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001ad60:	83 c4 08             	add    esp,0x8
c001ad63:	5b                   	pop    ebx
c001ad64:	c3                   	ret    
c001ad65:	90                   	nop

c001ad66 <Directory::close()>:
c001ad66:	53                   	push   ebx
c001ad67:	b8 0b 00 00 00       	mov    eax,0xb
c001ad6c:	83 ec 08             	sub    esp,0x8
c001ad6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad73:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad7a:	83 f9 19             	cmp    ecx,0x19
c001ad7d:	77 41                	ja     c001adc0 <Directory::close()+0x5a>
c001ad7f:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad86:	85 db                	test   ebx,ebx
c001ad88:	74 36                	je     c001adc0 <Directory::close()+0x5a>
c001ad8a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ad91:	74 2d                	je     c001adc0 <Directory::close()+0x5a>
c001ad93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad97:	b8 05 00 00 00       	mov    eax,0x5
c001ad9c:	74 22                	je     c001adc0 <Directory::close()+0x5a>
c001ad9e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ada2:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001ada9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001adaf:	53                   	push   ebx
c001adb0:	53                   	push   ebx
c001adb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001adb3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001adb9:	50                   	push   eax
c001adba:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	83 c4 08             	add    esp,0x8
c001adc3:	5b                   	pop    ebx
c001adc4:	c3                   	ret    
c001adc5:	90                   	nop

c001adc6 <Directory::unlink()>:
c001adc6:	83 ec 0c             	sub    esp,0xc
c001adc9:	b8 0b 00 00 00       	mov    eax,0xb
c001adce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001add2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001add9:	83 f9 19             	cmp    ecx,0x19
c001addc:	77 2f                	ja     c001ae0d <Directory::unlink()+0x47>
c001adde:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ade5:	85 c9                	test   ecx,ecx
c001ade7:	74 24                	je     c001ae0d <Directory::unlink()+0x47>
c001ade9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adef:	85 c9                	test   ecx,ecx
c001adf1:	74 1a                	je     c001ae0d <Directory::unlink()+0x47>
c001adf3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001adf7:	b8 06 00 00 00       	mov    eax,0x6
c001adfc:	75 0f                	jne    c001ae0d <Directory::unlink()+0x47>
c001adfe:	50                   	push   eax
c001adff:	83 c2 0d             	add    edx,0xd
c001ae02:	50                   	push   eax
c001ae03:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae05:	52                   	push   edx
c001ae06:	51                   	push   ecx
c001ae07:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ae0a:	83 c4 10             	add    esp,0x10
c001ae0d:	83 c4 0c             	add    esp,0xc
c001ae10:	c3                   	ret    
c001ae11:	90                   	nop

c001ae12 <Directory::rename(char const*)>:
c001ae12:	83 ec 0c             	sub    esp,0xc
c001ae15:	b8 0b 00 00 00       	mov    eax,0xb
c001ae1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae25:	83 f9 19             	cmp    ecx,0x19
c001ae28:	77 32                	ja     c001ae5c <Directory::rename(char const*)+0x4a>
c001ae2a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae31:	85 c9                	test   ecx,ecx
c001ae33:	74 27                	je     c001ae5c <Directory::rename(char const*)+0x4a>
c001ae35:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae3b:	85 c9                	test   ecx,ecx
c001ae3d:	74 1d                	je     c001ae5c <Directory::rename(char const*)+0x4a>
c001ae3f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ae43:	b8 06 00 00 00       	mov    eax,0x6
c001ae48:	75 12                	jne    c001ae5c <Directory::rename(char const*)+0x4a>
c001ae4a:	50                   	push   eax
c001ae4b:	83 c2 0d             	add    edx,0xd
c001ae4e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae54:	52                   	push   edx
c001ae55:	51                   	push   ecx
c001ae56:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ae59:	83 c4 10             	add    esp,0x10
c001ae5c:	83 c4 0c             	add    esp,0xc
c001ae5f:	c3                   	ret    

c001ae60 <Directory::exists()>:
c001ae60:	83 ec 0c             	sub    esp,0xc
c001ae63:	31 c0                	xor    eax,eax
c001ae65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae69:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae70:	83 f9 19             	cmp    ecx,0x19
c001ae73:	77 24                	ja     c001ae99 <Directory::exists()+0x39>
c001ae75:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae7c:	85 c9                	test   ecx,ecx
c001ae7e:	74 19                	je     c001ae99 <Directory::exists()+0x39>
c001ae80:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae86:	85 c9                	test   ecx,ecx
c001ae88:	74 0f                	je     c001ae99 <Directory::exists()+0x39>
c001ae8a:	50                   	push   eax
c001ae8b:	83 c2 0d             	add    edx,0xd
c001ae8e:	50                   	push   eax
c001ae8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae91:	52                   	push   edx
c001ae92:	51                   	push   ecx
c001ae93:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ae96:	83 c4 10             	add    esp,0x10
c001ae99:	83 c4 0c             	add    esp,0xc
c001ae9c:	c3                   	ret    
c001ae9d:	90                   	nop

c001ae9e <Directory::read(dirent*)>:
c001ae9e:	83 ec 1c             	sub    esp,0x1c
c001aea1:	b8 0b 00 00 00       	mov    eax,0xb
c001aea6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aeaa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aeb1:	83 f9 19             	cmp    ecx,0x19
c001aeb4:	77 30                	ja     c001aee6 <Directory::read(dirent*)+0x48>
c001aeb6:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aebd:	85 c9                	test   ecx,ecx
c001aebf:	74 25                	je     c001aee6 <Directory::read(dirent*)+0x48>
c001aec1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001aec8:	74 1c                	je     c001aee6 <Directory::read(dirent*)+0x48>
c001aeca:	83 ec 0c             	sub    esp,0xc
c001aecd:	8b 02                	mov    eax,DWORD PTR [edx]
c001aecf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001aed3:	51                   	push   ecx
c001aed4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aed8:	6a 00                	push   0x0
c001aeda:	68 10 01 00 00       	push   0x110
c001aedf:	52                   	push   edx
c001aee0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aee3:	83 c4 20             	add    esp,0x20
c001aee6:	83 c4 1c             	add    esp,0x1c
c001aee9:	c3                   	ret    

c001aeea <Directory::create()>:
c001aeea:	83 ec 0c             	sub    esp,0xc
c001aeed:	b8 0b 00 00 00       	mov    eax,0xb
c001aef2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aef6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aefd:	83 f9 19             	cmp    ecx,0x19
c001af00:	77 2f                	ja     c001af31 <Directory::create()+0x47>
c001af02:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001af09:	85 c9                	test   ecx,ecx
c001af0b:	74 24                	je     c001af31 <Directory::create()+0x47>
c001af0d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001af13:	85 c9                	test   ecx,ecx
c001af15:	74 1a                	je     c001af31 <Directory::create()+0x47>
c001af17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001af1b:	b8 06 00 00 00       	mov    eax,0x6
c001af20:	75 0f                	jne    c001af31 <Directory::create()+0x47>
c001af22:	50                   	push   eax
c001af23:	83 c2 0d             	add    edx,0xd
c001af26:	50                   	push   eax
c001af27:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af29:	52                   	push   edx
c001af2a:	51                   	push   ecx
c001af2b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001af2e:	83 c4 10             	add    esp,0x10
c001af31:	83 c4 0c             	add    esp,0xc
c001af34:	c3                   	ret    
c001af35:	90                   	nop

c001af36 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001af36:	b8 0a 00 00 00       	mov    eax,0xa
c001af3b:	c3                   	ret    

c001af3c <Bus::Bus(char const*)>:
c001af3c:	83 ec 0c             	sub    esp,0xc
c001af3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af43:	83 ec 08             	sub    esp,0x8
c001af46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af4a:	50                   	push   eax
c001af4b:	e8 f2 07 00 00       	call   c001b742 <Device::Device(char const*)>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	ba cc 21 03 c0       	mov    edx,0xc00321cc
c001af58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5c:	89 10                	mov    DWORD PTR [eax],edx
c001af5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af62:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001af6c:	90                   	nop
c001af6d:	83 c4 0c             	add    esp,0xc
c001af70:	c3                   	ret    
c001af71:	90                   	nop
c001af72:	66 90                	xchg   ax,ax

c001af74 <Bus::~Bus()>:
c001af74:	83 ec 0c             	sub    esp,0xc
c001af77:	ba cc 21 03 c0       	mov    edx,0xc00321cc
c001af7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af80:	89 10                	mov    DWORD PTR [eax],edx
c001af82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af86:	83 ec 0c             	sub    esp,0xc
c001af89:	50                   	push   eax
c001af8a:	e8 53 05 00 00       	call   c001b4e2 <Device::~Device()>
c001af8f:	83 c4 10             	add    esp,0x10
c001af92:	90                   	nop
c001af93:	83 c4 0c             	add    esp,0xc
c001af96:	c3                   	ret    
c001af97:	90                   	nop

c001af98 <Bus::~Bus()>:
c001af98:	83 ec 0c             	sub    esp,0xc
c001af9b:	83 ec 0c             	sub    esp,0xc
c001af9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afa2:	e8 cd ff ff ff       	call   c001af74 <Bus::~Bus()>
c001afa7:	83 c4 10             	add    esp,0x10
c001afaa:	83 ec 08             	sub    esp,0x8
c001afad:	68 58 01 00 00       	push   0x158
c001afb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afb6:	e8 91 e4 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001afbb:	83 c4 10             	add    esp,0x10
c001afbe:	83 c4 0c             	add    esp,0xc
c001afc1:	c3                   	ret    

c001afc2 <beepThread(void*)>:
c001afc2:	83 ec 0c             	sub    esp,0xc
c001afc5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001afca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afce:	48                   	dec    eax
c001afcf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001afd4:	75 01                	jne    c001afd7 <beepThread(void*)+0x15>
c001afd6:	fb                   	sti    
c001afd7:	6b c2 0a             	imul   eax,edx,0xa
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	50                   	push   eax
c001afde:	e8 29 a7 00 00       	call   c002570c <milliTenthSleep(unsigned int)>
c001afe3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afea:	e8 22 c5 00 00       	call   c0027511 <HalMakeBeep(int)>
c001afef:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001aff7:	83 c4 1c             	add    esp,0x1c
c001affa:	e9 f1 a5 00 00       	jmp    c00255f0 <blockTask(TaskState)>

c001afff <Krnl::beep(int, int, bool)>:
c001afff:	56                   	push   esi
c001b000:	53                   	push   ebx
c001b001:	83 ec 10             	sub    esp,0x10
c001b004:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b008:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b010:	e8 fc c4 00 00       	call   c0027511 <HalMakeBeep(int)>
c001b015:	89 f0                	mov    eax,esi
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	84 c0                	test   al,al
c001b01c:	74 1e                	je     c001b03c <Krnl::beep(int, int, bool)+0x3d>
c001b01e:	6b db 0a             	imul   ebx,ebx,0xa
c001b021:	83 ec 0c             	sub    esp,0xc
c001b024:	53                   	push   ebx
c001b025:	e8 e2 a6 00 00       	call   c002570c <milliTenthSleep(unsigned int)>
c001b02a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b032:	83 c4 14             	add    esp,0x14
c001b035:	5b                   	pop    ebx
c001b036:	5e                   	pop    esi
c001b037:	e9 d5 c4 00 00       	jmp    c0027511 <HalMakeBeep(int)>
c001b03c:	68 e6 00 00 00       	push   0xe6
c001b041:	53                   	push   ebx
c001b042:	68 c2 af 01 c0       	push   0xc001afc2
c001b047:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001b04d:	e8 96 a2 00 00       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c001b052:	83 c4 14             	add    esp,0x14
c001b055:	5b                   	pop    ebx
c001b056:	5e                   	pop    esi
c001b057:	c3                   	ret    

c001b058 <User::loadClockSettings(int)>:
c001b058:	53                   	push   ebx
c001b059:	83 ec 14             	sub    esp,0x14
c001b05c:	68 14 01 00 00       	push   0x114
c001b061:	e8 ae b6 ff ff       	call   c0016714 <malloc>
c001b066:	83 c4 0c             	add    esp,0xc
c001b069:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001b06f:	68 f0 21 03 c0       	push   0xc00321f0
c001b074:	50                   	push   eax
c001b075:	89 c3                	mov    ebx,eax
c001b077:	e8 e6 f6 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c001b07c:	58                   	pop    eax
c001b07d:	5a                   	pop    edx
c001b07e:	6a 01                	push   0x1
c001b080:	53                   	push   ebx
c001b081:	e8 fa f6 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c001b086:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b089:	e8 50 f7 ff ff       	call   c001a7de <File::close()>
c001b08e:	83 c4 10             	add    esp,0x10
c001b091:	85 db                	test   ebx,ebx
c001b093:	74 0f                	je     c001b0a4 <User::loadClockSettings(int)+0x4c>
c001b095:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b097:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b09b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b09e:	83 c4 08             	add    esp,0x8
c001b0a1:	5b                   	pop    ebx
c001b0a2:	ff e0                	jmp    eax
c001b0a4:	83 c4 08             	add    esp,0x8
c001b0a7:	5b                   	pop    ebx
c001b0a8:	c3                   	ret    
c001b0a9:	90                   	nop

c001b0aa <Clock::Clock(char const*)>:
c001b0aa:	83 ec 0c             	sub    esp,0xc
c001b0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b1:	83 ec 08             	sub    esp,0x8
c001b0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0b8:	50                   	push   eax
c001b0b9:	e8 84 06 00 00       	call   c001b742 <Device::Device(char const*)>
c001b0be:	83 c4 10             	add    esp,0x10
c001b0c1:	ba 18 22 03 c0       	mov    edx,0xc0032218
c001b0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0ca:	89 10                	mov    DWORD PTR [eax],edx
c001b0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0d0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001b0da:	90                   	nop
c001b0db:	83 c4 0c             	add    esp,0xc
c001b0de:	c3                   	ret    
c001b0df:	90                   	nop

c001b0e0 <Clock::~Clock()>:
c001b0e0:	83 ec 0c             	sub    esp,0xc
c001b0e3:	ba 18 22 03 c0       	mov    edx,0xc0032218
c001b0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0ec:	89 10                	mov    DWORD PTR [eax],edx
c001b0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f2:	83 ec 0c             	sub    esp,0xc
c001b0f5:	50                   	push   eax
c001b0f6:	e8 e7 03 00 00       	call   c001b4e2 <Device::~Device()>
c001b0fb:	83 c4 10             	add    esp,0x10
c001b0fe:	90                   	nop
c001b0ff:	83 c4 0c             	add    esp,0xc
c001b102:	c3                   	ret    
c001b103:	90                   	nop

c001b104 <Clock::~Clock()>:
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	83 ec 0c             	sub    esp,0xc
c001b10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b10e:	e8 cd ff ff ff       	call   c001b0e0 <Clock::~Clock()>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	83 ec 08             	sub    esp,0x8
c001b119:	68 58 01 00 00       	push   0x158
c001b11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b122:	e8 25 e3 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001b127:	83 c4 10             	add    esp,0x10
c001b12a:	83 c4 0c             	add    esp,0xc
c001b12d:	c3                   	ret    

c001b12e <Clock::timeInSecondsLocal()>:
c001b12e:	53                   	push   ebx
c001b12f:	83 ec 14             	sub    esp,0x14
c001b132:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b136:	8b 10                	mov    edx,DWORD PTR [eax]
c001b138:	50                   	push   eax
c001b139:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b13c:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b143:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b149:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b14f:	89 cb                	mov    ebx,ecx
c001b151:	c1 fb 1f             	sar    ebx,0x1f
c001b154:	01 c8                	add    eax,ecx
c001b156:	11 da                	adc    edx,ebx
c001b158:	83 c4 10             	add    esp,0x10
c001b15b:	31 c9                	xor    ecx,ecx
c001b15d:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b164:	74 05                	je     c001b16b <Clock::timeInSecondsLocal()+0x3d>
c001b166:	b9 08 07 00 00       	mov    ecx,0x708
c001b16b:	31 db                	xor    ebx,ebx
c001b16d:	01 c8                	add    eax,ecx
c001b16f:	11 da                	adc    edx,ebx
c001b171:	83 c4 08             	add    esp,0x8
c001b174:	5b                   	pop    ebx
c001b175:	c3                   	ret    

c001b176 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b176:	57                   	push   edi
c001b177:	56                   	push   esi
c001b178:	53                   	push   ebx
c001b179:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b17d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b181:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b185:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b187:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b18a:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001b191:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001b197:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b19d:	99                   	cdq    
c001b19e:	29 c6                	sub    esi,eax
c001b1a0:	19 d7                	sbb    edi,edx
c001b1a2:	89 f0                	mov    eax,esi
c001b1a4:	31 f6                	xor    esi,esi
c001b1a6:	89 fa                	mov    edx,edi
c001b1a8:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b1af:	74 05                	je     c001b1b6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b1b1:	be 08 07 00 00       	mov    esi,0x708
c001b1b6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1ba:	31 ff                	xor    edi,edi
c001b1bc:	29 f0                	sub    eax,esi
c001b1be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1c2:	19 fa                	sbb    edx,edi
c001b1c4:	89 d8                	mov    eax,ebx
c001b1c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b1ca:	5b                   	pop    ebx
c001b1cb:	5e                   	pop    esi
c001b1cc:	5f                   	pop    edi
c001b1cd:	ff e0                	jmp    eax

c001b1cf <datetimeToSeconds(datetime_t)>:
c001b1cf:	55                   	push   ebp
c001b1d0:	57                   	push   edi
c001b1d1:	56                   	push   esi
c001b1d2:	53                   	push   ebx
c001b1d3:	83 ec 0c             	sub    esp,0xc
c001b1d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b1da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1de:	89 f7                	mov    edi,esi
c001b1e0:	89 f0                	mov    eax,esi
c001b1e2:	0f b6 cf             	movzx  ecx,bh
c001b1e5:	0f b6 c4             	movzx  eax,ah
c001b1e8:	c1 ef 10             	shr    edi,0x10
c001b1eb:	89 da                	mov    edx,ebx
c001b1ed:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001b1f0:	89 f9                	mov    ecx,edi
c001b1f2:	0f b6 f9             	movzx  edi,cl
c001b1f5:	89 f1                	mov    ecx,esi
c001b1f7:	6b c0 3c             	imul   eax,eax,0x3c
c001b1fa:	0f b6 f1             	movzx  esi,cl
c001b1fd:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001b203:	0f b6 db             	movzx  ebx,bl
c001b206:	c1 ea 10             	shr    edx,0x10
c001b209:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001b20f:	01 f8                	add    eax,edi
c001b211:	01 f0                	add    eax,esi
c001b213:	89 04 24             	mov    DWORD PTR [esp],eax
c001b216:	c1 f8 1f             	sar    eax,0x1f
c001b219:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b21d:	89 e8                	mov    eax,ebp
c001b21f:	0f b6 c0             	movzx  eax,al
c001b222:	8b 0c 85 60 22 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcdda0]
c001b229:	83 f8 01             	cmp    eax,0x1
c001b22c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001b230:	0f b7 da             	movzx  ebx,dx
c001b233:	76 27                	jbe    c001b25c <datetimeToSeconds(datetime_t)+0x8d>
c001b235:	80 e2 03             	and    dl,0x3
c001b238:	75 22                	jne    c001b25c <datetimeToSeconds(datetime_t)+0x8d>
c001b23a:	31 d2                	xor    edx,edx
c001b23c:	be 64 00 00 00       	mov    esi,0x64
c001b241:	89 d8                	mov    eax,ebx
c001b243:	f7 f6                	div    esi
c001b245:	85 d2                	test   edx,edx
c001b247:	75 12                	jne    c001b25b <datetimeToSeconds(datetime_t)+0x8c>
c001b249:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b24f:	be 90 01 00 00       	mov    esi,0x190
c001b254:	99                   	cdq    
c001b255:	f7 fe                	idiv   esi
c001b257:	85 d2                	test   edx,edx
c001b259:	75 01                	jne    c001b25c <datetimeToSeconds(datetime_t)+0x8d>
c001b25b:	41                   	inc    ecx
c001b25c:	83 fb 46             	cmp    ebx,0x46
c001b25f:	76 48                	jbe    c001b2a9 <datetimeToSeconds(datetime_t)+0xda>
c001b261:	be 46 00 00 00       	mov    esi,0x46
c001b266:	bf 64 00 00 00       	mov    edi,0x64
c001b26b:	bd 90 01 00 00       	mov    ebp,0x190
c001b270:	f7 c6 03 00 00 00    	test   esi,0x3
c001b276:	b8 6d 01 00 00       	mov    eax,0x16d
c001b27b:	75 23                	jne    c001b2a0 <datetimeToSeconds(datetime_t)+0xd1>
c001b27d:	89 f0                	mov    eax,esi
c001b27f:	99                   	cdq    
c001b280:	f7 ff                	idiv   edi
c001b282:	b8 6e 01 00 00       	mov    eax,0x16e
c001b287:	85 d2                	test   edx,edx
c001b289:	75 15                	jne    c001b2a0 <datetimeToSeconds(datetime_t)+0xd1>
c001b28b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b291:	99                   	cdq    
c001b292:	f7 fd                	idiv   ebp
c001b294:	83 fa 01             	cmp    edx,0x1
c001b297:	19 c0                	sbb    eax,eax
c001b299:	f7 d0                	not    eax
c001b29b:	05 6e 01 00 00       	add    eax,0x16e
c001b2a0:	46                   	inc    esi
c001b2a1:	01 c1                	add    ecx,eax
c001b2a3:	39 de                	cmp    esi,ebx
c001b2a5:	7c c9                	jl     c001b270 <datetimeToSeconds(datetime_t)+0xa1>
c001b2a7:	eb 34                	jmp    c001b2dd <datetimeToSeconds(datetime_t)+0x10e>
c001b2a9:	74 32                	je     c001b2dd <datetimeToSeconds(datetime_t)+0x10e>
c001b2ab:	b8 45 00 00 00       	mov    eax,0x45
c001b2b0:	89 c2                	mov    edx,eax
c001b2b2:	83 e2 03             	and    edx,0x3
c001b2b5:	39 d8                	cmp    eax,ebx
c001b2b7:	7e 0f                	jle    c001b2c8 <datetimeToSeconds(datetime_t)+0xf9>
c001b2b9:	83 fa 01             	cmp    edx,0x1
c001b2bc:	19 d2                	sbb    edx,edx
c001b2be:	48                   	dec    eax
c001b2bf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b2c6:	eb e8                	jmp    c001b2b0 <datetimeToSeconds(datetime_t)+0xe1>
c001b2c8:	85 d2                	test   edx,edx
c001b2ca:	b8 6d 01 00 00       	mov    eax,0x16d
c001b2cf:	75 0a                	jne    c001b2db <datetimeToSeconds(datetime_t)+0x10c>
c001b2d1:	83 fb 01             	cmp    ebx,0x1
c001b2d4:	19 c0                	sbb    eax,eax
c001b2d6:	05 6e 01 00 00       	add    eax,0x16e
c001b2db:	29 c1                	sub    ecx,eax
c001b2dd:	b8 80 51 01 00       	mov    eax,0x15180
c001b2e2:	f7 e9                	imul   ecx
c001b2e4:	03 04 24             	add    eax,DWORD PTR [esp]
c001b2e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b2eb:	83 c4 0c             	add    esp,0xc
c001b2ee:	5b                   	pop    ebx
c001b2ef:	5e                   	pop    esi
c001b2f0:	5f                   	pop    edi
c001b2f1:	5d                   	pop    ebp
c001b2f2:	c3                   	ret    
c001b2f3:	90                   	nop

c001b2f4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b2f4:	57                   	push   edi
c001b2f5:	56                   	push   esi
c001b2f6:	53                   	push   ebx
c001b2f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2fd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b304:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b308:	e8 c2 fe ff ff       	call   c001b1cf <datetimeToSeconds(datetime_t)>
c001b30d:	59                   	pop    ecx
c001b30e:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b315:	5b                   	pop    ebx
c001b316:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b31c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b322:	89 cb                	mov    ebx,ecx
c001b324:	c1 fb 1f             	sar    ebx,0x1f
c001b327:	29 c8                	sub    eax,ecx
c001b329:	19 da                	sbb    edx,ebx
c001b32b:	31 c9                	xor    ecx,ecx
c001b32d:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b334:	74 05                	je     c001b33b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b336:	b9 08 07 00 00       	mov    ecx,0x708
c001b33b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b33f:	31 db                	xor    ebx,ebx
c001b341:	29 c8                	sub    eax,ecx
c001b343:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b347:	19 da                	sbb    edx,ebx
c001b349:	89 f8                	mov    eax,edi
c001b34b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b34f:	5b                   	pop    ebx
c001b350:	5e                   	pop    esi
c001b351:	5f                   	pop    edi
c001b352:	ff e0                	jmp    eax

c001b354 <secondsToDatetime(unsigned long long)>:
c001b354:	55                   	push   ebp
c001b355:	57                   	push   edi
c001b356:	56                   	push   esi
c001b357:	53                   	push   ebx
c001b358:	83 ec 1c             	sub    esp,0x1c
c001b35b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b35f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b363:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b367:	6a 00                	push   0x0
c001b369:	68 80 51 01 00       	push   0x15180
c001b36e:	55                   	push   ebp
c001b36f:	57                   	push   edi
c001b370:	e8 1b 36 01 00       	call   c002e990 <__udivdi3>
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b37c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b382:	6a 00                	push   0x0
c001b384:	68 80 51 01 00       	push   0x15180
c001b389:	55                   	push   ebp
c001b38a:	57                   	push   edi
c001b38b:	bf 10 0e 00 00       	mov    edi,0xe10
c001b390:	e8 fb 36 01 00       	call   c002ea90 <__umoddi3>
c001b395:	83 c4 10             	add    esp,0x10
c001b398:	99                   	cdq    
c001b399:	f7 ff                	idiv   edi
c001b39b:	bf 3c 00 00 00       	mov    edi,0x3c
c001b3a0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b3a3:	89 d0                	mov    eax,edx
c001b3a5:	99                   	cdq    
c001b3a6:	f7 ff                	idiv   edi
c001b3a8:	85 db                	test   ebx,ebx
c001b3aa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b3ad:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b3b0:	79 11                	jns    c001b3c3 <secondsToDatetime(unsigned long long)+0x6f>
c001b3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3b6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b3bc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3c1:	eb 07                	jmp    c001b3ca <secondsToDatetime(unsigned long long)+0x76>
c001b3c3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3c8:	89 d8                	mov    eax,ebx
c001b3ca:	99                   	cdq    
c001b3cb:	bf b4 05 00 00       	mov    edi,0x5b4
c001b3d0:	f7 f9                	idiv   ecx
c001b3d2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b3d7:	31 d2                	xor    edx,edx
c001b3d9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b3de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3e2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b3ea:	01 c3                	add    ebx,eax
c001b3ec:	89 d8                	mov    eax,ebx
c001b3ee:	f7 f1                	div    ecx
c001b3f0:	31 d2                	xor    edx,edx
c001b3f2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b3f5:	89 d8                	mov    eax,ebx
c001b3f7:	f7 f7                	div    edi
c001b3f9:	31 d2                	xor    edx,edx
c001b3fb:	29 c1                	sub    ecx,eax
c001b3fd:	89 d8                	mov    eax,ebx
c001b3ff:	f7 f5                	div    ebp
c001b401:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b406:	31 d2                	xor    edx,edx
c001b408:	29 c1                	sub    ecx,eax
c001b40a:	89 c8                	mov    eax,ecx
c001b40c:	f7 f5                	div    ebp
c001b40e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b413:	31 d2                	xor    edx,edx
c001b415:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b419:	89 c8                	mov    eax,ecx
c001b41b:	f7 f5                	div    ebp
c001b41d:	31 d2                	xor    edx,edx
c001b41f:	01 c3                	add    ebx,eax
c001b421:	89 c8                	mov    eax,ecx
c001b423:	f7 f7                	div    edi
c001b425:	bf 99 00 00 00       	mov    edi,0x99
c001b42a:	31 d2                	xor    edx,edx
c001b42c:	29 c3                	sub    ebx,eax
c001b42e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b436:	29 c3                	sub    ebx,eax
c001b438:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b43b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b43e:	83 c1 02             	add    ecx,0x2
c001b441:	89 c8                	mov    eax,ecx
c001b443:	bb 05 00 00 00       	mov    ebx,0x5
c001b448:	f7 f7                	div    edi
c001b44a:	31 d2                	xor    edx,edx
c001b44c:	89 c7                	mov    edi,eax
c001b44e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b454:	83 c0 02             	add    eax,0x2
c001b457:	f7 f3                	div    ebx
c001b459:	89 eb                	mov    ebx,ebp
c001b45b:	29 c3                	sub    ebx,eax
c001b45d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b463:	88 1e                	mov    BYTE PTR [esi],bl
c001b465:	19 c0                	sbb    eax,eax
c001b467:	31 d2                	xor    edx,edx
c001b469:	83 e0 0c             	and    eax,0xc
c001b46c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b470:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b478:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b47c:	83 f9 01             	cmp    ecx,0x1
c001b47f:	0f 96 c2             	setbe  dl
c001b482:	41                   	inc    ecx
c001b483:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b486:	01 d0                	add    eax,edx
c001b488:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b48c:	83 c4 1c             	add    esp,0x1c
c001b48f:	89 f0                	mov    eax,esi
c001b491:	5b                   	pop    ebx
c001b492:	5e                   	pop    esi
c001b493:	5f                   	pop    edi
c001b494:	5d                   	pop    ebp
c001b495:	c2 04 00             	ret    0x4

c001b498 <Clock::timeInDatetimeLocal()>:
c001b498:	53                   	push   ebx
c001b499:	83 ec 14             	sub    esp,0x14
c001b49c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4a4:	e8 85 fc ff ff       	call   c001b12e <Clock::timeInSecondsLocal()>
c001b4a9:	83 c4 0c             	add    esp,0xc
c001b4ac:	52                   	push   edx
c001b4ad:	50                   	push   eax
c001b4ae:	53                   	push   ebx
c001b4af:	e8 a0 fe ff ff       	call   c001b354 <secondsToDatetime(unsigned long long)>
c001b4b4:	89 d8                	mov    eax,ebx
c001b4b6:	83 c4 14             	add    esp,0x14
c001b4b9:	5b                   	pop    ebx
c001b4ba:	c2 04 00             	ret    0x4
c001b4bd:	90                   	nop

c001b4be <Device::hibernate()>:
c001b4be:	c3                   	ret    
c001b4bf:	90                   	nop

c001b4c0 <Device::wake()>:
c001b4c0:	c3                   	ret    
c001b4c1:	90                   	nop

c001b4c2 <Device::detect()>:
c001b4c2:	c3                   	ret    
c001b4c3:	90                   	nop

c001b4c4 <Device::disableLegacy()>:
c001b4c4:	c3                   	ret    
c001b4c5:	90                   	nop

c001b4c6 <Device::powerSaving(PowerSavingLevel)>:
c001b4c6:	c3                   	ret    
c001b4c7:	90                   	nop

c001b4c8 <DriverlessDevice::close(int, int, void*)>:
c001b4c8:	31 c0                	xor    eax,eax
c001b4ca:	c3                   	ret    
c001b4cb:	90                   	nop

c001b4cc <DriverlessDevice::detect()>:
c001b4cc:	c3                   	ret    
c001b4cd:	90                   	nop

c001b4ce <DriverlessDevice::open(int, int, void*)>:
c001b4ce:	83 ec 18             	sub    esp,0x18
c001b4d1:	68 90 22 03 c0       	push   0xc0032290
c001b4d6:	e8 f7 4f 00 00       	call   c00204d2 <KePanic(char const*)>
c001b4db:	83 c8 ff             	or     eax,0xffffffff
c001b4de:	83 c4 1c             	add    esp,0x1c
c001b4e1:	c3                   	ret    

c001b4e2 <Device::~Device()>:
c001b4e2:	ba fc 22 03 c0       	mov    edx,0xc00322fc
c001b4e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4eb:	89 10                	mov    DWORD PTR [eax],edx
c001b4ed:	90                   	nop
c001b4ee:	c3                   	ret    
c001b4ef:	90                   	nop

c001b4f0 <Device::~Device()>:
c001b4f0:	83 ec 0c             	sub    esp,0xc
c001b4f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b4f7:	e8 e6 ff ff ff       	call   c001b4e2 <Device::~Device()>
c001b4fc:	83 c4 04             	add    esp,0x4
c001b4ff:	83 ec 08             	sub    esp,0x8
c001b502:	68 58 01 00 00       	push   0x158
c001b507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b50b:	e8 3c df ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	83 c4 0c             	add    esp,0xc
c001b516:	c3                   	ret    
c001b517:	90                   	nop

c001b518 <Device::findAndLoadDriver()>:
c001b518:	c7 44 24 04 ae 22 03 c0 	mov    DWORD PTR [esp+0x4],0xc00322ae
c001b520:	e9 25 e0 ff ff       	jmp    c001954a <Dbg::kprintf(char const*, ...)>
c001b525:	90                   	nop

c001b526 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b526:	57                   	push   edi
c001b527:	b9 09 00 00 00       	mov    ecx,0x9
c001b52c:	56                   	push   esi
c001b52d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b531:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b535:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b53f:	81 c7 18 01 00 00    	add    edi,0x118
c001b545:	fc                   	cld    
c001b546:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b548:	5e                   	pop    esi
c001b549:	5f                   	pop    edi
c001b54a:	c3                   	ret    
c001b54b:	90                   	nop

c001b54c <Device::preOpenACPI(void*, char*, char*)>:
c001b54c:	57                   	push   edi
c001b54d:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b552:	56                   	push   esi
c001b553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b557:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b55b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b55f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b569:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b56f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b575:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b577:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b57d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b581:	b9 0e 00 00 00       	mov    ecx,0xe
c001b586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b588:	5e                   	pop    esi
c001b589:	5f                   	pop    edi
c001b58a:	c3                   	ret    
c001b58b:	90                   	nop

c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b58c:	53                   	push   ebx
c001b58d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b591:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b599:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b59d:	0f b6 c0             	movzx  eax,al
c001b5a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b5a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5a8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5ac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b5b0:	5b                   	pop    ebx
c001b5b1:	e9 be 05 00 00       	jmp    c001bb74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b5b6 <Device::getParent()>:
c001b5b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5ba:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b5c0:	c3                   	ret    
c001b5c1:	90                   	nop

c001b5c2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b5c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5ca:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b5cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b5d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b5d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5db:	e9 0b 07 00 00       	jmp    c001bceb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b5e0 <Device::addChild(Device*)>:
c001b5e0:	53                   	push   ebx
c001b5e1:	83 ec 08             	sub    esp,0x8
c001b5e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5ec:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b5f2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b5f8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5fa:	85 d2                	test   edx,edx
c001b5fc:	74 04                	je     c001b602 <Device::addChild(Device*)+0x22>
c001b5fe:	89 d3                	mov    ebx,edx
c001b600:	eb f6                	jmp    c001b5f8 <Device::addChild(Device*)+0x18>
c001b602:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b605:	83 ec 0c             	sub    esp,0xc
c001b608:	6a 08                	push   0x8
c001b60a:	e8 05 b1 ff ff       	call   c0016714 <malloc>
c001b60f:	89 03                	mov    DWORD PTR [ebx],eax
c001b611:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b617:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b61e:	83 c4 18             	add    esp,0x18
c001b621:	5b                   	pop    ebx
c001b622:	c3                   	ret    
c001b623:	90                   	nop

c001b624 <Device::removeAllChildren()>:
c001b624:	56                   	push   esi
c001b625:	53                   	push   ebx
c001b626:	52                   	push   edx
c001b627:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b62b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b631:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b634:	74 17                	je     c001b64d <Device::removeAllChildren()+0x29>
c001b636:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b639:	85 c0                	test   eax,eax
c001b63b:	74 0c                	je     c001b649 <Device::removeAllChildren()+0x25>
c001b63d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b63f:	83 ec 0c             	sub    esp,0xc
c001b642:	50                   	push   eax
c001b643:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b646:	83 c4 10             	add    esp,0x10
c001b649:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b64b:	eb e4                	jmp    c001b631 <Device::removeAllChildren()+0xd>
c001b64d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b653:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b659:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b65f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b666:	58                   	pop    eax
c001b667:	5b                   	pop    ebx
c001b668:	5e                   	pop    esi
c001b669:	c3                   	ret    

c001b66a <Device::hibernateAll()>:
c001b66a:	53                   	push   ebx
c001b66b:	83 ec 14             	sub    esp,0x14
c001b66e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b672:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b674:	53                   	push   ebx
c001b675:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b678:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b67e:	83 c4 10             	add    esp,0x10
c001b681:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b684:	74 0f                	je     c001b695 <Device::hibernateAll()+0x2b>
c001b686:	83 ec 0c             	sub    esp,0xc
c001b689:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b68c:	e8 d9 ff ff ff       	call   c001b66a <Device::hibernateAll()>
c001b691:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b693:	eb e9                	jmp    c001b67e <Device::hibernateAll()+0x14>
c001b695:	83 c4 08             	add    esp,0x8
c001b698:	5b                   	pop    ebx
c001b699:	c3                   	ret    

c001b69a <Device::wakeAll()>:
c001b69a:	53                   	push   ebx
c001b69b:	83 ec 14             	sub    esp,0x14
c001b69e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6a4:	53                   	push   ebx
c001b6a5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b6a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6ae:	83 c4 10             	add    esp,0x10
c001b6b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6b4:	74 0f                	je     c001b6c5 <Device::wakeAll()+0x2b>
c001b6b6:	83 ec 0c             	sub    esp,0xc
c001b6b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6bc:	e8 d9 ff ff ff       	call   c001b69a <Device::wakeAll()>
c001b6c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6c3:	eb e9                	jmp    c001b6ae <Device::wakeAll()+0x14>
c001b6c5:	83 c4 08             	add    esp,0x8
c001b6c8:	5b                   	pop    ebx
c001b6c9:	c3                   	ret    

c001b6ca <Device::detectAll()>:
c001b6ca:	53                   	push   ebx
c001b6cb:	83 ec 14             	sub    esp,0x14
c001b6ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6d4:	53                   	push   ebx
c001b6d5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b6d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6de:	83 c4 10             	add    esp,0x10
c001b6e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6e4:	74 0f                	je     c001b6f5 <Device::detectAll()+0x2b>
c001b6e6:	83 ec 0c             	sub    esp,0xc
c001b6e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6ec:	e8 d9 ff ff ff       	call   c001b6ca <Device::detectAll()>
c001b6f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6f3:	eb e9                	jmp    c001b6de <Device::detectAll()+0x14>
c001b6f5:	83 c4 08             	add    esp,0x8
c001b6f8:	5b                   	pop    ebx
c001b6f9:	c3                   	ret    

c001b6fa <Device::disableLegacyAll()>:
c001b6fa:	c3                   	ret    
c001b6fb:	90                   	nop

c001b6fc <Device::loadDriversForAll()>:
c001b6fc:	c3                   	ret    
c001b6fd:	90                   	nop

c001b6fe <Device::powerSavingAll(PowerSavingLevel)>:
c001b6fe:	56                   	push   esi
c001b6ff:	53                   	push   ebx
c001b700:	83 ec 0c             	sub    esp,0xc
c001b703:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b707:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b70b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b70d:	56                   	push   esi
c001b70e:	53                   	push   ebx
c001b70f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b712:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b718:	83 c4 10             	add    esp,0x10
c001b71b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b71e:	74 0f                	je     c001b72f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b720:	52                   	push   edx
c001b721:	52                   	push   edx
c001b722:	56                   	push   esi
c001b723:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b726:	e8 d3 ff ff ff       	call   c001b6fe <Device::powerSavingAll(PowerSavingLevel)>
c001b72b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b72d:	eb e9                	jmp    c001b718 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b72f:	58                   	pop    eax
c001b730:	5b                   	pop    ebx
c001b731:	5e                   	pop    esi
c001b732:	c3                   	ret    
c001b733:	90                   	nop

c001b734 <Device::setName(char const*)>:
c001b734:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b73c:	e9 0f 4f fe ff       	jmp    c0000650 <strcpy>
c001b741:	90                   	nop

c001b742 <Device::Device(char const*)>:
c001b742:	83 ec 1c             	sub    esp,0x1c
c001b745:	ba fc 22 03 c0       	mov    edx,0xc00322fc
c001b74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b74e:	89 10                	mov    DWORD PTR [eax],edx
c001b750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b754:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b762:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b76c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b770:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b77e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b788:	83 ec 08             	sub    esp,0x8
c001b78b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b78f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b793:	e8 9c ff ff ff       	call   c001b734 <Device::setName(char const*)>
c001b798:	83 c4 10             	add    esp,0x10
c001b79b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b7a3:	83 ec 0c             	sub    esp,0xc
c001b7a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7aa:	e8 65 af ff ff       	call   c0016714 <malloc>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b7c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b7d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b7e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b804:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b812:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b81c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b820:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b82e:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b838:	90                   	nop
c001b839:	83 c4 1c             	add    esp,0x1c
c001b83c:	c3                   	ret    
c001b83d:	90                   	nop

c001b83e <Device::getName()>:
c001b83e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b842:	05 d0 00 00 00       	add    eax,0xd0
c001b847:	c3                   	ret    

c001b848 <Device::closeAll()>:
c001b848:	53                   	push   ebx
c001b849:	83 ec 08             	sub    esp,0x8
c001b84c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b850:	53                   	push   ebx
c001b851:	e8 e8 ff ff ff       	call   c001b83e <Device::getName()>
c001b856:	52                   	push   edx
c001b857:	50                   	push   eax
c001b858:	68 e8 22 03 c0       	push   0xc00322e8
c001b85d:	e8 e8 dc ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001b862:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b864:	6a 00                	push   0x0
c001b866:	6a 00                	push   0x0
c001b868:	6a 00                	push   0x0
c001b86a:	53                   	push   ebx
c001b86b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b86e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b874:	83 c4 20             	add    esp,0x20
c001b877:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b87a:	74 12                	je     c001b88e <Device::closeAll()+0x46>
c001b87c:	83 ec 0c             	sub    esp,0xc
c001b87f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b882:	e8 c1 ff ff ff       	call   c001b848 <Device::closeAll()>
c001b887:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b889:	83 c4 10             	add    esp,0x10
c001b88c:	eb e9                	jmp    c001b877 <Device::closeAll()+0x2f>
c001b88e:	83 c4 08             	add    esp,0x8
c001b891:	5b                   	pop    ebx
c001b892:	c3                   	ret    
c001b893:	90                   	nop

c001b894 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89b:	83 ec 08             	sub    esp,0x8
c001b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8a2:	50                   	push   eax
c001b8a3:	e8 9a fe ff ff       	call   c001b742 <Device::Device(char const*)>
c001b8a8:	83 c4 10             	add    esp,0x10
c001b8ab:	ba 28 23 03 c0       	mov    edx,0xc0032328
c001b8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b4:	89 10                	mov    DWORD PTR [eax],edx
c001b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ba:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b8c4:	90                   	nop
c001b8c5:	83 c4 0c             	add    esp,0xc
c001b8c8:	c3                   	ret    
c001b8c9:	90                   	nop

c001b8ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b8ca:	57                   	push   edi
c001b8cb:	56                   	push   esi
c001b8cc:	53                   	push   ebx
c001b8cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b8d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b8d9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b8df:	75 0c                	jne    c001b8ed <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b8e1:	52                   	push   edx
c001b8e2:	52                   	push   edx
c001b8e3:	53                   	push   ebx
c001b8e4:	56                   	push   esi
c001b8e5:	e8 58 35 01 00       	call   c002ee42 <LinkedList<Device>::addElement(Device*)>
c001b8ea:	83 c4 10             	add    esp,0x10
c001b8ed:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b8f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b8f6:	74 12                	je     c001b90a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b8f8:	50                   	push   eax
c001b8f9:	57                   	push   edi
c001b8fa:	56                   	push   esi
c001b8fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b8fe:	e8 c7 ff ff ff       	call   c001b8ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b903:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b905:	83 c4 10             	add    esp,0x10
c001b908:	eb e9                	jmp    c001b8f3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b90a:	5b                   	pop    ebx
c001b90b:	5e                   	pop    esi
c001b90c:	5f                   	pop    edi
c001b90d:	c3                   	ret    

c001b90e <getDevicesOfType(DeviceType)>:
c001b90e:	53                   	push   ebx
c001b90f:	83 ec 14             	sub    esp,0x14
c001b912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b916:	53                   	push   ebx
c001b917:	e8 02 36 01 00       	call   c002ef1e <LinkedList<Device>::LinkedList()>
c001b91c:	83 c4 0c             	add    esp,0xc
c001b91f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b923:	53                   	push   ebx
c001b924:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b92a:	e8 9b ff ff ff       	call   c001b8ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b92f:	83 c4 18             	add    esp,0x18
c001b932:	89 d8                	mov    eax,ebx
c001b934:	5b                   	pop    ebx
c001b935:	c2 04 00             	ret    0x4

c001b938 <HardDiskController::HardDiskController(char const*)>:
c001b938:	83 ec 0c             	sub    esp,0xc
c001b93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93f:	83 ec 08             	sub    esp,0x8
c001b942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b946:	50                   	push   eax
c001b947:	e8 f6 fd ff ff       	call   c001b742 <Device::Device(char const*)>
c001b94c:	83 c4 10             	add    esp,0x10
c001b94f:	ba 54 23 03 c0       	mov    edx,0xc0032354
c001b954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b958:	89 10                	mov    DWORD PTR [eax],edx
c001b95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b968:	90                   	nop
c001b969:	83 c4 0c             	add    esp,0xc
c001b96c:	c3                   	ret    
c001b96d:	90                   	nop
c001b96e:	66 90                	xchg   ax,ax

c001b970 <HardDiskController::~HardDiskController()>:
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	ba 54 23 03 c0       	mov    edx,0xc0032354
c001b978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97c:	89 10                	mov    DWORD PTR [eax],edx
c001b97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b982:	83 ec 0c             	sub    esp,0xc
c001b985:	50                   	push   eax
c001b986:	e8 57 fb ff ff       	call   c001b4e2 <Device::~Device()>
c001b98b:	83 c4 10             	add    esp,0x10
c001b98e:	90                   	nop
c001b98f:	83 c4 0c             	add    esp,0xc
c001b992:	c3                   	ret    
c001b993:	90                   	nop

c001b994 <HardDiskController::~HardDiskController()>:
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	83 ec 0c             	sub    esp,0xc
c001b99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b99e:	e8 cd ff ff ff       	call   c001b970 <HardDiskController::~HardDiskController()>
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	83 ec 08             	sub    esp,0x8
c001b9a9:	68 58 01 00 00       	push   0x158
c001b9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b2:	e8 95 da ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	83 c4 0c             	add    esp,0xc
c001b9bd:	c3                   	ret    

c001b9be <PhysicalDisk::eject()>:
c001b9be:	83 c8 ff             	or     eax,0xffffffff
c001b9c1:	c3                   	ret    

c001b9c2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b9c2:	83 ec 0c             	sub    esp,0xc
c001b9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c9:	83 ec 08             	sub    esp,0x8
c001b9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d0:	50                   	push   eax
c001b9d1:	e8 6c fd ff ff       	call   c001b742 <Device::Device(char const*)>
c001b9d6:	83 c4 10             	add    esp,0x10
c001b9d9:	ba 80 23 03 c0       	mov    edx,0xc0032380
c001b9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e2:	89 10                	mov    DWORD PTR [eax],edx
c001b9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001ba08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ba16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ba24:	90                   	nop
c001ba25:	83 c4 0c             	add    esp,0xc
c001ba28:	c3                   	ret    
c001ba29:	90                   	nop

c001ba2a <PhysicalDisk::startCache()>:
c001ba2a:	56                   	push   esi
c001ba2b:	53                   	push   ebx
c001ba2c:	83 ec 10             	sub    esp,0x10
c001ba2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba33:	6a 44                	push   0x44
c001ba35:	e8 da ac ff ff       	call   c0016714 <malloc>
c001ba3a:	89 c6                	mov    esi,eax
c001ba3c:	58                   	pop    eax
c001ba3d:	5a                   	pop    edx
c001ba3e:	53                   	push   ebx
c001ba3f:	56                   	push   esi
c001ba40:	e8 77 17 00 00       	call   c001d1bc <VCache::VCache(PhysicalDisk*)>
c001ba45:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001ba4b:	83 c4 14             	add    esp,0x14
c001ba4e:	5b                   	pop    ebx
c001ba4f:	5e                   	pop    esi
c001ba50:	c3                   	ret    
c001ba51:	90                   	nop

c001ba52 <PhysicalDisk::~PhysicalDisk()>:
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	ba 80 23 03 c0       	mov    edx,0xc0032380
c001ba5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5e:	89 10                	mov    DWORD PTR [eax],edx
c001ba60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba64:	83 ec 0c             	sub    esp,0xc
c001ba67:	50                   	push   eax
c001ba68:	e8 75 fa ff ff       	call   c001b4e2 <Device::~Device()>
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	90                   	nop
c001ba71:	83 c4 0c             	add    esp,0xc
c001ba74:	c3                   	ret    
c001ba75:	90                   	nop

c001ba76 <PhysicalDisk::~PhysicalDisk()>:
c001ba76:	83 ec 0c             	sub    esp,0xc
c001ba79:	83 ec 0c             	sub    esp,0xc
c001ba7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba80:	e8 cd ff ff ff       	call   c001ba52 <PhysicalDisk::~PhysicalDisk()>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	83 ec 08             	sub    esp,0x8
c001ba8b:	68 6c 01 00 00       	push   0x16c
c001ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba94:	e8 b3 d9 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	83 c4 0c             	add    esp,0xc
c001ba9f:	c3                   	ret    

c001baa0 <int_handler>:
c001baa0:	55                   	push   ebp
c001baa1:	57                   	push   edi
c001baa2:	56                   	push   esi
c001baa3:	53                   	push   ebx
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001baae:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bab2:	74 0b                	je     c001babf <int_handler+0x1f>
c001bab4:	fa                   	cli    
c001bab5:	f4                   	hlt    
c001bab6:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001babd:	75 f5                	jne    c001bab4 <int_handler+0x14>
c001babf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001bac2:	8d 46 e0             	lea    eax,[esi-0x20]
c001bac5:	83 f8 17             	cmp    eax,0x17
c001bac8:	76 40                	jbe    c001bb0a <int_handler+0x6a>
c001baca:	c1 e6 04             	shl    esi,0x4
c001bacd:	31 db                	xor    ebx,ebx
c001bacf:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001bad5:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001badb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001badf:	85 c0                	test   eax,eax
c001bae1:	74 13                	je     c001baf6 <int_handler+0x56>
c001bae3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001bae7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001baea:	74 2c                	je     c001bb18 <int_handler+0x78>
c001baec:	83 ec 08             	sub    esp,0x8
c001baef:	52                   	push   edx
c001baf0:	57                   	push   edi
c001baf1:	ff d0                	call   eax
c001baf3:	83 c4 10             	add    esp,0x10
c001baf6:	83 c3 01             	add    ebx,0x1
c001baf9:	83 fb 04             	cmp    ebx,0x4
c001bafc:	75 dd                	jne    c001badb <int_handler+0x3b>
c001bafe:	83 c4 0c             	add    esp,0xc
c001bb01:	31 c0                	xor    eax,eax
c001bb03:	5b                   	pop    ebx
c001bb04:	31 d2                	xor    edx,edx
c001bb06:	5e                   	pop    esi
c001bb07:	5f                   	pop    edi
c001bb08:	5d                   	pop    ebp
c001bb09:	c3                   	ret    
c001bb0a:	83 ec 0c             	sub    esp,0xc
c001bb0d:	50                   	push   eax
c001bb0e:	e8 3b ba 00 00       	call   c002754e <HalEndOfInterrupt(int)>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	eb b2                	jmp    c001baca <int_handler+0x2a>
c001bb18:	83 ec 08             	sub    esp,0x8
c001bb1b:	52                   	push   edx
c001bb1c:	57                   	push   edi
c001bb1d:	ff d0                	call   eax
c001bb1f:	83 c4 10             	add    esp,0x10
c001bb22:	83 c4 0c             	add    esp,0xc
c001bb25:	5b                   	pop    ebx
c001bb26:	5e                   	pop    esi
c001bb27:	5f                   	pop    edi
c001bb28:	5d                   	pop    ebp
c001bb29:	c3                   	ret    

c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001bb2a:	56                   	push   esi
c001bb2b:	31 c0                	xor    eax,eax
c001bb2d:	53                   	push   ebx
c001bb2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb36:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bb3a:	89 ca                	mov    edx,ecx
c001bb3c:	c1 e2 04             	shl    edx,0x4
c001bb3f:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001bb47:	74 17                	je     c001bb60 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001bb49:	83 c0 01             	add    eax,0x1
c001bb4c:	83 f8 04             	cmp    eax,0x4
c001bb4f:	75 ee                	jne    c001bb3f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bb51:	c7 44 24 0c b0 23 03 c0 	mov    DWORD PTR [esp+0xc],0xc00323b0
c001bb59:	5b                   	pop    ebx
c001bb5a:	5e                   	pop    esi
c001bb5b:	e9 72 49 00 00       	jmp    c00204d2 <KePanic(char const*)>
c001bb60:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bb63:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001bb6a:	5b                   	pop    ebx
c001bb6b:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001bb72:	5e                   	pop    esi
c001bb73:	c3                   	ret    

c001bb74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bb74:	55                   	push   ebp
c001bb75:	57                   	push   edi
c001bb76:	56                   	push   esi
c001bb77:	53                   	push   ebx
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bb81:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bb85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb89:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb90:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bb93:	74 57                	je     c001bbec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bb95:	84 c0                	test   al,al
c001bb97:	89 c7                	mov    edi,eax
c001bb99:	74 1d                	je     c001bbb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001bb9b:	83 fe 0f             	cmp    esi,0xf
c001bb9e:	0f 8f d9 00 00 00    	jg     c001bc7d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001bba4:	0f b6 b6 e8 3f 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc018]
c001bbab:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001bbb3:	d1 ef                	shr    edi,1
c001bbb5:	83 e7 01             	and    edi,0x1
c001bbb8:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bbbd:	83 ec 08             	sub    esp,0x8
c001bbc0:	31 db                	xor    ebx,ebx
c001bbc2:	50                   	push   eax
c001bbc3:	68 bd 23 03 c0       	push   0xc00323bd
c001bbc8:	e8 7d d9 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001bbcd:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bbd2:	83 c4 10             	add    esp,0x10
c001bbd5:	85 c0                	test   eax,eax
c001bbd7:	7f 59                	jg     c001bc32 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001bbd9:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bbdc:	83 ec 0c             	sub    esp,0xc
c001bbdf:	68 d4 23 03 c0       	push   0xc00323d4
c001bbe4:	e8 e9 48 00 00       	call   c00204d2 <KePanic(char const*)>
c001bbe9:	83 c4 10             	add    esp,0x10
c001bbec:	89 e8                	mov    eax,ebp
c001bbee:	31 d2                	xor    edx,edx
c001bbf0:	c1 e0 04             	shl    eax,0x4
c001bbf3:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001bbfa:	85 c9                	test   ecx,ecx
c001bbfc:	0f 84 92 00 00 00    	je     c001bc94 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001bc02:	83 c2 01             	add    edx,0x1
c001bc05:	83 fa 04             	cmp    edx,0x4
c001bc08:	75 e9                	jne    c001bbf3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001bc0a:	83 ec 0c             	sub    esp,0xc
c001bc0d:	68 28 24 03 c0       	push   0xc0032428
c001bc12:	e8 bb 48 00 00       	call   c00204d2 <KePanic(char const*)>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc1f:	83 c4 0c             	add    esp,0xc
c001bc22:	5b                   	pop    ebx
c001bc23:	5e                   	pop    esi
c001bc24:	5f                   	pop    edi
c001bc25:	5d                   	pop    ebp
c001bc26:	c3                   	ret    
c001bc27:	83 c3 01             	add    ebx,0x1
c001bc2a:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001bc30:	7e a7                	jle    c001bbd9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001bc32:	8b 2c 9d e0 0b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbf420]
c001bc39:	83 ec 08             	sub    esp,0x8
c001bc3c:	56                   	push   esi
c001bc3d:	55                   	push   ebp
c001bc3e:	e8 4b 21 01 00       	call   c002dd8e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bc43:	83 c4 10             	add    esp,0x10
c001bc46:	84 c0                	test   al,al
c001bc48:	74 dd                	je     c001bc27 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bc4a:	89 f8                	mov    eax,edi
c001bc4c:	83 ec 04             	sub    esp,0x4
c001bc4f:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001bc56:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bc59:	0f b6 f8             	movzx  edi,al
c001bc5c:	57                   	push   edi
c001bc5d:	89 e8                	mov    eax,ebp
c001bc5f:	6a 00                	push   0x0
c001bc61:	0f b6 c0             	movzx  eax,al
c001bc64:	50                   	push   eax
c001bc65:	89 f0                	mov    eax,esi
c001bc67:	6a 00                	push   0x0
c001bc69:	0f b6 c0             	movzx  eax,al
c001bc6c:	6a 00                	push   0x0
c001bc6e:	50                   	push   eax
c001bc6f:	53                   	push   ebx
c001bc70:	e8 85 22 01 00       	call   c002defa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bc75:	83 c4 20             	add    esp,0x20
c001bc78:	e9 6f ff ff ff       	jmp    c001bbec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bc7d:	83 ec 0c             	sub    esp,0xc
c001bc80:	31 ff                	xor    edi,edi
c001bc82:	68 f0 23 03 c0       	push   0xc00323f0
c001bc87:	e8 46 48 00 00       	call   c00204d2 <KePanic(char const*)>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	e9 24 ff ff ff       	jmp    c001bbb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001bc94:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001bc97:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc9b:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bca2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bca6:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001bcad:	83 c4 0c             	add    esp,0xc
c001bcb0:	89 f0                	mov    eax,esi
c001bcb2:	5b                   	pop    ebx
c001bcb3:	5e                   	pop    esi
c001bcb4:	5f                   	pop    edi
c001bcb5:	5d                   	pop    ebp
c001bcb6:	c3                   	ret    

c001bcb7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bcb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bcbf:	c1 e0 04             	shl    eax,0x4
c001bcc2:	8d 50 10             	lea    edx,[eax+0x10]
c001bcc5:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001bccb:	74 08                	je     c001bcd5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bccd:	83 c0 04             	add    eax,0x4
c001bcd0:	39 d0                	cmp    eax,edx
c001bcd2:	75 f1                	jne    c001bcc5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bcd4:	c3                   	ret    
c001bcd5:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bcdf:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bce9:	eb e2                	jmp    c001bccd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bceb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bceb:	56                   	push   esi
c001bcec:	53                   	push   ebx
c001bced:	83 ec 04             	sub    esp,0x4
c001bcf0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bcf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bcfd:	74 0e                	je     c001bd0d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001bcff:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001bd04:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bd0b:	75 34                	jne    c001bd41 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001bd0d:	8d 43 20             	lea    eax,[ebx+0x20]
c001bd10:	c1 e0 04             	shl    eax,0x4
c001bd13:	8d 50 10             	lea    edx,[eax+0x10]
c001bd16:	39 b0 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],esi
c001bd1c:	74 0d                	je     c001bd2b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001bd1e:	83 c0 04             	add    eax,0x4
c001bd21:	39 d0                	cmp    eax,edx
c001bd23:	75 f1                	jne    c001bd16 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001bd25:	83 c4 04             	add    esp,0x4
c001bd28:	5b                   	pop    ebx
c001bd29:	5e                   	pop    esi
c001bd2a:	c3                   	ret    
c001bd2b:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd35:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bd3f:	eb dd                	jmp    c001bd1e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001bd41:	83 fb 0f             	cmp    ebx,0xf
c001bd44:	7f 09                	jg     c001bd4f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001bd46:	0f b6 9b e8 3f 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcc018]
c001bd4d:	eb be                	jmp    c001bd0d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	68 e1 23 03 c0       	push   0xc00323e1
c001bd57:	e8 76 47 00 00       	call   c00204d2 <KePanic(char const*)>
c001bd5c:	83 c4 10             	add    esp,0x10
c001bd5f:	eb ac                	jmp    c001bd0d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001bd61 <setupINTS()>:
c001bd61:	31 c0                	xor    eax,eax
c001bd63:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd6d:	83 c0 10             	add    eax,0x10
c001bd70:	c7 80 10 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30f0],0x0
c001bd7a:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001bd84:	c7 80 14 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30ec],0x0
c001bd8e:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001bd98:	c7 80 18 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e8],0x0
c001bda2:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001bdac:	c7 80 1c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e4],0x0
c001bdb6:	3d 00 10 00 00       	cmp    eax,0x1000
c001bdbb:	75 a6                	jne    c001bd63 <setupINTS()+0x2>
c001bdbd:	c3                   	ret    

c001bdbe <convertLegacyIRQNumber(int)>:
c001bdbe:	83 ec 0c             	sub    esp,0xc
c001bdc1:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bdc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdcb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bdd2:	74 0c                	je     c001bde0 <convertLegacyIRQNumber(int)+0x22>
c001bdd4:	83 f8 0f             	cmp    eax,0xf
c001bdd7:	7f 0b                	jg     c001bde4 <convertLegacyIRQNumber(int)+0x26>
c001bdd9:	0f b6 80 e8 3f 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc018]
c001bde0:	83 c4 0c             	add    esp,0xc
c001bde3:	c3                   	ret    
c001bde4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bde8:	83 ec 0c             	sub    esp,0xc
c001bdeb:	68 f0 23 03 c0       	push   0xc00323f0
c001bdf0:	e8 dd 46 00 00       	call   c00204d2 <KePanic(char const*)>
c001bdf5:	83 c4 10             	add    esp,0x10
c001bdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfc:	83 c4 0c             	add    esp,0xc
c001bdff:	c3                   	ret    

c001be00 <startGUI(void*)>:
c001be00:	55                   	push   ebp
c001be01:	89 e5                	mov    ebp,esp
c001be03:	53                   	push   ebx
c001be04:	83 ec 04             	sub    esp,0x4
c001be07:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be0c:	83 e8 01             	sub    eax,0x1
c001be0f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001be14:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be19:	85 c0                	test   eax,eax
c001be1b:	75 01                	jne    c001be1e <startGUI(void*)+0x1e>
c001be1d:	fb                   	sti    
c001be1e:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001be24:	83 ec 08             	sub    esp,0x8
c001be27:	6a 01                	push   0x1
c001be29:	68 4d 24 03 c0       	push   0xc003244d
c001be2e:	e8 70 8c 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c001be33:	83 c4 10             	add    esp,0x10
c001be36:	83 ec 08             	sub    esp,0x8
c001be39:	53                   	push   ebx
c001be3a:	50                   	push   eax
c001be3b:	e8 c4 8e 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001be40:	83 c4 10             	add    esp,0x10
c001be43:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001be49:	83 ec 08             	sub    esp,0x8
c001be4c:	6a 01                	push   0x1
c001be4e:	68 67 24 03 c0       	push   0xc0032467
c001be53:	e8 4b 8c 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c001be58:	83 c4 10             	add    esp,0x10
c001be5b:	83 ec 08             	sub    esp,0x8
c001be5e:	53                   	push   ebx
c001be5f:	50                   	push   eax
c001be60:	e8 9f 8e 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001be65:	83 c4 10             	add    esp,0x10
c001be68:	eb fe                	jmp    c001be68 <startGUI(void*)+0x68>

c001be6a <startGUIVESA(void*)>:
c001be6a:	55                   	push   ebp
c001be6b:	89 e5                	mov    ebp,esp
c001be6d:	53                   	push   ebx
c001be6e:	83 ec 04             	sub    esp,0x4
c001be71:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be76:	83 e8 01             	sub    eax,0x1
c001be79:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001be7e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be83:	85 c0                	test   eax,eax
c001be85:	75 01                	jne    c001be88 <startGUIVESA(void*)+0x1e>
c001be87:	fb                   	sti    
c001be88:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001be8e:	83 ec 08             	sub    esp,0x8
c001be91:	6a 01                	push   0x1
c001be93:	68 85 24 03 c0       	push   0xc0032485
c001be98:	e8 06 8c 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c001be9d:	83 c4 10             	add    esp,0x10
c001bea0:	83 ec 08             	sub    esp,0x8
c001bea3:	53                   	push   ebx
c001bea4:	50                   	push   eax
c001bea5:	e8 5a 8e 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001beaa:	83 c4 10             	add    esp,0x10
c001bead:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001beb3:	83 ec 08             	sub    esp,0x8
c001beb6:	6a 01                	push   0x1
c001beb8:	68 67 24 03 c0       	push   0xc0032467
c001bebd:	e8 e1 8b 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c001bec2:	83 c4 10             	add    esp,0x10
c001bec5:	83 ec 08             	sub    esp,0x8
c001bec8:	53                   	push   ebx
c001bec9:	50                   	push   eax
c001beca:	e8 35 8e 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001becf:	83 c4 10             	add    esp,0x10
c001bed2:	eb fe                	jmp    c001bed2 <startGUIVESA(void*)+0x68>

c001bed4 <sendKeyToTerminal(unsigned char)>:
c001bed4:	55                   	push   ebp
c001bed5:	89 e5                	mov    ebp,esp
c001bed7:	83 ec 28             	sub    esp,0x28
c001beda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bedd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bee0:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bee5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bee9:	83 ec 08             	sub    esp,0x8
c001beec:	52                   	push   edx
c001beed:	50                   	push   eax
c001beee:	e8 09 bb ff ff       	call   c00179fc <VgaText::receiveKey(unsigned char)>
c001bef3:	83 c4 10             	add    esp,0x10
c001bef6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001befa:	83 f8 0a             	cmp    eax,0xa
c001befd:	74 16                	je     c001bf15 <sendKeyToTerminal(unsigned char)+0x41>
c001beff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf03:	83 f8 03             	cmp    eax,0x3
c001bf06:	74 0d                	je     c001bf15 <sendKeyToTerminal(unsigned char)+0x41>
c001bf08:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf0c:	83 f8 1c             	cmp    eax,0x1c
c001bf0f:	0f 85 97 00 00 00    	jne    c001bfac <sendKeyToTerminal(unsigned char)+0xd8>
c001bf15:	fa                   	cli    
c001bf16:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bf1b:	83 c0 01             	add    eax,0x1
c001bf1e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bf23:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bf28:	83 c0 01             	add    eax,0x1
c001bf2b:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bf30:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bf35:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf38:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bf42:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bf46:	74 1f                	je     c001bf67 <sendKeyToTerminal(unsigned char)+0x93>
c001bf48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bf4b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bf51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf57:	83 ec 0c             	sub    esp,0xc
c001bf5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bf5d:	e8 be 98 00 00       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c001bf62:	83 c4 10             	add    esp,0x10
c001bf65:	eb db                	jmp    c001bf42 <sendKeyToTerminal(unsigned char)+0x6e>
c001bf67:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bf6c:	83 e8 01             	sub    eax,0x1
c001bf6f:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bf74:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bf79:	85 c0                	test   eax,eax
c001bf7b:	75 18                	jne    c001bf95 <sendKeyToTerminal(unsigned char)+0xc1>
c001bf7d:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bf82:	85 c0                	test   eax,eax
c001bf84:	74 0f                	je     c001bf95 <sendKeyToTerminal(unsigned char)+0xc1>
c001bf86:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bf90:	e8 9f 95 00 00       	call   c0025534 <schedule()>
c001bf95:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bf9a:	83 e8 01             	sub    eax,0x1
c001bf9d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bfa2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bfa7:	85 c0                	test   eax,eax
c001bfa9:	75 01                	jne    c001bfac <sendKeyToTerminal(unsigned char)+0xd8>
c001bfab:	fb                   	sti    
c001bfac:	90                   	nop
c001bfad:	c9                   	leave  
c001bfae:	c3                   	ret    

c001bfaf <sendKeyboardToken(KeyboardToken)>:
c001bfaf:	55                   	push   ebp
c001bfb0:	89 e5                	mov    ebp,esp
c001bfb2:	83 ec 18             	sub    esp,0x18
c001bfb5:	e8 68 45 00 00       	call   c0020522 <KeUserIOReceived()>
c001bfba:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bfbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfc0:	0f b7 c0             	movzx  eax,ax
c001bfc3:	83 f2 01             	xor    edx,0x1
c001bfc6:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bfcc:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bfd1:	85 c0                	test   eax,eax
c001bfd3:	74 24                	je     c001bff9 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bfd5:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001bfdb:	83 ec 04             	sub    esp,0x4
c001bfde:	68 40 ef 03 c0       	push   0xc003ef40
c001bfe3:	83 ec 08             	sub    esp,0x8
c001bfe6:	89 e0                	mov    eax,esp
c001bfe8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bfeb:	89 08                	mov    DWORD PTR [eax],ecx
c001bfed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bff0:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001bff4:	ff d2                	call   edx
c001bff6:	83 c4 10             	add    esp,0x10
c001bff9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bffd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001c000:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001c005:	0f b6 d2             	movzx  edx,dl
c001c008:	0f b6 c0             	movzx  eax,al
c001c00b:	39 c2                	cmp    edx,eax
c001c00d:	74 1c                	je     c001c02b <sendKeyboardToken(KeyboardToken)+0x7c>
c001c00f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001c012:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001c017:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001c01c:	0f b6 c0             	movzx  eax,al
c001c01f:	83 ec 0c             	sub    esp,0xc
c001c022:	50                   	push   eax
c001c023:	e8 30 b1 ff ff       	call   c0017158 <setTerminalScrollLock(bool)>
c001c028:	83 c4 10             	add    esp,0x10
c001c02b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001c02e:	0f b6 c0             	movzx  eax,al
c001c031:	85 c0                	test   eax,eax
c001c033:	0f 84 da 00 00 00    	je     c001c113 <sendKeyboardToken(KeyboardToken)+0x164>
c001c039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c03c:	0f b7 c0             	movzx  eax,ax
c001c03f:	3d 18 03 00 00       	cmp    eax,0x318
c001c044:	75 06                	jne    c001c04c <sendKeyboardToken(KeyboardToken)+0x9d>
c001c046:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001c04c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c04f:	0f b7 c0             	movzx  eax,ax
c001c052:	3d 19 03 00 00       	cmp    eax,0x319
c001c057:	75 06                	jne    c001c05f <sendKeyboardToken(KeyboardToken)+0xb0>
c001c059:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001c05f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c062:	0f b7 c0             	movzx  eax,ax
c001c065:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c06a:	75 06                	jne    c001c072 <sendKeyboardToken(KeyboardToken)+0xc3>
c001c06c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001c072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c075:	0f b7 c0             	movzx  eax,ax
c001c078:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c07d:	75 06                	jne    c001c085 <sendKeyboardToken(KeyboardToken)+0xd6>
c001c07f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001c085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c088:	0f b7 c0             	movzx  eax,ax
c001c08b:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c090:	75 06                	jne    c001c098 <sendKeyboardToken(KeyboardToken)+0xe9>
c001c092:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001c098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c09b:	0f b7 c0             	movzx  eax,ax
c001c09e:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c0a3:	75 06                	jne    c001c0ab <sendKeyboardToken(KeyboardToken)+0xfc>
c001c0a5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c0ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ae:	0f b7 c0             	movzx  eax,ax
c001c0b1:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c0b6:	75 06                	jne    c001c0be <sendKeyboardToken(KeyboardToken)+0x10f>
c001c0b8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001c0be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c1:	0f b7 c0             	movzx  eax,ax
c001c0c4:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c0c9:	75 06                	jne    c001c0d1 <sendKeyboardToken(KeyboardToken)+0x122>
c001c0cb:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001c0d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0d4:	0f b7 c0             	movzx  eax,ax
c001c0d7:	3d 20 03 00 00       	cmp    eax,0x320
c001c0dc:	75 06                	jne    c001c0e4 <sendKeyboardToken(KeyboardToken)+0x135>
c001c0de:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001c0e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0e7:	0f b7 c0             	movzx  eax,ax
c001c0ea:	3d 21 03 00 00       	cmp    eax,0x321
c001c0ef:	75 06                	jne    c001c0f7 <sendKeyboardToken(KeyboardToken)+0x148>
c001c0f1:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001c0f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0fa:	0f b7 c0             	movzx  eax,ax
c001c0fd:	3d 22 03 00 00       	cmp    eax,0x322
c001c102:	0f 85 f1 00 00 00    	jne    c001c1f9 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c108:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001c10e:	e9 e6 00 00 00       	jmp    c001c1f9 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c116:	0f b7 c0             	movzx  eax,ax
c001c119:	3d 18 03 00 00       	cmp    eax,0x318
c001c11e:	75 0a                	jne    c001c12a <sendKeyboardToken(KeyboardToken)+0x17b>
c001c120:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c126:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c12d:	0f b7 c0             	movzx  eax,ax
c001c130:	3d 19 03 00 00       	cmp    eax,0x319
c001c135:	75 0a                	jne    c001c141 <sendKeyboardToken(KeyboardToken)+0x192>
c001c137:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c13d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c144:	0f b7 c0             	movzx  eax,ax
c001c147:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c14c:	75 0a                	jne    c001c158 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c14e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c154:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c15b:	0f b7 c0             	movzx  eax,ax
c001c15e:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c163:	75 0a                	jne    c001c16f <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c165:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c16b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c172:	0f b7 c0             	movzx  eax,ax
c001c175:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c17a:	75 0a                	jne    c001c186 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c17c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c182:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c189:	0f b7 c0             	movzx  eax,ax
c001c18c:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c191:	75 0a                	jne    c001c19d <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c193:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c199:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1a0:	0f b7 c0             	movzx  eax,ax
c001c1a3:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c1a8:	75 0a                	jne    c001c1b4 <sendKeyboardToken(KeyboardToken)+0x205>
c001c1aa:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c1b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1b7:	0f b7 c0             	movzx  eax,ax
c001c1ba:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c1bf:	75 0a                	jne    c001c1cb <sendKeyboardToken(KeyboardToken)+0x21c>
c001c1c1:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c1c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ce:	0f b7 c0             	movzx  eax,ax
c001c1d1:	3d 20 03 00 00       	cmp    eax,0x320
c001c1d6:	75 0a                	jne    c001c1e2 <sendKeyboardToken(KeyboardToken)+0x233>
c001c1d8:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c1de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e5:	0f b7 c0             	movzx  eax,ax
c001c1e8:	3d 21 03 00 00       	cmp    eax,0x321
c001c1ed:	75 0a                	jne    c001c1f9 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c1ef:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c1f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1fc:	0f b7 c0             	movzx  eax,ax
c001c1ff:	3d 00 02 00 00       	cmp    eax,0x200
c001c204:	75 2f                	jne    c001c235 <sendKeyboardToken(KeyboardToken)+0x286>
c001c206:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c20b:	83 f0 01             	xor    eax,0x1
c001c20e:	0f b6 c0             	movzx  eax,al
c001c211:	85 c0                	test   eax,eax
c001c213:	74 20                	je     c001c235 <sendKeyboardToken(KeyboardToken)+0x286>
c001c215:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c21a:	6a 01                	push   0x1
c001c21c:	6a 00                	push   0x0
c001c21e:	68 00 be 01 c0       	push   0xc001be00
c001c223:	50                   	push   eax
c001c224:	e8 bf 90 00 00       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c001c229:	83 c4 10             	add    esp,0x10
c001c22c:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c233:	eb 3a                	jmp    c001c26f <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c238:	0f b7 c0             	movzx  eax,ax
c001c23b:	3d 01 02 00 00       	cmp    eax,0x201
c001c240:	75 2d                	jne    c001c26f <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c242:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c247:	83 f0 01             	xor    eax,0x1
c001c24a:	0f b6 c0             	movzx  eax,al
c001c24d:	85 c0                	test   eax,eax
c001c24f:	74 1e                	je     c001c26f <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c251:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c256:	6a 01                	push   0x1
c001c258:	6a 00                	push   0x0
c001c25a:	68 6a be 01 c0       	push   0xc001be6a
c001c25f:	50                   	push   eax
c001c260:	e8 83 90 00 00       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c001c265:	83 c4 10             	add    esp,0x10
c001c268:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c26f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c272:	0f b7 c0             	movzx  eax,ax
c001c275:	3d 25 03 00 00       	cmp    eax,0x325
c001c27a:	75 06                	jne    c001c282 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c27c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c285:	0f b7 c0             	movzx  eax,ax
c001c288:	3d 24 03 00 00       	cmp    eax,0x324
c001c28d:	75 06                	jne    c001c295 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c28f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c298:	0f b7 c0             	movzx  eax,ax
c001c29b:	3d 23 03 00 00       	cmp    eax,0x323
c001c2a0:	75 06                	jne    c001c2a8 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c2a2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2ab:	0f b7 c0             	movzx  eax,ax
c001c2ae:	3d 26 03 00 00       	cmp    eax,0x326
c001c2b3:	75 06                	jne    c001c2bb <sendKeyboardToken(KeyboardToken)+0x30c>
c001c2b5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c2bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2be:	0f b7 c0             	movzx  eax,ax
c001c2c1:	3d 27 03 00 00       	cmp    eax,0x327
c001c2c6:	75 06                	jne    c001c2ce <sendKeyboardToken(KeyboardToken)+0x31f>
c001c2c8:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c2ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2d1:	0f b7 c0             	movzx  eax,ax
c001c2d4:	3d 22 03 00 00       	cmp    eax,0x322
c001c2d9:	75 06                	jne    c001c2e1 <sendKeyboardToken(KeyboardToken)+0x332>
c001c2db:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c2e1:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c2e5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c2e8:	83 f0 01             	xor    eax,0x1
c001c2eb:	0f b6 c0             	movzx  eax,al
c001c2ee:	85 c0                	test   eax,eax
c001c2f0:	74 7c                	je     c001c36e <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c2f2:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001c2f7:	0f b6 c0             	movzx  eax,al
c001c2fa:	85 c0                	test   eax,eax
c001c2fc:	74 43                	je     c001c341 <sendKeyboardToken(KeyboardToken)+0x392>
c001c2fe:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c302:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c306:	85 c0                	test   eax,eax
c001c308:	74 2b                	je     c001c335 <sendKeyboardToken(KeyboardToken)+0x386>
c001c30a:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c310:	89 d0                	mov    eax,edx
c001c312:	c1 e0 02             	shl    eax,0x2
c001c315:	01 d0                	add    eax,edx
c001c317:	d1 e0                	shl    eax,1
c001c319:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c31e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c321:	0f b7 c0             	movzx  eax,ax
c001c324:	8d 50 d0             	lea    edx,[eax-0x30]
c001c327:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c32c:	01 d0                	add    eax,edx
c001c32e:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c333:	eb 71                	jmp    c001c3a6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c335:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c33f:	eb 65                	jmp    c001c3a6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c341:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c346:	85 c0                	test   eax,eax
c001c348:	74 18                	je     c001c362 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c34a:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c34f:	0f b6 c0             	movzx  eax,al
c001c352:	83 ec 0c             	sub    esp,0xc
c001c355:	50                   	push   eax
c001c356:	e8 79 fb ff ff       	call   c001bed4 <sendKeyToTerminal(unsigned char)>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c362:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c36c:	eb 38                	jmp    c001c3a6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c36e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c371:	0f b7 c0             	movzx  eax,ax
c001c374:	3d 01 01 00 00       	cmp    eax,0x101
c001c379:	75 2b                	jne    c001c3a6 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c37b:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c380:	85 c0                	test   eax,eax
c001c382:	74 18                	je     c001c39c <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c384:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c389:	0f b6 c0             	movzx  eax,al
c001c38c:	83 ec 0c             	sub    esp,0xc
c001c38f:	50                   	push   eax
c001c390:	e8 3f fb ff ff       	call   c001bed4 <sendKeyToTerminal(unsigned char)>
c001c395:	83 c4 10             	add    esp,0x10
c001c398:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c39c:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c3a6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c3a9:	83 f0 01             	xor    eax,0x1
c001c3ac:	0f b6 c0             	movzx  eax,al
c001c3af:	85 c0                	test   eax,eax
c001c3b1:	74 5a                	je     c001c40d <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c3b6:	83 f0 01             	xor    eax,0x1
c001c3b9:	0f b6 c0             	movzx  eax,al
c001c3bc:	85 c0                	test   eax,eax
c001c3be:	74 4d                	je     c001c40d <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3c0:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c3c5:	83 f0 01             	xor    eax,0x1
c001c3c8:	0f b6 c0             	movzx  eax,al
c001c3cb:	85 c0                	test   eax,eax
c001c3cd:	74 3e                	je     c001c40d <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3d2:	0f b7 c0             	movzx  eax,ax
c001c3d5:	83 f8 1f             	cmp    eax,0x1f
c001c3d8:	76 0b                	jbe    c001c3e5 <sendKeyboardToken(KeyboardToken)+0x436>
c001c3da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3dd:	0f b7 c0             	movzx  eax,ax
c001c3e0:	83 f8 7e             	cmp    eax,0x7e
c001c3e3:	76 16                	jbe    c001c3fb <sendKeyboardToken(KeyboardToken)+0x44c>
c001c3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3e8:	0f b7 c0             	movzx  eax,ax
c001c3eb:	83 f8 0a             	cmp    eax,0xa
c001c3ee:	74 0b                	je     c001c3fb <sendKeyboardToken(KeyboardToken)+0x44c>
c001c3f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3f3:	0f b7 c0             	movzx  eax,ax
c001c3f6:	83 f8 08             	cmp    eax,0x8
c001c3f9:	75 12                	jne    c001c40d <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3fe:	0f b6 c0             	movzx  eax,al
c001c401:	83 ec 0c             	sub    esp,0xc
c001c404:	50                   	push   eax
c001c405:	e8 ca fa ff ff       	call   c001bed4 <sendKeyToTerminal(unsigned char)>
c001c40a:	83 c4 10             	add    esp,0x10
c001c40d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c410:	83 f0 01             	xor    eax,0x1
c001c413:	0f b6 c0             	movzx  eax,al
c001c416:	85 c0                	test   eax,eax
c001c418:	74 5d                	je     c001c477 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c41a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c41d:	83 f0 01             	xor    eax,0x1
c001c420:	0f b6 c0             	movzx  eax,al
c001c423:	85 c0                	test   eax,eax
c001c425:	74 50                	je     c001c477 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c427:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c42c:	0f b6 c0             	movzx  eax,al
c001c42f:	85 c0                	test   eax,eax
c001c431:	74 44                	je     c001c477 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c436:	0f b7 c0             	movzx  eax,ax
c001c439:	83 f8 3f             	cmp    eax,0x3f
c001c43c:	76 39                	jbe    c001c477 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c43e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c441:	0f b7 c0             	movzx  eax,ax
c001c444:	83 f8 7f             	cmp    eax,0x7f
c001c447:	77 2e                	ja     c001c477 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c44c:	88 c2                	mov    dl,al
c001c44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c451:	0f b7 c0             	movzx  eax,ax
c001c454:	83 f8 5f             	cmp    eax,0x5f
c001c457:	76 04                	jbe    c001c45d <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c459:	b0 20                	mov    al,0x20
c001c45b:	eb 02                	jmp    c001c45f <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c45d:	b0 00                	mov    al,0x0
c001c45f:	89 d1                	mov    ecx,edx
c001c461:	29 c1                	sub    ecx,eax
c001c463:	89 c8                	mov    eax,ecx
c001c465:	83 e8 40             	sub    eax,0x40
c001c468:	0f b6 c0             	movzx  eax,al
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	50                   	push   eax
c001c46f:	e8 60 fa ff ff       	call   c001bed4 <sendKeyToTerminal(unsigned char)>
c001c474:	83 c4 10             	add    esp,0x10
c001c477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c47a:	0f b7 c0             	movzx  eax,ax
c001c47d:	3d 00 03 00 00       	cmp    eax,0x300
c001c482:	75 12                	jne    c001c496 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c484:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c487:	83 f0 01             	xor    eax,0x1
c001c48a:	0f b6 c0             	movzx  eax,al
c001c48d:	85 c0                	test   eax,eax
c001c48f:	74 05                	je     c001c496 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c491:	e8 c3 ac ff ff       	call   c0017159 <doTerminalCycle()>
c001c496:	90                   	nop
c001c497:	c9                   	leave  
c001c498:	c3                   	ret    

c001c499 <clearInternalKeybuffer(VgaText*)>:
c001c499:	55                   	push   ebp
c001c49a:	89 e5                	mov    ebp,esp
c001c49c:	83 ec 08             	sub    esp,0x8
c001c49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4a2:	05 02 01 00 00       	add    eax,0x102
c001c4a7:	83 ec 0c             	sub    esp,0xc
c001c4aa:	50                   	push   eax
c001c4ab:	e8 d0 40 fe ff       	call   c0000580 <strlen>
c001c4b0:	83 c4 10             	add    esp,0x10
c001c4b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4b6:	81 c2 02 01 00 00    	add    edx,0x102
c001c4bc:	83 ec 04             	sub    esp,0x4
c001c4bf:	50                   	push   eax
c001c4c0:	6a 00                	push   0x0
c001c4c2:	52                   	push   edx
c001c4c3:	e8 28 40 fe ff       	call   c00004f0 <memset>
c001c4c8:	83 c4 10             	add    esp,0x10
c001c4cb:	90                   	nop
c001c4cc:	c9                   	leave  
c001c4cd:	c3                   	ret    

c001c4ce <readKeyboard(VgaText*, char*, unsigned long)>:
c001c4ce:	55                   	push   ebp
c001c4cf:	89 e5                	mov    ebp,esp
c001c4d1:	83 ec 18             	sub    esp,0x18
c001c4d4:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c4d9:	85 c0                	test   eax,eax
c001c4db:	74 2a                	je     c001c507 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c4dd:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c4e3:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c4e9:	83 ec 04             	sub    esp,0x4
c001c4ec:	68 40 ef 03 c0       	push   0xc003ef40
c001c4f1:	83 ec 08             	sub    esp,0x8
c001c4f4:	89 e0                	mov    eax,esp
c001c4f6:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c4f9:	89 08                	mov    DWORD PTR [eax],ecx
c001c4fb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c4fe:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c502:	ff d2                	call   edx
c001c504:	83 c4 10             	add    esp,0x10
c001c507:	fb                   	sti    
c001c508:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c50f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c513:	0f 84 0d 01 00 00    	je     c001c626 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c51c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c522:	0f be c0             	movsx  eax,al
c001c525:	85 c0                	test   eax,eax
c001c527:	75 2c                	jne    c001c555 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c529:	fa                   	cli    
c001c52a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c52f:	83 c0 01             	add    eax,0x1
c001c532:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c537:	e8 f8 8f 00 00       	call   c0025534 <schedule()>
c001c53c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c541:	83 e8 01             	sub    eax,0x1
c001c544:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c549:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c54e:	85 c0                	test   eax,eax
c001c550:	75 c7                	jne    c001c519 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c552:	fb                   	sti    
c001c553:	eb c4                	jmp    c001c519 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c555:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c558:	8d 50 01             	lea    edx,[eax+0x1]
c001c55b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c55e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c561:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c567:	88 10                	mov    BYTE PTR [eax],dl
c001c569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c56c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c572:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c575:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c579:	83 f8 03             	cmp    eax,0x3
c001c57c:	75 1e                	jne    c001c59c <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c57e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c583:	8b 00                	mov    eax,DWORD PTR [eax]
c001c585:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c588:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c58e:	83 ec 08             	sub    esp,0x8
c001c591:	6a 02                	push   0x2
c001c593:	50                   	push   eax
c001c594:	e8 eb 47 00 00       	call   c0020d84 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c599:	83 c4 10             	add    esp,0x10
c001c59c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c5a0:	83 f8 1c             	cmp    eax,0x1c
c001c5a3:	75 1e                	jne    c001c5c3 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c5a5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c5aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c5af:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c5b5:	83 ec 08             	sub    esp,0x8
c001c5b8:	6a 09                	push   0x9
c001c5ba:	50                   	push   eax
c001c5bb:	e8 c4 47 00 00       	call   c0020d84 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c5c6:	05 02 01 00 00       	add    eax,0x102
c001c5cb:	83 ec 0c             	sub    esp,0xc
c001c5ce:	50                   	push   eax
c001c5cf:	e8 ac 3f fe ff       	call   c0000580 <strlen>
c001c5d4:	83 c4 10             	add    esp,0x10
c001c5d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c5da:	81 c2 02 01 00 00    	add    edx,0x102
c001c5e0:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c5e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c5e6:	81 c2 02 01 00 00    	add    edx,0x102
c001c5ec:	83 ec 04             	sub    esp,0x4
c001c5ef:	50                   	push   eax
c001c5f0:	51                   	push   ecx
c001c5f1:	52                   	push   edx
c001c5f2:	e8 d9 3d fe ff       	call   c00003d0 <memmove>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c5fe:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c602:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c606:	83 f8 0a             	cmp    eax,0xa
c001c609:	74 16                	je     c001c621 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c60b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c60f:	83 f8 03             	cmp    eax,0x3
c001c612:	74 0d                	je     c001c621 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c614:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c618:	83 f8 1c             	cmp    eax,0x1c
c001c61b:	0f 85 ee fe ff ff    	jne    c001c50f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c621:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c624:	eb 03                	jmp    c001c629 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c626:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c629:	c9                   	leave  
c001c62a:	c3                   	ret    
c001c62b:	90                   	nop

c001c62c <Keyboard::Keyboard(char const*)>:
c001c62c:	83 ec 0c             	sub    esp,0xc
c001c62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c633:	83 ec 08             	sub    esp,0x8
c001c636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c63a:	50                   	push   eax
c001c63b:	e8 02 f1 ff ff       	call   c001b742 <Device::Device(char const*)>
c001c640:	83 c4 10             	add    esp,0x10
c001c643:	ba a8 24 03 c0       	mov    edx,0xc00324a8
c001c648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64c:	89 10                	mov    DWORD PTR [eax],edx
c001c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c652:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c65c:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c663:	90                   	nop
c001c664:	83 c4 0c             	add    esp,0xc
c001c667:	c3                   	ret    

c001c668 <Keyboard::~Keyboard()>:
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	ba a8 24 03 c0       	mov    edx,0xc00324a8
c001c670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c674:	89 10                	mov    DWORD PTR [eax],edx
c001c676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67a:	83 ec 0c             	sub    esp,0xc
c001c67d:	50                   	push   eax
c001c67e:	e8 5f ee ff ff       	call   c001b4e2 <Device::~Device()>
c001c683:	83 c4 10             	add    esp,0x10
c001c686:	90                   	nop
c001c687:	83 c4 0c             	add    esp,0xc
c001c68a:	c3                   	ret    
c001c68b:	90                   	nop

c001c68c <Keyboard::~Keyboard()>:
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	83 ec 0c             	sub    esp,0xc
c001c692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c696:	e8 cd ff ff ff       	call   c001c668 <Keyboard::~Keyboard()>
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	83 ec 08             	sub    esp,0x8
c001c6a1:	68 5c 01 00 00       	push   0x15c
c001c6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6aa:	e8 9d cd ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	83 c4 0c             	add    esp,0xc
c001c6b5:	c3                   	ret    

c001c6b6 <LogicalDisk::close(int, int, void*)>:
c001c6b6:	83 c8 ff             	or     eax,0xffffffff
c001c6b9:	c3                   	ret    

c001c6ba <LogicalDisk::~LogicalDisk()>:
c001c6ba:	83 ec 0c             	sub    esp,0xc
c001c6bd:	ba 20 25 03 c0       	mov    edx,0xc0032520
c001c6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c6:	89 10                	mov    DWORD PTR [eax],edx
c001c6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6cc:	83 ec 0c             	sub    esp,0xc
c001c6cf:	50                   	push   eax
c001c6d0:	e8 0d ee ff ff       	call   c001b4e2 <Device::~Device()>
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	90                   	nop
c001c6d9:	83 c4 0c             	add    esp,0xc
c001c6dc:	c3                   	ret    
c001c6dd:	90                   	nop

c001c6de <LogicalDisk::~LogicalDisk()>:
c001c6de:	83 ec 0c             	sub    esp,0xc
c001c6e1:	83 ec 0c             	sub    esp,0xc
c001c6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6e8:	e8 cd ff ff ff       	call   c001c6ba <LogicalDisk::~LogicalDisk()>
c001c6ed:	83 c4 10             	add    esp,0x10
c001c6f0:	83 ec 08             	sub    esp,0x8
c001c6f3:	68 78 01 00 00       	push   0x178
c001c6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6fc:	e8 4b cd ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001c701:	83 c4 10             	add    esp,0x10
c001c704:	83 c4 0c             	add    esp,0xc
c001c707:	c3                   	ret    

c001c708 <LogicalDisk::open(int, int, void*)>:
c001c708:	83 ec 18             	sub    esp,0x18
c001c70b:	68 d4 24 03 c0       	push   0xc00324d4
c001c710:	e8 bd 3d 00 00       	call   c00204d2 <KePanic(char const*)>
c001c715:	83 c8 ff             	or     eax,0xffffffff
c001c718:	83 c4 1c             	add    esp,0x1c
c001c71b:	c3                   	ret    

c001c71c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c71c:	53                   	push   ebx
c001c71d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c725:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c729:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c72f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c735:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c73b:	77 10                	ja     c001c74d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c73d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c743:	89 d3                	mov    ebx,edx
c001c745:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c74b:	72 05                	jb     c001c752 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c74d:	83 c8 ff             	or     eax,0xffffffff
c001c750:	89 c2                	mov    edx,eax
c001c752:	5b                   	pop    ebx
c001c753:	c3                   	ret    

c001c754 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c754:	56                   	push   esi
c001c755:	83 c8 ff             	or     eax,0xffffffff
c001c758:	53                   	push   ebx
c001c759:	89 c2                	mov    edx,eax
c001c75b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c75f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c763:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c767:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c76d:	77 27                	ja     c001c796 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c76f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c775:	89 d8                	mov    eax,ebx
c001c777:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c77d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c782:	89 c2                	mov    edx,eax
c001c784:	73 10                	jae    c001c796 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c786:	89 c8                	mov    eax,ecx
c001c788:	89 da                	mov    edx,ebx
c001c78a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c790:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c796:	5b                   	pop    ebx
c001c797:	5e                   	pop    esi
c001c798:	c3                   	ret    
c001c799:	90                   	nop

c001c79a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c79a:	83 ec 1c             	sub    esp,0x1c
c001c79d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c7a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c7a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7c0:	83 ec 08             	sub    esp,0x8
c001c7c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7c7:	50                   	push   eax
c001c7c8:	e8 75 ef ff ff       	call   c001b742 <Device::Device(char const*)>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	ba 20 25 03 c0       	mov    edx,0xc0032520
c001c7d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7d9:	89 10                	mov    DWORD PTR [eax],edx
c001c7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7df:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7ea:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c7f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7f5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c800:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c80a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c80e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c812:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c816:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c81c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c826:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c829:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c82d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c833:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c83d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c841:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c84b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c855:	90                   	nop
c001c856:	83 c4 1c             	add    esp,0x1c
c001c859:	c3                   	ret    

c001c85a <LogicalDisk::assignDriveLetter()>:
c001c85a:	55                   	push   ebp
c001c85b:	57                   	push   edi
c001c85c:	56                   	push   esi
c001c85d:	53                   	push   ebx
c001c85e:	83 ec 14             	sub    esp,0x14
c001c861:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c865:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c86b:	b0 41                	mov    al,0x41
c001c86d:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c873:	84 d2                	test   dl,dl
c001c875:	75 02                	jne    c001c879 <LogicalDisk::assignDriveLetter()+0x1f>
c001c877:	b0 43                	mov    al,0x43
c001c879:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c87f:	0f b6 ca             	movzx  ecx,dl
c001c882:	0f be e8             	movsx  ebp,al
c001c885:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c889:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c88d:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c893:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c897:	3c 43                	cmp    al,0x43
c001c899:	75 10                	jne    c001c8ab <LogicalDisk::assignDriveLetter()+0x51>
c001c89b:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c8a2:	75 5a                	jne    c001c8fe <LogicalDisk::assignDriveLetter()+0xa4>
c001c8a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c8a9:	75 53                	jne    c001c8fe <LogicalDisk::assignDriveLetter()+0xa4>
c001c8ab:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c8ae:	ba 01 00 00 00       	mov    edx,0x1
c001c8b3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8b6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c8b9:	d3 e2                	shl    edx,cl
c001c8bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8bf:	89 d7                	mov    edi,edx
c001c8c1:	89 d6                	mov    esi,edx
c001c8c3:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c8c7:	c1 ff 1f             	sar    edi,0x1f
c001c8ca:	21 f9                	and    ecx,edi
c001c8cc:	09 d1                	or     ecx,edx
c001c8ce:	75 2e                	jne    c001c8fe <LogicalDisk::assignDriveLetter()+0xa4>
c001c8d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8d4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c8d8:	09 f2                	or     edx,esi
c001c8da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c8dd:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c8e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c8e7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c8ed:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c8f4:	09 fa                	or     edx,edi
c001c8f6:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c8fc:	eb 0d                	jmp    c001c90b <LogicalDisk::assignDriveLetter()+0xb1>
c001c8fe:	8d 50 01             	lea    edx,[eax+0x1]
c001c901:	45                   	inc    ebp
c001c902:	80 fa 5b             	cmp    dl,0x5b
c001c905:	88 d0                	mov    al,dl
c001c907:	75 8e                	jne    c001c897 <LogicalDisk::assignDriveLetter()+0x3d>
c001c909:	31 c0                	xor    eax,eax
c001c90b:	83 c4 14             	add    esp,0x14
c001c90e:	5b                   	pop    ebx
c001c90f:	5e                   	pop    esi
c001c910:	5f                   	pop    edi
c001c911:	5d                   	pop    ebp
c001c912:	c3                   	ret    
c001c913:	90                   	nop

c001c914 <LogicalDisk::mount()>:
c001c914:	56                   	push   esi
c001c915:	53                   	push   ebx
c001c916:	53                   	push   ebx
c001c917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c91b:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c921:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c92b:	85 db                	test   ebx,ebx
c001c92d:	74 27                	je     c001c956 <LogicalDisk::mount()+0x42>
c001c92f:	51                   	push   ecx
c001c930:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c937:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c939:	83 e8 41             	sub    eax,0x41
c001c93c:	50                   	push   eax
c001c93d:	56                   	push   esi
c001c93e:	53                   	push   ebx
c001c93f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	84 c0                	test   al,al
c001c947:	74 08                	je     c001c951 <LogicalDisk::mount()+0x3d>
c001c949:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c94f:	eb 07                	jmp    c001c958 <LogicalDisk::mount()+0x44>
c001c951:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c954:	eb d5                	jmp    c001c92b <LogicalDisk::mount()+0x17>
c001c956:	31 c0                	xor    eax,eax
c001c958:	5a                   	pop    edx
c001c959:	5b                   	pop    ebx
c001c95a:	5e                   	pop    esi
c001c95b:	c3                   	ret    

c001c95c <LogicalDisk::unmount()>:
c001c95c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c960:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c96a:	c3                   	ret    
c001c96b:	90                   	nop

c001c96c <LogicalDisk::eject()>:
c001c96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c970:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c976:	8b 10                	mov    edx,DWORD PTR [eax]
c001c978:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c97c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c97f:	90                   	nop

c001c980 <LogicalDisk::unassignDriveLetter()>:
c001c980:	57                   	push   edi
c001c981:	56                   	push   esi
c001c982:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c986:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c98d:	85 c9                	test   ecx,ecx
c001c98f:	75 0f                	jne    c001c9a0 <LogicalDisk::unassignDriveLetter()+0x20>
c001c991:	c7 44 24 0c f8 24 03 c0 	mov    DWORD PTR [esp+0xc],0xc00324f8
c001c999:	5e                   	pop    esi
c001c99a:	5f                   	pop    edi
c001c99b:	e9 32 3b 00 00       	jmp    c00204d2 <KePanic(char const*)>
c001c9a0:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c9a7:	83 e9 41             	sub    ecx,0x41
c001c9aa:	b8 01 00 00 00       	mov    eax,0x1
c001c9af:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c9ba:	d3 e0                	shl    eax,cl
c001c9bc:	89 c7                	mov    edi,eax
c001c9be:	f7 d0                	not    eax
c001c9c0:	c1 ff 1f             	sar    edi,0x1f
c001c9c3:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c9c9:	89 fe                	mov    esi,edi
c001c9cb:	f7 d6                	not    esi
c001c9cd:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c9d3:	5e                   	pop    esi
c001c9d4:	5f                   	pop    edi
c001c9d5:	c3                   	ret    

c001c9d6 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c9d6:	57                   	push   edi
c001c9d7:	56                   	push   esi
c001c9d8:	53                   	push   ebx
c001c9d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c9dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c9e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c9ef:	77 41                	ja     c001ca32 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c9f1:	99                   	cdq    
c001c9f2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c9f8:	01 c8                	add    eax,ecx
c001c9fa:	11 da                	adc    edx,ebx
c001c9fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca02:	19 d7                	sbb    edi,edx
c001ca04:	72 33                	jb     c001ca39 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001ca06:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001ca0c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001ca12:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ca16:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ca1a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001ca20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca2a:	5b                   	pop    ebx
c001ca2b:	5e                   	pop    esi
c001ca2c:	5f                   	pop    edi
c001ca2d:	e9 c6 0a 00 00       	jmp    c001d4f8 <VCache::read(unsigned long long, int, void*)>
c001ca32:	b8 05 00 00 00       	mov    eax,0x5
c001ca37:	eb 05                	jmp    c001ca3e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001ca39:	b8 07 00 00 00       	mov    eax,0x7
c001ca3e:	5b                   	pop    ebx
c001ca3f:	5e                   	pop    esi
c001ca40:	5f                   	pop    edi
c001ca41:	c3                   	ret    

c001ca42 <LogicalDisk::write(unsigned long long, int, void*)>:
c001ca42:	57                   	push   edi
c001ca43:	56                   	push   esi
c001ca44:	53                   	push   ebx
c001ca45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca4d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca55:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001ca5b:	77 41                	ja     c001ca9e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001ca5d:	99                   	cdq    
c001ca5e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001ca64:	01 c8                	add    eax,ecx
c001ca66:	11 da                	adc    edx,ebx
c001ca68:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca6e:	19 d7                	sbb    edi,edx
c001ca70:	72 33                	jb     c001caa5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001ca72:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001ca78:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001ca7e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ca82:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ca86:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001ca8c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca96:	5b                   	pop    ebx
c001ca97:	5e                   	pop    esi
c001ca98:	5f                   	pop    edi
c001ca99:	e9 6a 09 00 00       	jmp    c001d408 <VCache::write(unsigned long long, int, void*)>
c001ca9e:	b8 05 00 00 00       	mov    eax,0x5
c001caa3:	eb 05                	jmp    c001caaa <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001caa5:	b8 07 00 00 00       	mov    eax,0x7
c001caaa:	5b                   	pop    ebx
c001caab:	5e                   	pop    esi
c001caac:	5f                   	pop    edi
c001caad:	c3                   	ret    
c001caae:	66 90                	xchg   ax,ax

c001cab0 <Mouse::Mouse(char const*)>:
c001cab0:	83 ec 0c             	sub    esp,0xc
c001cab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab7:	83 ec 08             	sub    esp,0x8
c001caba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cabe:	50                   	push   eax
c001cabf:	e8 7e ec ff ff       	call   c001b742 <Device::Device(char const*)>
c001cac4:	83 c4 10             	add    esp,0x10
c001cac7:	ba 4c 25 03 c0       	mov    edx,0xc003254c
c001cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad0:	89 10                	mov    DWORD PTR [eax],edx
c001cad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001cae0:	90                   	nop
c001cae1:	83 c4 0c             	add    esp,0xc
c001cae4:	c3                   	ret    
c001cae5:	90                   	nop
c001cae6:	66 90                	xchg   ax,ax

c001cae8 <Mouse::~Mouse()>:
c001cae8:	83 ec 0c             	sub    esp,0xc
c001caeb:	ba 4c 25 03 c0       	mov    edx,0xc003254c
c001caf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf4:	89 10                	mov    DWORD PTR [eax],edx
c001caf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafa:	83 ec 0c             	sub    esp,0xc
c001cafd:	50                   	push   eax
c001cafe:	e8 df e9 ff ff       	call   c001b4e2 <Device::~Device()>
c001cb03:	83 c4 10             	add    esp,0x10
c001cb06:	90                   	nop
c001cb07:	83 c4 0c             	add    esp,0xc
c001cb0a:	c3                   	ret    
c001cb0b:	90                   	nop

c001cb0c <Mouse::~Mouse()>:
c001cb0c:	83 ec 0c             	sub    esp,0xc
c001cb0f:	83 ec 0c             	sub    esp,0xc
c001cb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb16:	e8 cd ff ff ff       	call   c001cae8 <Mouse::~Mouse()>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	83 ec 08             	sub    esp,0x8
c001cb21:	68 58 01 00 00       	push   0x158
c001cb26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb2a:	e8 1d c9 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001cb2f:	83 c4 10             	add    esp,0x10
c001cb32:	83 c4 0c             	add    esp,0xc
c001cb35:	c3                   	ret    

c001cb36 <NIC::getMAC()>:
c001cb36:	31 c0                	xor    eax,eax
c001cb38:	31 d2                	xor    edx,edx
c001cb3a:	c3                   	ret    
c001cb3b:	90                   	nop

c001cb3c <NIC::write(int, unsigned char*, int*)>:
c001cb3c:	b8 01 00 00 00       	mov    eax,0x1
c001cb41:	c3                   	ret    

c001cb42 <NIC::NIC(char const*)>:
c001cb42:	83 ec 0c             	sub    esp,0xc
c001cb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb49:	83 ec 08             	sub    esp,0x8
c001cb4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb50:	50                   	push   eax
c001cb51:	e8 ec eb ff ff       	call   c001b742 <Device::Device(char const*)>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	ba 78 25 03 c0       	mov    edx,0xc0032578
c001cb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb62:	89 10                	mov    DWORD PTR [eax],edx
c001cb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb68:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001cb72:	90                   	nop
c001cb73:	83 c4 0c             	add    esp,0xc
c001cb76:	c3                   	ret    
c001cb77:	90                   	nop

c001cb78 <NIC::~NIC()>:
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	ba 78 25 03 c0       	mov    edx,0xc0032578
c001cb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb84:	89 10                	mov    DWORD PTR [eax],edx
c001cb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	50                   	push   eax
c001cb8e:	e8 4f e9 ff ff       	call   c001b4e2 <Device::~Device()>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	90                   	nop
c001cb97:	83 c4 0c             	add    esp,0xc
c001cb9a:	c3                   	ret    
c001cb9b:	90                   	nop

c001cb9c <NIC::~NIC()>:
c001cb9c:	83 ec 0c             	sub    esp,0xc
c001cb9f:	83 ec 0c             	sub    esp,0xc
c001cba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba6:	e8 cd ff ff ff       	call   c001cb78 <NIC::~NIC()>
c001cbab:	83 c4 10             	add    esp,0x10
c001cbae:	83 ec 08             	sub    esp,0x8
c001cbb1:	68 58 01 00 00       	push   0x158
c001cbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbba:	e8 8d c8 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	83 c4 0c             	add    esp,0xc
c001cbc5:	c3                   	ret    

c001cbc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001cbc6:	55                   	push   ebp
c001cbc7:	57                   	push   edi
c001cbc8:	56                   	push   esi
c001cbc9:	53                   	push   ebx
c001cbca:	81 ec 28 01 00 00    	sub    esp,0x128
c001cbd0:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cbd7:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001cbde:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001cbe5:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001cbec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbf0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cbf4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cbfb:	e8 3e ec ff ff       	call   c001b83e <Device::getName()>
c001cc00:	5a                   	pop    edx
c001cc01:	59                   	pop    ecx
c001cc02:	50                   	push   eax
c001cc03:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cc07:	55                   	push   ebp
c001cc08:	e8 43 3a fe ff       	call   c0000650 <strcpy>
c001cc0d:	5b                   	pop    ebx
c001cc0e:	58                   	pop    eax
c001cc0f:	68 a4 25 03 c0       	push   0xc00325a4
c001cc14:	55                   	push   ebp
c001cc15:	e8 56 3c fe ff       	call   c0000870 <strcat>
c001cc1a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cc21:	e8 ee 9a ff ff       	call   c0016714 <malloc>
c001cc26:	83 c4 0c             	add    esp,0xc
c001cc29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc31:	89 c3                	mov    ebx,eax
c001cc33:	57                   	push   edi
c001cc34:	56                   	push   esi
c001cc35:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cc3c:	55                   	push   ebp
c001cc3d:	50                   	push   eax
c001cc3e:	e8 57 fb ff ff       	call   c001c79a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc43:	83 c4 14             	add    esp,0x14
c001cc46:	53                   	push   ebx
c001cc47:	e8 0e fc ff ff       	call   c001c85a <LogicalDisk::assignDriveLetter()>
c001cc4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc4f:	e8 c0 fc ff ff       	call   c001c914 <LogicalDisk::mount()>
c001cc54:	58                   	pop    eax
c001cc55:	5a                   	pop    edx
c001cc56:	53                   	push   ebx
c001cc57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc5e:	e8 7d e9 ff ff       	call   c001b5e0 <Device::addChild(Device*)>
c001cc63:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cc69:	5b                   	pop    ebx
c001cc6a:	5e                   	pop    esi
c001cc6b:	5f                   	pop    edi
c001cc6c:	5d                   	pop    ebp
c001cc6d:	c3                   	ret    

c001cc6e <createPartitionsForDisk(PhysicalDisk*)>:
c001cc6e:	55                   	push   ebp
c001cc6f:	57                   	push   edi
c001cc70:	56                   	push   esi
c001cc71:	53                   	push   ebx
c001cc72:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cc78:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001cc7f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cc85:	3d 00 02 00 00       	cmp    eax,0x200
c001cc8a:	74 27                	je     c001ccb3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001cc8c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001cc92:	83 ec 10             	sub    esp,0x10
c001cc95:	99                   	cdq    
c001cc96:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001cc9c:	52                   	push   edx
c001cc9d:	50                   	push   eax
c001cc9e:	0f a4 f7 0a          	shld   edi,esi,0xa
c001cca2:	c1 e6 0a             	shl    esi,0xa
c001cca5:	89 fd                	mov    ebp,edi
c001cca7:	55                   	push   ebp
c001cca8:	56                   	push   esi
c001cca9:	e8 e2 1c 01 00       	call   c002e990 <__udivdi3>
c001ccae:	e9 b9 00 00 00       	jmp    c001cd6c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001ccb3:	83 ec 0c             	sub    esp,0xc
c001ccb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccb8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001ccbc:	56                   	push   esi
c001ccbd:	6a 01                	push   0x1
c001ccbf:	6a 00                	push   0x0
c001ccc1:	6a 00                	push   0x0
c001ccc3:	53                   	push   ebx
c001ccc4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ccc7:	83 c4 20             	add    esp,0x20
c001ccca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001ccd2:	75 0a                	jne    c001ccde <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001ccd4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001ccdc:	74 2c                	je     c001cd0a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001ccde:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cce4:	83 ec 10             	sub    esp,0x10
c001cce7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cced:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ccf3:	89 f7                	mov    edi,esi
c001ccf5:	c1 ff 1f             	sar    edi,0x1f
c001ccf8:	57                   	push   edi
c001ccf9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ccfd:	56                   	push   esi
c001ccfe:	c1 e0 0a             	shl    eax,0xa
c001cd01:	52                   	push   edx
c001cd02:	50                   	push   eax
c001cd03:	e8 88 1c 01 00       	call   c002e990 <__udivdi3>
c001cd08:	eb 62                	jmp    c001cd6c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cd0a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cd11:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cd18:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cd1f:	89 cf                	mov    edi,ecx
c001cd21:	83 e2 7f             	and    edx,0x7f
c001cd24:	83 e7 7f             	and    edi,0x7f
c001cd27:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cd2a:	83 e0 7f             	and    eax,0x7f
c001cd2d:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cd30:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cd37:	83 e0 7f             	and    eax,0x7f
c001cd3a:	01 d0                	add    eax,edx
c001cd3c:	84 c0                	test   al,al
c001cd3e:	89 c5                	mov    ebp,eax
c001cd40:	74 41                	je     c001cd83 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cd42:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd48:	83 ec 10             	sub    esp,0x10
c001cd4b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd51:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd57:	89 f7                	mov    edi,esi
c001cd59:	c1 ff 1f             	sar    edi,0x1f
c001cd5c:	57                   	push   edi
c001cd5d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd61:	56                   	push   esi
c001cd62:	c1 e0 0a             	shl    eax,0xa
c001cd65:	52                   	push   edx
c001cd66:	50                   	push   eax
c001cd67:	e8 24 1c 01 00       	call   c002e990 <__udivdi3>
c001cd6c:	83 c4 14             	add    esp,0x14
c001cd6f:	52                   	push   edx
c001cd70:	50                   	push   eax
c001cd71:	6a 00                	push   0x0
c001cd73:	6a 00                	push   0x0
c001cd75:	53                   	push   ebx
c001cd76:	e8 4b fe ff ff       	call   c001cbc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cd7b:	83 c4 20             	add    esp,0x20
c001cd7e:	e9 73 01 00 00       	jmp    c001cef6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cd83:	89 f0                	mov    eax,esi
c001cd85:	31 c9                	xor    ecx,ecx
c001cd87:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001cd8e:	75 02                	jne    c001cd92 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001cd90:	89 cd                	mov    ebp,ecx
c001cd92:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cd9a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cda1:	83 c0 10             	add    eax,0x10
c001cda4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cdac:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001cdb3:	c1 e2 08             	shl    edx,0x8
c001cdb6:	c1 e6 10             	shl    esi,0x10
c001cdb9:	09 f2                	or     edx,esi
c001cdbb:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001cdc2:	09 f2                	or     edx,esi
c001cdc4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cdcb:	c1 e6 18             	shl    esi,0x18
c001cdce:	09 f2                	or     edx,esi
c001cdd0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cdd7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cddb:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cde2:	c1 e6 10             	shl    esi,0x10
c001cde5:	c1 e2 08             	shl    edx,0x8
c001cde8:	09 f2                	or     edx,esi
c001cdea:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cdf1:	09 f2                	or     edx,esi
c001cdf3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cdfa:	c1 e6 18             	shl    esi,0x18
c001cdfd:	09 f2                	or     edx,esi
c001cdff:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ce03:	41                   	inc    ecx
c001ce04:	83 f9 04             	cmp    ecx,0x4
c001ce07:	0f 85 7a ff ff ff    	jne    c001cd87 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ce0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce11:	83 f0 01             	xor    eax,0x1
c001ce14:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ce18:	75 4f                	jne    c001ce69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce1e:	83 f0 01             	xor    eax,0x1
c001ce21:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001ce25:	75 42                	jne    c001ce69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce27:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ce2d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce35:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ce3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce43:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ce49:	89 f7                	mov    edi,esi
c001ce4b:	c1 ff 1f             	sar    edi,0x1f
c001ce4e:	57                   	push   edi
c001ce4f:	56                   	push   esi
c001ce50:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ce54:	52                   	push   edx
c001ce55:	c1 e0 0a             	shl    eax,0xa
c001ce58:	50                   	push   eax
c001ce59:	e8 32 1b 01 00       	call   c002e990 <__udivdi3>
c001ce5e:	83 c4 10             	add    esp,0x10
c001ce61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce65:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce69:	89 e8                	mov    eax,ebp
c001ce6b:	0f b6 e8             	movzx  ebp,al
c001ce6e:	85 ed                	test   ebp,ebp
c001ce70:	74 50                	je     c001cec2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001ce72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce76:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ce7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce7e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ce82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce86:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001ce8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ce8e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001ce92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ce9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cea2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cea6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001ceaa:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001ceae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001ceb2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001ceb6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001ceba:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cebe:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cec2:	31 ed                	xor    ebp,ebp
c001cec4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cec8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cecc:	89 f8                	mov    eax,edi
c001cece:	09 f0                	or     eax,esi
c001ced0:	74 1e                	je     c001cef0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001ced2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001ced6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001ceda:	89 d1                	mov    ecx,edx
c001cedc:	09 c1                	or     ecx,eax
c001cede:	74 10                	je     c001cef0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cee0:	83 ec 0c             	sub    esp,0xc
c001cee3:	57                   	push   edi
c001cee4:	56                   	push   esi
c001cee5:	52                   	push   edx
c001cee6:	50                   	push   eax
c001cee7:	53                   	push   ebx
c001cee8:	e8 d9 fc ff ff       	call   c001cbc6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ceed:	83 c4 20             	add    esp,0x20
c001cef0:	45                   	inc    ebp
c001cef1:	83 fd 04             	cmp    ebp,0x4
c001cef4:	75 ce                	jne    c001cec4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cef6:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cefc:	5b                   	pop    ebx
c001cefd:	5e                   	pop    esi
c001cefe:	5f                   	pop    edi
c001ceff:	5d                   	pop    ebp
c001cf00:	c3                   	ret    
c001cf01:	66 90                	xchg   ax,ax
c001cf03:	90                   	nop

c001cf04 <Serial::Serial(char const*)>:
c001cf04:	83 ec 0c             	sub    esp,0xc
c001cf07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0b:	83 ec 08             	sub    esp,0x8
c001cf0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf12:	50                   	push   eax
c001cf13:	e8 2a e8 ff ff       	call   c001b742 <Device::Device(char const*)>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	ba b8 25 03 c0       	mov    edx,0xc00325b8
c001cf20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf24:	89 10                	mov    DWORD PTR [eax],edx
c001cf26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cf34:	90                   	nop
c001cf35:	83 c4 0c             	add    esp,0xc
c001cf38:	c3                   	ret    
c001cf39:	90                   	nop
c001cf3a:	66 90                	xchg   ax,ax

c001cf3c <Serial::~Serial()>:
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	ba b8 25 03 c0       	mov    edx,0xc00325b8
c001cf44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf48:	89 10                	mov    DWORD PTR [eax],edx
c001cf4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4e:	83 ec 0c             	sub    esp,0xc
c001cf51:	50                   	push   eax
c001cf52:	e8 8b e5 ff ff       	call   c001b4e2 <Device::~Device()>
c001cf57:	83 c4 10             	add    esp,0x10
c001cf5a:	90                   	nop
c001cf5b:	83 c4 0c             	add    esp,0xc
c001cf5e:	c3                   	ret    
c001cf5f:	90                   	nop

c001cf60 <Serial::~Serial()>:
c001cf60:	83 ec 0c             	sub    esp,0xc
c001cf63:	83 ec 0c             	sub    esp,0xc
c001cf66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf6a:	e8 cd ff ff ff       	call   c001cf3c <Serial::~Serial()>
c001cf6f:	83 c4 10             	add    esp,0x10
c001cf72:	83 ec 08             	sub    esp,0x8
c001cf75:	68 58 01 00 00       	push   0x158
c001cf7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf7e:	e8 c9 c4 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	83 c4 0c             	add    esp,0xc
c001cf89:	c3                   	ret    
c001cf8a:	66 90                	xchg   ax,ax

c001cf8c <Timer::Timer(char const*)>:
c001cf8c:	83 ec 0c             	sub    esp,0xc
c001cf8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf93:	83 ec 08             	sub    esp,0x8
c001cf96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf9a:	50                   	push   eax
c001cf9b:	e8 a2 e7 ff ff       	call   c001b742 <Device::Device(char const*)>
c001cfa0:	83 c4 10             	add    esp,0x10
c001cfa3:	ba fc 25 03 c0       	mov    edx,0xc00325fc
c001cfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfac:	89 10                	mov    DWORD PTR [eax],edx
c001cfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cfbc:	90                   	nop
c001cfbd:	83 c4 0c             	add    esp,0xc
c001cfc0:	c3                   	ret    
c001cfc1:	90                   	nop
c001cfc2:	66 90                	xchg   ax,ax

c001cfc4 <Timer::~Timer()>:
c001cfc4:	83 ec 0c             	sub    esp,0xc
c001cfc7:	ba fc 25 03 c0       	mov    edx,0xc00325fc
c001cfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd0:	89 10                	mov    DWORD PTR [eax],edx
c001cfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd6:	83 ec 0c             	sub    esp,0xc
c001cfd9:	50                   	push   eax
c001cfda:	e8 03 e5 ff ff       	call   c001b4e2 <Device::~Device()>
c001cfdf:	83 c4 10             	add    esp,0x10
c001cfe2:	90                   	nop
c001cfe3:	83 c4 0c             	add    esp,0xc
c001cfe6:	c3                   	ret    
c001cfe7:	90                   	nop

c001cfe8 <Timer::~Timer()>:
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	83 ec 0c             	sub    esp,0xc
c001cfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cff2:	e8 cd ff ff ff       	call   c001cfc4 <Timer::~Timer()>
c001cff7:	83 c4 10             	add    esp,0x10
c001cffa:	83 ec 08             	sub    esp,0x8
c001cffd:	68 5c 01 00 00       	push   0x15c
c001d002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d006:	e8 41 c4 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	83 c4 0c             	add    esp,0xc
c001d011:	c3                   	ret    

c001d012 <Timer::read()>:
c001d012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d016:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d01c:	c3                   	ret    

c001d01d <setupTimer(int)>:
c001d01d:	53                   	push   ebx
c001d01e:	83 ec 14             	sub    esp,0x14
c001d021:	68 5c 01 00 00       	push   0x15c
c001d026:	e8 e9 96 ff ff       	call   c0016714 <malloc>
c001d02b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d02e:	89 c3                	mov    ebx,eax
c001d030:	e8 e3 11 01 00       	call   c002e218 <PIT::PIT()>
c001d035:	58                   	pop    eax
c001d036:	5a                   	pop    edx
c001d037:	53                   	push   ebx
c001d038:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001d03e:	e8 9d e5 ff ff       	call   c001b5e0 <Device::addChild(Device*)>
c001d043:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d045:	6a 00                	push   0x0
c001d047:	6a 00                	push   0x0
c001d049:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d04d:	53                   	push   ebx
c001d04e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d051:	83 c4 28             	add    esp,0x28
c001d054:	89 d8                	mov    eax,ebx
c001d056:	5b                   	pop    ebx
c001d057:	c3                   	ret    

c001d058 <timerHandler(unsigned int)>:
c001d058:	57                   	push   edi
c001d059:	56                   	push   esi
c001d05a:	53                   	push   ebx
c001d05b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d05f:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001d065:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001d06c:	0f 84 46 01 00 00    	je     c001d1b8 <timerHandler(unsigned int)+0x160>
c001d072:	fa                   	cli    
c001d073:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001d079:	83 ec 0c             	sub    esp,0xc
c001d07c:	68 e0 01 04 c0       	push   0xc00401e0
c001d081:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001d087:	e8 d4 1e 01 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d08c:	83 c4 10             	add    esp,0x10
c001d08f:	84 c0                	test   al,al
c001d091:	0f 85 a1 00 00 00    	jne    c001d138 <timerHandler(unsigned int)+0xe0>
c001d097:	83 ec 0c             	sub    esp,0xc
c001d09a:	68 e0 01 04 c0       	push   0xc00401e0
c001d09f:	e8 d8 1e 01 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0a4:	83 c4 10             	add    esp,0x10
c001d0a7:	89 c6                	mov    esi,eax
c001d0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d0ac:	83 ec 0c             	sub    esp,0xc
c001d0af:	68 e0 01 04 c0       	push   0xc00401e0
c001d0b4:	e8 c3 1e 01 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0b9:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001d0c0:	89 c3                	mov    ebx,eax
c001d0c2:	e8 bd 1e 01 00       	call   c002ef84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d0ca:	83 c4 10             	add    esp,0x10
c001d0cd:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001d0d3:	77 23                	ja     c001d0f8 <timerHandler(unsigned int)+0xa0>
c001d0d5:	83 ec 0c             	sub    esp,0xc
c001d0d8:	53                   	push   ebx
c001d0d9:	e8 42 87 00 00       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c001d0de:	83 c4 10             	add    esp,0x10
c001d0e1:	39 de                	cmp    esi,ebx
c001d0e3:	75 27                	jne    c001d10c <timerHandler(unsigned int)+0xb4>
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	68 e0 01 04 c0       	push   0xc00401e0
c001d0ed:	e8 8a 1e 01 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0f2:	89 c6                	mov    esi,eax
c001d0f4:	eb 12                	jmp    c001d108 <timerHandler(unsigned int)+0xb0>
c001d0f6:	66 90                	xchg   ax,ax
c001d0f8:	50                   	push   eax
c001d0f9:	50                   	push   eax
c001d0fa:	53                   	push   ebx
c001d0fb:	68 e0 01 04 c0       	push   0xc00401e0
c001d100:	e8 3b 1f 01 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d105:	8d 76 00             	lea    esi,[esi+0x0]
c001d108:	83 c4 10             	add    esp,0x10
c001d10b:	90                   	nop
c001d10c:	83 ec 0c             	sub    esp,0xc
c001d10f:	68 e0 01 04 c0       	push   0xc00401e0
c001d114:	e8 47 1e 01 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d119:	83 c4 10             	add    esp,0x10
c001d11c:	84 c0                	test   al,al
c001d11e:	75 18                	jne    c001d138 <timerHandler(unsigned int)+0xe0>
c001d120:	83 ec 0c             	sub    esp,0xc
c001d123:	68 e0 01 04 c0       	push   0xc00401e0
c001d128:	e8 4f 1e 01 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d12d:	83 c4 10             	add    esp,0x10
c001d130:	39 f0                	cmp    eax,esi
c001d132:	0f 85 74 ff ff ff    	jne    c001d0ac <timerHandler(unsigned int)+0x54>
c001d138:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d13d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d141:	74 3d                	je     c001d180 <timerHandler(unsigned int)+0x128>
c001d143:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001d14a:	74 34                	je     c001d180 <timerHandler(unsigned int)+0x128>
c001d14c:	fa                   	cli    
c001d14d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001d153:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001d159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d15e:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d166:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d169:	77 05                	ja     c001d170 <timerHandler(unsigned int)+0x118>
c001d16b:	e8 c4 83 00 00       	call   c0025534 <schedule()>
c001d170:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d175:	48                   	dec    eax
c001d176:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d17b:	75 03                	jne    c001d180 <timerHandler(unsigned int)+0x128>
c001d17d:	fb                   	sti    
c001d17e:	66 90                	xchg   ax,ax
c001d180:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001d185:	48                   	dec    eax
c001d186:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001d18b:	75 1b                	jne    c001d1a8 <timerHandler(unsigned int)+0x150>
c001d18d:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001d194:	74 12                	je     c001d1a8 <timerHandler(unsigned int)+0x150>
c001d196:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001d1a0:	e8 8f 83 00 00       	call   c0025534 <schedule()>
c001d1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d1a8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d1ad:	48                   	dec    eax
c001d1ae:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d1b3:	75 03                	jne    c001d1b8 <timerHandler(unsigned int)+0x160>
c001d1b5:	fb                   	sti    
c001d1b6:	66 90                	xchg   ax,ax
c001d1b8:	5b                   	pop    ebx
c001d1b9:	5e                   	pop    esi
c001d1ba:	5f                   	pop    edi
c001d1bb:	c3                   	ret    

c001d1bc <VCache::VCache(PhysicalDisk*)>:
c001d1bc:	53                   	push   ebx
c001d1bd:	83 ec 18             	sub    esp,0x18
c001d1c0:	ba 2c 26 03 c0       	mov    edx,0xc003262c
c001d1c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c9:	89 10                	mov    DWORD PTR [eax],edx
c001d1cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1cf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1da:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d1e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d1ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d1f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d1fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d209:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d214:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d21c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d223:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d22e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d236:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d23a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d23e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d246:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d24d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d255:	83 ec 0c             	sub    esp,0xc
c001d258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d25c:	e8 b3 94 ff ff       	call   c0016714 <malloc>
c001d261:	83 c4 10             	add    esp,0x10
c001d264:	89 c3                	mov    ebx,eax
c001d266:	83 ec 0c             	sub    esp,0xc
c001d269:	53                   	push   ebx
c001d26a:	e8 49 32 00 00       	call   c00204b8 <Mutex::Mutex()>
c001d26f:	83 c4 10             	add    esp,0x10
c001d272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d276:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d27d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d281:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d288:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d28f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d293:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2a4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d2aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d2b4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d2b7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2be:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d2c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d2cc:	05 00 02 00 00       	add    eax,0x200
c001d2d1:	c1 e0 03             	shl    eax,0x3
c001d2d4:	83 ec 0c             	sub    esp,0xc
c001d2d7:	50                   	push   eax
c001d2d8:	e8 37 94 ff ff       	call   c0016714 <malloc>
c001d2dd:	83 c4 10             	add    esp,0x10
c001d2e0:	89 c2                	mov    edx,eax
c001d2e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d2e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ed:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d2f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d2fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d300:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d306:	89 d0                	mov    eax,edx
c001d308:	c1 e0 02             	shl    eax,0x2
c001d30b:	01 d0                	add    eax,edx
c001d30d:	c1 e0 04             	shl    eax,0x4
c001d310:	83 ec 0c             	sub    esp,0xc
c001d313:	50                   	push   eax
c001d314:	e8 fb 93 ff ff       	call   c0016714 <malloc>
c001d319:	83 c4 10             	add    esp,0x10
c001d31c:	89 c2                	mov    edx,eax
c001d31e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d322:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d325:	90                   	nop
c001d326:	83 c4 18             	add    esp,0x18
c001d329:	5b                   	pop    ebx
c001d32a:	c3                   	ret    
c001d32b:	90                   	nop

c001d32c <VCache::invalidateReadBuffer()>:
c001d32c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d330:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d336:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d33a:	c3                   	ret    
c001d33b:	90                   	nop

c001d33c <VCache::writeWriteBuffer()>:
c001d33c:	53                   	push   ebx
c001d33d:	83 ec 08             	sub    esp,0x8
c001d340:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d344:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d348:	74 1e                	je     c001d368 <VCache::writeWriteBuffer()+0x2c>
c001d34a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d34d:	83 ec 0c             	sub    esp,0xc
c001d350:	8b 10                	mov    edx,DWORD PTR [eax]
c001d352:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d355:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d358:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d35b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d35e:	50                   	push   eax
c001d35f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d362:	83 c4 20             	add    esp,0x20
c001d365:	8d 76 00             	lea    esi,[esi+0x0]
c001d368:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d36f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d376:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d37a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d381:	83 c4 08             	add    esp,0x8
c001d384:	5b                   	pop    ebx
c001d385:	c3                   	ret    
c001d386:	66 90                	xchg   ax,ax

c001d388 <VCache::~VCache()>:
c001d388:	83 ec 0c             	sub    esp,0xc
c001d38b:	ba 2c 26 03 c0       	mov    edx,0xc003262c
c001d390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d394:	89 10                	mov    DWORD PTR [eax],edx
c001d396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d39a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d39d:	0f b6 c0             	movzx  eax,al
c001d3a0:	85 c0                	test   eax,eax
c001d3a2:	74 10                	je     c001d3b4 <VCache::~VCache()+0x2c>
c001d3a4:	83 ec 0c             	sub    esp,0xc
c001d3a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3ab:	e8 8c ff ff ff       	call   c001d33c <VCache::writeWriteBuffer()>
c001d3b0:	83 c4 10             	add    esp,0x10
c001d3b3:	90                   	nop
c001d3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d3bb:	83 ec 0c             	sub    esp,0xc
c001d3be:	50                   	push   eax
c001d3bf:	e8 60 93 ff ff       	call   c0016724 <free>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d3ce:	83 ec 0c             	sub    esp,0xc
c001d3d1:	50                   	push   eax
c001d3d2:	e8 4d 93 ff ff       	call   c0016724 <free>
c001d3d7:	83 c4 10             	add    esp,0x10
c001d3da:	90                   	nop
c001d3db:	83 c4 0c             	add    esp,0xc
c001d3de:	c3                   	ret    
c001d3df:	90                   	nop

c001d3e0 <VCache::~VCache()>:
c001d3e0:	83 ec 0c             	sub    esp,0xc
c001d3e3:	83 ec 0c             	sub    esp,0xc
c001d3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3ea:	e8 99 ff ff ff       	call   c001d388 <VCache::~VCache()>
c001d3ef:	83 c4 10             	add    esp,0x10
c001d3f2:	83 ec 08             	sub    esp,0x8
c001d3f5:	6a 44                	push   0x44
c001d3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3fb:	e8 4c c0 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001d400:	83 c4 10             	add    esp,0x10
c001d403:	83 c4 0c             	add    esp,0xc
c001d406:	c3                   	ret    
c001d407:	90                   	nop

c001d408 <VCache::write(unsigned long long, int, void*)>:
c001d408:	55                   	push   ebp
c001d409:	57                   	push   edi
c001d40a:	56                   	push   esi
c001d40b:	53                   	push   ebx
c001d40c:	83 ec 1c             	sub    esp,0x1c
c001d40f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d413:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d417:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d41b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d41f:	e8 7c 7e 00 00       	call   c00252a0 <KeDisablePreemption()>
c001d424:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d428:	74 0e                	je     c001d438 <VCache::write(unsigned long long, int, void*)+0x30>
c001d42a:	83 ec 0c             	sub    esp,0xc
c001d42d:	53                   	push   ebx
c001d42e:	e8 f9 fe ff ff       	call   c001d32c <VCache::invalidateReadBuffer()>
c001d433:	83 c4 10             	add    esp,0x10
c001d436:	66 90                	xchg   ax,ax
c001d438:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d43c:	74 5e                	je     c001d49c <VCache::write(unsigned long long, int, void*)+0x94>
c001d43e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d441:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d445:	99                   	cdq    
c001d446:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d449:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d44c:	89 c1                	mov    ecx,eax
c001d44e:	31 f1                	xor    ecx,esi
c001d450:	89 d0                	mov    eax,edx
c001d452:	31 f8                	xor    eax,edi
c001d454:	09 c1                	or     ecx,eax
c001d456:	75 38                	jne    c001d490 <VCache::write(unsigned long long, int, void*)+0x88>
c001d458:	83 fd 01             	cmp    ebp,0x1
c001d45b:	75 33                	jne    c001d490 <VCache::write(unsigned long long, int, void*)+0x88>
c001d45d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d460:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d464:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d468:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d46e:	0f af f9             	imul   edi,ecx
c001d471:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d474:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d476:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d479:	40                   	inc    eax
c001d47a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d47d:	83 f8 50             	cmp    eax,0x50
c001d480:	75 66                	jne    c001d4e8 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d482:	83 ec 0c             	sub    esp,0xc
c001d485:	53                   	push   ebx
c001d486:	e8 b1 fe ff ff       	call   c001d33c <VCache::writeWriteBuffer()>
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	eb 58                	jmp    c001d4e8 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d490:	83 ec 0c             	sub    esp,0xc
c001d493:	53                   	push   ebx
c001d494:	e8 a3 fe ff ff       	call   c001d33c <VCache::writeWriteBuffer()>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	83 fd 4f             	cmp    ebp,0x4f
c001d49f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4a2:	7f 20                	jg     c001d4c4 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d4a4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d4a7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d4ab:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d4ae:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d4b1:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d4b4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d4b8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d4be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4c0:	eb 26                	jmp    c001d4e8 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d4c2:	66 90                	xchg   ax,ax
c001d4c4:	83 ec 0c             	sub    esp,0xc
c001d4c7:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4cd:	55                   	push   ebp
c001d4ce:	57                   	push   edi
c001d4cf:	56                   	push   esi
c001d4d0:	50                   	push   eax
c001d4d1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d4d4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4d8:	83 c4 20             	add    esp,0x20
c001d4db:	e8 e8 7d 00 00       	call   c00252c8 <KeRestorePreemption()>
c001d4e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e4:	eb 0a                	jmp    c001d4f0 <VCache::write(unsigned long long, int, void*)+0xe8>
c001d4e6:	66 90                	xchg   ax,ax
c001d4e8:	e8 db 7d 00 00       	call   c00252c8 <KeRestorePreemption()>
c001d4ed:	31 c0                	xor    eax,eax
c001d4ef:	90                   	nop
c001d4f0:	83 c4 1c             	add    esp,0x1c
c001d4f3:	5b                   	pop    ebx
c001d4f4:	5e                   	pop    esi
c001d4f5:	5f                   	pop    edi
c001d4f6:	5d                   	pop    ebp
c001d4f7:	c3                   	ret    

c001d4f8 <VCache::read(unsigned long long, int, void*)>:
c001d4f8:	55                   	push   ebp
c001d4f9:	57                   	push   edi
c001d4fa:	56                   	push   esi
c001d4fb:	53                   	push   ebx
c001d4fc:	83 ec 1c             	sub    esp,0x1c
c001d4ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d503:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d507:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d50b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d50f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d513:	89 04 24             	mov    DWORD PTR [esp],eax
c001d516:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d51a:	e8 81 7d 00 00       	call   c00252a0 <KeDisablePreemption()>
c001d51f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d523:	74 0f                	je     c001d534 <VCache::read(unsigned long long, int, void*)+0x3c>
c001d525:	83 ec 0c             	sub    esp,0xc
c001d528:	53                   	push   ebx
c001d529:	e8 0e fe ff ff       	call   c001d33c <VCache::writeWriteBuffer()>
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	8d 76 00             	lea    esi,[esi+0x0]
c001d534:	83 fe 01             	cmp    esi,0x1
c001d537:	0f 85 8b 00 00 00    	jne    c001d5c8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d53d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d540:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d547:	75 7f                	jne    c001d5c8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d549:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d54c:	89 d1                	mov    ecx,edx
c001d54e:	f7 d9                	neg    ecx
c001d550:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d554:	89 cf                	mov    edi,ecx
c001d556:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d559:	c1 ff 1f             	sar    edi,0x1f
c001d55c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d560:	89 ce                	mov    esi,ecx
c001d562:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d566:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d56a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d56e:	89 cf                	mov    edi,ecx
c001d570:	74 32                	je     c001d5a4 <VCache::read(unsigned long long, int, void*)+0xac>
c001d572:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d575:	75 2d                	jne    c001d5a4 <VCache::read(unsigned long long, int, void*)+0xac>
c001d577:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d57a:	75 28                	jne    c001d5a4 <VCache::read(unsigned long long, int, void*)+0xac>
c001d57c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d57f:	89 ef                	mov    edi,ebp
c001d581:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d587:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d58a:	8d 70 ff             	lea    esi,[eax-0x1]
c001d58d:	23 34 24             	and    esi,DWORD PTR [esp]
c001d590:	0f af f1             	imul   esi,ecx
c001d593:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d596:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d598:	e8 2b 7d 00 00       	call   c00252c8 <KeRestorePreemption()>
c001d59d:	31 c0                	xor    eax,eax
c001d59f:	eb 57                	jmp    c001d5f8 <VCache::read(unsigned long long, int, void*)+0x100>
c001d5a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d5a4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d5ae:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d5b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d5b3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d5b6:	52                   	push   edx
c001d5b7:	57                   	push   edi
c001d5b8:	56                   	push   esi
c001d5b9:	50                   	push   eax
c001d5ba:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d5bd:	83 c4 20             	add    esp,0x20
c001d5c0:	85 c0                	test   eax,eax
c001d5c2:	75 34                	jne    c001d5f8 <VCache::read(unsigned long long, int, void*)+0x100>
c001d5c4:	eb b6                	jmp    c001d57c <VCache::read(unsigned long long, int, void*)+0x84>
c001d5c6:	66 90                	xchg   ax,ax
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	53                   	push   ebx
c001d5cc:	e8 5b fd ff ff       	call   c001d32c <VCache::invalidateReadBuffer()>
c001d5d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d5d4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5d9:	56                   	push   esi
c001d5da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e2:	50                   	push   eax
c001d5e3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d5e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5ea:	83 c4 20             	add    esp,0x20
c001d5ed:	e8 d6 7c 00 00       	call   c00252c8 <KeRestorePreemption()>
c001d5f2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5f8:	83 c4 1c             	add    esp,0x1c
c001d5fb:	5b                   	pop    ebx
c001d5fc:	5e                   	pop    esi
c001d5fd:	5f                   	pop    edi
c001d5fe:	5d                   	pop    ebp
c001d5ff:	c3                   	ret    

c001d600 <Video::putrect(int, int, int, int, unsigned int)>:
c001d600:	55                   	push   ebp
c001d601:	57                   	push   edi
c001d602:	56                   	push   esi
c001d603:	53                   	push   ebx
c001d604:	83 ec 1c             	sub    esp,0x1c
c001d607:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d60b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d60f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d613:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d617:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d61b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d61f:	01 df                	add    edi,ebx
c001d621:	39 fb                	cmp    ebx,edi
c001d623:	7d 1f                	jge    c001d644 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d625:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d629:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d62d:	7d 12                	jge    c001d641 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d62f:	8b 16                	mov    edx,DWORD PTR [esi]
c001d631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d635:	53                   	push   ebx
c001d636:	55                   	push   ebp
c001d637:	45                   	inc    ebp
c001d638:	56                   	push   esi
c001d639:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d63c:	83 c4 10             	add    esp,0x10
c001d63f:	eb e8                	jmp    c001d629 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d641:	43                   	inc    ebx
c001d642:	eb dd                	jmp    c001d621 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d644:	83 c4 1c             	add    esp,0x1c
c001d647:	5b                   	pop    ebx
c001d648:	5e                   	pop    esi
c001d649:	5f                   	pop    edi
c001d64a:	5d                   	pop    ebp
c001d64b:	c3                   	ret    

c001d64c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d64c:	55                   	push   ebp
c001d64d:	57                   	push   edi
c001d64e:	31 ff                	xor    edi,edi
c001d650:	56                   	push   esi
c001d651:	53                   	push   ebx
c001d652:	83 ec 1c             	sub    esp,0x1c
c001d655:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d659:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d65d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d664:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d66d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d671:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d675:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d678:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d67c:	01 f9                	add    ecx,edi
c001d67e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d682:	7d 2f                	jge    c001d6b3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d684:	31 f6                	xor    esi,esi
c001d686:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d68a:	01 f2                	add    edx,esi
c001d68c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d690:	7d 1a                	jge    c001d6ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d692:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d695:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d698:	46                   	inc    esi
c001d699:	51                   	push   ecx
c001d69a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d69e:	52                   	push   edx
c001d69f:	55                   	push   ebp
c001d6a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d6a3:	83 c4 10             	add    esp,0x10
c001d6a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6aa:	eb da                	jmp    c001d686 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d6ac:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d6b0:	47                   	inc    edi
c001d6b1:	eb c5                	jmp    c001d678 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d6b3:	83 c4 1c             	add    esp,0x1c
c001d6b6:	5b                   	pop    ebx
c001d6b7:	5e                   	pop    esi
c001d6b8:	5f                   	pop    edi
c001d6b9:	5d                   	pop    ebp
c001d6ba:	c3                   	ret    
c001d6bb:	90                   	nop

c001d6bc <Video::blit(unsigned int*, int, int, int, int)>:
c001d6bc:	55                   	push   ebp
c001d6bd:	ba 00 00 00 00       	mov    edx,0x0
c001d6c2:	57                   	push   edi
c001d6c3:	56                   	push   esi
c001d6c4:	53                   	push   ebx
c001d6c5:	83 ec 1c             	sub    esp,0x1c
c001d6c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d6cc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d6d0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6d4:	85 c0                	test   eax,eax
c001d6d6:	0f 49 d0             	cmovns edx,eax
c001d6d9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d6e0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d6e4:	89 eb                	mov    ebx,ebp
c001d6e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d6ea:	01 ea                	add    edx,ebp
c001d6ec:	39 da                	cmp    edx,ebx
c001d6ee:	7e 54                	jle    c001d744 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d6f0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d6f6:	7c 4c                	jl     c001d744 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d6f8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d6fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d700:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d704:	01 c1                	add    ecx,eax
c001d706:	39 f9                	cmp    ecx,edi
c001d708:	7e 2f                	jle    c001d739 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d70a:	83 c2 04             	add    edx,0x4
c001d70d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d713:	7c 21                	jl     c001d736 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d715:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d719:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d71b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d71e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d722:	55                   	push   ebp
c001d723:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d727:	56                   	push   esi
c001d728:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d72b:	83 c4 10             	add    esp,0x10
c001d72e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d736:	47                   	inc    edi
c001d737:	eb c7                	jmp    c001d700 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d739:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d73d:	43                   	inc    ebx
c001d73e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d742:	eb a2                	jmp    c001d6e6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d744:	83 c4 1c             	add    esp,0x1c
c001d747:	5b                   	pop    ebx
c001d748:	5e                   	pop    esi
c001d749:	5f                   	pop    edi
c001d74a:	5d                   	pop    ebp
c001d74b:	c3                   	ret    

c001d74c <Video::clearScreen(unsigned int)>:
c001d74c:	57                   	push   edi
c001d74d:	56                   	push   esi
c001d74e:	53                   	push   ebx
c001d74f:	31 db                	xor    ebx,ebx
c001d751:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d755:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d75b:	7e 1f                	jle    c001d77c <Video::clearScreen(unsigned int)+0x30>
c001d75d:	31 ff                	xor    edi,edi
c001d75f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d765:	7e 12                	jle    c001d779 <Video::clearScreen(unsigned int)+0x2d>
c001d767:	8b 06                	mov    eax,DWORD PTR [esi]
c001d769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d76d:	53                   	push   ebx
c001d76e:	57                   	push   edi
c001d76f:	47                   	inc    edi
c001d770:	56                   	push   esi
c001d771:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d774:	83 c4 10             	add    esp,0x10
c001d777:	eb e6                	jmp    c001d75f <Video::clearScreen(unsigned int)+0x13>
c001d779:	43                   	inc    ebx
c001d77a:	eb d9                	jmp    c001d755 <Video::clearScreen(unsigned int)+0x9>
c001d77c:	5b                   	pop    ebx
c001d77d:	5e                   	pop    esi
c001d77e:	5f                   	pop    edi
c001d77f:	c3                   	ret    

c001d780 <Video::putpixel(int, int, unsigned int)>:
c001d780:	c7 44 24 04 34 26 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032634
c001d788:	e9 45 2d 00 00       	jmp    c00204d2 <KePanic(char const*)>
c001d78d:	90                   	nop

c001d78e <Video::readPixelApprox(int, int)>:
c001d78e:	83 ec 18             	sub    esp,0x18
c001d791:	68 55 26 03 c0       	push   0xc0032655
c001d796:	e8 37 2d 00 00       	call   c00204d2 <KePanic(char const*)>
c001d79b:	31 c0                	xor    eax,eax
c001d79d:	83 c4 1c             	add    esp,0x1c
c001d7a0:	c3                   	ret    
c001d7a1:	90                   	nop

c001d7a2 <Video::Video(char const*)>:
c001d7a2:	83 ec 0c             	sub    esp,0xc
c001d7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a9:	83 ec 08             	sub    esp,0x8
c001d7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7b0:	50                   	push   eax
c001d7b1:	e8 8c df ff ff       	call   c001b742 <Device::Device(char const*)>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	ba f8 26 03 c0       	mov    edx,0xc00326f8
c001d7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c2:	89 10                	mov    DWORD PTR [eax],edx
c001d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d7d2:	90                   	nop
c001d7d3:	83 c4 0c             	add    esp,0xc
c001d7d6:	c3                   	ret    
c001d7d7:	90                   	nop

c001d7d8 <Video::~Video()>:
c001d7d8:	83 ec 0c             	sub    esp,0xc
c001d7db:	ba f8 26 03 c0       	mov    edx,0xc00326f8
c001d7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e4:	89 10                	mov    DWORD PTR [eax],edx
c001d7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ea:	83 ec 0c             	sub    esp,0xc
c001d7ed:	50                   	push   eax
c001d7ee:	e8 ef dc ff ff       	call   c001b4e2 <Device::~Device()>
c001d7f3:	83 c4 10             	add    esp,0x10
c001d7f6:	90                   	nop
c001d7f7:	83 c4 0c             	add    esp,0xc
c001d7fa:	c3                   	ret    
c001d7fb:	90                   	nop

c001d7fc <Video::~Video()>:
c001d7fc:	83 ec 0c             	sub    esp,0xc
c001d7ff:	83 ec 0c             	sub    esp,0xc
c001d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d806:	e8 cd ff ff ff       	call   c001d7d8 <Video::~Video()>
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	83 ec 08             	sub    esp,0x8
c001d811:	68 64 01 00 00       	push   0x164
c001d816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d81a:	e8 2d bc ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c001d81f:	83 c4 10             	add    esp,0x10
c001d822:	83 c4 0c             	add    esp,0xc
c001d825:	c3                   	ret    

c001d826 <Video::isMonochrome()>:
c001d826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d82a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d830:	c3                   	ret    
c001d831:	90                   	nop

c001d832 <Video::getWidth()>:
c001d832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d836:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d83c:	c3                   	ret    
c001d83d:	90                   	nop

c001d83e <Video::getHeight()>:
c001d83e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d842:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d848:	c3                   	ret    
c001d849:	90                   	nop

c001d84a <Video::drawCursor(int, int, unsigned int*, int)>:
c001d84a:	55                   	push   ebp
c001d84b:	57                   	push   edi
c001d84c:	56                   	push   esi
c001d84d:	53                   	push   ebx
c001d84e:	83 ec 2c             	sub    esp,0x2c
c001d851:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d855:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d859:	83 f8 01             	cmp    eax,0x1
c001d85c:	19 c9                	sbb    ecx,ecx
c001d85e:	31 db                	xor    ebx,ebx
c001d860:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d864:	89 ce                	mov    esi,ecx
c001d866:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d86e:	f7 d6                	not    esi
c001d870:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d876:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d87a:	01 d8                	add    eax,ebx
c001d87c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d880:	57                   	push   edi
c001d881:	e8 b8 ff ff ff       	call   c001d83e <Video::getHeight()>
c001d886:	59                   	pop    ecx
c001d887:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d88b:	7e 70                	jle    c001d8fd <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d88d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d891:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d895:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d898:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d89c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8a0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d8a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d8ab:	89 e8                	mov    eax,ebp
c001d8ad:	83 c0 20             	add    eax,0x20
c001d8b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8b4:	57                   	push   edi
c001d8b5:	e8 78 ff ff ff       	call   c001d832 <Video::getWidth()>
c001d8ba:	5a                   	pop    edx
c001d8bb:	39 c5                	cmp    ebp,eax
c001d8bd:	7d 34                	jge    c001d8f3 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d8bf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d8c4:	74 05                	je     c001d8cb <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d8c6:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8c8:	56                   	push   esi
c001d8c9:	eb 0d                	jmp    c001d8d8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d8cb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d8d0:	74 12                	je     c001d8e4 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d8d2:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d8d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d8dc:	55                   	push   ebp
c001d8dd:	57                   	push   edi
c001d8de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d8e1:	83 c4 10             	add    esp,0x10
c001d8e4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d8e8:	45                   	inc    ebp
c001d8e9:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d8ed:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d8f1:	75 c1                	jne    c001d8b4 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d8f3:	43                   	inc    ebx
c001d8f4:	83 fb 20             	cmp    ebx,0x20
c001d8f7:	0f 85 79 ff ff ff    	jne    c001d876 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d8fd:	83 c4 2c             	add    esp,0x2c
c001d900:	5b                   	pop    ebx
c001d901:	5e                   	pop    esi
c001d902:	5f                   	pop    edi
c001d903:	5d                   	pop    ebp
c001d904:	c3                   	ret    
c001d905:	90                   	nop

c001d906 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d906:	55                   	push   ebp
c001d907:	57                   	push   edi
c001d908:	56                   	push   esi
c001d909:	53                   	push   ebx
c001d90a:	83 ec 48             	sub    esp,0x48
c001d90d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d911:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d915:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d919:	c1 e0 08             	shl    eax,0x8
c001d91c:	01 d0                	add    eax,edx
c001d91e:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d922:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d926:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d92a:	c1 e0 08             	shl    eax,0x8
c001d92d:	01 d0                	add    eax,edx
c001d92f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d937:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001d93c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d940:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d944:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d94b:	50                   	push   eax
c001d94c:	e8 c3 8d ff ff       	call   c0016714 <malloc>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	85 c0                	test   eax,eax
c001d956:	89 c5                	mov    ebp,eax
c001d958:	75 10                	jne    c001d96a <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d95a:	83 ec 0c             	sub    esp,0xc
c001d95d:	68 80 26 03 c0       	push   0xc0032680
c001d962:	e8 6b 2b 00 00       	call   c00204d2 <KePanic(char const*)>
c001d967:	83 c4 10             	add    esp,0x10
c001d96a:	52                   	push   edx
c001d96b:	bf 12 00 00 00       	mov    edi,0x12
c001d970:	52                   	push   edx
c001d971:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d975:	50                   	push   eax
c001d976:	68 90 26 03 c0       	push   0xc0032690
c001d97b:	e8 ca bb ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001d980:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d983:	83 e0 20             	and    eax,0x20
c001d986:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d98a:	85 c0                	test   eax,eax
c001d98c:	59                   	pop    ecx
c001d98d:	0f 94 c0             	sete   al
c001d990:	0f b6 c0             	movzx  eax,al
c001d993:	5e                   	pop    esi
c001d994:	50                   	push   eax
c001d995:	68 9a 26 03 c0       	push   0xc003269a
c001d99a:	e8 ab bb ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001d99f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c001d9a3:	83 c4 10             	add    esp,0x10
c001d9a6:	85 c0                	test   eax,eax
c001d9a8:	89 c2                	mov    edx,eax
c001d9aa:	74 11                	je     c001d9bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c001d9ac:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c001d9b0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d9b4:	c1 ff 03             	sar    edi,0x3
c001d9b7:	0f af f9             	imul   edi,ecx
c001d9ba:	83 c7 12             	add    edi,0x12
c001d9bd:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d9c2:	74 07                	je     c001d9cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c001d9c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d9c9:	75 12                	jne    c001d9dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c001d9cb:	83 ec 0c             	sub    esp,0xc
c001d9ce:	68 a8 26 03 c0       	push   0xc00326a8
c001d9d3:	e8 72 bb ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001d9d8:	e9 aa 02 00 00       	jmp    c001dc87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c001d9dd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d9e1:	83 f9 02             	cmp    ecx,0x2
c001d9e4:	74 0e                	je     c001d9f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c001d9e6:	83 f9 0a             	cmp    ecx,0xa
c001d9e9:	0f 84 d1 00 00 00    	je     c001dac0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c001d9ef:	e9 7e 02 00 00       	jmp    c001dc72 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c001d9f4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d9f9:	75 0e                	jne    c001da09 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d9fb:	84 d2                	test   dl,dl
c001d9fd:	75 0a                	jne    c001da09 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d9ff:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001da02:	83 e8 18             	sub    eax,0x18
c001da05:	a8 f7                	test   al,0xf7
c001da07:	74 0d                	je     c001da16 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c001da09:	83 ec 0c             	sub    esp,0xc
c001da0c:	68 bd 26 03 c0       	push   0xc00326bd
c001da11:	e9 64 02 00 00       	jmp    c001dc7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001da16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001da1e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001da23:	31 c0                	xor    eax,eax
c001da25:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001da29:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001da31:	89 c6                	mov    esi,eax
c001da33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001da38:	75 15                	jne    c001da4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001da3a:	99                   	cdq    
c001da3b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001da3f:	85 d2                	test   edx,edx
c001da41:	75 0c                	jne    c001da4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001da43:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001da47:	29 c6                	sub    esi,eax
c001da49:	4e                   	dec    esi
c001da4a:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c001da4f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001da53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001da5b:	75 0c                	jne    c001da69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c001da5d:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c001da62:	c1 e2 18             	shl    edx,0x18
c001da65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da69:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c001da6e:	8d 46 01             	lea    eax,[esi+0x1]
c001da71:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001da75:	c1 e1 10             	shl    ecx,0x10
c001da78:	89 ca                	mov    edx,ecx
c001da7a:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c001da7f:	c1 e1 08             	shl    ecx,0x8
c001da82:	09 d1                	or     ecx,edx
c001da84:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001da88:	09 d1                	or     ecx,edx
c001da8a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001da8e:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c001da92:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001da96:	c1 fa 03             	sar    edx,0x3
c001da99:	01 d7                	add    edi,edx
c001da9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da9f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001daa3:	7e 04                	jle    c001daa9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c001daa5:	89 c6                	mov    esi,eax
c001daa7:	eb 8a                	jmp    c001da33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c001daa9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001daad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dab1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001dab5:	0f 8f 6e ff ff ff    	jg     c001da29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c001dabb:	e9 ce 01 00 00       	jmp    c001dc8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001dac0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001dac5:	75 0e                	jne    c001dad5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001dac7:	85 c0                	test   eax,eax
c001dac9:	75 0a                	jne    c001dad5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001dacb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001dace:	83 e8 18             	sub    eax,0x18
c001dad1:	a8 f7                	test   al,0xf7
c001dad3:	74 0d                	je     c001dae2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c001dad5:	83 ec 0c             	sub    esp,0xc
c001dad8:	68 cb 26 03 c0       	push   0xc00326cb
c001dadd:	e9 98 01 00 00       	jmp    c001dc7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001dae2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001daea:	31 c9                	xor    ecx,ecx
c001daec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001daf4:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c001daf8:	0f 8d 90 01 00 00    	jge    c001dc8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001dafe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db02:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001db06:	0f 8e 82 01 00 00    	jle    c001dc8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001db0c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001db10:	8d 77 01             	lea    esi,[edi+0x1]
c001db13:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001db17:	83 fa 7f             	cmp    edx,0x7f
c001db1a:	89 d0                	mov    eax,edx
c001db1c:	0f 8e a3 00 00 00    	jle    c001dbc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c001db22:	83 e0 7f             	and    eax,0x7f
c001db25:	31 d2                	xor    edx,edx
c001db27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001db2b:	40                   	inc    eax
c001db2c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001db30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001db34:	75 08                	jne    c001db3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c001db36:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c001db3b:	c1 e2 18             	shl    edx,0x18
c001db3e:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c001db43:	c1 e0 10             	shl    eax,0x10
c001db46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db4a:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c001db4f:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001db53:	c1 e0 08             	shl    eax,0x8
c001db56:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001db5a:	09 f8                	or     eax,edi
c001db5c:	31 ff                	xor    edi,edi
c001db5e:	09 d0                	or     eax,edx
c001db60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001db69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db6d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001db72:	75 1d                	jne    c001db91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001db74:	89 c8                	mov    eax,ecx
c001db76:	99                   	cdq    
c001db77:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001db7b:	85 d2                	test   edx,edx
c001db7d:	75 12                	jne    c001db91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001db7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db83:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001db87:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001db8b:	49                   	dec    ecx
c001db8c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001db91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001db95:	8d 51 01             	lea    edx,[ecx+0x1]
c001db98:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c001db9c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dba0:	8d 47 01             	lea    eax,[edi+0x1]
c001dba3:	7e 06                	jle    c001dbab <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c001dba5:	89 c7                	mov    edi,eax
c001dba7:	89 d1                	mov    ecx,edx
c001dba9:	eb c2                	jmp    c001db6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c001dbab:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dbaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dbb3:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001dbb7:	c1 f8 03             	sar    eax,0x3
c001dbba:	01 c6                	add    esi,eax
c001dbbc:	89 d1                	mov    ecx,edx
c001dbbe:	89 f7                	mov    edi,esi
c001dbc0:	e9 2f ff ff ff       	jmp    c001daf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c001dbc5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dbcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dbd1:	40                   	inc    eax
c001dbd2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dbd6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001dbdb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dbdf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001dbe4:	75 1d                	jne    c001dc03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001dbe6:	89 c8                	mov    eax,ecx
c001dbe8:	99                   	cdq    
c001dbe9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001dbed:	85 d2                	test   edx,edx
c001dbef:	75 12                	jne    c001dc03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001dbf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dbf5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dbf9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001dbfd:	49                   	dec    ecx
c001dbfe:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001dc03:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001dc07:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001dc0f:	75 0c                	jne    c001dc1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c001dc11:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c001dc16:	c1 e7 18             	shl    edi,0x18
c001dc19:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001dc1d:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001dc22:	8d 51 01             	lea    edx,[ecx+0x1]
c001dc25:	c1 e0 10             	shl    eax,0x10
c001dc28:	89 c7                	mov    edi,eax
c001dc2a:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c001dc2f:	c1 e0 08             	shl    eax,0x8
c001dc32:	09 f8                	or     eax,edi
c001dc34:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001dc38:	09 f8                	or     eax,edi
c001dc3a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001dc3e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dc42:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc46:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dc4a:	c1 f8 03             	sar    eax,0x3
c001dc4d:	01 c6                	add    esi,eax
c001dc4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc53:	40                   	inc    eax
c001dc54:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c001dc58:	7e 0b                	jle    c001dc65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c001dc5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc5e:	89 d1                	mov    ecx,edx
c001dc60:	e9 7a ff ff ff       	jmp    c001dbdf <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c001dc65:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001dc69:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001dc6d:	e9 4a ff ff ff       	jmp    c001dbbc <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c001dc72:	50                   	push   eax
c001dc73:	50                   	push   eax
c001dc74:	51                   	push   ecx
c001dc75:	68 da 26 03 c0       	push   0xc00326da
c001dc7a:	e8 cb b8 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001dc7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc82:	e8 9d 8a ff ff       	call   c0016724 <free>
c001dc87:	83 c4 10             	add    esp,0x10
c001dc8a:	31 ed                	xor    ebp,ebp
c001dc8c:	eb 14                	jmp    c001dca2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c001dc8e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc92:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001dc96:	89 18                	mov    DWORD PTR [eax],ebx
c001dc98:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dc9c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dca0:	89 18                	mov    DWORD PTR [eax],ebx
c001dca2:	83 c4 3c             	add    esp,0x3c
c001dca5:	89 e8                	mov    eax,ebp
c001dca7:	5b                   	pop    ebx
c001dca8:	5e                   	pop    esi
c001dca9:	5f                   	pop    edi
c001dcaa:	5d                   	pop    ebp
c001dcab:	c3                   	ret    

c001dcac <Video::putTGA(int, int, unsigned char*, int)>:
c001dcac:	55                   	push   ebp
c001dcad:	57                   	push   edi
c001dcae:	56                   	push   esi
c001dcaf:	53                   	push   ebx
c001dcb0:	83 ec 28             	sub    esp,0x28
c001dcb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcb7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dcbb:	50                   	push   eax
c001dcbc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcc0:	50                   	push   eax
c001dcc1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dcc5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dcc9:	55                   	push   ebp
c001dcca:	e8 37 fc ff ff       	call   c001d906 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001dccf:	83 c4 20             	add    esp,0x20
c001dcd2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dcd6:	85 c0                	test   eax,eax
c001dcd8:	74 3b                	je     c001dd15 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001dcda:	89 c6                	mov    esi,eax
c001dcdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dce0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dce4:	39 d8                	cmp    eax,ebx
c001dce6:	7e 2d                	jle    c001dd15 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001dce8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dcec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcf0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dcf4:	39 f8                	cmp    eax,edi
c001dcf6:	7e 1a                	jle    c001dd12 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001dcf8:	83 c6 04             	add    esi,0x4
c001dcfb:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001dcfe:	85 c0                	test   eax,eax
c001dd00:	79 0d                	jns    c001dd0f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001dd02:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001dd05:	50                   	push   eax
c001dd06:	53                   	push   ebx
c001dd07:	57                   	push   edi
c001dd08:	55                   	push   ebp
c001dd09:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	47                   	inc    edi
c001dd10:	eb da                	jmp    c001dcec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001dd12:	43                   	inc    ebx
c001dd13:	eb c7                	jmp    c001dcdc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001dd15:	83 c4 1c             	add    esp,0x1c
c001dd18:	5b                   	pop    ebx
c001dd19:	5e                   	pop    esi
c001dd1a:	5f                   	pop    edi
c001dd1b:	5d                   	pop    ebp
c001dd1c:	c3                   	ret    
c001dd1d:	66 90                	xchg   ax,ax
c001dd1f:	90                   	nop

c001dd20 <ACPI::close(int, int, void*)>:
c001dd20:	83 ec 1c             	sub    esp,0x1c
c001dd23:	83 ec 0c             	sub    esp,0xc
c001dd26:	68 3c 27 03 c0       	push   0xc003273c
c001dd2b:	e8 1a b8 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dd3b:	74 1b                	je     c001dd58 <ACPI::close(int, int, void*)+0x38>
c001dd3d:	83 ec 0c             	sub    esp,0xc
c001dd40:	68 4b 27 03 c0       	push   0xc003274b
c001dd45:	e8 00 b8 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001dd4a:	83 c4 10             	add    esp,0x10
c001dd4d:	b8 00 00 00 00       	mov    eax,0x0
c001dd52:	e9 01 01 00 00       	jmp    c001de58 <ACPI::close(int, int, void*)+0x138>
c001dd57:	90                   	nop
c001dd58:	83 ec 0c             	sub    esp,0xc
c001dd5b:	68 5c 27 03 c0       	push   0xc003275c
c001dd60:	e8 e5 b7 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001dd65:	83 c4 10             	add    esp,0x10
c001dd68:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001dd6d:	75 45                	jne    c001ddb4 <ACPI::close(int, int, void*)+0x94>
c001dd6f:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dd74:	83 ec 08             	sub    esp,0x8
c001dd77:	50                   	push   eax
c001dd78:	68 6b 27 03 c0       	push   0xc003276b
c001dd7d:	e8 c8 b7 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001dd82:	83 c4 10             	add    esp,0x10
c001dd85:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dd8a:	85 c0                	test   eax,eax
c001dd8c:	74 0a                	je     c001dd98 <ACPI::close(int, int, void*)+0x78>
c001dd8e:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dd93:	ff d0                	call   eax
c001dd95:	8d 76 00             	lea    esi,[esi+0x0]
c001dd98:	83 ec 0c             	sub    esp,0xc
c001dd9b:	68 3c 29 03 c0       	push   0xc003293c
c001dda0:	e8 2d 27 00 00       	call   c00204d2 <KePanic(char const*)>
c001dda5:	83 c4 10             	add    esp,0x10
c001dda8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ddad:	e9 a6 00 00 00       	jmp    c001de58 <ACPI::close(int, int, void*)+0x138>
c001ddb2:	66 90                	xchg   ax,ax
c001ddb4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001ddb9:	0f 85 81 00 00 00    	jne    c001de40 <ACPI::close(int, int, void*)+0x120>
c001ddbf:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001ddc4:	83 ec 08             	sub    esp,0x8
c001ddc7:	50                   	push   eax
c001ddc8:	68 89 27 03 c0       	push   0xc0032789
c001ddcd:	e8 78 b7 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001ddd2:	83 c4 10             	add    esp,0x10
c001ddd5:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001ddda:	85 c0                	test   eax,eax
c001dddc:	74 0a                	je     c001dde8 <ACPI::close(int, int, void*)+0xc8>
c001ddde:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dde3:	ff d0                	call   eax
c001dde5:	8d 76 00             	lea    esi,[esi+0x0]
c001dde8:	83 ec 0c             	sub    esp,0xc
c001ddeb:	68 a4 27 03 c0       	push   0xc00327a4
c001ddf0:	e8 55 b7 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001ddfd:	8d 76 00             	lea    esi,[esi+0x0]
c001de00:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001de05:	83 e0 02             	and    eax,0x2
c001de08:	74 1e                	je     c001de28 <ACPI::close(int, int, void*)+0x108>
c001de0a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001de11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de15:	89 c2                	mov    edx,eax
c001de17:	ec                   	in     al,dx
c001de18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001de1c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001de20:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001de24:	eb da                	jmp    c001de00 <ACPI::close(int, int, void*)+0xe0>
c001de26:	66 90                	xchg   ax,ax
c001de28:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001de2f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001de34:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001de38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de3c:	ee                   	out    dx,al
c001de3d:	8d 76 00             	lea    esi,[esi+0x0]
c001de40:	83 ec 0c             	sub    esp,0xc
c001de43:	68 b6 27 03 c0       	push   0xc00327b6
c001de48:	e8 fd b6 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001de4d:	83 c4 10             	add    esp,0x10
c001de50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001de55:	8d 76 00             	lea    esi,[esi+0x0]
c001de58:	83 c4 1c             	add    esp,0x1c
c001de5b:	c3                   	ret    

c001de5c <findRSDP()>:
c001de5c:	83 ec 1c             	sub    esp,0x1c
c001de5f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de64:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de6a:	83 e0 04             	and    eax,0x4
c001de6d:	0f b6 c0             	movzx  eax,al
c001de70:	85 c0                	test   eax,eax
c001de72:	75 08                	jne    c001de7c <findRSDP()+0x20>
c001de74:	b8 00 00 00 00       	mov    eax,0x0
c001de79:	eb 75                	jmp    c001def0 <findRSDP()+0x94>
c001de7b:	90                   	nop
c001de7c:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001de81:	3d ff 07 00 00       	cmp    eax,0x7ff
c001de86:	7f 1c                	jg     c001dea4 <findRSDP()+0x48>
c001de88:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de8d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001de93:	83 e2 fb             	and    edx,0xfffffffb
c001de96:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001de9c:	b8 00 00 00 00       	mov    eax,0x0
c001dea1:	eb 4d                	jmp    c001def0 <findRSDP()+0x94>
c001dea3:	90                   	nop
c001dea4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001deac:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001deb4:	77 32                	ja     c001dee8 <findRSDP()+0x8c>
c001deb6:	83 ec 04             	sub    esp,0x4
c001deb9:	6a 08                	push   0x8
c001debb:	68 c5 27 03 c0       	push   0xc00327c5
c001dec0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dec4:	e8 b7 24 fe ff       	call   c0000380 <memcmp>
c001dec9:	83 c4 10             	add    esp,0x10
c001decc:	85 c0                	test   eax,eax
c001dece:	0f 94 c0             	sete   al
c001ded1:	0f b6 c0             	movzx  eax,al
c001ded4:	85 c0                	test   eax,eax
c001ded6:	74 08                	je     c001dee0 <findRSDP()+0x84>
c001ded8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dedc:	eb 12                	jmp    c001def0 <findRSDP()+0x94>
c001dede:	66 90                	xchg   ax,ax
c001dee0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dee5:	eb c5                	jmp    c001deac <findRSDP()+0x50>
c001dee7:	90                   	nop
c001dee8:	b8 00 00 00 00       	mov    eax,0x0
c001deed:	8d 76 00             	lea    esi,[esi+0x0]
c001def0:	83 c4 1c             	add    esp,0x1c
c001def3:	c3                   	ret    

c001def4 <loadACPITables(unsigned char*)>:
c001def4:	57                   	push   edi
c001def5:	56                   	push   esi
c001def6:	53                   	push   ebx
c001def7:	83 ec 60             	sub    esp,0x60
c001defa:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001deff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df05:	83 e0 04             	and    eax,0x4
c001df08:	0f b6 c0             	movzx  eax,al
c001df0b:	85 c0                	test   eax,eax
c001df0d:	0f 84 41 02 00 00    	je     c001e154 <loadACPITables(unsigned char*)+0x260>
c001df13:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001df18:	0f b6 c0             	movzx  eax,al
c001df1b:	85 c0                	test   eax,eax
c001df1d:	74 79                	je     c001df98 <loadACPITables(unsigned char*)+0xa4>
c001df1f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df23:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001df27:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001df2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df2e:	83 e8 24             	sub    eax,0x24
c001df31:	c1 e8 03             	shr    eax,0x3
c001df34:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df38:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001df40:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df44:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001df48:	0f 8d ba 00 00 00    	jge    c001e008 <loadACPITables(unsigned char*)+0x114>
c001df4e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df52:	83 c0 24             	add    eax,0x24
c001df55:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001df59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001df5d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df61:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df65:	c1 e0 03             	shl    eax,0x3
c001df68:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001df6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df70:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001df73:	8b 00                	mov    eax,DWORD PTR [eax]
c001df75:	89 c1                	mov    ecx,eax
c001df77:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001df7c:	8d 50 01             	lea    edx,[eax+0x1]
c001df7f:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001df85:	89 ca                	mov    edx,ecx
c001df87:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001df8e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001df93:	eb ab                	jmp    c001df40 <loadACPITables(unsigned char*)+0x4c>
c001df95:	8d 76 00             	lea    esi,[esi+0x0]
c001df98:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dfa0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dfa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfa7:	83 e8 24             	sub    eax,0x24
c001dfaa:	c1 e8 02             	shr    eax,0x2
c001dfad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dfb1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dfb9:	8d 76 00             	lea    esi,[esi+0x0]
c001dfbc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfc0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dfc4:	7d 42                	jge    c001e008 <loadACPITables(unsigned char*)+0x114>
c001dfc6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dfca:	83 c0 24             	add    eax,0x24
c001dfcd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dfd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfd5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dfd9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfdd:	c1 e0 02             	shl    eax,0x2
c001dfe0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dfe4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dfe8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dfea:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dfef:	8d 50 01             	lea    edx,[eax+0x1]
c001dff2:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dff8:	89 ca                	mov    edx,ecx
c001dffa:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e001:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001e006:	eb b4                	jmp    c001dfbc <loadACPITables(unsigned char*)+0xc8>
c001e008:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001e010:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e015:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001e019:	0f 8d 39 01 00 00    	jge    c001e158 <loadACPITables(unsigned char*)+0x264>
c001e01f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e023:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e02a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e02e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e032:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e03a:	25 ff 0f 00 00       	and    eax,0xfff
c001e03f:	89 c6                	mov    esi,eax
c001e041:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e047:	83 ec 0c             	sub    esp,0xc
c001e04a:	6a 01                	push   0x1
c001e04c:	e8 e4 a1 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c001e051:	83 c4 10             	add    esp,0x10
c001e054:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e058:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e05e:	83 ec 0c             	sub    esp,0xc
c001e061:	6a 01                	push   0x1
c001e063:	6a 01                	push   0x1
c001e065:	50                   	push   eax
c001e066:	52                   	push   edx
c001e067:	53                   	push   ebx
c001e068:	e8 db aa ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e06d:	83 c4 20             	add    esp,0x20
c001e070:	09 f0                	or     eax,esi
c001e072:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e076:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e07a:	c1 e0 03             	shl    eax,0x3
c001e07d:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e082:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e08a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e08e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001e096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e09a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e09e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e0aa:	89 c6                	mov    esi,eax
c001e0ac:	89 d7                	mov    edi,edx
c001e0ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0b0:	89 c8                	mov    eax,ecx
c001e0b2:	89 fa                	mov    edx,edi
c001e0b4:	89 f3                	mov    ebx,esi
c001e0b6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e0ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e0be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0d1:	05 00 10 00 00       	add    eax,0x1000
c001e0d6:	c1 e8 0c             	shr    eax,0xc
c001e0d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e0dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0e9:	25 ff 0f 00 00       	and    eax,0xfff
c001e0ee:	89 c6                	mov    esi,eax
c001e0f0:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e0f6:	83 ec 0c             	sub    esp,0xc
c001e0f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e0fd:	e8 33 a1 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e109:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e10f:	83 ec 0c             	sub    esp,0xc
c001e112:	6a 01                	push   0x1
c001e114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e118:	50                   	push   eax
c001e119:	52                   	push   edx
c001e11a:	53                   	push   ebx
c001e11b:	e8 28 aa ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e120:	83 c4 20             	add    esp,0x20
c001e123:	09 f0                	or     eax,esi
c001e125:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e12d:	83 ec 0c             	sub    esp,0xc
c001e130:	50                   	push   eax
c001e131:	e8 13 a4 ff ff       	call   c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c001e136:	83 c4 10             	add    esp,0x10
c001e139:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e13d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e141:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e148:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e14d:	e9 be fe ff ff       	jmp    c001e010 <loadACPITables(unsigned char*)+0x11c>
c001e152:	66 90                	xchg   ax,ax
c001e154:	90                   	nop
c001e155:	8d 76 00             	lea    esi,[esi+0x0]
c001e158:	83 c4 60             	add    esp,0x60
c001e15b:	5b                   	pop    ebx
c001e15c:	5e                   	pop    esi
c001e15d:	5f                   	pop    edi
c001e15e:	c3                   	ret    
c001e15f:	90                   	nop

c001e160 <findRSDT(unsigned char*)>:
c001e160:	57                   	push   edi
c001e161:	56                   	push   esi
c001e162:	53                   	push   ebx
c001e163:	83 ec 50             	sub    esp,0x50
c001e166:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e16b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e171:	83 e0 04             	and    eax,0x4
c001e174:	0f b6 c0             	movzx  eax,al
c001e177:	85 c0                	test   eax,eax
c001e179:	75 0d                	jne    c001e188 <findRSDT(unsigned char*)+0x28>
c001e17b:	b8 00 00 00 00       	mov    eax,0x0
c001e180:	e9 2b 01 00 00       	jmp    c001e2b0 <findRSDT(unsigned char*)+0x150>
c001e185:	8d 76 00             	lea    esi,[esi+0x0]
c001e188:	89 e0                	mov    eax,esp
c001e18a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e18e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e192:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e196:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e19e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e1a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e1aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e1ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1b2:	89 c6                	mov    esi,eax
c001e1b4:	89 d7                	mov    edi,edx
c001e1b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1b8:	89 c8                	mov    eax,ecx
c001e1ba:	89 fa                	mov    edx,edi
c001e1bc:	89 f3                	mov    ebx,esi
c001e1be:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e1c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e1c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1ca:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e1ce:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e1d2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e1da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e1ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1f2:	25 ff 0f 00 00       	and    eax,0xfff
c001e1f7:	89 c6                	mov    esi,eax
c001e1f9:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e1ff:	83 ec 0c             	sub    esp,0xc
c001e202:	6a 02                	push   0x2
c001e204:	e8 2c a0 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e210:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	6a 01                	push   0x1
c001e21b:	6a 02                	push   0x2
c001e21d:	50                   	push   eax
c001e21e:	52                   	push   edx
c001e21f:	53                   	push   ebx
c001e220:	e8 23 a9 ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e225:	83 c4 20             	add    esp,0x20
c001e228:	09 f0                	or     eax,esi
c001e22a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e22e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e232:	25 ff 0f 00 00       	and    eax,0xfff
c001e237:	89 c6                	mov    esi,eax
c001e239:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e23f:	83 ec 0c             	sub    esp,0xc
c001e242:	6a 02                	push   0x2
c001e244:	e8 ec 9f ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c001e249:	83 c4 10             	add    esp,0x10
c001e24c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e250:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	6a 01                	push   0x1
c001e25b:	6a 02                	push   0x2
c001e25d:	50                   	push   eax
c001e25e:	52                   	push   edx
c001e25f:	53                   	push   ebx
c001e260:	e8 e3 a8 ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e265:	83 c4 20             	add    esp,0x20
c001e268:	09 f0                	or     eax,esi
c001e26a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e26e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e273:	85 c0                	test   eax,eax
c001e275:	75 11                	jne    c001e288 <findRSDT(unsigned char*)+0x128>
c001e277:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001e27e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e282:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e286:	eb 24                	jmp    c001e2ac <findRSDT(unsigned char*)+0x14c>
c001e288:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e28d:	83 f8 02             	cmp    eax,0x2
c001e290:	75 12                	jne    c001e2a4 <findRSDT(unsigned char*)+0x144>
c001e292:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001e299:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e29d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2a1:	eb 09                	jmp    c001e2ac <findRSDT(unsigned char*)+0x14c>
c001e2a3:	90                   	nop
c001e2a4:	b8 00 00 00 00       	mov    eax,0x0
c001e2a9:	eb 05                	jmp    c001e2b0 <findRSDT(unsigned char*)+0x150>
c001e2ab:	90                   	nop
c001e2ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e2b0:	83 c4 50             	add    esp,0x50
c001e2b3:	5b                   	pop    ebx
c001e2b4:	5e                   	pop    esi
c001e2b5:	5f                   	pop    edi
c001e2b6:	c3                   	ret    
c001e2b7:	90                   	nop

c001e2b8 <findDataTable(unsigned char*, char*)>:
c001e2b8:	83 ec 1c             	sub    esp,0x1c
c001e2bb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e2c0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e2c6:	83 e0 04             	and    eax,0x4
c001e2c9:	0f b6 c0             	movzx  eax,al
c001e2cc:	85 c0                	test   eax,eax
c001e2ce:	75 08                	jne    c001e2d8 <findDataTable(unsigned char*, char*)+0x20>
c001e2d0:	b8 00 00 00 00       	mov    eax,0x0
c001e2d5:	eb 5d                	jmp    c001e334 <findDataTable(unsigned char*, char*)+0x7c>
c001e2d7:	90                   	nop
c001e2d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e2e0:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e2e5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e2e9:	7d 41                	jge    c001e32c <findDataTable(unsigned char*, char*)+0x74>
c001e2eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2ef:	c1 e0 03             	shl    eax,0x3
c001e2f2:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e2f7:	83 ec 04             	sub    esp,0x4
c001e2fa:	6a 04                	push   0x4
c001e2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e300:	50                   	push   eax
c001e301:	e8 7a 20 fe ff       	call   c0000380 <memcmp>
c001e306:	83 c4 10             	add    esp,0x10
c001e309:	85 c0                	test   eax,eax
c001e30b:	0f 94 c0             	sete   al
c001e30e:	0f b6 c0             	movzx  eax,al
c001e311:	85 c0                	test   eax,eax
c001e313:	74 0f                	je     c001e324 <findDataTable(unsigned char*, char*)+0x6c>
c001e315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e319:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e320:	eb 12                	jmp    c001e334 <findDataTable(unsigned char*, char*)+0x7c>
c001e322:	66 90                	xchg   ax,ax
c001e324:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e329:	eb b5                	jmp    c001e2e0 <findDataTable(unsigned char*, char*)+0x28>
c001e32b:	90                   	nop
c001e32c:	b8 00 00 00 00       	mov    eax,0x0
c001e331:	8d 76 00             	lea    esi,[esi+0x0]
c001e334:	83 c4 1c             	add    esp,0x1c
c001e337:	c3                   	ret    

c001e338 <scanMADT()>:
c001e338:	53                   	push   ebx
c001e339:	83 ec 38             	sub    esp,0x38
c001e33c:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e341:	25 00 04 00 00       	and    eax,0x400
c001e346:	74 14                	je     c001e35c <scanMADT()+0x24>
c001e348:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e34d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e353:	83 e2 fb             	and    edx,0xfffffffb
c001e356:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e35c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e361:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e367:	83 e0 04             	and    eax,0x4
c001e36a:	0f b6 c0             	movzx  eax,al
c001e36d:	85 c0                	test   eax,eax
c001e36f:	0f 84 6b 04 00 00    	je     c001e7e0 <scanMADT()+0x4a8>
c001e375:	e8 e2 fa ff ff       	call   c001de5c <findRSDP()>
c001e37a:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e37f:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e384:	85 c0                	test   eax,eax
c001e386:	75 1c                	jne    c001e3a4 <scanMADT()+0x6c>
c001e388:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e38d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e393:	83 e2 fb             	and    edx,0xfffffffb
c001e396:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e39c:	e9 47 04 00 00       	jmp    c001e7e8 <scanMADT()+0x4b0>
c001e3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3a4:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e3a9:	83 ec 0c             	sub    esp,0xc
c001e3ac:	50                   	push   eax
c001e3ad:	e8 ae fd ff ff       	call   c001e160 <findRSDT(unsigned char*)>
c001e3b2:	83 c4 10             	add    esp,0x10
c001e3b5:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e3ba:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e3bf:	85 c0                	test   eax,eax
c001e3c1:	75 19                	jne    c001e3dc <scanMADT()+0xa4>
c001e3c3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e3c8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e3ce:	83 e2 fb             	and    edx,0xfffffffb
c001e3d1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e3d7:	e9 0c 04 00 00       	jmp    c001e7e8 <scanMADT()+0x4b0>
c001e3dc:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e3e1:	83 ec 0c             	sub    esp,0xc
c001e3e4:	50                   	push   eax
c001e3e5:	e8 0a fb ff ff       	call   c001def4 <loadACPITables(unsigned char*)>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e3f2:	83 ec 08             	sub    esp,0x8
c001e3f5:	68 ce 27 03 c0       	push   0xc00327ce
c001e3fa:	50                   	push   eax
c001e3fb:	e8 b8 fe ff ff       	call   c001e2b8 <findDataTable(unsigned char*, char*)>
c001e400:	83 c4 10             	add    esp,0x10
c001e403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e407:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e40c:	75 1a                	jne    c001e428 <scanMADT()+0xf0>
c001e40e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e413:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e419:	83 e2 fe             	and    edx,0xfffffffe
c001e41c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e422:	e9 c1 03 00 00       	jmp    c001e7e8 <scanMADT()+0x4b0>
c001e427:	90                   	nop
c001e428:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e430:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e437:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e43b:	0f 87 a7 03 00 00    	ja     c001e7e8 <scanMADT()+0x4b0>
c001e441:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e449:	0f 87 99 03 00 00    	ja     c001e7e8 <scanMADT()+0x4b0>
c001e44f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e453:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e457:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e45b:	8d 50 01             	lea    edx,[eax+0x1]
c001e45e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e462:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e466:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e46a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e46e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e472:	8d 50 01             	lea    edx,[eax+0x1]
c001e475:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e479:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e47d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e481:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e485:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e48a:	83 f8 02             	cmp    eax,0x2
c001e48d:	0f 86 51 03 00 00    	jbe    c001e7e4 <scanMADT()+0x4ac>
c001e493:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e498:	85 c0                	test   eax,eax
c001e49a:	75 58                	jne    c001e4f4 <scanMADT()+0x1bc>
c001e49c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4a0:	8d 50 01             	lea    edx,[eax+0x1]
c001e4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4a7:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e4ad:	0f b6 d2             	movzx  edx,dl
c001e4b0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e4b4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e4b8:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4c2:	8d 50 01             	lea    edx,[eax+0x1]
c001e4c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4c9:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e4cf:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e4d2:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e4d8:	0f b6 d2             	movzx  edx,dl
c001e4db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e4df:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e4e3:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e4e9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e4ee:	e9 d9 02 00 00       	jmp    c001e7cc <scanMADT()+0x494>
c001e4f3:	90                   	nop
c001e4f4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e4f9:	83 f8 01             	cmp    eax,0x1
c001e4fc:	0f 85 1a 01 00 00    	jne    c001e61c <scanMADT()+0x2e4>
c001e502:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e506:	8d 50 01             	lea    edx,[eax+0x1]
c001e509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e50d:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e513:	0f b6 d2             	movzx  edx,dl
c001e516:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e51a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e51e:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e524:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e529:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e52d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e531:	01 d0                	add    eax,edx
c001e533:	83 c0 2c             	add    eax,0x2c
c001e536:	8a 00                	mov    al,BYTE PTR [eax]
c001e538:	0f b6 d0             	movzx  edx,al
c001e53b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e53f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e542:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e546:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e54a:	0f b6 c0             	movzx  eax,al
c001e54d:	c1 e0 08             	shl    eax,0x8
c001e550:	89 d1                	mov    ecx,edx
c001e552:	09 c1                	or     ecx,eax
c001e554:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e558:	8d 50 02             	lea    edx,[eax+0x2]
c001e55b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e55f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e563:	0f b6 c0             	movzx  eax,al
c001e566:	c1 e0 10             	shl    eax,0x10
c001e569:	09 c1                	or     ecx,eax
c001e56b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e56f:	8d 50 03             	lea    edx,[eax+0x3]
c001e572:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e576:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e57a:	0f b6 c0             	movzx  eax,al
c001e57d:	c1 e0 18             	shl    eax,0x18
c001e580:	09 c1                	or     ecx,eax
c001e582:	89 ca                	mov    edx,ecx
c001e584:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e589:	0f b6 c0             	movzx  eax,al
c001e58c:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e593:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e598:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5a0:	01 d0                	add    eax,edx
c001e5a2:	83 c0 2c             	add    eax,0x2c
c001e5a5:	8a 00                	mov    al,BYTE PTR [eax]
c001e5a7:	0f b6 d0             	movzx  edx,al
c001e5aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ae:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5b5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e5b9:	0f b6 c0             	movzx  eax,al
c001e5bc:	c1 e0 08             	shl    eax,0x8
c001e5bf:	89 d1                	mov    ecx,edx
c001e5c1:	09 c1                	or     ecx,eax
c001e5c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5c7:	8d 50 02             	lea    edx,[eax+0x2]
c001e5ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5ce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5d2:	0f b6 c0             	movzx  eax,al
c001e5d5:	c1 e0 10             	shl    eax,0x10
c001e5d8:	09 c1                	or     ecx,eax
c001e5da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5de:	8d 50 03             	lea    edx,[eax+0x3]
c001e5e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5e9:	0f b6 c0             	movzx  eax,al
c001e5ec:	c1 e0 18             	shl    eax,0x18
c001e5ef:	09 c1                	or     ecx,eax
c001e5f1:	89 ca                	mov    edx,ecx
c001e5f3:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e5f8:	0f b6 c0             	movzx  eax,al
c001e5fb:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e602:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e607:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e60c:	83 c0 01             	add    eax,0x1
c001e60f:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e614:	e9 b3 01 00 00       	jmp    c001e7cc <scanMADT()+0x494>
c001e619:	8d 76 00             	lea    esi,[esi+0x0]
c001e61c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e621:	83 f8 02             	cmp    eax,0x2
c001e624:	0f 85 ea 00 00 00    	jne    c001e714 <scanMADT()+0x3dc>
c001e62a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e62e:	8d 50 01             	lea    edx,[eax+0x1]
c001e631:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e635:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e639:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e63d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e645:	8d 50 01             	lea    edx,[eax+0x1]
c001e648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e64c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e650:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e654:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e658:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e65c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e660:	01 d0                	add    eax,edx
c001e662:	83 c0 2c             	add    eax,0x2c
c001e665:	8a 00                	mov    al,BYTE PTR [eax]
c001e667:	0f b6 d0             	movzx  edx,al
c001e66a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e66e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e671:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e675:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e679:	0f b6 c0             	movzx  eax,al
c001e67c:	c1 e0 08             	shl    eax,0x8
c001e67f:	89 d1                	mov    ecx,edx
c001e681:	09 c1                	or     ecx,eax
c001e683:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e687:	8d 50 02             	lea    edx,[eax+0x2]
c001e68a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e68e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e692:	0f b6 c0             	movzx  eax,al
c001e695:	c1 e0 10             	shl    eax,0x10
c001e698:	09 c1                	or     ecx,eax
c001e69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e69e:	8d 50 03             	lea    edx,[eax+0x3]
c001e6a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e6a9:	0f b6 c0             	movzx  eax,al
c001e6ac:	c1 e0 18             	shl    eax,0x18
c001e6af:	09 c8                	or     eax,ecx
c001e6b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e6b5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6c2:	01 d0                	add    eax,edx
c001e6c4:	83 c0 2c             	add    eax,0x2c
c001e6c7:	8a 00                	mov    al,BYTE PTR [eax]
c001e6c9:	0f b6 d0             	movzx  edx,al
c001e6cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6d0:	8d 48 01             	lea    ecx,[eax+0x1]
c001e6d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6d7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e6db:	0f b6 c0             	movzx  eax,al
c001e6de:	c1 e0 08             	shl    eax,0x8
c001e6e1:	09 d0                	or     eax,edx
c001e6e3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e6e8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e6ed:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e6f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6f6:	88 90 e8 3f 03 c0    	mov    BYTE PTR [eax-0x3ffcc018],dl
c001e6fc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e701:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e706:	66 89 94 00 c0 f6 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc0940],dx
c001e70e:	e9 b9 00 00 00       	jmp    c001e7cc <scanMADT()+0x494>
c001e713:	90                   	nop
c001e714:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e719:	83 f8 04             	cmp    eax,0x4
c001e71c:	0f 85 9a 00 00 00    	jne    c001e7bc <scanMADT()+0x484>
c001e722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e726:	8d 50 01             	lea    edx,[eax+0x1]
c001e729:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e72d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e731:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e735:	0f b6 c0             	movzx  eax,al
c001e738:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e73c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e740:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e744:	01 d0                	add    eax,edx
c001e746:	83 c0 2c             	add    eax,0x2c
c001e749:	8a 00                	mov    al,BYTE PTR [eax]
c001e74b:	0f b6 d0             	movzx  edx,al
c001e74e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e752:	8d 48 01             	lea    ecx,[eax+0x1]
c001e755:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e759:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e75d:	0f b6 c0             	movzx  eax,al
c001e760:	c1 e0 08             	shl    eax,0x8
c001e763:	09 d0                	or     eax,edx
c001e765:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e769:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e76e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e772:	8d 50 01             	lea    edx,[eax+0x1]
c001e775:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e779:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e77d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e781:	0f b6 c0             	movzx  eax,al
c001e784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78c:	c1 e0 08             	shl    eax,0x8
c001e78f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e793:	89 c1                	mov    ecx,eax
c001e795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e799:	c1 e0 18             	shl    eax,0x18
c001e79c:	89 c3                	mov    ebx,eax
c001e79e:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e7a3:	8d 50 01             	lea    edx,[eax+0x1]
c001e7a6:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e7ac:	09 d9                	or     ecx,ebx
c001e7ae:	89 ca                	mov    edx,ecx
c001e7b0:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e7b7:	eb 13                	jmp    c001e7cc <scanMADT()+0x494>
c001e7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001e7bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e7c1:	83 f8 05             	cmp    eax,0x5
c001e7c4:	75 06                	jne    c001e7cc <scanMADT()+0x494>
c001e7c6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e7cb:	90                   	nop
c001e7cc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e7d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e7d5:	01 d0                	add    eax,edx
c001e7d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e7db:	e9 50 fc ff ff       	jmp    c001e430 <scanMADT()+0xf8>
c001e7e0:	90                   	nop
c001e7e1:	eb 05                	jmp    c001e7e8 <scanMADT()+0x4b0>
c001e7e3:	90                   	nop
c001e7e4:	90                   	nop
c001e7e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7e8:	83 c4 38             	add    esp,0x38
c001e7eb:	5b                   	pop    ebx
c001e7ec:	c3                   	ret    
c001e7ed:	90                   	nop
c001e7ee:	66 90                	xchg   ax,ax

c001e7f0 <ACPI::ACPI()>:
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f7:	83 ec 08             	sub    esp,0x8
c001e7fa:	68 d3 27 03 c0       	push   0xc00327d3
c001e7ff:	50                   	push   eax
c001e800:	e8 3d cf ff ff       	call   c001b742 <Device::Device(char const*)>
c001e805:	83 c4 10             	add    esp,0x10
c001e808:	ba e0 29 03 c0       	mov    edx,0xc00329e0
c001e80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e811:	89 10                	mov    DWORD PTR [eax],edx
c001e813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e817:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e822:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e830:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e83a:	e8 f9 fa ff ff       	call   c001e338 <scanMADT()>
c001e83f:	90                   	nop
c001e840:	83 c4 0c             	add    esp,0xc
c001e843:	c3                   	ret    

c001e844 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e844:	83 ec 2c             	sub    esp,0x2c
c001e847:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e84b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e84f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e853:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e857:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e85c:	88 c8                	mov    al,cl
c001e85e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e862:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e867:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e86f:	90                   	nop
c001e870:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e874:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e87a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e87e:	0f 8d b0 00 00 00    	jge    c001e934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e884:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e888:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e88c:	83 c2 2a             	add    edx,0x2a
c001e88f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e893:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e898:	0f b7 c0             	movzx  eax,ax
c001e89b:	39 c2                	cmp    edx,eax
c001e89d:	0f 85 85 00 00 00    	jne    c001e928 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8ab:	83 c2 2a             	add    edx,0x2a
c001e8ae:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e8b2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e8b7:	0f b6 c0             	movzx  eax,al
c001e8ba:	39 c2                	cmp    edx,eax
c001e8bc:	75 6a                	jne    c001e928 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8be:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e8c3:	85 c0                	test   eax,eax
c001e8c5:	74 3d                	je     c001e904 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e8c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8cf:	83 c2 2a             	add    edx,0x2a
c001e8d2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e8d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8dd:	39 c2                	cmp    edx,eax
c001e8df:	74 13                	je     c001e8f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e8e1:	83 ec 0c             	sub    esp,0xc
c001e8e4:	68 60 29 03 c0       	push   0xc0032960
c001e8e9:	e8 e4 1b 00 00       	call   c00204d2 <KePanic(char const*)>
c001e8ee:	83 c4 10             	add    esp,0x10
c001e8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e8f4:	83 ec 0c             	sub    esp,0xc
c001e8f7:	68 d8 27 03 c0       	push   0xc00327d8
c001e8fc:	e8 d1 1b 00 00       	call   c00204d2 <KePanic(char const*)>
c001e901:	83 c4 10             	add    esp,0x10
c001e904:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e908:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e90c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e910:	83 c2 2a             	add    edx,0x2a
c001e913:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e917:	8b 02                	mov    eax,DWORD PTR [edx]
c001e919:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e91c:	89 01                	mov    DWORD PTR [ecx],eax
c001e91e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e921:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e926:	66 90                	xchg   ax,ax
c001e928:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e92d:	e9 3e ff ff ff       	jmp    c001e870 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e932:	66 90                	xchg   ax,ax
c001e934:	90                   	nop
c001e935:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e939:	83 c4 2c             	add    esp,0x2c
c001e93c:	c2 04 00             	ret    0x4
c001e93f:	90                   	nop

c001e940 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e940:	83 ec 1c             	sub    esp,0x1c
c001e943:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e947:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e94b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e94f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e954:	88 c8                	mov    al,cl
c001e956:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e95a:	88 d0                	mov    al,dl
c001e95c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e964:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e96a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e96e:	83 c2 2a             	add    edx,0x2a
c001e971:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e975:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001e979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e97d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e987:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e98a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e98e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001e993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e997:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e99d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e9a1:	83 c0 01             	add    eax,0x1
c001e9a4:	88 c1                	mov    cl,al
c001e9a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9aa:	83 c2 2a             	add    edx,0x2a
c001e9ad:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9bf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e9c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9c6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9ce:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e9d4:	8d 50 01             	lea    edx,[eax+0x1]
c001e9d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9db:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e9e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9e5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e9eb:	3d 00 02 00 00       	cmp    eax,0x200
c001e9f0:	75 12                	jne    c001ea04 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e9f2:	83 ec 0c             	sub    esp,0xc
c001e9f5:	68 e7 27 03 c0       	push   0xc00327e7
c001e9fa:	e8 d3 1a 00 00       	call   c00204d2 <KePanic(char const*)>
c001e9ff:	83 c4 10             	add    esp,0x10
c001ea02:	66 90                	xchg   ax,ax
c001ea04:	90                   	nop
c001ea05:	83 c4 1c             	add    esp,0x1c
c001ea08:	c3                   	ret    
c001ea09:	90                   	nop
c001ea0a:	66 90                	xchg   ax,ax

c001ea0c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001ea0c:	b8 00 00 00 00       	mov    eax,0x0
c001ea11:	c3                   	ret    
c001ea12:	66 90                	xchg   ax,ax

c001ea14 <ACPI::detectPCI()>:
c001ea14:	53                   	push   ebx
c001ea15:	83 ec 28             	sub    esp,0x28
c001ea18:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ea1d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001ea22:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ea27:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea2d:	83 e0 04             	and    eax,0x4
c001ea30:	0f b6 c0             	movzx  eax,al
c001ea33:	85 c0                	test   eax,eax
c001ea35:	74 2d                	je     c001ea64 <ACPI::detectPCI()+0x50>
c001ea37:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001ea3c:	83 ec 08             	sub    esp,0x8
c001ea3f:	68 04 28 03 c0       	push   0xc0032804
c001ea44:	50                   	push   eax
c001ea45:	e8 6e f8 ff ff       	call   c001e2b8 <findDataTable(unsigned char*, char*)>
c001ea4a:	83 c4 10             	add    esp,0x10
c001ea4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea51:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ea56:	74 0c                	je     c001ea64 <ACPI::detectPCI()+0x50>
c001ea58:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea5d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001ea62:	66 90                	xchg   ax,ax
c001ea64:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001ea6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea70:	8a 00                	mov    al,BYTE PTR [eax]
c001ea72:	0f b6 c0             	movzx  eax,al
c001ea75:	83 f8 01             	cmp    eax,0x1
c001ea78:	75 0e                	jne    c001ea88 <ACPI::detectPCI()+0x74>
c001ea7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea7f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001ea84:	eb 2e                	jmp    c001eab4 <ACPI::detectPCI()+0xa0>
c001ea86:	66 90                	xchg   ax,ax
c001ea88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea8c:	8a 00                	mov    al,BYTE PTR [eax]
c001ea8e:	0f b6 c0             	movzx  eax,al
c001ea91:	83 f8 02             	cmp    eax,0x2
c001ea94:	75 1e                	jne    c001eab4 <ACPI::detectPCI()+0xa0>
c001ea96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea9b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eaa0:	85 c0                	test   eax,eax
c001eaa2:	74 10                	je     c001eab4 <ACPI::detectPCI()+0xa0>
c001eaa4:	83 ec 0c             	sub    esp,0xc
c001eaa7:	68 90 29 03 c0       	push   0xc0032990
c001eaac:	e8 21 1a 00 00       	call   c00204d2 <KePanic(char const*)>
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001eab8:	83 f0 01             	xor    eax,0x1
c001eabb:	0f b6 c0             	movzx  eax,al
c001eabe:	85 c0                	test   eax,eax
c001eac0:	74 46                	je     c001eb08 <ACPI::detectPCI()+0xf4>
c001eac2:	e8 69 16 fe ff       	call   c0000130 <manualPCIProbe>
c001eac7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eacb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ead0:	75 0e                	jne    c001eae0 <ACPI::detectPCI()+0xcc>
c001ead2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ead7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eadc:	eb 2a                	jmp    c001eb08 <ACPI::detectPCI()+0xf4>
c001eade:	66 90                	xchg   ax,ax
c001eae0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001eae5:	75 21                	jne    c001eb08 <ACPI::detectPCI()+0xf4>
c001eae7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eaec:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eaf1:	85 c0                	test   eax,eax
c001eaf3:	74 13                	je     c001eb08 <ACPI::detectPCI()+0xf4>
c001eaf5:	83 ec 0c             	sub    esp,0xc
c001eaf8:	68 90 29 03 c0       	push   0xc0032990
c001eafd:	e8 d0 19 00 00       	call   c00204d2 <KePanic(char const*)>
c001eb02:	83 c4 10             	add    esp,0x10
c001eb05:	8d 76 00             	lea    esi,[esi+0x0]
c001eb08:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001eb0d:	85 c0                	test   eax,eax
c001eb0f:	0f 84 87 00 00 00    	je     c001eb9c <ACPI::detectPCI()+0x188>
c001eb15:	83 ec 0c             	sub    esp,0xc
c001eb18:	68 09 28 03 c0       	push   0xc0032809
c001eb1d:	e8 4f 12 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001eb22:	83 c4 10             	add    esp,0x10
c001eb25:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001eb2d:	83 ec 0c             	sub    esp,0xc
c001eb30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb34:	e8 db 7b ff ff       	call   c0016714 <malloc>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	89 c3                	mov    ebx,eax
c001eb3e:	83 ec 0c             	sub    esp,0xc
c001eb41:	53                   	push   ebx
c001eb42:	e8 43 b8 00 00       	call   c002a38a <PCI::PCI()>
c001eb47:	83 c4 10             	add    esp,0x10
c001eb4a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001eb4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb52:	83 ec 08             	sub    esp,0x8
c001eb55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb59:	50                   	push   eax
c001eb5a:	e8 81 ca ff ff       	call   c001b5e0 <Device::addChild(Device*)>
c001eb5f:	83 c4 10             	add    esp,0x10
c001eb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb66:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb68:	83 c0 08             	add    eax,0x8
c001eb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb6d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001eb72:	85 d2                	test   edx,edx
c001eb74:	74 0a                	je     c001eb80 <ACPI::detectPCI()+0x16c>
c001eb76:	ba 01 00 00 00       	mov    edx,0x1
c001eb7b:	eb 0b                	jmp    c001eb88 <ACPI::detectPCI()+0x174>
c001eb7d:	8d 76 00             	lea    esi,[esi+0x0]
c001eb80:	ba 02 00 00 00       	mov    edx,0x2
c001eb85:	8d 76 00             	lea    esi,[esi+0x0]
c001eb88:	6a 00                	push   0x0
c001eb8a:	6a 00                	push   0x0
c001eb8c:	52                   	push   edx
c001eb8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eb91:	ff d0                	call   eax
c001eb93:	83 c4 10             	add    esp,0x10
c001eb96:	e9 91 00 00 00       	jmp    c001ec2c <ACPI::detectPCI()+0x218>
c001eb9b:	90                   	nop
c001eb9c:	83 ec 0c             	sub    esp,0xc
c001eb9f:	68 21 28 03 c0       	push   0xc0032821
c001eba4:	e8 c8 11 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001eba9:	83 c4 10             	add    esp,0x10
c001ebac:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001ebb3:	83 ec 0c             	sub    esp,0xc
c001ebb6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ebba:	e8 55 7b ff ff       	call   c0016714 <malloc>
c001ebbf:	83 c4 10             	add    esp,0x10
c001ebc2:	89 c3                	mov    ebx,eax
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	53                   	push   ebx
c001ebc8:	e8 65 c3 00 00       	call   c002af32 <IDE::IDE()>
c001ebcd:	83 c4 10             	add    esp,0x10
c001ebd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ebd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ebd8:	83 ec 08             	sub    esp,0x8
c001ebdb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ebdf:	50                   	push   eax
c001ebe0:	e8 fb c9 ff ff       	call   c001b5e0 <Device::addChild(Device*)>
c001ebe5:	83 c4 10             	add    esp,0x10
c001ebe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebec:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001ebf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebfa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001ec03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec07:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001ec10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec16:	83 c0 08             	add    eax,0x8
c001ec19:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec1b:	6a 00                	push   0x0
c001ec1d:	6a 00                	push   0x0
c001ec1f:	6a 00                	push   0x0
c001ec21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec25:	ff d0                	call   eax
c001ec27:	83 c4 10             	add    esp,0x10
c001ec2a:	66 90                	xchg   ax,ax
c001ec2c:	90                   	nop
c001ec2d:	83 c4 28             	add    esp,0x28
c001ec30:	5b                   	pop    ebx
c001ec31:	c3                   	ret    
c001ec32:	66 90                	xchg   ax,ax

c001ec34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001ec34:	83 ec 1c             	sub    esp,0x1c
c001ec37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ec3b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001ec3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec42:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ec47:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec4c:	83 ec 08             	sub    esp,0x8
c001ec4f:	52                   	push   edx
c001ec50:	50                   	push   eax
c001ec51:	e8 9a 70 ff ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c001ec56:	83 c4 10             	add    esp,0x10
c001ec59:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ec5d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ec62:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec67:	83 ec 04             	sub    esp,0x4
c001ec6a:	6a 01                	push   0x1
c001ec6c:	52                   	push   edx
c001ec6d:	50                   	push   eax
c001ec6e:	e8 95 71 ff ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c001ec73:	83 c4 10             	add    esp,0x10
c001ec76:	90                   	nop
c001ec77:	83 c4 1c             	add    esp,0x1c
c001ec7a:	c3                   	ret    
c001ec7b:	90                   	nop

c001ec7c <ACPI::sleep()>:
c001ec7c:	83 ec 0c             	sub    esp,0xc
c001ec7f:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ec84:	85 c0                	test   eax,eax
c001ec86:	74 08                	je     c001ec90 <ACPI::sleep()+0x14>
c001ec88:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ec8d:	ff d0                	call   eax
c001ec8f:	90                   	nop
c001ec90:	90                   	nop
c001ec91:	83 c4 0c             	add    esp,0xc
c001ec94:	c3                   	ret    
c001ec95:	90                   	nop
c001ec96:	66 90                	xchg   ax,ax

c001ec98 <ACPI::open(int, int, void*)>:
c001ec98:	55                   	push   ebp
c001ec99:	89 e5                	mov    ebp,esp
c001ec9b:	53                   	push   ebx
c001ec9c:	81 ec 74 01 00 00    	sub    esp,0x174
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca8:	e8 67 fd ff ff       	call   c001ea14 <ACPI::detectPCI()>
c001ecad:	83 c4 10             	add    esp,0x10
c001ecb0:	83 ec 0c             	sub    esp,0xc
c001ecb3:	68 b8 29 03 c0       	push   0xc00329b8
c001ecb8:	e8 b4 10 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001ecbd:	83 c4 10             	add    esp,0x10
c001ecc0:	b8 4c 05 00 00       	mov    eax,0x54c
c001ecc5:	8a 00                	mov    al,BYTE PTR [eax]
c001ecc7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001ecca:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ecce:	83 f8 01             	cmp    eax,0x1
c001ecd1:	75 15                	jne    c001ece8 <ACPI::open(int, int, void*)+0x50>
c001ecd3:	83 ec 0c             	sub    esp,0xc
c001ecd6:	68 36 28 03 c0       	push   0xc0032836
c001ecdb:	e8 41 53 00 00       	call   c0024021 <Thr::loadKernelSymbolTable(char const*)>
c001ece0:	83 c4 10             	add    esp,0x10
c001ece3:	eb 33                	jmp    c001ed18 <ACPI::open(int, int, void*)+0x80>
c001ece5:	8d 76 00             	lea    esi,[esi+0x0]
c001ece8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ecec:	3d bb 00 00 00       	cmp    eax,0xbb
c001ecf1:	75 15                	jne    c001ed08 <ACPI::open(int, int, void*)+0x70>
c001ecf3:	83 ec 0c             	sub    esp,0xc
c001ecf6:	68 54 28 03 c0       	push   0xc0032854
c001ecfb:	e8 21 53 00 00       	call   c0024021 <Thr::loadKernelSymbolTable(char const*)>
c001ed00:	83 c4 10             	add    esp,0x10
c001ed03:	eb 13                	jmp    c001ed18 <ACPI::open(int, int, void*)+0x80>
c001ed05:	8d 76 00             	lea    esi,[esi+0x0]
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	68 72 28 03 c0       	push   0xc0032872
c001ed10:	e8 bd 17 00 00       	call   c00204d2 <KePanic(char const*)>
c001ed15:	83 c4 10             	add    esp,0x10
c001ed18:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ed1c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001ed23:	83 ec 0c             	sub    esp,0xc
c001ed26:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001ed29:	e8 e6 79 ff ff       	call   c0016714 <malloc>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	89 c3                	mov    ebx,eax
c001ed33:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ed38:	83 ec 04             	sub    esp,0x4
c001ed3b:	50                   	push   eax
c001ed3c:	68 8c 28 03 c0       	push   0xc003288c
c001ed41:	53                   	push   ebx
c001ed42:	e8 1b ba ff ff       	call   c001a762 <File::File(char const*, Process*)>
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001ed4d:	83 ec 08             	sub    esp,0x8
c001ed50:	6a 01                	push   0x1
c001ed52:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ed55:	e8 26 ba ff ff       	call   c001a780 <File::open(FileOpenMode)>
c001ed5a:	83 c4 10             	add    esp,0x10
c001ed5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed60:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001ed64:	75 12                	jne    c001ed78 <ACPI::open(int, int, void*)+0xe0>
c001ed66:	83 ec 0c             	sub    esp,0xc
c001ed69:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ed6c:	e8 6d ba ff ff       	call   c001a7de <File::close()>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	eb 06                	jmp    c001ed7c <ACPI::open(int, int, void*)+0xe4>
c001ed76:	66 90                	xchg   ax,ax
c001ed78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001ed7c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001ed80:	74 16                	je     c001ed98 <ACPI::open(int, int, void*)+0x100>
c001ed82:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed87:	83 c0 08             	add    eax,0x8
c001ed8a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed8c:	83 ec 0c             	sub    esp,0xc
c001ed8f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ed92:	ff d0                	call   eax
c001ed94:	83 c4 10             	add    esp,0x10
c001ed97:	90                   	nop
c001ed98:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ed9b:	83 f0 01             	xor    eax,0x1
c001ed9e:	0f b6 c0             	movzx  eax,al
c001eda1:	85 c0                	test   eax,eax
c001eda3:	74 3b                	je     c001ede0 <ACPI::open(int, int, void*)+0x148>
c001eda5:	83 ec 0c             	sub    esp,0xc
c001eda8:	68 aa 28 03 c0       	push   0xc00328aa
c001edad:	e8 bf 0f 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001edb2:	83 c4 10             	add    esp,0x10
c001edb5:	83 ec 04             	sub    esp,0x4
c001edb8:	6a 0c                	push   0xc
c001edba:	68 c5 28 03 c0       	push   0xc00328c5
c001edbf:	68 d6 28 03 c0       	push   0xc00328d6
c001edc4:	e8 90 44 00 00       	call   c0023259 <Reg::readIntWithDefault(char*, char*, int)>
c001edc9:	83 c4 10             	add    esp,0x10
c001edcc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001edd5:	e8 80 96 ff ff       	call   c001845a <Virt::setupPageSwapping(int)>
c001edda:	83 c4 10             	add    esp,0x10
c001eddd:	8d 76 00             	lea    esi,[esi+0x0]
c001ede0:	83 ec 0c             	sub    esp,0xc
c001ede3:	68 c4 12 03 c0       	push   0xc00312c4
c001ede8:	e8 84 0f 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001eded:	83 c4 10             	add    esp,0x10
c001edf0:	8d 45 b8             	lea    eax,[ebp-0x48]
c001edf3:	83 ec 08             	sub    esp,0x8
c001edf6:	6a 13                	push   0x13
c001edf8:	50                   	push   eax
c001edf9:	e8 10 cb ff ff       	call   c001b90e <getDevicesOfType(DeviceType)>
c001edfe:	83 c4 0c             	add    esp,0xc
c001ee01:	8d 76 00             	lea    esi,[esi+0x0]
c001ee04:	83 ec 0c             	sub    esp,0xc
c001ee07:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ee0a:	50                   	push   eax
c001ee0b:	e8 60 03 01 00       	call   c002f170 <LinkedList<Device>::isEmpty()>
c001ee10:	83 c4 10             	add    esp,0x10
c001ee13:	83 f0 01             	xor    eax,0x1
c001ee16:	0f b6 c0             	movzx  eax,al
c001ee19:	85 c0                	test   eax,eax
c001ee1b:	0f 84 1f 01 00 00    	je     c001ef40 <ACPI::open(int, int, void*)+0x2a8>
c001ee21:	83 ec 0c             	sub    esp,0xc
c001ee24:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ee27:	50                   	push   eax
c001ee28:	e8 5f 03 01 00       	call   c002f18c <LinkedList<Device>::getFirstElement()>
c001ee2d:	83 c4 10             	add    esp,0x10
c001ee30:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ee33:	83 ec 0c             	sub    esp,0xc
c001ee36:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ee39:	50                   	push   eax
c001ee3a:	e8 55 03 01 00       	call   c002f194 <LinkedList<Device>::removeFirst()>
c001ee3f:	83 c4 10             	add    esp,0x10
c001ee42:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001ee45:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001ee48:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001ee4b:	b8 24 00 00 00       	mov    eax,0x24
c001ee50:	83 e0 fc             	and    eax,0xfffffffc
c001ee53:	89 c3                	mov    ebx,eax
c001ee55:	b8 00 00 00 00       	mov    eax,0x0
c001ee5a:	66 90                	xchg   ax,ax
c001ee5c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001ee63:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001ee6a:	83 c0 04             	add    eax,0x4
c001ee6d:	39 d8                	cmp    eax,ebx
c001ee6f:	72 eb                	jb     c001ee5c <ACPI::open(int, int, void*)+0x1c4>
c001ee71:	83 ec 08             	sub    esp,0x8
c001ee74:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001ee7a:	50                   	push   eax
c001ee7b:	83 ec 24             	sub    esp,0x24
c001ee7e:	89 e1                	mov    ecx,esp
c001ee80:	b8 24 00 00 00       	mov    eax,0x24
c001ee85:	83 e0 fc             	and    eax,0xfffffffc
c001ee88:	89 c3                	mov    ebx,eax
c001ee8a:	b8 00 00 00 00       	mov    eax,0x0
c001ee8f:	90                   	nop
c001ee90:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001ee97:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001ee9a:	83 c0 04             	add    eax,0x4
c001ee9d:	39 d8                	cmp    eax,ebx
c001ee9f:	72 ef                	jb     c001ee90 <ACPI::open(int, int, void*)+0x1f8>
c001eea1:	e8 cc b9 00 00       	call   c002a872 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001eea6:	83 c4 30             	add    esp,0x30
c001eea9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001eeac:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001eeb0:	0f 84 4e ff ff ff    	je     c001ee04 <ACPI::open(int, int, void*)+0x16c>
c001eeb6:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001eec3:	e8 4c 78 ff ff       	call   c0016714 <malloc>
c001eec8:	83 c4 10             	add    esp,0x10
c001eecb:	89 c3                	mov    ebx,eax
c001eecd:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eed2:	83 ec 04             	sub    esp,0x4
c001eed5:	50                   	push   eax
c001eed6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001eed9:	53                   	push   ebx
c001eeda:	e8 83 b8 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001eee5:	83 ec 0c             	sub    esp,0xc
c001eee8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001eeeb:	e8 54 bb ff ff       	call   c001aa44 <File::exists()>
c001eef0:	83 c4 10             	add    esp,0x10
c001eef3:	0f b6 c0             	movzx  eax,al
c001eef6:	85 c0                	test   eax,eax
c001eef8:	74 22                	je     c001ef1c <ACPI::open(int, int, void*)+0x284>
c001eefa:	83 ec 08             	sub    esp,0x8
c001eefd:	6a 01                	push   0x1
c001eeff:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ef02:	e8 9c 5b 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c001ef07:	83 c4 10             	add    esp,0x10
c001ef0a:	83 ec 08             	sub    esp,0x8
c001ef0d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001ef10:	50                   	push   eax
c001ef11:	e8 ee 5d 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001ef16:	83 c4 10             	add    esp,0x10
c001ef19:	8d 76 00             	lea    esi,[esi+0x0]
c001ef1c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001ef20:	0f 84 de fe ff ff    	je     c001ee04 <ACPI::open(int, int, void*)+0x16c>
c001ef26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ef29:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef2b:	83 c0 08             	add    eax,0x8
c001ef2e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef30:	83 ec 0c             	sub    esp,0xc
c001ef33:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ef36:	ff d0                	call   eax
c001ef38:	83 c4 10             	add    esp,0x10
c001ef3b:	e9 c4 fe ff ff       	jmp    c001ee04 <ACPI::open(int, int, void*)+0x16c>
c001ef40:	83 ec 0c             	sub    esp,0xc
c001ef43:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ef46:	50                   	push   eax
c001ef47:	e8 20 02 01 00       	call   c002f16c <LinkedList<Device>::~LinkedList()>
c001ef4c:	83 c4 10             	add    esp,0x10
c001ef4f:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ef55:	83 ec 08             	sub    esp,0x8
c001ef58:	6a 01                	push   0x1
c001ef5a:	68 dd 28 03 c0       	push   0xc00328dd
c001ef5f:	e8 3f 5b 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c001ef64:	83 c4 10             	add    esp,0x10
c001ef67:	83 ec 08             	sub    esp,0x8
c001ef6a:	53                   	push   ebx
c001ef6b:	50                   	push   eax
c001ef6c:	e8 93 5d 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001ef71:	83 c4 10             	add    esp,0x10
c001ef74:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ef79:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ef7f:	83 e0 04             	and    eax,0x4
c001ef82:	0f b6 c0             	movzx  eax,al
c001ef85:	85 c0                	test   eax,eax
c001ef87:	0f 84 e3 00 00 00    	je     c001f070 <ACPI::open(int, int, void*)+0x3d8>
c001ef8d:	83 ec 0c             	sub    esp,0xc
c001ef90:	68 fa 28 03 c0       	push   0xc00328fa
c001ef95:	e8 d7 0d 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001ef9a:	83 c4 10             	add    esp,0x10
c001ef9d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001efaa:	e8 65 77 ff ff       	call   c0016714 <malloc>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	89 c3                	mov    ebx,eax
c001efb4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001efb9:	83 ec 04             	sub    esp,0x4
c001efbc:	50                   	push   eax
c001efbd:	68 17 29 03 c0       	push   0xc0032917
c001efc2:	53                   	push   ebx
c001efc3:	e8 9a b7 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c001efc8:	83 c4 10             	add    esp,0x10
c001efcb:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001efce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001efd2:	74 1c                	je     c001eff0 <ACPI::open(int, int, void*)+0x358>
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001efda:	e8 65 ba ff ff       	call   c001aa44 <File::exists()>
c001efdf:	83 c4 10             	add    esp,0x10
c001efe2:	0f b6 c0             	movzx  eax,al
c001efe5:	85 c0                	test   eax,eax
c001efe7:	74 07                	je     c001eff0 <ACPI::open(int, int, void*)+0x358>
c001efe9:	b0 01                	mov    al,0x1
c001efeb:	eb 07                	jmp    c001eff4 <ACPI::open(int, int, void*)+0x35c>
c001efed:	8d 76 00             	lea    esi,[esi+0x0]
c001eff0:	b0 00                	mov    al,0x0
c001eff2:	66 90                	xchg   ax,ax
c001eff4:	0f b6 c0             	movzx  eax,al
c001eff7:	85 c0                	test   eax,eax
c001eff9:	74 21                	je     c001f01c <ACPI::open(int, int, void*)+0x384>
c001effb:	83 ec 08             	sub    esp,0x8
c001effe:	6a 01                	push   0x1
c001f000:	68 17 29 03 c0       	push   0xc0032917
c001f005:	e8 99 5a 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c001f00a:	83 c4 10             	add    esp,0x10
c001f00d:	83 ec 08             	sub    esp,0x8
c001f010:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f013:	50                   	push   eax
c001f014:	e8 eb 5c 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001f020:	74 1e                	je     c001f040 <ACPI::open(int, int, void*)+0x3a8>
c001f022:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001f026:	74 18                	je     c001f040 <ACPI::open(int, int, void*)+0x3a8>
c001f028:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001f02b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f02d:	83 c0 08             	add    eax,0x8
c001f030:	8b 00                	mov    eax,DWORD PTR [eax]
c001f032:	83 ec 0c             	sub    esp,0xc
c001f035:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001f038:	ff d0                	call   eax
c001f03a:	83 c4 10             	add    esp,0x10
c001f03d:	8d 76 00             	lea    esi,[esi+0x0]
c001f040:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001f045:	83 ec 08             	sub    esp,0x8
c001f048:	68 34 29 03 c0       	push   0xc0032934
c001f04d:	50                   	push   eax
c001f04e:	e8 65 f2 ff ff       	call   c001e2b8 <findDataTable(unsigned char*, char*)>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001f059:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001f05d:	74 11                	je     c001f070 <ACPI::open(int, int, void*)+0x3d8>
c001f05f:	83 ec 08             	sub    esp,0x8
c001f062:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f065:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f068:	e8 c7 fb ff ff       	call   c001ec34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001f06d:	83 c4 10             	add    esp,0x10
c001f070:	b8 00 00 00 00       	mov    eax,0x0
c001f075:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f078:	c9                   	leave  
c001f079:	c3                   	ret    

c001f07a <CPU::close(int, int, void*)>:
c001f07a:	31 c0                	xor    eax,eax
c001f07c:	c3                   	ret    
c001f07d:	90                   	nop

c001f07e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f07e:	60                   	pusha  
c001f07f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f087:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f08b:	9c                   	pushf  
c001f08c:	fa                   	cli    
c001f08d:	0f 09                	wbinvd 
c001f08f:	0f 30                	wrmsr  
c001f091:	9d                   	popf   
c001f092:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f096:	89 02                	mov    DWORD PTR [edx],eax
c001f098:	61                   	popa   
c001f099:	c3                   	ret    

c001f09a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f09a:	60                   	pusha  
c001f09b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f09f:	9c                   	pushf  
c001f0a0:	fa                   	cli    
c001f0a1:	0f 09                	wbinvd 
c001f0a3:	31 c0                	xor    eax,eax
c001f0a5:	31 d2                	xor    edx,edx
c001f0a7:	0f 32                	rdmsr  
c001f0a9:	9d                   	popf   
c001f0aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0ae:	89 02                	mov    DWORD PTR [edx],eax
c001f0b0:	61                   	popa   
c001f0b1:	c3                   	ret    

c001f0b2 <CPU::AMD_K6_writeback(int, int, int)>:
c001f0b2:	56                   	push   esi
c001f0b3:	53                   	push   ebx
c001f0b4:	83 ec 10             	sub    esp,0x10
c001f0b7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f0bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0c0:	75 5d                	jne    c001f11f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0c2:	83 f8 08             	cmp    eax,0x8
c001f0c5:	75 09                	jne    c001f0d0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f0c7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f0cc:	7e 13                	jle    c001f0e1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f0ce:	eb 30                	jmp    c001f100 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f0d0:	83 f8 06             	cmp    eax,0x6
c001f0d3:	7c 4a                	jl     c001f11f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0d5:	83 f8 07             	cmp    eax,0x7
c001f0d8:	7e 07                	jle    c001f0e1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f0da:	83 f8 09             	cmp    eax,0x9
c001f0dd:	74 21                	je     c001f100 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f0df:	eb 3e                	jmp    c001f11f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0e1:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001f0e7:	89 e6                	mov    esi,esp
c001f0e9:	56                   	push   esi
c001f0ea:	68 82 00 00 c0       	push   0xc0000082
c001f0ef:	e8 a6 ff ff ff       	call   c001f09a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f0f4:	c1 eb 15             	shr    ebx,0x15
c001f0f7:	56                   	push   esi
c001f0f8:	83 e3 7e             	and    ebx,0x7e
c001f0fb:	6a 00                	push   0x0
c001f0fd:	53                   	push   ebx
c001f0fe:	eb 12                	jmp    c001f112 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f100:	89 e3                	mov    ebx,esp
c001f102:	53                   	push   ebx
c001f103:	68 82 00 00 c0       	push   0xc0000082
c001f108:	e8 8d ff ff ff       	call   c001f09a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f10d:	53                   	push   ebx
c001f10e:	6a 00                	push   0x0
c001f110:	6a 00                	push   0x0
c001f112:	68 82 00 00 c0       	push   0xc0000082
c001f117:	e8 62 ff ff ff       	call   c001f07e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f11c:	83 c4 18             	add    esp,0x18
c001f11f:	83 c4 10             	add    esp,0x10
c001f122:	5b                   	pop    ebx
c001f123:	5e                   	pop    esi
c001f124:	c3                   	ret    
c001f125:	90                   	nop

c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f126:	55                   	push   ebp
c001f127:	57                   	push   edi
c001f128:	56                   	push   esi
c001f129:	53                   	push   ebx
c001f12a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f12e:	39 05 f8 3f 03 c0    	cmp    DWORD PTR ds:0xc0033ff8,eax
c001f134:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f138:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f13c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f140:	75 23                	jne    c001f165 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f142:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001f147:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f14b:	89 06                	mov    DWORD PTR [esi],eax
c001f14d:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001f152:	89 07                	mov    DWORD PTR [edi],eax
c001f154:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001f159:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f15c:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001f161:	89 02                	mov    DWORD PTR [edx],eax
c001f163:	eb 3f                	jmp    c001f1a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f165:	31 c9                	xor    ecx,ecx
c001f167:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f16b:	0f a2                	cpuid  
c001f16d:	89 06                	mov    DWORD PTR [esi],eax
c001f16f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f173:	89 1f                	mov    DWORD PTR [edi],ebx
c001f175:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f178:	89 10                	mov    DWORD PTR [eax],edx
c001f17a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f17e:	a3 f8 3f 03 c0       	mov    ds:0xc0033ff8,eax
c001f183:	8b 06                	mov    eax,DWORD PTR [esi]
c001f185:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001f18a:	8b 07                	mov    eax,DWORD PTR [edi]
c001f18c:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001f191:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f194:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001f199:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f19d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f19f:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001f1a4:	5b                   	pop    ebx
c001f1a5:	5e                   	pop    esi
c001f1a6:	5f                   	pop    edi
c001f1a7:	5d                   	pop    ebp
c001f1a8:	c3                   	ret    
c001f1a9:	90                   	nop

c001f1aa <CPU::cpuidCheckEDX(unsigned int)>:
c001f1aa:	83 ec 10             	sub    esp,0x10
c001f1ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1b1:	50                   	push   eax
c001f1b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1b6:	50                   	push   eax
c001f1b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1bb:	50                   	push   eax
c001f1bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1c0:	50                   	push   eax
c001f1c1:	6a 01                	push   0x1
c001f1c3:	e8 5e ff ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1cc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f1d0:	0f 95 c0             	setne  al
c001f1d3:	83 c4 24             	add    esp,0x24
c001f1d6:	c3                   	ret    
c001f1d7:	90                   	nop

c001f1d8 <CPU::cpuidCheckECX(unsigned int)>:
c001f1d8:	83 ec 10             	sub    esp,0x10
c001f1db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1df:	50                   	push   eax
c001f1e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1e4:	50                   	push   eax
c001f1e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1e9:	50                   	push   eax
c001f1ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1ee:	50                   	push   eax
c001f1ef:	6a 01                	push   0x1
c001f1f1:	e8 30 ff ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1fa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f1fe:	0f 95 c0             	setne  al
c001f201:	83 c4 24             	add    esp,0x24
c001f204:	c3                   	ret    
c001f205:	90                   	nop

c001f206 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f206:	83 ec 10             	sub    esp,0x10
c001f209:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f20d:	50                   	push   eax
c001f20e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f212:	50                   	push   eax
c001f213:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f217:	50                   	push   eax
c001f218:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f21c:	50                   	push   eax
c001f21d:	6a 07                	push   0x7
c001f21f:	e8 02 ff ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f224:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f228:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f22c:	0f 95 c0             	setne  al
c001f22f:	83 c4 24             	add    esp,0x24
c001f232:	c3                   	ret    
c001f233:	90                   	nop

c001f234 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f234:	83 ec 10             	sub    esp,0x10
c001f237:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f23b:	50                   	push   eax
c001f23c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f240:	50                   	push   eax
c001f241:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f245:	50                   	push   eax
c001f246:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f24a:	50                   	push   eax
c001f24b:	6a 07                	push   0x7
c001f24d:	e8 d4 fe ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f252:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f256:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f25a:	0f 95 c0             	setne  al
c001f25d:	83 c4 24             	add    esp,0x24
c001f260:	c3                   	ret    
c001f261:	90                   	nop

c001f262 <CPU::CPU()>:
c001f262:	83 ec 0c             	sub    esp,0xc
c001f265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f269:	83 ec 08             	sub    esp,0x8
c001f26c:	68 f5 2a 03 c0       	push   0xc0032af5
c001f271:	50                   	push   eax
c001f272:	e8 cb c4 ff ff       	call   c001b742 <Device::Device(char const*)>
c001f277:	83 c4 10             	add    esp,0x10
c001f27a:	ba 88 2b 03 c0       	mov    edx,0xc0032b88
c001f27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f283:	89 10                	mov    DWORD PTR [eax],edx
c001f285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f289:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f297:	05 78 01 00 00       	add    eax,0x178
c001f29c:	83 ec 0c             	sub    esp,0xc
c001f29f:	50                   	push   eax
c001f2a0:	e8 2d 6c ff ff       	call   c0015ed2 <GDT::GDT()>
c001f2a5:	83 c4 10             	add    esp,0x10
c001f2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ac:	05 7c 09 00 00       	add    eax,0x97c
c001f2b1:	83 ec 0c             	sub    esp,0xc
c001f2b4:	50                   	push   eax
c001f2b5:	e8 66 6e ff ff       	call   c0016120 <IDT::IDT()>
c001f2ba:	83 c4 10             	add    esp,0x10
c001f2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c1:	05 7c 11 00 00       	add    eax,0x117c
c001f2c6:	83 ec 0c             	sub    esp,0xc
c001f2c9:	50                   	push   eax
c001f2ca:	e8 9d 88 ff ff       	call   c0017b6c <TSS::TSS()>
c001f2cf:	83 c4 10             	add    esp,0x10
c001f2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d6:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e1:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f2eb:	90                   	nop
c001f2ec:	83 c4 0c             	add    esp,0xc
c001f2ef:	c3                   	ret    

c001f2f0 <CPU::displayFeatures()>:
c001f2f0:	c3                   	ret    
c001f2f1:	90                   	nop

c001f2f2 <CPU::detectFeatures()>:
c001f2f2:	55                   	push   ebp
c001f2f3:	57                   	push   edi
c001f2f4:	56                   	push   esi
c001f2f5:	53                   	push   ebx
c001f2f6:	83 ec 30             	sub    esp,0x30
c001f2f9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f2fd:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f307:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f30d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f314:	6a 0d                	push   0xd
c001f316:	6a 00                	push   0x0
c001f318:	55                   	push   ebp
c001f319:	e8 d2 11 fe ff       	call   c00004f0 <memset>
c001f31e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f323:	83 c4 10             	add    esp,0x10
c001f326:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f32d:	0f 84 db 05 00 00    	je     c001f90e <CPU::detectFeatures()+0x61c>
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	89 ef                	mov    edi,ebp
c001f338:	6a 10                	push   0x10
c001f33a:	e8 6b fe ff ff       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c001f33f:	83 e0 01             	and    eax,0x1
c001f342:	8d 14 00             	lea    edx,[eax+eax*1]
c001f345:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f34b:	83 e0 fd             	and    eax,0xfffffffd
c001f34e:	09 d0                	or     eax,edx
c001f350:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f356:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f35d:	e8 48 fe ff ff       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c001f362:	83 e0 01             	and    eax,0x1
c001f365:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f36c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f372:	83 e0 fb             	and    eax,0xfffffffb
c001f375:	09 d0                	or     eax,edx
c001f377:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f37d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f384:	e8 21 fe ff ff       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c001f389:	83 e0 01             	and    eax,0x1
c001f38c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f393:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f399:	83 e0 f7             	and    eax,0xfffffff7
c001f39c:	09 d0                	or     eax,edx
c001f39e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3a4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f3ab:	e8 fa fd ff ff       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c001f3b0:	83 e0 01             	and    eax,0x1
c001f3b3:	c1 e0 04             	shl    eax,0x4
c001f3b6:	89 c2                	mov    edx,eax
c001f3b8:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3be:	83 e0 ef             	and    eax,0xffffffef
c001f3c1:	09 d0                	or     eax,edx
c001f3c3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3c9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f3d0:	e8 d5 fd ff ff       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c001f3d5:	83 e0 01             	and    eax,0x1
c001f3d8:	c1 e0 05             	shl    eax,0x5
c001f3db:	89 c2                	mov    edx,eax
c001f3dd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3e3:	83 e0 df             	and    eax,0xffffffdf
c001f3e6:	09 d0                	or     eax,edx
c001f3e8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f3f5:	e8 b0 fd ff ff       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c001f3fa:	83 e0 01             	and    eax,0x1
c001f3fd:	8d 14 00             	lea    edx,[eax+eax*1]
c001f400:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f406:	83 e0 fd             	and    eax,0xfffffffd
c001f409:	09 d0                	or     eax,edx
c001f40b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f411:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f418:	e8 8d fd ff ff       	call   c001f1aa <CPU::cpuidCheckEDX(unsigned int)>
c001f41d:	83 e0 01             	and    eax,0x1
c001f420:	c1 e0 06             	shl    eax,0x6
c001f423:	89 c2                	mov    edx,eax
c001f425:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f42b:	83 e0 bf             	and    eax,0xffffffbf
c001f42e:	09 d0                	or     eax,edx
c001f430:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f436:	58                   	pop    eax
c001f437:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f43b:	50                   	push   eax
c001f43c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f440:	50                   	push   eax
c001f441:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f445:	56                   	push   esi
c001f446:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f44a:	50                   	push   eax
c001f44b:	6a 00                	push   0x0
c001f44d:	e8 d4 fc ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f452:	b8 04 00 00 00       	mov    eax,0x4
c001f457:	89 c1                	mov    ecx,eax
c001f459:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f45b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f461:	89 c1                	mov    ecx,eax
c001f463:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f467:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f469:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f46f:	89 c1                	mov    ecx,eax
c001f471:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f475:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f477:	83 c4 18             	add    esp,0x18
c001f47a:	68 04 2a 03 c0       	push   0xc0032a04
c001f47f:	55                   	push   ebp
c001f480:	e8 fb 12 fe ff       	call   c0000780 <strcmp>
c001f485:	83 c4 10             	add    esp,0x10
c001f488:	85 c0                	test   eax,eax
c001f48a:	75 0f                	jne    c001f49b <CPU::detectFeatures()+0x1a9>
c001f48c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f496:	e9 22 02 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f49b:	50                   	push   eax
c001f49c:	50                   	push   eax
c001f49d:	68 11 2a 03 c0       	push   0xc0032a11
c001f4a2:	55                   	push   ebp
c001f4a3:	e8 d8 12 fe ff       	call   c0000780 <strcmp>
c001f4a8:	83 c4 10             	add    esp,0x10
c001f4ab:	85 c0                	test   eax,eax
c001f4ad:	74 dd                	je     c001f48c <CPU::detectFeatures()+0x19a>
c001f4af:	50                   	push   eax
c001f4b0:	50                   	push   eax
c001f4b1:	68 1e 2a 03 c0       	push   0xc0032a1e
c001f4b6:	55                   	push   ebp
c001f4b7:	e8 c4 12 fe ff       	call   c0000780 <strcmp>
c001f4bc:	83 c4 10             	add    esp,0x10
c001f4bf:	85 c0                	test   eax,eax
c001f4c1:	74 2a                	je     c001f4ed <CPU::detectFeatures()+0x1fb>
c001f4c3:	50                   	push   eax
c001f4c4:	50                   	push   eax
c001f4c5:	68 2b 2a 03 c0       	push   0xc0032a2b
c001f4ca:	55                   	push   ebp
c001f4cb:	e8 b0 12 fe ff       	call   c0000780 <strcmp>
c001f4d0:	83 c4 10             	add    esp,0x10
c001f4d3:	85 c0                	test   eax,eax
c001f4d5:	74 16                	je     c001f4ed <CPU::detectFeatures()+0x1fb>
c001f4d7:	50                   	push   eax
c001f4d8:	50                   	push   eax
c001f4d9:	68 38 2a 03 c0       	push   0xc0032a38
c001f4de:	55                   	push   ebp
c001f4df:	e8 9c 12 fe ff       	call   c0000780 <strcmp>
c001f4e4:	83 c4 10             	add    esp,0x10
c001f4e7:	85 c0                	test   eax,eax
c001f4e9:	74 48                	je     c001f533 <CPU::detectFeatures()+0x241>
c001f4eb:	eb 0f                	jmp    c001f4fc <CPU::detectFeatures()+0x20a>
c001f4ed:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f4f7:	e9 c1 01 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f4fc:	50                   	push   eax
c001f4fd:	50                   	push   eax
c001f4fe:	68 45 2a 03 c0       	push   0xc0032a45
c001f503:	55                   	push   ebp
c001f504:	e8 77 12 fe ff       	call   c0000780 <strcmp>
c001f509:	83 c4 10             	add    esp,0x10
c001f50c:	85 c0                	test   eax,eax
c001f50e:	74 23                	je     c001f533 <CPU::detectFeatures()+0x241>
c001f510:	57                   	push   edi
c001f511:	57                   	push   edi
c001f512:	68 52 2a 03 c0       	push   0xc0032a52
c001f517:	55                   	push   ebp
c001f518:	e8 63 12 fe ff       	call   c0000780 <strcmp>
c001f51d:	83 c4 10             	add    esp,0x10
c001f520:	85 c0                	test   eax,eax
c001f522:	75 1e                	jne    c001f542 <CPU::detectFeatures()+0x250>
c001f524:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f52e:	e9 8a 01 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f533:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f53d:	e9 7b 01 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f542:	56                   	push   esi
c001f543:	56                   	push   esi
c001f544:	68 5f 2a 03 c0       	push   0xc0032a5f
c001f549:	55                   	push   ebp
c001f54a:	e8 31 12 fe ff       	call   c0000780 <strcmp>
c001f54f:	83 c4 10             	add    esp,0x10
c001f552:	85 c0                	test   eax,eax
c001f554:	75 0f                	jne    c001f565 <CPU::detectFeatures()+0x273>
c001f556:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f560:	e9 58 01 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f565:	51                   	push   ecx
c001f566:	51                   	push   ecx
c001f567:	68 1e 2a 03 c0       	push   0xc0032a1e
c001f56c:	55                   	push   ebp
c001f56d:	e8 0e 12 fe ff       	call   c0000780 <strcmp>
c001f572:	83 c4 10             	add    esp,0x10
c001f575:	85 c0                	test   eax,eax
c001f577:	75 0f                	jne    c001f588 <CPU::detectFeatures()+0x296>
c001f579:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f583:	e9 35 01 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f588:	52                   	push   edx
c001f589:	52                   	push   edx
c001f58a:	68 6c 2a 03 c0       	push   0xc0032a6c
c001f58f:	55                   	push   ebp
c001f590:	e8 eb 11 fe ff       	call   c0000780 <strcmp>
c001f595:	83 c4 10             	add    esp,0x10
c001f598:	85 c0                	test   eax,eax
c001f59a:	75 0f                	jne    c001f5ab <CPU::detectFeatures()+0x2b9>
c001f59c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f5a6:	e9 12 01 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f5ab:	50                   	push   eax
c001f5ac:	50                   	push   eax
c001f5ad:	68 79 2a 03 c0       	push   0xc0032a79
c001f5b2:	55                   	push   ebp
c001f5b3:	e8 c8 11 fe ff       	call   c0000780 <strcmp>
c001f5b8:	83 c4 10             	add    esp,0x10
c001f5bb:	85 c0                	test   eax,eax
c001f5bd:	75 0f                	jne    c001f5ce <CPU::detectFeatures()+0x2dc>
c001f5bf:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f5c9:	e9 ef 00 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f5ce:	50                   	push   eax
c001f5cf:	50                   	push   eax
c001f5d0:	68 86 2a 03 c0       	push   0xc0032a86
c001f5d5:	55                   	push   ebp
c001f5d6:	e8 a5 11 fe ff       	call   c0000780 <strcmp>
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	85 c0                	test   eax,eax
c001f5e0:	75 0f                	jne    c001f5f1 <CPU::detectFeatures()+0x2ff>
c001f5e2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f5ec:	e9 cc 00 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f5f1:	50                   	push   eax
c001f5f2:	50                   	push   eax
c001f5f3:	68 93 2a 03 c0       	push   0xc0032a93
c001f5f8:	55                   	push   ebp
c001f5f9:	e8 82 11 fe ff       	call   c0000780 <strcmp>
c001f5fe:	83 c4 10             	add    esp,0x10
c001f601:	85 c0                	test   eax,eax
c001f603:	75 0f                	jne    c001f614 <CPU::detectFeatures()+0x322>
c001f605:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f60f:	e9 a9 00 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f614:	50                   	push   eax
c001f615:	50                   	push   eax
c001f616:	68 a0 2a 03 c0       	push   0xc0032aa0
c001f61b:	55                   	push   ebp
c001f61c:	e8 5f 11 fe ff       	call   c0000780 <strcmp>
c001f621:	83 c4 10             	add    esp,0x10
c001f624:	85 c0                	test   eax,eax
c001f626:	75 0f                	jne    c001f637 <CPU::detectFeatures()+0x345>
c001f628:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f632:	e9 86 00 00 00       	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f637:	50                   	push   eax
c001f638:	50                   	push   eax
c001f639:	68 ad 2a 03 c0       	push   0xc0032aad
c001f63e:	55                   	push   ebp
c001f63f:	e8 3c 11 fe ff       	call   c0000780 <strcmp>
c001f644:	83 c4 10             	add    esp,0x10
c001f647:	85 c0                	test   eax,eax
c001f649:	75 0c                	jne    c001f657 <CPU::detectFeatures()+0x365>
c001f64b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f655:	eb 66                	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f657:	50                   	push   eax
c001f658:	50                   	push   eax
c001f659:	68 ba 2a 03 c0       	push   0xc0032aba
c001f65e:	55                   	push   ebp
c001f65f:	e8 1c 11 fe ff       	call   c0000780 <strcmp>
c001f664:	83 c4 10             	add    esp,0x10
c001f667:	85 c0                	test   eax,eax
c001f669:	75 0c                	jne    c001f677 <CPU::detectFeatures()+0x385>
c001f66b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f675:	eb 46                	jmp    c001f6bd <CPU::detectFeatures()+0x3cb>
c001f677:	57                   	push   edi
c001f678:	57                   	push   edi
c001f679:	68 c7 2a 03 c0       	push   0xc0032ac7
c001f67e:	55                   	push   ebp
c001f67f:	e8 fc 10 fe ff       	call   c0000780 <strcmp>
c001f684:	83 c4 10             	add    esp,0x10
c001f687:	85 c0                	test   eax,eax
c001f689:	74 e0                	je     c001f66b <CPU::detectFeatures()+0x379>
c001f68b:	56                   	push   esi
c001f68c:	56                   	push   esi
c001f68d:	68 d4 2a 03 c0       	push   0xc0032ad4
c001f692:	55                   	push   ebp
c001f693:	e8 e8 10 fe ff       	call   c0000780 <strcmp>
c001f698:	83 c4 10             	add    esp,0x10
c001f69b:	85 c0                	test   eax,eax
c001f69d:	74 cc                	je     c001f66b <CPU::detectFeatures()+0x379>
c001f69f:	51                   	push   ecx
c001f6a0:	51                   	push   ecx
c001f6a1:	68 e1 2a 03 c0       	push   0xc0032ae1
c001f6a6:	55                   	push   ebp
c001f6a7:	e8 d4 10 fe ff       	call   c0000780 <strcmp>
c001f6ac:	83 c4 10             	add    esp,0x10
c001f6af:	85 c0                	test   eax,eax
c001f6b1:	74 b8                	je     c001f66b <CPU::detectFeatures()+0x379>
c001f6b3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f6bd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f6c2:	0f 86 be 00 00 00    	jbe    c001f786 <CPU::detectFeatures()+0x494>
c001f6c8:	83 ec 0c             	sub    esp,0xc
c001f6cb:	68 80 00 00 00       	push   0x80
c001f6d0:	e8 31 fb ff ff       	call   c001f206 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f6d5:	83 e0 01             	and    eax,0x1
c001f6d8:	c1 e0 06             	shl    eax,0x6
c001f6db:	89 c2                	mov    edx,eax
c001f6dd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f6e3:	83 e0 bf             	and    eax,0xffffffbf
c001f6e6:	09 d0                	or     eax,edx
c001f6e8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f6ee:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f6f5:	e8 0c fb ff ff       	call   c001f206 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f6fa:	83 e0 01             	and    eax,0x1
c001f6fd:	c1 e0 04             	shl    eax,0x4
c001f700:	89 c2                	mov    edx,eax
c001f702:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f708:	83 e0 ef             	and    eax,0xffffffef
c001f70b:	09 d0                	or     eax,edx
c001f70d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f713:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f71a:	e8 e7 fa ff ff       	call   c001f206 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f71f:	89 c2                	mov    edx,eax
c001f721:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f727:	c1 e2 07             	shl    edx,0x7
c001f72a:	83 e0 7f             	and    eax,0x7f
c001f72d:	09 d0                	or     eax,edx
c001f72f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f735:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f73c:	e8 f3 fa ff ff       	call   c001f234 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f741:	83 e0 01             	and    eax,0x1
c001f744:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f74b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f751:	83 e0 f7             	and    eax,0xfffffff7
c001f754:	09 d0                	or     eax,edx
c001f756:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f75c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f763:	e8 cc fa ff ff       	call   c001f234 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f768:	83 c4 10             	add    esp,0x10
c001f76b:	83 e0 01             	and    eax,0x1
c001f76e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f775:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f77b:	83 e0 fb             	and    eax,0xfffffffb
c001f77e:	09 d0                	or     eax,edx
c001f780:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f786:	83 ec 0c             	sub    esp,0xc
c001f789:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f78d:	50                   	push   eax
c001f78e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f792:	50                   	push   eax
c001f793:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f797:	57                   	push   edi
c001f798:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f79c:	56                   	push   esi
c001f79d:	6a 01                	push   0x1
c001f79f:	e8 82 f9 ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f7a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f7a8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f7ae:	89 c1                	mov    ecx,eax
c001f7b0:	83 e1 0f             	and    ecx,0xf
c001f7b3:	83 e2 f0             	and    edx,0xfffffff0
c001f7b6:	09 ca                	or     edx,ecx
c001f7b8:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f7be:	89 c2                	mov    edx,eax
c001f7c0:	c1 ea 04             	shr    edx,0x4
c001f7c3:	83 e2 0f             	and    edx,0xf
c001f7c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f7ca:	89 d1                	mov    ecx,edx
c001f7cc:	83 c4 20             	add    esp,0x20
c001f7cf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f7d5:	c1 e1 06             	shl    ecx,0x6
c001f7d8:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f7de:	09 ca                	or     edx,ecx
c001f7e0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f7e7:	89 c2                	mov    edx,eax
c001f7e9:	c1 ea 08             	shr    edx,0x8
c001f7ec:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f7f2:	83 e2 0f             	and    edx,0xf
c001f7f5:	89 d5                	mov    ebp,edx
c001f7f7:	83 e5 03             	and    ebp,0x3
c001f7fa:	c1 e5 06             	shl    ebp,0x6
c001f7fd:	83 e1 3f             	and    ecx,0x3f
c001f800:	09 e9                	or     ecx,ebp
c001f802:	89 d5                	mov    ebp,edx
c001f804:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f80a:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f810:	c1 ed 02             	shr    ebp,0x2
c001f813:	83 e1 c0             	and    ecx,0xffffffc0
c001f816:	09 e9                	or     ecx,ebp
c001f818:	89 c5                	mov    ebp,eax
c001f81a:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f820:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f826:	c1 ed 08             	shr    ebp,0x8
c001f829:	83 e5 30             	and    ebp,0x30
c001f82c:	83 e1 cf             	and    ecx,0xffffffcf
c001f82f:	09 e9                	or     ecx,ebp
c001f831:	83 fa 06             	cmp    edx,0x6
c001f834:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f83a:	74 05                	je     c001f841 <CPU::detectFeatures()+0x54f>
c001f83c:	83 fa 0f             	cmp    edx,0xf
c001f83f:	75 64                	jne    c001f8a5 <CPU::detectFeatures()+0x5b3>
c001f841:	89 c1                	mov    ecx,eax
c001f843:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f849:	c1 e9 10             	shr    ecx,0x10
c001f84c:	c1 e1 04             	shl    ecx,0x4
c001f84f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f853:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f859:	0f b6 c9             	movzx  ecx,cl
c001f85c:	c1 e1 06             	shl    ecx,0x6
c001f85f:	09 e9                	or     ecx,ebp
c001f861:	83 fa 0f             	cmp    edx,0xf
c001f864:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f86b:	75 38                	jne    c001f8a5 <CPU::detectFeatures()+0x5b3>
c001f86d:	c1 e8 14             	shr    eax,0x14
c001f870:	83 c0 0f             	add    eax,0xf
c001f873:	0f b6 c0             	movzx  eax,al
c001f876:	89 c2                	mov    edx,eax
c001f878:	c1 e8 02             	shr    eax,0x2
c001f87b:	83 e2 03             	and    edx,0x3
c001f87e:	89 d1                	mov    ecx,edx
c001f880:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f886:	c1 e1 06             	shl    ecx,0x6
c001f889:	83 e2 3f             	and    edx,0x3f
c001f88c:	09 ca                	or     edx,ecx
c001f88e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f894:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f89a:	83 e2 c0             	and    edx,0xffffffc0
c001f89d:	09 d0                	or     eax,edx
c001f89f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f8a5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f8ab:	83 ec 0c             	sub    esp,0xc
c001f8ae:	83 c8 07             	or     eax,0x7
c001f8b1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f8b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f8bb:	50                   	push   eax
c001f8bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f8c0:	55                   	push   ebp
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	68 00 00 00 80       	push   0x80000000
c001f8c8:	e8 59 f8 ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f8cd:	83 c4 20             	add    esp,0x20
c001f8d0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f8d8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8dc:	76 1e                	jbe    c001f8fc <CPU::detectFeatures()+0x60a>
c001f8de:	83 ec 0c             	sub    esp,0xc
c001f8e1:	50                   	push   eax
c001f8e2:	55                   	push   ebp
c001f8e3:	57                   	push   edi
c001f8e4:	56                   	push   esi
c001f8e5:	68 01 00 00 80       	push   0x80000001
c001f8ea:	e8 37 f8 ff ff       	call   c001f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f8ef:	83 c4 20             	add    esp,0x20
c001f8f2:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f8fc:	52                   	push   edx
c001f8fd:	52                   	push   edx
c001f8fe:	68 ed 2a 03 c0       	push   0xc0032aed
c001f903:	53                   	push   ebx
c001f904:	e8 2b be ff ff       	call   c001b734 <Device::setName(char const*)>
c001f909:	83 c4 10             	add    esp,0x10
c001f90c:	eb 69                	jmp    c001f977 <CPU::detectFeatures()+0x685>
c001f90e:	50                   	push   eax
c001f90f:	50                   	push   eax
c001f910:	68 52 2a 03 c0       	push   0xc0032a52
c001f915:	55                   	push   ebp
c001f916:	e8 35 0d fe ff       	call   c0000650 <strcpy>
c001f91b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f925:	e8 99 08 fe ff       	call   c00001c3 <is486>
c001f92a:	83 c4 10             	add    esp,0x10
c001f92d:	85 c0                	test   eax,eax
c001f92f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f935:	74 1f                	je     c001f956 <CPU::detectFeatures()+0x664>
c001f937:	83 c8 07             	or     eax,0x7
c001f93a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f940:	0f 20 c0             	mov    eax,cr0
c001f943:	83 e0 14             	and    eax,0x14
c001f946:	83 f8 04             	cmp    eax,0x4
c001f949:	75 10                	jne    c001f95b <CPU::detectFeatures()+0x669>
c001f94b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f951:	83 e0 fd             	and    eax,0xfffffffd
c001f954:	eb 1b                	jmp    c001f971 <CPU::detectFeatures()+0x67f>
c001f956:	83 e0 f8             	and    eax,0xfffffff8
c001f959:	eb df                	jmp    c001f93a <CPU::detectFeatures()+0x648>
c001f95b:	e8 3e 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f960:	83 e0 01             	and    eax,0x1
c001f963:	8d 14 00             	lea    edx,[eax+eax*1]
c001f966:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f96c:	83 e0 fd             	and    eax,0xfffffffd
c001f96f:	09 d0                	or     eax,edx
c001f971:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f977:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f97e:	74 17                	je     c001f997 <CPU::detectFeatures()+0x6a5>
c001f980:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f986:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f98c:	83 c8 10             	or     eax,0x10
c001f98f:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f995:	eb 20                	jmp    c001f9b7 <CPU::detectFeatures()+0x6c5>
c001f997:	e8 02 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f99c:	83 e0 01             	and    eax,0x1
c001f99f:	8d 14 00             	lea    edx,[eax+eax*1]
c001f9a2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f9a8:	83 e0 fd             	and    eax,0xfffffffd
c001f9ab:	09 d0                	or     eax,edx
c001f9ad:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f9b3:	a8 02                	test   al,0x2
c001f9b5:	75 c9                	jne    c001f980 <CPU::detectFeatures()+0x68e>
c001f9b7:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f9be:	83 c4 2c             	add    esp,0x2c
c001f9c1:	5b                   	pop    ebx
c001f9c2:	5e                   	pop    esi
c001f9c3:	5f                   	pop    edi
c001f9c4:	5d                   	pop    ebp
c001f9c5:	c3                   	ret    

c001f9c6 <CPU::setupSMEP()>:
c001f9c6:	0f 20 e0             	mov    eax,cr4
c001f9c9:	0d 00 00 10 00       	or     eax,0x100000
c001f9ce:	0f 22 e0             	mov    cr4,eax
c001f9d1:	c3                   	ret    

c001f9d2 <CPU::setupUMIP()>:
c001f9d2:	0f 20 e0             	mov    eax,cr4
c001f9d5:	80 cc 08             	or     ah,0x8
c001f9d8:	0f 22 e0             	mov    cr4,eax
c001f9db:	c3                   	ret    

c001f9dc <CPU::setupTSC()>:
c001f9dc:	0f 20 e0             	mov    eax,cr4
c001f9df:	83 c8 04             	or     eax,0x4
c001f9e2:	0f 22 e0             	mov    cr4,eax
c001f9e5:	c3                   	ret    

c001f9e6 <CPU::setupLargePages()>:
c001f9e6:	0f 20 e0             	mov    eax,cr4
c001f9e9:	83 c8 10             	or     eax,0x10
c001f9ec:	0f 22 e0             	mov    cr4,eax
c001f9ef:	c3                   	ret    

c001f9f0 <CPU::setupPAT()>:
c001f9f0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f9f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f9fc:	74 2c                	je     c001fa2a <CPU::setupPAT()+0x3a>
c001f9fe:	53                   	push   ebx
c001f9ff:	83 ec 10             	sub    esp,0x10
c001fa02:	68 77 02 00 00       	push   0x277
c001fa07:	50                   	push   eax
c001fa08:	e8 2b 62 ff ff       	call   c0015c38 <Computer::rdmsr(unsigned int)>
c001fa0d:	83 e2 f8             	and    edx,0xfffffff8
c001fa10:	83 ca 01             	or     edx,0x1
c001fa13:	52                   	push   edx
c001fa14:	50                   	push   eax
c001fa15:	68 77 02 00 00       	push   0x277
c001fa1a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001fa20:	e8 3f 62 ff ff       	call   c0015c64 <Computer::wrmsr(unsigned int, unsigned long long)>
c001fa25:	83 c4 28             	add    esp,0x28
c001fa28:	5b                   	pop    ebx
c001fa29:	c3                   	ret    
c001fa2a:	c3                   	ret    
c001fa2b:	90                   	nop

c001fa2c <CPU::setupMTRR()>:
c001fa2c:	c3                   	ret    
c001fa2d:	90                   	nop

c001fa2e <CPU::setupGlobalPages()>:
c001fa2e:	0f 20 e0             	mov    eax,cr4
c001fa31:	0c 80                	or     al,0x80
c001fa33:	0f 22 e0             	mov    cr4,eax
c001fa36:	c3                   	ret    
c001fa37:	90                   	nop

c001fa38 <CPU::allowUsermodeDataAccess()>:
c001fa38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa43:	74 03                	je     c001fa48 <CPU::allowUsermodeDataAccess()+0x10>
c001fa45:	0f 01 cb             	stac   
c001fa48:	c3                   	ret    
c001fa49:	90                   	nop

c001fa4a <CPU::prohibitUsermodeDataAccess()>:
c001fa4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa55:	74 03                	je     c001fa5a <CPU::prohibitUsermodeDataAccess()+0x10>
c001fa57:	0f 01 ca             	clac   
c001fa5a:	c3                   	ret    
c001fa5b:	90                   	nop

c001fa5c <CPU::setupSMAP()>:
c001fa5c:	0f 20 e0             	mov    eax,cr4
c001fa5f:	0d 00 00 20 00       	or     eax,0x200000
c001fa64:	0f 22 e0             	mov    cr4,eax
c001fa67:	eb e1                	jmp    c001fa4a <CPU::prohibitUsermodeDataAccess()>
c001fa69:	90                   	nop

c001fa6a <CPU::setupFeatures()>:
c001fa6a:	53                   	push   ebx
c001fa6b:	83 ec 08             	sub    esp,0x8
c001fa6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa72:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001fa79:	74 18                	je     c001fa93 <CPU::setupFeatures()+0x29>
c001fa7b:	83 ec 0c             	sub    esp,0xc
c001fa7e:	68 f9 2a 03 c0       	push   0xc0032af9
c001fa83:	e8 c2 9a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001fa88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa8b:	e8 42 ff ff ff       	call   c001f9d2 <CPU::setupUMIP()>
c001fa90:	83 c4 10             	add    esp,0x10
c001fa93:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fa9a:	74 18                	je     c001fab4 <CPU::setupFeatures()+0x4a>
c001fa9c:	83 ec 0c             	sub    esp,0xc
c001fa9f:	68 03 2b 03 c0       	push   0xc0032b03
c001faa4:	e8 a1 9a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001faa9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001faac:	e8 2b ff ff ff       	call   c001f9dc <CPU::setupTSC()>
c001fab1:	83 c4 10             	add    esp,0x10
c001fab4:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fabb:	74 18                	je     c001fad5 <CPU::setupFeatures()+0x6b>
c001fabd:	83 ec 0c             	sub    esp,0xc
c001fac0:	68 0c 2b 03 c0       	push   0xc0032b0c
c001fac5:	e8 80 9a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001faca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001facd:	e8 14 ff ff ff       	call   c001f9e6 <CPU::setupLargePages()>
c001fad2:	83 c4 10             	add    esp,0x10
c001fad5:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001fadc:	74 18                	je     c001faf6 <CPU::setupFeatures()+0x8c>
c001fade:	83 ec 0c             	sub    esp,0xc
c001fae1:	68 15 2b 03 c0       	push   0xc0032b15
c001fae6:	e8 5f 9a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001faeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001faee:	e8 3b ff ff ff       	call   c001fa2e <CPU::setupGlobalPages()>
c001faf3:	83 c4 10             	add    esp,0x10
c001faf6:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fafd:	74 18                	je     c001fb17 <CPU::setupFeatures()+0xad>
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	68 27 2b 03 c0       	push   0xc0032b27
c001fb07:	e8 3e 9a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001fb0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb0f:	e8 dc fe ff ff       	call   c001f9f0 <CPU::setupPAT()>
c001fb14:	83 c4 10             	add    esp,0x10
c001fb17:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001fb1e:	74 11                	je     c001fb31 <CPU::setupFeatures()+0xc7>
c001fb20:	c7 44 24 10 30 2b 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032b30
c001fb28:	83 c4 08             	add    esp,0x8
c001fb2b:	5b                   	pop    ebx
c001fb2c:	e9 19 9a ff ff       	jmp    c001954a <Dbg::kprintf(char const*, ...)>
c001fb31:	83 c4 08             	add    esp,0x8
c001fb34:	5b                   	pop    ebx
c001fb35:	c3                   	ret    

c001fb36 <CPU::open(int, int, void*)>:
c001fb36:	55                   	push   ebp
c001fb37:	57                   	push   edi
c001fb38:	56                   	push   esi
c001fb39:	53                   	push   ebx
c001fb3a:	83 ec 18             	sub    esp,0x18
c001fb3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fb41:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fb45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fb49:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fb4f:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fb55:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fb5b:	50                   	push   eax
c001fb5c:	e8 d3 63 ff ff       	call   c0015f34 <GDT::setup()>
c001fb61:	83 c4 0c             	add    esp,0xc
c001fb64:	6a 00                	push   0x0
c001fb66:	68 ef be ad de       	push   0xdeadbeef
c001fb6b:	55                   	push   ebp
c001fb6c:	e8 3f 80 ff ff       	call   c0017bb0 <TSS::setup(unsigned long, unsigned long)>
c001fb71:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fb74:	e8 17 80 ff ff       	call   c0017b90 <TSS::flush()>
c001fb79:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fb7f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb82:	e8 0f 66 ff ff       	call   c0016196 <IDT::setup()>
c001fb87:	b8 00 04 00 00       	mov    eax,0x400
c001fb8c:	0f 23 f8             	mov    db7,eax
c001fb8f:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fb99:	e8 85 6e ff ff       	call   c0016a23 <Phys::allocatePage()>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	85 f6                	test   esi,esi
c001fba3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fba9:	89 38                	mov    DWORD PTR [eax],edi
c001fbab:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbb1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fbb4:	74 10                	je     c001fbc6 <CPU::open(int, int, void*)+0x90>
c001fbb6:	50                   	push   eax
c001fbb7:	50                   	push   eax
c001fbb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbbe:	56                   	push   esi
c001fbbf:	e8 08 89 ff ff       	call   c00184cc <VAS::setCPUSpecific(unsigned long)>
c001fbc4:	eb 0d                	jmp    c001fbd3 <CPU::open(int, int, void*)+0x9d>
c001fbc6:	83 ec 0c             	sub    esp,0xc
c001fbc9:	68 3a 2b 03 c0       	push   0xc0032b3a
c001fbce:	e8 ff 08 00 00       	call   c00204d2 <KePanic(char const*)>
c001fbd3:	83 c4 10             	add    esp,0x10
c001fbd6:	83 ec 0c             	sub    esp,0xc
c001fbd9:	68 48 2b 03 c0       	push   0xc0032b48
c001fbde:	e8 8e 01 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001fbe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbe6:	e8 07 f7 ff ff       	call   c001f2f2 <CPU::detectFeatures()>
c001fbeb:	c7 04 24 6b 2b 03 c0 	mov    DWORD PTR [esp],0xc0032b6b
c001fbf2:	e8 7a 01 00 00       	call   c001fd71 <KeSetBootMessage(char const*)>
c001fbf7:	e8 5f 77 00 00       	call   c002735b <HalInitialise()>
c001fbfc:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001fc01:	83 e0 10             	and    eax,0x10
c001fc04:	83 f8 01             	cmp    eax,0x1
c001fc07:	19 c0                	sbb    eax,eax
c001fc09:	83 e0 46             	and    eax,0x46
c001fc0c:	83 c0 1e             	add    eax,0x1e
c001fc0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc12:	e8 06 d4 ff ff       	call   c001d01d <setupTimer(int)>
c001fc17:	83 c4 10             	add    esp,0x10
c001fc1a:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001fc21:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fc27:	74 0c                	je     c001fc35 <CPU::open(int, int, void*)+0xff>
c001fc29:	83 ec 0c             	sub    esp,0xc
c001fc2c:	53                   	push   ebx
c001fc2d:	e8 38 fe ff ff       	call   c001fa6a <CPU::setupFeatures()>
c001fc32:	83 c4 10             	add    esp,0x10
c001fc35:	83 c4 0c             	add    esp,0xc
c001fc38:	31 c0                	xor    eax,eax
c001fc3a:	5b                   	pop    ebx
c001fc3b:	5e                   	pop    esi
c001fc3c:	5f                   	pop    edi
c001fc3d:	5d                   	pop    ebp
c001fc3e:	c3                   	ret    

c001fc3f <KeInitialiseAtexit()>:
c001fc3f:	83 ec 10             	sub    esp,0x10
c001fc42:	6a 60                	push   0x60
c001fc44:	6a 00                	push   0x0
c001fc46:	68 20 f9 03 c0       	push   0xc003f920
c001fc4b:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001fc55:	e8 96 08 fe ff       	call   c00004f0 <memset>
c001fc5a:	83 c4 1c             	add    esp,0x1c
c001fc5d:	c3                   	ret    

c001fc5e <KeRegisterAtexit(void (*)(void*), void*)>:
c001fc5e:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001fc63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc67:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fc6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fc72:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fc79:	40                   	inc    eax
c001fc7a:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fc7f:	83 f8 17             	cmp    eax,0x17
c001fc82:	7e 0d                	jle    c001fc91 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fc84:	c7 44 24 04 ac 2b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032bac
c001fc8c:	e9 41 08 00 00       	jmp    c00204d2 <KePanic(char const*)>
c001fc91:	c3                   	ret    

c001fc92 <KeExecuteAtexit()>:
c001fc92:	53                   	push   ebx
c001fc93:	31 db                	xor    ebx,ebx
c001fc95:	83 ec 08             	sub    esp,0x8
c001fc98:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fc9e:	7e 50                	jle    c001fcf0 <KeExecuteAtexit()+0x5e>
c001fca0:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fca7:	85 c0                	test   eax,eax
c001fca9:	74 42                	je     c001fced <KeExecuteAtexit()+0x5b>
c001fcab:	51                   	push   ecx
c001fcac:	50                   	push   eax
c001fcad:	53                   	push   ebx
c001fcae:	68 c5 2b 03 c0       	push   0xc0032bc5
c001fcb3:	e8 92 98 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001fcb8:	58                   	pop    eax
c001fcb9:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fcc0:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fcc7:	c7 04 24 e7 2b 03 c0 	mov    DWORD PTR [esp],0xc0032be7
c001fcce:	e8 77 98 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001fcd3:	c7 04 24 c6 14 03 c0 	mov    DWORD PTR [esp],0xc00314c6
c001fcda:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fce5:	e8 60 98 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001fcea:	83 c4 10             	add    esp,0x10
c001fced:	43                   	inc    ebx
c001fcee:	eb a8                	jmp    c001fc98 <KeExecuteAtexit()+0x6>
c001fcf0:	83 c4 08             	add    esp,0x8
c001fcf3:	5b                   	pop    ebx
c001fcf4:	c3                   	ret    

c001fcf5 <KeDisplaySplashScreen()>:
c001fcf5:	55                   	push   ebp
c001fcf6:	bd 05 00 00 00       	mov    ebp,0x5
c001fcfb:	57                   	push   edi
c001fcfc:	bf 0a 00 00 00       	mov    edi,0xa
c001fd01:	56                   	push   esi
c001fd02:	31 f6                	xor    esi,esi
c001fd04:	53                   	push   ebx
c001fd05:	31 db                	xor    ebx,ebx
c001fd07:	83 ec 0c             	sub    esp,0xc
c001fd0a:	0f b6 96 00 40 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc000]
c001fd11:	85 d2                	test   edx,edx
c001fd13:	89 d0                	mov    eax,edx
c001fd15:	74 52                	je     c001fd69 <KeDisplaySplashScreen()+0x74>
c001fd17:	80 bb 36 40 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcbfca],0xdb
c001fd1e:	75 13                	jne    c001fd33 <KeDisplaySplashScreen()+0x3e>
c001fd20:	0f b6 8b 35 40 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcbfcb]
c001fd27:	83 e1 fe             	and    ecx,0xfffffffe
c001fd2a:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fd30:	75 01                	jne    c001fd33 <KeDisplaySplashScreen()+0x3e>
c001fd32:	47                   	inc    edi
c001fd33:	83 fa 0d             	cmp    edx,0xd
c001fd36:	74 28                	je     c001fd60 <KeDisplaySplashScreen()+0x6b>
c001fd38:	83 fa 0a             	cmp    edx,0xa
c001fd3b:	75 0a                	jne    c001fd47 <KeDisplaySplashScreen()+0x52>
c001fd3d:	45                   	inc    ebp
c001fd3e:	bf 0a 00 00 00       	mov    edi,0xa
c001fd43:	31 db                	xor    ebx,ebx
c001fd45:	eb 19                	jmp    c001fd60 <KeDisplaySplashScreen()+0x6b>
c001fd47:	83 ec 0c             	sub    esp,0xc
c001fd4a:	0f be c0             	movsx  eax,al
c001fd4d:	55                   	push   ebp
c001fd4e:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fd51:	43                   	inc    ebx
c001fd52:	52                   	push   edx
c001fd53:	6a 00                	push   0x0
c001fd55:	6a 0e                	push   0xe
c001fd57:	50                   	push   eax
c001fd58:	e8 7b 82 00 00       	call   c0027fd8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fd5d:	83 c4 20             	add    esp,0x20
c001fd60:	46                   	inc    esi
c001fd61:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fd67:	75 a1                	jne    c001fd0a <KeDisplaySplashScreen()+0x15>
c001fd69:	83 c4 0c             	add    esp,0xc
c001fd6c:	5b                   	pop    ebx
c001fd6d:	5e                   	pop    esi
c001fd6e:	5f                   	pop    edi
c001fd6f:	5d                   	pop    ebp
c001fd70:	c3                   	ret    

c001fd71 <KeSetBootMessage(char const*)>:
c001fd71:	57                   	push   edi
c001fd72:	56                   	push   esi
c001fd73:	53                   	push   ebx
c001fd74:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fd7a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fd81:	68 9e 00 00 00       	push   0x9e
c001fd86:	6a 00                	push   0x0
c001fd88:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fd8c:	56                   	push   esi
c001fd8d:	e8 5e 07 fe ff       	call   c00004f0 <memset>
c001fd92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd95:	e8 e6 07 fe ff       	call   c0000580 <strlen>
c001fd9a:	ba 50 00 00 00       	mov    edx,0x50
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	31 c9                	xor    ecx,ecx
c001fda4:	29 c2                	sub    edx,eax
c001fda6:	83 e2 fe             	and    edx,0xfffffffe
c001fda9:	01 f2                	add    edx,esi
c001fdab:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fdb0:	84 c0                	test   al,al
c001fdb2:	74 0a                	je     c001fdbe <KeSetBootMessage(char const*)+0x4d>
c001fdb4:	80 cc 0f             	or     ah,0xf
c001fdb7:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fdbb:	41                   	inc    ecx
c001fdbc:	eb ed                	jmp    c001fdab <KeSetBootMessage(char const*)+0x3a>
c001fdbe:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fdc3:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fdc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdca:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fdd0:	5b                   	pop    ebx
c001fdd1:	5e                   	pop    esi
c001fdd2:	5f                   	pop    edi
c001fdd3:	c3                   	ret    

c001fdd4 <CUnlockScheduler>:
c001fdd4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fdd9:	83 e8 01             	sub    eax,0x1
c001fddc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fde1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fde6:	85 c0                	test   eax,eax
c001fde8:	75 02                	jne    c001fdec <CUnlockScheduler+0x18>
c001fdea:	fb                   	sti    
c001fdeb:	90                   	nop
c001fdec:	90                   	nop
c001fded:	c3                   	ret    
c001fdee:	66 90                	xchg   ax,ax

c001fdf0 <CLockScheduler>:
c001fdf0:	fa                   	cli    
c001fdf1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fdf6:	83 c0 01             	add    eax,0x1
c001fdf9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fdfe:	90                   	nop
c001fdff:	c3                   	ret    

c001fe00 <CPrintf>:
c001fe00:	83 ec 0c             	sub    esp,0xc
c001fe03:	83 ec 08             	sub    esp,0x8
c001fe06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe0a:	68 30 fe 02 c0       	push   0xc002fe30
c001fe0f:	e8 36 97 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c001fe14:	83 c4 10             	add    esp,0x10
c001fe17:	90                   	nop
c001fe18:	83 c4 0c             	add    esp,0xc
c001fe1b:	c3                   	ret    

c001fe1c <Krnl::handlePowerButton()>:
c001fe1c:	83 ec 0c             	sub    esp,0xc
c001fe1f:	e8 09 07 00 00       	call   c002052d <KeHandlePowerButton()>
c001fe24:	90                   	nop
c001fe25:	83 c4 0c             	add    esp,0xc
c001fe28:	c3                   	ret    
c001fe29:	8d 76 00             	lea    esi,[esi+0x0]

c001fe2c <Krnl::handleSleepButton()>:
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	e8 2e 07 00 00       	call   c0020562 <KeHandleSleepButton()>
c001fe34:	90                   	nop
c001fe35:	83 c4 0c             	add    esp,0xc
c001fe38:	c3                   	ret    

c001fe39 <KeCalculateCRC32(unsigned char*, int)>:
c001fe39:	53                   	push   ebx
c001fe3a:	83 c8 ff             	or     eax,0xffffffff
c001fe3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fe45:	01 cb                	add    ebx,ecx
c001fe47:	39 d9                	cmp    ecx,ebx
c001fe49:	74 15                	je     c001fe60 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fe4b:	41                   	inc    ecx
c001fe4c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fe4f:	31 c2                	xor    edx,eax
c001fe51:	c1 e8 08             	shr    eax,0x8
c001fe54:	0f b6 d2             	movzx  edx,dl
c001fe57:	33 04 95 60 41 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcbea0]
c001fe5e:	eb e7                	jmp    c001fe47 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fe60:	5b                   	pop    ebx
c001fe61:	f7 d0                	not    eax
c001fe63:	c3                   	ret    

c001fe64 <EnvVarContainer::getEnv(char const*)>:
c001fe64:	57                   	push   edi
c001fe65:	56                   	push   esi
c001fe66:	53                   	push   ebx
c001fe67:	31 db                	xor    ebx,ebx
c001fe69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe6d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fe6f:	7e 2b                	jle    c001fe9c <EnvVarContainer::getEnv(char const*)+0x38>
c001fe71:	50                   	push   eax
c001fe72:	50                   	push   eax
c001fe73:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fe76:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fe7d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fe80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fe84:	e8 f7 08 fe ff       	call   c0000780 <strcmp>
c001fe89:	83 c4 10             	add    esp,0x10
c001fe8c:	85 c0                	test   eax,eax
c001fe8e:	75 09                	jne    c001fe99 <EnvVarContainer::getEnv(char const*)+0x35>
c001fe90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fe93:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fe97:	eb 05                	jmp    c001fe9e <EnvVarContainer::getEnv(char const*)+0x3a>
c001fe99:	43                   	inc    ebx
c001fe9a:	eb d1                	jmp    c001fe6d <EnvVarContainer::getEnv(char const*)+0x9>
c001fe9c:	31 c0                	xor    eax,eax
c001fe9e:	5b                   	pop    ebx
c001fe9f:	5e                   	pop    esi
c001fea0:	5f                   	pop    edi
c001fea1:	c3                   	ret    

c001fea2 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fea2:	55                   	push   ebp
c001fea3:	57                   	push   edi
c001fea4:	56                   	push   esi
c001fea5:	53                   	push   ebx
c001fea6:	83 ec 28             	sub    esp,0x28
c001fea9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fead:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001feb1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001feb5:	56                   	push   esi
c001feb6:	e8 c5 06 fe ff       	call   c0000580 <strlen>
c001febb:	40                   	inc    eax
c001febc:	89 04 24             	mov    DWORD PTR [esp],eax
c001febf:	e8 50 68 ff ff       	call   c0016714 <malloc>
c001fec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fec7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fecb:	e8 b0 06 fe ff       	call   c0000580 <strlen>
c001fed0:	40                   	inc    eax
c001fed1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fed4:	e8 3b 68 ff ff       	call   c0016714 <malloc>
c001fed9:	89 34 24             	mov    DWORD PTR [esp],esi
c001fedc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fee0:	e8 9b 06 fe ff       	call   c0000580 <strlen>
c001fee5:	83 c4 0c             	add    esp,0xc
c001fee8:	40                   	inc    eax
c001fee9:	50                   	push   eax
c001feea:	6a 00                	push   0x0
c001feec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fef0:	e8 fb 05 fe ff       	call   c00004f0 <memset>
c001fef5:	89 34 24             	mov    DWORD PTR [esp],esi
c001fef8:	e8 83 06 fe ff       	call   c0000580 <strlen>
c001fefd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ff01:	8d 48 01             	lea    ecx,[eax+0x1]
c001ff04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff09:	89 de                	mov    esi,ebx
c001ff0b:	e8 70 06 fe ff       	call   c0000580 <strlen>
c001ff10:	83 c4 0c             	add    esp,0xc
c001ff13:	40                   	inc    eax
c001ff14:	50                   	push   eax
c001ff15:	6a 00                	push   0x0
c001ff17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff1b:	e8 d0 05 fe ff       	call   c00004f0 <memset>
c001ff20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff23:	e8 58 06 fe ff       	call   c0000580 <strlen>
c001ff28:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ff2c:	8d 48 01             	lea    ecx,[eax+0x1]
c001ff2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ff34:	40                   	inc    eax
c001ff35:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ff38:	c1 e0 03             	shl    eax,0x3
c001ff3b:	5a                   	pop    edx
c001ff3c:	59                   	pop    ecx
c001ff3d:	50                   	push   eax
c001ff3e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ff41:	e8 ba 67 ff ff       	call   c0016700 <realloc>
c001ff46:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ff49:	8d 74 24 18          	lea    esi,[esp+0x18]
c001ff4d:	b9 08 00 00 00       	mov    ecx,0x8
c001ff52:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001ff55:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001ff59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff5b:	83 c4 2c             	add    esp,0x2c
c001ff5e:	5b                   	pop    ebx
c001ff5f:	5e                   	pop    esi
c001ff60:	5f                   	pop    edi
c001ff61:	5d                   	pop    ebp
c001ff62:	c3                   	ret    
c001ff63:	90                   	nop

c001ff64 <EnvVarContainer::deleteEnv(char const*)>:
c001ff64:	c3                   	ret    
c001ff65:	90                   	nop

c001ff66 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001ff66:	55                   	push   ebp
c001ff67:	57                   	push   edi
c001ff68:	56                   	push   esi
c001ff69:	53                   	push   ebx
c001ff6a:	81 ec 38 01 00 00    	sub    esp,0x138
c001ff70:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ff77:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001ff7e:	68 14 01 00 00       	push   0x114
c001ff83:	e8 8c 67 ff ff       	call   c0016714 <malloc>
c001ff88:	83 c4 0c             	add    esp,0xc
c001ff8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ff8e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ff95:	89 c3                	mov    ebx,eax
c001ff97:	50                   	push   eax
c001ff98:	e8 c5 a7 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c001ff9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffa0:	e8 9f aa ff ff       	call   c001aa44 <File::exists()>
c001ffa5:	83 c4 10             	add    esp,0x10
c001ffa8:	84 c0                	test   al,al
c001ffaa:	75 31                	jne    c001ffdd <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001ffac:	50                   	push   eax
c001ffad:	50                   	push   eax
c001ffae:	6a 12                	push   0x12
c001ffb0:	53                   	push   ebx
c001ffb1:	e8 ca a7 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c001ffb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ffb8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001ffbb:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffbe:	e8 bd 05 fe ff       	call   c0000580 <strlen>
c001ffc3:	5a                   	pop    edx
c001ffc4:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ffc8:	52                   	push   edx
c001ffc9:	31 d2                	xor    edx,edx
c001ffcb:	56                   	push   esi
c001ffcc:	52                   	push   edx
c001ffcd:	50                   	push   eax
c001ffce:	53                   	push   ebx
c001ffcf:	ff d7                	call   edi
c001ffd1:	83 c4 14             	add    esp,0x14
c001ffd4:	53                   	push   ebx
c001ffd5:	e8 04 a8 ff ff       	call   c001a7de <File::close()>
c001ffda:	83 c4 10             	add    esp,0x10
c001ffdd:	56                   	push   esi
c001ffde:	31 f6                	xor    esi,esi
c001ffe0:	68 00 01 00 00       	push   0x100
c001ffe5:	6a 00                	push   0x0
c001ffe7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001ffeb:	50                   	push   eax
c001ffec:	e8 ff 04 fe ff       	call   c00004f0 <memset>
c001fff1:	5f                   	pop    edi
c001fff2:	58                   	pop    eax
c001fff3:	6a 01                	push   0x1
c001fff5:	53                   	push   ebx
c001fff6:	e8 85 a7 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c001fffb:	83 c4 10             	add    esp,0x10
c001fffe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020006:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002000e:	83 ec 0c             	sub    esp,0xc
c0020011:	8d 54 24 20          	lea    edx,[esp+0x20]
c0020015:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020017:	52                   	push   edx
c0020018:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c002001c:	51                   	push   ecx
c002001d:	6a 00                	push   0x0
c002001f:	6a 01                	push   0x1
c0020021:	53                   	push   ebx
c0020022:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0020025:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c002002a:	83 c4 20             	add    esp,0x20
c002002d:	85 c0                	test   eax,eax
c002002f:	89 c1                	mov    ecx,eax
c0020031:	0f 84 36 01 00 00    	je     c002016d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0020037:	83 f8 0d             	cmp    eax,0xd
c002003a:	0f 84 22 01 00 00    	je     c0020162 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020040:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020045:	0f 84 f0 00 00 00    	je     c002013b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c002004b:	83 f8 0a             	cmp    eax,0xa
c002004e:	74 13                	je     c0020063 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0020050:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020055:	74 0c                	je     c0020063 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0020057:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002005d:	0f 8e f6 00 00 00    	jle    c0020159 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0020063:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020067:	83 ec 0c             	sub    esp,0xc
c002006a:	8d 78 01             	lea    edi,[eax+0x1]
c002006d:	57                   	push   edi
c002006e:	e8 a1 66 ff ff       	call   c0016714 <malloc>
c0020073:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0020077:	8d 56 04             	lea    edx,[esi+0x4]
c002007a:	89 14 24             	mov    DWORD PTR [esp],edx
c002007d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020085:	e8 8a 66 ff ff       	call   c0016714 <malloc>
c002008a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002008e:	83 c4 0c             	add    esp,0xc
c0020091:	57                   	push   edi
c0020092:	6a 00                	push   0x0
c0020094:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020098:	e8 53 04 fe ff       	call   c00004f0 <memset>
c002009d:	8d 74 24 30          	lea    esi,[esp+0x30]
c00200a1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00200a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00200a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200ab:	83 c4 0c             	add    esp,0xc
c00200ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200b2:	52                   	push   edx
c00200b3:	6a 00                	push   0x0
c00200b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00200b9:	e8 32 04 fe ff       	call   c00004f0 <memset>
c00200be:	8d 74 24 30          	lea    esi,[esp+0x30]
c00200c2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00200c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00200c9:	e8 b2 04 fe ff       	call   c0000580 <strlen>
c00200ce:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00200d2:	89 c1                	mov    ecx,eax
c00200d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00200df:	40                   	inc    eax
c00200e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00200e3:	85 d2                	test   edx,edx
c00200e5:	75 0c                	jne    c00200f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00200e7:	83 ec 0c             	sub    esp,0xc
c00200ea:	6a 08                	push   0x8
c00200ec:	e8 23 66 ff ff       	call   c0016714 <malloc>
c00200f1:	eb 0c                	jmp    c00200ff <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00200f3:	51                   	push   ecx
c00200f4:	51                   	push   ecx
c00200f5:	c1 e0 03             	shl    eax,0x3
c00200f8:	50                   	push   eax
c00200f9:	52                   	push   edx
c00200fa:	e8 01 66 ff ff       	call   c0016700 <realloc>
c00200ff:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0020102:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020105:	83 c4 10             	add    esp,0x10
c0020108:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c002010b:	8d 74 24 18          	lea    esi,[esp+0x18]
c002010f:	b9 08 00 00 00       	mov    ecx,0x8
c0020114:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0020118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002011a:	50                   	push   eax
c002011b:	31 f6                	xor    esi,esi
c002011d:	68 00 01 00 00       	push   0x100
c0020122:	6a 00                	push   0x0
c0020124:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0020128:	50                   	push   eax
c0020129:	e8 c2 03 fe ff       	call   c00004f0 <memset>
c002012e:	83 c4 10             	add    esp,0x10
c0020131:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020139:	eb 27                	jmp    c0020162 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c002013b:	83 f8 3d             	cmp    eax,0x3d
c002013e:	74 1e                	je     c002015e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0020140:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020146:	7f 07                	jg     c002014f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0020148:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c002014c:	46                   	inc    esi
c002014d:	eb 13                	jmp    c0020162 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c002014f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020157:	eb 09                	jmp    c0020162 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020159:	83 f8 3d             	cmp    eax,0x3d
c002015c:	75 ea                	jne    c0020148 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c002015e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0020162:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020167:	0f 85 99 fe ff ff    	jne    c0020006 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c002016d:	83 ec 0c             	sub    esp,0xc
c0020170:	53                   	push   ebx
c0020171:	e8 68 a6 ff ff       	call   c001a7de <File::close()>
c0020176:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020178:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002017b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002017e:	81 c4 3c 01 00 00    	add    esp,0x13c
c0020184:	5b                   	pop    ebx
c0020185:	5e                   	pop    esi
c0020186:	5f                   	pop    edi
c0020187:	5d                   	pop    ebp
c0020188:	c3                   	ret    
c0020189:	90                   	nop

c002018a <EnvVarContainer::__loadSystem()>:
c002018a:	83 ec 10             	sub    esp,0x10
c002018d:	68 60 45 03 c0       	push   0xc0034560
c0020192:	68 ec 2b 03 c0       	push   0xc0032bec
c0020197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002019b:	e8 c6 fd ff ff       	call   c001ff66 <EnvVarContainer::loadFrom(char const*, char const*)>
c00201a0:	83 c4 1c             	add    esp,0x1c
c00201a3:	c3                   	ret    

c00201a4 <EnvVarContainer::__loadUser()>:
c00201a4:	c3                   	ret    
c00201a5:	90                   	nop

c00201a6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00201a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00201b8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00201bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201c6:	90                   	nop
c00201c7:	c3                   	ret    

c00201c8 <EnvVarContainer::~EnvVarContainer()>:
c00201c8:	83 ec 0c             	sub    esp,0xc
c00201cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201d2:	85 c0                	test   eax,eax
c00201d4:	74 1d                	je     c00201f3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00201d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201da:	8b 00                	mov    eax,DWORD PTR [eax]
c00201dc:	85 c0                	test   eax,eax
c00201de:	74 13                	je     c00201f3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00201e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201e7:	83 ec 0c             	sub    esp,0xc
c00201ea:	50                   	push   eax
c00201eb:	e8 34 65 ff ff       	call   c0016724 <free>
c00201f0:	83 c4 10             	add    esp,0x10
c00201f3:	90                   	nop
c00201f4:	83 c4 0c             	add    esp,0xc
c00201f7:	c3                   	ret    

c00201f8 <KeGetEnv(Process*, char const*)>:
c00201f8:	53                   	push   ebx
c00201f9:	83 ec 08             	sub    esp,0x8
c00201fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020200:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c0020206:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002020a:	74 04                	je     c0020210 <KeGetEnv(Process*, char const*)+0x18>
c002020c:	85 c0                	test   eax,eax
c002020e:	75 0b                	jne    c002021b <KeGetEnv(Process*, char const*)+0x23>
c0020210:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020215:	85 c0                	test   eax,eax
c0020217:	75 19                	jne    c0020232 <KeGetEnv(Process*, char const*)+0x3a>
c0020219:	eb 27                	jmp    c0020242 <KeGetEnv(Process*, char const*)+0x4a>
c002021b:	52                   	push   edx
c002021c:	52                   	push   edx
c002021d:	53                   	push   ebx
c002021e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0020224:	e8 3b fc ff ff       	call   c001fe64 <EnvVarContainer::getEnv(char const*)>
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	85 c0                	test   eax,eax
c002022e:	75 28                	jne    c0020258 <KeGetEnv(Process*, char const*)+0x60>
c0020230:	eb de                	jmp    c0020210 <KeGetEnv(Process*, char const*)+0x18>
c0020232:	52                   	push   edx
c0020233:	52                   	push   edx
c0020234:	53                   	push   ebx
c0020235:	50                   	push   eax
c0020236:	e8 29 fc ff ff       	call   c001fe64 <EnvVarContainer::getEnv(char const*)>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	85 c0                	test   eax,eax
c0020240:	75 16                	jne    c0020258 <KeGetEnv(Process*, char const*)+0x60>
c0020242:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020246:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c002024b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002024f:	83 c4 08             	add    esp,0x8
c0020252:	5b                   	pop    ebx
c0020253:	e9 0c fc ff ff       	jmp    c001fe64 <EnvVarContainer::getEnv(char const*)>
c0020258:	83 c4 08             	add    esp,0x8
c002025b:	5b                   	pop    ebx
c002025c:	c3                   	ret    

c002025d <KeSetEnvSystem(char const*, char const*)>:
c002025d:	83 ec 10             	sub    esp,0x10
c0020260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020268:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c002026e:	e8 2f fc ff ff       	call   c001fea2 <EnvVarContainer::setEnv(char const*, char const*)>
c0020273:	83 c4 1c             	add    esp,0x1c
c0020276:	c3                   	ret    

c0020277 <KeSetEnvUser(char const*, char const*)>:
c0020277:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c002027c:	85 c0                	test   eax,eax
c002027e:	74 15                	je     c0020295 <KeSetEnvUser(char const*, char const*)+0x1e>
c0020280:	83 ec 10             	sub    esp,0x10
c0020283:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020287:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002028b:	50                   	push   eax
c002028c:	e8 11 fc ff ff       	call   c001fea2 <EnvVarContainer::setEnv(char const*, char const*)>
c0020291:	83 c4 1c             	add    esp,0x1c
c0020294:	c3                   	ret    
c0020295:	c3                   	ret    

c0020296 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0020296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002029a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00202a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00202a4:	e9 f9 fb ff ff       	jmp    c001fea2 <EnvVarContainer::setEnv(char const*, char const*)>

c00202a9 <KeDeleteEnvSystem(char const*)>:
c00202a9:	c3                   	ret    

c00202aa <KeDeleteEnvUser(char const*)>:
c00202aa:	c3                   	ret    

c00202ab <KeDeleteEnvProcess(Process*, char const*)>:
c00202ab:	c3                   	ret    

c00202ac <KeNewProcessEnv(Process*)>:
c00202ac:	83 ec 28             	sub    esp,0x28
c00202af:	6a 0c                	push   0xc
c00202b1:	e8 5e 64 ff ff       	call   c0016714 <malloc>
c00202b6:	5a                   	pop    edx
c00202b7:	59                   	pop    ecx
c00202b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202bc:	50                   	push   eax
c00202bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00202c1:	e8 e0 fe ff ff       	call   c00201a6 <EnvVarContainer::EnvVarContainer(Process*)>
c00202c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202ca:	83 c4 2c             	add    esp,0x2c
c00202cd:	c3                   	ret    

c00202ce <KeCopyProcessEnv(Process*, Process*)>:
c00202ce:	57                   	push   edi
c00202cf:	56                   	push   esi
c00202d0:	53                   	push   ebx
c00202d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d5:	83 ec 0c             	sub    esp,0xc
c00202d8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00202de:	6a 0c                	push   0xc
c00202e0:	e8 2f 64 ff ff       	call   c0016714 <malloc>
c00202e5:	89 c3                	mov    ebx,eax
c00202e7:	58                   	pop    eax
c00202e8:	5a                   	pop    edx
c00202e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ed:	53                   	push   ebx
c00202ee:	e8 b3 fe ff ff       	call   c00201a6 <EnvVarContainer::EnvVarContainer(Process*)>
c00202f3:	8b 07                	mov    eax,DWORD PTR [edi]
c00202f5:	89 03                	mov    DWORD PTR [ebx],eax
c00202f7:	c1 e0 03             	shl    eax,0x3
c00202fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00202fd:	e8 12 64 ff ff       	call   c0016714 <malloc>
c0020302:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0020305:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0020307:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c002030a:	89 c7                	mov    edi,eax
c002030c:	c1 e1 03             	shl    ecx,0x3
c002030f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020311:	83 c4 10             	add    esp,0x10
c0020314:	89 d8                	mov    eax,ebx
c0020316:	5b                   	pop    ebx
c0020317:	5e                   	pop    esi
c0020318:	5f                   	pop    edi
c0020319:	c3                   	ret    

c002031a <KeLoadSystemEnv()>:
c002031a:	53                   	push   ebx
c002031b:	83 ec 14             	sub    esp,0x14
c002031e:	6a 0c                	push   0xc
c0020320:	e8 ef 63 ff ff       	call   c0016714 <malloc>
c0020325:	89 c3                	mov    ebx,eax
c0020327:	58                   	pop    eax
c0020328:	5a                   	pop    edx
c0020329:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002032f:	53                   	push   ebx
c0020330:	e8 71 fe ff ff       	call   c00201a6 <EnvVarContainer::EnvVarContainer(Process*)>
c0020335:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020338:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c002033e:	e8 47 fe ff ff       	call   c002018a <EnvVarContainer::__loadSystem()>
c0020343:	83 c4 18             	add    esp,0x18
c0020346:	5b                   	pop    ebx
c0020347:	c3                   	ret    

c0020348 <KeLoadUserEnv()>:
c0020348:	53                   	push   ebx
c0020349:	83 ec 14             	sub    esp,0x14
c002034c:	6a 0c                	push   0xc
c002034e:	e8 c1 63 ff ff       	call   c0016714 <malloc>
c0020353:	89 c3                	mov    ebx,eax
c0020355:	58                   	pop    eax
c0020356:	5a                   	pop    edx
c0020357:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002035d:	53                   	push   ebx
c002035e:	e8 43 fe ff ff       	call   c00201a6 <EnvVarContainer::EnvVarContainer(Process*)>
c0020363:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c0020369:	83 c4 18             	add    esp,0x18
c002036c:	5b                   	pop    ebx
c002036d:	c3                   	ret    

c002036e <KeFlushEnv()>:
c002036e:	c3                   	ret    

c002036f <KeGetProcessTotalEnvCount(Process*)>:
c002036f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020373:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020379:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002037f:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020384:	8b 00                	mov    eax,DWORD PTR [eax]
c0020386:	03 01                	add    eax,DWORD PTR [ecx]
c0020388:	85 d2                	test   edx,edx
c002038a:	74 02                	je     c002038e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c002038c:	03 02                	add    eax,DWORD PTR [edx]
c002038e:	c3                   	ret    

c002038f <KeGetProcessEnvPair(Process*, int)>:
c002038f:	57                   	push   edi
c0020390:	56                   	push   esi
c0020391:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c0020397:	53                   	push   ebx
c0020398:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002039c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203a0:	85 f6                	test   esi,esi
c00203a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00203a6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00203ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c00203ae:	75 16                	jne    c00203c6 <KeGetProcessEnvPair(Process*, int)+0x37>
c00203b0:	39 c2                	cmp    edx,eax
c00203b2:	7c 16                	jl     c00203ca <KeGetProcessEnvPair(Process*, int)+0x3b>
c00203b4:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c00203ba:	8b 31                	mov    esi,DWORD PTR [ecx]
c00203bc:	01 c6                	add    esi,eax
c00203be:	39 d6                	cmp    esi,edx
c00203c0:	7e 3c                	jle    c00203fe <KeGetProcessEnvPair(Process*, int)+0x6f>
c00203c2:	29 c2                	sub    edx,eax
c00203c4:	eb 04                	jmp    c00203ca <KeGetProcessEnvPair(Process*, int)+0x3b>
c00203c6:	39 c2                	cmp    edx,eax
c00203c8:	7d 05                	jge    c00203cf <KeGetProcessEnvPair(Process*, int)+0x40>
c00203ca:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00203cd:	eb 20                	jmp    c00203ef <KeGetProcessEnvPair(Process*, int)+0x60>
c00203cf:	8b 3e                	mov    edi,DWORD PTR [esi]
c00203d1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00203d4:	39 d1                	cmp    ecx,edx
c00203d6:	7e 04                	jle    c00203dc <KeGetProcessEnvPair(Process*, int)+0x4d>
c00203d8:	29 c2                	sub    edx,eax
c00203da:	eb 10                	jmp    c00203ec <KeGetProcessEnvPair(Process*, int)+0x5d>
c00203dc:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00203e2:	03 0e                	add    ecx,DWORD PTR [esi]
c00203e4:	39 d1                	cmp    ecx,edx
c00203e6:	7e 16                	jle    c00203fe <KeGetProcessEnvPair(Process*, int)+0x6f>
c00203e8:	29 c2                	sub    edx,eax
c00203ea:	29 fa                	sub    edx,edi
c00203ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00203ef:	8d 14 d0             	lea    edx,[eax+edx*8]
c00203f2:	8b 02                	mov    eax,DWORD PTR [edx]
c00203f4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00203f7:	89 03                	mov    DWORD PTR [ebx],eax
c00203f9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00203fc:	eb 1d                	jmp    c002041b <KeGetProcessEnvPair(Process*, int)+0x8c>
c00203fe:	83 ec 0c             	sub    esp,0xc
c0020401:	68 0e 2c 03 c0       	push   0xc0032c0e
c0020406:	e8 c7 00 00 00       	call   c00204d2 <KePanic(char const*)>
c002040b:	83 c4 10             	add    esp,0x10
c002040e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020414:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002041b:	89 d8                	mov    eax,ebx
c002041d:	5b                   	pop    ebx
c002041e:	5e                   	pop    esi
c002041f:	5f                   	pop    edi
c0020420:	c2 04 00             	ret    0x4

c0020423 <CPU::current()>:
c0020423:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020428:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002042e:	c3                   	ret    

c002042f <operator new(unsigned long)>:
c002042f:	e9 e0 62 ff ff       	jmp    c0016714 <malloc>

c0020434 <operator delete(void*)>:
c0020434:	e9 fb 62 ff ff       	jmp    c0016734 <rfree>

c0020439 <disableIRQs()>:
c0020439:	fa                   	cli    
c002043a:	c3                   	ret    

c002043b <enableIRQs()>:
c002043b:	fb                   	sti    
c002043c:	c3                   	ret    

c002043d <lockScheduler()>:
c002043d:	fa                   	cli    
c002043e:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020444:	c3                   	ret    

c0020445 <unlockScheduler()>:
c0020445:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002044a:	48                   	dec    eax
c002044b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020450:	75 01                	jne    c0020453 <unlockScheduler()+0xe>
c0020452:	fb                   	sti    
c0020453:	c3                   	ret    

c0020454 <lockStuff()>:
c0020454:	fa                   	cli    
c0020455:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002045b:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c0020461:	c3                   	ret    

c0020462 <unlockStuff()>:
c0020462:	83 ec 0c             	sub    esp,0xc
c0020465:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002046a:	48                   	dec    eax
c002046b:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020470:	75 18                	jne    c002048a <unlockStuff()+0x28>
c0020472:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020479:	74 0f                	je     c002048a <unlockStuff()+0x28>
c002047b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020485:	e8 aa 50 00 00       	call   c0025534 <schedule()>
c002048a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002048f:	48                   	dec    eax
c0020490:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020495:	75 01                	jne    c0020498 <unlockStuff()+0x36>
c0020497:	fb                   	sti    
c0020498:	83 c4 0c             	add    esp,0xc
c002049b:	c3                   	ret    

c002049c <Virt::getAKernelVAS()>:
c002049c:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00204a1:	c3                   	ret    

c00204a2 <__not_memcpy>:
c00204a2:	57                   	push   edi
c00204a3:	56                   	push   esi
c00204a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00204ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204b0:	89 c7                	mov    edi,eax
c00204b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204b4:	5e                   	pop    esi
c00204b5:	5f                   	pop    edi
c00204b6:	c3                   	ret    
c00204b7:	90                   	nop

c00204b8 <Mutex::Mutex()>:
c00204b8:	83 ec 0c             	sub    esp,0xc
c00204bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204bf:	83 ec 08             	sub    esp,0x8
c00204c2:	6a 01                	push   0x1
c00204c4:	50                   	push   eax
c00204c5:	e8 ae 03 00 00       	call   c0020878 <Semaphore::Semaphore(int)>
c00204ca:	83 c4 10             	add    esp,0x10
c00204cd:	90                   	nop
c00204ce:	83 c4 0c             	add    esp,0xc
c00204d1:	c3                   	ret    

c00204d2 <KePanic(char const*)>:
c00204d2:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c00204d9:	e9 4e 6d 00 00       	jmp    c002722c <HalPanic(char const*)>

c00204de <KePowerThread(void*)>:
c00204de:	83 ec 0c             	sub    esp,0xc
c00204e1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00204e6:	48                   	dec    eax
c00204e7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00204ec:	75 01                	jne    c00204ef <KePowerThread(void*)+0x11>
c00204ee:	fb                   	sti    
c00204ef:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00204f6:	83 ec 0c             	sub    esp,0xc
c00204f9:	6a 0a                	push   0xa
c00204fb:	e8 20 52 00 00       	call   c0025720 <sleep(unsigned int)>
c0020500:	83 c4 10             	add    esp,0x10
c0020503:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c002050a:	eb e3                	jmp    c00204ef <KePowerThread(void*)+0x11>

c002050c <KeChangePowerSettings(PowerSettings)>:
c002050c:	57                   	push   edi
c002050d:	b9 09 00 00 00       	mov    ecx,0x9
c0020512:	56                   	push   esi
c0020513:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c0020518:	fc                   	cld    
c0020519:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002051d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002051f:	5e                   	pop    esi
c0020520:	5f                   	pop    edi
c0020521:	c3                   	ret    

c0020522 <KeUserIOReceived()>:
c0020522:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c002052c:	c3                   	ret    

c002052d <KeHandlePowerButton()>:
c002052d:	83 ec 0c             	sub    esp,0xc
c0020530:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c0020535:	83 f8 02             	cmp    eax,0x2
c0020538:	75 10                	jne    c002054a <KeHandlePowerButton()+0x1d>
c002053a:	83 ec 0c             	sub    esp,0xc
c002053d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020543:	e8 58 57 ff ff       	call   c0015ca0 <Computer::shutdown()>
c0020548:	eb 11                	jmp    c002055b <KeHandlePowerButton()+0x2e>
c002054a:	48                   	dec    eax
c002054b:	75 11                	jne    c002055e <KeHandlePowerButton()+0x31>
c002054d:	83 ec 0c             	sub    esp,0xc
c0020550:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020556:	e8 75 57 ff ff       	call   c0015cd0 <Computer::sleep()>
c002055b:	83 c4 10             	add    esp,0x10
c002055e:	83 c4 0c             	add    esp,0xc
c0020561:	c3                   	ret    

c0020562 <KeHandleSleepButton()>:
c0020562:	83 ec 0c             	sub    esp,0xc
c0020565:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c002056a:	83 f8 02             	cmp    eax,0x2
c002056d:	75 10                	jne    c002057f <KeHandleSleepButton()+0x1d>
c002056f:	83 ec 0c             	sub    esp,0xc
c0020572:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020578:	e8 23 57 ff ff       	call   c0015ca0 <Computer::shutdown()>
c002057d:	eb 11                	jmp    c0020590 <KeHandleSleepButton()+0x2e>
c002057f:	48                   	dec    eax
c0020580:	75 11                	jne    c0020593 <KeHandleSleepButton()+0x31>
c0020582:	83 ec 0c             	sub    esp,0xc
c0020585:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002058b:	e8 40 57 ff ff       	call   c0015cd0 <Computer::sleep()>
c0020590:	83 c4 10             	add    esp,0x10
c0020593:	83 c4 0c             	add    esp,0xc
c0020596:	c3                   	ret    

c0020597 <KeSetupPowerManager()>:
c0020597:	83 ec 0c             	sub    esp,0xc
c002059a:	68 f0 00 00 00       	push   0xf0
c002059f:	6a 00                	push   0x0
c00205a1:	68 de 04 02 c0       	push   0xc00204de
c00205a6:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00205ac:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00205b6:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00205bd:	e8 26 4d 00 00       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c00205c2:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c00205cc:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c00205d6:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00205e0:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c00205ea:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c00205f4:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00205fe:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c0020608:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c0020612:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c002061c:	83 c4 1c             	add    esp,0x1c
c002061f:	c3                   	ret    

c0020620 <KeRand()>:
c0020620:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c002062a:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c0020634:	53                   	push   ebx
c0020635:	01 c1                	add    ecx,eax
c0020637:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c002063c:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c0020642:	01 ca                	add    edx,ecx
c0020644:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020649:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002064e:	83 d2 00             	adc    edx,0x0
c0020651:	0f b7 da             	movzx  ebx,dx
c0020654:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c002065a:	0f ac d8 0e          	shrd   eax,ebx,0xe
c002065e:	5b                   	pop    ebx
c002065f:	c3                   	ret    

c0020660 <KeSeedRand(unsigned int)>:
c0020660:	53                   	push   ebx
c0020661:	83 ec 08             	sub    esp,0x8
c0020664:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020668:	e8 de 6e 00 00       	call   c002754b <HalGetRand()>
c002066d:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020677:	31 d8                	xor    eax,ebx
c0020679:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002067e:	e8 9d ff ff ff       	call   c0020620 <KeRand()>
c0020683:	83 c4 08             	add    esp,0x8
c0020686:	5b                   	pop    ebx
c0020687:	eb 97                	jmp    c0020620 <KeRand()>

c0020689 <KeInitRand()>:
c0020689:	83 ec 0c             	sub    esp,0xc
c002068c:	e8 af 6c 00 00       	call   c0027340 <HalQueryPerformanceCounter()>
c0020691:	0f 20 da             	mov    edx,cr3
c0020694:	0f 22 da             	mov    cr3,edx
c0020697:	0f 20 da             	mov    edx,cr3
c002069a:	0f 22 da             	mov    cr3,edx
c002069d:	0f 20 da             	mov    edx,cr3
c00206a0:	0f 22 da             	mov    cr3,edx
c00206a3:	0f 20 da             	mov    edx,cr3
c00206a6:	0f 22 da             	mov    cr3,edx
c00206a9:	83 ec 0c             	sub    esp,0xc
c00206ac:	35 03 8a 95 38       	xor    eax,0x38958a03
c00206b1:	50                   	push   eax
c00206b2:	e8 a9 ff ff ff       	call   c0020660 <KeSeedRand(unsigned int)>
c00206b7:	83 c4 1c             	add    esp,0x1c
c00206ba:	c3                   	ret    
c00206bb:	90                   	nop

c00206bc <KeResolveCompatibilitySymbol(char*)>:
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	83 ec 08             	sub    esp,0x8
c00206c2:	68 28 2c 03 c0       	push   0xc0032c28
c00206c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206cb:	e8 b0 00 fe ff       	call   c0000780 <strcmp>
c00206d0:	83 c4 10             	add    esp,0x10
c00206d3:	85 c0                	test   eax,eax
c00206d5:	0f 94 c0             	sete   al
c00206d8:	0f b6 c0             	movzx  eax,al
c00206db:	85 c0                	test   eax,eax
c00206dd:	74 0d                	je     c00206ec <KeResolveCompatibilitySymbol(char*)+0x30>
c00206df:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c00206e4:	e9 8b 01 00 00       	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00206e9:	8d 76 00             	lea    esi,[esi+0x0]
c00206ec:	83 ec 08             	sub    esp,0x8
c00206ef:	68 31 2c 03 c0       	push   0xc0032c31
c00206f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206f8:	e8 83 00 fe ff       	call   c0000780 <strcmp>
c00206fd:	83 c4 10             	add    esp,0x10
c0020700:	85 c0                	test   eax,eax
c0020702:	0f 94 c0             	sete   al
c0020705:	0f b6 c0             	movzx  eax,al
c0020708:	85 c0                	test   eax,eax
c002070a:	74 0c                	je     c0020718 <KeResolveCompatibilitySymbol(char*)+0x5c>
c002070c:	b8 90 e9 02 c0       	mov    eax,0xc002e990
c0020711:	e9 5e 01 00 00       	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020716:	66 90                	xchg   ax,ax
c0020718:	83 ec 08             	sub    esp,0x8
c002071b:	68 3b 2c 03 c0       	push   0xc0032c3b
c0020720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020724:	e8 57 00 fe ff       	call   c0000780 <strcmp>
c0020729:	83 c4 10             	add    esp,0x10
c002072c:	85 c0                	test   eax,eax
c002072e:	0f 94 c0             	sete   al
c0020731:	0f b6 c0             	movzx  eax,al
c0020734:	85 c0                	test   eax,eax
c0020736:	74 0c                	je     c0020744 <KeResolveCompatibilitySymbol(char*)+0x88>
c0020738:	b8 c4 e6 02 c0       	mov    eax,0xc002e6c4
c002073d:	e9 32 01 00 00       	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020742:	66 90                	xchg   ax,ax
c0020744:	83 ec 08             	sub    esp,0x8
c0020747:	68 44 2c 03 c0       	push   0xc0032c44
c002074c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020750:	e8 2b 00 fe ff       	call   c0000780 <strcmp>
c0020755:	83 c4 10             	add    esp,0x10
c0020758:	85 c0                	test   eax,eax
c002075a:	0f 94 c0             	sete   al
c002075d:	0f b6 c0             	movzx  eax,al
c0020760:	85 c0                	test   eax,eax
c0020762:	74 0c                	je     c0020770 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020764:	b8 d2 04 02 c0       	mov    eax,0xc00204d2
c0020769:	e9 06 01 00 00       	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002076e:	66 90                	xchg   ax,ax
c0020770:	83 ec 08             	sub    esp,0x8
c0020773:	68 57 2c 03 c0       	push   0xc0032c57
c0020778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002077c:	e8 ff ff fd ff       	call   c0000780 <strcmp>
c0020781:	83 c4 10             	add    esp,0x10
c0020784:	85 c0                	test   eax,eax
c0020786:	0f 94 c0             	sete   al
c0020789:	0f b6 c0             	movzx  eax,al
c002078c:	85 c0                	test   eax,eax
c002078e:	74 0c                	je     c002079c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020790:	b8 71 fd 01 c0       	mov    eax,0xc001fd71
c0020795:	e9 da 00 00 00       	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002079a:	66 90                	xchg   ax,ax
c002079c:	83 ec 08             	sub    esp,0x8
c002079f:	68 74 2c 03 c0       	push   0xc0032c74
c00207a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207a8:	e8 d3 ff fd ff       	call   c0000780 <strcmp>
c00207ad:	83 c4 10             	add    esp,0x10
c00207b0:	85 c0                	test   eax,eax
c00207b2:	0f 94 c0             	sete   al
c00207b5:	0f b6 c0             	movzx  eax,al
c00207b8:	85 c0                	test   eax,eax
c00207ba:	74 0c                	je     c00207c8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00207bc:	b8 90 ea 02 c0       	mov    eax,0xc002ea90
c00207c1:	e9 ae 00 00 00       	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207c6:	66 90                	xchg   ax,ax
c00207c8:	83 ec 08             	sub    esp,0x8
c00207cb:	68 7e 2c 03 c0       	push   0xc0032c7e
c00207d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207d4:	e8 a7 ff fd ff       	call   c0000780 <strcmp>
c00207d9:	83 c4 10             	add    esp,0x10
c00207dc:	85 c0                	test   eax,eax
c00207de:	0f 94 c0             	sete   al
c00207e1:	0f b6 c0             	movzx  eax,al
c00207e4:	85 c0                	test   eax,eax
c00207e6:	74 0c                	je     c00207f4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00207e8:	b8 10 e8 02 c0       	mov    eax,0xc002e810
c00207ed:	e9 82 00 00 00       	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207f2:	66 90                	xchg   ax,ax
c00207f4:	83 ec 08             	sub    esp,0x8
c00207f7:	68 87 2c 03 c0       	push   0xc0032c87
c00207fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020800:	e8 7b ff fd ff       	call   c0000780 <strcmp>
c0020805:	83 c4 10             	add    esp,0x10
c0020808:	85 c0                	test   eax,eax
c002080a:	0f 94 c0             	sete   al
c002080d:	0f b6 c0             	movzx  eax,al
c0020810:	85 c0                	test   eax,eax
c0020812:	74 08                	je     c002081c <KeResolveCompatibilitySymbol(char*)+0x160>
c0020814:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020819:	eb 59                	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002081b:	90                   	nop
c002081c:	83 ec 08             	sub    esp,0x8
c002081f:	68 9f 2c 03 c0       	push   0xc0032c9f
c0020824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020828:	e8 53 ff fd ff       	call   c0000780 <strcmp>
c002082d:	83 c4 10             	add    esp,0x10
c0020830:	85 c0                	test   eax,eax
c0020832:	0f 94 c0             	sete   al
c0020835:	0f b6 c0             	movzx  eax,al
c0020838:	85 c0                	test   eax,eax
c002083a:	74 08                	je     c0020844 <KeResolveCompatibilitySymbol(char*)+0x188>
c002083c:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020841:	eb 31                	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020843:	90                   	nop
c0020844:	83 ec 08             	sub    esp,0x8
c0020847:	68 ac 2c 03 c0       	push   0xc0032cac
c002084c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020850:	e8 2b ff fd ff       	call   c0000780 <strcmp>
c0020855:	83 c4 10             	add    esp,0x10
c0020858:	85 c0                	test   eax,eax
c002085a:	0f 94 c0             	sete   al
c002085d:	0f b6 c0             	movzx  eax,al
c0020860:	85 c0                	test   eax,eax
c0020862:	74 08                	je     c002086c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020864:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020869:	eb 09                	jmp    c0020874 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002086b:	90                   	nop
c002086c:	b8 00 00 00 00       	mov    eax,0x0
c0020871:	8d 76 00             	lea    esi,[esi+0x0]
c0020874:	83 c4 0c             	add    esp,0xc
c0020877:	c3                   	ret    

c0020878 <Semaphore::Semaphore(int)>:
c0020878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002087c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020880:	89 10                	mov    DWORD PTR [eax],edx
c0020882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020886:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002088d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020891:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002089c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00208a3:	90                   	nop
c00208a4:	c3                   	ret    
c00208a5:	90                   	nop
c00208a6:	66 90                	xchg   ax,ax

c00208a8 <Semaphore::tryAcquire()>:
c00208a8:	83 ec 0c             	sub    esp,0xc
c00208ab:	fa                   	cli    
c00208ac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208b1:	83 c0 01             	add    eax,0x1
c00208b4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208b9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208be:	83 c0 01             	add    eax,0x1
c00208c1:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ca:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00208cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00208d3:	39 c2                	cmp    edx,eax
c00208d5:	7d 5d                	jge    c0020934 <Semaphore::tryAcquire()+0x8c>
c00208d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00208de:	8d 50 01             	lea    edx,[eax+0x1]
c00208e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00208e8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208ed:	83 e8 01             	sub    eax,0x1
c00208f0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208f5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208fa:	85 c0                	test   eax,eax
c00208fc:	75 1a                	jne    c0020918 <Semaphore::tryAcquire()+0x70>
c00208fe:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020903:	85 c0                	test   eax,eax
c0020905:	74 11                	je     c0020918 <Semaphore::tryAcquire()+0x70>
c0020907:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020911:	e8 1e 4c 00 00       	call   c0025534 <schedule()>
c0020916:	66 90                	xchg   ax,ax
c0020918:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002091d:	83 e8 01             	sub    eax,0x1
c0020920:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020925:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002092a:	85 c0                	test   eax,eax
c002092c:	75 02                	jne    c0020930 <Semaphore::tryAcquire()+0x88>
c002092e:	fb                   	sti    
c002092f:	90                   	nop
c0020930:	b0 01                	mov    al,0x1
c0020932:	eb 4c                	jmp    c0020980 <Semaphore::tryAcquire()+0xd8>
c0020934:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020939:	83 e8 01             	sub    eax,0x1
c002093c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020941:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020946:	85 c0                	test   eax,eax
c0020948:	75 1a                	jne    c0020964 <Semaphore::tryAcquire()+0xbc>
c002094a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002094f:	85 c0                	test   eax,eax
c0020951:	74 11                	je     c0020964 <Semaphore::tryAcquire()+0xbc>
c0020953:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002095d:	e8 d2 4b 00 00       	call   c0025534 <schedule()>
c0020962:	66 90                	xchg   ax,ax
c0020964:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020969:	83 e8 01             	sub    eax,0x1
c002096c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020971:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020976:	85 c0                	test   eax,eax
c0020978:	75 02                	jne    c002097c <Semaphore::tryAcquire()+0xd4>
c002097a:	fb                   	sti    
c002097b:	90                   	nop
c002097c:	b0 00                	mov    al,0x0
c002097e:	66 90                	xchg   ax,ax
c0020980:	83 c4 0c             	add    esp,0xc
c0020983:	c3                   	ret    

c0020984 <Semaphore::assertLocked(char const*)>:
c0020984:	83 ec 0c             	sub    esp,0xc
c0020987:	fa                   	cli    
c0020988:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002098d:	83 c0 01             	add    eax,0x1
c0020990:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020995:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002099a:	83 c0 01             	add    eax,0x1
c002099d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00209a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00209af:	39 c2                	cmp    edx,eax
c00209b1:	7d 11                	jge    c00209c4 <Semaphore::assertLocked(char const*)+0x40>
c00209b3:	83 ec 0c             	sub    esp,0xc
c00209b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00209ba:	e8 13 fb ff ff       	call   c00204d2 <KePanic(char const*)>
c00209bf:	83 c4 10             	add    esp,0x10
c00209c2:	66 90                	xchg   ax,ax
c00209c4:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209c9:	83 e8 01             	sub    eax,0x1
c00209cc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209d1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209d6:	85 c0                	test   eax,eax
c00209d8:	75 1a                	jne    c00209f4 <Semaphore::assertLocked(char const*)+0x70>
c00209da:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209df:	85 c0                	test   eax,eax
c00209e1:	74 11                	je     c00209f4 <Semaphore::assertLocked(char const*)+0x70>
c00209e3:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00209ed:	e8 42 4b 00 00       	call   c0025534 <schedule()>
c00209f2:	66 90                	xchg   ax,ax
c00209f4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00209f9:	83 e8 01             	sub    eax,0x1
c00209fc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a01:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a06:	85 c0                	test   eax,eax
c0020a08:	75 02                	jne    c0020a0c <Semaphore::assertLocked(char const*)+0x88>
c0020a0a:	fb                   	sti    
c0020a0b:	90                   	nop
c0020a0c:	90                   	nop
c0020a0d:	83 c4 0c             	add    esp,0xc
c0020a10:	c3                   	ret    
c0020a11:	90                   	nop
c0020a12:	66 90                	xchg   ax,ax

c0020a14 <Semaphore::acquire(int)>:
c0020a14:	83 ec 1c             	sub    esp,0x1c
c0020a17:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020a1c:	0f 84 9a 00 00 00    	je     c0020abc <Semaphore::acquire(int)+0xa8>
c0020a22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020a2a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0020a2f:	90                   	nop
c0020a30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020a35:	85 c0                	test   eax,eax
c0020a37:	74 77                	je     c0020ab0 <Semaphore::acquire(int)+0x9c>
c0020a39:	83 ec 0c             	sub    esp,0xc
c0020a3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020a40:	e8 63 fe ff ff       	call   c00208a8 <Semaphore::tryAcquire()>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	83 f0 01             	xor    eax,0x1
c0020a4b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020a4f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020a53:	83 f0 01             	xor    eax,0x1
c0020a56:	0f b6 c0             	movzx  eax,al
c0020a59:	85 c0                	test   eax,eax
c0020a5b:	75 4f                	jne    c0020aac <Semaphore::acquire(int)+0x98>
c0020a5d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020a62:	7f 2c                	jg     c0020a90 <Semaphore::acquire(int)+0x7c>
c0020a64:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020a68:	89 d0                	mov    eax,edx
c0020a6a:	c1 e0 02             	shl    eax,0x2
c0020a6d:	01 d0                	add    eax,edx
c0020a6f:	d1 e0                	shl    eax,1
c0020a71:	83 ec 0c             	sub    esp,0xc
c0020a74:	50                   	push   eax
c0020a75:	e8 92 4c 00 00       	call   c002570c <milliTenthSleep(unsigned int)>
c0020a7a:	83 c4 10             	add    esp,0x10
c0020a7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020a81:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020a85:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020a8d:	eb a1                	jmp    c0020a30 <Semaphore::acquire(int)+0x1c>
c0020a8f:	90                   	nop
c0020a90:	83 ec 0c             	sub    esp,0xc
c0020a93:	68 90 01 00 00       	push   0x190
c0020a98:	e8 6f 4c 00 00       	call   c002570c <milliTenthSleep(unsigned int)>
c0020a9d:	83 c4 10             	add    esp,0x10
c0020aa0:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020aa5:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020aaa:	eb 84                	jmp    c0020a30 <Semaphore::acquire(int)+0x1c>
c0020aac:	90                   	nop
c0020aad:	8d 76 00             	lea    esi,[esi+0x0]
c0020ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ab4:	e9 ff 00 00 00       	jmp    c0020bb8 <Semaphore::acquire(int)+0x1a4>
c0020ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0020abc:	fa                   	cli    
c0020abd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020ac2:	83 c0 01             	add    eax,0x1
c0020ac5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020aca:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020acf:	83 c0 01             	add    eax,0x1
c0020ad2:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020adb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020ade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ae4:	39 c2                	cmp    edx,eax
c0020ae6:	7d 14                	jge    c0020afc <Semaphore::acquire(int)+0xe8>
c0020ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020aef:	8d 50 01             	lea    edx,[eax+0x1]
c0020af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020af6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020af9:	eb 6d                	jmp    c0020b68 <Semaphore::acquire(int)+0x154>
c0020afb:	90                   	nop
c0020afc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b03:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b11:	85 c0                	test   eax,eax
c0020b13:	75 13                	jne    c0020b28 <Semaphore::acquire(int)+0x114>
c0020b15:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020b1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020b23:	eb 17                	jmp    c0020b3c <Semaphore::acquire(int)+0x128>
c0020b25:	8d 76 00             	lea    esi,[esi+0x0]
c0020b28:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020b34:	8b 12                	mov    edx,DWORD PTR [edx]
c0020b36:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020b39:	8d 76 00             	lea    esi,[esi+0x0]
c0020b3c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020b41:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b47:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020b4a:	83 ec 0c             	sub    esp,0xc
c0020b4d:	68 bc 2c 03 c0       	push   0xc0032cbc
c0020b52:	e8 f3 89 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0020b57:	83 c4 10             	add    esp,0x10
c0020b5a:	83 ec 0c             	sub    esp,0xc
c0020b5d:	6a 05                	push   0x5
c0020b5f:	e8 8c 4a 00 00       	call   c00255f0 <blockTask(TaskState)>
c0020b64:	83 c4 10             	add    esp,0x10
c0020b67:	90                   	nop
c0020b68:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b6d:	83 e8 01             	sub    eax,0x1
c0020b70:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020b75:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b7a:	85 c0                	test   eax,eax
c0020b7c:	75 1a                	jne    c0020b98 <Semaphore::acquire(int)+0x184>
c0020b7e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020b83:	85 c0                	test   eax,eax
c0020b85:	74 11                	je     c0020b98 <Semaphore::acquire(int)+0x184>
c0020b87:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020b91:	e8 9e 49 00 00       	call   c0025534 <schedule()>
c0020b96:	66 90                	xchg   ax,ax
c0020b98:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020b9d:	83 e8 01             	sub    eax,0x1
c0020ba0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020ba5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020baa:	85 c0                	test   eax,eax
c0020bac:	75 02                	jne    c0020bb0 <Semaphore::acquire(int)+0x19c>
c0020bae:	fb                   	sti    
c0020baf:	90                   	nop
c0020bb0:	b8 00 00 00 00       	mov    eax,0x0
c0020bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0020bb8:	83 c4 1c             	add    esp,0x1c
c0020bbb:	c3                   	ret    

c0020bbc <Semaphore::acquire()>:
c0020bbc:	83 ec 0c             	sub    esp,0xc
c0020bbf:	83 ec 08             	sub    esp,0x8
c0020bc2:	6a 00                	push   0x0
c0020bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bc8:	e8 47 fe ff ff       	call   c0020a14 <Semaphore::acquire(int)>
c0020bcd:	83 c4 10             	add    esp,0x10
c0020bd0:	90                   	nop
c0020bd1:	83 c4 0c             	add    esp,0xc
c0020bd4:	c3                   	ret    
c0020bd5:	90                   	nop
c0020bd6:	66 90                	xchg   ax,ax

c0020bd8 <Semaphore::release()>:
c0020bd8:	83 ec 1c             	sub    esp,0x1c
c0020bdb:	fa                   	cli    
c0020bdc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020be1:	83 c0 01             	add    eax,0x1
c0020be4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020be9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020bee:	83 c0 01             	add    eax,0x1
c0020bf1:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020bfd:	85 c0                	test   eax,eax
c0020bff:	74 2b                	je     c0020c2c <Semaphore::release()+0x54>
c0020c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c10:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020c1a:	83 ec 0c             	sub    esp,0xc
c0020c1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c21:	e8 fa 4b 00 00       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c0020c26:	83 c4 10             	add    esp,0x10
c0020c29:	eb 15                	jmp    c0020c40 <Semaphore::release()+0x68>
c0020c2b:	90                   	nop
c0020c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020c33:	8d 50 ff             	lea    edx,[eax-0x1]
c0020c36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c3a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0020c40:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c45:	83 e8 01             	sub    eax,0x1
c0020c48:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020c4d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c52:	85 c0                	test   eax,eax
c0020c54:	75 1a                	jne    c0020c70 <Semaphore::release()+0x98>
c0020c56:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020c5b:	85 c0                	test   eax,eax
c0020c5d:	74 11                	je     c0020c70 <Semaphore::release()+0x98>
c0020c5f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020c69:	e8 c6 48 00 00       	call   c0025534 <schedule()>
c0020c6e:	66 90                	xchg   ax,ax
c0020c70:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c75:	83 e8 01             	sub    eax,0x1
c0020c78:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020c7d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c82:	85 c0                	test   eax,eax
c0020c84:	75 02                	jne    c0020c88 <Semaphore::release()+0xb0>
c0020c86:	fb                   	sti    
c0020c87:	90                   	nop
c0020c88:	90                   	nop
c0020c89:	83 c4 1c             	add    esp,0x1c
c0020c8c:	c3                   	ret    

c0020c8d <KiSigKill(int)>:
c0020c8d:	83 ec 0c             	sub    esp,0xc
c0020c90:	6a 00                	push   0x0
c0020c92:	6a 00                	push   0x0
c0020c94:	6a ff                	push   0xffffffff
c0020c96:	6a 01                	push   0x1
c0020c98:	e8 b5 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020c9d:	83 c4 1c             	add    esp,0x1c
c0020ca0:	c3                   	ret    

c0020ca1 <KiDefaultSignalHandlerIgnore(int)>:
c0020ca1:	c3                   	ret    

c0020ca2 <KiDefaultSignalHandlerPause(int)>:
c0020ca2:	57                   	push   edi
c0020ca3:	b9 07 00 00 00       	mov    ecx,0x7
c0020ca8:	56                   	push   esi
c0020ca9:	be 17 2d 03 c0       	mov    esi,0xc0032d17
c0020cae:	83 ec 24             	sub    esp,0x24
c0020cb1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020cb5:	fc                   	cld    
c0020cb6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020cb8:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020cbc:	50                   	push   eax
c0020cbd:	6a 00                	push   0x0
c0020cbf:	6a 00                	push   0x0
c0020cc1:	6a 27                	push   0x27
c0020cc3:	e8 8a 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020cc8:	83 c4 34             	add    esp,0x34
c0020ccb:	5e                   	pop    esi
c0020ccc:	5f                   	pop    edi
c0020ccd:	c3                   	ret    

c0020cce <KiDefaultSignalHandlerResume(int)>:
c0020cce:	57                   	push   edi
c0020ccf:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020cd4:	56                   	push   esi
c0020cd5:	be 33 2d 03 c0       	mov    esi,0xc0032d33
c0020cda:	83 ec 24             	sub    esp,0x24
c0020cdd:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020ce1:	fc                   	cld    
c0020ce2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ce4:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020ce8:	50                   	push   eax
c0020ce9:	6a 00                	push   0x0
c0020ceb:	6a 00                	push   0x0
c0020ced:	6a 27                	push   0x27
c0020cef:	e8 5e 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020cf4:	83 c4 34             	add    esp,0x34
c0020cf7:	5e                   	pop    esi
c0020cf8:	5f                   	pop    edi
c0020cf9:	c3                   	ret    

c0020cfa <KeDeinitSignals(SigHandlerBlock*)>:
c0020cfa:	e9 25 5a ff ff       	jmp    c0016724 <free>

c0020cff <KeInitSignals()>:
c0020cff:	53                   	push   ebx
c0020d00:	83 ec 14             	sub    esp,0x14
c0020d03:	68 c8 00 00 00       	push   0xc8
c0020d08:	e8 07 5a ff ff       	call   c0016714 <malloc>
c0020d0d:	83 c4 0c             	add    esp,0xc
c0020d10:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020d1a:	89 c3                	mov    ebx,eax
c0020d1c:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020d26:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020d2c:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0020d30:	6a 20                	push   0x20
c0020d32:	6a 00                	push   0x0
c0020d34:	50                   	push   eax
c0020d35:	e8 b6 f7 fd ff       	call   c00004f0 <memset>
c0020d3a:	83 c4 0c             	add    esp,0xc
c0020d3d:	6a 44                	push   0x44
c0020d3f:	6a 00                	push   0x0
c0020d41:	53                   	push   ebx
c0020d42:	e8 a9 f7 fd ff       	call   c00004f0 <memset>
c0020d47:	83 c4 18             	add    esp,0x18
c0020d4a:	89 d8                	mov    eax,ebx
c0020d4c:	5b                   	pop    ebx
c0020d4d:	c3                   	ret    

c0020d4e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020d4e:	53                   	push   ebx
c0020d4f:	b8 01 00 00 00       	mov    eax,0x1
c0020d54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d5c:	83 f9 10             	cmp    ecx,0x10
c0020d5f:	7f 21                	jg     c0020d82 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d65:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020d68:	89 03                	mov    DWORD PTR [ebx],eax
c0020d6a:	b8 01 00 00 00       	mov    eax,0x1
c0020d6f:	d3 e0                	shl    eax,cl
c0020d71:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020d75:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020d78:	31 c0                	xor    eax,eax
c0020d7a:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020d82:	5b                   	pop    ebx
c0020d83:	c3                   	ret    

c0020d84 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020d84:	55                   	push   ebp
c0020d85:	57                   	push   edi
c0020d86:	bf 08 00 00 00       	mov    edi,0x8
c0020d8b:	56                   	push   esi
c0020d8c:	53                   	push   ebx
c0020d8d:	83 ec 18             	sub    esp,0x18
c0020d90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020d94:	68 50 2d 03 c0       	push   0xc0032d50
c0020d99:	e8 ac 87 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0020d9e:	83 c4 10             	add    esp,0x10
c0020da1:	31 c9                	xor    ecx,ecx
c0020da3:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020daa:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020db0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020db4:	99                   	cdq    
c0020db5:	f7 ff                	idiv   edi
c0020db7:	8d 42 24             	lea    eax,[edx+0x24]
c0020dba:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020dbe:	85 f6                	test   esi,esi
c0020dc0:	75 1a                	jne    c0020ddc <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020dc2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020dc6:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020dca:	50                   	push   eax
c0020dcb:	50                   	push   eax
c0020dcc:	52                   	push   edx
c0020dcd:	68 61 2d 03 c0       	push   0xc0032d61
c0020dd2:	e8 73 87 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0020dd7:	83 c4 10             	add    esp,0x10
c0020dda:	eb 1b                	jmp    c0020df7 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020ddc:	41                   	inc    ecx
c0020ddd:	83 f9 08             	cmp    ecx,0x8
c0020de0:	75 ce                	jne    c0020db0 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020de2:	83 ec 0c             	sub    esp,0xc
c0020de5:	be 01 00 00 00       	mov    esi,0x1
c0020dea:	68 82 2d 03 c0       	push   0xc0032d82
c0020def:	e8 56 87 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0020df4:	83 c4 10             	add    esp,0x10
c0020df7:	83 c4 0c             	add    esp,0xc
c0020dfa:	89 f0                	mov    eax,esi
c0020dfc:	5b                   	pop    ebx
c0020dfd:	5e                   	pop    esi
c0020dfe:	5f                   	pop    edi
c0020dff:	5d                   	pop    ebp
c0020e00:	c3                   	ret    

c0020e01 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020e01:	55                   	push   ebp
c0020e02:	57                   	push   edi
c0020e03:	56                   	push   esi
c0020e04:	53                   	push   ebx
c0020e05:	51                   	push   ecx
c0020e06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e0a:	85 db                	test   ebx,ebx
c0020e0c:	0f 84 bc 00 00 00    	je     c0020ece <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e12:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020e19:	0f 84 af 00 00 00    	je     c0020ece <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e1f:	31 c9                	xor    ecx,ecx
c0020e21:	bf 08 00 00 00       	mov    edi,0x8
c0020e26:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020e2c:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020e2f:	99                   	cdq    
c0020e30:	f7 ff                	idiv   edi
c0020e32:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020e39:	85 ed                	test   ebp,ebp
c0020e3b:	0f 84 9e 00 00 00    	je     c0020edf <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020e41:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020e47:	89 e9                	mov    ecx,ebp
c0020e49:	bf 01 00 00 00       	mov    edi,0x1
c0020e4e:	d3 e7                	shl    edi,cl
c0020e50:	31 c9                	xor    ecx,ecx
c0020e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e55:	b8 01 00 00 00       	mov    eax,0x1
c0020e5a:	d3 e0                	shl    eax,cl
c0020e5c:	85 04 24             	test   DWORD PTR [esp],eax
c0020e5f:	74 06                	je     c0020e67 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020e61:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020e65:	75 67                	jne    c0020ece <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e67:	41                   	inc    ecx
c0020e68:	83 f9 11             	cmp    ecx,0x11
c0020e6b:	75 e8                	jne    c0020e55 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020e6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e70:	46                   	inc    esi
c0020e71:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020e77:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020e82:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020e89:	09 f8                	or     eax,edi
c0020e8b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020e91:	31 c0                	xor    eax,eax
c0020e93:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020e9b:	74 09                	je     c0020ea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020e9d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020ea4:	eb 06                	jmp    c0020eac <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020ea6:	40                   	inc    eax
c0020ea7:	83 f8 08             	cmp    eax,0x8
c0020eaa:	75 e7                	jne    c0020e93 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020eac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020eb0:	83 fd 09             	cmp    ebp,0x9
c0020eb3:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020eb6:	89 2a                	mov    DWORD PTR [edx],ebp
c0020eb8:	75 07                	jne    c0020ec1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020eba:	b8 8d 0c 02 c0       	mov    eax,0xc0020c8d
c0020ebf:	eb 31                	jmp    c0020ef2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ec1:	83 f8 01             	cmp    eax,0x1
c0020ec4:	75 0c                	jne    c0020ed2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020ec6:	f7 d7                	not    edi
c0020ec8:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020ece:	31 c0                	xor    eax,eax
c0020ed0:	eb 20                	jmp    c0020ef2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ed2:	85 c0                	test   eax,eax
c0020ed4:	75 1c                	jne    c0020ef2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ed6:	8b 04 ad c0 45 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcba40]
c0020edd:	eb 13                	jmp    c0020ef2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020edf:	41                   	inc    ecx
c0020ee0:	46                   	inc    esi
c0020ee1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020ee7:	83 f9 08             	cmp    ecx,0x8
c0020eea:	0f 85 36 ff ff ff    	jne    c0020e26 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020ef0:	eb dc                	jmp    c0020ece <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ef2:	5a                   	pop    edx
c0020ef3:	5b                   	pop    ebx
c0020ef4:	5e                   	pop    esi
c0020ef5:	5f                   	pop    edi
c0020ef6:	5d                   	pop    ebp
c0020ef7:	c3                   	ret    

c0020ef8 <KiCheckSignalZ>:
c0020ef8:	83 ec 10             	sub    esp,0x10
c0020efb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020eff:	50                   	push   eax
c0020f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f08:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020f0e:	e8 ee fe ff ff       	call   c0020e01 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020f13:	5a                   	pop    edx
c0020f14:	31 d2                	xor    edx,edx
c0020f16:	59                   	pop    ecx
c0020f17:	85 c0                	test   eax,eax
c0020f19:	74 19                	je     c0020f34 <KiCheckSignalZ+0x3c>
c0020f1b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020f21:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f24:	89 02                	mov    DWORD PTR [edx],eax
c0020f26:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f31:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020f34:	89 d0                	mov    eax,edx
c0020f36:	83 c4 10             	add    esp,0x10
c0020f39:	c3                   	ret    

c0020f3a <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020f3a:	56                   	push   esi
c0020f3b:	53                   	push   ebx
c0020f3c:	bb 01 00 00 00       	mov    ebx,0x1
c0020f41:	52                   	push   edx
c0020f42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020f4a:	d3 e3                	shl    ebx,cl
c0020f4c:	83 f9 10             	cmp    ecx,0x10
c0020f4f:	7f 08                	jg     c0020f59 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020f51:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020f57:	75 10                	jne    c0020f69 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020f59:	83 ec 0c             	sub    esp,0xc
c0020f5c:	68 93 2d 03 c0       	push   0xc0032d93
c0020f61:	e8 6c f5 ff ff       	call   c00204d2 <KePanic(char const*)>
c0020f66:	83 c4 10             	add    esp,0x10
c0020f69:	f7 d3                	not    ebx
c0020f6b:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020f71:	58                   	pop    eax
c0020f72:	5b                   	pop    ebx
c0020f73:	5e                   	pop    esi
c0020f74:	c3                   	ret    

c0020f75 <KiFinishSignalZ>:
c0020f75:	53                   	push   ebx
c0020f76:	83 ec 10             	sub    esp,0x10
c0020f79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f7d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020f80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f88:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020f8e:	e8 a7 ff ff ff       	call   c0020f3a <KeCompleteSignal(SigHandlerBlock*, int)>
c0020f93:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f99:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020fa0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020fa7:	83 c4 18             	add    esp,0x18
c0020faa:	5b                   	pop    ebx
c0020fab:	c3                   	ret    

c0020fac <SysSeekDir(regs*)>:
c0020fac:	31 c0                	xor    eax,eax
c0020fae:	31 d2                	xor    edx,edx
c0020fb0:	c3                   	ret    

c0020fb1 <SysTellDir(regs*)>:
c0020fb1:	31 c0                	xor    eax,eax
c0020fb3:	31 d2                	xor    edx,edx
c0020fb5:	c3                   	ret    

c0020fb6 <SysVerify(regs*)>:
c0020fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fba:	31 d2                	xor    edx,edx
c0020fbc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fbf:	c3                   	ret    

c0020fc0 <SysGetArgc(regs*)>:
c0020fc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fc8:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020fce:	89 c2                	mov    edx,eax
c0020fd0:	c1 fa 1f             	sar    edx,0x1f
c0020fd3:	c3                   	ret    

c0020fd4 <SysTTYName(regs*)>:
c0020fd4:	b8 01 00 00 00       	mov    eax,0x1
c0020fd9:	31 d2                	xor    edx,edx
c0020fdb:	c3                   	ret    

c0020fdc <SysFormatDisk(regs*)>:
c0020fdc:	56                   	push   esi
c0020fdd:	53                   	push   ebx
c0020fde:	83 ec 04             	sub    esp,0x4
c0020fe1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020fe5:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020feb:	eb 2a                	jmp    c0021017 <SysFormatDisk(regs*)+0x3b>
c0020fed:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020ff0:	83 ec 0c             	sub    esp,0xc
c0020ff3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020ff6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020ff8:	51                   	push   ecx
c0020ff9:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020ffc:	51                   	push   ecx
c0020ffd:	50                   	push   eax
c0020ffe:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0021005:	50                   	push   eax
c0021006:	53                   	push   ebx
c0021007:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c002100a:	83 c4 20             	add    esp,0x20
c002100d:	83 f8 08             	cmp    eax,0x8
c0021010:	89 c1                	mov    ecx,eax
c0021012:	75 14                	jne    c0021028 <SysFormatDisk(regs*)+0x4c>
c0021014:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0021017:	85 db                	test   ebx,ebx
c0021019:	75 d2                	jne    c0020fed <SysFormatDisk(regs*)+0x11>
c002101b:	b8 03 00 00 00       	mov    eax,0x3
c0021020:	31 d2                	xor    edx,edx
c0021022:	83 c4 04             	add    esp,0x4
c0021025:	5b                   	pop    ebx
c0021026:	5e                   	pop    esi
c0021027:	c3                   	ret    
c0021028:	85 c0                	test   eax,eax
c002102a:	74 13                	je     c002103f <SysFormatDisk(regs*)+0x63>
c002102c:	31 d2                	xor    edx,edx
c002102e:	83 f9 09             	cmp    ecx,0x9
c0021031:	b8 01 00 00 00       	mov    eax,0x1
c0021036:	74 ea                	je     c0021022 <SysFormatDisk(regs*)+0x46>
c0021038:	b8 02 00 00 00       	mov    eax,0x2
c002103d:	eb e1                	jmp    c0021020 <SysFormatDisk(regs*)+0x44>
c002103f:	31 c0                	xor    eax,eax
c0021041:	eb dd                	jmp    c0021020 <SysFormatDisk(regs*)+0x44>

c0021043 <SysSetDiskVolumeLabel(regs*)>:
c0021043:	56                   	push   esi
c0021044:	53                   	push   ebx
c0021045:	83 ec 04             	sub    esp,0x4
c0021048:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002104c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c002104f:	83 f8 19             	cmp    eax,0x19
c0021052:	77 33                	ja     c0021087 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021054:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002105b:	85 c9                	test   ecx,ecx
c002105d:	74 28                	je     c0021087 <SysSetDiskVolumeLabel(regs*)+0x44>
c002105f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021062:	85 db                	test   ebx,ebx
c0021064:	74 21                	je     c0021087 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021066:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c002106c:	85 d2                	test   edx,edx
c002106e:	74 17                	je     c0021087 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021070:	8b 32                	mov    esi,DWORD PTR [edx]
c0021072:	53                   	push   ebx
c0021073:	50                   	push   eax
c0021074:	51                   	push   ecx
c0021075:	52                   	push   edx
c0021076:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0021079:	83 c4 10             	add    esp,0x10
c002107c:	83 c4 04             	add    esp,0x4
c002107f:	5b                   	pop    ebx
c0021080:	5e                   	pop    esi
c0021081:	89 c2                	mov    edx,eax
c0021083:	c1 fa 1f             	sar    edx,0x1f
c0021086:	c3                   	ret    
c0021087:	83 c4 04             	add    esp,0x4
c002108a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002108f:	5b                   	pop    ebx
c0021090:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021095:	5e                   	pop    esi
c0021096:	c3                   	ret    

c0021097 <SysGetDiskVolumeLabel(regs*)>:
c0021097:	57                   	push   edi
c0021098:	56                   	push   esi
c0021099:	53                   	push   ebx
c002109a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002109e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00210a1:	83 fa 19             	cmp    edx,0x19
c00210a4:	77 3c                	ja     c00210e2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210a6:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c00210ad:	85 c9                	test   ecx,ecx
c00210af:	74 31                	je     c00210e2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210b1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00210b4:	85 db                	test   ebx,ebx
c00210b6:	74 2a                	je     c00210e2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210b8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00210bb:	85 f6                	test   esi,esi
c00210bd:	74 23                	je     c00210e2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210bf:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00210c5:	85 c0                	test   eax,eax
c00210c7:	74 19                	je     c00210e2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210c9:	83 ec 0c             	sub    esp,0xc
c00210cc:	8b 38                	mov    edi,DWORD PTR [eax]
c00210ce:	56                   	push   esi
c00210cf:	53                   	push   ebx
c00210d0:	52                   	push   edx
c00210d1:	51                   	push   ecx
c00210d2:	50                   	push   eax
c00210d3:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00210d6:	83 c4 20             	add    esp,0x20
c00210d9:	5b                   	pop    ebx
c00210da:	5e                   	pop    esi
c00210db:	89 c2                	mov    edx,eax
c00210dd:	c1 fa 1f             	sar    edx,0x1f
c00210e0:	5f                   	pop    edi
c00210e1:	c3                   	ret    
c00210e2:	5b                   	pop    ebx
c00210e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00210e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210ed:	5e                   	pop    esi
c00210ee:	5f                   	pop    edi
c00210ef:	c3                   	ret    

c00210f0 <SysShutdown(regs*)>:
c00210f0:	57                   	push   edi
c00210f1:	56                   	push   esi
c00210f2:	83 ec 04             	sub    esp,0x4
c00210f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00210fc:	85 c0                	test   eax,eax
c00210fe:	74 1e                	je     c002111e <SysShutdown(regs*)+0x2e>
c0021100:	83 f8 01             	cmp    eax,0x1
c0021103:	74 5f                	je     c0021164 <SysShutdown(regs*)+0x74>
c0021105:	83 f8 02             	cmp    eax,0x2
c0021108:	be ff ff ff ff       	mov    esi,0xffffffff
c002110d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0021112:	74 32                	je     c0021146 <SysShutdown(regs*)+0x56>
c0021114:	83 c4 04             	add    esp,0x4
c0021117:	89 f0                	mov    eax,esi
c0021119:	5e                   	pop    esi
c002111a:	89 fa                	mov    edx,edi
c002111c:	5f                   	pop    edi
c002111d:	c3                   	ret    
c002111e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021123:	be ff ff ff ff       	mov    esi,0xffffffff
c0021128:	bf ff ff ff ff       	mov    edi,0xffffffff
c002112d:	8b 10                	mov    edx,DWORD PTR [eax]
c002112f:	6a 00                	push   0x0
c0021131:	6a 00                	push   0x0
c0021133:	6a 00                	push   0x0
c0021135:	50                   	push   eax
c0021136:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	89 f0                	mov    eax,esi
c002113e:	83 c4 04             	add    esp,0x4
c0021141:	89 fa                	mov    edx,edi
c0021143:	5e                   	pop    esi
c0021144:	5f                   	pop    edi
c0021145:	c3                   	ret    
c0021146:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002114b:	8b 10                	mov    edx,DWORD PTR [eax]
c002114d:	6a 00                	push   0x0
c002114f:	6a 00                	push   0x0
c0021151:	6a 01                	push   0x1
c0021153:	50                   	push   eax
c0021154:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021157:	83 c4 10             	add    esp,0x10
c002115a:	89 f0                	mov    eax,esi
c002115c:	83 c4 04             	add    esp,0x4
c002115f:	89 fa                	mov    edx,edi
c0021161:	5e                   	pop    esi
c0021162:	5f                   	pop    edi
c0021163:	c3                   	ret    
c0021164:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0021169:	85 c0                	test   eax,eax
c002116b:	74 02                	je     c002116f <SysShutdown(regs*)+0x7f>
c002116d:	ff d0                	call   eax
c002116f:	31 f6                	xor    esi,esi
c0021171:	83 c4 04             	add    esp,0x4
c0021174:	89 f0                	mov    eax,esi
c0021176:	31 ff                	xor    edi,edi
c0021178:	5e                   	pop    esi
c0021179:	89 fa                	mov    edx,edi
c002117b:	5f                   	pop    edi
c002117c:	c3                   	ret    

c002117d <SysRealpath(regs*)>:
c002117d:	53                   	push   ebx
c002117e:	83 ec 08             	sub    esp,0x8
c0021181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021185:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0021188:	85 c9                	test   ecx,ecx
c002118a:	74 36                	je     c00211c2 <SysRealpath(regs*)+0x45>
c002118c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c002118f:	31 d2                	xor    edx,edx
c0021191:	b8 01 00 00 00       	mov    eax,0x1
c0021196:	85 db                	test   ebx,ebx
c0021198:	75 05                	jne    c002119f <SysRealpath(regs*)+0x22>
c002119a:	83 c4 08             	add    esp,0x8
c002119d:	5b                   	pop    ebx
c002119e:	c3                   	ret    
c002119f:	6a 00                	push   0x0
c00211a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00211a9:	05 0c 01 00 00       	add    eax,0x10c
c00211ae:	50                   	push   eax
c00211af:	51                   	push   ecx
c00211b0:	53                   	push   ebx
c00211b1:	e8 a0 92 ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00211b6:	83 c4 10             	add    esp,0x10
c00211b9:	31 c0                	xor    eax,eax
c00211bb:	31 d2                	xor    edx,edx
c00211bd:	83 c4 08             	add    esp,0x8
c00211c0:	5b                   	pop    ebx
c00211c1:	c3                   	ret    
c00211c2:	b8 01 00 00 00       	mov    eax,0x1
c00211c7:	31 d2                	xor    edx,edx
c00211c9:	eb f2                	jmp    c00211bd <SysRealpath(regs*)+0x40>

c00211cb <SysReadDir(regs*)>:
c00211cb:	53                   	push   ebx
c00211cc:	83 ec 18             	sub    esp,0x18
c00211cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00211d3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00211d6:	83 f8 02             	cmp    eax,0x2
c00211d9:	76 4f                	jbe    c002122a <SysReadDir(regs*)+0x5f>
c00211db:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00211e2:	77 52                	ja     c0021236 <SysReadDir(regs*)+0x6b>
c00211e4:	83 ec 0c             	sub    esp,0xc
c00211e7:	50                   	push   eax
c00211e8:	e8 ee 6e ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c00211ed:	83 c4 10             	add    esp,0x10
c00211f0:	85 c0                	test   eax,eax
c00211f2:	74 42                	je     c0021236 <SysReadDir(regs*)+0x6b>
c00211f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211fc:	83 ec 0c             	sub    esp,0xc
c00211ff:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021203:	8b 10                	mov    edx,DWORD PTR [eax]
c0021205:	51                   	push   ecx
c0021206:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021209:	51                   	push   ecx
c002120a:	6a 00                	push   0x0
c002120c:	68 10 01 00 00       	push   0x110
c0021211:	50                   	push   eax
c0021212:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021215:	83 c4 20             	add    esp,0x20
c0021218:	85 c0                	test   eax,eax
c002121a:	89 c1                	mov    ecx,eax
c002121c:	74 27                	je     c0021245 <SysReadDir(regs*)+0x7a>
c002121e:	31 d2                	xor    edx,edx
c0021220:	83 f9 07             	cmp    ecx,0x7
c0021223:	b8 02 00 00 00       	mov    eax,0x2
c0021228:	75 16                	jne    c0021240 <SysReadDir(regs*)+0x75>
c002122a:	b8 01 00 00 00       	mov    eax,0x1
c002122f:	31 d2                	xor    edx,edx
c0021231:	83 c4 18             	add    esp,0x18
c0021234:	5b                   	pop    ebx
c0021235:	c3                   	ret    
c0021236:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002123b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021240:	83 c4 18             	add    esp,0x18
c0021243:	5b                   	pop    ebx
c0021244:	c3                   	ret    
c0021245:	31 c0                	xor    eax,eax
c0021247:	31 d2                	xor    edx,edx
c0021249:	eb e6                	jmp    c0021231 <SysReadDir(regs*)+0x66>

c002124b <SysIsATTY(regs*)>:
c002124b:	83 ec 0c             	sub    esp,0xc
c002124e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021252:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021255:	83 f8 02             	cmp    eax,0x2
c0021258:	76 07                	jbe    c0021261 <SysIsATTY(regs*)+0x16>
c002125a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c002125f:	75 26                	jne    c0021287 <SysIsATTY(regs*)+0x3c>
c0021261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021266:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021269:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002126f:	85 c0                	test   eax,eax
c0021271:	74 24                	je     c0021297 <SysIsATTY(regs*)+0x4c>
c0021273:	8b 10                	mov    edx,DWORD PTR [eax]
c0021275:	83 ec 0c             	sub    esp,0xc
c0021278:	50                   	push   eax
c0021279:	ff 12                	call   DWORD PTR [edx]
c002127b:	83 c4 10             	add    esp,0x10
c002127e:	31 d2                	xor    edx,edx
c0021280:	83 c4 0c             	add    esp,0xc
c0021283:	0f b6 c0             	movzx  eax,al
c0021286:	c3                   	ret    
c0021287:	83 ec 0c             	sub    esp,0xc
c002128a:	50                   	push   eax
c002128b:	e8 4b 6e ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c0021290:	83 c4 10             	add    esp,0x10
c0021293:	85 c0                	test   eax,eax
c0021295:	75 dc                	jne    c0021273 <SysIsATTY(regs*)+0x28>
c0021297:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002129c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212a1:	83 c4 0c             	add    esp,0xc
c00212a4:	c3                   	ret    

c00212a5 <SysSeek(regs*)>:
c00212a5:	56                   	push   esi
c00212a6:	53                   	push   ebx
c00212a7:	83 ec 04             	sub    esp,0x4
c00212aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00212ae:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00212b1:	8d 71 fd             	lea    esi,[ecx-0x3]
c00212b4:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00212ba:	77 33                	ja     c00212ef <SysSeek(regs*)+0x4a>
c00212bc:	83 ec 0c             	sub    esp,0xc
c00212bf:	51                   	push   ecx
c00212c0:	e8 16 6e ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c00212c5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00212c8:	83 c4 0c             	add    esp,0xc
c00212cb:	31 db                	xor    ebx,ebx
c00212cd:	53                   	push   ebx
c00212ce:	51                   	push   ecx
c00212cf:	50                   	push   eax
c00212d0:	e8 69 95 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00212d5:	83 c4 10             	add    esp,0x10
c00212d8:	85 c0                	test   eax,eax
c00212da:	0f 95 c0             	setne  al
c00212dd:	31 d2                	xor    edx,edx
c00212df:	0f b6 c0             	movzx  eax,al
c00212e2:	f7 d8                	neg    eax
c00212e4:	83 d2 00             	adc    edx,0x0
c00212e7:	83 c4 04             	add    esp,0x4
c00212ea:	5b                   	pop    ebx
c00212eb:	f7 da                	neg    edx
c00212ed:	5e                   	pop    esi
c00212ee:	c3                   	ret    
c00212ef:	83 c4 04             	add    esp,0x4
c00212f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212f7:	5b                   	pop    ebx
c00212f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212fd:	5e                   	pop    esi
c00212fe:	c3                   	ret    

c00212ff <SysTell(regs*)>:
c00212ff:	53                   	push   ebx
c0021300:	83 ec 08             	sub    esp,0x8
c0021303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021307:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002130a:	83 f8 02             	cmp    eax,0x2
c002130d:	76 4e                	jbe    c002135d <SysTell(regs*)+0x5e>
c002130f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021314:	76 19                	jbe    c002132f <SysTell(regs*)+0x30>
c0021316:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021319:	31 d2                	xor    edx,edx
c002131b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021321:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021328:	83 c4 08             	add    esp,0x8
c002132b:	31 c0                	xor    eax,eax
c002132d:	5b                   	pop    ebx
c002132e:	c3                   	ret    
c002132f:	83 ec 0c             	sub    esp,0xc
c0021332:	50                   	push   eax
c0021333:	e8 a3 6d ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c0021338:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002133b:	5a                   	pop    edx
c002133c:	59                   	pop    ecx
c002133d:	53                   	push   ebx
c002133e:	50                   	push   eax
c002133f:	e8 a6 95 ff ff       	call   c001a8ea <File::tell(unsigned long long*)>
c0021344:	83 c4 10             	add    esp,0x10
c0021347:	85 c0                	test   eax,eax
c0021349:	0f 95 c0             	setne  al
c002134c:	31 d2                	xor    edx,edx
c002134e:	0f b6 c0             	movzx  eax,al
c0021351:	f7 d8                	neg    eax
c0021353:	83 d2 00             	adc    edx,0x0
c0021356:	83 c4 08             	add    esp,0x8
c0021359:	5b                   	pop    ebx
c002135a:	f7 da                	neg    edx
c002135c:	c3                   	ret    
c002135d:	83 c4 08             	add    esp,0x8
c0021360:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021365:	5b                   	pop    ebx
c0021366:	ba ff ff ff ff       	mov    edx,0xffffffff
c002136b:	c3                   	ret    

c002136c <SysSize(regs*)>:
c002136c:	53                   	push   ebx
c002136d:	83 ec 18             	sub    esp,0x18
c0021370:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021374:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021377:	83 f8 02             	cmp    eax,0x2
c002137a:	76 54                	jbe    c00213d0 <SysSize(regs*)+0x64>
c002137c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021381:	76 19                	jbe    c002139c <SysSize(regs*)+0x30>
c0021383:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021386:	31 d2                	xor    edx,edx
c0021388:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002138e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021395:	83 c4 18             	add    esp,0x18
c0021398:	31 c0                	xor    eax,eax
c002139a:	5b                   	pop    ebx
c002139b:	c3                   	ret    
c002139c:	83 ec 0c             	sub    esp,0xc
c002139f:	50                   	push   eax
c00213a0:	e8 36 6d ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c00213a5:	83 c4 0c             	add    esp,0xc
c00213a8:	8d 54 24 13          	lea    edx,[esp+0x13]
c00213ac:	52                   	push   edx
c00213ad:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00213b0:	52                   	push   edx
c00213b1:	50                   	push   eax
c00213b2:	e8 cb 96 ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c00213b7:	83 c4 10             	add    esp,0x10
c00213ba:	85 c0                	test   eax,eax
c00213bc:	0f 95 c0             	setne  al
c00213bf:	31 d2                	xor    edx,edx
c00213c1:	0f b6 c0             	movzx  eax,al
c00213c4:	f7 d8                	neg    eax
c00213c6:	83 d2 00             	adc    edx,0x0
c00213c9:	83 c4 18             	add    esp,0x18
c00213cc:	5b                   	pop    ebx
c00213cd:	f7 da                	neg    edx
c00213cf:	c3                   	ret    
c00213d0:	83 c4 18             	add    esp,0x18
c00213d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213d8:	5b                   	pop    ebx
c00213d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213de:	c3                   	ret    

c00213df <SysSizeFromFilename(regs*)>:
c00213df:	55                   	push   ebp
c00213e0:	57                   	push   edi
c00213e1:	56                   	push   esi
c00213e2:	53                   	push   ebx
c00213e3:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00213e9:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00213f0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00213f3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00213f6:	85 f6                	test   esi,esi
c00213f8:	89 f8                	mov    eax,edi
c00213fa:	74 09                	je     c0021405 <SysSizeFromFilename(regs*)+0x26>
c00213fc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021402:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021405:	83 f8 02             	cmp    eax,0x2
c0021408:	0f 86 ca 00 00 00    	jbe    c00214d8 <SysSizeFromFilename(regs*)+0xf9>
c002140e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021413:	76 1f                	jbe    c0021434 <SysSizeFromFilename(regs*)+0x55>
c0021415:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021418:	31 d2                	xor    edx,edx
c002141a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021420:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021427:	31 c0                	xor    eax,eax
c0021429:	81 c4 4c 02 00 00    	add    esp,0x24c
c002142f:	5b                   	pop    ebx
c0021430:	5e                   	pop    esi
c0021431:	5f                   	pop    edi
c0021432:	5d                   	pop    ebp
c0021433:	c3                   	ret    
c0021434:	83 ec 0c             	sub    esp,0xc
c0021437:	68 14 01 00 00       	push   0x114
c002143c:	e8 d3 52 ff ff       	call   c0016714 <malloc>
c0021441:	6a 01                	push   0x1
c0021443:	89 c5                	mov    ebp,eax
c0021445:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002144a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002144d:	51                   	push   ecx
c002144e:	57                   	push   edi
c002144f:	55                   	push   ebp
c0021450:	e8 2f 92 ff ff       	call   c001a684 <File::File(char const*, Process*, bool)>
c0021455:	83 c4 1c             	add    esp,0x1c
c0021458:	8d 44 24 13          	lea    eax,[esp+0x13]
c002145c:	50                   	push   eax
c002145d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021460:	53                   	push   ebx
c0021461:	55                   	push   ebp
c0021462:	e8 1b 96 ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c0021467:	83 c4 10             	add    esp,0x10
c002146a:	85 ed                	test   ebp,ebp
c002146c:	89 c3                	mov    ebx,eax
c002146e:	74 0d                	je     c002147d <SysSizeFromFilename(regs*)+0x9e>
c0021470:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021473:	83 ec 0c             	sub    esp,0xc
c0021476:	55                   	push   ebp
c0021477:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002147a:	83 c4 10             	add    esp,0x10
c002147d:	85 db                	test   ebx,ebx
c002147f:	75 57                	jne    c00214d8 <SysSizeFromFilename(regs*)+0xf9>
c0021481:	6a 00                	push   0x0
c0021483:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021488:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002148b:	05 0c 01 00 00       	add    eax,0x10c
c0021490:	50                   	push   eax
c0021491:	57                   	push   edi
c0021492:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021499:	53                   	push   ebx
c002149a:	e8 b7 8f ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002149f:	58                   	pop    eax
c00214a0:	5a                   	pop    edx
c00214a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214a5:	50                   	push   eax
c00214a6:	53                   	push   ebx
c00214a7:	e8 12 8a ff ff       	call   c0019ebe <KeDereferenceSymlink(char const*, char*)>
c00214ac:	83 c4 10             	add    esp,0x10
c00214af:	ba 00 00 00 00       	mov    edx,0x0
c00214b4:	83 f8 01             	cmp    eax,0x1
c00214b7:	b8 00 00 00 00       	mov    eax,0x0
c00214bc:	74 2f                	je     c00214ed <SysSizeFromFilename(regs*)+0x10e>
c00214be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00214c3:	74 3b                	je     c0021500 <SysSizeFromFilename(regs*)+0x121>
c00214c5:	85 f6                	test   esi,esi
c00214c7:	0f 84 5c ff ff ff    	je     c0021429 <SysSizeFromFilename(regs*)+0x4a>
c00214cd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00214d3:	e9 51 ff ff ff       	jmp    c0021429 <SysSizeFromFilename(regs*)+0x4a>
c00214d8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00214de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214e3:	5b                   	pop    ebx
c00214e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214e9:	5e                   	pop    esi
c00214ea:	5f                   	pop    edi
c00214eb:	5d                   	pop    ebp
c00214ec:	c3                   	ret    
c00214ed:	85 f6                	test   esi,esi
c00214ef:	0f 84 34 ff ff ff    	je     c0021429 <SysSizeFromFilename(regs*)+0x4a>
c00214f5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00214fb:	e9 29 ff ff ff       	jmp    c0021429 <SysSizeFromFilename(regs*)+0x4a>
c0021500:	85 f6                	test   esi,esi
c0021502:	0f 84 21 ff ff ff    	je     c0021429 <SysSizeFromFilename(regs*)+0x4a>
c0021508:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002150e:	e9 16 ff ff ff       	jmp    c0021429 <SysSizeFromFilename(regs*)+0x4a>

c0021513 <SysSizeFromFilenameNoSymlink(regs*)>:
c0021513:	55                   	push   ebp
c0021514:	57                   	push   edi
c0021515:	56                   	push   esi
c0021516:	53                   	push   ebx
c0021517:	81 ec 4c 02 00 00    	sub    esp,0x24c
c002151d:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0021524:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021527:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002152a:	85 f6                	test   esi,esi
c002152c:	89 f8                	mov    eax,edi
c002152e:	74 09                	je     c0021539 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0021530:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021536:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021539:	83 f8 02             	cmp    eax,0x2
c002153c:	0f 86 ca 00 00 00    	jbe    c002160c <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0021542:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021547:	76 1f                	jbe    c0021568 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0021549:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002154c:	31 d2                	xor    edx,edx
c002154e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021554:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002155b:	31 c0                	xor    eax,eax
c002155d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021563:	5b                   	pop    ebx
c0021564:	5e                   	pop    esi
c0021565:	5f                   	pop    edi
c0021566:	5d                   	pop    ebp
c0021567:	c3                   	ret    
c0021568:	83 ec 0c             	sub    esp,0xc
c002156b:	68 14 01 00 00       	push   0x114
c0021570:	e8 9f 51 ff ff       	call   c0016714 <malloc>
c0021575:	6a 00                	push   0x0
c0021577:	89 c5                	mov    ebp,eax
c0021579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002157e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021581:	51                   	push   ecx
c0021582:	57                   	push   edi
c0021583:	55                   	push   ebp
c0021584:	e8 fb 90 ff ff       	call   c001a684 <File::File(char const*, Process*, bool)>
c0021589:	83 c4 1c             	add    esp,0x1c
c002158c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021590:	50                   	push   eax
c0021591:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021594:	53                   	push   ebx
c0021595:	55                   	push   ebp
c0021596:	e8 e7 94 ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c002159b:	83 c4 10             	add    esp,0x10
c002159e:	85 ed                	test   ebp,ebp
c00215a0:	89 c3                	mov    ebx,eax
c00215a2:	74 0d                	je     c00215b1 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00215a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00215a7:	83 ec 0c             	sub    esp,0xc
c00215aa:	55                   	push   ebp
c00215ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00215ae:	83 c4 10             	add    esp,0x10
c00215b1:	85 db                	test   ebx,ebx
c00215b3:	75 57                	jne    c002160c <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00215b5:	6a 00                	push   0x0
c00215b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00215bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00215bf:	05 0c 01 00 00       	add    eax,0x10c
c00215c4:	50                   	push   eax
c00215c5:	57                   	push   edi
c00215c6:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00215cd:	53                   	push   ebx
c00215ce:	e8 83 8e ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00215d3:	58                   	pop    eax
c00215d4:	5a                   	pop    edx
c00215d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215d9:	50                   	push   eax
c00215da:	53                   	push   ebx
c00215db:	e8 de 88 ff ff       	call   c0019ebe <KeDereferenceSymlink(char const*, char*)>
c00215e0:	83 c4 10             	add    esp,0x10
c00215e3:	ba 00 00 00 00       	mov    edx,0x0
c00215e8:	83 f8 01             	cmp    eax,0x1
c00215eb:	b8 00 00 00 00       	mov    eax,0x0
c00215f0:	74 2f                	je     c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00215f2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00215f7:	74 3b                	je     c0021634 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00215f9:	85 f6                	test   esi,esi
c00215fb:	0f 84 5c ff ff ff    	je     c002155d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021601:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021607:	e9 51 ff ff ff       	jmp    c002155d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c002160c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021612:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021617:	5b                   	pop    ebx
c0021618:	ba ff ff ff ff       	mov    edx,0xffffffff
c002161d:	5e                   	pop    esi
c002161e:	5f                   	pop    edi
c002161f:	5d                   	pop    ebp
c0021620:	c3                   	ret    
c0021621:	85 f6                	test   esi,esi
c0021623:	0f 84 34 ff ff ff    	je     c002155d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021629:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002162f:	e9 29 ff ff ff       	jmp    c002155d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021634:	85 f6                	test   esi,esi
c0021636:	0f 84 21 ff ff ff    	je     c002155d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c002163c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021642:	e9 16 ff ff ff       	jmp    c002155d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0021647 <SysClose(regs*)>:
c0021647:	53                   	push   ebx
c0021648:	83 ec 08             	sub    esp,0x8
c002164b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002164f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021652:	83 f8 02             	cmp    eax,0x2
c0021655:	76 41                	jbe    c0021698 <SysClose(regs*)+0x51>
c0021657:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c002165d:	83 fa 01             	cmp    edx,0x1
c0021660:	76 2d                	jbe    c002168f <SysClose(regs*)+0x48>
c0021662:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021667:	77 2f                	ja     c0021698 <SysClose(regs*)+0x51>
c0021669:	83 ec 0c             	sub    esp,0xc
c002166c:	50                   	push   eax
c002166d:	e8 69 6a ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c0021672:	89 04 24             	mov    DWORD PTR [esp],eax
c0021675:	89 c3                	mov    ebx,eax
c0021677:	e8 62 91 ff ff       	call   c001a7de <File::close()>
c002167c:	83 c4 10             	add    esp,0x10
c002167f:	85 db                	test   ebx,ebx
c0021681:	74 0c                	je     c002168f <SysClose(regs*)+0x48>
c0021683:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021685:	83 ec 0c             	sub    esp,0xc
c0021688:	53                   	push   ebx
c0021689:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002168c:	83 c4 10             	add    esp,0x10
c002168f:	83 c4 08             	add    esp,0x8
c0021692:	31 c0                	xor    eax,eax
c0021694:	5b                   	pop    ebx
c0021695:	31 d2                	xor    edx,edx
c0021697:	c3                   	ret    
c0021698:	83 c4 08             	add    esp,0x8
c002169b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00216a0:	5b                   	pop    ebx
c00216a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00216a6:	c3                   	ret    

c00216a7 <SysOpenDir(regs*)>:
c00216a7:	56                   	push   esi
c00216a8:	53                   	push   ebx
c00216a9:	83 ec 04             	sub    esp,0x4
c00216ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216b0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00216b3:	85 c9                	test   ecx,ecx
c00216b5:	74 5d                	je     c0021714 <SysOpenDir(regs*)+0x6d>
c00216b7:	83 ec 0c             	sub    esp,0xc
c00216ba:	68 14 01 00 00       	push   0x114
c00216bf:	e8 50 50 ff ff       	call   c0016714 <malloc>
c00216c4:	83 c4 0c             	add    esp,0xc
c00216c7:	89 c6                	mov    esi,eax
c00216c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00216d1:	50                   	push   eax
c00216d2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00216d5:	52                   	push   edx
c00216d6:	56                   	push   esi
c00216d7:	e8 66 95 ff ff       	call   c001ac42 <Directory::Directory(char const*, Process*)>
c00216dc:	83 c4 10             	add    esp,0x10
c00216df:	85 f6                	test   esi,esi
c00216e1:	74 31                	je     c0021714 <SysOpenDir(regs*)+0x6d>
c00216e3:	83 ec 0c             	sub    esp,0xc
c00216e6:	56                   	push   esi
c00216e7:	e8 1e 96 ff ff       	call   c001ad0a <Directory::open()>
c00216ec:	83 c4 10             	add    esp,0x10
c00216ef:	85 c0                	test   eax,eax
c00216f1:	75 21                	jne    c0021714 <SysOpenDir(regs*)+0x6d>
c00216f3:	83 ec 0c             	sub    esp,0xc
c00216f6:	56                   	push   esi
c00216f7:	e8 e2 66 ff ff       	call   c0017dde <UnixFile::getFileDescriptor()>
c00216fc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	89 02                	mov    DWORD PTR [edx],eax
c0021704:	c1 f8 1f             	sar    eax,0x1f
c0021707:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c002170a:	83 c4 04             	add    esp,0x4
c002170d:	31 c0                	xor    eax,eax
c002170f:	5b                   	pop    ebx
c0021710:	31 d2                	xor    edx,edx
c0021712:	5e                   	pop    esi
c0021713:	c3                   	ret    
c0021714:	83 c4 04             	add    esp,0x4
c0021717:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002171c:	5b                   	pop    ebx
c002171d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021722:	5e                   	pop    esi
c0021723:	c3                   	ret    

c0021724 <SysMakeDir(regs*)>:
c0021724:	56                   	push   esi
c0021725:	53                   	push   ebx
c0021726:	83 ec 10             	sub    esp,0x10
c0021729:	68 14 01 00 00       	push   0x114
c002172e:	e8 e1 4f ff ff       	call   c0016714 <malloc>
c0021733:	83 c4 0c             	add    esp,0xc
c0021736:	89 c3                	mov    ebx,eax
c0021738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002173d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021740:	50                   	push   eax
c0021741:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021745:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0021748:	52                   	push   edx
c0021749:	53                   	push   ebx
c002174a:	e8 f3 94 ff ff       	call   c001ac42 <Directory::Directory(char const*, Process*)>
c002174f:	83 c4 10             	add    esp,0x10
c0021752:	85 db                	test   ebx,ebx
c0021754:	74 2c                	je     c0021782 <SysMakeDir(regs*)+0x5e>
c0021756:	83 ec 0c             	sub    esp,0xc
c0021759:	53                   	push   ebx
c002175a:	e8 8b 97 ff ff       	call   c001aeea <Directory::create()>
c002175f:	89 c6                	mov    esi,eax
c0021761:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021763:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021766:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021769:	83 c4 10             	add    esp,0x10
c002176c:	31 c0                	xor    eax,eax
c002176e:	85 f6                	test   esi,esi
c0021770:	0f 95 c0             	setne  al
c0021773:	31 d2                	xor    edx,edx
c0021775:	f7 d8                	neg    eax
c0021777:	83 d2 00             	adc    edx,0x0
c002177a:	83 c4 04             	add    esp,0x4
c002177d:	5b                   	pop    ebx
c002177e:	f7 da                	neg    edx
c0021780:	5e                   	pop    esi
c0021781:	c3                   	ret    
c0021782:	83 c4 04             	add    esp,0x4
c0021785:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002178a:	5b                   	pop    ebx
c002178b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021790:	5e                   	pop    esi
c0021791:	c3                   	ret    

c0021792 <SysCloseDir(regs*)>:
c0021792:	53                   	push   ebx
c0021793:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021798:	83 ec 08             	sub    esp,0x8
c002179b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00217a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00217a7:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00217aa:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00217b0:	77 2a                	ja     c00217dc <SysCloseDir(regs*)+0x4a>
c00217b2:	83 ec 0c             	sub    esp,0xc
c00217b5:	51                   	push   ecx
c00217b6:	e8 20 69 ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c00217bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00217be:	89 c3                	mov    ebx,eax
c00217c0:	e8 a1 95 ff ff       	call   c001ad66 <Directory::close()>
c00217c5:	83 c4 10             	add    esp,0x10
c00217c8:	85 db                	test   ebx,ebx
c00217ca:	74 0c                	je     c00217d8 <SysCloseDir(regs*)+0x46>
c00217cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00217ce:	83 ec 0c             	sub    esp,0xc
c00217d1:	53                   	push   ebx
c00217d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00217d5:	83 c4 10             	add    esp,0x10
c00217d8:	31 c0                	xor    eax,eax
c00217da:	31 d2                	xor    edx,edx
c00217dc:	83 c4 08             	add    esp,0x8
c00217df:	5b                   	pop    ebx
c00217e0:	c3                   	ret    

c00217e1 <SysWait(regs*)>:
c00217e1:	83 ec 10             	sub    esp,0x10
c00217e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217e8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00217eb:	52                   	push   edx
c00217ec:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00217ef:	51                   	push   ecx
c00217f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00217f3:	50                   	push   eax
c00217f4:	e8 2f 3e 00 00       	call   c0025628 <waitTask(int, int*, int)>
c00217f9:	83 c4 1c             	add    esp,0x1c
c00217fc:	89 c2                	mov    edx,eax
c00217fe:	c1 fa 1f             	sar    edx,0x1f
c0021801:	c3                   	ret    

c0021802 <SysNotImpl(regs*)>:
c0021802:	83 ec 18             	sub    esp,0x18
c0021805:	68 a4 2d 03 c0       	push   0xc0032da4
c002180a:	e8 c3 ec ff ff       	call   c00204d2 <KePanic(char const*)>
c002180f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021814:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021819:	83 c4 1c             	add    esp,0x1c
c002181c:	c3                   	ret    

c002181d <SysPanic(regs*)>:
c002181d:	83 ec 18             	sub    esp,0x18
c0021820:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021824:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021827:	50                   	push   eax
c0021828:	e8 a5 ec ff ff       	call   c00204d2 <KePanic(char const*)>
c002182d:	b8 01 00 00 00       	mov    eax,0x1
c0021832:	31 d2                	xor    edx,edx
c0021834:	83 c4 1c             	add    esp,0x1c
c0021837:	c3                   	ret    

c0021838 <SysRmdir(regs*)>:
c0021838:	56                   	push   esi
c0021839:	53                   	push   ebx
c002183a:	83 ec 10             	sub    esp,0x10
c002183d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021841:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021844:	68 14 01 00 00       	push   0x114
c0021849:	e8 c6 4e ff ff       	call   c0016714 <malloc>
c002184e:	6a 00                	push   0x0
c0021850:	89 c3                	mov    ebx,eax
c0021852:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021857:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002185a:	50                   	push   eax
c002185b:	56                   	push   esi
c002185c:	53                   	push   ebx
c002185d:	e8 22 8e ff ff       	call   c001a684 <File::File(char const*, Process*, bool)>
c0021862:	83 c4 14             	add    esp,0x14
c0021865:	53                   	push   ebx
c0021866:	e8 e3 90 ff ff       	call   c001a94e <File::unlink()>
c002186b:	83 c4 10             	add    esp,0x10
c002186e:	85 db                	test   ebx,ebx
c0021870:	89 c6                	mov    esi,eax
c0021872:	74 0c                	je     c0021880 <SysRmdir(regs*)+0x48>
c0021874:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021876:	83 ec 0c             	sub    esp,0xc
c0021879:	53                   	push   ebx
c002187a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002187d:	83 c4 10             	add    esp,0x10
c0021880:	31 c0                	xor    eax,eax
c0021882:	85 f6                	test   esi,esi
c0021884:	0f 95 c0             	setne  al
c0021887:	31 d2                	xor    edx,edx
c0021889:	f7 d8                	neg    eax
c002188b:	83 d2 00             	adc    edx,0x0
c002188e:	83 c4 04             	add    esp,0x4
c0021891:	5b                   	pop    ebx
c0021892:	f7 da                	neg    edx
c0021894:	5e                   	pop    esi
c0021895:	c3                   	ret    

c0021896 <SysUnlink(regs*)>:
c0021896:	56                   	push   esi
c0021897:	53                   	push   ebx
c0021898:	83 ec 10             	sub    esp,0x10
c002189b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002189f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00218a2:	68 14 01 00 00       	push   0x114
c00218a7:	e8 68 4e ff ff       	call   c0016714 <malloc>
c00218ac:	6a 00                	push   0x0
c00218ae:	89 c3                	mov    ebx,eax
c00218b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00218b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00218b8:	50                   	push   eax
c00218b9:	56                   	push   esi
c00218ba:	53                   	push   ebx
c00218bb:	e8 c4 8d ff ff       	call   c001a684 <File::File(char const*, Process*, bool)>
c00218c0:	83 c4 14             	add    esp,0x14
c00218c3:	53                   	push   ebx
c00218c4:	e8 85 90 ff ff       	call   c001a94e <File::unlink()>
c00218c9:	83 c4 10             	add    esp,0x10
c00218cc:	85 db                	test   ebx,ebx
c00218ce:	89 c6                	mov    esi,eax
c00218d0:	74 0c                	je     c00218de <SysUnlink(regs*)+0x48>
c00218d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00218d4:	83 ec 0c             	sub    esp,0xc
c00218d7:	53                   	push   ebx
c00218d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00218db:	83 c4 10             	add    esp,0x10
c00218de:	31 c0                	xor    eax,eax
c00218e0:	85 f6                	test   esi,esi
c00218e2:	0f 95 c0             	setne  al
c00218e5:	31 d2                	xor    edx,edx
c00218e7:	f7 d8                	neg    eax
c00218e9:	83 d2 00             	adc    edx,0x0
c00218ec:	83 c4 04             	add    esp,0x4
c00218ef:	5b                   	pop    ebx
c00218f0:	f7 da                	neg    edx
c00218f2:	5e                   	pop    esi
c00218f3:	c3                   	ret    

c00218f4 <SysGetArgv(regs*)>:
c00218f4:	83 ec 0c             	sub    esp,0xc
c00218f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218fb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00218fe:	85 c0                	test   eax,eax
c0021900:	78 2c                	js     c002192e <SysGetArgv(regs*)+0x3a>
c0021902:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021908:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c002190b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021911:	7d 1b                	jge    c002192e <SysGetArgv(regs*)+0x3a>
c0021913:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c002191a:	85 c0                	test   eax,eax
c002191c:	74 18                	je     c0021936 <SysGetArgv(regs*)+0x42>
c002191e:	83 ec 08             	sub    esp,0x8
c0021921:	50                   	push   eax
c0021922:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0021925:	50                   	push   eax
c0021926:	e8 25 ed fd ff       	call   c0000650 <strcpy>
c002192b:	83 c4 10             	add    esp,0x10
c002192e:	31 c0                	xor    eax,eax
c0021930:	31 d2                	xor    edx,edx
c0021932:	83 c4 0c             	add    esp,0xc
c0021935:	c3                   	ret    
c0021936:	b8 01 00 00 00       	mov    eax,0x1
c002193b:	31 d2                	xor    edx,edx
c002193d:	83 c4 0c             	add    esp,0xc
c0021940:	c3                   	ret    

c0021941 <SysUSleep(regs*)>:
c0021941:	83 ec 1c             	sub    esp,0x1c
c0021944:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021948:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c002194b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c002194e:	6a 00                	push   0x0
c0021950:	6a 64                	push   0x64
c0021952:	52                   	push   edx
c0021953:	50                   	push   eax
c0021954:	e8 37 d0 00 00       	call   c002e990 <__udivdi3>
c0021959:	83 c4 14             	add    esp,0x14
c002195c:	50                   	push   eax
c002195d:	e8 aa 3d 00 00       	call   c002570c <milliTenthSleep(unsigned int)>
c0021962:	31 c0                	xor    eax,eax
c0021964:	31 d2                	xor    edx,edx
c0021966:	83 c4 1c             	add    esp,0x1c
c0021969:	c3                   	ret    

c002196a <SysSpawn(regs*)>:
c002196a:	56                   	push   esi
c002196b:	53                   	push   ebx
c002196c:	83 ec 04             	sub    esp,0x4
c002196f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021973:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021976:	85 f6                	test   esi,esi
c0021978:	75 0a                	jne    c0021984 <SysSpawn(regs*)+0x1a>
c002197a:	83 c4 04             	add    esp,0x4
c002197d:	31 c0                	xor    eax,eax
c002197f:	5b                   	pop    ebx
c0021980:	31 d2                	xor    edx,edx
c0021982:	5e                   	pop    esi
c0021983:	c3                   	ret    
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	68 24 07 00 00       	push   0x724
c002198c:	e8 83 4d ff ff       	call   c0016714 <malloc>
c0021991:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021994:	83 c4 10             	add    esp,0x10
c0021997:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002199a:	89 c6                	mov    esi,eax
c002199c:	31 c0                	xor    eax,eax
c002199e:	85 c9                	test   ecx,ecx
c00219a0:	75 08                	jne    c00219aa <SysSpawn(regs*)+0x40>
c00219a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219aa:	52                   	push   edx
c00219ab:	50                   	push   eax
c00219ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219af:	50                   	push   eax
c00219b0:	56                   	push   esi
c00219b1:	e8 fe 34 00 00       	call   c0024eb4 <Process::Process(char const*, Process*, char**)>
c00219b6:	83 c4 10             	add    esp,0x10
c00219b9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00219c0:	75 b8                	jne    c002197a <SysSpawn(regs*)+0x10>
c00219c2:	83 ec 0c             	sub    esp,0xc
c00219c5:	56                   	push   esi
c00219c6:	e8 25 3a 00 00       	call   c00253f0 <Process::createUserThread()>
c00219cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00219cd:	83 c4 10             	add    esp,0x10
c00219d0:	83 c4 04             	add    esp,0x4
c00219d3:	5b                   	pop    ebx
c00219d4:	89 c2                	mov    edx,eax
c00219d6:	c1 fa 1f             	sar    edx,0x1f
c00219d9:	5e                   	pop    esi
c00219da:	c3                   	ret    

c00219db <SysGetEnv(regs*)>:
c00219db:	57                   	push   edi
c00219dc:	56                   	push   esi
c00219dd:	53                   	push   ebx
c00219de:	83 ec 1c             	sub    esp,0x1c
c00219e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219e6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00219ea:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00219ed:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00219f0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00219f3:	51                   	push   ecx
c00219f4:	e8 76 e9 ff ff       	call   c002036f <KeGetProcessTotalEnvCount(Process*)>
c00219f9:	83 c4 10             	add    esp,0x10
c00219fc:	39 c7                	cmp    edi,eax
c00219fe:	7c 12                	jl     c0021a12 <SysGetEnv(regs*)+0x37>
c0021a00:	31 c0                	xor    eax,eax
c0021a02:	31 d2                	xor    edx,edx
c0021a04:	85 f6                	test   esi,esi
c0021a06:	74 03                	je     c0021a0b <SysGetEnv(regs*)+0x30>
c0021a08:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a0b:	83 c4 10             	add    esp,0x10
c0021a0e:	5b                   	pop    ebx
c0021a0f:	5e                   	pop    esi
c0021a10:	5f                   	pop    edi
c0021a11:	c3                   	ret    
c0021a12:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a16:	83 ec 04             	sub    esp,0x4
c0021a19:	57                   	push   edi
c0021a1a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021a20:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021a23:	57                   	push   edi
c0021a24:	50                   	push   eax
c0021a25:	e8 65 e9 ff ff       	call   c002038f <KeGetProcessEnvPair(Process*, int)>
c0021a2a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021a2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a31:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021a35:	83 c4 0c             	add    esp,0xc
c0021a38:	85 d2                	test   edx,edx
c0021a3a:	75 23                	jne    c0021a5f <SysGetEnv(regs*)+0x84>
c0021a3c:	83 ec 0c             	sub    esp,0xc
c0021a3f:	50                   	push   eax
c0021a40:	e8 3b eb fd ff       	call   c0000580 <strlen>
c0021a45:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021a48:	89 c3                	mov    ebx,eax
c0021a4a:	e8 31 eb fd ff       	call   c0000580 <strlen>
c0021a4f:	83 c4 10             	add    esp,0x10
c0021a52:	31 d2                	xor    edx,edx
c0021a54:	83 c4 10             	add    esp,0x10
c0021a57:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021a5b:	5b                   	pop    ebx
c0021a5c:	5e                   	pop    esi
c0021a5d:	5f                   	pop    edi
c0021a5e:	c3                   	ret    
c0021a5f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a62:	83 ec 08             	sub    esp,0x8
c0021a65:	50                   	push   eax
c0021a66:	56                   	push   esi
c0021a67:	e8 e4 eb fd ff       	call   c0000650 <strcpy>
c0021a6c:	58                   	pop    eax
c0021a6d:	5a                   	pop    edx
c0021a6e:	68 be 2d 03 c0       	push   0xc0032dbe
c0021a73:	56                   	push   esi
c0021a74:	e8 f7 ed fd ff       	call   c0000870 <strcat>
c0021a79:	59                   	pop    ecx
c0021a7a:	5b                   	pop    ebx
c0021a7b:	57                   	push   edi
c0021a7c:	56                   	push   esi
c0021a7d:	e8 ee ed fd ff       	call   c0000870 <strcat>
c0021a82:	83 c4 10             	add    esp,0x10
c0021a85:	31 c0                	xor    eax,eax
c0021a87:	83 c4 10             	add    esp,0x10
c0021a8a:	31 d2                	xor    edx,edx
c0021a8c:	5b                   	pop    ebx
c0021a8d:	5e                   	pop    esi
c0021a8e:	5f                   	pop    edi
c0021a8f:	c3                   	ret    

c0021a90 <SysSetFatAttrib(regs*)>:
c0021a90:	57                   	push   edi
c0021a91:	56                   	push   esi
c0021a92:	53                   	push   ebx
c0021a93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a97:	83 ec 0c             	sub    esp,0xc
c0021a9a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021a9d:	68 14 01 00 00       	push   0x114
c0021aa2:	e8 6d 4c ff ff       	call   c0016714 <malloc>
c0021aa7:	83 c4 0c             	add    esp,0xc
c0021aaa:	89 c3                	mov    ebx,eax
c0021aac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021ab1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021ab4:	50                   	push   eax
c0021ab5:	57                   	push   edi
c0021ab6:	53                   	push   ebx
c0021ab7:	e8 a6 8c ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0021abc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021abf:	83 c4 0c             	add    esp,0xc
c0021ac2:	0f b6 d4             	movzx  edx,ah
c0021ac5:	0f b6 c0             	movzx  eax,al
c0021ac8:	52                   	push   edx
c0021ac9:	50                   	push   eax
c0021aca:	53                   	push   ebx
c0021acb:	e8 18 8f ff ff       	call   c001a9e8 <File::chfatattr(unsigned char, unsigned char)>
c0021ad0:	83 c4 10             	add    esp,0x10
c0021ad3:	85 db                	test   ebx,ebx
c0021ad5:	89 c6                	mov    esi,eax
c0021ad7:	74 0c                	je     c0021ae5 <SysSetFatAttrib(regs*)+0x55>
c0021ad9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021adb:	83 ec 0c             	sub    esp,0xc
c0021ade:	53                   	push   ebx
c0021adf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021ae2:	83 c4 10             	add    esp,0x10
c0021ae5:	5b                   	pop    ebx
c0021ae6:	31 c0                	xor    eax,eax
c0021ae8:	85 f6                	test   esi,esi
c0021aea:	0f 95 c0             	setne  al
c0021aed:	31 d2                	xor    edx,edx
c0021aef:	5e                   	pop    esi
c0021af0:	f7 d8                	neg    eax
c0021af2:	83 d2 00             	adc    edx,0x0
c0021af5:	f7 da                	neg    edx
c0021af7:	5f                   	pop    edi
c0021af8:	c3                   	ret    

c0021af9 <SysPipe(regs*)>:
c0021af9:	57                   	push   edi
c0021afa:	56                   	push   esi
c0021afb:	53                   	push   ebx
c0021afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b00:	83 ec 0c             	sub    esp,0xc
c0021b03:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021b06:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021b09:	6a 20                	push   0x20
c0021b0b:	e8 04 4c ff ff       	call   c0016714 <malloc>
c0021b10:	89 c3                	mov    ebx,eax
c0021b12:	58                   	pop    eax
c0021b13:	5a                   	pop    edx
c0021b14:	68 00 50 00 00       	push   0x5000
c0021b19:	53                   	push   ebx
c0021b1a:	e8 5f 55 ff ff       	call   c001707e <Pipe::Pipe(int)>
c0021b1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021b22:	e8 b7 62 ff ff       	call   c0017dde <UnixFile::getFileDescriptor()>
c0021b27:	89 07                	mov    DWORD PTR [edi],eax
c0021b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021b2c:	e8 ad 62 ff ff       	call   c0017dde <UnixFile::getFileDescriptor()>
c0021b31:	83 c4 10             	add    esp,0x10
c0021b34:	31 d2                	xor    edx,edx
c0021b36:	89 06                	mov    DWORD PTR [esi],eax
c0021b38:	31 c0                	xor    eax,eax
c0021b3a:	5b                   	pop    ebx
c0021b3b:	5e                   	pop    esi
c0021b3c:	5f                   	pop    edi
c0021b3d:	c3                   	ret    

c0021b3e <SysGetUnixTime(regs*)>:
c0021b3e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021b43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021b49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b4d:	e9 dc 95 ff ff       	jmp    c001b12e <Clock::timeInSecondsLocal()>

c0021b52 <string_ends_with(char const*, char const*)>:
c0021b52:	57                   	push   edi
c0021b53:	56                   	push   esi
c0021b54:	53                   	push   ebx
c0021b55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b59:	83 ec 0c             	sub    esp,0xc
c0021b5c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021b60:	53                   	push   ebx
c0021b61:	e8 1a ea fd ff       	call   c0000580 <strlen>
c0021b66:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b69:	89 c6                	mov    esi,eax
c0021b6b:	e8 10 ea fd ff       	call   c0000580 <strlen>
c0021b70:	83 c4 10             	add    esp,0x10
c0021b73:	31 d2                	xor    edx,edx
c0021b75:	39 c6                	cmp    esi,eax
c0021b77:	7d 06                	jge    c0021b7f <string_ends_with(char const*, char const*)+0x2d>
c0021b79:	5b                   	pop    ebx
c0021b7a:	89 d0                	mov    eax,edx
c0021b7c:	5e                   	pop    esi
c0021b7d:	5f                   	pop    edi
c0021b7e:	c3                   	ret    
c0021b7f:	83 ec 08             	sub    esp,0x8
c0021b82:	29 c6                	sub    esi,eax
c0021b84:	57                   	push   edi
c0021b85:	01 f3                	add    ebx,esi
c0021b87:	53                   	push   ebx
c0021b88:	e8 f3 eb fd ff       	call   c0000780 <strcmp>
c0021b8d:	83 c4 10             	add    esp,0x10
c0021b90:	31 d2                	xor    edx,edx
c0021b92:	5b                   	pop    ebx
c0021b93:	5e                   	pop    esi
c0021b94:	85 c0                	test   eax,eax
c0021b96:	5f                   	pop    edi
c0021b97:	0f 94 c2             	sete   dl
c0021b9a:	89 d0                	mov    eax,edx
c0021b9c:	c3                   	ret    

c0021b9d <SysOpen(regs*)>:
c0021b9d:	56                   	push   esi
c0021b9e:	53                   	push   ebx
c0021b9f:	81 ec 04 01 00 00    	sub    esp,0x104
c0021ba5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021bac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021baf:	85 c0                	test   eax,eax
c0021bb1:	0f 84 c4 01 00 00    	je     c0021d7b <SysOpen(regs*)+0x1de>
c0021bb7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bba:	85 c0                	test   eax,eax
c0021bbc:	0f 84 b9 01 00 00    	je     c0021d7b <SysOpen(regs*)+0x1de>
c0021bc2:	6a 00                	push   0x0
c0021bc4:	68 c0 2d 03 c0       	push   0xc0032dc0
c0021bc9:	50                   	push   eax
c0021bca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021bce:	56                   	push   esi
c0021bcf:	e8 82 88 ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021bd4:	89 34 24             	mov    DWORD PTR [esp],esi
c0021bd7:	e8 a4 e9 fd ff       	call   c0000580 <strlen>
c0021bdc:	83 c4 10             	add    esp,0x10
c0021bdf:	83 e8 01             	sub    eax,0x1
c0021be2:	74 29                	je     c0021c0d <SysOpen(regs*)+0x70>
c0021be4:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021be8:	83 fa 2e             	cmp    edx,0x2e
c0021beb:	74 1c                	je     c0021c09 <SysOpen(regs*)+0x6c>
c0021bed:	83 fa 3a             	cmp    edx,0x3a
c0021bf0:	74 17                	je     c0021c09 <SysOpen(regs*)+0x6c>
c0021bf2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021bf6:	83 e8 01             	sub    eax,0x1
c0021bf9:	74 12                	je     c0021c0d <SysOpen(regs*)+0x70>
c0021bfb:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021bff:	83 fa 3a             	cmp    edx,0x3a
c0021c02:	74 05                	je     c0021c09 <SysOpen(regs*)+0x6c>
c0021c04:	83 fa 2e             	cmp    edx,0x2e
c0021c07:	75 e9                	jne    c0021bf2 <SysOpen(regs*)+0x55>
c0021c09:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021c0d:	83 ec 08             	sub    esp,0x8
c0021c10:	68 c4 2d 03 c0       	push   0xc0032dc4
c0021c15:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c18:	50                   	push   eax
c0021c19:	e8 34 ff ff ff       	call   c0021b52 <string_ends_with(char const*, char const*)>
c0021c1e:	83 c4 10             	add    esp,0x10
c0021c21:	85 c0                	test   eax,eax
c0021c23:	74 1d                	je     c0021c42 <SysOpen(regs*)+0xa5>
c0021c25:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021c28:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021c2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c35:	81 c4 04 01 00 00    	add    esp,0x104
c0021c3b:	31 c0                	xor    eax,eax
c0021c3d:	5b                   	pop    ebx
c0021c3e:	31 d2                	xor    edx,edx
c0021c40:	5e                   	pop    esi
c0021c41:	c3                   	ret    
c0021c42:	83 ec 08             	sub    esp,0x8
c0021c45:	68 c9 2d 03 c0       	push   0xc0032dc9
c0021c4a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c4d:	50                   	push   eax
c0021c4e:	e8 ff fe ff ff       	call   c0021b52 <string_ends_with(char const*, char const*)>
c0021c53:	83 c4 10             	add    esp,0x10
c0021c56:	85 c0                	test   eax,eax
c0021c58:	75 cb                	jne    c0021c25 <SysOpen(regs*)+0x88>
c0021c5a:	83 ec 08             	sub    esp,0x8
c0021c5d:	68 c5 2d 03 c0       	push   0xc0032dc5
c0021c62:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c65:	50                   	push   eax
c0021c66:	e8 15 eb fd ff       	call   c0000780 <strcmp>
c0021c6b:	83 c4 10             	add    esp,0x10
c0021c6e:	85 c0                	test   eax,eax
c0021c70:	74 b3                	je     c0021c25 <SysOpen(regs*)+0x88>
c0021c72:	83 ec 08             	sub    esp,0x8
c0021c75:	68 c4 2d 03 c0       	push   0xc0032dc4
c0021c7a:	56                   	push   esi
c0021c7b:	e8 d2 fe ff ff       	call   c0021b52 <string_ends_with(char const*, char const*)>
c0021c80:	83 c4 10             	add    esp,0x10
c0021c83:	85 c0                	test   eax,eax
c0021c85:	75 9e                	jne    c0021c25 <SysOpen(regs*)+0x88>
c0021c87:	83 ec 08             	sub    esp,0x8
c0021c8a:	68 ce 2d 03 c0       	push   0xc0032dce
c0021c8f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c92:	50                   	push   eax
c0021c93:	e8 ba fe ff ff       	call   c0021b52 <string_ends_with(char const*, char const*)>
c0021c98:	83 c4 10             	add    esp,0x10
c0021c9b:	85 c0                	test   eax,eax
c0021c9d:	0f 85 eb 00 00 00    	jne    c0021d8e <SysOpen(regs*)+0x1f1>
c0021ca3:	83 ec 08             	sub    esp,0x8
c0021ca6:	68 d3 2d 03 c0       	push   0xc0032dd3
c0021cab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021cae:	50                   	push   eax
c0021caf:	e8 9e fe ff ff       	call   c0021b52 <string_ends_with(char const*, char const*)>
c0021cb4:	83 c4 10             	add    esp,0x10
c0021cb7:	85 c0                	test   eax,eax
c0021cb9:	0f 85 cf 00 00 00    	jne    c0021d8e <SysOpen(regs*)+0x1f1>
c0021cbf:	83 ec 08             	sub    esp,0x8
c0021cc2:	68 cf 2d 03 c0       	push   0xc0032dcf
c0021cc7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021cca:	51                   	push   ecx
c0021ccb:	e8 b0 ea fd ff       	call   c0000780 <strcmp>
c0021cd0:	83 c4 10             	add    esp,0x10
c0021cd3:	85 c0                	test   eax,eax
c0021cd5:	0f 84 b3 00 00 00    	je     c0021d8e <SysOpen(regs*)+0x1f1>
c0021cdb:	83 ec 08             	sub    esp,0x8
c0021cde:	68 ce 2d 03 c0       	push   0xc0032dce
c0021ce3:	56                   	push   esi
c0021ce4:	e8 69 fe ff ff       	call   c0021b52 <string_ends_with(char const*, char const*)>
c0021ce9:	83 c4 10             	add    esp,0x10
c0021cec:	85 c0                	test   eax,eax
c0021cee:	0f 85 9a 00 00 00    	jne    c0021d8e <SysOpen(regs*)+0x1f1>
c0021cf4:	83 ec 0c             	sub    esp,0xc
c0021cf7:	68 14 01 00 00       	push   0x114
c0021cfc:	e8 13 4a ff ff       	call   c0016714 <malloc>
c0021d01:	83 c4 0c             	add    esp,0xc
c0021d04:	89 c6                	mov    esi,eax
c0021d06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021d0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021d0e:	50                   	push   eax
c0021d0f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021d12:	52                   	push   edx
c0021d13:	56                   	push   esi
c0021d14:	e8 49 8a ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0021d19:	83 c4 10             	add    esp,0x10
c0021d1c:	85 f6                	test   esi,esi
c0021d1e:	74 5b                	je     c0021d7b <SysOpen(regs*)+0x1de>
c0021d20:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021d23:	0f b6 c2             	movzx  eax,dl
c0021d26:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021d29:	89 d0                	mov    eax,edx
c0021d2b:	83 e0 01             	and    eax,0x1
c0021d2e:	f6 c2 02             	test   dl,0x2
c0021d31:	74 03                	je     c0021d36 <SysOpen(regs*)+0x199>
c0021d33:	83 c8 02             	or     eax,0x2
c0021d36:	f6 c2 04             	test   dl,0x4
c0021d39:	74 03                	je     c0021d3e <SysOpen(regs*)+0x1a1>
c0021d3b:	83 c8 04             	or     eax,0x4
c0021d3e:	f6 c2 08             	test   dl,0x8
c0021d41:	74 03                	je     c0021d46 <SysOpen(regs*)+0x1a9>
c0021d43:	83 c8 0a             	or     eax,0xa
c0021d46:	80 e2 10             	and    dl,0x10
c0021d49:	74 03                	je     c0021d4e <SysOpen(regs*)+0x1b1>
c0021d4b:	83 c8 12             	or     eax,0x12
c0021d4e:	83 ec 08             	sub    esp,0x8
c0021d51:	50                   	push   eax
c0021d52:	56                   	push   esi
c0021d53:	e8 28 8a ff ff       	call   c001a780 <File::open(FileOpenMode)>
c0021d58:	83 c4 10             	add    esp,0x10
c0021d5b:	85 c0                	test   eax,eax
c0021d5d:	75 1c                	jne    c0021d7b <SysOpen(regs*)+0x1de>
c0021d5f:	83 ec 0c             	sub    esp,0xc
c0021d62:	56                   	push   esi
c0021d63:	e8 76 60 ff ff       	call   c0017dde <UnixFile::getFileDescriptor()>
c0021d68:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021d6b:	83 c4 10             	add    esp,0x10
c0021d6e:	89 02                	mov    DWORD PTR [edx],eax
c0021d70:	c1 f8 1f             	sar    eax,0x1f
c0021d73:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021d76:	e9 ba fe ff ff       	jmp    c0021c35 <SysOpen(regs*)+0x98>
c0021d7b:	81 c4 04 01 00 00    	add    esp,0x104
c0021d81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021d86:	5b                   	pop    ebx
c0021d87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021d8c:	5e                   	pop    esi
c0021d8d:	c3                   	ret    
c0021d8e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021d91:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021d97:	e9 92 fe ff ff       	jmp    c0021c2e <SysOpen(regs*)+0x91>

c0021d9c <KeSystemCall(regs*, void*)>:
c0021d9c:	53                   	push   ebx
c0021d9d:	83 ec 08             	sub    esp,0x8
c0021da0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021da4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021da7:	83 f8 3e             	cmp    eax,0x3e
c0021daa:	77 16                	ja     c0021dc2 <KeSystemCall(regs*, void*)+0x26>
c0021dac:	8b 14 85 20 46 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcb9e0]
c0021db3:	85 d2                	test   edx,edx
c0021db5:	74 0b                	je     c0021dc2 <KeSystemCall(regs*, void*)+0x26>
c0021db7:	83 ec 0c             	sub    esp,0xc
c0021dba:	53                   	push   ebx
c0021dbb:	ff d2                	call   edx
c0021dbd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021dc0:	eb 0d                	jmp    c0021dcf <KeSystemCall(regs*, void*)+0x33>
c0021dc2:	52                   	push   edx
c0021dc3:	52                   	push   edx
c0021dc4:	50                   	push   eax
c0021dc5:	68 d8 2d 03 c0       	push   0xc0032dd8
c0021dca:	e8 7b 77 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0021dcf:	83 c4 10             	add    esp,0x10
c0021dd2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021dd7:	83 c4 08             	add    esp,0x8
c0021dda:	31 d2                	xor    edx,edx
c0021ddc:	5b                   	pop    ebx
c0021ddd:	c3                   	ret    
c0021dde:	66 90                	xchg   ax,ax

c0021de0 <KeSwitchEndian16(unsigned short)>:
c0021de0:	83 ec 04             	sub    esp,0x4
c0021de3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021de7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021deb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021def:	c1 f8 08             	sar    eax,0x8
c0021df2:	89 c2                	mov    edx,eax
c0021df4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021df8:	c1 e0 08             	shl    eax,0x8
c0021dfb:	09 d0                	or     eax,edx
c0021dfd:	83 c4 04             	add    esp,0x4
c0021e00:	c3                   	ret    
c0021e01:	8d 76 00             	lea    esi,[esi+0x0]

c0021e04 <KeSwitchEndian32(unsigned int)>:
c0021e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e08:	c1 e8 18             	shr    eax,0x18
c0021e0b:	89 c2                	mov    edx,eax
c0021e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e11:	c1 e0 08             	shl    eax,0x8
c0021e14:	25 00 00 ff 00       	and    eax,0xff0000
c0021e19:	09 c2                	or     edx,eax
c0021e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e1f:	c1 e8 08             	shr    eax,0x8
c0021e22:	25 00 ff 00 00       	and    eax,0xff00
c0021e27:	09 c2                	or     edx,eax
c0021e29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e2d:	c1 e0 18             	shl    eax,0x18
c0021e30:	09 d0                	or     eax,edx
c0021e32:	c3                   	ret    
c0021e33:	90                   	nop

c0021e34 <EthernetCRC32(unsigned char*, int)>:
c0021e34:	83 ec 10             	sub    esp,0x10
c0021e37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e3c:	75 0a                	jne    c0021e48 <EthernetCRC32(unsigned char*, int)+0x14>
c0021e3e:	b8 00 00 00 00       	mov    eax,0x0
c0021e43:	e9 8c 00 00 00       	jmp    c0021ed4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021e48:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021e4d:	7f 09                	jg     c0021e58 <EthernetCRC32(unsigned char*, int)+0x24>
c0021e4f:	b8 00 00 00 00       	mov    eax,0x0
c0021e54:	eb 7e                	jmp    c0021ed4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021e56:	66 90                	xchg   ax,ax
c0021e58:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021e60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e6c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021e70:	7d 5a                	jge    c0021ecc <EthernetCRC32(unsigned char*, int)+0x98>
c0021e72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e7a:	01 d0                	add    eax,edx
c0021e7c:	8a 00                	mov    al,BYTE PTR [eax]
c0021e7e:	0f b6 c0             	movzx  eax,al
c0021e81:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021e85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0021e90:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021e95:	7f 2d                	jg     c0021ec4 <EthernetCRC32(unsigned char*, int)+0x90>
c0021e97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e9b:	83 e0 01             	and    eax,0x1
c0021e9e:	74 10                	je     c0021eb0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ea4:	d1 e8                	shr    eax,1
c0021ea6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021eab:	eb 0b                	jmp    c0021eb8 <EthernetCRC32(unsigned char*, int)+0x84>
c0021ead:	8d 76 00             	lea    esi,[esi+0x0]
c0021eb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eb4:	d1 e8                	shr    eax,1
c0021eb6:	66 90                	xchg   ax,ax
c0021eb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ebc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021ec1:	eb cd                	jmp    c0021e90 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021ec3:	90                   	nop
c0021ec4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021ec9:	eb 9d                	jmp    c0021e68 <EthernetCRC32(unsigned char*, int)+0x34>
c0021ecb:	90                   	nop
c0021ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ed0:	f7 d0                	not    eax
c0021ed2:	66 90                	xchg   ax,ax
c0021ed4:	83 c4 10             	add    esp,0x10
c0021ed7:	c3                   	ret    

c0021ed8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021ed8:	83 ec 2c             	sub    esp,0x2c
c0021edb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021edf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021ee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ee8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021eec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ef0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021ef3:	0f b7 c0             	movzx  eax,ax
c0021ef6:	3d 06 08 00 00       	cmp    eax,0x806
c0021efb:	75 13                	jne    c0021f10 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021efd:	83 ec 0c             	sub    esp,0xc
c0021f00:	68 ec 2d 03 c0       	push   0xc0032dec
c0021f05:	e8 40 76 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0021f0a:	83 c4 10             	add    esp,0x10
c0021f0d:	eb 25                	jmp    c0021f34 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021f0f:	90                   	nop
c0021f10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021f17:	0f b7 c0             	movzx  eax,ax
c0021f1a:	3d 00 08 00 00       	cmp    eax,0x800
c0021f1f:	75 13                	jne    c0021f34 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021f21:	83 ec 0c             	sub    esp,0xc
c0021f24:	68 02 2e 03 c0       	push   0xc0032e02
c0021f29:	e8 1c 76 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0021f2e:	83 c4 10             	add    esp,0x10
c0021f31:	8d 76 00             	lea    esi,[esi+0x0]
c0021f34:	90                   	nop
c0021f35:	83 c4 2c             	add    esp,0x2c
c0021f38:	c3                   	ret    
c0021f39:	66 90                	xchg   ax,ax
c0021f3b:	90                   	nop

c0021f3c <KeNetCreateSemaphore>:
c0021f3c:	53                   	push   ebx
c0021f3d:	83 ec 18             	sub    esp,0x18
c0021f40:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021f48:	83 ec 0c             	sub    esp,0xc
c0021f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f4f:	e8 c0 47 ff ff       	call   c0016714 <malloc>
c0021f54:	83 c4 10             	add    esp,0x10
c0021f57:	89 c3                	mov    ebx,eax
c0021f59:	83 ec 08             	sub    esp,0x8
c0021f5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f60:	53                   	push   ebx
c0021f61:	e8 12 e9 ff ff       	call   c0020878 <Semaphore::Semaphore(int)>
c0021f66:	83 c4 10             	add    esp,0x10
c0021f69:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f75:	89 10                	mov    DWORD PTR [eax],edx
c0021f77:	90                   	nop
c0021f78:	83 c4 18             	add    esp,0x18
c0021f7b:	5b                   	pop    ebx
c0021f7c:	c3                   	ret    
c0021f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0021f80 <KeNetFreeSemaphore>:
c0021f80:	83 ec 0c             	sub    esp,0xc
c0021f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f87:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f89:	83 ec 08             	sub    esp,0x8
c0021f8c:	6a 10                	push   0x10
c0021f8e:	50                   	push   eax
c0021f8f:	e8 b8 74 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c0021f94:	83 c4 10             	add    esp,0x10
c0021f97:	90                   	nop
c0021f98:	83 c4 0c             	add    esp,0xc
c0021f9b:	c3                   	ret    

c0021f9c <KeNetSignalSemaphore>:
c0021f9c:	83 ec 0c             	sub    esp,0xc
c0021f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa5:	83 ec 0c             	sub    esp,0xc
c0021fa8:	50                   	push   eax
c0021fa9:	e8 2a ec ff ff       	call   c0020bd8 <Semaphore::release()>
c0021fae:	83 c4 10             	add    esp,0x10
c0021fb1:	90                   	nop
c0021fb2:	83 c4 0c             	add    esp,0xc
c0021fb5:	c3                   	ret    
c0021fb6:	66 90                	xchg   ax,ax

c0021fb8 <KeNetWaitSemaphore>:
c0021fb8:	83 ec 0c             	sub    esp,0xc
c0021fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fc1:	83 ec 08             	sub    esp,0x8
c0021fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fc8:	50                   	push   eax
c0021fc9:	e8 46 ea ff ff       	call   c0020a14 <Semaphore::acquire(int)>
c0021fce:	83 c4 10             	add    esp,0x10
c0021fd1:	83 c4 0c             	add    esp,0xc
c0021fd4:	c3                   	ret    
c0021fd5:	8d 76 00             	lea    esi,[esi+0x0]

c0021fd8 <KeNetCreateThread>:
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021fe0:	68 80 00 00 00       	push   0x80
c0021fe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021fe9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021fed:	50                   	push   eax
c0021fee:	e8 f5 32 00 00       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c0021ff3:	83 c4 10             	add    esp,0x10
c0021ff6:	90                   	nop
c0021ff7:	83 c4 0c             	add    esp,0xc
c0021ffa:	c3                   	ret    
c0021ffb:	90                   	nop

c0021ffc <KeCPanic>:
c0021ffc:	83 ec 0c             	sub    esp,0xc
c0021fff:	83 ec 0c             	sub    esp,0xc
c0022002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022006:	e8 c7 e4 ff ff       	call   c00204d2 <KePanic(char const*)>
c002200b:	83 c4 10             	add    esp,0x10
c002200e:	90                   	nop
c002200f:	83 c4 0c             	add    esp,0xc
c0022012:	c3                   	ret    
c0022013:	90                   	nop

c0022014 <KeCPuts>:
c0022014:	83 ec 0c             	sub    esp,0xc
c0022017:	83 ec 08             	sub    esp,0x8
c002201a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002201e:	68 b6 34 03 c0       	push   0xc00334b6
c0022023:	e8 22 75 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0022028:	83 c4 10             	add    esp,0x10
c002202b:	90                   	nop
c002202c:	83 c4 0c             	add    esp,0xc
c002202f:	c3                   	ret    

c0022030 <CmOpen(char const*)>:
c0022030:	57                   	push   edi
c0022031:	56                   	push   esi
c0022032:	53                   	push   ebx
c0022033:	83 ec 1c             	sub    esp,0x1c
c0022036:	6a 30                	push   0x30
c0022038:	e8 d7 46 ff ff       	call   c0016714 <malloc>
c002203d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022044:	89 c3                	mov    ebx,eax
c0022046:	e8 c9 46 ff ff       	call   c0016714 <malloc>
c002204b:	83 c4 0c             	add    esp,0xc
c002204e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022058:	89 c6                	mov    esi,eax
c002205a:	50                   	push   eax
c002205b:	e8 02 87 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0022060:	83 c4 0c             	add    esp,0xc
c0022063:	89 33                	mov    DWORD PTR [ebx],esi
c0022065:	8d 44 24 07          	lea    eax,[esp+0x7]
c0022069:	50                   	push   eax
c002206a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002206e:	50                   	push   eax
c002206f:	56                   	push   esi
c0022070:	e8 0d 8a ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c0022075:	5a                   	pop    edx
c0022076:	59                   	pop    ecx
c0022077:	6a 01                	push   0x1
c0022079:	ff 33                	push   DWORD PTR [ebx]
c002207b:	e8 00 87 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c0022080:	5e                   	pop    esi
c0022081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022085:	e8 8a 46 ff ff       	call   c0016714 <malloc>
c002208a:	5a                   	pop    edx
c002208b:	8d 74 24 10          	lea    esi,[esp+0x10]
c002208f:	89 c7                	mov    edi,eax
c0022091:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022093:	8b 10                	mov    edx,DWORD PTR [eax]
c0022095:	56                   	push   esi
c0022096:	57                   	push   edi
c0022097:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002209b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002209f:	50                   	push   eax
c00220a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00220a3:	83 c4 14             	add    esp,0x14
c00220a6:	ff 33                	push   DWORD PTR [ebx]
c00220a8:	e8 31 87 ff ff       	call   c001a7de <File::close()>
c00220ad:	59                   	pop    ecx
c00220ae:	58                   	pop    eax
c00220af:	6a 13                	push   0x13
c00220b1:	ff 33                	push   DWORD PTR [ebx]
c00220b3:	e8 c8 86 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c00220b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00220bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00220bf:	57                   	push   edi
c00220c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220c8:	50                   	push   eax
c00220c9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00220cc:	83 c4 14             	add    esp,0x14
c00220cf:	57                   	push   edi
c00220d0:	e8 4f 46 ff ff       	call   c0016724 <free>
c00220d5:	83 c4 10             	add    esp,0x10
c00220d8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00220db:	75 10                	jne    c00220ed <CmOpen(char const*)+0xbd>
c00220dd:	83 ec 0c             	sub    esp,0xc
c00220e0:	68 17 2e 03 c0       	push   0xc0032e17
c00220e5:	e8 e8 e3 ff ff       	call   c00204d2 <KePanic(char const*)>
c00220ea:	83 c4 10             	add    esp,0x10
c00220ed:	50                   	push   eax
c00220ee:	6a 00                	push   0x0
c00220f0:	6a 00                	push   0x0
c00220f2:	ff 33                	push   DWORD PTR [ebx]
c00220f4:	8d 7b 05             	lea    edi,[ebx+0x5]
c00220f7:	e8 42 87 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00220fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0022100:	89 34 24             	mov    DWORD PTR [esp],esi
c0022103:	57                   	push   edi
c0022104:	6a 00                	push   0x0
c0022106:	6a 2b                	push   0x2b
c0022108:	50                   	push   eax
c0022109:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002210c:	83 c4 1c             	add    esp,0x1c
c002210f:	6a 00                	push   0x0
c0022111:	6a 00                	push   0x0
c0022113:	ff 33                	push   DWORD PTR [ebx]
c0022115:	e8 24 87 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c002211a:	83 c4 0c             	add    esp,0xc
c002211d:	6a 08                	push   0x8
c002211f:	68 28 2e 03 c0       	push   0xc0032e28
c0022124:	57                   	push   edi
c0022125:	e8 56 e2 fd ff       	call   c0000380 <memcmp>
c002212a:	83 c4 10             	add    esp,0x10
c002212d:	85 c0                	test   eax,eax
c002212f:	74 10                	je     c0022141 <CmOpen(char const*)+0x111>
c0022131:	83 ec 0c             	sub    esp,0xc
c0022134:	68 31 2e 03 c0       	push   0xc0032e31
c0022139:	e8 94 e3 ff ff       	call   c00204d2 <KePanic(char const*)>
c002213e:	83 c4 10             	add    esp,0x10
c0022141:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0022145:	83 c4 10             	add    esp,0x10
c0022148:	89 d8                	mov    eax,ebx
c002214a:	5b                   	pop    ebx
c002214b:	5e                   	pop    esi
c002214c:	5f                   	pop    edi
c002214d:	c3                   	ret    

c002214e <CmClose(Reghive_Tag*)>:
c002214e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022152:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022156:	74 0b                	je     c0022163 <CmClose(Reghive_Tag*)+0x15>
c0022158:	8b 00                	mov    eax,DWORD PTR [eax]
c002215a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002215e:	e9 7b 86 ff ff       	jmp    c001a7de <File::close()>
c0022163:	c3                   	ret    

c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0022164:	53                   	push   ebx
c0022165:	83 ec 18             	sub    esp,0x18
c0022168:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002216c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022170:	74 29                	je     c002219b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022172:	50                   	push   eax
c0022173:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022178:	99                   	cdq    
c0022179:	52                   	push   edx
c002217a:	50                   	push   eax
c002217b:	ff 33                	push   DWORD PTR [ebx]
c002217d:	e8 bc 86 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0022182:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022184:	5a                   	pop    edx
c0022185:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022189:	8b 10                	mov    edx,DWORD PTR [eax]
c002218b:	51                   	push   ecx
c002218c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022190:	6a 00                	push   0x0
c0022192:	6a 2b                	push   0x2b
c0022194:	50                   	push   eax
c0022195:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022198:	83 c4 20             	add    esp,0x20
c002219b:	83 c4 18             	add    esp,0x18
c002219e:	5b                   	pop    ebx
c002219f:	c3                   	ret    

c00221a0 <CmGetString(Reghive_Tag*, int, char*)>:
c00221a0:	55                   	push   ebp
c00221a1:	57                   	push   edi
c00221a2:	56                   	push   esi
c00221a3:	53                   	push   ebx
c00221a4:	31 db                	xor    ebx,ebx
c00221a6:	83 ec 70             	sub    esp,0x70
c00221a9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00221ad:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00221b4:	50                   	push   eax
c00221b5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00221bc:	55                   	push   ebp
c00221bd:	e8 a2 ff ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221c2:	83 c4 10             	add    esp,0x10
c00221c5:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00221ca:	c1 e0 08             	shl    eax,0x8
c00221cd:	89 c2                	mov    edx,eax
c00221cf:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00221d4:	09 d0                	or     eax,edx
c00221d6:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00221db:	c1 e0 08             	shl    eax,0x8
c00221de:	09 d0                	or     eax,edx
c00221e0:	74 25                	je     c0022207 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00221e2:	52                   	push   edx
c00221e3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00221e7:	52                   	push   edx
c00221e8:	6b fb 0d             	imul   edi,ebx,0xd
c00221eb:	50                   	push   eax
c00221ec:	55                   	push   ebp
c00221ed:	e8 72 ff ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221f2:	8d 74 24 49          	lea    esi,[esp+0x49]
c00221f6:	b9 27 00 00 00       	mov    ecx,0x27
c00221fb:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0022202:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022204:	83 c4 10             	add    esp,0x10
c0022207:	83 c3 03             	add    ebx,0x3
c002220a:	83 fb 15             	cmp    ebx,0x15
c002220d:	75 b6                	jne    c00221c5 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c002220f:	83 c4 6c             	add    esp,0x6c
c0022212:	5b                   	pop    ebx
c0022213:	5e                   	pop    esi
c0022214:	5f                   	pop    edi
c0022215:	5d                   	pop    ebp
c0022216:	c3                   	ret    

c0022217 <CmEnterDirectory(Reghive_Tag*, int)>:
c0022217:	83 ec 40             	sub    esp,0x40
c002221a:	8d 44 24 09          	lea    eax,[esp+0x9]
c002221e:	50                   	push   eax
c002221f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022223:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022227:	e8 38 ff ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002222c:	83 c4 10             	add    esp,0x10
c002222f:	83 c8 ff             	or     eax,0xffffffff
c0022232:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0022237:	75 19                	jne    c0022252 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0022239:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c002223e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0022243:	c1 e0 08             	shl    eax,0x8
c0022246:	09 c2                	or     edx,eax
c0022248:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c002224d:	c1 e0 10             	shl    eax,0x10
c0022250:	09 d0                	or     eax,edx
c0022252:	83 c4 3c             	add    esp,0x3c
c0022255:	c3                   	ret    

c0022256 <CmGetNext(Reghive_Tag*, int)>:
c0022256:	83 ec 40             	sub    esp,0x40
c0022259:	8d 44 24 09          	lea    eax,[esp+0x9]
c002225d:	50                   	push   eax
c002225e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022262:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022266:	e8 f9 fe ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002226b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0022270:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0022275:	c1 e0 08             	shl    eax,0x8
c0022278:	09 c2                	or     edx,eax
c002227a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c002227f:	83 c4 4c             	add    esp,0x4c
c0022282:	c1 e0 10             	shl    eax,0x10
c0022285:	09 d0                	or     eax,edx
c0022287:	c3                   	ret    

c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0022288:	53                   	push   ebx
c0022289:	83 ec 18             	sub    esp,0x18
c002228c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022290:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022294:	74 29                	je     c00222bf <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022296:	50                   	push   eax
c0022297:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c002229c:	99                   	cdq    
c002229d:	52                   	push   edx
c002229e:	50                   	push   eax
c002229f:	ff 33                	push   DWORD PTR [ebx]
c00222a1:	e8 98 85 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00222a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00222a8:	5a                   	pop    edx
c00222a9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00222ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00222af:	51                   	push   ecx
c00222b0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00222b4:	6a 00                	push   0x0
c00222b6:	6a 2b                	push   0x2b
c00222b8:	50                   	push   eax
c00222b9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00222bc:	83 c4 20             	add    esp,0x20
c00222bf:	83 c4 18             	add    esp,0x18
c00222c2:	5b                   	pop    ebx
c00222c3:	c3                   	ret    

c00222c4 <CmFreeExtent(Reghive_Tag*, int)>:
c00222c4:	53                   	push   ebx
c00222c5:	83 ec 3c             	sub    esp,0x3c
c00222c8:	6a 2b                	push   0x2b
c00222ca:	6a 00                	push   0x0
c00222cc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00222d0:	53                   	push   ebx
c00222d1:	e8 1a e2 fd ff       	call   c00004f0 <memset>
c00222d6:	83 c4 0c             	add    esp,0xc
c00222d9:	53                   	push   ebx
c00222da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00222de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00222e2:	e8 a1 ff ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00222e7:	83 c4 48             	add    esp,0x48
c00222ea:	5b                   	pop    ebx
c00222eb:	c3                   	ret    

c00222ec <CmUpdateHeader(Reghive_Tag*)>:
c00222ec:	83 ec 0c             	sub    esp,0xc
c00222ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00222f7:	74 10                	je     c0022309 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00222f9:	52                   	push   edx
c00222fa:	8d 50 05             	lea    edx,[eax+0x5]
c00222fd:	52                   	push   edx
c00222fe:	6a 00                	push   0x0
c0022300:	50                   	push   eax
c0022301:	e8 82 ff ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022306:	83 c4 10             	add    esp,0x10
c0022309:	83 c4 0c             	add    esp,0xc
c002230c:	c3                   	ret    

c002230d <CmExpand(Reghive_Tag*, int)>:
c002230d:	55                   	push   ebp
c002230e:	57                   	push   edi
c002230f:	83 cf ff             	or     edi,0xffffffff
c0022312:	56                   	push   esi
c0022313:	53                   	push   ebx
c0022314:	83 ec 3c             	sub    esp,0x3c
c0022317:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002231b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002231f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022323:	74 59                	je     c002237e <CmExpand(Reghive_Tag*, int)+0x71>
c0022325:	50                   	push   eax
c0022326:	31 d2                	xor    edx,edx
c0022328:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c002232c:	31 ff                	xor    edi,edi
c002232e:	52                   	push   edx
c002232f:	50                   	push   eax
c0022330:	ff 33                	push   DWORD PTR [ebx]
c0022332:	e8 07 85 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0022337:	83 c4 0c             	add    esp,0xc
c002233a:	6a 2b                	push   0x2b
c002233c:	6a 00                	push   0x0
c002233e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0022342:	55                   	push   ebp
c0022343:	e8 a8 e1 fd ff       	call   c00004f0 <memset>
c0022348:	83 c4 10             	add    esp,0x10
c002234b:	39 f7                	cmp    edi,esi
c002234d:	7d 1b                	jge    c002236a <CmExpand(Reghive_Tag*, int)+0x5d>
c002234f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022351:	83 ec 0c             	sub    esp,0xc
c0022354:	47                   	inc    edi
c0022355:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0022359:	8b 10                	mov    edx,DWORD PTR [eax]
c002235b:	51                   	push   ecx
c002235c:	55                   	push   ebp
c002235d:	6a 00                	push   0x0
c002235f:	6a 2b                	push   0x2b
c0022361:	50                   	push   eax
c0022362:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022365:	83 c4 20             	add    esp,0x20
c0022368:	eb e1                	jmp    c002234b <CmExpand(Reghive_Tag*, int)+0x3e>
c002236a:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c002236d:	83 ec 0c             	sub    esp,0xc
c0022370:	01 fe                	add    esi,edi
c0022372:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0022375:	53                   	push   ebx
c0022376:	e8 71 ff ff ff       	call   c00222ec <CmUpdateHeader(Reghive_Tag*)>
c002237b:	83 c4 10             	add    esp,0x10
c002237e:	83 c4 3c             	add    esp,0x3c
c0022381:	89 f8                	mov    eax,edi
c0022383:	5b                   	pop    ebx
c0022384:	5e                   	pop    esi
c0022385:	5f                   	pop    edi
c0022386:	5d                   	pop    ebp
c0022387:	c3                   	ret    

c0022388 <CmFindUnusedExtent(Reghive_Tag*)>:
c0022388:	55                   	push   ebp
c0022389:	57                   	push   edi
c002238a:	56                   	push   esi
c002238b:	53                   	push   ebx
c002238c:	83 cb ff             	or     ebx,0xffffffff
c002238f:	83 ec 1c             	sub    esp,0x1c
c0022392:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022396:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c002239a:	74 68                	je     c0022404 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002239c:	51                   	push   ecx
c002239d:	be 2b 00 00 00       	mov    esi,0x2b
c00223a2:	6a 00                	push   0x0
c00223a4:	31 ff                	xor    edi,edi
c00223a6:	6a 00                	push   0x0
c00223a8:	31 db                	xor    ebx,ebx
c00223aa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00223ad:	e8 8c 84 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00223b2:	83 c4 10             	add    esp,0x10
c00223b5:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00223b8:	76 3b                	jbe    c00223f5 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00223ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00223bd:	83 ec 0c             	sub    esp,0xc
c00223c0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00223c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00223c6:	51                   	push   ecx
c00223c7:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00223cb:	51                   	push   ecx
c00223cc:	6a 00                	push   0x0
c00223ce:	6a 01                	push   0x1
c00223d0:	50                   	push   eax
c00223d1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00223d4:	83 c4 20             	add    esp,0x20
c00223d7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00223dc:	74 26                	je     c0022404 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00223de:	52                   	push   edx
c00223df:	43                   	inc    ebx
c00223e0:	57                   	push   edi
c00223e1:	56                   	push   esi
c00223e2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00223e5:	e8 54 84 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00223ea:	83 c6 2b             	add    esi,0x2b
c00223ed:	83 d7 00             	adc    edi,0x0
c00223f0:	83 c4 10             	add    esp,0x10
c00223f3:	eb c0                	jmp    c00223b5 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00223f5:	50                   	push   eax
c00223f6:	50                   	push   eax
c00223f7:	6a 40                	push   0x40
c00223f9:	55                   	push   ebp
c00223fa:	e8 0e ff ff ff       	call   c002230d <CmExpand(Reghive_Tag*, int)>
c00223ff:	83 c4 10             	add    esp,0x10
c0022402:	89 c3                	mov    ebx,eax
c0022404:	83 c4 1c             	add    esp,0x1c
c0022407:	89 d8                	mov    eax,ebx
c0022409:	5b                   	pop    ebx
c002240a:	5e                   	pop    esi
c002240b:	5f                   	pop    edi
c002240c:	5d                   	pop    ebp
c002240d:	c3                   	ret    

c002240e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c002240e:	55                   	push   ebp
c002240f:	57                   	push   edi
c0022410:	56                   	push   esi
c0022411:	53                   	push   ebx
c0022412:	81 ec 88 00 00 00    	sub    esp,0x88
c0022418:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c002241f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022426:	e8 5d ff ff ff       	call   c0022388 <CmFindUnusedExtent(Reghive_Tag*)>
c002242b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002242f:	83 c4 0c             	add    esp,0xc
c0022432:	6a 2b                	push   0x2b
c0022434:	6a 00                	push   0x0
c0022436:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c002243a:	55                   	push   ebp
c002243b:	e8 b0 e0 fd ff       	call   c00004f0 <memset>
c0022440:	83 c4 10             	add    esp,0x10
c0022443:	85 db                	test   ebx,ebx
c0022445:	74 12                	je     c0022459 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0022447:	51                   	push   ecx
c0022448:	55                   	push   ebp
c0022449:	53                   	push   ebx
c002244a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022451:	e8 0e fd ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022456:	83 c4 10             	add    esp,0x10
c0022459:	8d 7c 24 45          	lea    edi,[esp+0x45]
c002245d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022464:	b9 2b 00 00 00       	mov    ecx,0x2b
c0022469:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002246b:	85 db                	test   ebx,ebx
c002246d:	74 49                	je     c00224b8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c002246f:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0022474:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0022479:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002247d:	c1 e0 08             	shl    eax,0x8
c0022480:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0022486:	09 c8                	or     eax,ecx
c0022488:	74 11                	je     c002249b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c002248a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002248e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0022492:	c1 e8 10             	shr    eax,0x10
c0022495:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022499:	eb 0f                	jmp    c00224aa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c002249b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00224a0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00224a5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00224aa:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00224ae:	c1 ea 08             	shr    edx,0x8
c00224b1:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00224b6:	eb 0f                	jmp    c00224c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00224b8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00224bd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00224c2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00224c7:	52                   	push   edx
c00224c8:	8d 44 24 49          	lea    eax,[esp+0x49]
c00224cc:	50                   	push   eax
c00224cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224d1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00224d8:	e8 ab fd ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224dd:	83 c4 10             	add    esp,0x10
c00224e0:	85 db                	test   ebx,ebx
c00224e2:	74 12                	je     c00224f6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00224e4:	50                   	push   eax
c00224e5:	55                   	push   ebp
c00224e6:	53                   	push   ebx
c00224e7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00224ee:	e8 95 fd ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224f3:	83 c4 10             	add    esp,0x10
c00224f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224fa:	83 c4 7c             	add    esp,0x7c
c00224fd:	5b                   	pop    ebx
c00224fe:	5e                   	pop    esi
c00224ff:	5f                   	pop    edi
c0022500:	5d                   	pop    ebp
c0022501:	c3                   	ret    

c0022502 <CmSetString(Reghive_Tag*, int, char const*)>:
c0022502:	55                   	push   ebp
c0022503:	57                   	push   edi
c0022504:	56                   	push   esi
c0022505:	53                   	push   ebx
c0022506:	bb 27 00 00 00       	mov    ebx,0x27
c002250b:	81 ec 88 00 00 00    	sub    esp,0x88
c0022511:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0022518:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c002251f:	e8 5c e0 fd ff       	call   c0000580 <strlen>
c0022524:	8d 48 26             	lea    ecx,[eax+0x26]
c0022527:	89 c8                	mov    eax,ecx
c0022529:	99                   	cdq    
c002252a:	f7 fb                	idiv   ebx
c002252c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022530:	83 c4 10             	add    esp,0x10
c0022533:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0022539:	7e 10                	jle    c002254b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c002253b:	83 ec 0c             	sub    esp,0xc
c002253e:	68 42 2e 03 c0       	push   0xc0032e42
c0022543:	e8 8a df ff ff       	call   c00204d2 <KePanic(char const*)>
c0022548:	83 c4 10             	add    esp,0x10
c002254b:	53                   	push   ebx
c002254c:	31 ed                	xor    ebp,ebp
c002254e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0022552:	53                   	push   ebx
c0022553:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002255a:	57                   	push   edi
c002255b:	e8 04 fc ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022560:	83 c4 10             	add    esp,0x10
c0022563:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0022567:	89 f0                	mov    eax,esi
c0022569:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c002256d:	c1 e0 08             	shl    eax,0x8
c0022570:	09 c6                	or     esi,eax
c0022572:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0022576:	c1 e6 08             	shl    esi,0x8
c0022579:	09 c6                	or     esi,eax
c002257b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c002257f:	7e 72                	jle    c00225f3 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0022581:	85 f6                	test   esi,esi
c0022583:	75 25                	jne    c00225aa <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0022585:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c002258a:	8d 44 24 45          	lea    eax,[esp+0x45]
c002258e:	50                   	push   eax
c002258f:	6a 00                	push   0x0
c0022591:	6a 00                	push   0x0
c0022593:	57                   	push   edi
c0022594:	e8 75 fe ff ff       	call   c002240e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022599:	83 c4 10             	add    esp,0x10
c002259c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c002259f:	89 c6                	mov    esi,eax
c00225a1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00225a4:	c1 f8 10             	sar    eax,0x10
c00225a7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00225aa:	51                   	push   ecx
c00225ab:	8d 54 24 49          	lea    edx,[esp+0x49]
c00225af:	52                   	push   edx
c00225b0:	56                   	push   esi
c00225b1:	57                   	push   edi
c00225b2:	e8 ad fb ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00225b7:	83 c4 0c             	add    esp,0xc
c00225ba:	6a 27                	push   0x27
c00225bc:	6a 00                	push   0x0
c00225be:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00225c2:	51                   	push   ecx
c00225c3:	e8 28 df fd ff       	call   c00004f0 <memset>
c00225c8:	6b c5 27             	imul   eax,ebp,0x27
c00225cb:	83 c4 0c             	add    esp,0xc
c00225ce:	6a 27                	push   0x27
c00225d0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00225d7:	50                   	push   eax
c00225d8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00225dc:	51                   	push   ecx
c00225dd:	e8 ae e0 fd ff       	call   c0000690 <strncpy>
c00225e2:	83 c4 0c             	add    esp,0xc
c00225e5:	8d 54 24 49          	lea    edx,[esp+0x49]
c00225e9:	52                   	push   edx
c00225ea:	56                   	push   esi
c00225eb:	57                   	push   edi
c00225ec:	e8 97 fc ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00225f1:	eb 19                	jmp    c002260c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00225f3:	85 f6                	test   esi,esi
c00225f5:	74 18                	je     c002260f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c00225f7:	52                   	push   edx
c00225f8:	52                   	push   edx
c00225f9:	56                   	push   esi
c00225fa:	57                   	push   edi
c00225fb:	e8 c4 fc ff ff       	call   c00222c4 <CmFreeExtent(Reghive_Tag*, int)>
c0022600:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022604:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022608:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002260c:	83 c4 10             	add    esp,0x10
c002260f:	45                   	inc    ebp
c0022610:	83 c3 03             	add    ebx,0x3
c0022613:	83 fd 07             	cmp    ebp,0x7
c0022616:	0f 85 47 ff ff ff    	jne    c0022563 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c002261c:	50                   	push   eax
c002261d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0022621:	50                   	push   eax
c0022622:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022629:	57                   	push   edi
c002262a:	e8 59 fc ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002262f:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022635:	5b                   	pop    ebx
c0022636:	5e                   	pop    esi
c0022637:	5f                   	pop    edi
c0022638:	5d                   	pop    ebp
c0022639:	c3                   	ret    

c002263a <CmGetMatch(char*, char*, bool, bool*)>:
c002263a:	56                   	push   esi
c002263b:	53                   	push   ebx
c002263c:	50                   	push   eax
c002263d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022642:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022646:	74 25                	je     c002266d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0022648:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002264b:	31 db                	xor    ebx,ebx
c002264d:	50                   	push   eax
c002264e:	50                   	push   eax
c002264f:	8d 04 9d 20 47 03 c0 	lea    eax,[ebx*4-0x3ffcb8e0]
c0022656:	50                   	push   eax
c0022657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002265b:	e8 20 e1 fd ff       	call   c0000780 <strcmp>
c0022660:	83 c4 10             	add    esp,0x10
c0022663:	85 c0                	test   eax,eax
c0022665:	74 2e                	je     c0022695 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022667:	43                   	inc    ebx
c0022668:	83 fb 3f             	cmp    ebx,0x3f
c002266b:	75 e0                	jne    c002264d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c002266d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022670:	31 db                	xor    ebx,ebx
c0022672:	51                   	push   ecx
c0022673:	51                   	push   ecx
c0022674:	8d 04 9d 20 47 03 c0 	lea    eax,[ebx*4-0x3ffcb8e0]
c002267b:	50                   	push   eax
c002267c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022680:	e8 fb e0 fd ff       	call   c0000780 <strcmp>
c0022685:	83 c4 10             	add    esp,0x10
c0022688:	85 c0                	test   eax,eax
c002268a:	74 09                	je     c0022695 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c002268c:	43                   	inc    ebx
c002268d:	83 fb 3f             	cmp    ebx,0x3f
c0022690:	75 e0                	jne    c0022672 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022692:	83 cb ff             	or     ebx,0xffffffff
c0022695:	5a                   	pop    edx
c0022696:	89 d8                	mov    eax,ebx
c0022698:	5b                   	pop    ebx
c0022699:	5e                   	pop    esi
c002269a:	c3                   	ret    

c002269b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c002269b:	55                   	push   ebp
c002269c:	31 c0                	xor    eax,eax
c002269e:	57                   	push   edi
c002269f:	56                   	push   esi
c00226a0:	53                   	push   ebx
c00226a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00226a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00226a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00226ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00226b1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00226b3:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00226b6:	83 fd 1f             	cmp    ebp,0x1f
c00226b9:	7f 0b                	jg     c00226c6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00226bb:	0f b6 c2             	movzx  eax,dl
c00226be:	d3 e0                	shl    eax,cl
c00226c0:	09 07                	or     DWORD PTR [edi],eax
c00226c2:	b0 01                	mov    al,0x1
c00226c4:	01 33                	add    DWORD PTR [ebx],esi
c00226c6:	5b                   	pop    ebx
c00226c7:	5e                   	pop    esi
c00226c8:	5f                   	pop    edi
c00226c9:	5d                   	pop    ebp
c00226ca:	c3                   	ret    

c00226cb <CmGetShift(unsigned int*, int*, int, bool*)>:
c00226cb:	57                   	push   edi
c00226cc:	56                   	push   esi
c00226cd:	53                   	push   ebx
c00226ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00226d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00226d6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00226da:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00226de:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00226e0:	7c 17                	jl     c00226f9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00226e2:	8b 17                	mov    edx,DWORD PTR [edi]
c00226e4:	b8 01 00 00 00       	mov    eax,0x1
c00226e9:	d3 e0                	shl    eax,cl
c00226eb:	48                   	dec    eax
c00226ec:	21 d0                	and    eax,edx
c00226ee:	d3 ea                	shr    edx,cl
c00226f0:	89 17                	mov    DWORD PTR [edi],edx
c00226f2:	29 0b                	sub    DWORD PTR [ebx],ecx
c00226f4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00226f7:	eb 05                	jmp    c00226fe <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00226f9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00226fc:	31 c0                	xor    eax,eax
c00226fe:	5b                   	pop    ebx
c00226ff:	5e                   	pop    esi
c0022700:	5f                   	pop    edi
c0022701:	c3                   	ret    

c0022702 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022702:	83 ec 40             	sub    esp,0x40
c0022705:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022709:	50                   	push   eax
c002270a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002270e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022712:	e8 4d fa ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022717:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002271b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c002271f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0022723:	89 10                	mov    DWORD PTR [eax],edx
c0022725:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022728:	83 c4 4c             	add    esp,0x4c
c002272b:	c3                   	ret    

c002272c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c002272c:	55                   	push   ebp
c002272d:	57                   	push   edi
c002272e:	56                   	push   esi
c002272f:	53                   	push   ebx
c0022730:	83 ec 40             	sub    esp,0x40
c0022733:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022737:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c002273b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c002273f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0022743:	53                   	push   ebx
c0022744:	56                   	push   esi
c0022745:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022749:	e8 16 fa ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002274e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0022752:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0022756:	83 c4 0c             	add    esp,0xc
c0022759:	53                   	push   ebx
c002275a:	56                   	push   esi
c002275b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002275f:	e8 24 fb ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022764:	83 c4 4c             	add    esp,0x4c
c0022767:	5b                   	pop    ebx
c0022768:	5e                   	pop    esi
c0022769:	5f                   	pop    edi
c002276a:	5d                   	pop    ebp
c002276b:	c3                   	ret    

c002276c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c002276c:	55                   	push   ebp
c002276d:	57                   	push   edi
c002276e:	56                   	push   esi
c002276f:	31 f6                	xor    esi,esi
c0022771:	53                   	push   ebx
c0022772:	31 db                	xor    ebx,ebx
c0022774:	83 ec 40             	sub    esp,0x40
c0022777:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002277f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0022787:	6a 12                	push   0x12
c0022789:	68 ee 00 00 00       	push   0xee
c002278e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022792:	e8 59 dd fd ff       	call   c00004f0 <memset>
c0022797:	83 c4 10             	add    esp,0x10
c002279a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002279e:	6a 08                	push   0x8
c00227a0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00227a4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00227a8:	50                   	push   eax
c00227a9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00227ad:	55                   	push   ebp
c00227ae:	57                   	push   edi
c00227af:	e8 e7 fe ff ff       	call   c002269b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00227b4:	83 c4 10             	add    esp,0x10
c00227b7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00227bb:	50                   	push   eax
c00227bc:	6a 06                	push   0x6
c00227be:	55                   	push   ebp
c00227bf:	57                   	push   edi
c00227c0:	e8 06 ff ff ff       	call   c00226cb <CmGetShift(unsigned int*, int*, int, bool*)>
c00227c5:	83 c4 10             	add    esp,0x10
c00227c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00227cd:	74 07                	je     c00227d6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00227cf:	46                   	inc    esi
c00227d0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00227d4:	eb e1                	jmp    c00227b7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00227d6:	43                   	inc    ebx
c00227d7:	83 fb 12             	cmp    ebx,0x12
c00227da:	75 c2                	jne    c002279e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00227dc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00227e0:	31 f6                	xor    esi,esi
c00227e2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00227e5:	50                   	push   eax
c00227e6:	50                   	push   eax
c00227e7:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00227ec:	46                   	inc    esi
c00227ed:	8d 04 85 20 47 03 c0 	lea    eax,[eax*4-0x3ffcb8e0]
c00227f4:	50                   	push   eax
c00227f5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00227f9:	e8 72 e0 fd ff       	call   c0000870 <strcat>
c00227fe:	83 c4 10             	add    esp,0x10
c0022801:	83 fe 18             	cmp    esi,0x18
c0022804:	75 df                	jne    c00227e5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022806:	83 c4 3c             	add    esp,0x3c
c0022809:	31 c0                	xor    eax,eax
c002280b:	5b                   	pop    ebx
c002280c:	5e                   	pop    esi
c002280d:	5f                   	pop    edi
c002280e:	5d                   	pop    ebp
c002280f:	c3                   	ret    

c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022810:	83 ec 40             	sub    esp,0x40
c0022813:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022817:	50                   	push   eax
c0022818:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002281c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022820:	e8 3f f9 ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022825:	58                   	pop    eax
c0022826:	5a                   	pop    edx
c0022827:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002282b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002282f:	50                   	push   eax
c0022830:	e8 37 ff ff ff       	call   c002276c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022835:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c002283a:	83 c4 4c             	add    esp,0x4c
c002283d:	c3                   	ret    

c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c002283e:	55                   	push   ebp
c002283f:	57                   	push   edi
c0022840:	56                   	push   esi
c0022841:	53                   	push   ebx
c0022842:	31 db                	xor    ebx,ebx
c0022844:	83 ec 70             	sub    esp,0x70
c0022847:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c002284e:	6a 30                	push   0x30
c0022850:	6a 00                	push   0x0
c0022852:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0022856:	56                   	push   esi
c0022857:	e8 94 dc fd ff       	call   c00004f0 <memset>
c002285c:	83 c4 10             	add    esp,0x10
c002285f:	83 ec 0c             	sub    esp,0xc
c0022862:	57                   	push   edi
c0022863:	e8 18 dd fd ff       	call   c0000580 <strlen>
c0022868:	83 c4 10             	add    esp,0x10
c002286b:	39 d8                	cmp    eax,ebx
c002286d:	76 16                	jbe    c0022885 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c002286f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0022873:	83 ec 0c             	sub    esp,0xc
c0022876:	50                   	push   eax
c0022877:	e8 e4 e0 fd ff       	call   c0000960 <toupper>
c002287c:	83 c4 10             	add    esp,0x10
c002287f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022882:	43                   	inc    ebx
c0022883:	eb da                	jmp    c002285f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022885:	52                   	push   edx
c0022886:	31 db                	xor    ebx,ebx
c0022888:	6a 18                	push   0x18
c002288a:	31 ff                	xor    edi,edi
c002288c:	6a 3f                	push   0x3f
c002288e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022892:	50                   	push   eax
c0022893:	e8 58 dc fd ff       	call   c00004f0 <memset>
c0022898:	83 c4 10             	add    esp,0x10
c002289b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c002289f:	8d 74 24 10          	lea    esi,[esp+0x10]
c00228a3:	84 c0                	test   al,al
c00228a5:	0f 84 af 00 00 00    	je     c002295a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00228ab:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00228af:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00228b2:	83 ec 0c             	sub    esp,0xc
c00228b5:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00228ba:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00228be:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00228c2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00228c7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00228cb:	56                   	push   esi
c00228cc:	e8 af dc fd ff       	call   c0000580 <strlen>
c00228d1:	83 c4 10             	add    esp,0x10
c00228d4:	85 c0                	test   eax,eax
c00228d6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00228da:	74 0b                	je     c00228e7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00228dc:	50                   	push   eax
c00228dd:	6a 01                	push   0x1
c00228df:	56                   	push   esi
c00228e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00228e4:	50                   	push   eax
c00228e5:	eb 0a                	jmp    c00228f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00228e7:	50                   	push   eax
c00228e8:	6a 00                	push   0x0
c00228ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228ee:	50                   	push   eax
c00228ef:	6a 00                	push   0x0
c00228f1:	e8 44 fd ff ff       	call   c002263a <CmGetMatch(char*, char*, bool, bool*)>
c00228f6:	83 c4 10             	add    esp,0x10
c00228f9:	83 f8 ff             	cmp    eax,0xffffffff
c00228fc:	75 1a                	jne    c0022918 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00228fe:	83 ec 0c             	sub    esp,0xc
c0022901:	68 57 2e 03 c0       	push   0xc0032e57
c0022906:	e8 c7 db ff ff       	call   c00204d2 <KePanic(char const*)>
c002290b:	83 c4 10             	add    esp,0x10
c002290e:	b8 02 00 00 00       	mov    eax,0x2
c0022913:	e9 bb 00 00 00       	jmp    c00229d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022918:	83 ff 18             	cmp    edi,0x18
c002291b:	75 1a                	jne    c0022937 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c002291d:	83 ec 0c             	sub    esp,0xc
c0022920:	68 6c 2e 03 c0       	push   0xc0032e6c
c0022925:	e8 a8 db ff ff       	call   c00204d2 <KePanic(char const*)>
c002292a:	83 c4 10             	add    esp,0x10
c002292d:	b8 01 00 00 00       	mov    eax,0x1
c0022932:	e9 9c 00 00 00       	jmp    c00229d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022937:	47                   	inc    edi
c0022938:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002293d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0022941:	0f 45 dd             	cmovne ebx,ebp
c0022944:	83 ec 0c             	sub    esp,0xc
c0022947:	56                   	push   esi
c0022948:	e8 33 dc fd ff       	call   c0000580 <strlen>
c002294d:	83 c4 10             	add    esp,0x10
c0022950:	85 c0                	test   eax,eax
c0022952:	74 06                	je     c002295a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0022954:	43                   	inc    ebx
c0022955:	e9 41 ff ff ff       	jmp    c002289b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c002295a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022962:	31 db                	xor    ebx,ebx
c0022964:	31 ff                	xor    edi,edi
c0022966:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002296e:	50                   	push   eax
c002296f:	6a 12                	push   0x12
c0022971:	68 ee 00 00 00       	push   0xee
c0022976:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002297d:	e8 6e db fd ff       	call   c00004f0 <memset>
c0022982:	83 c4 10             	add    esp,0x10
c0022985:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022989:	83 fb 17             	cmp    ebx,0x17
c002298c:	7e 26                	jle    c00229b4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c002298e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022992:	50                   	push   eax
c0022993:	6a 08                	push   0x8
c0022995:	55                   	push   ebp
c0022996:	56                   	push   esi
c0022997:	e8 2f fd ff ff       	call   c00226cb <CmGetShift(unsigned int*, int*, int, bool*)>
c002299c:	83 c4 10             	add    esp,0x10
c002299f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00229a4:	74 26                	je     c00229cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00229a6:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00229ad:	4b                   	dec    ebx
c00229ae:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00229b1:	47                   	inc    edi
c00229b2:	eb 1c                	jmp    c00229d0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00229b4:	6a 06                	push   0x6
c00229b6:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00229bb:	50                   	push   eax
c00229bc:	55                   	push   ebp
c00229bd:	56                   	push   esi
c00229be:	e8 d8 fc ff ff       	call   c002269b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00229c3:	83 c4 10             	add    esp,0x10
c00229c6:	84 c0                	test   al,al
c00229c8:	75 06                	jne    c00229d0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00229ca:	eb c2                	jmp    c002298e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00229cc:	31 c0                	xor    eax,eax
c00229ce:	eb 03                	jmp    c00229d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00229d0:	43                   	inc    ebx
c00229d1:	eb b2                	jmp    c0022985 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00229d3:	83 c4 6c             	add    esp,0x6c
c00229d6:	5b                   	pop    ebx
c00229d7:	5e                   	pop    esi
c00229d8:	5f                   	pop    edi
c00229d9:	5d                   	pop    ebp
c00229da:	c3                   	ret    

c00229db <CmCreateString(Reghive_Tag*, int, char const*)>:
c00229db:	53                   	push   ebx
c00229dc:	83 ec 3c             	sub    esp,0x3c
c00229df:	6a 2b                	push   0x2b
c00229e1:	6a 00                	push   0x0
c00229e3:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00229e7:	53                   	push   ebx
c00229e8:	e8 03 db fd ff       	call   c00004f0 <memset>
c00229ed:	58                   	pop    eax
c00229ee:	5a                   	pop    edx
c00229ef:	8d 44 24 11          	lea    eax,[esp+0x11]
c00229f3:	50                   	push   eax
c00229f4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00229f8:	e8 41 fe ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c00229fd:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022a02:	83 c4 0c             	add    esp,0xc
c0022a05:	6a 15                	push   0x15
c0022a07:	6a 00                	push   0x0
c0022a09:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022a0d:	50                   	push   eax
c0022a0e:	e8 dd da fd ff       	call   c00004f0 <memset>
c0022a13:	53                   	push   ebx
c0022a14:	6a 00                	push   0x0
c0022a16:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a1a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a1e:	e8 eb f9 ff ff       	call   c002240e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022a23:	83 c4 58             	add    esp,0x58
c0022a26:	5b                   	pop    ebx
c0022a27:	c3                   	ret    

c0022a28 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022a28:	56                   	push   esi
c0022a29:	53                   	push   ebx
c0022a2a:	83 ec 48             	sub    esp,0x48
c0022a2d:	6a 12                	push   0x12
c0022a2f:	68 ff 00 00 00       	push   0xff
c0022a34:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022a38:	56                   	push   esi
c0022a39:	e8 b2 da fd ff       	call   c00004f0 <memset>
c0022a3e:	5a                   	pop    edx
c0022a3f:	59                   	pop    ecx
c0022a40:	56                   	push   esi
c0022a41:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022a45:	e8 f4 fd ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022a4a:	83 c4 10             	add    esp,0x10
c0022a4d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022a51:	85 db                	test   ebx,ebx
c0022a53:	74 42                	je     c0022a97 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0022a55:	50                   	push   eax
c0022a56:	8d 44 24 19          	lea    eax,[esp+0x19]
c0022a5a:	50                   	push   eax
c0022a5b:	53                   	push   ebx
c0022a5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a60:	e8 ff f6 ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022a65:	83 c4 0c             	add    esp,0xc
c0022a68:	6a 12                	push   0x12
c0022a6a:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022a6e:	50                   	push   eax
c0022a6f:	56                   	push   esi
c0022a70:	e8 0b d9 fd ff       	call   c0000380 <memcmp>
c0022a75:	83 c4 10             	add    esp,0x10
c0022a78:	85 c0                	test   eax,eax
c0022a7a:	74 1e                	je     c0022a9a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022a7c:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022a81:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022a86:	c1 e3 08             	shl    ebx,0x8
c0022a89:	09 d8                	or     eax,ebx
c0022a8b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022a90:	c1 e3 10             	shl    ebx,0x10
c0022a93:	09 c3                	or     ebx,eax
c0022a95:	eb ba                	jmp    c0022a51 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022a97:	83 cb ff             	or     ebx,0xffffffff
c0022a9a:	83 c4 44             	add    esp,0x44
c0022a9d:	89 d8                	mov    eax,ebx
c0022a9f:	5b                   	pop    ebx
c0022aa0:	5e                   	pop    esi
c0022aa1:	c3                   	ret    

c0022aa2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022aa2:	57                   	push   edi
c0022aa3:	56                   	push   esi
c0022aa4:	53                   	push   ebx
c0022aa5:	83 ec 34             	sub    esp,0x34
c0022aa8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022aac:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022ab0:	6a 2b                	push   0x2b
c0022ab2:	6a 00                	push   0x0
c0022ab4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022ab8:	53                   	push   ebx
c0022ab9:	e8 32 da fd ff       	call   c00004f0 <memset>
c0022abe:	58                   	pop    eax
c0022abf:	5a                   	pop    edx
c0022ac0:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022ac4:	50                   	push   eax
c0022ac5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022ac9:	e8 70 fd ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022ace:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0022ad2:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022ad6:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022ada:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022ade:	53                   	push   ebx
c0022adf:	6a 00                	push   0x0
c0022ae1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022ae5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022ae9:	e8 20 f9 ff ff       	call   c002240e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022aee:	83 c4 50             	add    esp,0x50
c0022af1:	5b                   	pop    ebx
c0022af2:	5e                   	pop    esi
c0022af3:	5f                   	pop    edi
c0022af4:	c3                   	ret    

c0022af5 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022af5:	55                   	push   ebp
c0022af6:	57                   	push   edi
c0022af7:	56                   	push   esi
c0022af8:	53                   	push   ebx
c0022af9:	83 ec 40             	sub    esp,0x40
c0022afc:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022b00:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022b04:	6a 2b                	push   0x2b
c0022b06:	6a 00                	push   0x0
c0022b08:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022b0c:	56                   	push   esi
c0022b0d:	e8 de d9 fd ff       	call   c00004f0 <memset>
c0022b12:	5f                   	pop    edi
c0022b13:	89 ef                	mov    edi,ebp
c0022b15:	58                   	pop    eax
c0022b16:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022b1a:	50                   	push   eax
c0022b1b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022b1f:	e8 1a fd ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022b24:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022b29:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022b2e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022b33:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022b38:	83 c4 10             	add    esp,0x10
c0022b3b:	85 ed                	test   ebp,ebp
c0022b3d:	74 14                	je     c0022b53 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022b3f:	51                   	push   ecx
c0022b40:	51                   	push   ecx
c0022b41:	57                   	push   edi
c0022b42:	53                   	push   ebx
c0022b43:	e8 0e f7 ff ff       	call   c0022256 <CmGetNext(Reghive_Tag*, int)>
c0022b48:	83 c4 10             	add    esp,0x10
c0022b4b:	85 c0                	test   eax,eax
c0022b4d:	74 04                	je     c0022b53 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022b4f:	89 c7                	mov    edi,eax
c0022b51:	eb e8                	jmp    c0022b3b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022b53:	56                   	push   esi
c0022b54:	6a 00                	push   0x0
c0022b56:	57                   	push   edi
c0022b57:	53                   	push   ebx
c0022b58:	e8 b1 f8 ff ff       	call   c002240e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022b5d:	83 c4 0c             	add    esp,0xc
c0022b60:	56                   	push   esi
c0022b61:	50                   	push   eax
c0022b62:	89 c7                	mov    edi,eax
c0022b64:	53                   	push   ebx
c0022b65:	e8 fa f5 ff ff       	call   c0022164 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022b6a:	58                   	pop    eax
c0022b6b:	5a                   	pop    edx
c0022b6c:	6a 6c                	push   0x6c
c0022b6e:	6a 00                	push   0x0
c0022b70:	6a 00                	push   0x0
c0022b72:	68 7d 2e 03 c0       	push   0xc0032e7d
c0022b77:	57                   	push   edi
c0022b78:	53                   	push   ebx
c0022b79:	e8 24 ff ff ff       	call   c0022aa2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022b7e:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022b82:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022b86:	c1 e8 10             	shr    eax,0x10
c0022b89:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022b8d:	83 c4 1c             	add    esp,0x1c
c0022b90:	56                   	push   esi
c0022b91:	57                   	push   edi
c0022b92:	53                   	push   ebx
c0022b93:	e8 f0 f6 ff ff       	call   c0022288 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022b98:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b9d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022ba2:	c1 e0 08             	shl    eax,0x8
c0022ba5:	09 c2                	or     edx,eax
c0022ba7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022bac:	83 c4 4c             	add    esp,0x4c
c0022baf:	5b                   	pop    ebx
c0022bb0:	5e                   	pop    esi
c0022bb1:	c1 e0 10             	shl    eax,0x10
c0022bb4:	09 d0                	or     eax,edx
c0022bb6:	5f                   	pop    edi
c0022bb7:	5d                   	pop    ebp
c0022bb8:	c3                   	ret    

c0022bb9 <zStrtok(char*, char const*)>:
c0022bb9:	55                   	push   ebp
c0022bba:	57                   	push   edi
c0022bbb:	56                   	push   esi
c0022bbc:	53                   	push   ebx
c0022bbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022bc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bc5:	85 db                	test   ebx,ebx
c0022bc7:	74 2f                	je     c0022bf8 <zStrtok(char*, char const*)+0x3f>
c0022bc9:	85 c0                	test   eax,eax
c0022bcb:	75 09                	jne    c0022bd6 <zStrtok(char*, char const*)+0x1d>
c0022bcd:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022bd2:	85 c0                	test   eax,eax
c0022bd4:	74 50                	je     c0022c26 <zStrtok(char*, char const*)+0x6d>
c0022bd6:	31 c9                	xor    ecx,ecx
c0022bd8:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022bdc:	74 03                	je     c0022be1 <zStrtok(char*, char const*)+0x28>
c0022bde:	41                   	inc    ecx
c0022bdf:	eb f7                	jmp    c0022bd8 <zStrtok(char*, char const*)+0x1f>
c0022be1:	31 d2                	xor    edx,edx
c0022be3:	39 ca                	cmp    edx,ecx
c0022be5:	74 15                	je     c0022bfc <zStrtok(char*, char const*)+0x43>
c0022be7:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022beb:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022bee:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022bf1:	39 ee                	cmp    esi,ebp
c0022bf3:	74 13                	je     c0022c08 <zStrtok(char*, char const*)+0x4f>
c0022bf5:	42                   	inc    edx
c0022bf6:	eb eb                	jmp    c0022be3 <zStrtok(char*, char const*)+0x2a>
c0022bf8:	31 c0                	xor    eax,eax
c0022bfa:	eb 2a                	jmp    c0022c26 <zStrtok(char*, char const*)+0x6d>
c0022bfc:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022c06:	eb 1e                	jmp    c0022c26 <zStrtok(char*, char const*)+0x6d>
c0022c08:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022c0b:	39 ce                	cmp    esi,ecx
c0022c0d:	75 0a                	jne    c0022c19 <zStrtok(char*, char const*)+0x60>
c0022c0f:	40                   	inc    eax
c0022c10:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022c15:	89 d8                	mov    eax,ebx
c0022c17:	eb 0d                	jmp    c0022c26 <zStrtok(char*, char const*)+0x6d>
c0022c19:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022c1c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022c20:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022c26:	5b                   	pop    ebx
c0022c27:	5e                   	pop    esi
c0022c28:	5f                   	pop    edi
c0022c29:	5d                   	pop    ebp
c0022c2a:	c3                   	ret    

c0022c2b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022c2b:	57                   	push   edi
c0022c2c:	56                   	push   esi
c0022c2d:	53                   	push   ebx
c0022c2e:	81 ec 08 01 00 00    	sub    esp,0x108
c0022c34:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022c3b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022c42:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022c46:	53                   	push   ebx
c0022c47:	e8 04 da fd ff       	call   c0000650 <strcpy>
c0022c4c:	59                   	pop    ecx
c0022c4d:	5e                   	pop    esi
c0022c4e:	68 1f 32 03 c0       	push   0xc003321f
c0022c53:	53                   	push   ebx
c0022c54:	bb 01 00 00 00       	mov    ebx,0x1
c0022c59:	e8 5b ff ff ff       	call   c0022bb9 <zStrtok(char*, char const*)>
c0022c5e:	83 c4 10             	add    esp,0x10
c0022c61:	85 c0                	test   eax,eax
c0022c63:	74 3b                	je     c0022ca0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c65:	52                   	push   edx
c0022c66:	50                   	push   eax
c0022c67:	6a 01                	push   0x1
c0022c69:	57                   	push   edi
c0022c6a:	e8 b9 fd ff ff       	call   c0022a28 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022c6f:	59                   	pop    ecx
c0022c70:	5e                   	pop    esi
c0022c71:	89 c3                	mov    ebx,eax
c0022c73:	68 1f 32 03 c0       	push   0xc003321f
c0022c78:	6a 00                	push   0x0
c0022c7a:	e8 3a ff ff ff       	call   c0022bb9 <zStrtok(char*, char const*)>
c0022c7f:	83 c4 10             	add    esp,0x10
c0022c82:	85 c0                	test   eax,eax
c0022c84:	89 c6                	mov    esi,eax
c0022c86:	74 18                	je     c0022ca0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c88:	52                   	push   edx
c0022c89:	52                   	push   edx
c0022c8a:	53                   	push   ebx
c0022c8b:	57                   	push   edi
c0022c8c:	e8 86 f5 ff ff       	call   c0022217 <CmEnterDirectory(Reghive_Tag*, int)>
c0022c91:	83 c4 10             	add    esp,0x10
c0022c94:	83 f8 ff             	cmp    eax,0xffffffff
c0022c97:	89 c3                	mov    ebx,eax
c0022c99:	74 05                	je     c0022ca0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c9b:	50                   	push   eax
c0022c9c:	56                   	push   esi
c0022c9d:	53                   	push   ebx
c0022c9e:	eb c9                	jmp    c0022c69 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022ca0:	81 c4 00 01 00 00    	add    esp,0x100
c0022ca6:	89 d8                	mov    eax,ebx
c0022ca8:	5b                   	pop    ebx
c0022ca9:	5e                   	pop    esi
c0022caa:	5f                   	pop    edi
c0022cab:	c3                   	ret    

c0022cac <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022cac:	55                   	push   ebp
c0022cad:	57                   	push   edi
c0022cae:	56                   	push   esi
c0022caf:	53                   	push   ebx
c0022cb0:	83 ec 5c             	sub    esp,0x5c
c0022cb3:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022cb7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022cbb:	85 db                	test   ebx,ebx
c0022cbd:	0f 8e 84 00 00 00    	jle    c0022d47 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022cc3:	57                   	push   edi
c0022cc4:	31 ed                	xor    ebp,ebp
c0022cc6:	6a 32                	push   0x32
c0022cc8:	6a 00                	push   0x0
c0022cca:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022cce:	57                   	push   edi
c0022ccf:	e8 1c d8 fd ff       	call   c00004f0 <memset>
c0022cd4:	83 c4 0c             	add    esp,0xc
c0022cd7:	57                   	push   edi
c0022cd8:	53                   	push   ebx
c0022cd9:	56                   	push   esi
c0022cda:	e8 31 fb ff ff       	call   c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022cdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022ce3:	83 c4 10             	add    esp,0x10
c0022ce6:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022cea:	7d 13                	jge    c0022cff <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022cec:	83 ec 0c             	sub    esp,0xc
c0022cef:	45                   	inc    ebp
c0022cf0:	68 a3 35 03 c0       	push   0xc00335a3
c0022cf5:	e8 50 68 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0022cfa:	83 c4 10             	add    esp,0x10
c0022cfd:	eb e7                	jmp    c0022ce6 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022cff:	51                   	push   ecx
c0022d00:	57                   	push   edi
c0022d01:	53                   	push   ebx
c0022d02:	68 83 2e 03 c0       	push   0xc0032e83
c0022d07:	e8 3e 68 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0022d0c:	83 c4 10             	add    esp,0x10
c0022d0f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022d14:	75 1e                	jne    c0022d34 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022d16:	52                   	push   edx
c0022d17:	52                   	push   edx
c0022d18:	53                   	push   ebx
c0022d19:	56                   	push   esi
c0022d1a:	e8 f8 f4 ff ff       	call   c0022217 <CmEnterDirectory(Reghive_Tag*, int)>
c0022d1f:	83 c4 0c             	add    esp,0xc
c0022d22:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022d26:	8d 51 04             	lea    edx,[ecx+0x4]
c0022d29:	52                   	push   edx
c0022d2a:	50                   	push   eax
c0022d2b:	56                   	push   esi
c0022d2c:	e8 7b ff ff ff       	call   c0022cac <CmDisplayTree(Reghive_Tag*, int, int)>
c0022d31:	83 c4 10             	add    esp,0x10
c0022d34:	50                   	push   eax
c0022d35:	50                   	push   eax
c0022d36:	53                   	push   ebx
c0022d37:	56                   	push   esi
c0022d38:	e8 19 f5 ff ff       	call   c0022256 <CmGetNext(Reghive_Tag*, int)>
c0022d3d:	83 c4 10             	add    esp,0x10
c0022d40:	89 c3                	mov    ebx,eax
c0022d42:	e9 74 ff ff ff       	jmp    c0022cbb <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022d47:	83 c4 5c             	add    esp,0x5c
c0022d4a:	5b                   	pop    ebx
c0022d4b:	5e                   	pop    esi
c0022d4c:	5f                   	pop    edi
c0022d4d:	5d                   	pop    ebp
c0022d4e:	c3                   	ret    

c0022d4f <CmSplitFinalSlashInPlace(char*)>:
c0022d4f:	53                   	push   ebx
c0022d50:	83 ec 14             	sub    esp,0x14
c0022d53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022d57:	53                   	push   ebx
c0022d58:	e8 23 d8 fd ff       	call   c0000580 <strlen>
c0022d5d:	83 c4 10             	add    esp,0x10
c0022d60:	48                   	dec    eax
c0022d61:	85 c0                	test   eax,eax
c0022d63:	74 15                	je     c0022d7a <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022d65:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022d69:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022d6c:	75 09                	jne    c0022d77 <CmSplitFinalSlashInPlace(char*)+0x28>
c0022d6e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022d71:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022d75:	eb 05                	jmp    c0022d7c <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022d77:	48                   	dec    eax
c0022d78:	eb e7                	jmp    c0022d61 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022d7a:	31 c0                	xor    eax,eax
c0022d7c:	83 c4 08             	add    esp,0x8
c0022d7f:	5b                   	pop    ebx
c0022d80:	c3                   	ret    

c0022d81 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022d81:	55                   	push   ebp
c0022d82:	57                   	push   edi
c0022d83:	56                   	push   esi
c0022d84:	53                   	push   ebx
c0022d85:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022d8b:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022d92:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0022d95:	8d 43 01             	lea    eax,[ebx+0x1]
c0022d98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d9c:	89 f0                	mov    eax,esi
c0022d9e:	3c 40                	cmp    al,0x40
c0022da0:	75 1b                	jne    c0022dbd <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022da2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0022da5:	85 c0                	test   eax,eax
c0022da7:	74 08                	je     c0022db1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022da9:	83 f8 3a             	cmp    eax,0x3a
c0022dac:	74 03                	je     c0022db1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022dae:	43                   	inc    ebx
c0022daf:	eb f1                	jmp    c0022da2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022db1:	85 c0                	test   eax,eax
c0022db3:	0f 84 45 01 00 00    	je     c0022efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022db9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022dbc:	43                   	inc    ebx
c0022dbd:	50                   	push   eax
c0022dbe:	6a 40                	push   0x40
c0022dc0:	6a 00                	push   0x0
c0022dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022dc6:	50                   	push   eax
c0022dc7:	e8 24 d7 fd ff       	call   c00004f0 <memset>
c0022dcc:	89 f1                	mov    ecx,esi
c0022dce:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022dd5:	31 c0                	xor    eax,eax
c0022dd7:	83 c4 10             	add    esp,0x10
c0022dda:	0f be f1             	movsx  esi,cl
c0022ddd:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022de0:	85 d2                	test   edx,edx
c0022de2:	89 d1                	mov    ecx,edx
c0022de4:	0f 84 14 01 00 00    	je     c0022efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022dea:	3d c7 00 00 00       	cmp    eax,0xc7
c0022def:	0f 8f 09 01 00 00    	jg     c0022efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022df5:	83 fa 0a             	cmp    edx,0xa
c0022df8:	0f 85 f1 00 00 00    	jne    c0022eef <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0022dfe:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022e03:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022e08:	89 c8                	mov    eax,ecx
c0022e0a:	a8 df                	test   al,0xdf
c0022e0c:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022e11:	83 f9 23             	cmp    ecx,0x23
c0022e14:	0f 94 c2             	sete   dl
c0022e17:	89 d5                	mov    ebp,edx
c0022e19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e1d:	09 ea                	or     edx,ebp
c0022e1f:	80 e2 01             	and    dl,0x1
c0022e22:	75 47                	jne    c0022e6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022e24:	83 e8 09             	sub    eax,0x9
c0022e27:	3c 01                	cmp    al,0x1
c0022e29:	76 40                	jbe    c0022e6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022e2b:	83 f9 5b             	cmp    ecx,0x5b
c0022e2e:	75 42                	jne    c0022e72 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022e30:	83 fe 40             	cmp    esi,0x40
c0022e33:	75 36                	jne    c0022e6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022e35:	83 ec 0c             	sub    esp,0xc
c0022e38:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0022e3c:	55                   	push   ebp
c0022e3d:	e8 3e d7 fd ff       	call   c0000580 <strlen>
c0022e42:	83 c4 10             	add    esp,0x10
c0022e45:	83 f8 3f             	cmp    eax,0x3f
c0022e48:	0f 87 b0 00 00 00    	ja     c0022efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022e4e:	50                   	push   eax
c0022e4f:	50                   	push   eax
c0022e50:	55                   	push   ebp
c0022e51:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0022e55:	55                   	push   ebp
c0022e56:	e8 f5 d7 fd ff       	call   c0000650 <strcpy>
c0022e5b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0022e5e:	e8 1d d7 fd ff       	call   c0000580 <strlen>
c0022e63:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022e68:	83 c4 10             	add    esp,0x10
c0022e6b:	31 d2                	xor    edx,edx
c0022e6d:	e9 84 00 00 00       	jmp    c0022ef6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0022e72:	83 fe 40             	cmp    esi,0x40
c0022e75:	74 06                	je     c0022e7d <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0022e77:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022e7b:	eb 19                	jmp    c0022e96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022e7d:	51                   	push   ecx
c0022e7e:	51                   	push   ecx
c0022e7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022e83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022e87:	50                   	push   eax
c0022e88:	e8 f3 d8 fd ff       	call   c0000780 <strcmp>
c0022e8d:	83 c4 10             	add    esp,0x10
c0022e90:	85 c0                	test   eax,eax
c0022e92:	75 d7                	jne    c0022e6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022e94:	eb e1                	jmp    c0022e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0022e96:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0022e99:	85 c9                	test   ecx,ecx
c0022e9b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022ea0:	83 f9 3d             	cmp    ecx,0x3d
c0022ea3:	0f 94 c0             	sete   al
c0022ea6:	89 c5                	mov    ebp,eax
c0022ea8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022eac:	09 e8                	or     eax,ebp
c0022eae:	a8 01                	test   al,0x1
c0022eb0:	89 c5                	mov    ebp,eax
c0022eb2:	75 03                	jne    c0022eb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0022eb4:	42                   	inc    edx
c0022eb5:	eb df                	jmp    c0022e96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022eb7:	85 c9                	test   ecx,ecx
c0022eb9:	74 43                	je     c0022efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022ebb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ebf:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022ec2:	52                   	push   edx
c0022ec3:	52                   	push   edx
c0022ec4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022ec8:	50                   	push   eax
c0022ec9:	53                   	push   ebx
c0022eca:	e8 b1 d8 fd ff       	call   c0000780 <strcmp>
c0022ecf:	83 c4 10             	add    esp,0x10
c0022ed2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ed6:	85 c0                	test   eax,eax
c0022ed8:	75 91                	jne    c0022e6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022eda:	50                   	push   eax
c0022edb:	42                   	inc    edx
c0022edc:	50                   	push   eax
c0022edd:	52                   	push   edx
c0022ede:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022ee5:	e8 66 d7 fd ff       	call   c0000650 <strcpy>
c0022eea:	83 c4 10             	add    esp,0x10
c0022eed:	eb 11                	jmp    c0022f00 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0022eef:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022ef3:	8d 50 01             	lea    edx,[eax+0x1]
c0022ef6:	47                   	inc    edi
c0022ef7:	89 d0                	mov    eax,edx
c0022ef9:	e9 df fe ff ff       	jmp    c0022ddd <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0022efe:	31 ed                	xor    ebp,ebp
c0022f00:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022f06:	89 e8                	mov    eax,ebp
c0022f08:	5b                   	pop    ebx
c0022f09:	5e                   	pop    esi
c0022f0a:	5f                   	pop    edi
c0022f0b:	5d                   	pop    ebp
c0022f0c:	c3                   	ret    

c0022f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022f0d:	57                   	push   edi
c0022f0e:	56                   	push   esi
c0022f0f:	53                   	push   ebx
c0022f10:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022f16:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022f1d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022f24:	53                   	push   ebx
c0022f25:	e8 56 d6 fd ff       	call   c0000580 <strlen>
c0022f2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0022f2d:	89 c7                	mov    edi,eax
c0022f2f:	e8 4c d6 fd ff       	call   c0000580 <strlen>
c0022f34:	83 c4 10             	add    esp,0x10
c0022f37:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022f3b:	3d ff 00 00 00       	cmp    eax,0xff
c0022f40:	0f 87 d3 00 00 00    	ja     c0023019 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022f46:	57                   	push   edi
c0022f47:	57                   	push   edi
c0022f48:	56                   	push   esi
c0022f49:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022f4d:	56                   	push   esi
c0022f4e:	e8 fd d6 fd ff       	call   c0000650 <strcpy>
c0022f53:	58                   	pop    eax
c0022f54:	5a                   	pop    edx
c0022f55:	68 1f 32 03 c0       	push   0xc003321f
c0022f5a:	56                   	push   esi
c0022f5b:	e8 10 d9 fd ff       	call   c0000870 <strcat>
c0022f60:	59                   	pop    ecx
c0022f61:	5f                   	pop    edi
c0022f62:	53                   	push   ebx
c0022f63:	56                   	push   esi
c0022f64:	e8 07 d9 fd ff       	call   c0000870 <strcat>
c0022f69:	58                   	pop    eax
c0022f6a:	5a                   	pop    edx
c0022f6b:	68 8d 2e 03 c0       	push   0xc0032e8d
c0022f70:	56                   	push   esi
c0022f71:	e8 fa d8 fd ff       	call   c0000870 <strcat>
c0022f76:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022f7d:	e8 92 37 ff ff       	call   c0016714 <malloc>
c0022f82:	83 c4 0c             	add    esp,0xc
c0022f85:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022f8b:	56                   	push   esi
c0022f8c:	50                   	push   eax
c0022f8d:	89 c3                	mov    ebx,eax
c0022f8f:	e8 ce 77 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0022f94:	83 c4 10             	add    esp,0x10
c0022f97:	85 db                	test   ebx,ebx
c0022f99:	74 7e                	je     c0023019 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022f9b:	51                   	push   ecx
c0022f9c:	51                   	push   ecx
c0022f9d:	6a 01                	push   0x1
c0022f9f:	53                   	push   ebx
c0022fa0:	e8 db 77 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c0022fa5:	83 c4 10             	add    esp,0x10
c0022fa8:	85 c0                	test   eax,eax
c0022faa:	74 08                	je     c0022fb4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022fac:	83 ec 0c             	sub    esp,0xc
c0022faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022fb1:	53                   	push   ebx
c0022fb2:	eb 5f                	jmp    c0023013 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022fb4:	52                   	push   edx
c0022fb5:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022fb9:	50                   	push   eax
c0022fba:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022fbe:	50                   	push   eax
c0022fbf:	53                   	push   ebx
c0022fc0:	e8 bd 7a ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c0022fc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022fc9:	83 c4 10             	add    esp,0x10
c0022fcc:	89 c1                	mov    ecx,eax
c0022fce:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022fd2:	74 31                	je     c0023005 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022fd4:	83 ec 0c             	sub    esp,0xc
c0022fd7:	50                   	push   eax
c0022fd8:	e8 37 37 ff ff       	call   c0016714 <malloc>
c0022fdd:	89 c6                	mov    esi,eax
c0022fdf:	58                   	pop    eax
c0022fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022fe2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022fe6:	52                   	push   edx
c0022fe7:	56                   	push   esi
c0022fe8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022fec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022ff0:	53                   	push   ebx
c0022ff1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022ff4:	83 c4 20             	add    esp,0x20
c0022ff7:	85 c0                	test   eax,eax
c0022ff9:	75 0a                	jne    c0023005 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022ffb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022fff:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0023003:	74 18                	je     c002301d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0023005:	83 ec 0c             	sub    esp,0xc
c0023008:	53                   	push   ebx
c0023009:	e8 d0 77 ff ff       	call   c001a7de <File::close()>
c002300e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023013:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023016:	83 c4 10             	add    esp,0x10
c0023019:	31 c0                	xor    eax,eax
c002301b:	eb 3b                	jmp    c0023058 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c002301d:	83 ec 0c             	sub    esp,0xc
c0023020:	53                   	push   ebx
c0023021:	e8 b8 77 ff ff       	call   c001a7de <File::close()>
c0023026:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002302b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002302e:	83 c4 0c             	add    esp,0xc
c0023031:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0023038:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002303f:	56                   	push   esi
c0023040:	e8 3c fd ff ff       	call   c0022d81 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0023045:	89 34 24             	mov    DWORD PTR [esp],esi
c0023048:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002304c:	e8 d3 36 ff ff       	call   c0016724 <free>
c0023051:	83 c4 10             	add    esp,0x10
c0023054:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023058:	81 c4 20 01 00 00    	add    esp,0x120
c002305e:	5b                   	pop    ebx
c002305f:	5e                   	pop    esi
c0023060:	5f                   	pop    edi
c0023061:	c3                   	ret    

c0023062 <Reg::getLine(char*, char*, char*)>:
c0023062:	57                   	push   edi
c0023063:	56                   	push   esi
c0023064:	53                   	push   ebx
c0023065:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023069:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002306d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023071:	57                   	push   edi
c0023072:	56                   	push   esi
c0023073:	53                   	push   ebx
c0023074:	68 92 2e 03 c0       	push   0xc0032e92
c0023079:	e8 8f fe ff ff       	call   c0022f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c002307e:	83 c4 10             	add    esp,0x10
c0023081:	84 c0                	test   al,al
c0023083:	75 10                	jne    c0023095 <Reg::getLine(char*, char*, char*)+0x33>
c0023085:	57                   	push   edi
c0023086:	56                   	push   esi
c0023087:	53                   	push   ebx
c0023088:	68 b7 2e 03 c0       	push   0xc0032eb7
c002308d:	e8 7b fe ff ff       	call   c0022f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0023092:	83 c4 10             	add    esp,0x10
c0023095:	5b                   	pop    ebx
c0023096:	5e                   	pop    esi
c0023097:	5f                   	pop    edi
c0023098:	c3                   	ret    

c0023099 <Reg::readInt(char*, char*, int*)>:
c0023099:	55                   	push   ebp
c002309a:	57                   	push   edi
c002309b:	56                   	push   esi
c002309c:	53                   	push   ebx
c002309d:	81 ec f0 00 00 00    	sub    esp,0xf0
c00230a3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00230a7:	55                   	push   ebp
c00230a8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00230af:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00230b6:	e8 a7 ff ff ff       	call   c0023062 <Reg::getLine(char*, char*, char*)>
c00230bb:	83 c4 10             	add    esp,0x10
c00230be:	84 c0                	test   al,al
c00230c0:	0f 84 b6 00 00 00    	je     c002317c <Reg::readInt(char*, char*, int*)+0xe3>
c00230c6:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00230cb:	83 fa 2b             	cmp    edx,0x2b
c00230ce:	74 0c                	je     c00230dc <Reg::readInt(char*, char*, int*)+0x43>
c00230d0:	83 fa 2d             	cmp    edx,0x2d
c00230d3:	75 0e                	jne    c00230e3 <Reg::readInt(char*, char*, int*)+0x4a>
c00230d5:	ba 01 00 00 00       	mov    edx,0x1
c00230da:	eb 0b                	jmp    c00230e7 <Reg::readInt(char*, char*, int*)+0x4e>
c00230dc:	ba 01 00 00 00       	mov    edx,0x1
c00230e1:	eb 02                	jmp    c00230e5 <Reg::readInt(char*, char*, int*)+0x4c>
c00230e3:	31 d2                	xor    edx,edx
c00230e5:	31 c0                	xor    eax,eax
c00230e7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00230ec:	be 0a 00 00 00       	mov    esi,0xa
c00230f1:	75 21                	jne    c0023114 <Reg::readInt(char*, char*, int*)+0x7b>
c00230f3:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00230f8:	83 f9 78             	cmp    ecx,0x78
c00230fb:	75 0a                	jne    c0023107 <Reg::readInt(char*, char*, int*)+0x6e>
c00230fd:	83 c2 02             	add    edx,0x2
c0023100:	be 10 00 00 00       	mov    esi,0x10
c0023105:	eb 0d                	jmp    c0023114 <Reg::readInt(char*, char*, int*)+0x7b>
c0023107:	83 f9 62             	cmp    ecx,0x62
c002310a:	75 08                	jne    c0023114 <Reg::readInt(char*, char*, int*)+0x7b>
c002310c:	83 c2 02             	add    edx,0x2
c002310f:	be 02 00 00 00       	mov    esi,0x2
c0023114:	01 d5                	add    ebp,edx
c0023116:	31 d2                	xor    edx,edx
c0023118:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c002311c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0023120:	85 c9                	test   ecx,ecx
c0023122:	0f 94 c3             	sete   bl
c0023125:	83 f9 0d             	cmp    ecx,0xd
c0023128:	89 df                	mov    edi,ebx
c002312a:	0f 94 c3             	sete   bl
c002312d:	09 df                	or     edi,ebx
c002312f:	89 fb                	mov    ebx,edi
c0023131:	83 e7 01             	and    edi,0x1
c0023134:	75 35                	jne    c002316b <Reg::readInt(char*, char*, int*)+0xd2>
c0023136:	0f af d6             	imul   edx,esi
c0023139:	83 fe 10             	cmp    esi,0x10
c002313c:	75 26                	jne    c0023164 <Reg::readInt(char*, char*, int*)+0xcb>
c002313e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023142:	83 ef 41             	sub    edi,0x41
c0023145:	89 fb                	mov    ebx,edi
c0023147:	80 fb 05             	cmp    bl,0x5
c002314a:	77 06                	ja     c0023152 <Reg::readInt(char*, char*, int*)+0xb9>
c002314c:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0023150:	eb 16                	jmp    c0023168 <Reg::readInt(char*, char*, int*)+0xcf>
c0023152:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023156:	83 eb 61             	sub    ebx,0x61
c0023159:	80 fb 05             	cmp    bl,0x5
c002315c:	77 06                	ja     c0023164 <Reg::readInt(char*, char*, int*)+0xcb>
c002315e:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0023162:	eb 04                	jmp    c0023168 <Reg::readInt(char*, char*, int*)+0xcf>
c0023164:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0023168:	45                   	inc    ebp
c0023169:	eb ad                	jmp    c0023118 <Reg::readInt(char*, char*, int*)+0x7f>
c002316b:	84 c0                	test   al,al
c002316d:	74 02                	je     c0023171 <Reg::readInt(char*, char*, int*)+0xd8>
c002316f:	f7 da                	neg    edx
c0023171:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0023178:	89 10                	mov    DWORD PTR [eax],edx
c002317a:	88 d8                	mov    al,bl
c002317c:	81 c4 ec 00 00 00    	add    esp,0xec
c0023182:	5b                   	pop    ebx
c0023183:	5e                   	pop    esi
c0023184:	5f                   	pop    edi
c0023185:	5d                   	pop    ebp
c0023186:	c3                   	ret    

c0023187 <Reg::readString(char*, char*, char*, int)>:
c0023187:	57                   	push   edi
c0023188:	56                   	push   esi
c0023189:	53                   	push   ebx
c002318a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0023190:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0023194:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c002319b:	57                   	push   edi
c002319c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00231a3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00231aa:	e8 b3 fe ff ff       	call   c0023062 <Reg::getLine(char*, char*, char*)>
c00231af:	83 c4 10             	add    esp,0x10
c00231b2:	84 c0                	test   al,al
c00231b4:	89 c6                	mov    esi,eax
c00231b6:	74 44                	je     c00231fc <Reg::readString(char*, char*, char*, int)+0x75>
c00231b8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00231bf:	31 c0                	xor    eax,eax
c00231c1:	4a                   	dec    edx
c00231c2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00231c5:	84 c9                	test   cl,cl
c00231c7:	74 0f                	je     c00231d8 <Reg::readString(char*, char*, char*, int)+0x51>
c00231c9:	39 c2                	cmp    edx,eax
c00231cb:	7e 0b                	jle    c00231d8 <Reg::readString(char*, char*, char*, int)+0x51>
c00231cd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00231d0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00231d5:	40                   	inc    eax
c00231d6:	eb ea                	jmp    c00231c2 <Reg::readString(char*, char*, char*, int)+0x3b>
c00231d8:	83 ec 0c             	sub    esp,0xc
c00231db:	53                   	push   ebx
c00231dc:	e8 9f d3 fd ff       	call   c0000580 <strlen>
c00231e1:	83 c4 10             	add    esp,0x10
c00231e4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00231e9:	75 11                	jne    c00231fc <Reg::readString(char*, char*, char*, int)+0x75>
c00231eb:	83 ec 0c             	sub    esp,0xc
c00231ee:	53                   	push   ebx
c00231ef:	e8 8c d3 fd ff       	call   c0000580 <strlen>
c00231f4:	83 c4 10             	add    esp,0x10
c00231f7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00231fc:	81 c4 d0 00 00 00    	add    esp,0xd0
c0023202:	89 f0                	mov    eax,esi
c0023204:	5b                   	pop    ebx
c0023205:	5e                   	pop    esi
c0023206:	5f                   	pop    edi
c0023207:	c3                   	ret    

c0023208 <Reg::readBool(char*, char*, bool*)>:
c0023208:	83 ec 20             	sub    esp,0x20
c002320b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002320f:	50                   	push   eax
c0023210:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023214:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023218:	e8 7c fe ff ff       	call   c0023099 <Reg::readInt(char*, char*, int*)>
c002321d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0023221:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0023226:	0f 95 02             	setne  BYTE PTR [edx]
c0023229:	83 c4 2c             	add    esp,0x2c
c002322c:	c3                   	ret    

c002322d <Reg::readBoolWithDefault(char*, char*, bool)>:
c002322d:	53                   	push   ebx
c002322e:	83 ec 1c             	sub    esp,0x1c
c0023231:	8d 44 24 13          	lea    eax,[esp+0x13]
c0023235:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0023239:	50                   	push   eax
c002323a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002323e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023242:	e8 c1 ff ff ff       	call   c0023208 <Reg::readBool(char*, char*, bool*)>
c0023247:	83 c4 10             	add    esp,0x10
c002324a:	84 c0                	test   al,al
c002324c:	74 04                	je     c0023252 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c002324e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0023252:	83 c4 18             	add    esp,0x18
c0023255:	88 d8                	mov    al,bl
c0023257:	5b                   	pop    ebx
c0023258:	c3                   	ret    

c0023259 <Reg::readIntWithDefault(char*, char*, int)>:
c0023259:	53                   	push   ebx
c002325a:	83 ec 1c             	sub    esp,0x1c
c002325d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0023261:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023265:	50                   	push   eax
c0023266:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002326a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002326e:	e8 26 fe ff ff       	call   c0023099 <Reg::readInt(char*, char*, int*)>
c0023273:	83 c4 10             	add    esp,0x10
c0023276:	84 c0                	test   al,al
c0023278:	74 04                	je     c002327e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c002327a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002327e:	83 c4 18             	add    esp,0x18
c0023281:	89 d8                	mov    eax,ebx
c0023283:	5b                   	pop    ebx
c0023284:	c3                   	ret    

c0023285 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0023285:	57                   	push   edi
c0023286:	56                   	push   esi
c0023287:	53                   	push   ebx
c0023288:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002328c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023290:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023294:	56                   	push   esi
c0023295:	57                   	push   edi
c0023296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002329a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002329e:	e8 e4 fe ff ff       	call   c0023187 <Reg::readString(char*, char*, char*, int)>
c00232a3:	83 c4 10             	add    esp,0x10
c00232a6:	84 c0                	test   al,al
c00232a8:	75 16                	jne    c00232c0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00232aa:	50                   	push   eax
c00232ab:	56                   	push   esi
c00232ac:	6a 00                	push   0x0
c00232ae:	57                   	push   edi
c00232af:	e8 3c d2 fd ff       	call   c00004f0 <memset>
c00232b4:	8d 4e ff             	lea    ecx,[esi-0x1]
c00232b7:	89 de                	mov    esi,ebx
c00232b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00232bb:	83 c4 10             	add    esp,0x10
c00232be:	89 df                	mov    edi,ebx
c00232c0:	5b                   	pop    ebx
c00232c1:	89 f8                	mov    eax,edi
c00232c3:	5e                   	pop    esi
c00232c4:	5f                   	pop    edi
c00232c5:	c3                   	ret    

c00232c6 <SysEject(regs*)>:
c00232c6:	83 ec 0c             	sub    esp,0xc
c00232c9:	83 ca ff             	or     edx,0xffffffff
c00232cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00232d3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00232d8:	83 e9 41             	sub    ecx,0x41
c00232db:	83 f9 19             	cmp    ecx,0x19
c00232de:	77 18                	ja     c00232f8 <SysEject(regs*)+0x32>
c00232e0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c00232e7:	85 c9                	test   ecx,ecx
c00232e9:	74 0d                	je     c00232f8 <SysEject(regs*)+0x32>
c00232eb:	83 ec 0c             	sub    esp,0xc
c00232ee:	51                   	push   ecx
c00232ef:	e8 78 96 ff ff       	call   c001c96c <LogicalDisk::eject()>
c00232f4:	83 c4 10             	add    esp,0x10
c00232f7:	99                   	cdq    
c00232f8:	83 c4 0c             	add    esp,0xc
c00232fb:	c3                   	ret    

c00232fc <SysExit(regs*)>:
c00232fc:	83 ec 18             	sub    esp,0x18
c00232ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023303:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023306:	e8 9d 29 00 00       	call   c0025ca8 <terminateTask(int)>
c002330b:	83 c8 ff             	or     eax,0xffffffff
c002330e:	83 c4 1c             	add    esp,0x1c
c0023311:	89 c2                	mov    edx,eax
c0023313:	c3                   	ret    

c0023314 <SysGetCwd(regs*)>:
c0023314:	83 ec 10             	sub    esp,0x10
c0023317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002331b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c002331e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023326:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023329:	e8 d4 70 ff ff       	call   c001a402 <Fs::getcwd(Process*, char*, int)>
c002332e:	83 c4 1c             	add    esp,0x1c
c0023331:	99                   	cdq    
c0023332:	c3                   	ret    

c0023333 <SysGetPID(regs*)>:
c0023333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023338:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002333b:	8b 00                	mov    eax,DWORD PTR [eax]
c002333d:	99                   	cdq    
c002333e:	c3                   	ret    

c002333f <SysGetRAMData(regs*)>:
c002333f:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0023349:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c002334f:	99                   	cdq    
c0023350:	f7 f9                	idiv   ecx
c0023352:	c1 e0 18             	shl    eax,0x18
c0023355:	09 c8                	or     eax,ecx
c0023357:	99                   	cdq    
c0023358:	c3                   	ret    

c0023359 <SysGetVGAPtr(regs*)>:
c0023359:	55                   	push   ebp
c002335a:	57                   	push   edi
c002335b:	56                   	push   esi
c002335c:	53                   	push   ebx
c002335d:	83 ec 18             	sub    esp,0x18
c0023360:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023364:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023367:	e8 08 24 00 00       	call   c0025774 <Thr::processFromPID(int)>
c002336c:	83 c4 10             	add    esp,0x10
c002336f:	89 c1                	mov    ecx,eax
c0023371:	b8 01 00 00 00       	mov    eax,0x1
c0023376:	85 c9                	test   ecx,ecx
c0023378:	74 57                	je     c00233d1 <SysGetVGAPtr(regs*)+0x78>
c002337a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c002337e:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0023384:	74 0c                	je     c0023392 <SysGetVGAPtr(regs*)+0x39>
c0023386:	83 ec 0c             	sub    esp,0xc
c0023389:	55                   	push   ebp
c002338a:	e8 20 40 ff ff       	call   c00173af <setActiveTerminal(VgaText*)>
c002338f:	83 c4 10             	add    esp,0x10
c0023392:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023395:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c002339a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002339d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002339f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00233a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00233a5:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00233ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00233ae:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00233b1:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00233b7:	50                   	push   eax
c00233b8:	50                   	push   eax
c00233b9:	68 d2 2e 03 c0       	push   0xc0032ed2
c00233be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00233c1:	05 a8 0f 00 00       	add    eax,0xfa8
c00233c6:	50                   	push   eax
c00233c7:	e8 84 d2 fd ff       	call   c0000650 <strcpy>
c00233cc:	83 c4 10             	add    esp,0x10
c00233cf:	31 c0                	xor    eax,eax
c00233d1:	83 c4 0c             	add    esp,0xc
c00233d4:	31 d2                	xor    edx,edx
c00233d6:	5b                   	pop    ebx
c00233d7:	5e                   	pop    esi
c00233d8:	5f                   	pop    edi
c00233d9:	5d                   	pop    ebp
c00233da:	c3                   	ret    
c00233db:	90                   	nop

c00233dc <SysKill(regs*)>:
c00233dc:	53                   	push   ebx
c00233dd:	83 ec 08             	sub    esp,0x8
c00233e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00233e4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00233e8:	75 16                	jne    c0023400 <SysKill(regs*)+0x24>
c00233ea:	83 ec 0c             	sub    esp,0xc
c00233ed:	68 dc 2e 03 c0       	push   0xc0032edc
c00233f2:	e8 db d0 ff ff       	call   c00204d2 <KePanic(char const*)>
c00233f7:	83 c4 10             	add    esp,0x10
c00233fa:	e9 89 00 00 00       	jmp    c0023488 <SysKill(regs*)+0xac>
c00233ff:	90                   	nop
c0023400:	83 ec 0c             	sub    esp,0xc
c0023403:	68 ec 01 04 c0       	push   0xc00401ec
c0023408:	e8 6f bb 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002340d:	8d 76 00             	lea    esi,[esi+0x0]
c0023410:	83 c4 10             	add    esp,0x10
c0023413:	85 c0                	test   eax,eax
c0023415:	74 19                	je     c0023430 <SysKill(regs*)+0x54>
c0023417:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002341a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002341d:	39 0a                	cmp    DWORD PTR [edx],ecx
c002341f:	74 33                	je     c0023454 <SysKill(regs*)+0x78>
c0023421:	52                   	push   edx
c0023422:	52                   	push   edx
c0023423:	50                   	push   eax
c0023424:	68 ec 01 04 c0       	push   0xc00401ec
c0023429:	e8 6e be 00 00       	call   c002f29c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002342e:	eb e0                	jmp    c0023410 <SysKill(regs*)+0x34>
c0023430:	83 ec 0c             	sub    esp,0xc
c0023433:	68 e0 01 04 c0       	push   0xc00401e0
c0023438:	e8 3f bb 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002343d:	8d 76 00             	lea    esi,[esi+0x0]
c0023440:	83 c4 10             	add    esp,0x10
c0023443:	85 c0                	test   eax,eax
c0023445:	74 41                	je     c0023488 <SysKill(regs*)+0xac>
c0023447:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002344a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002344d:	39 0a                	cmp    DWORD PTR [edx],ecx
c002344f:	75 27                	jne    c0023478 <SysKill(regs*)+0x9c>
c0023451:	8d 76 00             	lea    esi,[esi+0x0]
c0023454:	51                   	push   ecx
c0023455:	51                   	push   ecx
c0023456:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002345e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023461:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023467:	e8 18 d9 ff ff       	call   c0020d84 <KeRaiseSignal(SigHandlerBlock*, int)>
c002346c:	83 c4 10             	add    esp,0x10
c002346f:	31 c0                	xor    eax,eax
c0023471:	31 d2                	xor    edx,edx
c0023473:	eb 1b                	jmp    c0023490 <SysKill(regs*)+0xb4>
c0023475:	8d 76 00             	lea    esi,[esi+0x0]
c0023478:	52                   	push   edx
c0023479:	52                   	push   edx
c002347a:	50                   	push   eax
c002347b:	68 e0 01 04 c0       	push   0xc00401e0
c0023480:	e8 17 be 00 00       	call   c002f29c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023485:	eb b9                	jmp    c0023440 <SysKill(regs*)+0x64>
c0023487:	90                   	nop
c0023488:	83 c8 ff             	or     eax,0xffffffff
c002348b:	89 c2                	mov    edx,eax
c002348d:	8d 76 00             	lea    esi,[esi+0x0]
c0023490:	83 c4 08             	add    esp,0x8
c0023493:	5b                   	pop    ebx
c0023494:	c3                   	ret    

c0023495 <SysLoadDLL(regs*)>:
c0023495:	56                   	push   esi
c0023496:	31 d2                	xor    edx,edx
c0023498:	53                   	push   ebx
c0023499:	b8 01 00 00 00       	mov    eax,0x1
c002349e:	51                   	push   ecx
c002349f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00234a3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00234a7:	0f 84 8c 00 00 00    	je     c0023539 <SysLoadDLL(regs*)+0xa4>
c00234ad:	83 ec 0c             	sub    esp,0xc
c00234b0:	68 14 01 00 00       	push   0x114
c00234b5:	e8 5a 32 ff ff       	call   c0016714 <malloc>
c00234ba:	83 c4 0c             	add    esp,0xc
c00234bd:	89 c3                	mov    ebx,eax
c00234bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234c4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00234c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00234ca:	53                   	push   ebx
c00234cb:	e8 92 72 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c00234d0:	83 c4 10             	add    esp,0x10
c00234d3:	31 d2                	xor    edx,edx
c00234d5:	85 db                	test   ebx,ebx
c00234d7:	b8 02 00 00 00       	mov    eax,0x2
c00234dc:	74 5b                	je     c0023539 <SysLoadDLL(regs*)+0xa4>
c00234de:	83 ec 0c             	sub    esp,0xc
c00234e1:	53                   	push   ebx
c00234e2:	e8 5d 75 ff ff       	call   c001aa44 <File::exists()>
c00234e7:	83 c4 10             	add    esp,0x10
c00234ea:	84 c0                	test   al,al
c00234ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234ee:	75 11                	jne    c0023501 <SysLoadDLL(regs*)+0x6c>
c00234f0:	83 ec 0c             	sub    esp,0xc
c00234f3:	53                   	push   ebx
c00234f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00234f7:	83 c4 10             	add    esp,0x10
c00234fa:	b8 03 00 00 00       	mov    eax,0x3
c00234ff:	eb 36                	jmp    c0023537 <SysLoadDLL(regs*)+0xa2>
c0023501:	83 ec 0c             	sub    esp,0xc
c0023504:	53                   	push   ebx
c0023505:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023508:	58                   	pop    eax
c0023509:	5a                   	pop    edx
c002350a:	6a 00                	push   0x0
c002350c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002350f:	e8 8f 15 00 00       	call   c0024aa3 <Thr::loadDLL(char const*, bool)>
c0023514:	83 c4 10             	add    esp,0x10
c0023517:	31 d2                	xor    edx,edx
c0023519:	89 c1                	mov    ecx,eax
c002351b:	b8 04 00 00 00       	mov    eax,0x4
c0023520:	85 c9                	test   ecx,ecx
c0023522:	74 15                	je     c0023539 <SysLoadDLL(regs*)+0xa4>
c0023524:	53                   	push   ebx
c0023525:	53                   	push   ebx
c0023526:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002352c:	51                   	push   ecx
c002352d:	e8 d2 17 00 00       	call   c0024d04 <Thr::executeDLL(unsigned long, void*)>
c0023532:	83 c4 10             	add    esp,0x10
c0023535:	31 c0                	xor    eax,eax
c0023537:	31 d2                	xor    edx,edx
c0023539:	59                   	pop    ecx
c002353a:	5b                   	pop    ebx
c002353b:	5e                   	pop    esi
c002353c:	c3                   	ret    

c002353d <SysRead(regs*)>:
c002353d:	57                   	push   edi
c002353e:	56                   	push   esi
c002353f:	53                   	push   ebx
c0023540:	83 ec 10             	sub    esp,0x10
c0023543:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023547:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002354a:	83 f8 02             	cmp    eax,0x2
c002354d:	77 10                	ja     c002355f <SysRead(regs*)+0x22>
c002354f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023554:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023557:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c002355d:	eb 0e                	jmp    c002356d <SysRead(regs*)+0x30>
c002355f:	83 ec 0c             	sub    esp,0xc
c0023562:	50                   	push   eax
c0023563:	e8 73 4b ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c0023568:	83 c4 10             	add    esp,0x10
c002356b:	89 c1                	mov    ecx,eax
c002356d:	83 c8 ff             	or     eax,0xffffffff
c0023570:	85 c9                	test   ecx,ecx
c0023572:	89 c2                	mov    edx,eax
c0023574:	74 28                	je     c002359e <SysRead(regs*)+0x61>
c0023576:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002357e:	83 ec 0c             	sub    esp,0xc
c0023581:	31 ff                	xor    edi,edi
c0023583:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023587:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023589:	52                   	push   edx
c002358a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002358d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023590:	57                   	push   edi
c0023591:	56                   	push   esi
c0023592:	51                   	push   ecx
c0023593:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002359a:	83 c4 20             	add    esp,0x20
c002359d:	99                   	cdq    
c002359e:	83 c4 10             	add    esp,0x10
c00235a1:	5b                   	pop    ebx
c00235a2:	5e                   	pop    esi
c00235a3:	5f                   	pop    edi
c00235a4:	c3                   	ret    

c00235a5 <SysRegisterSignal(regs*)>:
c00235a5:	83 ec 18             	sub    esp,0x18
c00235a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00235ac:	6a 00                	push   0x0
c00235ae:	6a 00                	push   0x0
c00235b0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00235b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00235b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235be:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00235c4:	e8 85 d7 ff ff       	call   c0020d4e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00235c9:	83 c4 2c             	add    esp,0x2c
c00235cc:	99                   	cdq    
c00235cd:	c3                   	ret    

c00235ce <SysRegistryGetTypeFromPath(regs*)>:
c00235ce:	57                   	push   edi
c00235cf:	56                   	push   esi
c00235d0:	53                   	push   ebx
c00235d1:	81 ec 38 01 00 00    	sub    esp,0x138
c00235d7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00235de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00235e1:	68 fd 2e 03 c0       	push   0xc0032efd
c00235e6:	e8 5f 5f ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00235eb:	5a                   	pop    edx
c00235ec:	59                   	pop    ecx
c00235ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00235f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00235f3:	e8 33 f6 ff ff       	call   c0022c2b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00235f8:	5f                   	pop    edi
c00235f9:	5a                   	pop    edx
c00235fa:	89 c6                	mov    esi,eax
c00235fc:	50                   	push   eax
c00235fd:	68 1d 2f 03 c0       	push   0xc0032f1d
c0023602:	e8 43 5f ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0023607:	83 c4 10             	add    esp,0x10
c002360a:	85 f6                	test   esi,esi
c002360c:	74 28                	je     c0023636 <SysRegistryGetTypeFromPath(regs*)+0x68>
c002360e:	50                   	push   eax
c002360f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023613:	57                   	push   edi
c0023614:	56                   	push   esi
c0023615:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023618:	e8 f3 f1 ff ff       	call   c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002361d:	83 c4 0c             	add    esp,0xc
c0023620:	57                   	push   edi
c0023621:	50                   	push   eax
c0023622:	89 c3                	mov    ebx,eax
c0023624:	68 25 2f 03 c0       	push   0xc0032f25
c0023629:	e8 1c 5f ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002362e:	89 d8                	mov    eax,ebx
c0023630:	83 c4 10             	add    esp,0x10
c0023633:	99                   	cdq    
c0023634:	eb 05                	jmp    c002363b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0023636:	83 c8 ff             	or     eax,0xffffffff
c0023639:	89 c2                	mov    edx,eax
c002363b:	81 c4 30 01 00 00    	add    esp,0x130
c0023641:	5b                   	pop    ebx
c0023642:	5e                   	pop    esi
c0023643:	5f                   	pop    edi
c0023644:	c3                   	ret    

c0023645 <SysRegistryReadExtent(regs*)>:
c0023645:	83 ec 1c             	sub    esp,0x1c
c0023648:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002364c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c002364f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0023652:	85 c0                	test   eax,eax
c0023654:	79 1f                	jns    c0023675 <SysRegistryReadExtent(regs*)+0x30>
c0023656:	52                   	push   edx
c0023657:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002365c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023660:	52                   	push   edx
c0023661:	50                   	push   eax
c0023662:	51                   	push   ecx
c0023663:	e8 9a f0 ff ff       	call   c0022702 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0023668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002366c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023670:	83 c4 10             	add    esp,0x10
c0023673:	eb 14                	jmp    c0023689 <SysRegistryReadExtent(regs*)+0x44>
c0023675:	83 ec 04             	sub    esp,0x4
c0023678:	ff 72 24             	push   DWORD PTR [edx+0x24]
c002367b:	50                   	push   eax
c002367c:	51                   	push   ecx
c002367d:	e8 1e eb ff ff       	call   c00221a0 <CmGetString(Reghive_Tag*, int, char*)>
c0023682:	83 c4 10             	add    esp,0x10
c0023685:	31 c0                	xor    eax,eax
c0023687:	31 d2                	xor    edx,edx
c0023689:	83 c4 1c             	add    esp,0x1c
c002368c:	c3                   	ret    

c002368d <SysRegistryPathToExtentLookup(regs*)>:
c002368d:	53                   	push   ebx
c002368e:	83 ec 10             	sub    esp,0x10
c0023691:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023695:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023698:	68 3b 2f 03 c0       	push   0xc0032f3b
c002369d:	e8 a8 5e ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00236a2:	58                   	pop    eax
c00236a3:	5a                   	pop    edx
c00236a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00236a7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236aa:	e8 7c f5 ff ff       	call   c0022c2b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00236af:	83 c4 18             	add    esp,0x18
c00236b2:	5b                   	pop    ebx
c00236b3:	99                   	cdq    
c00236b4:	c3                   	ret    

c00236b5 <SysRegistryEnterDirectory(regs*)>:
c00236b5:	53                   	push   ebx
c00236b6:	83 ec 10             	sub    esp,0x10
c00236b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00236bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236c0:	68 5e 2f 03 c0       	push   0xc0032f5e
c00236c5:	e8 80 5e ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00236ca:	58                   	pop    eax
c00236cb:	5a                   	pop    edx
c00236cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236cf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236d2:	e8 40 eb ff ff       	call   c0022217 <CmEnterDirectory(Reghive_Tag*, int)>
c00236d7:	83 c4 18             	add    esp,0x18
c00236da:	5b                   	pop    ebx
c00236db:	99                   	cdq    
c00236dc:	c3                   	ret    

c00236dd <SysRegistryGetNext(regs*)>:
c00236dd:	53                   	push   ebx
c00236de:	83 ec 10             	sub    esp,0x10
c00236e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00236e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236e8:	68 7c 2f 03 c0       	push   0xc0032f7c
c00236ed:	e8 58 5e ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00236f2:	58                   	pop    eax
c00236f3:	5a                   	pop    edx
c00236f4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236f7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236fa:	e8 57 eb ff ff       	call   c0022256 <CmGetNext(Reghive_Tag*, int)>
c00236ff:	83 c4 18             	add    esp,0x18
c0023702:	5b                   	pop    ebx
c0023703:	99                   	cdq    
c0023704:	c3                   	ret    

c0023705 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023705:	57                   	push   edi
c0023706:	56                   	push   esi
c0023707:	53                   	push   ebx
c0023708:	81 ec 34 01 00 00    	sub    esp,0x134
c002370e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023715:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023719:	57                   	push   edi
c002371a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c002371d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023720:	e8 eb f0 ff ff       	call   c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023725:	89 c3                	mov    ebx,eax
c0023727:	58                   	pop    eax
c0023728:	5a                   	pop    edx
c0023729:	57                   	push   edi
c002372a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c002372d:	e8 1e cf fd ff       	call   c0000650 <strcpy>
c0023732:	81 c4 40 01 00 00    	add    esp,0x140
c0023738:	89 d8                	mov    eax,ebx
c002373a:	5b                   	pop    ebx
c002373b:	99                   	cdq    
c002373c:	5e                   	pop    esi
c002373d:	5f                   	pop    edi
c002373e:	c3                   	ret    

c002373f <SysRegistryOpen(regs*)>:
c002373f:	83 ec 18             	sub    esp,0x18
c0023742:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023746:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023749:	e8 e2 e8 ff ff       	call   c0022030 <CmOpen(char const*)>
c002374e:	83 c4 1c             	add    esp,0x1c
c0023751:	99                   	cdq    
c0023752:	c3                   	ret    

c0023753 <SysRegistryClose(regs*)>:
c0023753:	83 ec 18             	sub    esp,0x18
c0023756:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002375a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002375d:	e8 ec e9 ff ff       	call   c002214e <CmClose(Reghive_Tag*)>
c0023762:	31 c0                	xor    eax,eax
c0023764:	31 d2                	xor    edx,edx
c0023766:	83 c4 1c             	add    esp,0x1c
c0023769:	c3                   	ret    

c002376a <SysSbrk(regs*)>:
c002376a:	56                   	push   esi
c002376b:	53                   	push   ebx
c002376c:	50                   	push   eax
c002376d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023772:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023776:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023779:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c002377c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0023782:	85 db                	test   ebx,ebx
c0023784:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0023787:	74 02                	je     c002378b <SysSbrk(regs*)+0x21>
c0023789:	79 06                	jns    c0023791 <SysSbrk(regs*)+0x27>
c002378b:	89 f0                	mov    eax,esi
c002378d:	31 d2                	xor    edx,edx
c002378f:	eb 2a                	jmp    c00237bb <SysSbrk(regs*)+0x51>
c0023791:	83 c8 ff             	or     eax,0xffffffff
c0023794:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c002379a:	89 c2                	mov    edx,eax
c002379c:	77 1d                	ja     c00237bb <SysSbrk(regs*)+0x51>
c002379e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00237a4:	50                   	push   eax
c00237a5:	68 07 0c 00 00       	push   0xc07
c00237aa:	c1 ea 0c             	shr    edx,0xc
c00237ad:	52                   	push   edx
c00237ae:	51                   	push   ecx
c00237af:	e8 92 52 ff ff       	call   c0018a46 <VAS::allocatePages(int, int)>
c00237b4:	89 f0                	mov    eax,esi
c00237b6:	31 d2                	xor    edx,edx
c00237b8:	83 c4 10             	add    esp,0x10
c00237bb:	59                   	pop    ecx
c00237bc:	5b                   	pop    ebx
c00237bd:	5e                   	pop    esi
c00237be:	c3                   	ret    

c00237bf <SysSetCwd(regs*)>:
c00237bf:	83 ec 14             	sub    esp,0x14
c00237c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00237c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00237c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237ce:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00237d1:	e8 0d 73 ff ff       	call   c001aae3 <Fs::setcwd(Process*, char*)>
c00237d6:	83 c4 1c             	add    esp,0x1c
c00237d9:	99                   	cdq    
c00237da:	c3                   	ret    

c00237db <SysSetTime(regs*)>:
c00237db:	55                   	push   ebp
c00237dc:	31 c9                	xor    ecx,ecx
c00237de:	57                   	push   edi
c00237df:	bd 0c 00 00 00       	mov    ebp,0xc
c00237e4:	56                   	push   esi
c00237e5:	53                   	push   ebx
c00237e6:	31 db                	xor    ebx,ebx
c00237e8:	83 ec 10             	sub    esp,0x10
c00237eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00237ef:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00237f2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00237f5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00237f8:	89 c2                	mov    edx,eax
c00237fa:	c1 e8 05             	shr    eax,0x5
c00237fd:	83 e2 1f             	and    edx,0x1f
c0023800:	42                   	inc    edx
c0023801:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023807:	c1 e7 10             	shl    edi,0x10
c002380a:	88 d1                	mov    cl,dl
c002380c:	31 d2                	xor    edx,edx
c002380e:	f7 f5                	div    ebp
c0023810:	89 dd                	mov    ebp,ebx
c0023812:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023818:	88 d5                	mov    ch,dl
c002381a:	31 d2                	xor    edx,edx
c002381c:	0f b7 c1             	movzx  eax,cx
c002381f:	09 f8                	or     eax,edi
c0023821:	bf 3c 00 00 00       	mov    edi,0x3c
c0023826:	89 c1                	mov    ecx,eax
c0023828:	89 f0                	mov    eax,esi
c002382a:	f7 f7                	div    edi
c002382c:	c1 e2 10             	shl    edx,0x10
c002382f:	09 d5                	or     ebp,edx
c0023831:	31 d2                	xor    edx,edx
c0023833:	f7 f7                	div    edi
c0023835:	89 eb                	mov    ebx,ebp
c0023837:	bf 10 0e 00 00       	mov    edi,0xe10
c002383c:	89 f0                	mov    eax,esi
c002383e:	88 d7                	mov    bh,dl
c0023840:	31 d2                	xor    edx,edx
c0023842:	f7 f7                	div    edi
c0023844:	bf 18 00 00 00       	mov    edi,0x18
c0023849:	31 d2                	xor    edx,edx
c002384b:	f7 f7                	div    edi
c002384d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0023852:	88 d3                	mov    bl,dl
c0023854:	53                   	push   ebx
c0023855:	51                   	push   ecx
c0023856:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c002385c:	e8 93 7a ff ff       	call   c001b2f4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0023861:	83 c4 1c             	add    esp,0x1c
c0023864:	31 d2                	xor    edx,edx
c0023866:	5b                   	pop    ebx
c0023867:	5e                   	pop    esi
c0023868:	83 f0 01             	xor    eax,0x1
c002386b:	5f                   	pop    edi
c002386c:	0f b6 c0             	movzx  eax,al
c002386f:	5d                   	pop    ebp
c0023870:	c3                   	ret    

c0023871 <SysSymlink(regs*)>:
c0023871:	56                   	push   esi
c0023872:	83 c8 ff             	or     eax,0xffffffff
c0023875:	53                   	push   ebx
c0023876:	89 c2                	mov    edx,eax
c0023878:	81 ec 34 02 00 00    	sub    esp,0x234
c002387e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0023885:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023889:	74 50                	je     c00238db <SysSymlink(regs*)+0x6a>
c002388b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c002388e:	85 c9                	test   ecx,ecx
c0023890:	74 49                	je     c00238db <SysSymlink(regs*)+0x6a>
c0023892:	6a 01                	push   0x1
c0023894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023899:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002389c:	05 0c 01 00 00       	add    eax,0x10c
c00238a1:	50                   	push   eax
c00238a2:	51                   	push   ecx
c00238a3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00238a7:	56                   	push   esi
c00238a8:	e8 a9 6b ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00238ad:	6a 01                	push   0x1
c00238af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238b7:	05 0c 01 00 00       	add    eax,0x10c
c00238bc:	50                   	push   eax
c00238bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00238c0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00238c7:	53                   	push   ebx
c00238c8:	e8 89 6b ff ff       	call   c001a456 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00238cd:	83 c4 18             	add    esp,0x18
c00238d0:	56                   	push   esi
c00238d1:	53                   	push   ebx
c00238d2:	e8 8e 67 ff ff       	call   c001a065 <KeCreateSymlink(char const*, char const*)>
c00238d7:	83 c4 10             	add    esp,0x10
c00238da:	99                   	cdq    
c00238db:	81 c4 34 02 00 00    	add    esp,0x234
c00238e1:	5b                   	pop    ebx
c00238e2:	5e                   	pop    esi
c00238e3:	c3                   	ret    

c00238e4 <SysTimezone(regs*)>:
c00238e4:	53                   	push   ebx
c00238e5:	83 ec 08             	sub    esp,0x8
c00238e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00238ec:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00238f0:	75 17                	jne    c0023909 <SysTimezone(regs*)+0x25>
c00238f2:	83 ec 0c             	sub    esp,0xc
c00238f5:	68 93 2f 03 c0       	push   0xc0032f93
c00238fa:	e8 4b 5c ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00238ff:	83 c8 ff             	or     eax,0xffffffff
c0023902:	83 c4 10             	add    esp,0x10
c0023905:	89 c2                	mov    edx,eax
c0023907:	eb 20                	jmp    c0023929 <SysTimezone(regs*)+0x45>
c0023909:	83 ec 0c             	sub    esp,0xc
c002390c:	68 a8 2f 03 c0       	push   0xc0032fa8
c0023911:	e8 34 5c ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0023916:	58                   	pop    eax
c0023917:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002391a:	e8 39 77 ff ff       	call   c001b058 <User::loadClockSettings(int)>
c002391f:	83 c4 10             	add    esp,0x10
c0023922:	b8 01 00 00 00       	mov    eax,0x1
c0023927:	31 d2                	xor    edx,edx
c0023929:	83 c4 08             	add    esp,0x8
c002392c:	5b                   	pop    ebx
c002392d:	c3                   	ret    

c002392e <SysTruncate(regs*)>:
c002392e:	55                   	push   ebp
c002392f:	57                   	push   edi
c0023930:	31 ff                	xor    edi,edi
c0023932:	56                   	push   esi
c0023933:	53                   	push   ebx
c0023934:	83 ec 0c             	sub    esp,0xc
c0023937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002393b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002393e:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023942:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023945:	89 ce                	mov    esi,ecx
c0023947:	0f 84 9a 00 00 00    	je     c00239e7 <SysTruncate(regs*)+0xb9>
c002394d:	83 ec 0c             	sub    esp,0xc
c0023950:	68 14 01 00 00       	push   0x114
c0023955:	e8 ba 2d ff ff       	call   c0016714 <malloc>
c002395a:	83 c4 0c             	add    esp,0xc
c002395d:	89 c3                	mov    ebx,eax
c002395f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023964:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023967:	55                   	push   ebp
c0023968:	53                   	push   ebx
c0023969:	e8 f4 6d ff ff       	call   c001a762 <File::File(char const*, Process*)>
c002396e:	83 c4 10             	add    esp,0x10
c0023971:	31 d2                	xor    edx,edx
c0023973:	85 db                	test   ebx,ebx
c0023975:	b8 03 00 00 00       	mov    eax,0x3
c002397a:	0f 84 a2 00 00 00    	je     c0023a22 <SysTruncate(regs*)+0xf4>
c0023980:	51                   	push   ecx
c0023981:	51                   	push   ecx
c0023982:	6a 02                	push   0x2
c0023984:	53                   	push   ebx
c0023985:	e8 f6 6d ff ff       	call   c001a780 <File::open(FileOpenMode)>
c002398a:	83 c4 10             	add    esp,0x10
c002398d:	85 c0                	test   eax,eax
c002398f:	74 13                	je     c00239a4 <SysTruncate(regs*)+0x76>
c0023991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023993:	83 ec 0c             	sub    esp,0xc
c0023996:	53                   	push   ebx
c0023997:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002399a:	83 c4 10             	add    esp,0x10
c002399d:	b8 04 00 00 00       	mov    eax,0x4
c00239a2:	eb 7c                	jmp    c0023a20 <SysTruncate(regs*)+0xf2>
c00239a4:	52                   	push   edx
c00239a5:	57                   	push   edi
c00239a6:	56                   	push   esi
c00239a7:	53                   	push   ebx
c00239a8:	e8 e7 6e ff ff       	call   c001a894 <File::truncate(unsigned long long)>
c00239ad:	83 c4 10             	add    esp,0x10
c00239b0:	85 c0                	test   eax,eax
c00239b2:	74 1b                	je     c00239cf <SysTruncate(regs*)+0xa1>
c00239b4:	83 ec 0c             	sub    esp,0xc
c00239b7:	53                   	push   ebx
c00239b8:	e8 21 6e ff ff       	call   c001a7de <File::close()>
c00239bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00239c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239c5:	83 c4 10             	add    esp,0x10
c00239c8:	b8 05 00 00 00       	mov    eax,0x5
c00239cd:	eb 51                	jmp    c0023a20 <SysTruncate(regs*)+0xf2>
c00239cf:	83 ec 0c             	sub    esp,0xc
c00239d2:	53                   	push   ebx
c00239d3:	e8 06 6e ff ff       	call   c001a7de <File::close()>
c00239d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00239dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239e0:	83 c4 10             	add    esp,0x10
c00239e3:	31 c0                	xor    eax,eax
c00239e5:	eb 39                	jmp    c0023a20 <SysTruncate(regs*)+0xf2>
c00239e7:	31 d2                	xor    edx,edx
c00239e9:	83 fd 02             	cmp    ebp,0x2
c00239ec:	b8 01 00 00 00       	mov    eax,0x1
c00239f1:	7e 2f                	jle    c0023a22 <SysTruncate(regs*)+0xf4>
c00239f3:	83 ec 0c             	sub    esp,0xc
c00239f6:	51                   	push   ecx
c00239f7:	e8 df 46 ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c00239fc:	83 c4 10             	add    esp,0x10
c00239ff:	31 d2                	xor    edx,edx
c0023a01:	89 c1                	mov    ecx,eax
c0023a03:	b8 02 00 00 00       	mov    eax,0x2
c0023a08:	85 c9                	test   ecx,ecx
c0023a0a:	74 16                	je     c0023a22 <SysTruncate(regs*)+0xf4>
c0023a0c:	50                   	push   eax
c0023a0d:	57                   	push   edi
c0023a0e:	56                   	push   esi
c0023a0f:	51                   	push   ecx
c0023a10:	e8 7f 6e ff ff       	call   c001a894 <File::truncate(unsigned long long)>
c0023a15:	83 c4 10             	add    esp,0x10
c0023a18:	85 c0                	test   eax,eax
c0023a1a:	0f 95 c0             	setne  al
c0023a1d:	0f b6 c0             	movzx  eax,al
c0023a20:	31 d2                	xor    edx,edx
c0023a22:	83 c4 0c             	add    esp,0xc
c0023a25:	5b                   	pop    ebx
c0023a26:	5e                   	pop    esi
c0023a27:	5f                   	pop    edi
c0023a28:	5d                   	pop    ebp
c0023a29:	c3                   	ret    

c0023a2a <SysWrite(regs*)>:
c0023a2a:	57                   	push   edi
c0023a2b:	56                   	push   esi
c0023a2c:	53                   	push   ebx
c0023a2d:	83 ec 10             	sub    esp,0x10
c0023a30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023a34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023a37:	83 f8 02             	cmp    eax,0x2
c0023a3a:	77 10                	ja     c0023a4c <SysWrite(regs*)+0x22>
c0023a3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a44:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023a4a:	eb 0e                	jmp    c0023a5a <SysWrite(regs*)+0x30>
c0023a4c:	83 ec 0c             	sub    esp,0xc
c0023a4f:	50                   	push   eax
c0023a50:	e8 86 46 ff ff       	call   c00180db <KeGetFileFromDescriptor(int)>
c0023a55:	83 c4 10             	add    esp,0x10
c0023a58:	89 c1                	mov    ecx,eax
c0023a5a:	83 c8 ff             	or     eax,0xffffffff
c0023a5d:	85 c9                	test   ecx,ecx
c0023a5f:	89 c2                	mov    edx,eax
c0023a61:	74 28                	je     c0023a8b <SysWrite(regs*)+0x61>
c0023a63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023a6b:	83 ec 0c             	sub    esp,0xc
c0023a6e:	31 ff                	xor    edi,edi
c0023a70:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023a74:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023a76:	52                   	push   edx
c0023a77:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023a7a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023a7d:	57                   	push   edi
c0023a7e:	56                   	push   esi
c0023a7f:	51                   	push   ecx
c0023a80:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023a83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023a87:	83 c4 20             	add    esp,0x20
c0023a8a:	99                   	cdq    
c0023a8b:	83 c4 10             	add    esp,0x10
c0023a8e:	5b                   	pop    ebx
c0023a8f:	5e                   	pop    esi
c0023a90:	5f                   	pop    edi
c0023a91:	c3                   	ret    

c0023a92 <SysWsbe(regs*)>:
c0023a92:	57                   	push   edi
c0023a93:	b9 0b 00 00 00       	mov    ecx,0xb
c0023a98:	56                   	push   esi
c0023a99:	be e7 2f 03 c0       	mov    esi,0xc0032fe7
c0023a9e:	53                   	push   ebx
c0023a9f:	83 ec 30             	sub    esp,0x30
c0023aa2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023aa6:	fc                   	cld    
c0023aa7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023aa9:	83 ec 0c             	sub    esp,0xc
c0023aac:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ab5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023ab8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023abe:	8b 06                	mov    eax,DWORD PTR [esi]
c0023ac0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023ac3:	57                   	push   edi
c0023ac4:	e8 b7 ca fd ff       	call   c0000580 <strlen>
c0023ac9:	5a                   	pop    edx
c0023aca:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023ace:	52                   	push   edx
c0023acf:	31 d2                	xor    edx,edx
c0023ad1:	57                   	push   edi
c0023ad2:	52                   	push   edx
c0023ad3:	50                   	push   eax
c0023ad4:	56                   	push   esi
c0023ad5:	ff d3                	call   ebx
c0023ad7:	83 c4 14             	add    esp,0x14
c0023ada:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023ade:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023ae1:	e8 c2 21 00 00       	call   c0025ca8 <terminateTask(int)>
c0023ae6:	83 c4 40             	add    esp,0x40
c0023ae9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023aee:	5b                   	pop    ebx
c0023aef:	31 d2                	xor    edx,edx
c0023af1:	5e                   	pop    esi
c0023af2:	5f                   	pop    edi
c0023af3:	c3                   	ret    

c0023af4 <SysYield(regs*)>:
c0023af4:	83 ec 0c             	sub    esp,0xc
c0023af7:	fa                   	cli    
c0023af8:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023afe:	e8 31 1a 00 00       	call   c0025534 <schedule()>
c0023b03:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023b08:	48                   	dec    eax
c0023b09:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023b0e:	75 01                	jne    c0023b11 <SysYield(regs*)+0x1d>
c0023b10:	fb                   	sti    
c0023b11:	31 c0                	xor    eax,eax
c0023b13:	31 d2                	xor    edx,edx
c0023b15:	83 c4 0c             	add    esp,0xc
c0023b18:	c3                   	ret    

c0023b19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023b19:	55                   	push   ebp
c0023b1a:	57                   	push   edi
c0023b1b:	56                   	push   esi
c0023b1c:	53                   	push   ebx
c0023b1d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023b23:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023b2e:	74 3b                	je     c0023b6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023b30:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023b38:	74 31                	je     c0023b6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023b3a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023b42:	75 27                	jne    c0023b6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023b44:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023b4b:	05 00 10 00 00       	add    eax,0x1000
c0023b50:	89 c2                	mov    edx,eax
c0023b52:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023b57:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023b5e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0023b64:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0023b6b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023b72:	83 ec 0c             	sub    esp,0xc
c0023b75:	6a 01                	push   0x1
c0023b77:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023b7d:	e8 b3 46 ff ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c0023b82:	83 c4 10             	add    esp,0x10
c0023b85:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023b8b:	89 c3                	mov    ebx,eax
c0023b8d:	0f 86 26 01 00 00    	jbe    c0023cb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0023b93:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b9b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023ba2:	c1 ee 0c             	shr    esi,0xc
c0023ba5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023ba9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023bb0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023bb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023bbb:	29 ef                	sub    edi,ebp
c0023bbd:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023bc1:	0f 83 f9 00 00 00    	jae    c0023cc0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023bc7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023bcd:	b8 00 10 00 00       	mov    eax,0x1000
c0023bd2:	0f 47 f8             	cmova  edi,eax
c0023bd5:	83 ec 0c             	sub    esp,0xc
c0023bd8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023bdf:	31 d2                	xor    edx,edx
c0023be1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023be3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023be7:	50                   	push   eax
c0023be8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023bec:	56                   	push   esi
c0023bed:	52                   	push   edx
c0023bee:	57                   	push   edi
c0023bef:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023bf6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023bf9:	83 c4 20             	add    esp,0x20
c0023bfc:	85 c0                	test   eax,eax
c0023bfe:	75 06                	jne    c0023c06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023c00:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023c04:	74 13                	je     c0023c19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0023c06:	83 ec 0c             	sub    esp,0xc
c0023c09:	53                   	push   ebx
c0023c0a:	e8 3a 49 ff ff       	call   c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c0023c0f:	83 c4 10             	add    esp,0x10
c0023c12:	31 c0                	xor    eax,eax
c0023c14:	e9 7c 01 00 00       	jmp    c0023d95 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0023c19:	fa                   	cli    
c0023c1a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023c20:	e8 fe 2d ff ff       	call   c0016a23 <Phys::allocatePage()>
c0023c25:	6a 07                	push   0x7
c0023c27:	53                   	push   ebx
c0023c28:	50                   	push   eax
c0023c29:	89 c7                	mov    edi,eax
c0023c2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c33:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c39:	e8 00 4d ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c0023c3e:	83 c4 0c             	add    esp,0xc
c0023c41:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023c48:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c4e:	6a 00                	push   0x0
c0023c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c58:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c5e:	e8 41 4b ff ff       	call   c00187a4 <VAS::mapOtherVASIn(bool, VAS*)>
c0023c63:	58                   	pop    eax
c0023c64:	5a                   	pop    edx
c0023c65:	68 07 0c 00 00       	push   0xc07
c0023c6a:	55                   	push   ebp
c0023c6b:	57                   	push   edi
c0023c6c:	89 df                	mov    edi,ebx
c0023c6e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023c75:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c7b:	6a 00                	push   0x0
c0023c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c85:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c8b:	e8 12 4f ff ff       	call   c0018ba2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023c90:	b9 00 10 00 00       	mov    ecx,0x1000
c0023c95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023c97:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023c9c:	83 c4 20             	add    esp,0x20
c0023c9f:	48                   	dec    eax
c0023ca0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023ca5:	85 c0                	test   eax,eax
c0023ca7:	75 01                	jne    c0023caa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0023ca9:	fb                   	sti    
c0023caa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023cae:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023cb4:	e9 f0 fe ff ff       	jmp    c0023ba9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0023cb9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023cc0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023cc7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023ccd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023cd3:	0f 86 ae 00 00 00    	jbe    c0023d87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023cd9:	fa                   	cli    
c0023cda:	51                   	push   ecx
c0023cdb:	31 ff                	xor    edi,edi
c0023cdd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023ce4:	c1 ee 0c             	shr    esi,0xc
c0023ce7:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023ced:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023cf3:	6a 00                	push   0x0
c0023cf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023cfa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cfd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d03:	e8 9c 4a ff ff       	call   c00187a4 <VAS::mapOtherVASIn(bool, VAS*)>
c0023d08:	83 c4 10             	add    esp,0x10
c0023d0b:	e8 13 2d ff ff       	call   c0016a23 <Phys::allocatePage()>
c0023d10:	47                   	inc    edi
c0023d11:	6a 07                	push   0x7
c0023d13:	53                   	push   ebx
c0023d14:	50                   	push   eax
c0023d15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023d19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023d1f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023d22:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023d28:	e8 11 4c ff ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c0023d2d:	58                   	pop    eax
c0023d2e:	5a                   	pop    edx
c0023d2f:	68 07 0c 00 00       	push   0xc07
c0023d34:	55                   	push   ebp
c0023d35:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023d3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d3f:	50                   	push   eax
c0023d40:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023d47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d4d:	6a 00                	push   0x0
c0023d4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023d54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023d57:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d5d:	e8 40 4e ff ff       	call   c0018ba2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023d62:	83 c4 1c             	add    esp,0x1c
c0023d65:	68 00 10 00 00       	push   0x1000
c0023d6a:	6a 00                	push   0x0
c0023d6c:	53                   	push   ebx
c0023d6d:	e8 7e c7 fd ff       	call   c00004f0 <memset>
c0023d72:	83 c4 10             	add    esp,0x10
c0023d75:	39 fe                	cmp    esi,edi
c0023d77:	77 92                	ja     c0023d0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0023d79:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023d7e:	48                   	dec    eax
c0023d7f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023d84:	75 01                	jne    c0023d87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023d86:	fb                   	sti    
c0023d87:	83 ec 0c             	sub    esp,0xc
c0023d8a:	53                   	push   ebx
c0023d8b:	e8 b9 47 ff ff       	call   c0018549 <Virt::freeKernelVirtualPages(unsigned long)>
c0023d90:	83 c4 10             	add    esp,0x10
c0023d93:	b0 01                	mov    al,0x1
c0023d95:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023d9b:	5b                   	pop    ebx
c0023d9c:	5e                   	pop    esi
c0023d9d:	5f                   	pop    edi
c0023d9e:	5d                   	pop    ebp
c0023d9f:	c3                   	ret    

c0023da0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023da0:	55                   	push   ebp
c0023da1:	57                   	push   edi
c0023da2:	56                   	push   esi
c0023da3:	53                   	push   ebx
c0023da4:	83 ec 48             	sub    esp,0x48
c0023da7:	68 14 01 00 00       	push   0x114
c0023dac:	e8 63 29 ff ff       	call   c0016714 <malloc>
c0023db1:	83 c4 0c             	add    esp,0xc
c0023db4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023db8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023dbc:	89 c7                	mov    edi,eax
c0023dbe:	50                   	push   eax
c0023dbf:	e8 9e 69 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0023dc4:	58                   	pop    eax
c0023dc5:	5a                   	pop    edx
c0023dc6:	6a 01                	push   0x1
c0023dc8:	57                   	push   edi
c0023dc9:	e8 b2 69 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c0023dce:	83 c4 10             	add    esp,0x10
c0023dd1:	85 c0                	test   eax,eax
c0023dd3:	0f 85 4c 01 00 00    	jne    c0023f25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023dd9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023de1:	83 ec 0c             	sub    esp,0xc
c0023de4:	6a 34                	push   0x34
c0023de6:	e8 29 29 ff ff       	call   c0016714 <malloc>
c0023deb:	89 c3                	mov    ebx,eax
c0023ded:	58                   	pop    eax
c0023dee:	8b 07                	mov    eax,DWORD PTR [edi]
c0023df0:	8d 74 24 38          	lea    esi,[esp+0x38]
c0023df4:	56                   	push   esi
c0023df5:	53                   	push   ebx
c0023df6:	6a 00                	push   0x0
c0023df8:	6a 34                	push   0x34
c0023dfa:	57                   	push   edi
c0023dfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023dfe:	83 c4 20             	add    esp,0x20
c0023e01:	85 c0                	test   eax,eax
c0023e03:	0f 85 1c 01 00 00    	jne    c0023f25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023e09:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023e0f:	0f 85 10 01 00 00    	jne    c0023f25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023e15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023e18:	85 c0                	test   eax,eax
c0023e1a:	0f 84 05 01 00 00    	je     c0023f25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023e20:	31 d2                	xor    edx,edx
c0023e22:	55                   	push   ebp
c0023e23:	52                   	push   edx
c0023e24:	50                   	push   eax
c0023e25:	57                   	push   edi
c0023e26:	e8 13 6a ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0023e2b:	83 c4 10             	add    esp,0x10
c0023e2e:	85 c0                	test   eax,eax
c0023e30:	0f 85 ef 00 00 00    	jne    c0023f25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023e36:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023e39:	83 ec 0c             	sub    esp,0xc
c0023e3c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023e40:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023e44:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023e48:	0f af c2             	imul   eax,edx
c0023e4b:	50                   	push   eax
c0023e4c:	e8 c3 28 ff ff       	call   c0016714 <malloc>
c0023e51:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023e53:	89 34 24             	mov    DWORD PTR [esp],esi
c0023e56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023e5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023e5e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023e62:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023e66:	0f af c2             	imul   eax,edx
c0023e69:	99                   	cdq    
c0023e6a:	52                   	push   edx
c0023e6b:	50                   	push   eax
c0023e6c:	57                   	push   edi
c0023e6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e70:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023e73:	83 c4 20             	add    esp,0x20
c0023e76:	85 c0                	test   eax,eax
c0023e78:	0f 84 a7 00 00 00    	je     c0023f25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023e7e:	31 d2                	xor    edx,edx
c0023e80:	51                   	push   ecx
c0023e81:	52                   	push   edx
c0023e82:	50                   	push   eax
c0023e83:	57                   	push   edi
c0023e84:	e8 b5 69 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0023e89:	83 c4 10             	add    esp,0x10
c0023e8c:	85 c0                	test   eax,eax
c0023e8e:	0f 85 91 00 00 00    	jne    c0023f25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023e94:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023e98:	83 ec 0c             	sub    esp,0xc
c0023e9b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023e9f:	0f af c2             	imul   eax,edx
c0023ea2:	50                   	push   eax
c0023ea3:	e8 6c 28 ff ff       	call   c0016714 <malloc>
c0023ea8:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023eaa:	89 34 24             	mov    DWORD PTR [esp],esi
c0023ead:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023eb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023eb5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023eb9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023ebd:	0f af c2             	imul   eax,edx
c0023ec0:	99                   	cdq    
c0023ec1:	52                   	push   edx
c0023ec2:	50                   	push   eax
c0023ec3:	57                   	push   edi
c0023ec4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ec7:	83 c4 20             	add    esp,0x20
c0023eca:	31 c9                	xor    ecx,ecx
c0023ecc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023ed4:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0023ed8:	0f b7 e9             	movzx  ebp,cx
c0023edb:	0f 83 86 00 00 00    	jae    c0023f67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0023ee1:	c1 e5 05             	shl    ebp,0x5
c0023ee4:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0023ee8:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0023eec:	75 73                	jne    c0023f61 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0023eee:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023ef5:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0023ef8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023efc:	52                   	push   edx
c0023efd:	31 d2                	xor    edx,edx
c0023eff:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0023f02:	52                   	push   edx
c0023f03:	50                   	push   eax
c0023f04:	57                   	push   edi
c0023f05:	e8 34 69 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0023f0a:	83 c4 10             	add    esp,0x10
c0023f0d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f11:	85 c0                	test   eax,eax
c0023f13:	74 17                	je     c0023f2c <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0023f15:	83 ec 0c             	sub    esp,0xc
c0023f18:	68 13 30 03 c0       	push   0xc0033013
c0023f1d:	e8 28 56 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0023f22:	83 c4 10             	add    esp,0x10
c0023f25:	31 c0                	xor    eax,eax
c0023f27:	e9 8b 00 00 00       	jmp    c0023fb7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0023f2c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023f30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023f33:	83 ec 0c             	sub    esp,0xc
c0023f36:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0023f39:	50                   	push   eax
c0023f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023f3e:	56                   	push   esi
c0023f3f:	57                   	push   edi
c0023f40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023f44:	e8 d0 fb ff ff       	call   c0023b19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023f49:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0023f4d:	83 c4 20             	add    esp,0x20
c0023f50:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0023f54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f58:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0023f5d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0023f61:	41                   	inc    ecx
c0023f62:	e9 6d ff ff ff       	jmp    c0023ed4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023f67:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0023f6b:	83 ec 0c             	sub    esp,0xc
c0023f6e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023f72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f76:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0023f7c:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0023f82:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023f87:	05 00 10 00 00       	add    eax,0x1000
c0023f8c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023f8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f93:	e8 8c 27 ff ff       	call   c0016724 <free>
c0023f98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f9b:	e8 84 27 ff ff       	call   c0016724 <free>
c0023fa0:	58                   	pop    eax
c0023fa1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023fa5:	e8 7a 27 ff ff       	call   c0016724 <free>
c0023faa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023fad:	e8 2c 68 ff ff       	call   c001a7de <File::close()>
c0023fb2:	83 c4 10             	add    esp,0x10
c0023fb5:	b0 01                	mov    al,0x1
c0023fb7:	83 c4 3c             	add    esp,0x3c
c0023fba:	5b                   	pop    ebx
c0023fbb:	5e                   	pop    esi
c0023fbc:	5f                   	pop    edi
c0023fbd:	5d                   	pop    ebp
c0023fbe:	c3                   	ret    

c0023fbf <Thr::runtimeReferenceHelper()>:
c0023fbf:	83 ec 18             	sub    esp,0x18
c0023fc2:	68 1b 30 03 c0       	push   0xc003301b
c0023fc7:	e8 7e 55 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0023fcc:	fa                   	cli    
c0023fcd:	83 c4 10             	add    esp,0x10
c0023fd0:	eb fe                	jmp    c0023fd0 <Thr::runtimeReferenceHelper()+0x11>

c0023fd2 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023fd2:	57                   	push   edi
c0023fd3:	56                   	push   esi
c0023fd4:	53                   	push   ebx
c0023fd5:	31 db                	xor    ebx,ebx
c0023fd7:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023fdd:	7e 3c                	jle    c002401b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023fdf:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023fe6:	31 ff                	xor    edi,edi
c0023fe8:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023fef:	7e 27                	jle    c0024018 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023ff1:	50                   	push   eax
c0023ff2:	50                   	push   eax
c0023ff3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023ff7:	8b 06                	mov    eax,DWORD PTR [esi]
c0023ff9:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0024000:	50                   	push   eax
c0024001:	e8 7a c7 fd ff       	call   c0000780 <strcmp>
c0024006:	83 c4 10             	add    esp,0x10
c0024009:	85 c0                	test   eax,eax
c002400b:	75 05                	jne    c0024012 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c002400d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0024010:	eb 0b                	jmp    c002401d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0024012:	83 c6 10             	add    esi,0x10
c0024015:	47                   	inc    edi
c0024016:	eb d0                	jmp    c0023fe8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0024018:	43                   	inc    ebx
c0024019:	eb bc                	jmp    c0023fd7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c002401b:	31 c0                	xor    eax,eax
c002401d:	5b                   	pop    ebx
c002401e:	5e                   	pop    esi
c002401f:	5f                   	pop    edi
c0024020:	c3                   	ret    

c0024021 <Thr::loadKernelSymbolTable(char const*)>:
c0024021:	55                   	push   ebp
c0024022:	57                   	push   edi
c0024023:	56                   	push   esi
c0024024:	53                   	push   ebx
c0024025:	83 ec 68             	sub    esp,0x68
c0024028:	68 14 01 00 00       	push   0x114
c002402d:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0024033:	e8 dc 26 ff ff       	call   c0016714 <malloc>
c0024038:	83 c4 0c             	add    esp,0xc
c002403b:	56                   	push   esi
c002403c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0024040:	89 c3                	mov    ebx,eax
c0024042:	50                   	push   eax
c0024043:	e8 1a 67 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0024048:	5e                   	pop    esi
c0024049:	5f                   	pop    edi
c002404a:	6a 01                	push   0x1
c002404c:	53                   	push   ebx
c002404d:	e8 2e 67 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c0024052:	83 c4 10             	add    esp,0x10
c0024055:	85 c0                	test   eax,eax
c0024057:	74 0a                	je     c0024063 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0024059:	83 ec 0c             	sub    esp,0xc
c002405c:	68 3d 30 03 c0       	push   0xc003303d
c0024061:	eb 34                	jmp    c0024097 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0024063:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c002406b:	83 ec 0c             	sub    esp,0xc
c002406e:	6a 34                	push   0x34
c0024070:	e8 9f 26 ff ff       	call   c0016714 <malloc>
c0024075:	59                   	pop    ecx
c0024076:	8d 74 24 34          	lea    esi,[esp+0x34]
c002407a:	89 c7                	mov    edi,eax
c002407c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002407e:	56                   	push   esi
c002407f:	57                   	push   edi
c0024080:	6a 00                	push   0x0
c0024082:	6a 34                	push   0x34
c0024084:	53                   	push   ebx
c0024085:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024088:	83 c4 20             	add    esp,0x20
c002408b:	85 c0                	test   eax,eax
c002408d:	74 17                	je     c00240a6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c002408f:	83 ec 0c             	sub    esp,0xc
c0024092:	68 54 30 03 c0       	push   0xc0033054
c0024097:	e8 36 c4 ff ff       	call   c00204d2 <KePanic(char const*)>
c002409c:	83 c4 10             	add    esp,0x10
c002409f:	31 c0                	xor    eax,eax
c00240a1:	e9 31 02 00 00       	jmp    c00242d7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00240a6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00240ac:	75 e1                	jne    c002408f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00240ae:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00240b1:	85 c0                	test   eax,eax
c00240b3:	74 da                	je     c002408f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00240b5:	52                   	push   edx
c00240b6:	31 d2                	xor    edx,edx
c00240b8:	52                   	push   edx
c00240b9:	50                   	push   eax
c00240ba:	53                   	push   ebx
c00240bb:	e8 7e 67 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00240c0:	83 c4 10             	add    esp,0x10
c00240c3:	85 c0                	test   eax,eax
c00240c5:	75 c8                	jne    c002408f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00240c7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240cb:	83 ec 0c             	sub    esp,0xc
c00240ce:	31 ed                	xor    ebp,ebp
c00240d0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240d4:	0f af c2             	imul   eax,edx
c00240d7:	50                   	push   eax
c00240d8:	e8 37 26 ff ff       	call   c0016714 <malloc>
c00240dd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00240df:	89 34 24             	mov    DWORD PTR [esp],esi
c00240e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00240e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00240ea:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240ee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240f2:	0f af c2             	imul   eax,edx
c00240f5:	99                   	cdq    
c00240f6:	52                   	push   edx
c00240f7:	50                   	push   eax
c00240f8:	53                   	push   ebx
c00240f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240fc:	83 c4 20             	add    esp,0x20
c00240ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024107:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002410f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024117:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002411f:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0024123:	0f b7 f5             	movzx  esi,bp
c0024126:	0f 83 a7 00 00 00    	jae    c00241d3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c002412c:	6b f6 28             	imul   esi,esi,0x28
c002412f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024133:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024136:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002413a:	50                   	push   eax
c002413b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c002413f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024143:	8b 16                	mov    edx,DWORD PTR [esi]
c0024145:	6b c0 28             	imul   eax,eax,0x28
c0024148:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c002414c:	89 d0                	mov    eax,edx
c002414e:	31 d2                	xor    edx,edx
c0024150:	52                   	push   edx
c0024151:	50                   	push   eax
c0024152:	53                   	push   ebx
c0024153:	e8 e6 66 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0024158:	83 c4 0c             	add    esp,0xc
c002415b:	6a 20                	push   0x20
c002415d:	6a 00                	push   0x0
c002415f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0024163:	52                   	push   edx
c0024164:	e8 87 c3 fd ff       	call   c00004f0 <memset>
c0024169:	58                   	pop    eax
c002416a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002416c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0024170:	51                   	push   ecx
c0024171:	8d 54 24 40          	lea    edx,[esp+0x40]
c0024175:	52                   	push   edx
c0024176:	6a 00                	push   0x0
c0024178:	6a 1f                	push   0x1f
c002417a:	53                   	push   ebx
c002417b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002417e:	83 c4 18             	add    esp,0x18
c0024181:	68 6b 30 03 c0       	push   0xc003306b
c0024186:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c002418a:	52                   	push   edx
c002418b:	e8 f0 c5 fd ff       	call   c0000780 <strcmp>
c0024190:	83 c4 10             	add    esp,0x10
c0024193:	85 c0                	test   eax,eax
c0024195:	75 0f                	jne    c00241a6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0024197:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002419a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002419e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00241a6:	50                   	push   eax
c00241a7:	50                   	push   eax
c00241a8:	68 73 30 03 c0       	push   0xc0033073
c00241ad:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00241b1:	50                   	push   eax
c00241b2:	e8 c9 c5 fd ff       	call   c0000780 <strcmp>
c00241b7:	83 c4 10             	add    esp,0x10
c00241ba:	85 c0                	test   eax,eax
c00241bc:	75 0f                	jne    c00241cd <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00241be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00241c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00241c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00241cd:	45                   	inc    ebp
c00241ce:	e9 4c ff ff ff       	jmp    c002411f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00241d3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00241d8:	75 10                	jne    c00241ea <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00241da:	83 ec 0c             	sub    esp,0xc
c00241dd:	68 7b 30 03 c0       	push   0xc003307b
c00241e2:	e8 eb c2 ff ff       	call   c00204d2 <KePanic(char const*)>
c00241e7:	83 c4 10             	add    esp,0x10
c00241ea:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00241ef:	75 10                	jne    c0024201 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00241f1:	83 ec 0c             	sub    esp,0xc
c00241f4:	68 7b 30 03 c0       	push   0xc003307b
c00241f9:	e8 d4 c2 ff ff       	call   c00204d2 <KePanic(char const*)>
c00241fe:	83 c4 10             	add    esp,0x10
c0024201:	50                   	push   eax
c0024202:	31 d2                	xor    edx,edx
c0024204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024208:	52                   	push   edx
c0024209:	50                   	push   eax
c002420a:	53                   	push   ebx
c002420b:	e8 2e 66 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0024210:	5a                   	pop    edx
c0024211:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024215:	e8 fa 24 ff ff       	call   c0016714 <malloc>
c002421a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002421e:	31 c9                	xor    ecx,ecx
c0024220:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024224:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024226:	5e                   	pop    esi
c0024227:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c002422b:	55                   	push   ebp
c002422c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024230:	51                   	push   ecx
c0024231:	52                   	push   edx
c0024232:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0024236:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c002423a:	53                   	push   ebx
c002423b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002423e:	83 c4 14             	add    esp,0x14
c0024241:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024245:	e8 ca 24 ff ff       	call   c0016714 <malloc>
c002424a:	89 c6                	mov    esi,eax
c002424c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002424e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024251:	56                   	push   esi
c0024252:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0024256:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002425a:	51                   	push   ecx
c002425b:	52                   	push   edx
c002425c:	53                   	push   ebx
c002425d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024260:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024264:	83 c4 1c             	add    esp,0x1c
c0024267:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c002426d:	c1 e8 04             	shr    eax,0x4
c0024270:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0024277:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002427b:	31 d2                	xor    edx,edx
c002427d:	52                   	push   edx
c002427e:	50                   	push   eax
c002427f:	53                   	push   ebx
c0024280:	e8 b9 65 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0024285:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024287:	31 d2                	xor    edx,edx
c0024289:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002428c:	56                   	push   esi
c002428d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024291:	52                   	push   edx
c0024292:	50                   	push   eax
c0024293:	53                   	push   ebx
c0024294:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024297:	83 c4 14             	add    esp,0x14
c002429a:	53                   	push   ebx
c002429b:	e8 3e 65 ff ff       	call   c001a7de <File::close()>
c00242a0:	5d                   	pop    ebp
c00242a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00242a5:	e8 7a 24 ff ff       	call   c0016724 <free>
c00242aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00242ad:	e8 72 24 ff ff       	call   c0016724 <free>
c00242b2:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c00242b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00242bb:	83 c4 10             	add    esp,0x10
c00242be:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c00242c5:	8d 50 01             	lea    edx,[eax+0x1]
c00242c8:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c00242cf:	b0 01                	mov    al,0x1
c00242d1:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c00242d7:	83 c4 5c             	add    esp,0x5c
c00242da:	5b                   	pop    ebx
c00242db:	5e                   	pop    esi
c00242dc:	5f                   	pop    edi
c00242dd:	5d                   	pop    ebp
c00242de:	c3                   	ret    

c00242df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00242df:	55                   	push   ebp
c00242e0:	57                   	push   edi
c00242e1:	56                   	push   esi
c00242e2:	53                   	push   ebx
c00242e3:	81 ec 68 03 00 00    	sub    esp,0x368
c00242e9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00242f0:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c00242f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00242fa:	68 14 01 00 00       	push   0x114
c00242ff:	e8 10 24 ff ff       	call   c0016714 <malloc>
c0024304:	83 c4 0c             	add    esp,0xc
c0024307:	56                   	push   esi
c0024308:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c002430f:	50                   	push   eax
c0024310:	89 c3                	mov    ebx,eax
c0024312:	e8 4b 64 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0024317:	5f                   	pop    edi
c0024318:	5d                   	pop    ebp
c0024319:	6a 01                	push   0x1
c002431b:	53                   	push   ebx
c002431c:	e8 5f 64 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c0024321:	83 c4 10             	add    esp,0x10
c0024324:	85 c0                	test   eax,eax
c0024326:	0f 85 b3 06 00 00    	jne    c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002432c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0024334:	83 ec 0c             	sub    esp,0xc
c0024337:	6a 34                	push   0x34
c0024339:	e8 d6 23 ff ff       	call   c0016714 <malloc>
c002433e:	5e                   	pop    esi
c002433f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0024343:	89 c5                	mov    ebp,eax
c0024345:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024347:	56                   	push   esi
c0024348:	55                   	push   ebp
c0024349:	6a 00                	push   0x0
c002434b:	6a 34                	push   0x34
c002434d:	53                   	push   ebx
c002434e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024351:	83 c4 20             	add    esp,0x20
c0024354:	85 c0                	test   eax,eax
c0024356:	0f 85 83 06 00 00    	jne    c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002435c:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0024363:	0f 85 76 06 00 00    	jne    c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024369:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c002436c:	85 c0                	test   eax,eax
c002436e:	0f 84 6b 06 00 00    	je     c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024374:	31 d2                	xor    edx,edx
c0024376:	51                   	push   ecx
c0024377:	52                   	push   edx
c0024378:	50                   	push   eax
c0024379:	53                   	push   ebx
c002437a:	e8 bf 64 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c002437f:	83 c4 10             	add    esp,0x10
c0024382:	85 c0                	test   eax,eax
c0024384:	0f 85 55 06 00 00    	jne    c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002438a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c002438d:	83 ec 0c             	sub    esp,0xc
c0024390:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0024394:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024398:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c002439c:	0f af c2             	imul   eax,edx
c002439f:	50                   	push   eax
c00243a0:	e8 6f 23 ff ff       	call   c0016714 <malloc>
c00243a5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00243a7:	89 34 24             	mov    DWORD PTR [esp],esi
c00243aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00243ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00243b2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00243b6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00243ba:	0f af c2             	imul   eax,edx
c00243bd:	99                   	cdq    
c00243be:	52                   	push   edx
c00243bf:	50                   	push   eax
c00243c0:	53                   	push   ebx
c00243c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243c4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00243c7:	83 c4 20             	add    esp,0x20
c00243ca:	85 c0                	test   eax,eax
c00243cc:	0f 84 0d 06 00 00    	je     c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00243d2:	52                   	push   edx
c00243d3:	31 d2                	xor    edx,edx
c00243d5:	52                   	push   edx
c00243d6:	50                   	push   eax
c00243d7:	53                   	push   ebx
c00243d8:	e8 61 64 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00243dd:	83 c4 10             	add    esp,0x10
c00243e0:	85 c0                	test   eax,eax
c00243e2:	0f 85 f7 05 00 00    	jne    c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00243e8:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00243ec:	83 ec 0c             	sub    esp,0xc
c00243ef:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00243f3:	0f af c2             	imul   eax,edx
c00243f6:	50                   	push   eax
c00243f7:	e8 18 23 ff ff       	call   c0016714 <malloc>
c00243fc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00243fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0024401:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024409:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c002440d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0024411:	0f af c2             	imul   eax,edx
c0024414:	99                   	cdq    
c0024415:	52                   	push   edx
c0024416:	50                   	push   eax
c0024417:	53                   	push   ebx
c0024418:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002441b:	83 c4 20             	add    esp,0x20
c002441e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0024424:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024427:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c002442b:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c002442f:	73 78                	jae    c00244a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0024431:	c1 e7 05             	shl    edi,0x5
c0024434:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0024438:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c002443b:	75 63                	jne    c00244a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c002443d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0024440:	31 d2                	xor    edx,edx
c0024442:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0024445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024449:	50                   	push   eax
c002444a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c002444d:	52                   	push   edx
c002444e:	50                   	push   eax
c002444f:	53                   	push   ebx
c0024450:	e8 e9 63 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0024455:	83 c4 10             	add    esp,0x10
c0024458:	85 c0                	test   eax,eax
c002445a:	0f 85 7f 05 00 00    	jne    c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024460:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0024467:	83 ec 0c             	sub    esp,0xc
c002446a:	31 d2                	xor    edx,edx
c002446c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0024470:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024472:	01 c6                	add    esi,eax
c0024474:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002447b:	50                   	push   eax
c002447c:	56                   	push   esi
c002447d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024481:	52                   	push   edx
c0024482:	50                   	push   eax
c0024483:	53                   	push   ebx
c0024484:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024487:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c002448a:	83 c4 1c             	add    esp,0x1c
c002448d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0024490:	50                   	push   eax
c0024491:	6a 00                	push   0x0
c0024493:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0024497:	56                   	push   esi
c0024498:	e8 53 c0 fd ff       	call   c00004f0 <memset>
c002449d:	83 c4 10             	add    esp,0x10
c00244a0:	66 ff 04 24          	inc    WORD PTR [esp]
c00244a4:	e9 7b ff ff ff       	jmp    c0024424 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00244a9:	50                   	push   eax
c00244aa:	68 00 01 00 00       	push   0x100
c00244af:	6a 00                	push   0x0
c00244b1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00244b5:	50                   	push   eax
c00244b6:	e8 35 c0 fd ff       	call   c00004f0 <memset>
c00244bb:	83 c4 0c             	add    esp,0xc
c00244be:	68 00 01 00 00       	push   0x100
c00244c3:	6a 00                	push   0x0
c00244c5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00244cc:	50                   	push   eax
c00244cd:	e8 1e c0 fd ff       	call   c00004f0 <memset>
c00244d2:	83 c4 10             	add    esp,0x10
c00244d5:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c00244dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00244e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00244eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00244f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00244fb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024503:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024507:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c002450b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0024510:	0f 83 16 01 00 00    	jae    c002462c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0024516:	6b ff 28             	imul   edi,edi,0x28
c0024519:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c002451d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0024520:	51                   	push   ecx
c0024521:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0024525:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024529:	8b 07                	mov    eax,DWORD PTR [edi]
c002452b:	6b d2 28             	imul   edx,edx,0x28
c002452e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0024532:	31 d2                	xor    edx,edx
c0024534:	52                   	push   edx
c0024535:	50                   	push   eax
c0024536:	53                   	push   ebx
c0024537:	e8 02 63 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c002453c:	83 c4 0c             	add    esp,0xc
c002453f:	6a 20                	push   0x20
c0024541:	6a 00                	push   0x0
c0024543:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002454a:	51                   	push   ecx
c002454b:	e8 a0 bf fd ff       	call   c00004f0 <memset>
c0024550:	58                   	pop    eax
c0024551:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024553:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024557:	52                   	push   edx
c0024558:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c002455f:	51                   	push   ecx
c0024560:	6a 00                	push   0x0
c0024562:	6a 1f                	push   0x1f
c0024564:	53                   	push   ebx
c0024565:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024568:	83 c4 1c             	add    esp,0x1c
c002456b:	6a 09                	push   0x9
c002456d:	68 95 30 03 c0       	push   0xc0033095
c0024572:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024579:	51                   	push   ecx
c002457a:	e8 01 be fd ff       	call   c0000380 <memcmp>
c002457f:	83 c4 10             	add    esp,0x10
c0024582:	85 c0                	test   eax,eax
c0024584:	75 1a                	jne    c00245a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0024586:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024589:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002458c:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0024590:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024593:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c002459a:	89 d0                	mov    eax,edx
c002459c:	40                   	inc    eax
c002459d:	89 04 24             	mov    DWORD PTR [esp],eax
c00245a0:	52                   	push   edx
c00245a1:	6a 09                	push   0x9
c00245a3:	68 9f 30 03 c0       	push   0xc003309f
c00245a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00245af:	50                   	push   eax
c00245b0:	e8 cb bd fd ff       	call   c0000380 <memcmp>
c00245b5:	83 c4 10             	add    esp,0x10
c00245b8:	85 c0                	test   eax,eax
c00245ba:	75 1a                	jne    c00245d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00245bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00245bf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00245c2:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00245c6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00245c9:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00245d0:	89 c8                	mov    eax,ecx
c00245d2:	40                   	inc    eax
c00245d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00245d6:	50                   	push   eax
c00245d7:	50                   	push   eax
c00245d8:	68 6b 30 03 c0       	push   0xc003306b
c00245dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00245e4:	50                   	push   eax
c00245e5:	e8 96 c1 fd ff       	call   c0000780 <strcmp>
c00245ea:	83 c4 10             	add    esp,0x10
c00245ed:	85 c0                	test   eax,eax
c00245ef:	75 0b                	jne    c00245fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00245f1:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00245f5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00245f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245fc:	50                   	push   eax
c00245fd:	50                   	push   eax
c00245fe:	68 73 30 03 c0       	push   0xc0033073
c0024603:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002460a:	50                   	push   eax
c002460b:	e8 70 c1 fd ff       	call   c0000780 <strcmp>
c0024610:	83 c4 10             	add    esp,0x10
c0024613:	85 c0                	test   eax,eax
c0024615:	75 0b                	jne    c0024622 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0024617:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c002461b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c002461e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024622:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0024627:	e9 d7 fe ff ff       	jmp    c0024503 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c002462c:	50                   	push   eax
c002462d:	31 d2                	xor    edx,edx
c002462f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024633:	52                   	push   edx
c0024634:	50                   	push   eax
c0024635:	53                   	push   ebx
c0024636:	e8 03 62 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c002463b:	58                   	pop    eax
c002463c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024640:	e8 cf 20 ff ff       	call   c0016714 <malloc>
c0024645:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024647:	31 d2                	xor    edx,edx
c0024649:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c002464d:	58                   	pop    eax
c002464e:	8d 74 24 54          	lea    esi,[esp+0x54]
c0024652:	56                   	push   esi
c0024653:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002465b:	52                   	push   edx
c002465c:	50                   	push   eax
c002465d:	53                   	push   ebx
c002465e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024661:	83 c4 14             	add    esp,0x14
c0024664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024668:	e8 a7 20 ff ff       	call   c0016714 <malloc>
c002466d:	31 d2                	xor    edx,edx
c002466f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024673:	83 c4 0c             	add    esp,0xc
c0024676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002467a:	52                   	push   edx
c002467b:	50                   	push   eax
c002467c:	53                   	push   ebx
c002467d:	e8 bc 61 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c0024682:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024684:	31 d2                	xor    edx,edx
c0024686:	89 34 24             	mov    DWORD PTR [esp],esi
c0024689:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002468d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024691:	52                   	push   edx
c0024692:	50                   	push   eax
c0024693:	53                   	push   ebx
c0024694:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024697:	83 c4 20             	add    esp,0x20
c002469a:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c002469f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00246a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00246ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00246af:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00246b2:	0f 84 2b 03 00 00    	je     c00249e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00246b8:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00246bf:	31 d2                	xor    edx,edx
c00246c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00246c5:	c1 e8 03             	shr    eax,0x3
c00246c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00246cc:	51                   	push   ecx
c00246cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00246d5:	52                   	push   edx
c00246d6:	50                   	push   eax
c00246d7:	53                   	push   ebx
c00246d8:	e8 61 61 ff ff       	call   c001a83e <File::seek(unsigned long long)>
c00246dd:	5e                   	pop    esi
c00246de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246e2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00246e9:	e8 26 20 ff ff       	call   c0016714 <malloc>
c00246ee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00246f0:	31 d2                	xor    edx,edx
c00246f2:	89 c7                	mov    edi,eax
c00246f4:	58                   	pop    eax
c00246f5:	8d 44 24 58          	lea    eax,[esp+0x58]
c00246f9:	50                   	push   eax
c00246fa:	57                   	push   edi
c00246fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246ff:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0024706:	52                   	push   edx
c0024707:	50                   	push   eax
c0024708:	53                   	push   ebx
c0024709:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002470c:	83 c4 20             	add    esp,0x20
c002470f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024717:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002471b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c002471f:	0f 8d a5 02 00 00    	jge    c00249ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0024725:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c002472a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002472e:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0024731:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024735:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024739:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c002473d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024741:	c1 e8 08             	shr    eax,0x8
c0024744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024748:	89 c2                	mov    edx,eax
c002474a:	c1 e2 04             	shl    edx,0x4
c002474d:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0024751:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0024754:	85 f6                	test   esi,esi
c0024756:	0f 85 cf 00 00 00    	jne    c002482b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c002475c:	83 ec 0c             	sub    esp,0xc
c002475f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0024763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024767:	03 02                	add    eax,DWORD PTR [edx]
c0024769:	50                   	push   eax
c002476a:	e8 63 f8 ff ff       	call   c0023fd2 <Thr::getAddressOfKernelSymbol(char const*)>
c002476f:	83 c4 10             	add    esp,0x10
c0024772:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024776:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c002477b:	85 c0                	test   eax,eax
c002477d:	89 c6                	mov    esi,eax
c002477f:	0f 85 a6 00 00 00    	jne    c002482b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024785:	83 ec 0c             	sub    esp,0xc
c0024788:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c002478c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024790:	03 02                	add    eax,DWORD PTR [edx]
c0024792:	50                   	push   eax
c0024793:	e8 24 bf ff ff       	call   c00206bc <KeResolveCompatibilitySymbol(char*)>
c0024798:	83 c4 10             	add    esp,0x10
c002479b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002479f:	85 c0                	test   eax,eax
c00247a1:	89 c6                	mov    esi,eax
c00247a3:	0f 85 82 00 00 00    	jne    c002482b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00247a9:	50                   	push   eax
c00247aa:	50                   	push   eax
c00247ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247af:	03 02                	add    eax,DWORD PTR [edx]
c00247b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00247b5:	50                   	push   eax
c00247b6:	68 a9 30 03 c0       	push   0xc00330a9
c00247bb:	e8 8a 4d ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00247c0:	58                   	pop    eax
c00247c1:	5a                   	pop    edx
c00247c2:	68 c3 30 03 c0       	push   0xc00330c3
c00247c7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00247ce:	51                   	push   ecx
c00247cf:	e8 7c be fd ff       	call   c0000650 <strcpy>
c00247d4:	59                   	pop    ecx
c00247d5:	58                   	pop    eax
c00247d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00247da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247de:	03 02                	add    eax,DWORD PTR [edx]
c00247e0:	50                   	push   eax
c00247e1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00247e8:	51                   	push   ecx
c00247e9:	e8 82 c0 fd ff       	call   c0000870 <strcat>
c00247ee:	58                   	pop    eax
c00247ef:	5a                   	pop    edx
c00247f0:	68 5d 31 03 c0       	push   0xc003315d
c00247f5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00247fc:	51                   	push   ecx
c00247fd:	e8 6e c0 fd ff       	call   c0000870 <strcat>
c0024802:	83 c4 10             	add    esp,0x10
c0024805:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c002480a:	0f 84 77 01 00 00    	je     c0024987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024810:	83 ec 0c             	sub    esp,0xc
c0024813:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002481a:	51                   	push   ecx
c002481b:	e8 b2 bc ff ff       	call   c00204d2 <KePanic(char const*)>
c0024820:	83 c4 10             	add    esp,0x10
c0024823:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0024827:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002482b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0024830:	83 f8 01             	cmp    eax,0x1
c0024833:	0f 85 9b 00 00 00    	jne    c00248d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0024839:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002483d:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0024844:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0024848:	01 d0                	add    eax,edx
c002484a:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0024852:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024856:	0f 94 c0             	sete   al
c0024859:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0024861:	0f 94 c1             	sete   cl
c0024864:	09 c1                	or     ecx,eax
c0024866:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002486a:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c002486f:	0f b6 c9             	movzx  ecx,cl
c0024872:	8b 00                	mov    eax,DWORD PTR [eax]
c0024874:	74 41                	je     c00248b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0024876:	8d 14 06             	lea    edx,[esi+eax*1]
c0024879:	85 c9                	test   ecx,ecx
c002487b:	75 15                	jne    c0024892 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c002487d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024881:	66 83 f8 0c          	cmp    ax,0xc
c0024885:	76 05                	jbe    c002488c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0024887:	b8 0c 00 00 00       	mov    eax,0xc
c002488c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0024890:	76 37                	jbe    c00248c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024892:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024897:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002489b:	0f 84 e6 00 00 00    	je     c0024987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00248a1:	83 ec 0c             	sub    esp,0xc
c00248a4:	68 da 30 03 c0       	push   0xc00330da
c00248a9:	e8 24 bc ff ff       	call   c00204d2 <KePanic(char const*)>
c00248ae:	83 c4 10             	add    esp,0x10
c00248b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00248b5:	eb 12                	jmp    c00248c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00248b7:	01 c2                	add    edx,eax
c00248b9:	85 c9                	test   ecx,ecx
c00248bb:	75 0c                	jne    c00248c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00248bd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00248c1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00248c5:	77 02                	ja     c00248c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00248c7:	01 f2                	add    edx,esi
c00248c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00248cd:	89 10                	mov    DWORD PTR [eax],edx
c00248cf:	e9 ed 00 00 00       	jmp    c00249c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00248d4:	83 f8 02             	cmp    eax,0x2
c00248d7:	0f 85 81 00 00 00    	jne    c002495e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00248dd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00248e4:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00248e8:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00248ec:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00248f4:	74 21                	je     c0024917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00248f6:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00248fe:	74 17                	je     c0024917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024900:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0024904:	ba 0a 00 00 00       	mov    edx,0xa
c0024909:	83 f9 0e             	cmp    ecx,0xe
c002490c:	77 03                	ja     c0024911 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c002490e:	8d 51 fc             	lea    edx,[ecx-0x4]
c0024911:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0024915:	76 1f                	jbe    c0024936 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0024917:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c002491c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024920:	74 65                	je     c0024987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024922:	83 ec 0c             	sub    esp,0xc
c0024925:	68 f6 30 03 c0       	push   0xc00330f6
c002492a:	e8 a3 bb ff ff       	call   c00204d2 <KePanic(char const*)>
c002492f:	83 c4 10             	add    esp,0x10
c0024932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024936:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c002493b:	8b 10                	mov    edx,DWORD PTR [eax]
c002493d:	74 15                	je     c0024954 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c002493f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0024943:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c002494a:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c002494e:	01 d1                	add    ecx,edx
c0024950:	01 ce                	add    esi,ecx
c0024952:	eb 06                	jmp    c002495a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0024954:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0024958:	01 d6                	add    esi,edx
c002495a:	89 30                	mov    DWORD PTR [eax],esi
c002495c:	eb 63                	jmp    c00249c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c002495e:	56                   	push   esi
c002495f:	56                   	push   esi
c0024960:	50                   	push   eax
c0024961:	68 12 31 03 c0       	push   0xc0033112
c0024966:	e8 df 4b ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002496b:	83 c4 10             	add    esp,0x10
c002496e:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024973:	74 12                	je     c0024987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024975:	83 ec 0c             	sub    esp,0xc
c0024978:	68 1d 31 03 c0       	push   0xc003311d
c002497d:	e8 50 bb ff ff       	call   c00204d2 <KePanic(char const*)>
c0024982:	83 c4 10             	add    esp,0x10
c0024985:	eb 3a                	jmp    c00249c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0024987:	83 ec 0c             	sub    esp,0xc
c002498a:	53                   	push   ebx
c002498b:	e8 4e 5e ff ff       	call   c001a7de <File::close()>
c0024990:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024992:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024995:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024998:	89 3c 24             	mov    DWORD PTR [esp],edi
c002499b:	e8 84 1d ff ff       	call   c0016724 <free>
c00249a0:	59                   	pop    ecx
c00249a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00249a5:	e8 7a 1d ff ff       	call   c0016724 <free>
c00249aa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00249ad:	e8 72 1d ff ff       	call   c0016724 <free>
c00249b2:	5b                   	pop    ebx
c00249b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00249b7:	e8 68 1d ff ff       	call   c0016724 <free>
c00249bc:	83 c4 10             	add    esp,0x10
c00249bf:	eb 1e                	jmp    c00249df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00249c1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00249c5:	e9 4d fd ff ff       	jmp    c0024717 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00249ca:	83 ec 0c             	sub    esp,0xc
c00249cd:	57                   	push   edi
c00249ce:	e8 51 1d ff ff       	call   c0016724 <free>
c00249d3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00249d7:	83 c4 10             	add    esp,0x10
c00249da:	e9 cc fc ff ff       	jmp    c00246ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00249df:	31 c0                	xor    eax,eax
c00249e1:	eb 32                	jmp    c0024a15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00249e3:	83 ec 0c             	sub    esp,0xc
c00249e6:	53                   	push   ebx
c00249e7:	e8 f2 5d ff ff       	call   c001a7de <File::close()>
c00249ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00249ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00249f4:	58                   	pop    eax
c00249f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00249f9:	e8 26 1d ff ff       	call   c0016724 <free>
c00249fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024a01:	e8 1e 1d ff ff       	call   c0016724 <free>
c0024a06:	5a                   	pop    edx
c0024a07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a0b:	e8 14 1d ff ff       	call   c0016724 <free>
c0024a10:	83 c4 10             	add    esp,0x10
c0024a13:	b0 01                	mov    al,0x1
c0024a15:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024a1b:	5b                   	pop    ebx
c0024a1c:	5e                   	pop    esi
c0024a1d:	5f                   	pop    edi
c0024a1e:	5d                   	pop    ebp
c0024a1f:	c3                   	ret    

c0024a20 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024a20:	56                   	push   esi
c0024a21:	31 d2                	xor    edx,edx
c0024a23:	53                   	push   ebx
c0024a24:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024a2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024a2e:	39 d3                	cmp    ebx,edx
c0024a30:	7e 1b                	jle    c0024a4d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024a32:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c0024a39:	39 c8                	cmp    eax,ecx
c0024a3b:	77 0d                	ja     c0024a4a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024a3d:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c0024a44:	01 c6                	add    esi,eax
c0024a46:	39 ce                	cmp    esi,ecx
c0024a48:	77 05                	ja     c0024a4f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024a4a:	42                   	inc    edx
c0024a4b:	eb e1                	jmp    c0024a2e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024a4d:	31 c0                	xor    eax,eax
c0024a4f:	5b                   	pop    ebx
c0024a50:	5e                   	pop    esi
c0024a51:	c3                   	ret    

c0024a52 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024a52:	53                   	push   ebx
c0024a53:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024a59:	31 c0                	xor    eax,eax
c0024a5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a5f:	39 c3                	cmp    ebx,eax
c0024a61:	7e 22                	jle    c0024a85 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024a63:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c0024a6a:	39 ca                	cmp    edx,ecx
c0024a6c:	77 14                	ja     c0024a82 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024a6e:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c0024a75:	39 ca                	cmp    edx,ecx
c0024a77:	76 09                	jbe    c0024a82 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024a79:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c0024a80:	eb 05                	jmp    c0024a87 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024a82:	40                   	inc    eax
c0024a83:	eb da                	jmp    c0024a5f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024a85:	31 c0                	xor    eax,eax
c0024a87:	5b                   	pop    ebx
c0024a88:	c3                   	ret    

c0024a89 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024a89:	53                   	push   ebx
c0024a8a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024a8e:	53                   	push   ebx
c0024a8f:	e8 8c ff ff ff       	call   c0024a20 <Thr::getDriverBaseFromAddress(unsigned long)>
c0024a94:	5a                   	pop    edx
c0024a95:	31 d2                	xor    edx,edx
c0024a97:	85 c0                	test   eax,eax
c0024a99:	74 04                	je     c0024a9f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024a9b:	89 da                	mov    edx,ebx
c0024a9d:	29 c2                	sub    edx,eax
c0024a9f:	5b                   	pop    ebx
c0024aa0:	89 d0                	mov    eax,edx
c0024aa2:	c3                   	ret    

c0024aa3 <Thr::loadDLL(char const*, bool)>:
c0024aa3:	55                   	push   ebp
c0024aa4:	57                   	push   edi
c0024aa5:	56                   	push   esi
c0024aa6:	53                   	push   ebx
c0024aa7:	81 ec 34 01 00 00    	sub    esp,0x134
c0024aad:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024ab4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0024abb:	56                   	push   esi
c0024abc:	68 35 31 03 c0       	push   0xc0033135
c0024ac1:	e8 84 4a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0024ac6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024acd:	e8 42 1c ff ff       	call   c0016714 <malloc>
c0024ad2:	83 c4 0c             	add    esp,0xc
c0024ad5:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024adb:	56                   	push   esi
c0024adc:	50                   	push   eax
c0024add:	89 c3                	mov    ebx,eax
c0024adf:	e8 7e 5c ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0024ae4:	83 c4 10             	add    esp,0x10
c0024ae7:	85 db                	test   ebx,ebx
c0024ae9:	75 3c                	jne    c0024b27 <Thr::loadDLL(char const*, bool)+0x84>
c0024aeb:	89 e8                	mov    eax,ebp
c0024aed:	84 c0                	test   al,al
c0024aef:	0f 84 02 02 00 00    	je     c0024cf7 <Thr::loadDLL(char const*, bool)+0x254>
c0024af5:	50                   	push   eax
c0024af6:	50                   	push   eax
c0024af7:	68 46 31 03 c0       	push   0xc0033146
c0024afc:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024b00:	57                   	push   edi
c0024b01:	e8 4a bb fd ff       	call   c0000650 <strcpy>
c0024b06:	58                   	pop    eax
c0024b07:	5a                   	pop    edx
c0024b08:	56                   	push   esi
c0024b09:	57                   	push   edi
c0024b0a:	e8 61 bd fd ff       	call   c0000870 <strcat>
c0024b0f:	59                   	pop    ecx
c0024b10:	58                   	pop    eax
c0024b11:	68 5d 31 03 c0       	push   0xc003315d
c0024b16:	57                   	push   edi
c0024b17:	e8 54 bd fd ff       	call   c0000870 <strcat>
c0024b1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024b1f:	e8 ae b9 ff ff       	call   c00204d2 <KePanic(char const*)>
c0024b24:	83 c4 10             	add    esp,0x10
c0024b27:	50                   	push   eax
c0024b28:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024b2c:	50                   	push   eax
c0024b2d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024b31:	50                   	push   eax
c0024b32:	53                   	push   ebx
c0024b33:	e8 4a 5f ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c0024b38:	83 c4 10             	add    esp,0x10
c0024b3b:	85 db                	test   ebx,ebx
c0024b3d:	89 c7                	mov    edi,eax
c0024b3f:	74 0c                	je     c0024b4d <Thr::loadDLL(char const*, bool)+0xaa>
c0024b41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024b43:	83 ec 0c             	sub    esp,0xc
c0024b46:	53                   	push   ebx
c0024b47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024b4a:	83 c4 10             	add    esp,0x10
c0024b4d:	83 ec 0c             	sub    esp,0xc
c0024b50:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024b55:	50                   	push   eax
c0024b56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b5e:	57                   	push   edi
c0024b5f:	68 5f 31 03 c0       	push   0xc003315f
c0024b64:	e8 e1 49 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0024b69:	83 c4 20             	add    esp,0x20
c0024b6c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024b71:	75 0a                	jne    c0024b7d <Thr::loadDLL(char const*, bool)+0xda>
c0024b73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b77:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024b7b:	75 3e                	jne    c0024bbb <Thr::loadDLL(char const*, bool)+0x118>
c0024b7d:	89 e8                	mov    eax,ebp
c0024b7f:	31 db                	xor    ebx,ebx
c0024b81:	84 c0                	test   al,al
c0024b83:	0f 84 6e 01 00 00    	je     c0024cf7 <Thr::loadDLL(char const*, bool)+0x254>
c0024b89:	50                   	push   eax
c0024b8a:	50                   	push   eax
c0024b8b:	68 80 31 03 c0       	push   0xc0033180
c0024b90:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024b94:	53                   	push   ebx
c0024b95:	e8 b6 ba fd ff       	call   c0000650 <strcpy>
c0024b9a:	58                   	pop    eax
c0024b9b:	5a                   	pop    edx
c0024b9c:	56                   	push   esi
c0024b9d:	53                   	push   ebx
c0024b9e:	e8 cd bc fd ff       	call   c0000870 <strcat>
c0024ba3:	59                   	pop    ecx
c0024ba4:	5f                   	pop    edi
c0024ba5:	68 5d 31 03 c0       	push   0xc003315d
c0024baa:	53                   	push   ebx
c0024bab:	e8 c0 bc fd ff       	call   c0000870 <strcat>
c0024bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bb3:	e8 1a b9 ff ff       	call   c00204d2 <KePanic(char const*)>
c0024bb8:	83 c4 10             	add    esp,0x10
c0024bbb:	53                   	push   ebx
c0024bbc:	6a 03                	push   0x3
c0024bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024bc6:	05 ff 0f 00 00       	add    eax,0xfff
c0024bcb:	83 d2 00             	adc    edx,0x0
c0024bce:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024bd2:	50                   	push   eax
c0024bd3:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024bd9:	e8 68 3e ff ff       	call   c0018a46 <VAS::allocatePages(int, int)>
c0024bde:	89 c3                	mov    ebx,eax
c0024be0:	58                   	pop    eax
c0024be1:	5a                   	pop    edx
c0024be2:	53                   	push   ebx
c0024be3:	68 a6 15 03 c0       	push   0xc00315a6
c0024be8:	e8 5d 49 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0024bed:	89 34 24             	mov    DWORD PTR [esp],esi
c0024bf0:	e8 8b b9 fd ff       	call   c0000580 <strlen>
c0024bf5:	8b 3d 00 fa 03 c0    	mov    edi,DWORD PTR ds:0xc003fa00
c0024bfb:	40                   	inc    eax
c0024bfc:	89 04 24             	mov    DWORD PTR [esp],eax
c0024bff:	e8 10 1b ff ff       	call   c0016714 <malloc>
c0024c04:	59                   	pop    ecx
c0024c05:	89 04 bd 20 fe 03 c0 	mov    DWORD PTR [edi*4-0x3ffc01e0],eax
c0024c0c:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024c11:	5f                   	pop    edi
c0024c12:	56                   	push   esi
c0024c13:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024c1a:	e8 31 ba fd ff       	call   c0000650 <strcpy>
c0024c1f:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024c24:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024c2b:	8d 50 01             	lea    edx,[eax+0x1]
c0024c2e:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024c34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024c38:	83 c4 0c             	add    esp,0xc
c0024c3b:	6a 01                	push   0x1
c0024c3d:	53                   	push   ebx
c0024c3e:	56                   	push   esi
c0024c3f:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024c46:	e8 94 f6 ff ff       	call   c00242df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024c4b:	83 c4 10             	add    esp,0x10
c0024c4e:	89 c7                	mov    edi,eax
c0024c50:	89 f8                	mov    eax,edi
c0024c52:	83 f0 01             	xor    eax,0x1
c0024c55:	84 c0                	test   al,al
c0024c57:	74 18                	je     c0024c71 <Thr::loadDLL(char const*, bool)+0x1ce>
c0024c59:	89 e8                	mov    eax,ebp
c0024c5b:	84 c0                	test   al,al
c0024c5d:	74 12                	je     c0024c71 <Thr::loadDLL(char const*, bool)+0x1ce>
c0024c5f:	83 ec 0c             	sub    esp,0xc
c0024c62:	68 99 31 03 c0       	push   0xc0033199
c0024c67:	e8 66 b8 ff ff       	call   c00204d2 <KePanic(char const*)>
c0024c6c:	83 c4 10             	add    esp,0x10
c0024c6f:	eb 06                	jmp    c0024c77 <Thr::loadDLL(char const*, bool)+0x1d4>
c0024c71:	89 f8                	mov    eax,edi
c0024c73:	84 c0                	test   al,al
c0024c75:	75 10                	jne    c0024c87 <Thr::loadDLL(char const*, bool)+0x1e4>
c0024c77:	83 ec 0c             	sub    esp,0xc
c0024c7a:	68 b8 31 03 c0       	push   0xc00331b8
c0024c7f:	e8 4e b8 ff ff       	call   c00204d2 <KePanic(char const*)>
c0024c84:	83 c4 10             	add    esp,0x10
c0024c87:	31 f6                	xor    esi,esi
c0024c89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c91:	05 ff 0f 00 00       	add    eax,0xfff
c0024c96:	83 d2 00             	adc    edx,0x0
c0024c99:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024c9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ca1:	c1 ea 0c             	shr    edx,0xc
c0024ca4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024ca8:	ba 00 00 00 00       	mov    edx,0x0
c0024cad:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024cb1:	89 d0                	mov    eax,edx
c0024cb3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0024cb7:	73 32                	jae    c0024ceb <Thr::loadDLL(char const*, bool)+0x248>
c0024cb9:	50                   	push   eax
c0024cba:	50                   	push   eax
c0024cbb:	89 f0                	mov    eax,esi
c0024cbd:	c1 e0 0c             	shl    eax,0xc
c0024cc0:	01 d8                	add    eax,ebx
c0024cc2:	50                   	push   eax
c0024cc3:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024cc9:	e8 5c 38 ff ff       	call   c001852a <VAS::getPageTableEntry(unsigned long)>
c0024cce:	83 c4 10             	add    esp,0x10
c0024cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cd3:	a8 60                	test   al,0x60
c0024cd5:	75 11                	jne    c0024ce8 <Thr::loadDLL(char const*, bool)+0x245>
c0024cd7:	83 ec 0c             	sub    esp,0xc
c0024cda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024cdf:	50                   	push   eax
c0024ce0:	e8 d5 1c ff ff       	call   c00169ba <Phys::freePage(unsigned long)>
c0024ce5:	83 c4 10             	add    esp,0x10
c0024ce8:	46                   	inc    esi
c0024ce9:	eb 9e                	jmp    c0024c89 <Thr::loadDLL(char const*, bool)+0x1e6>
c0024ceb:	89 f8                	mov    eax,edi
c0024ced:	84 c0                	test   al,al
c0024cef:	b8 00 00 00 00       	mov    eax,0x0
c0024cf4:	0f 44 d8             	cmove  ebx,eax
c0024cf7:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024cfd:	89 d8                	mov    eax,ebx
c0024cff:	5b                   	pop    ebx
c0024d00:	5e                   	pop    esi
c0024d01:	5f                   	pop    edi
c0024d02:	5d                   	pop    ebp
c0024d03:	c3                   	ret    

c0024d04 <Thr::executeDLL(unsigned long, void*)>:
c0024d04:	56                   	push   esi
c0024d05:	53                   	push   ebx
c0024d06:	52                   	push   edx
c0024d07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024d0f:	85 db                	test   ebx,ebx
c0024d11:	75 10                	jne    c0024d23 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024d13:	83 ec 0c             	sub    esp,0xc
c0024d16:	68 d4 31 03 c0       	push   0xc00331d4
c0024d1b:	e8 b2 b7 ff ff       	call   c00204d2 <KePanic(char const*)>
c0024d20:	83 c4 10             	add    esp,0x10
c0024d23:	50                   	push   eax
c0024d24:	50                   	push   eax
c0024d25:	53                   	push   ebx
c0024d26:	68 fe 31 03 c0       	push   0xc00331fe
c0024d2b:	e8 1a 48 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0024d30:	89 d8                	mov    eax,ebx
c0024d32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024d36:	83 c4 14             	add    esp,0x14
c0024d39:	5b                   	pop    ebx
c0024d3a:	5e                   	pop    esi
c0024d3b:	ff e0                	jmp    eax
c0024d3d:	66 90                	xchg   ax,ax
c0024d3f:	90                   	nop

c0024d40 <userModeEntryPoint(void*)>:
c0024d40:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024d45:	83 e8 01             	sub    eax,0x1
c0024d48:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024d4d:	75 01                	jne    c0024d50 <userModeEntryPoint(void*)+0x10>
c0024d4f:	fb                   	sti    
c0024d50:	fb                   	sti    
c0024d51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024d56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024d59:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024d63:	e9 d7 b4 fd ff       	jmp    c000023f <goToUsermode>

c0024d68 <changeTSS>:
c0024d68:	83 ec 14             	sub    esp,0x14
c0024d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024d70:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024d73:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024d78:	c1 e2 15             	shl    edx,0x15
c0024d7b:	29 d0                	sub    eax,edx
c0024d7d:	50                   	push   eax
c0024d7e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024d83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d89:	05 7c 11 00 00       	add    eax,0x117c
c0024d8e:	50                   	push   eax
c0024d8f:	e8 e8 2d ff ff       	call   c0017b7c <TSS::setESP(unsigned long)>
c0024d94:	83 c4 1c             	add    esp,0x1c
c0024d97:	c3                   	ret    

c0024d98 <switchToThread(ThreadControlBlock*)>:
c0024d98:	57                   	push   edi
c0024d99:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024d9f:	56                   	push   esi
c0024da0:	53                   	push   ebx
c0024da1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024da5:	85 c9                	test   ecx,ecx
c0024da7:	0f 85 8b 00 00 00    	jne    c0024e38 <switchToThread(ThreadControlBlock*)+0xa0>
c0024dad:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024db1:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024db7:	74 7b                	je     c0024e34 <switchToThread(ThreadControlBlock*)+0x9c>
c0024db9:	b8 00 04 00 00       	mov    eax,0x400
c0024dbe:	29 d0                	sub    eax,edx
c0024dc0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024dc3:	d1 f8                	sar    eax,1
c0024dc5:	01 d0                	add    eax,edx
c0024dc7:	90                   	nop
c0024dc8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024dcb:	e8 70 25 00 00       	call   c0027340 <HalQueryPerformanceCounter()>
c0024dd0:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024dd5:	89 c6                	mov    esi,eax
c0024dd7:	89 d7                	mov    edi,edx
c0024dd9:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024ddf:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024de4:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024dea:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024df0:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024df6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024dfc:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024e02:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024e08:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024e0b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024e0e:	01 c6                	add    esi,eax
c0024e10:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024e13:	11 d7                	adc    edi,edx
c0024e15:	83 ec 0c             	sub    esp,0xc
c0024e18:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024e1b:	53                   	push   ebx
c0024e1c:	e8 56 b4 fd ff       	call   c0000277 <switchToThreadASM>
c0024e21:	0f 20 c0             	mov    eax,cr0
c0024e24:	83 c8 08             	or     eax,0x8
c0024e27:	0f 22 c0             	mov    cr0,eax
c0024e2a:	83 c4 10             	add    esp,0x10
c0024e2d:	5b                   	pop    ebx
c0024e2e:	5e                   	pop    esi
c0024e2f:	5f                   	pop    edi
c0024e30:	c3                   	ret    
c0024e31:	8d 76 00             	lea    esi,[esi+0x0]
c0024e34:	31 c0                	xor    eax,eax
c0024e36:	eb 90                	jmp    c0024dc8 <switchToThread(ThreadControlBlock*)+0x30>
c0024e38:	5b                   	pop    ebx
c0024e39:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024e43:	5e                   	pop    esi
c0024e44:	5f                   	pop    edi
c0024e45:	c3                   	ret    
c0024e46:	66 90                	xchg   ax,ax

c0024e48 <Process::addArgs(char**)>:
c0024e48:	57                   	push   edi
c0024e49:	56                   	push   esi
c0024e4a:	53                   	push   ebx
c0024e4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024e4f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024e53:	85 f6                	test   esi,esi
c0024e55:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0024e5f:	74 4f                	je     c0024eb0 <Process::addArgs(char**)+0x68>
c0024e61:	8b 06                	mov    eax,DWORD PTR [esi]
c0024e63:	85 c0                	test   eax,eax
c0024e65:	74 49                	je     c0024eb0 <Process::addArgs(char**)+0x68>
c0024e67:	31 db                	xor    ebx,ebx
c0024e69:	8d 76 00             	lea    esi,[esi+0x0]
c0024e6c:	83 ec 0c             	sub    esp,0xc
c0024e6f:	50                   	push   eax
c0024e70:	e8 0b b7 fd ff       	call   c0000580 <strlen>
c0024e75:	83 c0 01             	add    eax,0x1
c0024e78:	89 04 24             	mov    DWORD PTR [esp],eax
c0024e7b:	e8 94 18 ff ff       	call   c0016714 <malloc>
c0024e80:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0024e87:	5a                   	pop    edx
c0024e88:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0024e8b:	83 c3 01             	add    ebx,0x1
c0024e8e:	59                   	pop    ecx
c0024e8f:	52                   	push   edx
c0024e90:	50                   	push   eax
c0024e91:	e8 ba b7 fd ff       	call   c0000650 <strcpy>
c0024e96:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0024e9c:	83 c4 10             	add    esp,0x10
c0024e9f:	83 c1 01             	add    ecx,0x1
c0024ea2:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0024ea8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0024eab:	85 c0                	test   eax,eax
c0024ead:	75 bd                	jne    c0024e6c <Process::addArgs(char**)+0x24>
c0024eaf:	90                   	nop
c0024eb0:	5b                   	pop    ebx
c0024eb1:	5e                   	pop    esi
c0024eb2:	5f                   	pop    edi
c0024eb3:	c3                   	ret    

c0024eb4 <Process::Process(char const*, Process*, char**)>:
c0024eb4:	56                   	push   esi
c0024eb5:	53                   	push   ebx
c0024eb6:	83 ec 14             	sub    esp,0x14
c0024eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ebd:	05 0c 02 00 00       	add    eax,0x20c
c0024ec2:	bb 07 00 00 00       	mov    ebx,0x7
c0024ec7:	89 c6                	mov    esi,eax
c0024ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0024ecc:	85 db                	test   ebx,ebx
c0024ece:	78 14                	js     c0024ee4 <Process::Process(char const*, Process*, char**)+0x30>
c0024ed0:	83 ec 0c             	sub    esp,0xc
c0024ed3:	56                   	push   esi
c0024ed4:	e8 cf a3 00 00       	call   c002f2a8 <ThreadControlBlock::ThreadControlBlock()>
c0024ed9:	83 c4 10             	add    esp,0x10
c0024edc:	83 c6 5f             	add    esi,0x5f
c0024edf:	83 eb 01             	sub    ebx,0x1
c0024ee2:	eb e8                	jmp    c0024ecc <Process::Process(char const*, Process*, char**)+0x18>
c0024ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ee8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ef3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024efa:	83 ec 0c             	sub    esp,0xc
c0024efd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024f01:	e8 a6 b3 ff ff       	call   c00202ac <KeNewProcessEnv(Process*)>
c0024f06:	83 c4 10             	add    esp,0x10
c0024f09:	89 c2                	mov    edx,eax
c0024f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f0f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f19:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024f22:	a1 20 48 03 c0       	mov    eax,ds:0xc0034820
c0024f27:	8d 50 01             	lea    edx,[eax+0x1]
c0024f2a:	89 15 20 48 03 c0    	mov    DWORD PTR ds:0xc0034820,edx
c0024f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024f34:	89 02                	mov    DWORD PTR [edx],eax
c0024f36:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024f3e:	83 ec 0c             	sub    esp,0xc
c0024f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024f45:	e8 ca 17 ff ff       	call   c0016714 <malloc>
c0024f4a:	83 c4 10             	add    esp,0x10
c0024f4d:	89 c3                	mov    ebx,eax
c0024f4f:	83 ec 08             	sub    esp,0x8
c0024f52:	6a 00                	push   0x0
c0024f54:	53                   	push   ebx
c0024f55:	e8 38 3d ff ff       	call   c0018c92 <VAS::VAS(bool)>
c0024f5a:	83 c4 10             	add    esp,0x10
c0024f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f61:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f6b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024f7d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024f83:	e8 77 bd ff ff       	call   c0020cff <KeInitSignals()>
c0024f88:	89 c2                	mov    edx,eax
c0024f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f8e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f98:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f9e:	85 c0                	test   eax,eax
c0024fa0:	74 42                	je     c0024fe4 <Process::Process(char const*, Process*, char**)+0x130>
c0024fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fa6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024fac:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fb6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024fc6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fd0:	05 0c 01 00 00       	add    eax,0x10c
c0024fd5:	83 ec 08             	sub    esp,0x8
c0024fd8:	52                   	push   edx
c0024fd9:	50                   	push   eax
c0024fda:	e8 71 b6 fd ff       	call   c0000650 <strcpy>
c0024fdf:	83 c4 10             	add    esp,0x10
c0024fe2:	eb 64                	jmp    c0025048 <Process::Process(char const*, Process*, char**)+0x194>
c0024fe4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024fec:	83 ec 0c             	sub    esp,0xc
c0024fef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024ff3:	e8 1c 17 ff ff       	call   c0016714 <malloc>
c0024ff8:	83 c4 10             	add    esp,0x10
c0024ffb:	89 c3                	mov    ebx,eax
c0024ffd:	83 ec 08             	sub    esp,0x8
c0025000:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025004:	53                   	push   ebx
c0025005:	e8 a2 28 ff ff       	call   c00178ac <VgaText::VgaText(char const*)>
c002500a:	83 c4 10             	add    esp,0x10
c002500d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025011:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0025017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002501b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025021:	83 ec 0c             	sub    esp,0xc
c0025024:	50                   	push   eax
c0025025:	e8 30 21 ff ff       	call   c001715a <addToTerminalCycle(VgaText*)>
c002502a:	83 c4 10             	add    esp,0x10
c002502d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025031:	05 0c 01 00 00       	add    eax,0x10c
c0025036:	83 ec 08             	sub    esp,0x8
c0025039:	68 1d 32 03 c0       	push   0xc003321d
c002503e:	50                   	push   eax
c002503f:	e8 0c b6 fd ff       	call   c0000650 <strcpy>
c0025044:	83 c4 10             	add    esp,0x10
c0025047:	90                   	nop
c0025048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002504c:	83 c0 0c             	add    eax,0xc
c002504f:	83 ec 08             	sub    esp,0x8
c0025052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025056:	50                   	push   eax
c0025057:	e8 f4 b5 fd ff       	call   c0000650 <strcpy>
c002505c:	83 c4 10             	add    esp,0x10
c002505f:	83 ec 08             	sub    esp,0x8
c0025062:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0025066:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002506a:	e8 d9 fd ff ff       	call   c0024e48 <Process::addArgs(char**)>
c002506f:	83 c4 10             	add    esp,0x10
c0025072:	83 ec 08             	sub    esp,0x8
c0025075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002507d:	e8 1e ed ff ff       	call   c0023da0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0025082:	83 c4 10             	add    esp,0x10
c0025085:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025089:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002508d:	83 f0 01             	xor    eax,0x1
c0025090:	88 c2                	mov    dl,al
c0025092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025096:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c002509c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00250a1:	83 ec 04             	sub    esp,0x4
c00250a4:	50                   	push   eax
c00250a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00250a9:	68 74 32 03 c0       	push   0xc0033274
c00250ae:	e8 97 44 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00250b3:	83 c4 10             	add    esp,0x10
c00250b6:	90                   	nop
c00250b7:	83 c4 14             	add    esp,0x14
c00250ba:	5b                   	pop    ebx
c00250bb:	5e                   	pop    esi
c00250bc:	c3                   	ret    
c00250bd:	90                   	nop
c00250be:	66 90                	xchg   ax,ax

c00250c0 <Process::Process(bool, char const*, Process*, char**)>:
c00250c0:	56                   	push   esi
c00250c1:	53                   	push   ebx
c00250c2:	83 ec 24             	sub    esp,0x24
c00250c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00250c9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00250cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250d1:	05 0c 02 00 00       	add    eax,0x20c
c00250d6:	bb 07 00 00 00       	mov    ebx,0x7
c00250db:	89 c6                	mov    esi,eax
c00250dd:	8d 76 00             	lea    esi,[esi+0x0]
c00250e0:	85 db                	test   ebx,ebx
c00250e2:	78 14                	js     c00250f8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00250e4:	83 ec 0c             	sub    esp,0xc
c00250e7:	56                   	push   esi
c00250e8:	e8 bb a1 00 00       	call   c002f2a8 <ThreadControlBlock::ThreadControlBlock()>
c00250ed:	83 c4 10             	add    esp,0x10
c00250f0:	83 c6 5f             	add    esi,0x5f
c00250f3:	83 eb 01             	sub    ebx,0x1
c00250f6:	eb e8                	jmp    c00250e0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00250f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250fc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0025103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025107:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c002510e:	83 ec 0c             	sub    esp,0xc
c0025111:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025115:	e8 92 b1 ff ff       	call   c00202ac <KeNewProcessEnv(Process*)>
c002511a:	83 c4 10             	add    esp,0x10
c002511d:	89 c2                	mov    edx,eax
c002511f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025123:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0025129:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002512d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0025136:	a1 20 48 03 c0       	mov    eax,ds:0xc0034820
c002513b:	8d 50 01             	lea    edx,[eax+0x1]
c002513e:	89 15 20 48 03 c0    	mov    DWORD PTR ds:0xc0034820,edx
c0025144:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025148:	89 02                	mov    DWORD PTR [edx],eax
c002514a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0025152:	83 ec 0c             	sub    esp,0xc
c0025155:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0025159:	e8 b6 15 ff ff       	call   c0016714 <malloc>
c002515e:	83 c4 10             	add    esp,0x10
c0025161:	89 c3                	mov    ebx,eax
c0025163:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0025168:	83 ec 08             	sub    esp,0x8
c002516b:	50                   	push   eax
c002516c:	53                   	push   ebx
c002516d:	e8 20 3b ff ff       	call   c0018c92 <VAS::VAS(bool)>
c0025172:	83 c4 10             	add    esp,0x10
c0025175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025179:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c002517f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025183:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002518d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025191:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025195:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c002519b:	e8 5f bb ff ff       	call   c0020cff <KeInitSignals()>
c00251a0:	89 c2                	mov    edx,eax
c00251a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251a6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00251ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251b6:	85 c0                	test   eax,eax
c00251b8:	74 42                	je     c00251fc <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00251ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251be:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251c4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00251ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251ce:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00251d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251de:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00251e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251e8:	05 0c 01 00 00       	add    eax,0x10c
c00251ed:	83 ec 08             	sub    esp,0x8
c00251f0:	52                   	push   edx
c00251f1:	50                   	push   eax
c00251f2:	e8 59 b4 fd ff       	call   c0000650 <strcpy>
c00251f7:	83 c4 10             	add    esp,0x10
c00251fa:	eb 64                	jmp    c0025260 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00251fc:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0025204:	83 ec 0c             	sub    esp,0xc
c0025207:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002520b:	e8 04 15 ff ff       	call   c0016714 <malloc>
c0025210:	83 c4 10             	add    esp,0x10
c0025213:	89 c3                	mov    ebx,eax
c0025215:	83 ec 08             	sub    esp,0x8
c0025218:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002521c:	53                   	push   ebx
c002521d:	e8 8a 26 ff ff       	call   c00178ac <VgaText::VgaText(char const*)>
c0025222:	83 c4 10             	add    esp,0x10
c0025225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025229:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c002522f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025233:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025239:	83 ec 0c             	sub    esp,0xc
c002523c:	50                   	push   eax
c002523d:	e8 18 1f ff ff       	call   c001715a <addToTerminalCycle(VgaText*)>
c0025242:	83 c4 10             	add    esp,0x10
c0025245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025249:	05 0c 01 00 00       	add    eax,0x10c
c002524e:	83 ec 08             	sub    esp,0x8
c0025251:	68 1d 32 03 c0       	push   0xc003321d
c0025256:	50                   	push   eax
c0025257:	e8 f4 b3 fd ff       	call   c0000650 <strcpy>
c002525c:	83 c4 10             	add    esp,0x10
c002525f:	90                   	nop
c0025260:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025264:	83 c0 0c             	add    eax,0xc
c0025267:	83 ec 08             	sub    esp,0x8
c002526a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002526e:	50                   	push   eax
c002526f:	e8 dc b3 fd ff       	call   c0000650 <strcpy>
c0025274:	83 c4 10             	add    esp,0x10
c0025277:	83 ec 08             	sub    esp,0x8
c002527a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002527e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025282:	e8 c1 fb ff ff       	call   c0024e48 <Process::addArgs(char**)>
c0025287:	83 c4 10             	add    esp,0x10
c002528a:	90                   	nop
c002528b:	83 c4 24             	add    esp,0x24
c002528e:	5b                   	pop    ebx
c002528f:	5e                   	pop    esi
c0025290:	c3                   	ret    
c0025291:	8d 76 00             	lea    esi,[esi+0x0]

c0025294 <taskStartupFunction>:
c0025294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025299:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c002529c:	c3                   	ret    
c002529d:	8d 76 00             	lea    esi,[esi+0x0]

c00252a0 <KeDisablePreemption()>:
c00252a0:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c00252a5:	85 c0                	test   eax,eax
c00252a7:	75 13                	jne    c00252bc <KeDisablePreemption()+0x1c>
c00252a9:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c00252af:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c00252b6:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c00252bc:	83 c0 01             	add    eax,0x1
c00252bf:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c00252c4:	c3                   	ret    
c00252c5:	8d 76 00             	lea    esi,[esi+0x0]

c00252c8 <KeRestorePreemption()>:
c00252c8:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c00252cd:	83 e8 01             	sub    eax,0x1
c00252d0:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c00252d5:	75 0d                	jne    c00252e4 <KeRestorePreemption()+0x1c>
c00252d7:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c00252dc:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c00252e1:	8d 76 00             	lea    esi,[esi+0x0]
c00252e4:	c3                   	ret    
c00252e5:	90                   	nop
c00252e6:	66 90                	xchg   ax,ax

c00252e8 <Process::createThread(void (*)(void*), void*, int)>:
c00252e8:	57                   	push   edi
c00252e9:	31 c9                	xor    ecx,ecx
c00252eb:	56                   	push   esi
c00252ec:	53                   	push   ebx
c00252ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252f1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00252f8:	89 f2                	mov    edx,esi
c00252fa:	66 90                	xchg   ax,ax
c00252fc:	0f b7 c2             	movzx  eax,dx
c00252ff:	80 e2 01             	and    dl,0x1
c0025302:	74 14                	je     c0025318 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025304:	d1 f8                	sar    eax,1
c0025306:	83 c1 01             	add    ecx,0x1
c0025309:	83 f9 10             	cmp    ecx,0x10
c002530c:	89 c2                	mov    edx,eax
c002530e:	75 ec                	jne    c00252fc <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025310:	31 db                	xor    ebx,ebx
c0025312:	89 d8                	mov    eax,ebx
c0025314:	5b                   	pop    ebx
c0025315:	5e                   	pop    esi
c0025316:	5f                   	pop    edi
c0025317:	c3                   	ret    
c0025318:	b8 01 00 00 00       	mov    eax,0x1
c002531d:	d3 e0                	shl    eax,cl
c002531f:	09 c6                	or     esi,eax
c0025321:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0025328:	8d 04 49             	lea    eax,[ecx+ecx*2]
c002532b:	c1 e0 05             	shl    eax,0x5
c002532e:	29 c8                	sub    eax,ecx
c0025330:	01 d8                	add    eax,ebx
c0025332:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0025339:	75 0d                	jne    c0025348 <Process::createThread(void (*)(void*), void*, int)+0x60>
c002533b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0025345:	8d 76 00             	lea    esi,[esi+0x0]
c0025348:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c002534e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0025351:	83 ec 0c             	sub    esp,0xc
c0025354:	c1 e6 05             	shl    esi,0x5
c0025357:	29 ce                	sub    esi,ecx
c0025359:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002535c:	8d 04 33             	lea    eax,[ebx+esi*1]
c002535f:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0025365:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c002536b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0025371:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0025378:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c002537e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025382:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0025388:	89 ca                	mov    edx,ecx
c002538a:	f7 da                	neg    edx
c002538c:	c1 e2 15             	shl    edx,0x15
c002538f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0025395:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c002539b:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002539f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00253a9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00253af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00253b3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00253b9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00253c3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00253cd:	68 00 01 00 00       	push   0x100
c00253d2:	e8 3d 13 ff ff       	call   c0016714 <malloc>
c00253d7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00253da:	58                   	pop    eax
c00253db:	5a                   	pop    edx
c00253dc:	53                   	push   ebx
c00253dd:	68 ec 01 04 c0       	push   0xc00401ec
c00253e2:	e8 59 9c 00 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00253e7:	83 c4 10             	add    esp,0x10
c00253ea:	89 d8                	mov    eax,ebx
c00253ec:	5b                   	pop    ebx
c00253ed:	5e                   	pop    esi
c00253ee:	5f                   	pop    edi
c00253ef:	c3                   	ret    

c00253f0 <Process::createUserThread()>:
c00253f0:	83 ec 0c             	sub    esp,0xc
c00253f3:	68 80 00 00 00       	push   0x80
c00253f8:	6a 00                	push   0x0
c00253fa:	68 40 4d 02 c0       	push   0xc0024d40
c00253ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025403:	50                   	push   eax
c0025404:	e8 df fe ff ff       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c0025409:	83 c4 1c             	add    esp,0x1c
c002540c:	c3                   	ret    
c002540d:	8d 76 00             	lea    esi,[esi+0x0]

c0025410 <setupMultitasking(void (*)())>:
c0025410:	56                   	push   esi
c0025411:	53                   	push   ebx
c0025412:	83 ec 04             	sub    esp,0x4
c0025415:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025419:	eb 11                	jmp    c002542c <setupMultitasking(void (*)())+0x1c>
c002541b:	90                   	nop
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	68 ec 01 04 c0       	push   0xc00401ec
c0025424:	e8 5b 9b 00 00       	call   c002ef84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025429:	83 c4 10             	add    esp,0x10
c002542c:	83 ec 0c             	sub    esp,0xc
c002542f:	68 ec 01 04 c0       	push   0xc00401ec
c0025434:	e8 27 9b 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025439:	83 c4 10             	add    esp,0x10
c002543c:	84 c0                	test   al,al
c002543e:	74 dc                	je     c002541c <setupMultitasking(void (*)())+0xc>
c0025440:	83 ec 0c             	sub    esp,0xc
c0025443:	68 24 07 00 00       	push   0x724
c0025448:	e8 c7 12 ff ff       	call   c0016714 <malloc>
c002544d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025454:	6a 00                	push   0x0
c0025456:	68 21 32 03 c0       	push   0xc0033221
c002545b:	6a 01                	push   0x1
c002545d:	50                   	push   eax
c002545e:	89 c3                	mov    ebx,eax
c0025460:	e8 5b fc ff ff       	call   c00250c0 <Process::Process(bool, char const*, Process*, char**)>
c0025465:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c002546b:	83 c4 14             	add    esp,0x14
c002546e:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c0025474:	50                   	push   eax
c0025475:	e8 35 1f ff ff       	call   c00173af <setActiveTerminal(VgaText*)>
c002547a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0025481:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c002548b:	83 c8 01             	or     eax,0x1
c002548e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0025495:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c002549b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002549e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00254a8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00254ae:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00254b8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00254be:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00254c8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00254d2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00254d8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00254de:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00254e8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00254f2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00254f9:	e8 16 12 ff ff       	call   c0016714 <malloc>
c00254fe:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0025504:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c002550a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025510:	5a                   	pop    edx
c0025511:	59                   	pop    ecx
c0025512:	68 1d 32 03 c0       	push   0xc003321d
c0025517:	50                   	push   eax
c0025518:	e8 33 b1 fd ff       	call   c0000650 <strcpy>
c002551d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0025524:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025528:	83 c4 14             	add    esp,0x14
c002552b:	5b                   	pop    ebx
c002552c:	5e                   	pop    esi
c002552d:	e9 37 ad fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0025532:	66 90                	xchg   ax,ax

c0025534 <schedule()>:
c0025534:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c002553a:	85 d2                	test   edx,edx
c002553c:	74 0e                	je     c002554c <schedule()+0x18>
c002553e:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0025548:	c3                   	ret    
c0025549:	8d 76 00             	lea    esi,[esi+0x0]
c002554c:	53                   	push   ebx
c002554d:	83 ec 14             	sub    esp,0x14
c0025550:	68 ec 01 04 c0       	push   0xc00401ec
c0025555:	e8 06 9a 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002555a:	83 c4 10             	add    esp,0x10
c002555d:	84 c0                	test   al,al
c002555f:	75 3f                	jne    c00255a0 <schedule()+0x6c>
c0025561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025566:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0025569:	83 fa 01             	cmp    edx,0x1
c002556c:	74 3a                	je     c00255a8 <schedule()+0x74>
c002556e:	66 90                	xchg   ax,ax
c0025570:	83 ec 0c             	sub    esp,0xc
c0025573:	68 ec 01 04 c0       	push   0xc00401ec
c0025578:	e8 ff 99 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002557d:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025584:	89 c3                	mov    ebx,eax
c0025586:	e8 f9 99 00 00       	call   c002ef84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002558b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0025592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025595:	e8 fe f7 ff ff       	call   c0024d98 <switchToThread(ThreadControlBlock*)>
c002559a:	83 c4 10             	add    esp,0x10
c002559d:	8d 76 00             	lea    esi,[esi+0x0]
c00255a0:	83 c4 08             	add    esp,0x8
c00255a3:	5b                   	pop    ebx
c00255a4:	c3                   	ret    
c00255a5:	8d 76 00             	lea    esi,[esi+0x0]
c00255a8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00255af:	83 ec 08             	sub    esp,0x8
c00255b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255b7:	50                   	push   eax
c00255b8:	68 ec 01 04 c0       	push   0xc00401ec
c00255bd:	e8 7e 9a 00 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00255c2:	83 c4 10             	add    esp,0x10
c00255c5:	eb a9                	jmp    c0025570 <schedule()+0x3c>
c00255c7:	90                   	nop

c00255c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00255c8:	83 ec 0c             	sub    esp,0xc
c00255cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00255d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00255d7:	e8 58 ff ff ff       	call   c0025534 <schedule()>
c00255dc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255e1:	83 e8 01             	sub    eax,0x1
c00255e4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255e9:	75 01                	jne    c00255ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00255eb:	fb                   	sti    
c00255ec:	83 c4 0c             	add    esp,0xc
c00255ef:	c3                   	ret    

c00255f0 <blockTask(TaskState)>:
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	fa                   	cli    
c00255f4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00255fd:	83 c0 01             	add    eax,0x1
c0025600:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025605:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002560a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002560d:	e8 22 ff ff ff       	call   c0025534 <schedule()>
c0025612:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025617:	83 e8 01             	sub    eax,0x1
c002561a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002561f:	75 03                	jne    c0025624 <blockTask(TaskState)+0x34>
c0025621:	fb                   	sti    
c0025622:	66 90                	xchg   ax,ax
c0025624:	83 c4 0c             	add    esp,0xc
c0025627:	c3                   	ret    

c0025628 <waitTask(int, int*, int)>:
c0025628:	83 ec 18             	sub    esp,0x18
c002562b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025630:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025634:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0025637:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002563b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025640:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0025643:	6a 07                	push   0x7
c0025645:	e8 a6 ff ff ff       	call   c00255f0 <blockTask(TaskState)>
c002564a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002564f:	83 c4 10             	add    esp,0x10
c0025652:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0025655:	85 d2                	test   edx,edx
c0025657:	74 0b                	je     c0025664 <waitTask(int, int*, int)+0x3c>
c0025659:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c002565c:	89 02                	mov    DWORD PTR [edx],eax
c002565e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025663:	90                   	nop
c0025664:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0025667:	83 c4 0c             	add    esp,0xc
c002566a:	c3                   	ret    
c002566b:	90                   	nop

c002566c <milliTenthSleepUntil(unsigned int)>:
c002566c:	83 ec 0c             	sub    esp,0xc
c002566f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025673:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c0025679:	76 05                	jbe    c0025680 <milliTenthSleepUntil(unsigned int)+0x14>
c002567b:	90                   	nop
c002567c:	83 c4 0c             	add    esp,0xc
c002567f:	c3                   	ret    
c0025680:	fa                   	cli    
c0025681:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025687:	83 ec 08             	sub    esp,0x8
c002568a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025690:	83 c2 01             	add    edx,0x1
c0025693:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025699:	83 c1 01             	add    ecx,0x1
c002569c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00256a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00256a8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00256ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00256b0:	50                   	push   eax
c00256b1:	68 e0 01 04 c0       	push   0xc00401e0
c00256b6:	e8 85 99 00 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00256bb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00256c2:	e8 29 ff ff ff       	call   c00255f0 <blockTask(TaskState)>
c00256c7:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00256cc:	83 c4 10             	add    esp,0x10
c00256cf:	83 e8 01             	sub    eax,0x1
c00256d2:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00256d7:	85 c0                	test   eax,eax
c00256d9:	75 09                	jne    c00256e4 <milliTenthSleepUntil(unsigned int)+0x78>
c00256db:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00256e0:	85 c0                	test   eax,eax
c00256e2:	75 14                	jne    c00256f8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00256e4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256e9:	83 e8 01             	sub    eax,0x1
c00256ec:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256f1:	75 89                	jne    c002567c <milliTenthSleepUntil(unsigned int)+0x10>
c00256f3:	fb                   	sti    
c00256f4:	83 c4 0c             	add    esp,0xc
c00256f7:	c3                   	ret    
c00256f8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025702:	e8 2d fe ff ff       	call   c0025534 <schedule()>
c0025707:	eb db                	jmp    c00256e4 <milliTenthSleepUntil(unsigned int)+0x78>
c0025709:	8d 76 00             	lea    esi,[esi+0x0]

c002570c <milliTenthSleep(unsigned int)>:
c002570c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025710:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0025715:	01 c2                	add    edx,eax
c0025717:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002571b:	e9 4c ff ff ff       	jmp    c002566c <milliTenthSleepUntil(unsigned int)>

c0025720 <sleep(unsigned int)>:
c0025720:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0025728:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002572c:	eb de                	jmp    c002570c <milliTenthSleep(unsigned int)>
c002572e:	66 90                	xchg   ax,ax

c0025730 <taskReturned>:
c0025730:	83 ec 18             	sub    esp,0x18
c0025733:	68 a0 32 03 c0       	push   0xc00332a0
c0025738:	e8 95 ad ff ff       	call   c00204d2 <KePanic(char const*)>
c002573d:	83 c4 10             	add    esp,0x10
c0025740:	83 ec 0c             	sub    esp,0xc
c0025743:	6a 02                	push   0x2
c0025745:	e8 a6 fe ff ff       	call   c00255f0 <blockTask(TaskState)>
c002574a:	fa                   	cli    
c002574b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025750:	83 c0 01             	add    eax,0x1
c0025753:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025758:	e8 d7 fd ff ff       	call   c0025534 <schedule()>
c002575d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025762:	83 c4 10             	add    esp,0x10
c0025765:	83 e8 01             	sub    eax,0x1
c0025768:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002576d:	85 c0                	test   eax,eax
c002576f:	75 cf                	jne    c0025740 <taskReturned+0x10>
c0025771:	fb                   	sti    
c0025772:	eb cc                	jmp    c0025740 <taskReturned+0x10>

c0025774 <Thr::processFromPID(int)>:
c0025774:	57                   	push   edi
c0025775:	56                   	push   esi
c0025776:	53                   	push   ebx
c0025777:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002577b:	fa                   	cli    
c002577c:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c0025782:	83 ec 0c             	sub    esp,0xc
c0025785:	68 ec 01 04 c0       	push   0xc00401ec
c002578a:	83 c1 01             	add    ecx,0x1
c002578d:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c0025793:	e8 e4 97 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025798:	83 c4 10             	add    esp,0x10
c002579b:	89 c7                	mov    edi,eax
c002579d:	eb 15                	jmp    c00257b4 <Thr::processFromPID(int)+0x40>
c002579f:	90                   	nop
c00257a0:	83 ec 0c             	sub    esp,0xc
c00257a3:	68 ec 01 04 c0       	push   0xc00401ec
c00257a8:	e8 cf 97 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257ad:	83 c4 10             	add    esp,0x10
c00257b0:	39 f8                	cmp    eax,edi
c00257b2:	74 50                	je     c0025804 <Thr::processFromPID(int)+0x90>
c00257b4:	83 ec 0c             	sub    esp,0xc
c00257b7:	68 ec 01 04 c0       	push   0xc00401ec
c00257bc:	e8 bb 97 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257c1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257c8:	89 c3                	mov    ebx,eax
c00257ca:	e8 b5 97 00 00       	call   c002ef84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257cf:	58                   	pop    eax
c00257d0:	5a                   	pop    edx
c00257d1:	53                   	push   ebx
c00257d2:	68 ec 01 04 c0       	push   0xc00401ec
c00257d7:	e8 64 98 00 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00257dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257df:	83 c4 10             	add    esp,0x10
c00257e2:	39 30                	cmp    DWORD PTR [eax],esi
c00257e4:	75 ba                	jne    c00257a0 <Thr::processFromPID(int)+0x2c>
c00257e6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257eb:	83 e8 01             	sub    eax,0x1
c00257ee:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00257f3:	74 0b                	je     c0025800 <Thr::processFromPID(int)+0x8c>
c00257f5:	8d 76 00             	lea    esi,[esi+0x0]
c00257f8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257fb:	90                   	nop
c00257fc:	5b                   	pop    ebx
c00257fd:	5e                   	pop    esi
c00257fe:	5f                   	pop    edi
c00257ff:	c3                   	ret    
c0025800:	fb                   	sti    
c0025801:	eb f5                	jmp    c00257f8 <Thr::processFromPID(int)+0x84>
c0025803:	90                   	nop
c0025804:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025809:	8d 50 ff             	lea    edx,[eax-0x1]
c002580c:	31 c0                	xor    eax,eax
c002580e:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025814:	85 d2                	test   edx,edx
c0025816:	75 e4                	jne    c00257fc <Thr::processFromPID(int)+0x88>
c0025818:	fb                   	sti    
c0025819:	5b                   	pop    ebx
c002581a:	5e                   	pop    esi
c002581b:	5f                   	pop    edi
c002581c:	c3                   	ret    
c002581d:	8d 76 00             	lea    esi,[esi+0x0]

c0025820 <unblockTask(ThreadControlBlock*)>:
c0025820:	53                   	push   ebx
c0025821:	83 ec 08             	sub    esp,0x8
c0025824:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025828:	fa                   	cli    
c0025829:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002582e:	83 c0 01             	add    eax,0x1
c0025831:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025836:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025839:	85 c0                	test   eax,eax
c002583b:	74 67                	je     c00258a4 <unblockTask(ThreadControlBlock*)+0x84>
c002583d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025840:	83 f8 01             	cmp    eax,0x1
c0025843:	74 37                	je     c002587c <unblockTask(ThreadControlBlock*)+0x5c>
c0025845:	83 ec 0c             	sub    esp,0xc
c0025848:	68 ec 01 04 c0       	push   0xc00401ec
c002584d:	e8 2a 97 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025852:	83 c4 10             	add    esp,0x10
c0025855:	85 c0                	test   eax,eax
c0025857:	75 1b                	jne    c0025874 <unblockTask(ThreadControlBlock*)+0x54>
c0025859:	eb 5d                	jmp    c00258b8 <unblockTask(ThreadControlBlock*)+0x98>
c002585b:	90                   	nop
c002585c:	83 ec 08             	sub    esp,0x8
c002585f:	50                   	push   eax
c0025860:	68 ec 01 04 c0       	push   0xc00401ec
c0025865:	e8 32 9a 00 00       	call   c002f29c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002586a:	83 c4 10             	add    esp,0x10
c002586d:	85 c0                	test   eax,eax
c002586f:	74 47                	je     c00258b8 <unblockTask(ThreadControlBlock*)+0x98>
c0025871:	8d 76 00             	lea    esi,[esi+0x0]
c0025874:	39 c3                	cmp    ebx,eax
c0025876:	75 e4                	jne    c002585c <unblockTask(ThreadControlBlock*)+0x3c>
c0025878:	eb 12                	jmp    c002588c <unblockTask(ThreadControlBlock*)+0x6c>
c002587a:	66 90                	xchg   ax,ax
c002587c:	83 ec 0c             	sub    esp,0xc
c002587f:	68 3f 32 03 c0       	push   0xc003323f
c0025884:	e8 c1 3c ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0025889:	83 c4 10             	add    esp,0x10
c002588c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025891:	83 e8 01             	sub    eax,0x1
c0025894:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025899:	75 01                	jne    c002589c <unblockTask(ThreadControlBlock*)+0x7c>
c002589b:	fb                   	sti    
c002589c:	83 c4 08             	add    esp,0x8
c002589f:	5b                   	pop    ebx
c00258a0:	c3                   	ret    
c00258a1:	8d 76 00             	lea    esi,[esi+0x0]
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	68 28 32 03 c0       	push   0xc0033228
c00258ac:	e8 99 3c ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00258b1:	83 c4 10             	add    esp,0x10
c00258b4:	eb d6                	jmp    c002588c <unblockTask(ThreadControlBlock*)+0x6c>
c00258b6:	66 90                	xchg   ax,ax
c00258b8:	83 ec 08             	sub    esp,0x8
c00258bb:	53                   	push   ebx
c00258bc:	68 ec 01 04 c0       	push   0xc00401ec
c00258c1:	e8 7a 97 00 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00258c6:	83 c4 10             	add    esp,0x10
c00258c9:	eb c1                	jmp    c002588c <unblockTask(ThreadControlBlock*)+0x6c>
c00258cb:	90                   	nop

c00258cc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00258cc:	55                   	push   ebp
c00258cd:	57                   	push   edi
c00258ce:	56                   	push   esi
c00258cf:	53                   	push   ebx
c00258d0:	83 ec 1c             	sub    esp,0x1c
c00258d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00258d7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258da:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00258e0:	85 ed                	test   ebp,ebp
c00258e2:	7e 28                	jle    c002590c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00258e4:	31 f6                	xor    esi,esi
c00258e6:	66 90                	xchg   ax,ax
c00258e8:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00258ef:	83 ec 0c             	sub    esp,0xc
c00258f2:	83 c6 01             	add    esi,0x1
c00258f5:	57                   	push   edi
c00258f6:	e8 29 0e ff ff       	call   c0016724 <free>
c00258fb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258fe:	83 c4 10             	add    esp,0x10
c0025901:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025907:	7f df                	jg     c00258e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025909:	8d 76 00             	lea    esi,[esi+0x0]
c002590c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025916:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002591b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c002591e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025921:	d3 c0                	rol    eax,cl
c0025923:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c002592a:	21 c8                	and    eax,ecx
c002592c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025933:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025936:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c002593e:	89 f7                	mov    edi,esi
c0025940:	0f 85 72 01 00 00    	jne    c0025ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025946:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c002594c:	85 ed                	test   ebp,ebp
c002594e:	74 1c                	je     c002596c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025950:	83 ec 0c             	sub    esp,0xc
c0025953:	55                   	push   ebp
c0025954:	e8 6f a8 ff ff       	call   c00201c8 <EnvVarContainer::~EnvVarContainer()>
c0025959:	59                   	pop    ecx
c002595a:	5e                   	pop    esi
c002595b:	6a 0c                	push   0xc
c002595d:	55                   	push   ebp
c002595e:	e8 e9 3a ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c0025963:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025966:	83 c4 10             	add    esp,0x10
c0025969:	89 f7                	mov    edi,esi
c002596b:	90                   	nop
c002596c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025972:	85 c0                	test   eax,eax
c0025974:	0f 84 b2 00 00 00    	je     c0025a2c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c002597a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c002597d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025981:	31 c9                	xor    ecx,ecx
c0025983:	eb 17                	jmp    c002599c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025985:	8d 76 00             	lea    esi,[esi+0x0]
c0025988:	83 c1 01             	add    ecx,0x1
c002598b:	83 f9 10             	cmp    ecx,0x10
c002598e:	0f 84 98 00 00 00    	je     c0025a2c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025994:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002599a:	66 90                	xchg   ax,ax
c002599c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00259a3:	d3 fa                	sar    edx,cl
c00259a5:	80 e2 01             	and    dl,0x1
c00259a8:	74 de                	je     c0025988 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00259aa:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00259ad:	c1 e2 05             	shl    edx,0x5
c00259b0:	29 ca                	sub    edx,ecx
c00259b2:	01 d0                	add    eax,edx
c00259b4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00259ba:	83 fd 07             	cmp    ebp,0x7
c00259bd:	75 c9                	jne    c0025988 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00259bf:	05 40 02 00 00       	add    eax,0x240
c00259c4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00259c7:	83 fd ff             	cmp    ebp,0xffffffff
c00259ca:	0f 8c f0 00 00 00    	jl     c0025ac0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00259d0:	0f 84 ae 01 00 00    	je     c0025b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00259d6:	85 ed                	test   ebp,ebp
c00259d8:	0f 84 92 01 00 00    	je     c0025b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00259de:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00259e0:	75 a6                	jne    c0025988 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00259e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00259e6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00259ec:	01 d0                	add    eax,edx
c00259ee:	66 90                	xchg   ax,ax
c00259f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00259f4:	83 ec 0c             	sub    esp,0xc
c00259f7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00259fd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a00:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025a06:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025a0d:	50                   	push   eax
c0025a0e:	e8 0d fe ff ff       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c0025a13:	83 c4 10             	add    esp,0x10
c0025a16:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025a19:	89 f7                	mov    edi,esi
c0025a1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025a1f:	83 c1 01             	add    ecx,0x1
c0025a22:	83 f9 10             	cmp    ecx,0x10
c0025a25:	0f 85 69 ff ff ff    	jne    c0025994 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025a2b:	90                   	nop
c0025a2c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025a32:	85 c0                	test   eax,eax
c0025a34:	74 62                	je     c0025a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025a36:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025a3c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025a42:	74 54                	je     c0025a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025a44:	83 ec 0c             	sub    esp,0xc
c0025a47:	68 ec 01 04 c0       	push   0xc00401ec
c0025a4c:	e8 2b 95 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a51:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025a58:	89 c7                	mov    edi,eax
c0025a5a:	e8 01 95 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025a5f:	83 c4 10             	add    esp,0x10
c0025a62:	84 c0                	test   al,al
c0025a64:	0f 84 ce 00 00 00    	je     c0025b38 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0025a6a:	66 90                	xchg   ax,ax
c0025a6c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a6f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025a75:	85 d2                	test   edx,edx
c0025a77:	74 0f                	je     c0025a88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025a79:	8b 02                	mov    eax,DWORD PTR [edx]
c0025a7b:	83 ec 0c             	sub    esp,0xc
c0025a7e:	52                   	push   edx
c0025a7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025a82:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a85:	83 c4 10             	add    esp,0x10
c0025a88:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025a92:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025a95:	8d 76 00             	lea    esi,[esi+0x0]
c0025a98:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025a9e:	85 db                	test   ebx,ebx
c0025aa0:	74 16                	je     c0025ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025aa2:	83 ec 0c             	sub    esp,0xc
c0025aa5:	53                   	push   ebx
c0025aa6:	e8 25 2d ff ff       	call   c00187d0 <VAS::~VAS()>
c0025aab:	58                   	pop    eax
c0025aac:	5a                   	pop    edx
c0025aad:	6a 14                	push   0x14
c0025aaf:	53                   	push   ebx
c0025ab0:	e8 97 39 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c0025ab5:	83 c4 10             	add    esp,0x10
c0025ab8:	83 c4 1c             	add    esp,0x1c
c0025abb:	5b                   	pop    ebx
c0025abc:	5e                   	pop    esi
c0025abd:	5f                   	pop    edi
c0025abe:	5d                   	pop    ebp
c0025abf:	c3                   	ret    
c0025ac0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025ac4:	83 ec 0c             	sub    esp,0xc
c0025ac7:	68 d4 32 03 c0       	push   0xc00332d4
c0025acc:	e8 01 aa ff ff       	call   c00204d2 <KePanic(char const*)>
c0025ad1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025ad4:	83 c4 10             	add    esp,0x10
c0025ad7:	89 f7                	mov    edi,esi
c0025ad9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025add:	e9 a6 fe ff ff       	jmp    c0025988 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025ae2:	66 90                	xchg   ax,ax
c0025ae4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025aea:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025af0:	75 1e                	jne    c0025b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025af2:	83 ec 0c             	sub    esp,0xc
c0025af5:	68 3c 33 03 c0       	push   0xc003333c
c0025afa:	e8 4b 3a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0025aff:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025b06:	e8 e5 fa ff ff       	call   c00255f0 <blockTask(TaskState)>
c0025b0b:	83 c4 10             	add    esp,0x10
c0025b0e:	66 90                	xchg   ax,ax
c0025b10:	83 ec 08             	sub    esp,0x8
c0025b13:	56                   	push   esi
c0025b14:	68 ec 01 04 c0       	push   0xc00401ec
c0025b19:	e8 22 95 00 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025b1e:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025b25:	e8 52 94 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025b2a:	83 c4 10             	add    esp,0x10
c0025b2d:	39 f8                	cmp    eax,edi
c0025b2f:	0f 84 37 ff ff ff    	je     c0025a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025b35:	8d 76 00             	lea    esi,[esi+0x0]
c0025b38:	83 ec 0c             	sub    esp,0xc
c0025b3b:	68 ec 01 04 c0       	push   0xc00401ec
c0025b40:	e8 37 94 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025b45:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025b4c:	89 c6                	mov    esi,eax
c0025b4e:	e8 31 94 00 00       	call   c002ef84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025b53:	83 c4 10             	add    esp,0x10
c0025b56:	39 f3                	cmp    ebx,esi
c0025b58:	74 b6                	je     c0025b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025b5a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025b5d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b60:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025b66:	75 a8                	jne    c0025b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025b68:	e9 77 ff ff ff       	jmp    c0025ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0025b70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025b74:	83 ec 0c             	sub    esp,0xc
c0025b77:	68 08 33 03 c0       	push   0xc0033308
c0025b7c:	e9 4b ff ff ff       	jmp    c0025acc <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025b81:	8d 76 00             	lea    esi,[esi+0x0]
c0025b84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025b88:	8b 36                	mov    esi,DWORD PTR [esi]
c0025b8a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025b8d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b90:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025b96:	01 d7                	add    edi,edx
c0025b98:	89 f8                	mov    eax,edi
c0025b9a:	e9 51 fe ff ff       	jmp    c00259f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025b9f:	90                   	nop

c0025ba0 <cleanerTaskFunction(void*)>:
c0025ba0:	53                   	push   ebx
c0025ba1:	83 ec 08             	sub    esp,0x8
c0025ba4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ba9:	83 e8 01             	sub    eax,0x1
c0025bac:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025bb1:	75 01                	jne    c0025bb4 <cleanerTaskFunction(void*)+0x14>
c0025bb3:	fb                   	sti    
c0025bb4:	fa                   	cli    
c0025bb5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025bba:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025bc1:	8d 50 01             	lea    edx,[eax+0x1]
c0025bc4:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025bca:	0f 84 c4 00 00 00    	je     c0025c94 <cleanerTaskFunction(void*)+0xf4>
c0025bd0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025bd5:	85 c0                	test   eax,eax
c0025bd7:	75 03                	jne    c0025bdc <cleanerTaskFunction(void*)+0x3c>
c0025bd9:	fb                   	sti    
c0025bda:	66 90                	xchg   ax,ax
c0025bdc:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025be3:	fa                   	cli    
c0025be4:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025bea:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025bf0:	83 c2 01             	add    edx,0x1
c0025bf3:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025bf9:	83 c1 01             	add    ecx,0x1
c0025bfc:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025c02:	fa                   	cli    
c0025c03:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025c09:	83 c3 01             	add    ebx,0x1
c0025c0c:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025c12:	eb 28                	jmp    c0025c3c <cleanerTaskFunction(void*)+0x9c>
c0025c14:	83 ec 0c             	sub    esp,0xc
c0025c17:	68 d4 01 04 c0       	push   0xc00401d4
c0025c1c:	e8 5b 93 00 00       	call   c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025c21:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025c28:	89 c3                	mov    ebx,eax
c0025c2a:	e8 55 93 00 00       	call   c002ef84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025c2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025c32:	e8 95 fc ff ff       	call   c00258cc <cleanupTerminatedTask(ThreadControlBlock*)>
c0025c37:	83 c4 10             	add    esp,0x10
c0025c3a:	66 90                	xchg   ax,ax
c0025c3c:	83 ec 0c             	sub    esp,0xc
c0025c3f:	68 d4 01 04 c0       	push   0xc00401d4
c0025c44:	e8 17 93 00 00       	call   c002ef60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025c49:	83 c4 10             	add    esp,0x10
c0025c4c:	84 c0                	test   al,al
c0025c4e:	74 c4                	je     c0025c14 <cleanerTaskFunction(void*)+0x74>
c0025c50:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c55:	83 e8 01             	sub    eax,0x1
c0025c58:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c5d:	75 01                	jne    c0025c60 <cleanerTaskFunction(void*)+0xc0>
c0025c5f:	fb                   	sti    
c0025c60:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025c65:	83 e8 01             	sub    eax,0x1
c0025c68:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025c6d:	0f 85 31 ff ff ff    	jne    c0025ba4 <cleanerTaskFunction(void*)+0x4>
c0025c73:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025c78:	85 c0                	test   eax,eax
c0025c7a:	0f 84 24 ff ff ff    	je     c0025ba4 <cleanerTaskFunction(void*)+0x4>
c0025c80:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025c8a:	e8 a5 f8 ff ff       	call   c0025534 <schedule()>
c0025c8f:	e9 10 ff ff ff       	jmp    c0025ba4 <cleanerTaskFunction(void*)+0x4>
c0025c94:	83 ec 0c             	sub    esp,0xc
c0025c97:	6a 02                	push   0x2
c0025c99:	e8 2a f9 ff ff       	call   c00255c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c9e:	83 c4 10             	add    esp,0x10
c0025ca1:	e9 36 ff ff ff       	jmp    c0025bdc <cleanerTaskFunction(void*)+0x3c>
c0025ca6:	66 90                	xchg   ax,ax

c0025ca8 <terminateTask(int)>:
c0025ca8:	83 ec 14             	sub    esp,0x14
c0025cab:	fa                   	cli    
c0025cac:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025cb2:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025cb8:	83 c2 01             	add    edx,0x1
c0025cbb:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025cc1:	83 c1 01             	add    ecx,0x1
c0025cc4:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025cca:	fa                   	cli    
c0025ccb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cd0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025cd4:	83 c0 01             	add    eax,0x1
c0025cd7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025ce1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025ce4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025ce9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025cec:	50                   	push   eax
c0025ced:	68 d4 01 04 c0       	push   0xc00401d4
c0025cf2:	e8 49 93 00 00       	call   c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025cf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025cfc:	83 c4 10             	add    esp,0x10
c0025cff:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025d06:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025d0b:	85 c0                	test   eax,eax
c0025d0d:	74 65                	je     c0025d74 <terminateTask(int)+0xcc>
c0025d0f:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	50                   	push   eax
c0025d1a:	e8 01 fb ff ff       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c0025d1f:	83 c4 10             	add    esp,0x10
c0025d22:	66 90                	xchg   ax,ax
c0025d24:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d29:	83 e8 01             	sub    eax,0x1
c0025d2c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d31:	75 01                	jne    c0025d34 <terminateTask(int)+0x8c>
c0025d33:	fb                   	sti    
c0025d34:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025d39:	83 e8 01             	sub    eax,0x1
c0025d3c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025d41:	75 09                	jne    c0025d4c <terminateTask(int)+0xa4>
c0025d43:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025d4a:	75 3c                	jne    c0025d88 <terminateTask(int)+0xe0>
c0025d4c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d51:	83 e8 01             	sub    eax,0x1
c0025d54:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d59:	75 01                	jne    c0025d5c <terminateTask(int)+0xb4>
c0025d5b:	fb                   	sti    
c0025d5c:	fa                   	cli    
c0025d5d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d62:	83 c0 01             	add    eax,0x1
c0025d65:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d6a:	66 90                	xchg   ax,ax
c0025d6c:	e8 c3 f7 ff ff       	call   c0025534 <schedule()>
c0025d71:	eb d9                	jmp    c0025d4c <terminateTask(int)+0xa4>
c0025d73:	90                   	nop
c0025d74:	83 ec 0c             	sub    esp,0xc
c0025d77:	68 56 32 03 c0       	push   0xc0033256
c0025d7c:	e8 c9 37 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0025d81:	83 c4 10             	add    esp,0x10
c0025d84:	eb 9e                	jmp    c0025d24 <terminateTask(int)+0x7c>
c0025d86:	66 90                	xchg   ax,ax
c0025d88:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025d92:	eb d8                	jmp    c0025d6c <terminateTask(int)+0xc4>

c0025d94 <Thr::terminateFromIRQ(int)>:
c0025d94:	83 ec 18             	sub    esp,0x18
c0025d97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d9b:	50                   	push   eax
c0025d9c:	e8 07 ff ff ff       	call   c0025ca8 <terminateTask(int)>
c0025da1:	8d 76 00             	lea    esi,[esi+0x0]

c0025da4 <__static_initialization_and_destruction_0(int, int)>:
c0025da4:	83 ec 0c             	sub    esp,0xc
c0025da7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025dac:	0f 85 8e 00 00 00    	jne    c0025e40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025db2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025dba:	0f 85 80 00 00 00    	jne    c0025e40 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025dc0:	83 ec 0c             	sub    esp,0xc
c0025dc3:	68 ec 01 04 c0       	push   0xc00401ec
c0025dc8:	e8 27 95 00 00       	call   c002f2f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025dcd:	83 c4 10             	add    esp,0x10
c0025dd0:	83 ec 04             	sub    esp,0x4
c0025dd3:	68 18 3f 03 c0       	push   0xc0033f18
c0025dd8:	68 ec 01 04 c0       	push   0xc00401ec
c0025ddd:	68 a4 f2 02 c0       	push   0xc002f2a4
c0025de2:	e8 15 36 ff ff       	call   c00193fc <__cxa_atexit>
c0025de7:	83 c4 10             	add    esp,0x10
c0025dea:	83 ec 0c             	sub    esp,0xc
c0025ded:	68 e0 01 04 c0       	push   0xc00401e0
c0025df2:	e8 fd 94 00 00       	call   c002f2f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025df7:	83 c4 10             	add    esp,0x10
c0025dfa:	83 ec 04             	sub    esp,0x4
c0025dfd:	68 18 3f 03 c0       	push   0xc0033f18
c0025e02:	68 e0 01 04 c0       	push   0xc00401e0
c0025e07:	68 a4 f2 02 c0       	push   0xc002f2a4
c0025e0c:	e8 eb 35 ff ff       	call   c00193fc <__cxa_atexit>
c0025e11:	83 c4 10             	add    esp,0x10
c0025e14:	83 ec 0c             	sub    esp,0xc
c0025e17:	68 d4 01 04 c0       	push   0xc00401d4
c0025e1c:	e8 d3 94 00 00       	call   c002f2f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025e21:	83 c4 10             	add    esp,0x10
c0025e24:	83 ec 04             	sub    esp,0x4
c0025e27:	68 18 3f 03 c0       	push   0xc0033f18
c0025e2c:	68 d4 01 04 c0       	push   0xc00401d4
c0025e31:	68 a4 f2 02 c0       	push   0xc002f2a4
c0025e36:	e8 c1 35 ff ff       	call   c00193fc <__cxa_atexit>
c0025e3b:	83 c4 10             	add    esp,0x10
c0025e3e:	66 90                	xchg   ax,ax
c0025e40:	90                   	nop
c0025e41:	83 c4 0c             	add    esp,0xc
c0025e44:	c3                   	ret    
c0025e45:	8d 76 00             	lea    esi,[esi+0x0]

c0025e48 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025e48:	83 ec 0c             	sub    esp,0xc
c0025e4b:	83 ec 08             	sub    esp,0x8
c0025e4e:	68 ff ff 00 00       	push   0xffff
c0025e53:	6a 01                	push   0x1
c0025e55:	e8 4a ff ff ff       	call   c0025da4 <__static_initialization_and_destruction_0(int, int)>
c0025e5a:	83 c4 10             	add    esp,0x10
c0025e5d:	83 c4 0c             	add    esp,0xc
c0025e60:	c3                   	ret    

c0025e61 <Vm::inbv(unsigned short)>:
c0025e61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025e65:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025e6a:	75 06                	jne    c0025e72 <Vm::inbv(unsigned short)+0x11>
c0025e6c:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025e71:	c3                   	ret    
c0025e72:	ec                   	in     al,dx
c0025e73:	c3                   	ret    

c0025e74 <Vm::outbv(unsigned short, unsigned char)>:
c0025e74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e7c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025e81:	75 25                	jne    c0025ea8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025e83:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025e89:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025e8f:	8d 51 01             	lea    edx,[ecx+0x1]
c0025e92:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025e98:	83 fa 20             	cmp    edx,0x20
c0025e9b:	75 0c                	jne    c0025ea9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025e9d:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025ea7:	c3                   	ret    
c0025ea8:	ee                   	out    dx,al
c0025ea9:	c3                   	ret    

c0025eaa <Vm::realToLinear(unsigned short, unsigned short)>:
c0025eaa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025eaf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025eb4:	c1 e0 04             	shl    eax,0x4
c0025eb7:	01 d0                	add    eax,edx
c0025eb9:	c3                   	ret    

c0025eba <Vm::getSegment(unsigned int)>:
c0025eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ebe:	c1 e8 10             	shr    eax,0x10
c0025ec1:	c3                   	ret    

c0025ec2 <Vm::getOffset(unsigned int)>:
c0025ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ec6:	c3                   	ret    

c0025ec7 <Vm::mainloop2()>:
c0025ec7:	83 ec 18             	sub    esp,0x18
c0025eca:	fa                   	cli    
c0025ecb:	6a 02                	push   0x2
c0025ecd:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025ed3:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025eda:	e8 e9 f6 ff ff       	call   c00255c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025ee4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025ee8:	52                   	push   edx
c0025ee9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025eed:	52                   	push   edx
c0025eee:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025ef2:	52                   	push   edx
c0025ef3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025ef7:	50                   	push   eax
c0025ef8:	e8 12 a3 fd ff       	call   c000020f <goToVM86>
c0025efd:	83 c4 2c             	add    esp,0x2c
c0025f00:	c3                   	ret    

c0025f01 <Vm::mainVm8086Loop(void*)>:
c0025f01:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f06:	48                   	dec    eax
c0025f07:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f0c:	75 01                	jne    c0025f0f <Vm::mainVm8086Loop(void*)+0xe>
c0025f0e:	fb                   	sti    
c0025f0f:	eb b6                	jmp    c0025ec7 <Vm::mainloop2()>

c0025f11 <Vm::mainloop3(unsigned long)>:
c0025f11:	83 ec 18             	sub    esp,0x18
c0025f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f18:	fa                   	cli    
c0025f19:	6a 02                	push   0x2
c0025f1b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025f21:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025f28:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025f2d:	e8 96 f6 ff ff       	call   c00255c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025f32:	83 c4 1c             	add    esp,0x1c
c0025f35:	eb 90                	jmp    c0025ec7 <Vm::mainloop2()>

c0025f37 <Vm::initialise8086()>:
c0025f37:	83 ec 0c             	sub    esp,0xc
c0025f3a:	68 80 00 00 00       	push   0x80
c0025f3f:	6a 00                	push   0x0
c0025f41:	68 01 5f 02 c0       	push   0xc0025f01
c0025f46:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025f4c:	e8 97 f3 ff ff       	call   c00252e8 <Process::createThread(void (*)(void*), void*, int)>
c0025f51:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025f58:	68 00 01 00 00       	push   0x100
c0025f5d:	6a 00                	push   0x0
c0025f5f:	6a 00                	push   0x0
c0025f61:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025f66:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025f6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025f71:	e8 d2 2b ff ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025f76:	83 c4 2c             	add    esp,0x2c
c0025f79:	c3                   	ret    

c0025f7a <Vm::finish8086()>:
c0025f7a:	53                   	push   ebx
c0025f7b:	83 ec 08             	sub    esp,0x8
c0025f7e:	fa                   	cli    
c0025f7f:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025f85:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025f8c:	75 15                	jne    c0025fa3 <Vm::finish8086()+0x29>
c0025f8e:	e8 a1 f5 ff ff       	call   c0025534 <schedule()>
c0025f93:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f98:	48                   	dec    eax
c0025f99:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f9e:	75 de                	jne    c0025f7e <Vm::finish8086()+0x4>
c0025fa0:	fb                   	sti    
c0025fa1:	eb db                	jmp    c0025f7e <Vm::finish8086()+0x4>
c0025fa3:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025faa:	83 ec 0c             	sub    esp,0xc
c0025fad:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025fb3:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025fb9:	e8 62 f8 ff ff       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c0025fbe:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025fc3:	83 c4 10             	add    esp,0x10
c0025fc6:	8d 50 ff             	lea    edx,[eax-0x1]
c0025fc9:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025fcf:	85 d2                	test   edx,edx
c0025fd1:	75 01                	jne    c0025fd4 <Vm::finish8086()+0x5a>
c0025fd3:	fb                   	sti    
c0025fd4:	83 c4 08             	add    esp,0x8
c0025fd7:	89 d8                	mov    eax,ebx
c0025fd9:	5b                   	pop    ebx
c0025fda:	c3                   	ret    

c0025fdb <Vm::getOutput8086(unsigned char*)>:
c0025fdb:	57                   	push   edi
c0025fdc:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025fe2:	56                   	push   esi
c0025fe3:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025fe8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025fec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025fee:	5e                   	pop    esi
c0025fef:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025ff4:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025ffe:	5f                   	pop    edi
c0025fff:	c3                   	ret    

c0026000 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0026000:	55                   	push   ebp
c0026001:	57                   	push   edi
c0026002:	56                   	push   esi
c0026003:	53                   	push   ebx
c0026004:	83 ec 0c             	sub    esp,0xc
c0026007:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002600b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002600f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026013:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026017:	fa                   	cli    
c0026018:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002601e:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0026025:	75 15                	jne    c002603c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0026027:	e8 08 f5 ff ff       	call   c0025534 <schedule()>
c002602c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026031:	48                   	dec    eax
c0026032:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026037:	75 de                	jne    c0026017 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0026039:	fb                   	sti    
c002603a:	eb db                	jmp    c0026017 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c002603c:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0026046:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c002604b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c002604f:	0f b7 ff             	movzx  edi,di
c0026052:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0026056:	0f b7 f6             	movzx  esi,si
c0026059:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c002605d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0026061:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0026065:	50                   	push   eax
c0026066:	6a 20                	push   0x20
c0026068:	6a 00                	push   0x0
c002606a:	68 40 02 04 c0       	push   0xc0040240
c002606f:	e8 7c a4 fd ff       	call   c00004f0 <memset>
c0026074:	5a                   	pop    edx
c0026075:	59                   	pop    ecx
c0026076:	57                   	push   edi
c0026077:	56                   	push   esi
c0026078:	e8 2d fe ff ff       	call   c0025eaa <Vm::realToLinear(unsigned short, unsigned short)>
c002607d:	83 c4 10             	add    esp,0x10
c0026080:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0026084:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0026088:	89 c7                	mov    edi,eax
c002608a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002608c:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0026093:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026098:	48                   	dec    eax
c0026099:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002609e:	75 01                	jne    c00260a1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00260a0:	fb                   	sti    
c00260a1:	83 ec 0c             	sub    esp,0xc
c00260a4:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c00260aa:	e8 71 f7 ff ff       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c00260af:	83 c4 1c             	add    esp,0x1c
c00260b2:	b0 01                	mov    al,0x1
c00260b4:	5b                   	pop    ebx
c00260b5:	5e                   	pop    esi
c00260b6:	5f                   	pop    edi
c00260b7:	5d                   	pop    ebp
c00260b8:	c3                   	ret    

c00260b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00260b9:	55                   	push   ebp
c00260ba:	57                   	push   edi
c00260bb:	56                   	push   esi
c00260bc:	53                   	push   ebx
c00260bd:	83 ec 34             	sub    esp,0x34
c00260c0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00260c4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00260c8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00260cc:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00260d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00260d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00260d8:	68 64 33 03 c0       	push   0xc0033364
c00260dd:	e8 68 34 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00260e2:	83 c4 10             	add    esp,0x10
c00260e5:	fa                   	cli    
c00260e6:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c00260ec:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00260f2:	84 db                	test   bl,bl
c00260f4:	75 15                	jne    c002610b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00260f6:	e8 39 f4 ff ff       	call   c0025534 <schedule()>
c00260fb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026100:	48                   	dec    eax
c0026101:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026106:	75 dd                	jne    c00260e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0026108:	fb                   	sti    
c0026109:	eb da                	jmp    c00260e5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c002610b:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0026115:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026119:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c002611e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0026122:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0026126:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c002612a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c002612e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0026132:	50                   	push   eax
c0026133:	6a 20                	push   0x20
c0026135:	6a 00                	push   0x0
c0026137:	68 40 02 04 c0       	push   0xc0040240
c002613c:	e8 af a3 fd ff       	call   c00004f0 <memset>
c0026141:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0026148:	e8 c7 05 ff ff       	call   c0016714 <malloc>
c002614d:	83 c4 0c             	add    esp,0xc
c0026150:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0026156:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002615a:	89 c5                	mov    ebp,eax
c002615c:	50                   	push   eax
c002615d:	e8 00 46 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0026162:	83 c4 10             	add    esp,0x10
c0026165:	85 ed                	test   ebp,ebp
c0026167:	75 0a                	jne    c0026173 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0026169:	83 ec 0c             	sub    esp,0xc
c002616c:	68 86 33 03 c0       	push   0xc0033386
c0026171:	eb 2b                	jmp    c002619e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0026173:	50                   	push   eax
c0026174:	8d 44 24 17          	lea    eax,[esp+0x17]
c0026178:	50                   	push   eax
c0026179:	8d 44 24 20          	lea    eax,[esp+0x20]
c002617d:	50                   	push   eax
c002617e:	55                   	push   ebp
c002617f:	e8 fe 48 ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c0026184:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0026188:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002618c:	83 c4 10             	add    esp,0x10
c002618f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0026194:	74 27                	je     c00261bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0026196:	83 ec 0c             	sub    esp,0xc
c0026199:	68 9a 33 03 c0       	push   0xc003339a
c002619e:	e8 2f a3 ff ff       	call   c00204d2 <KePanic(char const*)>
c00261a3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00261a8:	83 c4 10             	add    esp,0x10
c00261ab:	48                   	dec    eax
c00261ac:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00261b1:	85 c0                	test   eax,eax
c00261b3:	75 01                	jne    c00261b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00261b5:	fb                   	sti    
c00261b6:	31 db                	xor    ebx,ebx
c00261b8:	e9 90 00 00 00       	jmp    c002624d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00261bd:	51                   	push   ecx
c00261be:	51                   	push   ecx
c00261bf:	6a 01                	push   0x1
c00261c1:	55                   	push   ebp
c00261c2:	e8 b9 45 ff ff       	call   c001a780 <File::open(FileOpenMode)>
c00261c7:	83 c4 10             	add    esp,0x10
c00261ca:	85 c0                	test   eax,eax
c00261cc:	74 26                	je     c00261f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00261ce:	83 ec 0c             	sub    esp,0xc
c00261d1:	68 b3 33 03 c0       	push   0xc00333b3
c00261d6:	e8 f7 a2 ff ff       	call   c00204d2 <KePanic(char const*)>
c00261db:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00261e0:	83 c4 10             	add    esp,0x10
c00261e3:	48                   	dec    eax
c00261e4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00261e9:	85 c0                	test   eax,eax
c00261eb:	75 c9                	jne    c00261b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00261ed:	fb                   	sti    
c00261ee:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00261f2:	eb 59                	jmp    c002624d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00261f4:	50                   	push   eax
c00261f5:	0f b7 ff             	movzx  edi,di
c00261f8:	50                   	push   eax
c00261f9:	0f b7 f6             	movzx  esi,si
c00261fc:	57                   	push   edi
c00261fd:	56                   	push   esi
c00261fe:	e8 a7 fc ff ff       	call   c0025eaa <Vm::realToLinear(unsigned short, unsigned short)>
c0026203:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0026206:	5a                   	pop    edx
c0026207:	8d 74 24 20          	lea    esi,[esp+0x20]
c002620b:	56                   	push   esi
c002620c:	50                   	push   eax
c002620d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026211:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026215:	55                   	push   ebp
c0026216:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0026219:	83 c4 14             	add    esp,0x14
c002621c:	55                   	push   ebp
c002621d:	e8 bc 45 ff ff       	call   c001a7de <File::close()>
c0026222:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026227:	83 c4 10             	add    esp,0x10
c002622a:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0026231:	48                   	dec    eax
c0026232:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026237:	85 c0                	test   eax,eax
c0026239:	75 01                	jne    c002623c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c002623b:	fb                   	sti    
c002623c:	83 ec 0c             	sub    esp,0xc
c002623f:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0026245:	e8 d6 f5 ff ff       	call   c0025820 <unblockTask(ThreadControlBlock*)>
c002624a:	83 c4 10             	add    esp,0x10
c002624d:	83 c4 2c             	add    esp,0x2c
c0026250:	88 d8                	mov    al,bl
c0026252:	5b                   	pop    ebx
c0026253:	5e                   	pop    esi
c0026254:	5f                   	pop    edi
c0026255:	5d                   	pop    ebp
c0026256:	c3                   	ret    

c0026257 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0026257:	57                   	push   edi
c0026258:	56                   	push   esi
c0026259:	53                   	push   ebx
c002625a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002625e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0026262:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026266:	83 e8 06             	sub    eax,0x6
c0026269:	0f b7 c0             	movzx  eax,ax
c002626c:	50                   	push   eax
c002626d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0026272:	50                   	push   eax
c0026273:	e8 32 fc ff ff       	call   c0025eaa <Vm::realToLinear(unsigned short, unsigned short)>
c0026278:	5a                   	pop    edx
c0026279:	59                   	pop    ecx
c002627a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c002627d:	8d 51 fa             	lea    edx,[ecx-0x6]
c0026280:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0026283:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026289:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c002628c:	8d 51 02             	lea    edx,[ecx+0x2]
c002628f:	66 89 10             	mov    WORD PTR [eax],dx
c0026292:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0026296:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c002629a:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c002629e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00262a1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00262a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262ab:	89 f1                	mov    ecx,esi
c00262ad:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00262b1:	89 f2                	mov    edx,esi
c00262b3:	0f b6 d6             	movzx  edx,dh
c00262b6:	0f b6 f1             	movzx  esi,cl
c00262b9:	74 0a                	je     c00262c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00262bb:	c1 e2 08             	shl    edx,0x8
c00262be:	09 f2                	or     edx,esi
c00262c0:	80 ce 02             	or     dh,0x2
c00262c3:	eb 08                	jmp    c00262cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00262c5:	c1 e2 08             	shl    edx,0x8
c00262c8:	09 f2                	or     edx,esi
c00262ca:	80 e6 fd             	and    dh,0xfd
c00262cd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00262d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00262d6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00262da:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00262e2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00262e5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00262ed:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00262f0:	5b                   	pop    ebx
c00262f1:	5e                   	pop    esi
c00262f2:	5f                   	pop    edi
c00262f3:	c3                   	ret    

c00262f4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00262f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262fe:	c1 e0 04             	shl    eax,0x4
c0026301:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0026304:	c3                   	ret    

c0026305 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0026305:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002630a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002630f:	c1 e0 04             	shl    eax,0x4
c0026312:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0026316:	c3                   	ret    

c0026317 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0026317:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002631c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026321:	c1 e0 04             	shl    eax,0x4
c0026324:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0026327:	c3                   	ret    

c0026328 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026328:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002632d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026332:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0026336:	c1 e0 04             	shl    eax,0x4
c0026339:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c002633c:	c3                   	ret    

c002633d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c002633d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026342:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026347:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002634b:	c1 e0 04             	shl    eax,0x4
c002634e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0026352:	c3                   	ret    

c0026353 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0026353:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026358:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002635d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026361:	c1 e0 04             	shl    eax,0x4
c0026364:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0026367:	c3                   	ret    

c0026368 <Vm::faultHandler(regs*)>:
c0026368:	55                   	push   ebp
c0026369:	57                   	push   edi
c002636a:	56                   	push   esi
c002636b:	53                   	push   ebx
c002636c:	83 ec 2c             	sub    esp,0x2c
c002636f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0026373:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0026376:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c002637a:	0f b7 f8             	movzx  edi,ax
c002637d:	0f b7 c0             	movzx  eax,ax
c0026380:	52                   	push   edx
c0026381:	50                   	push   eax
c0026382:	e8 23 fb ff ff       	call   c0025eaa <Vm::realToLinear(unsigned short, unsigned short)>
c0026387:	5a                   	pop    edx
c0026388:	59                   	pop    ecx
c0026389:	89 c1                	mov    ecx,eax
c002638b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002638e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026392:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0026397:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002639b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c002639e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00263a2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00263a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00263ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00263af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00263b3:	e8 f2 fa ff ff       	call   c0025eaa <Vm::realToLinear(unsigned short, unsigned short)>
c00263b8:	5e                   	pop    esi
c00263b9:	be 06 00 00 00       	mov    esi,0x6
c00263be:	5d                   	pop    ebp
c00263bf:	31 ed                	xor    ebp,ebp
c00263c1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00263c6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00263c9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00263cf:	0f 84 74 02 00 00    	je     c0026649 <Vm::faultHandler(regs*)+0x2e1>
c00263d5:	0f 87 94 00 00 00    	ja     c002646f <Vm::faultHandler(regs*)+0x107>
c00263db:	83 fa 66             	cmp    edx,0x66
c00263de:	0f 84 e2 01 00 00    	je     c00265c6 <Vm::faultHandler(regs*)+0x25e>
c00263e4:	77 47                	ja     c002642d <Vm::faultHandler(regs*)+0xc5>
c00263e6:	83 fa 36             	cmp    edx,0x36
c00263e9:	0f 84 ca 01 00 00    	je     c00265b9 <Vm::faultHandler(regs*)+0x251>
c00263ef:	77 1a                	ja     c002640b <Vm::faultHandler(regs*)+0xa3>
c00263f1:	83 fa 26             	cmp    edx,0x26
c00263f4:	0f 84 98 01 00 00    	je     c0026592 <Vm::faultHandler(regs*)+0x22a>
c00263fa:	83 fa 2e             	cmp    edx,0x2e
c00263fd:	0f 85 27 06 00 00    	jne    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c0026403:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026406:	31 f6                	xor    esi,esi
c0026408:	41                   	inc    ecx
c0026409:	eb bb                	jmp    c00263c6 <Vm::faultHandler(regs*)+0x5e>
c002640b:	83 fa 64             	cmp    edx,0x64
c002640e:	0f 84 8b 01 00 00    	je     c002659f <Vm::faultHandler(regs*)+0x237>
c0026414:	0f 87 92 01 00 00    	ja     c00265ac <Vm::faultHandler(regs*)+0x244>
c002641a:	83 fa 3e             	cmp    edx,0x3e
c002641d:	0f 85 07 06 00 00    	jne    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c0026423:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026426:	be 01 00 00 00       	mov    esi,0x1
c002642b:	eb db                	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c002642d:	83 fa 6d             	cmp    edx,0x6d
c0026430:	0f 84 34 03 00 00    	je     c002676a <Vm::faultHandler(regs*)+0x402>
c0026436:	77 17                	ja     c002644f <Vm::faultHandler(regs*)+0xe7>
c0026438:	83 fa 67             	cmp    edx,0x67
c002643b:	0f 84 92 01 00 00    	je     c00265d3 <Vm::faultHandler(regs*)+0x26b>
c0026441:	83 fa 6c             	cmp    edx,0x6c
c0026444:	0f 84 b1 02 00 00    	je     c00266fb <Vm::faultHandler(regs*)+0x393>
c002644a:	e9 db 05 00 00       	jmp    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c002644f:	83 fa 6f             	cmp    edx,0x6f
c0026452:	0f 84 40 04 00 00    	je     c0026898 <Vm::faultHandler(regs*)+0x530>
c0026458:	0f 82 a2 03 00 00    	jb     c0026800 <Vm::faultHandler(regs*)+0x498>
c002645e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0026464:	0f 84 76 01 00 00    	je     c00265e0 <Vm::faultHandler(regs*)+0x278>
c002646a:	e9 bb 05 00 00       	jmp    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c002646f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0026475:	0f 84 57 05 00 00    	je     c00269d2 <Vm::faultHandler(regs*)+0x66a>
c002647b:	0f 87 a9 00 00 00    	ja     c002652a <Vm::faultHandler(regs*)+0x1c2>
c0026481:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0026487:	0f 84 d6 04 00 00    	je     c0026963 <Vm::faultHandler(regs*)+0x5fb>
c002648d:	77 78                	ja     c0026507 <Vm::faultHandler(regs*)+0x19f>
c002648f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0026495:	0f 84 0e 02 00 00    	je     c00266a9 <Vm::faultHandler(regs*)+0x341>
c002649b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00264a1:	0f 85 83 05 00 00    	jne    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c00264a7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00264ab:	89 d1                	mov    ecx,edx
c00264ad:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00264b0:	c1 e1 08             	shl    ecx,0x8
c00264b3:	09 ca                	or     edx,ecx
c00264b5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00264b8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00264bc:	89 d1                	mov    ecx,edx
c00264be:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00264c2:	c1 e1 08             	shl    ecx,0x8
c00264c5:	09 ca                	or     edx,ecx
c00264c7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00264ca:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00264ce:	89 d1                	mov    ecx,edx
c00264d0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00264d4:	c1 e1 08             	shl    ecx,0x8
c00264d7:	09 ca                	or     edx,ecx
c00264d9:	81 ca 00 02 02 00    	or     edx,0x20200
c00264df:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00264e2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00264e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00264ec:	d1 e8                	shr    eax,1
c00264ee:	83 e0 01             	and    eax,0x1
c00264f1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00264f4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00264f7:	83 c0 06             	add    eax,0x6
c00264fa:	25 ff ff 00 00       	and    eax,0xffff
c00264ff:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026502:	e9 1f 05 00 00       	jmp    c0026a26 <Vm::faultHandler(regs*)+0x6be>
c0026507:	81 fa e6 00 00 00    	cmp    edx,0xe6
c002650d:	0f 84 95 04 00 00    	je     c00269a8 <Vm::faultHandler(regs*)+0x640>
c0026513:	0f 82 66 04 00 00    	jb     c002697f <Vm::faultHandler(regs*)+0x617>
c0026519:	81 fa e7 00 00 00    	cmp    edx,0xe7
c002651f:	0f 84 9a 04 00 00    	je     c00269bf <Vm::faultHandler(regs*)+0x657>
c0026525:	e9 00 05 00 00       	jmp    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c002652a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026530:	0f 84 dd 04 00 00    	je     c0026a13 <Vm::faultHandler(regs*)+0x6ab>
c0026536:	77 2e                	ja     c0026566 <Vm::faultHandler(regs*)+0x1fe>
c0026538:	81 fa ed 00 00 00    	cmp    edx,0xed
c002653e:	0f 84 aa 04 00 00    	je     c00269ee <Vm::faultHandler(regs*)+0x686>
c0026544:	81 fa ee 00 00 00    	cmp    edx,0xee
c002654a:	0f 85 da 04 00 00    	jne    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c0026550:	50                   	push   eax
c0026551:	50                   	push   eax
c0026552:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026556:	50                   	push   eax
c0026557:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002655b:	50                   	push   eax
c002655c:	e8 13 f9 ff ff       	call   c0025e74 <Vm::outbv(unsigned short, unsigned char)>
c0026561:	e9 a5 04 00 00       	jmp    c0026a0b <Vm::faultHandler(regs*)+0x6a3>
c0026566:	81 fa fa 00 00 00    	cmp    edx,0xfa
c002656c:	0f 84 6d 01 00 00    	je     c00266df <Vm::faultHandler(regs*)+0x377>
c0026572:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0026578:	0f 84 6f 01 00 00    	je     c00266ed <Vm::faultHandler(regs*)+0x385>
c002657e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0026584:	0f 85 a0 04 00 00    	jne    c0026a2a <Vm::faultHandler(regs*)+0x6c2>
c002658a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002658d:	e9 76 fe ff ff       	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c0026592:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026595:	be 02 00 00 00       	mov    esi,0x2
c002659a:	e9 69 fe ff ff       	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c002659f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00265a2:	be 03 00 00 00       	mov    esi,0x3
c00265a7:	e9 5c fe ff ff       	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c00265ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00265af:	be 04 00 00 00       	mov    esi,0x4
c00265b4:	e9 4f fe ff ff       	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c00265b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00265bc:	be 05 00 00 00       	mov    esi,0x5
c00265c1:	e9 42 fe ff ff       	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c00265c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00265c9:	bd 01 00 00 00       	mov    ebp,0x1
c00265ce:	e9 35 fe ff ff       	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c00265d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00265d6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00265db:	e9 28 fe ff ff       	jmp    c0026408 <Vm::faultHandler(regs*)+0xa0>
c00265e0:	83 e5 01             	and    ebp,0x1
c00265e3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00265e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265ea:	74 30                	je     c002661c <Vm::faultHandler(regs*)+0x2b4>
c00265ec:	83 e9 04             	sub    ecx,0x4
c00265ef:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00265f5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00265fb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00265fe:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026601:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026607:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002660b:	0f 84 12 04 00 00    	je     c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c0026611:	80 ce 02             	or     dh,0x2
c0026614:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026617:	e9 07 04 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c002661c:	83 e9 02             	sub    ecx,0x2
c002661f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026625:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026628:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002662c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026632:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026636:	74 05                	je     c002663d <Vm::faultHandler(regs*)+0x2d5>
c0026638:	80 ce 02             	or     dh,0x2
c002663b:	eb 03                	jmp    c0026640 <Vm::faultHandler(regs*)+0x2d8>
c002663d:	80 e6 fd             	and    dh,0xfd
c0026640:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026644:	e9 da 03 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c0026649:	83 e5 01             	and    ebp,0x1
c002664c:	74 2a                	je     c0026678 <Vm::faultHandler(regs*)+0x310>
c002664e:	8b 10                	mov    edx,DWORD PTR [eax]
c0026650:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026656:	81 ca 00 02 02 00    	or     edx,0x20200
c002665c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002665f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026661:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026667:	c1 e8 09             	shr    eax,0x9
c002666a:	83 e0 01             	and    eax,0x1
c002666d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026670:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026673:	83 c0 04             	add    eax,0x4
c0026676:	eb 24                	jmp    c002669c <Vm::faultHandler(regs*)+0x334>
c0026678:	0f b7 10             	movzx  edx,WORD PTR [eax]
c002667b:	81 ca 00 02 02 00    	or     edx,0x20200
c0026681:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026684:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0026687:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002668d:	c1 e8 09             	shr    eax,0x9
c0026690:	83 e0 01             	and    eax,0x1
c0026693:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026696:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026699:	83 c0 02             	add    eax,0x2
c002669c:	25 ff ff 00 00       	and    eax,0xffff
c00266a1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00266a4:	e9 7a 03 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c00266a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266ad:	3d ee 00 00 00       	cmp    eax,0xee
c00266b2:	75 10                	jne    c00266c4 <Vm::faultHandler(regs*)+0x35c>
c00266b4:	83 ec 0c             	sub    esp,0xc
c00266b7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00266ba:	e8 52 f8 ff ff       	call   c0025f11 <Vm::mainloop3(unsigned long)>
c00266bf:	e9 4a 03 00 00       	jmp    c0026a0e <Vm::faultHandler(regs*)+0x6a6>
c00266c4:	83 ec 0c             	sub    esp,0xc
c00266c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00266cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00266cf:	51                   	push   ecx
c00266d0:	50                   	push   eax
c00266d1:	53                   	push   ebx
c00266d2:	e8 80 fb ff ff       	call   c0026257 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00266d7:	83 c4 20             	add    esp,0x20
c00266da:	e9 47 03 00 00       	jmp    c0026a26 <Vm::faultHandler(regs*)+0x6be>
c00266df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00266e4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00266e8:	e9 36 03 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c00266ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00266f2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00266f6:	e9 28 03 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c00266fb:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026700:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026703:	74 2b                	je     c0026730 <Vm::faultHandler(regs*)+0x3c8>
c0026705:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c002670c:	76 22                	jbe    c0026730 <Vm::faultHandler(regs*)+0x3c8>
c002670e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026712:	50                   	push   eax
c0026713:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026717:	50                   	push   eax
c0026718:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002671c:	50                   	push   eax
c002671d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026721:	50                   	push   eax
c0026722:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026726:	50                   	push   eax
c0026727:	6a 6c                	push   0x6c
c0026729:	6a 6c                	push   0x6c
c002672b:	e9 c0 01 00 00       	jmp    c00268f0 <Vm::faultHandler(regs*)+0x588>
c0026730:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026734:	83 ec 0c             	sub    esp,0xc
c0026737:	0f b7 f6             	movzx  esi,si
c002673a:	50                   	push   eax
c002673b:	e8 21 f7 ff ff       	call   c0025e61 <Vm::inbv(unsigned short)>
c0026740:	83 c4 0c             	add    esp,0xc
c0026743:	0f b6 c0             	movzx  eax,al
c0026746:	50                   	push   eax
c0026747:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c002674b:	50                   	push   eax
c002674c:	56                   	push   esi
c002674d:	e8 d6 fb ff ff       	call   c0026328 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026752:	83 c4 10             	add    esp,0x10
c0026755:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026758:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002675c:	74 03                	je     c0026761 <Vm::faultHandler(regs*)+0x3f9>
c002675e:	48                   	dec    eax
c002675f:	eb 01                	jmp    c0026762 <Vm::faultHandler(regs*)+0x3fa>
c0026761:	40                   	inc    eax
c0026762:	0f b7 c0             	movzx  eax,ax
c0026765:	e9 8e 00 00 00       	jmp    c00267f8 <Vm::faultHandler(regs*)+0x490>
c002676a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002676f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026775:	74 29                	je     c00267a0 <Vm::faultHandler(regs*)+0x438>
c0026777:	3d ff ff 00 00       	cmp    eax,0xffff
c002677c:	76 22                	jbe    c00267a0 <Vm::faultHandler(regs*)+0x438>
c002677e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026782:	50                   	push   eax
c0026783:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026787:	50                   	push   eax
c0026788:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002678c:	50                   	push   eax
c002678d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026791:	50                   	push   eax
c0026792:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026796:	50                   	push   eax
c0026797:	6a 6d                	push   0x6d
c0026799:	6a 6d                	push   0x6d
c002679b:	e9 50 01 00 00       	jmp    c00268f0 <Vm::faultHandler(regs*)+0x588>
c00267a0:	83 e5 01             	and    ebp,0x1
c00267a3:	0f b7 c8             	movzx  ecx,ax
c00267a6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00267a9:	0f b7 f6             	movzx  esi,si
c00267ac:	74 1e                	je     c00267cc <Vm::faultHandler(regs*)+0x464>
c00267ae:	ed                   	in     eax,dx
c00267af:	55                   	push   ebp
c00267b0:	50                   	push   eax
c00267b1:	51                   	push   ecx
c00267b2:	56                   	push   esi
c00267b3:	e8 9b fb ff ff       	call   c0026353 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00267b8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00267bb:	83 c4 10             	add    esp,0x10
c00267be:	8d 50 04             	lea    edx,[eax+0x4]
c00267c1:	83 e8 04             	sub    eax,0x4
c00267c4:	81 e2 ff ff 00 00    	and    edx,0xffff
c00267ca:	eb 20                	jmp    c00267ec <Vm::faultHandler(regs*)+0x484>
c00267cc:	66 ed                	in     ax,dx
c00267ce:	57                   	push   edi
c00267cf:	0f b7 c0             	movzx  eax,ax
c00267d2:	50                   	push   eax
c00267d3:	51                   	push   ecx
c00267d4:	56                   	push   esi
c00267d5:	e8 63 fb ff ff       	call   c002633d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00267da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00267dd:	83 c4 10             	add    esp,0x10
c00267e0:	8d 50 02             	lea    edx,[eax+0x2]
c00267e3:	83 e8 02             	sub    eax,0x2
c00267e6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00267ec:	25 ff ff 00 00       	and    eax,0xffff
c00267f1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00267f5:	0f 44 c2             	cmove  eax,edx
c00267f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00267fb:	e9 23 02 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c0026800:	8d 46 ff             	lea    eax,[esi-0x1]
c0026803:	0f b6 f0             	movzx  esi,al
c0026806:	83 fe 05             	cmp    esi,0x5
c0026809:	77 23                	ja     c002682e <Vm::faultHandler(regs*)+0x4c6>
c002680b:	ff 24 b5 28 34 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccbd8]
c0026812:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026817:	eb 15                	jmp    c002682e <Vm::faultHandler(regs*)+0x4c6>
c0026819:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c002681d:	eb 0f                	jmp    c002682e <Vm::faultHandler(regs*)+0x4c6>
c002681f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026823:	eb 09                	jmp    c002682e <Vm::faultHandler(regs*)+0x4c6>
c0026825:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026829:	eb 03                	jmp    c002682e <Vm::faultHandler(regs*)+0x4c6>
c002682b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c002682e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026833:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026836:	74 29                	je     c0026861 <Vm::faultHandler(regs*)+0x4f9>
c0026838:	3d ff ff 00 00       	cmp    eax,0xffff
c002683d:	76 22                	jbe    c0026861 <Vm::faultHandler(regs*)+0x4f9>
c002683f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026843:	50                   	push   eax
c0026844:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026848:	50                   	push   eax
c0026849:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002684d:	50                   	push   eax
c002684e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026852:	50                   	push   eax
c0026853:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026857:	50                   	push   eax
c0026858:	6a 6e                	push   0x6e
c002685a:	6a 6e                	push   0x6e
c002685c:	e9 8f 00 00 00       	jmp    c00268f0 <Vm::faultHandler(regs*)+0x588>
c0026861:	52                   	push   edx
c0026862:	0f b7 c0             	movzx  eax,ax
c0026865:	52                   	push   edx
c0026866:	50                   	push   eax
c0026867:	57                   	push   edi
c0026868:	e8 87 fa ff ff       	call   c00262f4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c002686d:	59                   	pop    ecx
c002686e:	5e                   	pop    esi
c002686f:	0f b6 c0             	movzx  eax,al
c0026872:	50                   	push   eax
c0026873:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026877:	50                   	push   eax
c0026878:	e8 f7 f5 ff ff       	call   c0025e74 <Vm::outbv(unsigned short, unsigned char)>
c002687d:	83 c4 10             	add    esp,0x10
c0026880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026883:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026887:	74 03                	je     c002688c <Vm::faultHandler(regs*)+0x524>
c0026889:	48                   	dec    eax
c002688a:	eb 01                	jmp    c002688d <Vm::faultHandler(regs*)+0x525>
c002688c:	40                   	inc    eax
c002688d:	0f b7 c0             	movzx  eax,ax
c0026890:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026893:	e9 8b 01 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c0026898:	8d 46 ff             	lea    eax,[esi-0x1]
c002689b:	0f b6 f0             	movzx  esi,al
c002689e:	83 fe 05             	cmp    esi,0x5
c00268a1:	77 1e                	ja     c00268c1 <Vm::faultHandler(regs*)+0x559>
c00268a3:	ff 24 b5 40 34 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccbc0]
c00268aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00268ae:	eb 11                	jmp    c00268c1 <Vm::faultHandler(regs*)+0x559>
c00268b0:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00268b3:	eb 0c                	jmp    c00268c1 <Vm::faultHandler(regs*)+0x559>
c00268b5:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00268b8:	eb 07                	jmp    c00268c1 <Vm::faultHandler(regs*)+0x559>
c00268ba:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00268bd:	eb 02                	jmp    c00268c1 <Vm::faultHandler(regs*)+0x559>
c00268bf:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00268c1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00268c6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00268c9:	74 37                	je     c0026902 <Vm::faultHandler(regs*)+0x59a>
c00268cb:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00268d1:	76 2f                	jbe    c0026902 <Vm::faultHandler(regs*)+0x59a>
c00268d3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00268d7:	50                   	push   eax
c00268d8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00268dc:	50                   	push   eax
c00268dd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00268e1:	50                   	push   eax
c00268e2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00268e6:	50                   	push   eax
c00268e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00268eb:	50                   	push   eax
c00268ec:	6a 6f                	push   0x6f
c00268ee:	6a 6f                	push   0x6f
c00268f0:	68 cc 33 03 c0       	push   0xc00333cc
c00268f5:	e8 50 2c ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00268fa:	83 c4 20             	add    esp,0x20
c00268fd:	e9 86 01 00 00       	jmp    c0026a88 <Vm::faultHandler(regs*)+0x720>
c0026902:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026905:	0f b7 d7             	movzx  edx,di
c0026908:	0f b7 c6             	movzx  eax,si
c002690b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c002690e:	81 e1 00 04 00 00    	and    ecx,0x400
c0026914:	83 e5 01             	and    ebp,0x1
c0026917:	74 1c                	je     c0026935 <Vm::faultHandler(regs*)+0x5cd>
c0026919:	55                   	push   ebp
c002691a:	55                   	push   ebp
c002691b:	50                   	push   eax
c002691c:	52                   	push   edx
c002691d:	e8 f5 f9 ff ff       	call   c0026317 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026922:	83 c4 10             	add    esp,0x10
c0026925:	89 fa                	mov    edx,edi
c0026927:	ef                   	out    dx,eax
c0026928:	8d 46 04             	lea    eax,[esi+0x4]
c002692b:	83 ee 04             	sub    esi,0x4
c002692e:	25 ff ff 00 00       	and    eax,0xffff
c0026933:	eb 1b                	jmp    c0026950 <Vm::faultHandler(regs*)+0x5e8>
c0026935:	55                   	push   ebp
c0026936:	55                   	push   ebp
c0026937:	50                   	push   eax
c0026938:	52                   	push   edx
c0026939:	e8 c7 f9 ff ff       	call   c0026305 <Vm::readWordFromReal(unsigned short, unsigned short)>
c002693e:	83 c4 10             	add    esp,0x10
c0026941:	89 fa                	mov    edx,edi
c0026943:	66 ef                	out    dx,ax
c0026945:	8d 46 02             	lea    eax,[esi+0x2]
c0026948:	83 ee 02             	sub    esi,0x2
c002694b:	25 ff ff 00 00       	and    eax,0xffff
c0026950:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026956:	85 c9                	test   ecx,ecx
c0026958:	0f 44 f0             	cmove  esi,eax
c002695b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c002695e:	e9 c0 00 00 00       	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c0026963:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c002696a:	83 ec 0c             	sub    esp,0xc
c002696d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026971:	50                   	push   eax
c0026972:	e8 ea f4 ff ff       	call   c0025e61 <Vm::inbv(unsigned short)>
c0026977:	0f b6 c0             	movzx  eax,al
c002697a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002697d:	eb 3a                	jmp    c00269b9 <Vm::faultHandler(regs*)+0x651>
c002697f:	83 e5 01             	and    ebp,0x1
c0026982:	74 07                	je     c002698b <Vm::faultHandler(regs*)+0x623>
c0026984:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026988:	ed                   	in     eax,dx
c0026989:	eb 14                	jmp    c002699f <Vm::faultHandler(regs*)+0x637>
c002698b:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c002698e:	66 31 f6             	xor    si,si
c0026991:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026994:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026998:	66 ed                	in     ax,dx
c002699a:	0f b7 c0             	movzx  eax,ax
c002699d:	09 f0                	or     eax,esi
c002699f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00269a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00269a6:	eb 7e                	jmp    c0026a26 <Vm::faultHandler(regs*)+0x6be>
c00269a8:	52                   	push   edx
c00269a9:	52                   	push   edx
c00269aa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00269ae:	50                   	push   eax
c00269af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00269b3:	50                   	push   eax
c00269b4:	e8 bb f4 ff ff       	call   c0025e74 <Vm::outbv(unsigned short, unsigned char)>
c00269b9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00269bd:	eb 4f                	jmp    c0026a0e <Vm::faultHandler(regs*)+0x6a6>
c00269bf:	83 e5 01             	and    ebp,0x1
c00269c2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00269c5:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00269c9:	74 03                	je     c00269ce <Vm::faultHandler(regs*)+0x666>
c00269cb:	ef                   	out    dx,eax
c00269cc:	eb d4                	jmp    c00269a2 <Vm::faultHandler(regs*)+0x63a>
c00269ce:	66 ef                	out    dx,ax
c00269d0:	eb d0                	jmp    c00269a2 <Vm::faultHandler(regs*)+0x63a>
c00269d2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00269d6:	83 ec 0c             	sub    esp,0xc
c00269d9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00269e0:	50                   	push   eax
c00269e1:	e8 7b f4 ff ff       	call   c0025e61 <Vm::inbv(unsigned short)>
c00269e6:	0f b6 c0             	movzx  eax,al
c00269e9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00269ec:	eb 1d                	jmp    c0026a0b <Vm::faultHandler(regs*)+0x6a3>
c00269ee:	83 e5 01             	and    ebp,0x1
c00269f1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00269f4:	74 03                	je     c00269f9 <Vm::faultHandler(regs*)+0x691>
c00269f6:	ed                   	in     eax,dx
c00269f7:	eb 0d                	jmp    c0026a06 <Vm::faultHandler(regs*)+0x69e>
c00269f9:	66 ed                	in     ax,dx
c00269fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00269fe:	0f b7 c0             	movzx  eax,ax
c0026a01:	66 31 d2             	xor    dx,dx
c0026a04:	09 d0                	or     eax,edx
c0026a06:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026a09:	eb 18                	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c0026a0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026a0e:	83 c4 10             	add    esp,0x10
c0026a11:	eb 13                	jmp    c0026a26 <Vm::faultHandler(regs*)+0x6be>
c0026a13:	83 e5 01             	and    ebp,0x1
c0026a16:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026a19:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026a1c:	74 03                	je     c0026a21 <Vm::faultHandler(regs*)+0x6b9>
c0026a1e:	ef                   	out    dx,eax
c0026a1f:	eb 02                	jmp    c0026a23 <Vm::faultHandler(regs*)+0x6bb>
c0026a21:	66 ef                	out    dx,ax
c0026a23:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026a26:	b0 01                	mov    al,0x1
c0026a28:	eb 60                	jmp    c0026a8a <Vm::faultHandler(regs*)+0x722>
c0026a2a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026a2e:	50                   	push   eax
c0026a2f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026a33:	50                   	push   eax
c0026a34:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026a38:	50                   	push   eax
c0026a39:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026a3d:	50                   	push   eax
c0026a3e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026a42:	50                   	push   eax
c0026a43:	52                   	push   edx
c0026a44:	52                   	push   edx
c0026a45:	68 f9 33 03 c0       	push   0xc00333f9
c0026a4a:	e8 fb 2a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026a4f:	83 c4 20             	add    esp,0x20
c0026a52:	83 ec 0c             	sub    esp,0xc
c0026a55:	6a 60                	push   0x60
c0026a57:	e8 05 f4 ff ff       	call   c0025e61 <Vm::inbv(unsigned short)>
c0026a5c:	83 c4 10             	add    esp,0x10
c0026a5f:	0f b6 d0             	movzx  edx,al
c0026a62:	83 fa 1c             	cmp    edx,0x1c
c0026a65:	74 05                	je     c0026a6c <Vm::faultHandler(regs*)+0x704>
c0026a67:	83 fa 5a             	cmp    edx,0x5a
c0026a6a:	75 e6                	jne    c0026a52 <Vm::faultHandler(regs*)+0x6ea>
c0026a6c:	0f b6 c0             	movzx  eax,al
c0026a6f:	83 f8 1c             	cmp    eax,0x1c
c0026a72:	74 05                	je     c0026a79 <Vm::faultHandler(regs*)+0x711>
c0026a74:	83 f8 5a             	cmp    eax,0x5a
c0026a77:	75 0f                	jne    c0026a88 <Vm::faultHandler(regs*)+0x720>
c0026a79:	83 ec 0c             	sub    esp,0xc
c0026a7c:	6a 60                	push   0x60
c0026a7e:	e8 de f3 ff ff       	call   c0025e61 <Vm::inbv(unsigned short)>
c0026a83:	83 c4 10             	add    esp,0x10
c0026a86:	eb e4                	jmp    c0026a6c <Vm::faultHandler(regs*)+0x704>
c0026a88:	31 c0                	xor    eax,eax
c0026a8a:	83 c4 2c             	add    esp,0x2c
c0026a8d:	5b                   	pop    ebx
c0026a8e:	5e                   	pop    esi
c0026a8f:	5f                   	pop    edi
c0026a90:	5d                   	pop    ebp
c0026a91:	c3                   	ret    

c0026a92 <noCopro(unsigned long)>:
c0026a92:	c3                   	ret    

c0026a93 <nmiHandler(regs*, void*)>:
c0026a93:	83 ec 0c             	sub    esp,0xc
c0026a96:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026a9b:	83 ec 0c             	sub    esp,0xc
c0026a9e:	50                   	push   eax
c0026a9f:	e8 88 f3 fe ff       	call   c0015e2c <Computer::handleNMI()>
c0026aa4:	83 c4 10             	add    esp,0x10
c0026aa7:	90                   	nop
c0026aa8:	83 c4 0c             	add    esp,0xc
c0026aab:	c3                   	ret    

c0026aac <doubleFault(regs*, void*)>:
c0026aac:	55                   	push   ebp
c0026aad:	89 e5                	mov    ebp,esp
c0026aaf:	83 ec 08             	sub    esp,0x8
c0026ab2:	83 ec 0c             	sub    esp,0xc
c0026ab5:	68 58 34 03 c0       	push   0xc0033458
c0026aba:	e8 13 9a ff ff       	call   c00204d2 <KePanic(char const*)>
c0026abf:	83 c4 10             	add    esp,0x10
c0026ac2:	90                   	nop
c0026ac3:	c9                   	leave  
c0026ac4:	c3                   	ret    

c0026ac5 <displayDebugInfo(regs*)>:
c0026ac5:	83 ec 1c             	sub    esp,0x1c
c0026ac8:	0f 20 c0             	mov    eax,cr0
c0026acb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026acf:	0f 20 d0             	mov    eax,cr2
c0026ad2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ad6:	0f 20 d8             	mov    eax,cr3
c0026ad9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026add:	0f 20 e0             	mov    eax,cr4
c0026ae0:	89 04 24             	mov    DWORD PTR [esp],eax
c0026ae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ae7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026aea:	83 ec 08             	sub    esp,0x8
c0026aed:	50                   	push   eax
c0026aee:	68 74 34 03 c0       	push   0xc0033474
c0026af3:	e8 52 2a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026af8:	83 c4 10             	add    esp,0x10
c0026afb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026aff:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026b02:	83 ec 08             	sub    esp,0x8
c0026b05:	50                   	push   eax
c0026b06:	68 65 34 03 c0       	push   0xc0033465
c0026b0b:	e8 3a 2a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026b10:	83 c4 10             	add    esp,0x10
c0026b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b17:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026b1a:	83 ec 08             	sub    esp,0x8
c0026b1d:	50                   	push   eax
c0026b1e:	68 70 34 03 c0       	push   0xc0033470
c0026b23:	e8 22 2a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026b28:	83 c4 10             	add    esp,0x10
c0026b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026b32:	83 ec 08             	sub    esp,0x8
c0026b35:	50                   	push   eax
c0026b36:	68 7f 34 03 c0       	push   0xc003347f
c0026b3b:	e8 0a 2a ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026b40:	83 c4 10             	add    esp,0x10
c0026b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b47:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026b4a:	83 ec 08             	sub    esp,0x8
c0026b4d:	50                   	push   eax
c0026b4e:	68 8a 34 03 c0       	push   0xc003348a
c0026b53:	e8 f2 29 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026b58:	83 c4 10             	add    esp,0x10
c0026b5b:	83 ec 08             	sub    esp,0x8
c0026b5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026b62:	68 95 34 03 c0       	push   0xc0033495
c0026b67:	e8 de 29 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026b6c:	83 c4 10             	add    esp,0x10
c0026b6f:	83 ec 08             	sub    esp,0x8
c0026b72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026b76:	68 a0 34 03 c0       	push   0xc00334a0
c0026b7b:	e8 ca 29 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026b80:	83 c4 10             	add    esp,0x10
c0026b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026b8a:	c1 e0 05             	shl    eax,0x5
c0026b8d:	8d 90 40 48 03 c0    	lea    edx,[eax-0x3ffcb7c0]
c0026b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b97:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026b9a:	83 ec 04             	sub    esp,0x4
c0026b9d:	52                   	push   edx
c0026b9e:	50                   	push   eax
c0026b9f:	68 ab 34 03 c0       	push   0xc00334ab
c0026ba4:	e8 a1 29 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026ba9:	83 c4 10             	add    esp,0x10
c0026bac:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bb1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bb7:	83 ec 0c             	sub    esp,0xc
c0026bba:	50                   	push   eax
c0026bbb:	e8 ef 07 ff ff       	call   c00173af <setActiveTerminal(VgaText*)>
c0026bc0:	83 c4 10             	add    esp,0x10
c0026bc3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bce:	83 ec 08             	sub    esp,0x8
c0026bd1:	68 ba 34 03 c0       	push   0xc00334ba
c0026bd6:	50                   	push   eax
c0026bd7:	e8 10 0b ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026bdc:	83 c4 10             	add    esp,0x10
c0026bdf:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026be4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026bee:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026bf1:	83 ec 08             	sub    esp,0x8
c0026bf4:	52                   	push   edx
c0026bf5:	50                   	push   eax
c0026bf6:	e8 ab 0a ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026bfb:	83 c4 10             	add    esp,0x10
c0026bfe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c09:	83 ec 08             	sub    esp,0x8
c0026c0c:	68 c8 34 03 c0       	push   0xc00334c8
c0026c11:	50                   	push   eax
c0026c12:	e8 d5 0a ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026c17:	83 c4 10             	add    esp,0x10
c0026c1a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c25:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026c2a:	8b 12                	mov    edx,DWORD PTR [edx]
c0026c2c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026c2f:	83 c2 0c             	add    edx,0xc
c0026c32:	83 ec 08             	sub    esp,0x8
c0026c35:	52                   	push   edx
c0026c36:	50                   	push   eax
c0026c37:	e8 b0 0a ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026c3c:	83 c4 10             	add    esp,0x10
c0026c3f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c4a:	83 ec 08             	sub    esp,0x8
c0026c4d:	68 d1 34 03 c0       	push   0xc00334d1
c0026c52:	50                   	push   eax
c0026c53:	e8 94 0a ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026c58:	83 c4 10             	add    esp,0x10
c0026c5b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c6a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026c6d:	83 ec 08             	sub    esp,0x8
c0026c70:	52                   	push   edx
c0026c71:	50                   	push   eax
c0026c72:	e8 2f 0a ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026c77:	83 c4 10             	add    esp,0x10
c0026c7a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c85:	83 ec 08             	sub    esp,0x8
c0026c88:	68 d9 34 03 c0       	push   0xc00334d9
c0026c8d:	50                   	push   eax
c0026c8e:	e8 59 0a ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026c93:	83 c4 10             	add    esp,0x10
c0026c96:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ca1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ca5:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026ca8:	83 ec 08             	sub    esp,0x8
c0026cab:	52                   	push   edx
c0026cac:	50                   	push   eax
c0026cad:	e8 f4 09 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026cb2:	83 c4 10             	add    esp,0x10
c0026cb5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cc0:	83 ec 08             	sub    esp,0x8
c0026cc3:	68 e1 34 03 c0       	push   0xc00334e1
c0026cc8:	50                   	push   eax
c0026cc9:	e8 1e 0a ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026cce:	83 c4 10             	add    esp,0x10
c0026cd1:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cd6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cdc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ce0:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026ce3:	83 ec 08             	sub    esp,0x8
c0026ce6:	52                   	push   edx
c0026ce7:	50                   	push   eax
c0026ce8:	e8 b9 09 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026ced:	83 c4 10             	add    esp,0x10
c0026cf0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cf5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cfb:	83 ec 08             	sub    esp,0x8
c0026cfe:	68 e9 34 03 c0       	push   0xc00334e9
c0026d03:	50                   	push   eax
c0026d04:	e8 e3 09 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026d09:	83 c4 10             	add    esp,0x10
c0026d0c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026d1b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026d1e:	83 ec 08             	sub    esp,0x8
c0026d21:	52                   	push   edx
c0026d22:	50                   	push   eax
c0026d23:	e8 7e 09 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026d28:	83 c4 10             	add    esp,0x10
c0026d2b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d36:	83 ec 08             	sub    esp,0x8
c0026d39:	68 f1 34 03 c0       	push   0xc00334f1
c0026d3e:	50                   	push   eax
c0026d3f:	e8 a8 09 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026d44:	83 c4 10             	add    esp,0x10
c0026d47:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d52:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026d56:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026d59:	83 ec 08             	sub    esp,0x8
c0026d5c:	52                   	push   edx
c0026d5d:	50                   	push   eax
c0026d5e:	e8 43 09 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026d63:	83 c4 10             	add    esp,0x10
c0026d66:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d71:	83 ec 08             	sub    esp,0x8
c0026d74:	68 f9 34 03 c0       	push   0xc00334f9
c0026d79:	50                   	push   eax
c0026d7a:	e8 6d 09 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026d7f:	83 c4 10             	add    esp,0x10
c0026d82:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026d91:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026d94:	83 ec 08             	sub    esp,0x8
c0026d97:	52                   	push   edx
c0026d98:	50                   	push   eax
c0026d99:	e8 08 09 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026d9e:	83 c4 10             	add    esp,0x10
c0026da1:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026da6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026dac:	83 ec 08             	sub    esp,0x8
c0026daf:	68 01 35 03 c0       	push   0xc0033501
c0026db4:	50                   	push   eax
c0026db5:	e8 32 09 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026dba:	83 c4 10             	add    esp,0x10
c0026dbd:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026dc2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026dc8:	83 ec 08             	sub    esp,0x8
c0026dcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026dcf:	50                   	push   eax
c0026dd0:	e8 d1 08 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026dd5:	83 c4 10             	add    esp,0x10
c0026dd8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ddd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026de3:	83 ec 08             	sub    esp,0x8
c0026de6:	68 0a 35 03 c0       	push   0xc003350a
c0026deb:	50                   	push   eax
c0026dec:	e8 fb 08 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026df1:	83 c4 10             	add    esp,0x10
c0026df4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026df9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026dff:	83 ec 08             	sub    esp,0x8
c0026e02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026e06:	50                   	push   eax
c0026e07:	e8 9a 08 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026e0c:	83 c4 10             	add    esp,0x10
c0026e0f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026e14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e1a:	83 ec 08             	sub    esp,0x8
c0026e1d:	68 12 35 03 c0       	push   0xc0033512
c0026e22:	50                   	push   eax
c0026e23:	e8 c4 08 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0026e28:	83 c4 10             	add    esp,0x10
c0026e2b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026e30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e36:	83 ec 08             	sub    esp,0x8
c0026e39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026e3d:	50                   	push   eax
c0026e3e:	e8 63 08 ff ff       	call   c00176a6 <VgaText::putx(unsigned int)>
c0026e43:	83 c4 10             	add    esp,0x10
c0026e46:	fa                   	cli    
c0026e47:	f4                   	hlt    
c0026e48:	eb fe                	jmp    c0026e48 <displayDebugInfo(regs*)+0x383>

c0026e4a <HalSystemIdle()>:
c0026e4a:	56                   	push   esi
c0026e4b:	53                   	push   ebx
c0026e4c:	83 ec 14             	sub    esp,0x14
c0026e4f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026e5a:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026e60:	83 e0 04             	and    eax,0x4
c0026e63:	0f b6 c0             	movzx  eax,al
c0026e66:	85 c0                	test   eax,eax
c0026e68:	0f 95 c0             	setne  al
c0026e6b:	0f b6 c0             	movzx  eax,al
c0026e6e:	85 c0                	test   eax,eax
c0026e70:	74 4c                	je     c0026ebe <HalSystemIdle()+0x74>
c0026e72:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e77:	83 ec 08             	sub    esp,0x8
c0026e7a:	68 e1 00 00 00       	push   0xe1
c0026e7f:	50                   	push   eax
c0026e80:	e8 b3 ed fe ff       	call   c0015c38 <Computer::rdmsr(unsigned int)>
c0026e85:	83 c4 10             	add    esp,0x10
c0026e88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026e8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026e90:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026e99:	83 e2 02             	and    edx,0x2
c0026e9c:	89 d3                	mov    ebx,edx
c0026e9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026ea2:	83 e2 00             	and    edx,0x0
c0026ea5:	89 d6                	mov    esi,edx
c0026ea7:	56                   	push   esi
c0026ea8:	53                   	push   ebx
c0026ea9:	68 e1 00 00 00       	push   0xe1
c0026eae:	50                   	push   eax
c0026eaf:	e8 b0 ed fe ff       	call   c0015c64 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026eb4:	83 c4 10             	add    esp,0x10
c0026eb7:	e8 d8 92 fd ff       	call   c0000194 <doTPAUSE>
c0026ebc:	eb 01                	jmp    c0026ebf <HalSystemIdle()+0x75>
c0026ebe:	f4                   	hlt    
c0026ebf:	90                   	nop
c0026ec0:	83 c4 14             	add    esp,0x14
c0026ec3:	5b                   	pop    ebx
c0026ec4:	5e                   	pop    esi
c0026ec5:	c3                   	ret    

c0026ec6 <displayProgramFault(char const*)>:
c0026ec6:	83 ec 0c             	sub    esp,0xc
c0026ec9:	83 ec 0c             	sub    esp,0xc
c0026ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ed0:	e8 75 26 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026ed5:	83 c4 10             	add    esp,0x10
c0026ed8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026edd:	8b 00                	mov    eax,DWORD PTR [eax]
c0026edf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026ee2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ee8:	85 c0                	test   eax,eax
c0026eea:	74 21                	je     c0026f0d <displayProgramFault(char const*)+0x47>
c0026eec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ef3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026ef6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026efc:	6a 04                	push   0x4
c0026efe:	6a 0f                	push   0xf
c0026f00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026f04:	50                   	push   eax
c0026f05:	e8 54 08 ff ff       	call   c001775e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026f0a:	83 c4 10             	add    esp,0x10
c0026f0d:	90                   	nop
c0026f0e:	83 c4 0c             	add    esp,0xc
c0026f11:	c3                   	ret    

c0026f12 <gpFault(regs*, void*)>:
c0026f12:	83 ec 1c             	sub    esp,0x1c
c0026f15:	c7 05 74 02 04 c0 68 63 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0026368
c0026f1f:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026f24:	85 c0                	test   eax,eax
c0026f26:	74 1e                	je     c0026f46 <gpFault(regs*, void*)+0x34>
c0026f28:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026f2d:	83 ec 0c             	sub    esp,0xc
c0026f30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026f34:	ff d0                	call   eax
c0026f36:	83 c4 10             	add    esp,0x10
c0026f39:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026f3d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026f42:	85 c0                	test   eax,eax
c0026f44:	75 2e                	jne    c0026f74 <gpFault(regs*, void*)+0x62>
c0026f46:	83 ec 0c             	sub    esp,0xc
c0026f49:	68 1a 35 03 c0       	push   0xc003351a
c0026f4e:	e8 73 ff ff ff       	call   c0026ec6 <displayProgramFault(char const*)>
c0026f53:	83 c4 10             	add    esp,0x10
c0026f56:	83 ec 0c             	sub    esp,0xc
c0026f59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026f5d:	e8 63 fb ff ff       	call   c0026ac5 <displayDebugInfo(regs*)>
c0026f62:	83 c4 10             	add    esp,0x10
c0026f65:	83 ec 0c             	sub    esp,0xc
c0026f68:	6a 00                	push   0x0
c0026f6a:	e8 25 ee ff ff       	call   c0025d94 <Thr::terminateFromIRQ(int)>
c0026f6f:	83 c4 10             	add    esp,0x10
c0026f72:	eb 01                	jmp    c0026f75 <gpFault(regs*, void*)+0x63>
c0026f74:	90                   	nop
c0026f75:	83 c4 1c             	add    esp,0x1c
c0026f78:	c3                   	ret    

c0026f79 <pgFault(regs*, void*)>:
c0026f79:	83 ec 1c             	sub    esp,0x1c
c0026f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f80:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026f83:	0f 20 d0             	mov    eax,cr2
c0026f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f8e:	83 ec 04             	sub    esp,0x4
c0026f91:	52                   	push   edx
c0026f92:	50                   	push   eax
c0026f93:	68 f8 35 03 c0       	push   0xc00335f8
c0026f98:	e8 ad 25 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0026f9d:	83 c4 10             	add    esp,0x10
c0026fa0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026fa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fa7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026faa:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026fb0:	0f 20 d2             	mov    edx,cr2
c0026fb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026fb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026fbb:	83 ec 08             	sub    esp,0x8
c0026fbe:	52                   	push   edx
c0026fbf:	50                   	push   eax
c0026fc0:	e8 f5 1f ff ff       	call   c0018fba <VAS::tryLoadBackOffDisk(unsigned long)>
c0026fc5:	83 c4 10             	add    esp,0x10
c0026fc8:	0f b6 c0             	movzx  eax,al
c0026fcb:	85 c0                	test   eax,eax
c0026fcd:	75 2e                	jne    c0026ffd <pgFault(regs*, void*)+0x84>
c0026fcf:	83 ec 0c             	sub    esp,0xc
c0026fd2:	68 33 35 03 c0       	push   0xc0033533
c0026fd7:	e8 ea fe ff ff       	call   c0026ec6 <displayProgramFault(char const*)>
c0026fdc:	83 c4 10             	add    esp,0x10
c0026fdf:	83 ec 0c             	sub    esp,0xc
c0026fe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026fe6:	e8 da fa ff ff       	call   c0026ac5 <displayDebugInfo(regs*)>
c0026feb:	83 c4 10             	add    esp,0x10
c0026fee:	83 ec 0c             	sub    esp,0xc
c0026ff1:	6a 00                	push   0x0
c0026ff3:	e8 9c ed ff ff       	call   c0025d94 <Thr::terminateFromIRQ(int)>
c0026ff8:	83 c4 10             	add    esp,0x10
c0026ffb:	eb 01                	jmp    c0026ffe <pgFault(regs*, void*)+0x85>
c0026ffd:	90                   	nop
c0026ffe:	83 c4 1c             	add    esp,0x1c
c0027001:	c3                   	ret    

c0027002 <otherISRHandler(regs*, void*)>:
c0027002:	83 ec 0c             	sub    esp,0xc
c0027005:	83 ec 0c             	sub    esp,0xc
c0027008:	68 20 36 03 c0       	push   0xc0033620
c002700d:	e8 b4 fe ff ff       	call   c0026ec6 <displayProgramFault(char const*)>
c0027012:	83 c4 10             	add    esp,0x10
c0027015:	83 ec 0c             	sub    esp,0xc
c0027018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002701c:	e8 a4 fa ff ff       	call   c0026ac5 <displayDebugInfo(regs*)>
c0027021:	83 c4 10             	add    esp,0x10
c0027024:	83 ec 0c             	sub    esp,0xc
c0027027:	6a 00                	push   0x0
c0027029:	e8 66 ed ff ff       	call   c0025d94 <Thr::terminateFromIRQ(int)>
c002702e:	83 c4 10             	add    esp,0x10
c0027031:	90                   	nop
c0027032:	83 c4 0c             	add    esp,0xc
c0027035:	c3                   	ret    

c0027036 <opcodeFault(regs*, void*)>:
c0027036:	55                   	push   ebp
c0027037:	89 e5                	mov    ebp,esp
c0027039:	83 ec 08             	sub    esp,0x8
c002703c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002703f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0027042:	83 ec 08             	sub    esp,0x8
c0027045:	50                   	push   eax
c0027046:	68 3e 35 03 c0       	push   0xc003353e
c002704b:	e8 fa 24 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0027050:	83 c4 10             	add    esp,0x10
c0027053:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027058:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002705e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0027064:	0f b6 c0             	movzx  eax,al
c0027067:	85 c0                	test   eax,eax
c0027069:	74 21                	je     c002708c <opcodeFault(regs*, void*)+0x56>
c002706b:	83 ec 0c             	sub    esp,0xc
c002706e:	68 48 36 03 c0       	push   0xc0033648
c0027073:	e8 d2 24 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002707e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0027081:	8d 50 19             	lea    edx,[eax+0x19]
c0027084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027087:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c002708a:	eb 2b                	jmp    c00270b7 <opcodeFault(regs*, void*)+0x81>
c002708c:	83 ec 0c             	sub    esp,0xc
c002708f:	68 4c 35 03 c0       	push   0xc003354c
c0027094:	e8 2d fe ff ff       	call   c0026ec6 <displayProgramFault(char const*)>
c0027099:	83 c4 10             	add    esp,0x10
c002709c:	83 ec 0c             	sub    esp,0xc
c002709f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270a2:	e8 1e fa ff ff       	call   c0026ac5 <displayDebugInfo(regs*)>
c00270a7:	83 c4 10             	add    esp,0x10
c00270aa:	83 ec 0c             	sub    esp,0xc
c00270ad:	6a 00                	push   0x0
c00270af:	e8 e0 ec ff ff       	call   c0025d94 <Thr::terminateFromIRQ(int)>
c00270b4:	83 c4 10             	add    esp,0x10
c00270b7:	c9                   	leave  
c00270b8:	c3                   	ret    

c00270b9 <i386SaveCoprocessor(void*)>:
c00270b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00270bd:	83 c0 3f             	add    eax,0x3f
c00270c0:	83 e0 c0             	and    eax,0xffffffc0
c00270c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00270c7:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c00270cd <i386LoadCoprocessor(void*)>:
c00270cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00270d1:	83 c0 3f             	add    eax,0x3f
c00270d4:	83 e0 c0             	and    eax,0xffffffc0
c00270d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00270db:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c00270e1 <x87EmulHandler(regs*, void*)>:
c00270e1:	53                   	push   ebx
c00270e2:	83 ec 08             	sub    esp,0x8
c00270e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00270ea:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00270ee:	74 10                	je     c0027100 <x87EmulHandler(regs*, void*)+0x1f>
c00270f0:	83 ec 0c             	sub    esp,0xc
c00270f3:	68 59 35 03 c0       	push   0xc0033559
c00270f8:	e8 d5 93 ff ff       	call   c00204d2 <KePanic(char const*)>
c00270fd:	83 c4 10             	add    esp,0x10
c0027100:	0f 20 c0             	mov    eax,cr0
c0027103:	a8 08                	test   al,0x8
c0027105:	74 59                	je     c0027160 <x87EmulHandler(regs*, void*)+0x7f>
c0027107:	0f 06                	clts   
c0027109:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c002710e:	85 c0                	test   eax,eax
c0027110:	74 0e                	je     c0027120 <x87EmulHandler(regs*, void*)+0x3f>
c0027112:	83 ec 0c             	sub    esp,0xc
c0027115:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0027118:	e8 9c ff ff ff       	call   c00270b9 <i386SaveCoprocessor(void*)>
c002711d:	83 c4 10             	add    esp,0x10
c0027120:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0027126:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c002712a:	75 12                	jne    c002713e <x87EmulHandler(regs*, void*)+0x5d>
c002712c:	83 ec 0c             	sub    esp,0xc
c002712f:	68 40 02 00 00       	push   0x240
c0027134:	e8 db f5 fe ff       	call   c0016714 <malloc>
c0027139:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c002713c:	eb 10                	jmp    c002714e <x87EmulHandler(regs*, void*)+0x6d>
c002713e:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0027143:	83 ec 0c             	sub    esp,0xc
c0027146:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0027149:	e8 7f ff ff ff       	call   c00270cd <i386LoadCoprocessor(void*)>
c002714e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0027153:	83 c4 10             	add    esp,0x10
c0027156:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c002715b:	83 c4 08             	add    esp,0x8
c002715e:	5b                   	pop    ebx
c002715f:	c3                   	ret    
c0027160:	83 ec 0c             	sub    esp,0xc
c0027163:	68 6d 35 03 c0       	push   0xc003356d
c0027168:	e8 dd 23 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002716d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0027175:	83 c4 18             	add    esp,0x18
c0027178:	5b                   	pop    ebx
c0027179:	e9 16 ec ff ff       	jmp    c0025d94 <Thr::terminateFromIRQ(int)>

c002717e <HalInitialiseCoprocessor()>:
c002717e:	83 ec 10             	sub    esp,0x10
c0027181:	6a 00                	push   0x0
c0027183:	68 e1 70 02 c0       	push   0xc00270e1
c0027188:	6a 07                	push   0x7
c002718a:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0027194:	e8 91 49 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027199:	e8 02 71 00 00       	call   c002e2a0 <avxDetect>
c002719e:	83 c4 10             	add    esp,0x10
c00271a1:	85 c0                	test   eax,eax
c00271a3:	74 1c                	je     c00271c1 <HalInitialiseCoprocessor()+0x43>
c00271a5:	c7 05 70 02 04 c0 ca e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e2ca
c00271af:	c7 05 6c 02 04 c0 db e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e2db
c00271b9:	83 c4 0c             	add    esp,0xc
c00271bc:	e9 2b 71 00 00       	jmp    c002e2ec <avxInit>
c00271c1:	e8 4a 74 00 00       	call   c002e610 <sseDetect>
c00271c6:	85 c0                	test   eax,eax
c00271c8:	74 1c                	je     c00271e6 <HalInitialiseCoprocessor()+0x68>
c00271ca:	c7 05 70 02 04 c0 28 e6 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e628
c00271d4:	c7 05 6c 02 04 c0 30 e6 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e630
c00271de:	83 c4 0c             	add    esp,0xc
c00271e1:	e9 52 74 00 00       	jmp    c002e638 <sseInit>
c00271e6:	e8 6b 74 00 00       	call   c002e656 <x87Detect>
c00271eb:	85 c0                	test   eax,eax
c00271ed:	74 1c                	je     c002720b <HalInitialiseCoprocessor()+0x8d>
c00271ef:	c7 05 70 02 04 c0 71 e6 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e671
c00271f9:	c7 05 6c 02 04 c0 78 e6 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e678
c0027203:	83 c4 0c             	add    esp,0xc
c0027206:	e9 74 74 00 00       	jmp    c002e67f <x87Init>
c002720b:	c7 05 70 02 04 c0 92 6a 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc0026a92
c0027215:	c7 05 6c 02 04 c0 92 6a 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc0026a92
c002721f:	0f 20 c0             	mov    eax,cr0
c0027222:	83 c8 04             	or     eax,0x4
c0027225:	0f 22 c0             	mov    cr0,eax
c0027228:	83 c4 0c             	add    esp,0xc
c002722b:	c3                   	ret    

c002722c <HalPanic(char const*)>:
c002722c:	53                   	push   ebx
c002722d:	83 ec 10             	sub    esp,0x10
c0027230:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0027234:	fa                   	cli    
c0027235:	53                   	push   ebx
c0027236:	68 83 35 03 c0       	push   0xc0033583
c002723b:	e8 0a 23 ff ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0027240:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0027245:	83 c4 10             	add    esp,0x10
c0027248:	85 c0                	test   eax,eax
c002724a:	74 09                	je     c0027255 <HalPanic(char const*)+0x29>
c002724c:	83 ec 0c             	sub    esp,0xc
c002724f:	53                   	push   ebx
c0027250:	ff d0                	call   eax
c0027252:	83 c4 10             	add    esp,0x10
c0027255:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c002725a:	85 c0                	test   eax,eax
c002725c:	0f 84 dc 00 00 00    	je     c002733e <HalPanic(char const*)+0x112>
c0027262:	52                   	push   edx
c0027263:	6a 01                	push   0x1
c0027265:	6a 0f                	push   0xf
c0027267:	50                   	push   eax
c0027268:	e8 9d ff fe ff       	call   c001720a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002726d:	59                   	pop    ecx
c002726e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027274:	e8 81 01 ff ff       	call   c00173fa <VgaText::clearScreen()>
c0027279:	58                   	pop    eax
c002727a:	5a                   	pop    edx
c002727b:	68 58 16 03 c0       	push   0xc0031658
c0027280:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027286:	e8 b7 ff fe ff       	call   c0017242 <VgaText::setTitle(char*)>
c002728b:	83 c4 0c             	add    esp,0xc
c002728e:	6a 01                	push   0x1
c0027290:	6a 0f                	push   0xf
c0027292:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027298:	e8 6d ff fe ff       	call   c001720a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002729d:	59                   	pop    ecx
c002729e:	58                   	pop    eax
c002729f:	68 9c 35 03 c0       	push   0xc003359c
c00272a4:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272aa:	e8 3d 04 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c00272af:	83 c4 0c             	add    esp,0xc
c00272b2:	6a 0f                	push   0xf
c00272b4:	6a 01                	push   0x1
c00272b6:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272bc:	e8 49 ff fe ff       	call   c001720a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00272c1:	58                   	pop    eax
c00272c2:	5a                   	pop    edx
c00272c3:	68 a5 35 03 c0       	push   0xc00335a5
c00272c8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272ce:	e8 19 04 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c00272d3:	83 c4 0c             	add    esp,0xc
c00272d6:	6a 01                	push   0x1
c00272d8:	6a 0f                	push   0xf
c00272da:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272e0:	e8 25 ff fe ff       	call   c001720a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00272e5:	59                   	pop    ecx
c00272e6:	58                   	pop    eax
c00272e7:	68 e9 35 03 c0       	push   0xc00335e9
c00272ec:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272f2:	e8 f5 03 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c00272f7:	58                   	pop    eax
c00272f8:	5a                   	pop    edx
c00272f9:	68 b2 35 03 c0       	push   0xc00335b2
c00272fe:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027304:	e8 e3 03 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0027309:	59                   	pop    ecx
c002730a:	58                   	pop    eax
c002730b:	68 ec 35 03 c0       	push   0xc00335ec
c0027310:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027316:	e8 d1 03 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c002731b:	58                   	pop    eax
c002731c:	5a                   	pop    edx
c002731d:	53                   	push   ebx
c002731e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027324:	e8 c3 03 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c0027329:	59                   	pop    ecx
c002732a:	5b                   	pop    ebx
c002732b:	68 e9 35 03 c0       	push   0xc00335e9
c0027330:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027336:	e8 b1 03 ff ff       	call   c00176ec <VgaText::puts(char const*)>
c002733b:	83 c4 10             	add    esp,0x10
c002733e:	eb fe                	jmp    c002733e <HalPanic(char const*)+0x112>

c0027340 <HalQueryPerformanceCounter()>:
c0027340:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027345:	31 d2                	xor    edx,edx
c0027347:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002734d:	31 c0                	xor    eax,eax
c002734f:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0027356:	74 02                	je     c002735a <HalQueryPerformanceCounter()+0x1a>
c0027358:	0f 31                	rdtsc  
c002735a:	c3                   	ret    

c002735b <HalInitialise()>:
c002735b:	53                   	push   ebx
c002735c:	83 ec 08             	sub    esp,0x8
c002735f:	e8 fd 49 ff ff       	call   c001bd61 <setupINTS()>
c0027364:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027369:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0027370:	75 0f                	jne    c0027381 <HalInitialise()+0x26>
c0027372:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027378:	83 e2 fe             	and    edx,0xfffffffe
c002737b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027381:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0027388:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c002738e:	83 e2 fe             	and    edx,0xfffffffe
c0027391:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027397:	e8 a0 02 00 00       	call   c002763c <picOpen()>
c002739c:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00273a3:	74 0a                	je     c00273af <HalInitialise()+0x54>
c00273a5:	e8 e2 01 00 00       	call   c002758c <picDisable()>
c00273aa:	e8 63 68 00 00       	call   c002dc12 <apicOpen()>
c00273af:	50                   	push   eax
c00273b0:	bb 0f 00 00 00       	mov    ebx,0xf
c00273b5:	6a 00                	push   0x0
c00273b7:	68 02 70 02 c0       	push   0xc0027002
c00273bc:	6a 00                	push   0x0
c00273be:	e8 67 47 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273c3:	83 c4 0c             	add    esp,0xc
c00273c6:	6a 00                	push   0x0
c00273c8:	68 02 70 02 c0       	push   0xc0027002
c00273cd:	6a 01                	push   0x1
c00273cf:	e8 56 47 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273d4:	83 c4 0c             	add    esp,0xc
c00273d7:	6a 00                	push   0x0
c00273d9:	68 93 6a 02 c0       	push   0xc0026a93
c00273de:	6a 02                	push   0x2
c00273e0:	e8 45 47 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273e5:	83 c4 0c             	add    esp,0xc
c00273e8:	6a 00                	push   0x0
c00273ea:	68 02 70 02 c0       	push   0xc0027002
c00273ef:	6a 03                	push   0x3
c00273f1:	e8 34 47 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273f6:	83 c4 0c             	add    esp,0xc
c00273f9:	6a 00                	push   0x0
c00273fb:	68 02 70 02 c0       	push   0xc0027002
c0027400:	6a 04                	push   0x4
c0027402:	e8 23 47 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027407:	83 c4 0c             	add    esp,0xc
c002740a:	6a 00                	push   0x0
c002740c:	68 02 70 02 c0       	push   0xc0027002
c0027411:	6a 05                	push   0x5
c0027413:	e8 12 47 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027418:	83 c4 0c             	add    esp,0xc
c002741b:	6a 00                	push   0x0
c002741d:	68 36 70 02 c0       	push   0xc0027036
c0027422:	6a 06                	push   0x6
c0027424:	e8 01 47 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027429:	83 c4 0c             	add    esp,0xc
c002742c:	6a 00                	push   0x0
c002742e:	68 ac 6a 02 c0       	push   0xc0026aac
c0027433:	6a 08                	push   0x8
c0027435:	e8 f0 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002743a:	83 c4 0c             	add    esp,0xc
c002743d:	6a 00                	push   0x0
c002743f:	68 02 70 02 c0       	push   0xc0027002
c0027444:	6a 09                	push   0x9
c0027446:	e8 df 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002744b:	83 c4 0c             	add    esp,0xc
c002744e:	6a 00                	push   0x0
c0027450:	68 02 70 02 c0       	push   0xc0027002
c0027455:	6a 0a                	push   0xa
c0027457:	e8 ce 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002745c:	83 c4 0c             	add    esp,0xc
c002745f:	6a 00                	push   0x0
c0027461:	68 02 70 02 c0       	push   0xc0027002
c0027466:	6a 0b                	push   0xb
c0027468:	e8 bd 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002746d:	83 c4 0c             	add    esp,0xc
c0027470:	6a 00                	push   0x0
c0027472:	68 12 6f 02 c0       	push   0xc0026f12
c0027477:	6a 0d                	push   0xd
c0027479:	e8 ac 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002747e:	83 c4 0c             	add    esp,0xc
c0027481:	6a 00                	push   0x0
c0027483:	68 79 6f 02 c0       	push   0xc0026f79
c0027488:	6a 0e                	push   0xe
c002748a:	e8 9b 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002748f:	83 c4 10             	add    esp,0x10
c0027492:	50                   	push   eax
c0027493:	6a 00                	push   0x0
c0027495:	68 02 70 02 c0       	push   0xc0027002
c002749a:	53                   	push   ebx
c002749b:	43                   	inc    ebx
c002749c:	e8 89 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00274a1:	83 c4 10             	add    esp,0x10
c00274a4:	83 fb 1e             	cmp    ebx,0x1e
c00274a7:	75 e9                	jne    c0027492 <HalInitialise()+0x137>
c00274a9:	50                   	push   eax
c00274aa:	6a 00                	push   0x0
c00274ac:	68 9c 1d 02 c0       	push   0xc0021d9c
c00274b1:	6a 60                	push   0x60
c00274b3:	e8 72 46 ff ff       	call   c001bb2a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00274b8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00274bd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00274c7:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00274ce:	e8 41 f2 fe ff       	call   c0016714 <malloc>
c00274d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00274d6:	89 c3                	mov    ebx,eax
c00274d8:	e8 37 09 00 00       	call   c0027e14 <RTC::RTC()>
c00274dd:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00274e7:	5a                   	pop    edx
c00274e8:	59                   	pop    ecx
c00274e9:	53                   	push   ebx
c00274ea:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00274f0:	e8 eb 40 ff ff       	call   c001b5e0 <Device::addChild(Device*)>
c00274f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00274f7:	6a 00                	push   0x0
c00274f9:	6a 00                	push   0x0
c00274fb:	6a 00                	push   0x0
c00274fd:	53                   	push   ebx
c00274fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027501:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027506:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002750c:	83 c4 28             	add    esp,0x28
c002750f:	5b                   	pop    ebx
c0027510:	c3                   	ret    

c0027511 <HalMakeBeep(int)>:
c0027511:	53                   	push   ebx
c0027512:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027516:	85 db                	test   ebx,ebx
c0027518:	75 07                	jne    c0027521 <HalMakeBeep(int)+0x10>
c002751a:	e4 61                	in     al,0x61
c002751c:	83 e0 fc             	and    eax,0xfffffffc
c002751f:	eb 26                	jmp    c0027547 <HalMakeBeep(int)+0x36>
c0027521:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027526:	99                   	cdq    
c0027527:	f7 fb                	idiv   ebx
c0027529:	89 c1                	mov    ecx,eax
c002752b:	b0 b6                	mov    al,0xb6
c002752d:	e6 43                	out    0x43,al
c002752f:	88 c8                	mov    al,cl
c0027531:	e6 42                	out    0x42,al
c0027533:	89 c8                	mov    eax,ecx
c0027535:	c1 e8 08             	shr    eax,0x8
c0027538:	e6 42                	out    0x42,al
c002753a:	e4 61                	in     al,0x61
c002753c:	89 c2                	mov    edx,eax
c002753e:	83 ca 03             	or     edx,0x3
c0027541:	38 d0                	cmp    al,dl
c0027543:	74 04                	je     c0027549 <HalMakeBeep(int)+0x38>
c0027545:	88 d0                	mov    al,dl
c0027547:	e6 61                	out    0x61,al
c0027549:	5b                   	pop    ebx
c002754a:	c3                   	ret    

c002754b <HalGetRand()>:
c002754b:	31 c0                	xor    eax,eax
c002754d:	c3                   	ret    

c002754e <HalEndOfInterrupt(int)>:
c002754e:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0027555:	74 23                	je     c002757a <HalEndOfInterrupt(int)+0x2c>
c0027557:	83 ec 14             	sub    esp,0x14
c002755a:	6a 1b                	push   0x1b
c002755c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027562:	e8 d1 e6 fe ff       	call   c0015c38 <Computer::rdmsr(unsigned int)>
c0027567:	25 00 f0 ff ff       	and    eax,0xfffff000
c002756c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0027576:	83 c4 1c             	add    esp,0x1c
c0027579:	c3                   	ret    
c002757a:	e9 41 02 00 00       	jmp    c00277c0 <picEOI(int)>

c002757f <HalRestart()>:
c002757f:	c3                   	ret    

c0027580 <HalShutdown()>:
c0027580:	c3                   	ret    

c0027581 <HalSleep()>:
c0027581:	c3                   	ret    
c0027582:	66 90                	xchg   ax,ax

c0027584 <picIoWait()>:
c0027584:	eb 00                	jmp    c0027586 <picIoWait()+0x2>
c0027586:	eb 00                	jmp    c0027588 <picIoWait()+0x4>
c0027588:	90                   	nop
c0027589:	c3                   	ret    
c002758a:	66 90                	xchg   ax,ax

c002758c <picDisable()>:
c002758c:	83 ec 10             	sub    esp,0x10
c002758f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0027596:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c002759b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002759f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00275a4:	ee                   	out    dx,al
c00275a5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00275ac:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00275b1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00275b5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00275ba:	ee                   	out    dx,al
c00275bb:	90                   	nop
c00275bc:	83 c4 10             	add    esp,0x10
c00275bf:	c3                   	ret    

c00275c0 <picGetIRQReg(int)>:
c00275c0:	83 ec 10             	sub    esp,0x10
c00275c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00275c7:	0f b6 c0             	movzx  eax,al
c00275ca:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00275d1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00275d5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00275d9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00275de:	ee                   	out    dx,al
c00275df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00275e3:	0f b6 c0             	movzx  eax,al
c00275e6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00275ed:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00275f1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00275f5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00275fa:	ee                   	out    dx,al
c00275fb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027602:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0027607:	89 c2                	mov    edx,eax
c0027609:	ec                   	in     al,dx
c002760a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002760e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027612:	0f b6 c0             	movzx  eax,al
c0027615:	c1 e0 08             	shl    eax,0x8
c0027618:	89 c1                	mov    ecx,eax
c002761a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027621:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0027626:	89 c2                	mov    edx,eax
c0027628:	ec                   	in     al,dx
c0027629:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002762d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027631:	0f b6 c0             	movzx  eax,al
c0027634:	09 c8                	or     eax,ecx
c0027636:	83 c4 10             	add    esp,0x10
c0027639:	c3                   	ret    
c002763a:	66 90                	xchg   ax,ax

c002763c <picOpen()>:
c002763c:	83 ec 50             	sub    esp,0x50
c002763f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0027646:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002764b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002764f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027653:	ee                   	out    dx,al
c0027654:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c002765b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0027660:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027668:	ee                   	out    dx,al
c0027669:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0027671:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0027679:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0027680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027684:	89 c2                	mov    edx,eax
c0027686:	ec                   	in     al,dx
c0027687:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c002768b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002768f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0027693:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c002769a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002769e:	89 c2                	mov    edx,eax
c00276a0:	ec                   	in     al,dx
c00276a1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00276a5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00276a9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00276ad:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00276b4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00276b9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00276bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00276c1:	ee                   	out    dx,al
c00276c2:	e8 bd fe ff ff       	call   c0027584 <picIoWait()>
c00276c7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00276ce:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00276d3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00276d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00276db:	ee                   	out    dx,al
c00276dc:	e8 a3 fe ff ff       	call   c0027584 <picIoWait()>
c00276e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00276e5:	0f b6 c0             	movzx  eax,al
c00276e8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00276ef:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00276f3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00276f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00276fb:	ee                   	out    dx,al
c00276fc:	e8 83 fe ff ff       	call   c0027584 <picIoWait()>
c0027701:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027705:	0f b6 c0             	movzx  eax,al
c0027708:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002770f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027713:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027717:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002771b:	ee                   	out    dx,al
c002771c:	e8 63 fe ff ff       	call   c0027584 <picIoWait()>
c0027721:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027728:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c002772d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027731:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027735:	ee                   	out    dx,al
c0027736:	e8 49 fe ff ff       	call   c0027584 <picIoWait()>
c002773b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0027742:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027747:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c002774b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002774f:	ee                   	out    dx,al
c0027750:	e8 2f fe ff ff       	call   c0027584 <picIoWait()>
c0027755:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c002775c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0027761:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0027765:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027769:	ee                   	out    dx,al
c002776a:	e8 15 fe ff ff       	call   c0027584 <picIoWait()>
c002776f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0027776:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c002777b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c002777f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027783:	ee                   	out    dx,al
c0027784:	e8 fb fd ff ff       	call   c0027584 <picIoWait()>
c0027789:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c002778e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027795:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027799:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c002779d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00277a1:	ee                   	out    dx,al
c00277a2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00277a7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00277ae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00277b2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00277b6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00277ba:	ee                   	out    dx,al
c00277bb:	90                   	nop
c00277bc:	83 c4 50             	add    esp,0x50
c00277bf:	c3                   	ret    

c00277c0 <picEOI(int)>:
c00277c0:	83 ec 10             	sub    esp,0x10
c00277c3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00277c8:	75 1e                	jne    c00277e8 <picEOI(int)+0x28>
c00277ca:	6a 0b                	push   0xb
c00277cc:	e8 ef fd ff ff       	call   c00275c0 <picGetIRQReg(int)>
c00277d1:	83 c4 04             	add    esp,0x4
c00277d4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00277d9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00277de:	25 80 00 00 00       	and    eax,0x80
c00277e3:	74 73                	je     c0027858 <picEOI(int)+0x98>
c00277e5:	8d 76 00             	lea    esi,[esi+0x0]
c00277e8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00277ed:	75 31                	jne    c0027820 <picEOI(int)+0x60>
c00277ef:	6a 0b                	push   0xb
c00277f1:	e8 ca fd ff ff       	call   c00275c0 <picGetIRQReg(int)>
c00277f6:	83 c4 04             	add    esp,0x4
c00277f9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00277fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027802:	98                   	cwde   
c0027803:	85 c0                	test   eax,eax
c0027805:	78 19                	js     c0027820 <picEOI(int)+0x60>
c0027807:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002780e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027813:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027817:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002781c:	ee                   	out    dx,al
c002781d:	eb 3d                	jmp    c002785c <picEOI(int)+0x9c>
c002781f:	90                   	nop
c0027820:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027825:	7e 19                	jle    c0027840 <picEOI(int)+0x80>
c0027827:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002782e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027833:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027837:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002783c:	ee                   	out    dx,al
c002783d:	8d 76 00             	lea    esi,[esi+0x0]
c0027840:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027847:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c002784c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027850:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027855:	ee                   	out    dx,al
c0027856:	eb 04                	jmp    c002785c <picEOI(int)+0x9c>
c0027858:	90                   	nop
c0027859:	8d 76 00             	lea    esi,[esi+0x0]
c002785c:	83 c4 10             	add    esp,0x10
c002785f:	c3                   	ret    

c0027860 <RTC::open(int, int, void*)>:
c0027860:	31 c0                	xor    eax,eax
c0027862:	c3                   	ret    
c0027863:	90                   	nop

c0027864 <RTC::close(int, int, void*)>:
c0027864:	31 c0                	xor    eax,eax
c0027866:	c3                   	ret    
c0027867:	90                   	nop

c0027868 <RTC::timeInSecondsUTC()>:
c0027868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002786c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0027872:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027878:	c3                   	ret    
c0027879:	90                   	nop

c002787a <RTC::timeInDatetimeUTC()>:
c002787a:	53                   	push   ebx
c002787b:	83 ec 14             	sub    esp,0x14
c002787e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027882:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027886:	8b 10                	mov    edx,DWORD PTR [eax]
c0027888:	50                   	push   eax
c0027889:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002788c:	83 c4 0c             	add    esp,0xc
c002788f:	52                   	push   edx
c0027890:	50                   	push   eax
c0027891:	53                   	push   ebx
c0027892:	e8 bd 3a ff ff       	call   c001b354 <secondsToDatetime(unsigned long long)>
c0027897:	89 d8                	mov    eax,ebx
c0027899:	83 c4 14             	add    esp,0x14
c002789c:	5b                   	pop    ebx
c002789d:	c2 04 00             	ret    0x4

c00278a0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00278a0:	56                   	push   esi
c00278a1:	53                   	push   ebx
c00278a2:	83 ec 14             	sub    esp,0x14
c00278a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00278a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00278ab:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00278ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00278b2:	52                   	push   edx
c00278b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00278b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00278bb:	50                   	push   eax
c00278bc:	e8 93 3a ff ff       	call   c001b354 <secondsToDatetime(unsigned long long)>
c00278c1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00278c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00278c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00278cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00278d1:	89 f0                	mov    eax,esi
c00278d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00278d7:	83 c4 20             	add    esp,0x20
c00278da:	5b                   	pop    ebx
c00278db:	5e                   	pop    esi
c00278dc:	ff e0                	jmp    eax

c00278de <RTC::~RTC()>:
c00278de:	83 ec 0c             	sub    esp,0xc
c00278e1:	ba 88 36 03 c0       	mov    edx,0xc0033688
c00278e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ea:	89 10                	mov    DWORD PTR [eax],edx
c00278ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f0:	83 ec 0c             	sub    esp,0xc
c00278f3:	50                   	push   eax
c00278f4:	e8 e7 37 ff ff       	call   c001b0e0 <Clock::~Clock()>
c00278f9:	83 c4 10             	add    esp,0x10
c00278fc:	90                   	nop
c00278fd:	83 c4 0c             	add    esp,0xc
c0027900:	c3                   	ret    
c0027901:	90                   	nop

c0027902 <RTC::~RTC()>:
c0027902:	83 ec 0c             	sub    esp,0xc
c0027905:	83 ec 0c             	sub    esp,0xc
c0027908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002790c:	e8 cd ff ff ff       	call   c00278de <RTC::~RTC()>
c0027911:	83 c4 10             	add    esp,0x10
c0027914:	83 ec 08             	sub    esp,0x8
c0027917:	68 60 01 00 00       	push   0x160
c002791c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027920:	e8 27 1b ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c0027925:	83 c4 10             	add    esp,0x10
c0027928:	83 c4 0c             	add    esp,0xc
c002792b:	c3                   	ret    

c002792c <RTC::get_update_in_progress_flag()>:
c002792c:	83 ec 14             	sub    esp,0x14
c002792f:	6a 0a                	push   0xa
c0027931:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027937:	e8 b4 e3 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c002793c:	83 c4 1c             	add    esp,0x1c
c002793f:	0f b6 c0             	movzx  eax,al
c0027942:	c1 e8 07             	shr    eax,0x7
c0027945:	c3                   	ret    

c0027946 <RTC::completeRTCRefresh()>:
c0027946:	55                   	push   ebp
c0027947:	57                   	push   edi
c0027948:	56                   	push   esi
c0027949:	53                   	push   ebx
c002794a:	83 ec 3c             	sub    esp,0x3c
c002794d:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027953:	83 ec 0c             	sub    esp,0xc
c0027956:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002795a:	e8 cd ff ff ff       	call   c002792c <RTC::get_update_in_progress_flag()>
c002795f:	83 c4 10             	add    esp,0x10
c0027962:	84 c0                	test   al,al
c0027964:	74 0e                	je     c0027974 <RTC::completeRTCRefresh()+0x2e>
c0027966:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c002796c:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027972:	73 df                	jae    c0027953 <RTC::completeRTCRefresh()+0xd>
c0027974:	50                   	push   eax
c0027975:	50                   	push   eax
c0027976:	6a 00                	push   0x0
c0027978:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002797e:	e8 6d e3 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027983:	89 c7                	mov    edi,eax
c0027985:	58                   	pop    eax
c0027986:	5a                   	pop    edx
c0027987:	6a 02                	push   0x2
c0027989:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002798f:	e8 5c e3 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027994:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027998:	59                   	pop    ecx
c0027999:	5b                   	pop    ebx
c002799a:	6a 04                	push   0x4
c002799c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279a2:	e8 49 e3 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c00279a7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00279ab:	5e                   	pop    esi
c00279ac:	5d                   	pop    ebp
c00279ad:	6a 07                	push   0x7
c00279af:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279b5:	e8 36 e3 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c00279ba:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00279be:	58                   	pop    eax
c00279bf:	5a                   	pop    edx
c00279c0:	6a 08                	push   0x8
c00279c2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279c8:	e8 23 e3 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c00279cd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00279d1:	59                   	pop    ecx
c00279d2:	5b                   	pop    ebx
c00279d3:	6a 09                	push   0x9
c00279d5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279db:	e8 10 e3 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c00279e0:	0f b6 c0             	movzx  eax,al
c00279e3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00279e7:	83 c4 10             	add    esp,0x10
c00279ea:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00279f0:	83 ec 0c             	sub    esp,0xc
c00279f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00279f7:	e8 30 ff ff ff       	call   c002792c <RTC::get_update_in_progress_flag()>
c00279fc:	83 c4 10             	add    esp,0x10
c00279ff:	84 c0                	test   al,al
c0027a01:	74 0e                	je     c0027a11 <RTC::completeRTCRefresh()+0xcb>
c0027a03:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027a09:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027a0f:	73 df                	jae    c00279f0 <RTC::completeRTCRefresh()+0xaa>
c0027a11:	51                   	push   ecx
c0027a12:	51                   	push   ecx
c0027a13:	6a 00                	push   0x0
c0027a15:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a1b:	e8 d0 e2 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027a20:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027a24:	5b                   	pop    ebx
c0027a25:	5e                   	pop    esi
c0027a26:	6a 02                	push   0x2
c0027a28:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a2e:	e8 bd e2 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027a33:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027a37:	5d                   	pop    ebp
c0027a38:	58                   	pop    eax
c0027a39:	6a 04                	push   0x4
c0027a3b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a41:	e8 aa e2 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027a46:	88 c3                	mov    bl,al
c0027a48:	58                   	pop    eax
c0027a49:	5a                   	pop    edx
c0027a4a:	6a 07                	push   0x7
c0027a4c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a52:	e8 99 e2 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027a57:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027a5b:	59                   	pop    ecx
c0027a5c:	5e                   	pop    esi
c0027a5d:	6a 08                	push   0x8
c0027a5f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a65:	e8 86 e2 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027a6a:	5d                   	pop    ebp
c0027a6b:	89 c6                	mov    esi,eax
c0027a6d:	58                   	pop    eax
c0027a6e:	6a 09                	push   0x9
c0027a70:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a76:	e8 75 e2 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027a7b:	89 f9                	mov    ecx,edi
c0027a7d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027a81:	83 c4 10             	add    esp,0x10
c0027a84:	0f b6 e8             	movzx  ebp,al
c0027a87:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a8c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027a90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027a94:	74 27                	je     c0027abd <RTC::completeRTCRefresh()+0x177>
c0027a96:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027a9a:	89 f0                	mov    eax,esi
c0027a9c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027aa0:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027aa4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027aa8:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027aac:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027ab0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027ab4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027ab8:	e9 2d ff ff ff       	jmp    c00279ea <RTC::completeRTCRefresh()+0xa4>
c0027abd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027ac2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027ac6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027aca:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0027ace:	75 c6                	jne    c0027a96 <RTC::completeRTCRefresh()+0x150>
c0027ad0:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0027ad5:	89 f1                	mov    ecx,esi
c0027ad7:	0f b6 fb             	movzx  edi,bl
c0027ada:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027ade:	0f b6 c9             	movzx  ecx,cl
c0027ae1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027ae5:	89 f1                	mov    ecx,esi
c0027ae7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027aeb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027aef:	0f 94 c2             	sete   dl
c0027af2:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027af6:	0f 94 c0             	sete   al
c0027af9:	21 d0                	and    eax,edx
c0027afb:	31 d2                	xor    edx,edx
c0027afd:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027b01:	0f 94 c2             	sete   dl
c0027b04:	85 c2                	test   edx,eax
c0027b06:	74 8e                	je     c0027a96 <RTC::completeRTCRefresh()+0x150>
c0027b08:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027b0c:	75 88                	jne    c0027a96 <RTC::completeRTCRefresh()+0x150>
c0027b0e:	52                   	push   edx
c0027b0f:	52                   	push   edx
c0027b10:	6a 0b                	push   0xb
c0027b12:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b18:	e8 d3 e1 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027b1d:	83 c4 10             	add    esp,0x10
c0027b20:	a8 04                	test   al,0x4
c0027b22:	75 7a                	jne    c0027b9e <RTC::completeRTCRefresh()+0x258>
c0027b24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027b28:	c1 ef 04             	shr    edi,0x4
c0027b2b:	83 e6 0f             	and    esi,0xf
c0027b2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027b32:	c1 ed 04             	shr    ebp,0x4
c0027b35:	6b ed 0a             	imul   ebp,ebp,0xa
c0027b38:	c1 ea 04             	shr    edx,0x4
c0027b3b:	6b d2 0a             	imul   edx,edx,0xa
c0027b3e:	83 e1 0f             	and    ecx,0xf
c0027b41:	01 d1                	add    ecx,edx
c0027b43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027b47:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027b4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027b4f:	c1 ea 04             	shr    edx,0x4
c0027b52:	6b d2 0a             	imul   edx,edx,0xa
c0027b55:	83 e1 0f             	and    ecx,0xf
c0027b58:	01 d1                	add    ecx,edx
c0027b5a:	89 fa                	mov    edx,edi
c0027b5c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027b60:	83 e2 07             	and    edx,0x7
c0027b63:	89 d9                	mov    ecx,ebx
c0027b65:	6b d2 0a             	imul   edx,edx,0xa
c0027b68:	83 e1 0f             	and    ecx,0xf
c0027b6b:	83 e3 80             	and    ebx,0xffffff80
c0027b6e:	01 d1                	add    ecx,edx
c0027b70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027b74:	09 cb                	or     ebx,ecx
c0027b76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027b7a:	c1 ea 04             	shr    edx,0x4
c0027b7d:	6b d2 0a             	imul   edx,edx,0xa
c0027b80:	83 e1 0f             	and    ecx,0xf
c0027b83:	01 d1                	add    ecx,edx
c0027b85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027b89:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027b8d:	c1 ea 04             	shr    edx,0x4
c0027b90:	6b d2 0a             	imul   edx,edx,0xa
c0027b93:	01 d6                	add    esi,edx
c0027b95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027b99:	83 e2 0f             	and    edx,0xf
c0027b9c:	01 d5                	add    ebp,edx
c0027b9e:	a8 02                	test   al,0x2
c0027ba0:	75 15                	jne    c0027bb7 <RTC::completeRTCRefresh()+0x271>
c0027ba2:	f6 c3 80             	test   bl,0x80
c0027ba5:	74 10                	je     c0027bb7 <RTC::completeRTCRefresh()+0x271>
c0027ba7:	83 e3 7f             	and    ebx,0x7f
c0027baa:	b9 18 00 00 00       	mov    ecx,0x18
c0027baf:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027bb2:	99                   	cdq    
c0027bb3:	f7 f9                	idiv   ecx
c0027bb5:	88 d3                	mov    bl,dl
c0027bb7:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027bbd:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027bc3:	77 06                	ja     c0027bcb <RTC::completeRTCRefresh()+0x285>
c0027bc5:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027bcb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027bd0:	31 c9                	xor    ecx,ecx
c0027bd2:	31 d2                	xor    edx,edx
c0027bd4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027bd8:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0027bdc:	89 cd                	mov    ebp,ecx
c0027bde:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0027be2:	c1 e7 10             	shl    edi,0x10
c0027be5:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027beb:	c1 e0 10             	shl    eax,0x10
c0027bee:	09 c5                	or     ebp,eax
c0027bf0:	89 e9                	mov    ecx,ebp
c0027bf2:	0f b7 c2             	movzx  eax,dx
c0027bf5:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027bf9:	09 f8                	or     eax,edi
c0027bfb:	89 c2                	mov    edx,eax
c0027bfd:	50                   	push   eax
c0027bfe:	50                   	push   eax
c0027bff:	88 d9                	mov    cl,bl
c0027c01:	51                   	push   ecx
c0027c02:	52                   	push   edx
c0027c03:	e8 c7 35 ff ff       	call   c001b1cf <datetimeToSeconds(datetime_t)>
c0027c08:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027c0c:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027c12:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027c18:	83 c4 4c             	add    esp,0x4c
c0027c1b:	5b                   	pop    ebx
c0027c1c:	5e                   	pop    esi
c0027c1d:	5f                   	pop    edi
c0027c1e:	5d                   	pop    ebp
c0027c1f:	c3                   	ret    

c0027c20 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027c20:	55                   	push   ebp
c0027c21:	57                   	push   edi
c0027c22:	56                   	push   esi
c0027c23:	53                   	push   ebx
c0027c24:	83 ec 30             	sub    esp,0x30
c0027c27:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027c2b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027c2f:	6a 00                	push   0x0
c0027c31:	6a 00                	push   0x0
c0027c33:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c39:	e8 ca e1 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027c3e:	83 c4 0c             	add    esp,0xc
c0027c41:	6a 00                	push   0x0
c0027c43:	6a 02                	push   0x2
c0027c45:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c4b:	e8 b8 e1 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027c50:	89 f8                	mov    eax,edi
c0027c52:	89 f9                	mov    ecx,edi
c0027c54:	0f b6 c4             	movzx  eax,ah
c0027c57:	31 d2                	xor    edx,edx
c0027c59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027c5d:	c1 e9 10             	shr    ecx,0x10
c0027c60:	89 f0                	mov    eax,esi
c0027c62:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027c66:	89 f0                	mov    eax,esi
c0027c68:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027c6c:	0f b6 c4             	movzx  eax,ah
c0027c6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027c73:	89 f0                	mov    eax,esi
c0027c75:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027c79:	c1 e8 10             	shr    eax,0x10
c0027c7c:	b9 64 00 00 00       	mov    ecx,0x64
c0027c81:	f7 f1                	div    ecx
c0027c83:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027c87:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027c8b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027c8f:	59                   	pop    ecx
c0027c90:	5b                   	pop    ebx
c0027c91:	89 fb                	mov    ebx,edi
c0027c93:	6a 0b                	push   0xb
c0027c95:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c9b:	e8 50 e0 fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027ca0:	83 c4 10             	add    esp,0x10
c0027ca3:	a8 04                	test   al,0x4
c0027ca5:	89 c5                	mov    ebp,eax
c0027ca7:	75 6e                	jne    c0027d17 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027ca9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027cad:	31 d2                	xor    edx,edx
c0027caf:	0f b6 c1             	movzx  eax,cl
c0027cb2:	b9 0a 00 00 00       	mov    ecx,0xa
c0027cb7:	f7 f1                	div    ecx
c0027cb9:	c1 e0 04             	shl    eax,0x4
c0027cbc:	09 d0                	or     eax,edx
c0027cbe:	31 d2                	xor    edx,edx
c0027cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027cc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027cc9:	f7 f1                	div    ecx
c0027ccb:	c1 e0 04             	shl    eax,0x4
c0027cce:	09 d0                	or     eax,edx
c0027cd0:	31 d2                	xor    edx,edx
c0027cd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027cd6:	0f b6 c3             	movzx  eax,bl
c0027cd9:	f7 f1                	div    ecx
c0027cdb:	c1 e0 04             	shl    eax,0x4
c0027cde:	09 d0                	or     eax,edx
c0027ce0:	31 d2                	xor    edx,edx
c0027ce2:	89 c3                	mov    ebx,eax
c0027ce4:	89 f0                	mov    eax,esi
c0027ce6:	0f b6 c0             	movzx  eax,al
c0027ce9:	f7 f1                	div    ecx
c0027ceb:	c1 e0 04             	shl    eax,0x4
c0027cee:	09 d0                	or     eax,edx
c0027cf0:	31 d2                	xor    edx,edx
c0027cf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027cfb:	f7 f1                	div    ecx
c0027cfd:	c1 e0 04             	shl    eax,0x4
c0027d00:	09 d0                	or     eax,edx
c0027d02:	31 d2                	xor    edx,edx
c0027d04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027d08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027d0c:	f7 f1                	div    ecx
c0027d0e:	c1 e0 04             	shl    eax,0x4
c0027d11:	09 d0                	or     eax,edx
c0027d13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027d17:	83 e5 02             	and    ebp,0x2
c0027d1a:	75 1e                	jne    c0027d3a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027d1c:	0f b6 c3             	movzx  eax,bl
c0027d1f:	83 f8 0b             	cmp    eax,0xb
c0027d22:	76 10                	jbe    c0027d34 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027d24:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027d27:	84 d2                	test   dl,dl
c0027d29:	88 d3                	mov    bl,dl
c0027d2b:	75 02                	jne    c0027d2f <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027d2d:	b3 0c                	mov    bl,0xc
c0027d2f:	83 cb 80             	or     ebx,0xffffff80
c0027d32:	eb 06                	jmp    c0027d3a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027d34:	85 c0                	test   eax,eax
c0027d36:	75 02                	jne    c0027d3a <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027d38:	b3 0c                	mov    bl,0xc
c0027d3a:	50                   	push   eax
c0027d3b:	0f b6 db             	movzx  ebx,bl
c0027d3e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027d43:	52                   	push   edx
c0027d44:	6a 00                	push   0x0
c0027d46:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d4c:	e8 b7 e0 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d51:	83 c4 0c             	add    esp,0xc
c0027d54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027d59:	50                   	push   eax
c0027d5a:	6a 02                	push   0x2
c0027d5c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d62:	e8 a1 e0 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d67:	83 c4 0c             	add    esp,0xc
c0027d6a:	53                   	push   ebx
c0027d6b:	6a 04                	push   0x4
c0027d6d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d73:	e8 90 e0 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d78:	83 c4 0c             	add    esp,0xc
c0027d7b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027d80:	52                   	push   edx
c0027d81:	6a 07                	push   0x7
c0027d83:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d89:	e8 7a e0 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d8e:	83 c4 0c             	add    esp,0xc
c0027d91:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027d96:	50                   	push   eax
c0027d97:	6a 08                	push   0x8
c0027d99:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d9f:	e8 64 e0 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027da4:	83 c4 0c             	add    esp,0xc
c0027da7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027dac:	55                   	push   ebp
c0027dad:	6a 09                	push   0x9
c0027daf:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027db5:	e8 4e e0 fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027dba:	5a                   	pop    edx
c0027dbb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027dbf:	e8 82 fb ff ff       	call   c0027946 <RTC::completeRTCRefresh()>
c0027dc4:	83 c4 3c             	add    esp,0x3c
c0027dc7:	b0 01                	mov    al,0x1
c0027dc9:	5b                   	pop    ebx
c0027dca:	5e                   	pop    esi
c0027dcb:	5f                   	pop    edi
c0027dcc:	5d                   	pop    ebp
c0027dcd:	c3                   	ret    

c0027dce <rtcIRQHandler(regs*, void*)>:
c0027dce:	53                   	push   ebx
c0027dcf:	83 ec 10             	sub    esp,0x10
c0027dd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027dd6:	6a 0c                	push   0xc
c0027dd8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027dde:	e8 0d df fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027de3:	83 c4 10             	add    esp,0x10
c0027de6:	a8 80                	test   al,0x80
c0027de8:	74 24                	je     c0027e0e <rtcIRQHandler(regs*, void*)+0x40>
c0027dea:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027df1:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027df8:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027dff:	75 0d                	jne    c0027e0e <rtcIRQHandler(regs*, void*)+0x40>
c0027e01:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027e05:	83 c4 08             	add    esp,0x8
c0027e08:	5b                   	pop    ebx
c0027e09:	e9 38 fb ff ff       	jmp    c0027946 <RTC::completeRTCRefresh()>
c0027e0e:	83 c4 08             	add    esp,0x8
c0027e11:	5b                   	pop    ebx
c0027e12:	c3                   	ret    
c0027e13:	90                   	nop

c0027e14 <RTC::RTC()>:
c0027e14:	83 ec 1c             	sub    esp,0x1c
c0027e17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027e1b:	83 ec 08             	sub    esp,0x8
c0027e1e:	68 6b 36 03 c0       	push   0xc003366b
c0027e23:	50                   	push   eax
c0027e24:	e8 81 32 ff ff       	call   c001b0aa <Clock::Clock(char const*)>
c0027e29:	83 c4 10             	add    esp,0x10
c0027e2c:	ba 88 36 03 c0       	mov    edx,0xc0033688
c0027e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027e35:	89 10                	mov    DWORD PTR [eax],edx
c0027e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027e3b:	83 ec 0c             	sub    esp,0xc
c0027e3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027e42:	6a 01                	push   0x1
c0027e44:	68 ce 7d 02 c0       	push   0xc0027dce
c0027e49:	6a 08                	push   0x8
c0027e4b:	50                   	push   eax
c0027e4c:	e8 3b 37 ff ff       	call   c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027e51:	83 c4 20             	add    esp,0x20
c0027e54:	89 c2                	mov    edx,eax
c0027e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027e5a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027e60:	fa                   	cli    
c0027e61:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027e66:	83 c0 01             	add    eax,0x1
c0027e69:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027e6e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027e73:	83 ec 08             	sub    esp,0x8
c0027e76:	6a 0b                	push   0xb
c0027e78:	50                   	push   eax
c0027e79:	e8 72 de fe ff       	call   c0015cf0 <Computer::readCMOS(unsigned char)>
c0027e7e:	83 c4 10             	add    esp,0x10
c0027e81:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027e85:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027e8a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027e8e:	83 ca 10             	or     edx,0x10
c0027e91:	0f b6 d2             	movzx  edx,dl
c0027e94:	83 ec 04             	sub    esp,0x4
c0027e97:	52                   	push   edx
c0027e98:	6a 0b                	push   0xb
c0027e9a:	50                   	push   eax
c0027e9b:	e8 68 df fe ff       	call   c0015e08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ea0:	83 c4 10             	add    esp,0x10
c0027ea3:	83 ec 0c             	sub    esp,0xc
c0027ea6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027eaa:	e8 97 fa ff ff       	call   c0027946 <RTC::completeRTCRefresh()>
c0027eaf:	83 c4 10             	add    esp,0x10
c0027eb2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027eb7:	83 e8 01             	sub    eax,0x1
c0027eba:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027ebf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027ec4:	85 c0                	test   eax,eax
c0027ec6:	75 01                	jne    c0027ec9 <RTC::RTC()+0xb5>
c0027ec8:	fb                   	sti    
c0027ec9:	90                   	nop
c0027eca:	83 c4 1c             	add    esp,0x1c
c0027ecd:	c3                   	ret    
c0027ece:	66 90                	xchg   ax,ax

c0027ed0 <HalConsoleScroll(int, int)>:
c0027ed0:	83 ec 10             	sub    esp,0x10
c0027ed3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027edb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027ee3:	90                   	nop
c0027ee4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027ee9:	0f 8f e1 00 00 00    	jg     c0027fd0 <HalConsoleScroll(int, int)+0x100>
c0027eef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027ef7:	90                   	nop
c0027ef8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027f00:	0f 8f be 00 00 00    	jg     c0027fc4 <HalConsoleScroll(int, int)+0xf4>
c0027f06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f0a:	89 d0                	mov    eax,edx
c0027f0c:	c1 e0 02             	shl    eax,0x2
c0027f0f:	01 d0                	add    eax,edx
c0027f11:	c1 e0 05             	shl    eax,0x5
c0027f14:	89 c2                	mov    edx,eax
c0027f16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f1a:	01 d0                	add    eax,edx
c0027f1c:	89 c2                	mov    edx,eax
c0027f1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f22:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027f25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f29:	89 d0                	mov    eax,edx
c0027f2b:	c1 e0 02             	shl    eax,0x2
c0027f2e:	01 d0                	add    eax,edx
c0027f30:	c1 e0 05             	shl    eax,0x5
c0027f33:	89 c2                	mov    edx,eax
c0027f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f39:	01 d0                	add    eax,edx
c0027f3b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027f41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f45:	01 d0                	add    eax,edx
c0027f47:	8a 11                	mov    dl,BYTE PTR [ecx]
c0027f49:	88 10                	mov    BYTE PTR [eax],dl
c0027f4b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027f50:	75 66                	jne    c0027fb8 <HalConsoleScroll(int, int)+0xe8>
c0027f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f56:	83 e0 01             	and    eax,0x1
c0027f59:	74 39                	je     c0027f94 <HalConsoleScroll(int, int)+0xc4>
c0027f5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027f5f:	83 e0 0f             	and    eax,0xf
c0027f62:	88 c2                	mov    dl,al
c0027f64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027f68:	c1 e0 04             	shl    eax,0x4
c0027f6b:	09 d0                	or     eax,edx
c0027f6d:	88 c1                	mov    cl,al
c0027f6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f73:	89 d0                	mov    eax,edx
c0027f75:	c1 e0 02             	shl    eax,0x2
c0027f78:	01 d0                	add    eax,edx
c0027f7a:	c1 e0 05             	shl    eax,0x5
c0027f7d:	89 c2                	mov    edx,eax
c0027f7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f83:	01 d0                	add    eax,edx
c0027f85:	89 c2                	mov    edx,eax
c0027f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f8b:	01 d0                	add    eax,edx
c0027f8d:	88 ca                	mov    dl,cl
c0027f8f:	88 10                	mov    BYTE PTR [eax],dl
c0027f91:	eb 25                	jmp    c0027fb8 <HalConsoleScroll(int, int)+0xe8>
c0027f93:	90                   	nop
c0027f94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f98:	89 d0                	mov    eax,edx
c0027f9a:	c1 e0 02             	shl    eax,0x2
c0027f9d:	01 d0                	add    eax,edx
c0027f9f:	c1 e0 05             	shl    eax,0x5
c0027fa2:	89 c2                	mov    edx,eax
c0027fa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027fa8:	01 d0                	add    eax,edx
c0027faa:	89 c2                	mov    edx,eax
c0027fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027fb0:	01 d0                	add    eax,edx
c0027fb2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0027fb8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027fbd:	e9 36 ff ff ff       	jmp    c0027ef8 <HalConsoleScroll(int, int)+0x28>
c0027fc2:	66 90                	xchg   ax,ax
c0027fc4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027fc9:	e9 16 ff ff ff       	jmp    c0027ee4 <HalConsoleScroll(int, int)+0x14>
c0027fce:	66 90                	xchg   ax,ax
c0027fd0:	90                   	nop
c0027fd1:	83 c4 10             	add    esp,0x10
c0027fd4:	c3                   	ret    
c0027fd5:	8d 76 00             	lea    esi,[esi+0x0]

c0027fd8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027fd8:	83 ec 14             	sub    esp,0x14
c0027fdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027fdf:	88 04 24             	mov    BYTE PTR [esp],al
c0027fe2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027fe5:	0f b6 c0             	movzx  eax,al
c0027fe8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027fec:	89 d1                	mov    ecx,edx
c0027fee:	83 e1 0f             	and    ecx,0xf
c0027ff1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027ff5:	c1 e2 04             	shl    edx,0x4
c0027ff8:	0f b6 d2             	movzx  edx,dl
c0027ffb:	09 ca                	or     edx,ecx
c0027ffd:	c1 e2 08             	shl    edx,0x8
c0028000:	09 d0                	or     eax,edx
c0028002:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0028007:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c002800f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0028013:	89 d0                	mov    eax,edx
c0028015:	c1 e0 02             	shl    eax,0x2
c0028018:	01 d0                	add    eax,edx
c002801a:	c1 e0 04             	shl    eax,0x4
c002801d:	89 c2                	mov    edx,eax
c002801f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0028023:	01 d0                	add    eax,edx
c0028025:	d1 e0                	shl    eax,1
c0028027:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002802b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002802f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0028034:	66 89 10             	mov    WORD PTR [eax],dx
c0028037:	90                   	nop
c0028038:	83 c4 14             	add    esp,0x14
c002803b:	c3                   	ret    

c002803c <HalConsoleCursorUpdate(int, int)>:
c002803c:	83 ec 20             	sub    esp,0x20
c002803f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028043:	89 c2                	mov    edx,eax
c0028045:	c1 e2 02             	shl    edx,0x2
c0028048:	01 d0                	add    eax,edx
c002804a:	c1 e0 04             	shl    eax,0x4
c002804d:	89 c2                	mov    edx,eax
c002804f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0028053:	01 d0                	add    eax,edx
c0028055:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c002805a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0028061:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0028066:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002806a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002806e:	ee                   	out    dx,al
c002806f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0028074:	0f b6 c0             	movzx  eax,al
c0028077:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c002807e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0028082:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0028086:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002808a:	ee                   	out    dx,al
c002808b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0028092:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0028097:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002809b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002809f:	ee                   	out    dx,al
c00280a0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00280a5:	c1 e8 08             	shr    eax,0x8
c00280a8:	0f b6 c0             	movzx  eax,al
c00280ab:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00280b2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00280b6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00280ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00280be:	ee                   	out    dx,al
c00280bf:	90                   	nop
c00280c0:	83 c4 20             	add    esp,0x20
c00280c3:	c3                   	ret    

c00280c4 <FAT::getName()>:
c00280c4:	b8 bc 36 03 c0       	mov    eax,0xc00336bc
c00280c9:	c3                   	ret    
c00280ca:	66 90                	xchg   ax,ax

c00280cc <FAT::tell(void*, unsigned long long*)>:
c00280cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00280d1:	75 09                	jne    c00280dc <FAT::tell(void*, unsigned long long*)+0x10>
c00280d3:	b8 04 00 00 00       	mov    eax,0x4
c00280d8:	c3                   	ret    
c00280d9:	8d 76 00             	lea    esi,[esi+0x0]
c00280dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00280e1:	75 09                	jne    c00280ec <FAT::tell(void*, unsigned long long*)+0x20>
c00280e3:	b8 04 00 00 00       	mov    eax,0x4
c00280e8:	c3                   	ret    
c00280e9:	8d 76 00             	lea    esi,[esi+0x0]
c00280ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00280f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00280f3:	ba 00 00 00 00       	mov    edx,0x0
c00280f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00280fc:	89 01                	mov    DWORD PTR [ecx],eax
c00280fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028101:	b8 00 00 00 00       	mov    eax,0x0
c0028106:	c3                   	ret    
c0028107:	90                   	nop

c0028108 <FAT::stat(void*, unsigned long long*)>:
c0028108:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002810d:	75 09                	jne    c0028118 <FAT::stat(void*, unsigned long long*)+0x10>
c002810f:	b8 04 00 00 00       	mov    eax,0x4
c0028114:	c3                   	ret    
c0028115:	8d 76 00             	lea    esi,[esi+0x0]
c0028118:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002811d:	75 09                	jne    c0028128 <FAT::stat(void*, unsigned long long*)+0x20>
c002811f:	b8 04 00 00 00       	mov    eax,0x4
c0028124:	c3                   	ret    
c0028125:	8d 76 00             	lea    esi,[esi+0x0]
c0028128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002812c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002812f:	ba 00 00 00 00       	mov    edx,0x0
c0028134:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028138:	89 01                	mov    DWORD PTR [ecx],eax
c002813a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002813d:	b8 00 00 00 00       	mov    eax,0x0
c0028142:	c3                   	ret    
c0028143:	90                   	nop

c0028144 <FAT::~FAT()>:
c0028144:	83 ec 0c             	sub    esp,0xc
c0028147:	ba 08 37 03 c0       	mov    edx,0xc0033708
c002814c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028150:	89 10                	mov    DWORD PTR [eax],edx
c0028152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028156:	83 ec 0c             	sub    esp,0xc
c0028159:	50                   	push   eax
c002815a:	e8 71 22 ff ff       	call   c001a3d0 <Filesystem::~Filesystem()>
c002815f:	83 c4 10             	add    esp,0x10
c0028162:	90                   	nop
c0028163:	83 c4 0c             	add    esp,0xc
c0028166:	c3                   	ret    
c0028167:	90                   	nop

c0028168 <FAT::~FAT()>:
c0028168:	83 ec 0c             	sub    esp,0xc
c002816b:	83 ec 0c             	sub    esp,0xc
c002816e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028172:	e8 cd ff ff ff       	call   c0028144 <FAT::~FAT()>
c0028177:	83 c4 10             	add    esp,0x10
c002817a:	83 ec 08             	sub    esp,0x8
c002817d:	6a 08                	push   0x8
c002817f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028183:	e8 c4 12 ff ff       	call   c001944c <operator delete(void*, unsigned long)>
c0028188:	83 c4 10             	add    esp,0x10
c002818b:	83 c4 0c             	add    esp,0xc
c002818e:	c3                   	ret    
c002818f:	90                   	nop

c0028190 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0028190:	83 ec 1c             	sub    esp,0x1c
c0028193:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002819a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002819f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00281a3:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281aa:	83 f8 ff             	cmp    eax,0xffffffff
c00281ad:	75 35                	jne    c00281e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00281af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00281b3:	88 c2                	mov    dl,al
c00281b5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281ba:	01 d0                	add    eax,edx
c00281bc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00281c0:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00281ca:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00281d1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00281da:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00281e1:	eb 19                	jmp    c00281fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00281e3:	90                   	nop
c00281e4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00281e8:	88 c2                	mov    dl,al
c00281ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00281ee:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281f5:	01 d0                	add    eax,edx
c00281f7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00281fb:	90                   	nop
c00281fc:	83 ec 04             	sub    esp,0x4
c00281ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028207:	8d 44 24 15          	lea    eax,[esp+0x15]
c002820b:	50                   	push   eax
c002820c:	e8 26 d1 fd ff       	call   c0005337 <f_getlabel>
c0028211:	83 c4 10             	add    esp,0x10
c0028214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028218:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002821d:	75 09                	jne    c0028228 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c002821f:	b8 00 00 00 00       	mov    eax,0x0
c0028224:	eb 0a                	jmp    c0028230 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0028226:	66 90                	xchg   ax,ax
c0028228:	b8 01 00 00 00       	mov    eax,0x1
c002822d:	8d 76 00             	lea    esi,[esi+0x0]
c0028230:	83 c4 1c             	add    esp,0x1c
c0028233:	c3                   	ret    

c0028234 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0028234:	53                   	push   ebx
c0028235:	83 ec 58             	sub    esp,0x58
c0028238:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0028240:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028244:	b9 00 00 00 00       	mov    ecx,0x0
c0028249:	b8 3c 00 00 00       	mov    eax,0x3c
c002824e:	83 e0 f8             	and    eax,0xfffffff8
c0028251:	89 c3                	mov    ebx,eax
c0028253:	b8 00 00 00 00       	mov    eax,0x0
c0028258:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c002825c:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0028260:	83 c0 08             	add    eax,0x8
c0028263:	39 d8                	cmp    eax,ebx
c0028265:	72 f1                	jb     c0028258 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0028267:	01 c2                	add    edx,eax
c0028269:	89 0a                	mov    DWORD PTR [edx],ecx
c002826b:	83 c2 04             	add    edx,0x4
c002826e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028272:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028279:	83 f8 ff             	cmp    eax,0xffffffff
c002827c:	75 36                	jne    c00282b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c002827e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028282:	88 c2                	mov    dl,al
c0028284:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028289:	01 d0                	add    eax,edx
c002828b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002828f:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028295:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028299:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00282a0:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00282a5:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00282a9:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00282b0:	eb 1a                	jmp    c00282cc <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c00282b2:	66 90                	xchg   ax,ax
c00282b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00282b8:	88 c2                	mov    dl,al
c00282ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00282be:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00282c5:	01 d0                	add    eax,edx
c00282c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00282cb:	90                   	nop
c00282cc:	83 ec 08             	sub    esp,0x8
c00282cf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00282d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00282d7:	50                   	push   eax
c00282d8:	e8 93 85 fd ff       	call   c0000870 <strcat>
c00282dd:	83 c4 10             	add    esp,0x10
c00282e0:	83 ec 0c             	sub    esp,0xc
c00282e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00282e7:	50                   	push   eax
c00282e8:	e8 9e d1 fd ff       	call   c000548b <f_setlabel>
c00282ed:	83 c4 10             	add    esp,0x10
c00282f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00282f4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00282f9:	75 09                	jne    c0028304 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00282fb:	b8 00 00 00 00       	mov    eax,0x0
c0028300:	eb 0a                	jmp    c002830c <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0028302:	66 90                	xchg   ax,ax
c0028304:	b8 01 00 00 00       	mov    eax,0x1
c0028309:	8d 76 00             	lea    esi,[esi+0x0]
c002830c:	83 c4 58             	add    esp,0x58
c002830f:	5b                   	pop    ebx
c0028310:	c3                   	ret    
c0028311:	90                   	nop
c0028312:	66 90                	xchg   ax,ax

c0028314 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028314:	83 ec 2c             	sub    esp,0x2c
c0028317:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002831f:	83 ec 08             	sub    esp,0x8
c0028322:	68 e0 36 03 c0       	push   0xc00336e0
c0028327:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002832b:	e8 50 84 fd ff       	call   c0000780 <strcmp>
c0028330:	83 c4 10             	add    esp,0x10
c0028333:	85 c0                	test   eax,eax
c0028335:	0f 94 c0             	sete   al
c0028338:	0f b6 c0             	movzx  eax,al
c002833b:	85 c0                	test   eax,eax
c002833d:	74 0d                	je     c002834c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c002833f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028347:	e9 c0 00 00 00       	jmp    c002840c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002834c:	83 ec 08             	sub    esp,0x8
c002834f:	68 d2 36 03 c0       	push   0xc00336d2
c0028354:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028358:	e8 23 84 fd ff       	call   c0000780 <strcmp>
c002835d:	83 c4 10             	add    esp,0x10
c0028360:	85 c0                	test   eax,eax
c0028362:	0f 94 c0             	sete   al
c0028365:	0f b6 c0             	movzx  eax,al
c0028368:	85 c0                	test   eax,eax
c002836a:	74 10                	je     c002837c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c002836c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028374:	e9 93 00 00 00       	jmp    c002840c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028379:	8d 76 00             	lea    esi,[esi+0x0]
c002837c:	83 ec 08             	sub    esp,0x8
c002837f:	68 d8 36 03 c0       	push   0xc00336d8
c0028384:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028388:	e8 f3 83 fd ff       	call   c0000780 <strcmp>
c002838d:	83 c4 10             	add    esp,0x10
c0028390:	85 c0                	test   eax,eax
c0028392:	0f 94 c0             	sete   al
c0028395:	0f b6 c0             	movzx  eax,al
c0028398:	85 c0                	test   eax,eax
c002839a:	74 0c                	je     c00283a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c002839c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00283a4:	eb 66                	jmp    c002840c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00283a6:	66 90                	xchg   ax,ax
c00283a8:	83 ec 08             	sub    esp,0x8
c00283ab:	68 38 f8 02 c0       	push   0xc002f838
c00283b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00283b4:	e8 c7 83 fd ff       	call   c0000780 <strcmp>
c00283b9:	83 c4 10             	add    esp,0x10
c00283bc:	85 c0                	test   eax,eax
c00283be:	0f 94 c0             	sete   al
c00283c1:	0f b6 c0             	movzx  eax,al
c00283c4:	85 c0                	test   eax,eax
c00283c6:	74 0c                	je     c00283d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00283c8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00283d0:	eb 3a                	jmp    c002840c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00283d2:	66 90                	xchg   ax,ax
c00283d4:	83 ec 08             	sub    esp,0x8
c00283d7:	68 de 36 03 c0       	push   0xc00336de
c00283dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00283e0:	e8 9b 83 fd ff       	call   c0000780 <strcmp>
c00283e5:	83 c4 10             	add    esp,0x10
c00283e8:	85 c0                	test   eax,eax
c00283ea:	0f 94 c0             	sete   al
c00283ed:	0f b6 c0             	movzx  eax,al
c00283f0:	85 c0                	test   eax,eax
c00283f2:	74 0c                	je     c0028400 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00283f4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00283fc:	eb 0e                	jmp    c002840c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00283fe:	66 90                	xchg   ax,ax
c0028400:	b8 08 00 00 00       	mov    eax,0x8
c0028405:	e9 ea 00 00 00       	jmp    c00284f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002840a:	66 90                	xchg   ax,ax
c002840c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0028413:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028418:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002841c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028423:	83 f8 ff             	cmp    eax,0xffffffff
c0028426:	75 34                	jne    c002845c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028428:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002842c:	88 c2                	mov    dl,al
c002842e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028433:	01 d0                	add    eax,edx
c0028435:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028439:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002843f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028443:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002844a:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002844f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0028453:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c002845a:	eb 18                	jmp    c0028474 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c002845c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028460:	88 c2                	mov    dl,al
c0028462:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028466:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002846d:	01 d0                	add    eax,edx
c002846f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028473:	90                   	nop
c0028474:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028478:	88 04 24             	mov    BYTE PTR [esp],al
c002847b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002847f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028483:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002848b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0028490:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028498:	83 ec 0c             	sub    esp,0xc
c002849b:	68 00 20 00 00       	push   0x2000
c00284a0:	e8 6f e2 fe ff       	call   c0016714 <malloc>
c00284a5:	83 c4 10             	add    esp,0x10
c00284a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00284ac:	68 00 20 00 00       	push   0x2000
c00284b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00284b9:	50                   	push   eax
c00284ba:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00284be:	50                   	push   eax
c00284bf:	e8 c4 d2 fd ff       	call   c0005788 <f_mkfs>
c00284c4:	83 c4 10             	add    esp,0x10
c00284c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00284cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00284d0:	75 0a                	jne    c00284dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00284d2:	b8 00 00 00 00       	mov    eax,0x0
c00284d7:	eb 1b                	jmp    c00284f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00284d9:	8d 76 00             	lea    esi,[esi+0x0]
c00284dc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00284e1:	75 09                	jne    c00284ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00284e3:	b8 09 00 00 00       	mov    eax,0x9
c00284e8:	eb 0a                	jmp    c00284f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00284ea:	66 90                	xchg   ax,ax
c00284ec:	b8 01 00 00 00       	mov    eax,0x1
c00284f1:	8d 76 00             	lea    esi,[esi+0x0]
c00284f4:	83 c4 2c             	add    esp,0x2c
c00284f7:	c3                   	ret    

c00284f8 <FAT::tryMount(LogicalDisk*, int)>:
c00284f8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00284fe:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028503:	83 f8 14             	cmp    eax,0x14
c0028506:	75 18                	jne    c0028520 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028508:	83 ec 0c             	sub    esp,0xc
c002850b:	68 e4 36 03 c0       	push   0xc00336e4
c0028510:	e8 bd 7f ff ff       	call   c00204d2 <KePanic(char const*)>
c0028515:	83 c4 10             	add    esp,0x10
c0028518:	b0 00                	mov    al,0x0
c002851a:	e9 ed 01 00 00       	jmp    c002870c <FAT::tryMount(LogicalDisk*, int)+0x214>
c002851f:	90                   	nop
c0028520:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028527:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002852d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028533:	3d 00 02 00 00       	cmp    eax,0x200
c0028538:	74 0a                	je     c0028544 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c002853a:	b0 00                	mov    al,0x0
c002853c:	e9 cb 01 00 00       	jmp    c002870c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028541:	8d 76 00             	lea    esi,[esi+0x0]
c0028544:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c002854c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028553:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002855a:	83 f8 ff             	cmp    eax,0xffffffff
c002855d:	74 09                	je     c0028568 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002855f:	b0 01                	mov    al,0x1
c0028561:	e9 a6 01 00 00       	jmp    c002870c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028566:	66 90                	xchg   ax,ax
c0028568:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0028572:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c002857a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0028581:	88 c2                	mov    dl,al
c0028583:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028588:	01 d0                	add    eax,edx
c002858a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0028591:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028597:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002859e:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00285a5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00285aa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00285b1:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00285b8:	83 ec 0c             	sub    esp,0xc
c00285bb:	68 34 02 00 00       	push   0x234
c00285c0:	e8 4f e1 fe ff       	call   c0016714 <malloc>
c00285c5:	83 c4 10             	add    esp,0x10
c00285c8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00285cf:	83 ec 04             	sub    esp,0x4
c00285d2:	6a 00                	push   0x0
c00285d4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00285db:	50                   	push   eax
c00285dc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00285e3:	e8 9a b9 fd ff       	call   c0003f82 <f_mount>
c00285e8:	83 c4 10             	add    esp,0x10
c00285eb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00285f2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00285fa:	74 1c                	je     c0028618 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00285fc:	83 ec 0c             	sub    esp,0xc
c00285ff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028606:	e8 29 e1 fe ff       	call   c0016734 <rfree>
c002860b:	83 c4 10             	add    esp,0x10
c002860e:	b0 00                	mov    al,0x0
c0028610:	e9 f7 00 00 00       	jmp    c002870c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028615:	8d 76 00             	lea    esi,[esi+0x0]
c0028618:	83 ec 04             	sub    esp,0x4
c002861b:	68 00 01 00 00       	push   0x100
c0028620:	6a 00                	push   0x0
c0028622:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028629:	50                   	push   eax
c002862a:	e8 c1 7e fd ff       	call   c00004f0 <memset>
c002862f:	83 c4 10             	add    esp,0x10
c0028632:	83 ec 08             	sub    esp,0x8
c0028635:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002863c:	50                   	push   eax
c002863d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028644:	50                   	push   eax
c0028645:	e8 26 82 fd ff       	call   c0000870 <strcat>
c002864a:	83 c4 10             	add    esp,0x10
c002864d:	83 ec 08             	sub    esp,0x8
c0028650:	68 f2 36 03 c0       	push   0xc00336f2
c0028655:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c002865c:	50                   	push   eax
c002865d:	e8 0e 82 fd ff       	call   c0000870 <strcat>
c0028662:	83 c4 10             	add    esp,0x10
c0028665:	83 ec 04             	sub    esp,0x4
c0028668:	6a 01                	push   0x1
c002866a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0028671:	50                   	push   eax
c0028672:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028676:	50                   	push   eax
c0028677:	e8 68 b9 fd ff       	call   c0003fe4 <f_open>
c002867c:	83 c4 10             	add    esp,0x10
c002867f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028686:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c002868d:	85 c0                	test   eax,eax
c002868f:	74 0b                	je     c002869c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0028691:	78 31                	js     c00286c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028693:	83 e8 04             	sub    eax,0x4
c0028696:	83 f8 01             	cmp    eax,0x1
c0028699:	77 29                	ja     c00286c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c002869b:	90                   	nop
c002869c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00286a4:	83 ec 0c             	sub    esp,0xc
c00286a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00286ab:	50                   	push   eax
c00286ac:	e8 e3 c0 fd ff       	call   c0004794 <f_close>
c00286b1:	83 c4 10             	add    esp,0x10
c00286b4:	90                   	nop
c00286b5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00286bd:	85 c0                	test   eax,eax
c00286bf:	74 43                	je     c0028704 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00286c1:	eb 31                	jmp    c00286f4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00286c3:	90                   	nop
c00286c4:	83 ec 0c             	sub    esp,0xc
c00286c7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00286ce:	e8 61 e0 fe ff       	call   c0016734 <rfree>
c00286d3:	83 c4 10             	add    esp,0x10
c00286d6:	83 ec 04             	sub    esp,0x4
c00286d9:	6a 00                	push   0x0
c00286db:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00286e2:	50                   	push   eax
c00286e3:	6a 00                	push   0x0
c00286e5:	e8 98 b8 fd ff       	call   c0003f82 <f_mount>
c00286ea:	83 c4 10             	add    esp,0x10
c00286ed:	b0 00                	mov    al,0x0
c00286ef:	eb 1b                	jmp    c002870c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00286f1:	8d 76 00             	lea    esi,[esi+0x0]
c00286f4:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00286f9:	83 c0 01             	add    eax,0x1
c00286fc:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028701:	8d 76 00             	lea    esi,[esi+0x0]
c0028704:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002870b:	90                   	nop
c002870c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028712:	c3                   	ret    
c0028713:	90                   	nop

c0028714 <FAT::allocateSwapfile(char const*, int)>:
c0028714:	55                   	push   ebp
c0028715:	57                   	push   edi
c0028716:	56                   	push   esi
c0028717:	53                   	push   ebx
c0028718:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002871e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028729:	83 ec 0c             	sub    esp,0xc
c002872c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028733:	e8 dc df fe ff       	call   c0016714 <malloc>
c0028738:	83 c4 10             	add    esp,0x10
c002873b:	89 c7                	mov    edi,eax
c002873d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0028742:	83 ec 04             	sub    esp,0x4
c0028745:	50                   	push   eax
c0028746:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c002874d:	57                   	push   edi
c002874e:	e8 0f 20 ff ff       	call   c001a762 <File::File(char const*, Process*)>
c0028753:	83 c4 10             	add    esp,0x10
c0028756:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c002875d:	83 ec 04             	sub    esp,0x4
c0028760:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028764:	50                   	push   eax
c0028765:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028769:	50                   	push   eax
c002876a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028771:	e8 0c 23 ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c0028776:	83 c4 10             	add    esp,0x10
c0028779:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028780:	c1 e0 14             	shl    eax,0x14
c0028783:	89 c7                	mov    edi,eax
c0028785:	89 c5                	mov    ebp,eax
c0028787:	c1 fd 1f             	sar    ebp,0x1f
c002878a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028792:	89 f9                	mov    ecx,edi
c0028794:	31 c1                	xor    ecx,eax
c0028796:	89 cb                	mov    ebx,ecx
c0028798:	89 e9                	mov    ecx,ebp
c002879a:	31 d1                	xor    ecx,edx
c002879c:	89 ce                	mov    esi,ecx
c002879e:	89 f0                	mov    eax,esi
c00287a0:	09 d8                	or     eax,ebx
c00287a2:	0f 84 9c 00 00 00    	je     c0028844 <FAT::allocateSwapfile(char const*, int)+0x130>
c00287a8:	83 ec 0c             	sub    esp,0xc
c00287ab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00287b2:	e8 97 21 ff ff       	call   c001a94e <File::unlink()>
c00287b7:	83 c4 10             	add    esp,0x10
c00287ba:	83 ec 08             	sub    esp,0x8
c00287bd:	6a 12                	push   0x12
c00287bf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00287c6:	e8 b5 1f ff ff       	call   c001a780 <File::open(FileOpenMode)>
c00287cb:	83 c4 10             	add    esp,0x10
c00287ce:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00287d5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00287db:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00287e2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00287e9:	c1 e0 14             	shl    eax,0x14
c00287ec:	83 ec 04             	sub    esp,0x4
c00287ef:	6a 01                	push   0x1
c00287f1:	50                   	push   eax
c00287f2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00287f9:	e8 1d ce fd ff       	call   c000561b <f_expand>
c00287fe:	83 c4 10             	add    esp,0x10
c0028801:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028808:	8b 00                	mov    eax,DWORD PTR [eax]
c002880a:	83 c0 10             	add    eax,0x10
c002880d:	8b 00                	mov    eax,DWORD PTR [eax]
c002880f:	83 ec 0c             	sub    esp,0xc
c0028812:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028816:	52                   	push   edx
c0028817:	8d 54 24 30          	lea    edx,[esp+0x30]
c002881b:	52                   	push   edx
c002881c:	6a 00                	push   0x0
c002881e:	68 00 04 00 00       	push   0x400
c0028823:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002882a:	ff d0                	call   eax
c002882c:	83 c4 20             	add    esp,0x20
c002882f:	83 ec 0c             	sub    esp,0xc
c0028832:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028839:	e8 a0 1f ff ff       	call   c001a7de <File::close()>
c002883e:	83 c4 10             	add    esp,0x10
c0028841:	8d 76 00             	lea    esi,[esi+0x0]
c0028844:	83 ec 08             	sub    esp,0x8
c0028847:	6a 01                	push   0x1
c0028849:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028850:	e8 2b 1f ff ff       	call   c001a780 <File::open(FileOpenMode)>
c0028855:	83 c4 10             	add    esp,0x10
c0028858:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002885f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028861:	83 c0 0c             	add    eax,0xc
c0028864:	8b 00                	mov    eax,DWORD PTR [eax]
c0028866:	83 ec 0c             	sub    esp,0xc
c0028869:	8d 54 24 24          	lea    edx,[esp+0x24]
c002886d:	52                   	push   edx
c002886e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028872:	52                   	push   edx
c0028873:	6a 00                	push   0x0
c0028875:	6a 04                	push   0x4
c0028877:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002887e:	ff d0                	call   eax
c0028880:	83 c4 20             	add    esp,0x20
c0028883:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002888a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028890:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028897:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c002889e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00288a1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00288a8:	83 ec 0c             	sub    esp,0xc
c00288ab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00288b2:	e8 27 1f ff ff       	call   c001a7de <File::close()>
c00288b7:	83 c4 10             	add    esp,0x10
c00288ba:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00288c1:	ba 00 00 00 00       	mov    edx,0x0
c00288c6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00288cc:	5b                   	pop    ebx
c00288cd:	5e                   	pop    esi
c00288ce:	5f                   	pop    edi
c00288cf:	5d                   	pop    ebp
c00288d0:	c3                   	ret    
c00288d1:	90                   	nop
c00288d2:	66 90                	xchg   ax,ax

c00288d4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00288d4:	57                   	push   edi
c00288d5:	56                   	push   esi
c00288d6:	53                   	push   ebx
c00288d7:	81 ec 50 02 00 00    	sub    esp,0x250
c00288dd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00288e5:	74 0d                	je     c00288f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00288e7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00288ef:	75 0f                	jne    c0028900 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00288f1:	8d 76 00             	lea    esi,[esi+0x0]
c00288f4:	b8 04 00 00 00       	mov    eax,0x4
c00288f9:	e9 3a 01 00 00       	jmp    c0028a38 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00288fe:	66 90                	xchg   ax,ax
c0028900:	83 ec 08             	sub    esp,0x8
c0028903:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002890a:	50                   	push   eax
c002890b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028912:	e8 49 c1 fd ff       	call   c0004a60 <f_readdir>
c0028917:	83 c4 10             	add    esp,0x10
c002891a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028921:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028928:	83 ec 0c             	sub    esp,0xc
c002892b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028932:	83 c0 16             	add    eax,0x16
c0028935:	50                   	push   eax
c0028936:	e8 45 7c fd ff       	call   c0000580 <strlen>
c002893b:	83 c4 10             	add    esp,0x10
c002893e:	ba 00 00 00 00       	mov    edx,0x0
c0028943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028947:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002894b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028952:	0f b6 c0             	movzx  eax,al
c0028955:	83 e0 10             	and    eax,0x10
c0028958:	74 0a                	je     c0028964 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c002895a:	b8 02 00 00 00       	mov    eax,0x2
c002895f:	eb 0b                	jmp    c002896c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028961:	8d 76 00             	lea    esi,[esi+0x0]
c0028964:	b8 01 00 00 00       	mov    eax,0x1
c0028969:	8d 76 00             	lea    esi,[esi+0x0]
c002896c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028970:	83 ec 08             	sub    esp,0x8
c0028973:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002897a:	83 c0 16             	add    eax,0x16
c002897d:	50                   	push   eax
c002897e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028982:	83 c0 10             	add    eax,0x10
c0028985:	50                   	push   eax
c0028986:	e8 c5 7c fd ff       	call   c0000650 <strcpy>
c002898b:	83 c4 10             	add    esp,0x10
c002898e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0028995:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002899c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00289a0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00289a7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00289ae:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00289b5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00289bc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00289c3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00289ca:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00289d1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00289d8:	89 c6                	mov    esi,eax
c00289da:	89 d7                	mov    edi,edx
c00289dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00289de:	89 c8                	mov    eax,ecx
c00289e0:	89 fa                	mov    edx,edi
c00289e2:	89 f3                	mov    ebx,esi
c00289e4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00289eb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00289f2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00289f9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028a00:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028a06:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028a0d:	0f be c0             	movsx  eax,al
c0028a10:	85 c0                	test   eax,eax
c0028a12:	75 08                	jne    c0028a1c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028a14:	b8 07 00 00 00       	mov    eax,0x7
c0028a19:	eb 1d                	jmp    c0028a38 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028a1b:	90                   	nop
c0028a1c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028a23:	85 c0                	test   eax,eax
c0028a25:	75 09                	jne    c0028a30 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028a27:	b8 00 00 00 00       	mov    eax,0x0
c0028a2c:	eb 0a                	jmp    c0028a38 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028a2e:	66 90                	xchg   ax,ax
c0028a30:	b8 01 00 00 00       	mov    eax,0x1
c0028a35:	8d 76 00             	lea    esi,[esi+0x0]
c0028a38:	81 c4 50 02 00 00    	add    esp,0x250
c0028a3e:	5b                   	pop    ebx
c0028a3f:	5e                   	pop    esi
c0028a40:	5f                   	pop    edi
c0028a41:	c3                   	ret    
c0028a42:	66 90                	xchg   ax,ax

c0028a44 <FAT::read(void*, unsigned long, void*, int*)>:
c0028a44:	83 ec 1c             	sub    esp,0x1c
c0028a47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028a4c:	74 0a                	je     c0028a58 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028a4e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028a53:	75 0b                	jne    c0028a60 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028a55:	8d 76 00             	lea    esi,[esi+0x0]
c0028a58:	b8 04 00 00 00       	mov    eax,0x4
c0028a5d:	eb 41                	jmp    c0028aa0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028a5f:	90                   	nop
c0028a60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028a64:	50                   	push   eax
c0028a65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028a69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028a6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a71:	e8 31 b8 fd ff       	call   c00042a7 <f_read>
c0028a76:	83 c4 10             	add    esp,0x10
c0028a79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a81:	89 c2                	mov    edx,eax
c0028a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028a87:	89 10                	mov    DWORD PTR [eax],edx
c0028a89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028a8d:	85 c0                	test   eax,eax
c0028a8f:	75 07                	jne    c0028a98 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028a91:	b8 00 00 00 00       	mov    eax,0x0
c0028a96:	eb 08                	jmp    c0028aa0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028a98:	b8 01 00 00 00       	mov    eax,0x1
c0028a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0028aa0:	83 c4 1c             	add    esp,0x1c
c0028aa3:	c3                   	ret    

c0028aa4 <FAT::write(void*, unsigned long, void*, int*)>:
c0028aa4:	83 ec 1c             	sub    esp,0x1c
c0028aa7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028aac:	74 0a                	je     c0028ab8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028aae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028ab3:	75 0b                	jne    c0028ac0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ab8:	b8 04 00 00 00       	mov    eax,0x4
c0028abd:	eb 41                	jmp    c0028b00 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028abf:	90                   	nop
c0028ac0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028ac4:	50                   	push   eax
c0028ac5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028ac9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028acd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ad1:	e8 b2 b9 fd ff       	call   c0004488 <f_write>
c0028ad6:	83 c4 10             	add    esp,0x10
c0028ad9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028add:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ae1:	89 c2                	mov    edx,eax
c0028ae3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028ae7:	89 10                	mov    DWORD PTR [eax],edx
c0028ae9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028aed:	85 c0                	test   eax,eax
c0028aef:	75 07                	jne    c0028af8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028af1:	b8 00 00 00 00       	mov    eax,0x0
c0028af6:	eb 08                	jmp    c0028b00 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028af8:	b8 01 00 00 00       	mov    eax,0x1
c0028afd:	8d 76 00             	lea    esi,[esi+0x0]
c0028b00:	83 c4 1c             	add    esp,0x1c
c0028b03:	c3                   	ret    

c0028b04 <FAT::close(void*)>:
c0028b04:	83 ec 1c             	sub    esp,0x1c
c0028b07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028b0c:	75 0a                	jne    c0028b18 <FAT::close(void*)+0x14>
c0028b0e:	b8 04 00 00 00       	mov    eax,0x4
c0028b13:	eb 3f                	jmp    c0028b54 <FAT::close(void*)+0x50>
c0028b15:	8d 76 00             	lea    esi,[esi+0x0]
c0028b18:	83 ec 0c             	sub    esp,0xc
c0028b1b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b1f:	e8 70 bc fd ff       	call   c0004794 <f_close>
c0028b24:	83 c4 10             	add    esp,0x10
c0028b27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b2b:	83 ec 0c             	sub    esp,0xc
c0028b2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b32:	e8 ed db fe ff       	call   c0016724 <free>
c0028b37:	83 c4 10             	add    esp,0x10
c0028b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b3e:	85 c0                	test   eax,eax
c0028b40:	75 0a                	jne    c0028b4c <FAT::close(void*)+0x48>
c0028b42:	b8 00 00 00 00       	mov    eax,0x0
c0028b47:	eb 0b                	jmp    c0028b54 <FAT::close(void*)+0x50>
c0028b49:	8d 76 00             	lea    esi,[esi+0x0]
c0028b4c:	b8 01 00 00 00       	mov    eax,0x1
c0028b51:	8d 76 00             	lea    esi,[esi+0x0]
c0028b54:	83 c4 1c             	add    esp,0x1c
c0028b57:	c3                   	ret    

c0028b58 <FAT::closeDir(void*)>:
c0028b58:	83 ec 1c             	sub    esp,0x1c
c0028b5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028b60:	75 0a                	jne    c0028b6c <FAT::closeDir(void*)+0x14>
c0028b62:	b8 04 00 00 00       	mov    eax,0x4
c0028b67:	eb 3f                	jmp    c0028ba8 <FAT::closeDir(void*)+0x50>
c0028b69:	8d 76 00             	lea    esi,[esi+0x0]
c0028b6c:	83 ec 0c             	sub    esp,0xc
c0028b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b73:	e8 c6 be fd ff       	call   c0004a3e <f_closedir>
c0028b78:	83 c4 10             	add    esp,0x10
c0028b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b7f:	83 ec 0c             	sub    esp,0xc
c0028b82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b86:	e8 99 db fe ff       	call   c0016724 <free>
c0028b8b:	83 c4 10             	add    esp,0x10
c0028b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b92:	85 c0                	test   eax,eax
c0028b94:	75 0a                	jne    c0028ba0 <FAT::closeDir(void*)+0x48>
c0028b96:	b8 00 00 00 00       	mov    eax,0x0
c0028b9b:	eb 0b                	jmp    c0028ba8 <FAT::closeDir(void*)+0x50>
c0028b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0028ba0:	b8 01 00 00 00       	mov    eax,0x1
c0028ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ba8:	83 c4 1c             	add    esp,0x1c
c0028bab:	c3                   	ret    

c0028bac <FAT::truncate(void*, unsigned long long)>:
c0028bac:	83 ec 2c             	sub    esp,0x2c
c0028baf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028bb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028bb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028bbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028bbf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028bc4:	75 0a                	jne    c0028bd0 <FAT::truncate(void*, unsigned long long)+0x24>
c0028bc6:	b8 04 00 00 00       	mov    eax,0x4
c0028bcb:	eb 47                	jmp    c0028c14 <FAT::truncate(void*, unsigned long long)+0x68>
c0028bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0028bd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028bd4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028bd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028bdb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028be3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028be7:	83 ec 08             	sub    esp,0x8
c0028bea:	50                   	push   eax
c0028beb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028bef:	e8 cf bb fd ff       	call   c00047c3 <f_lseek>
c0028bf4:	83 c4 10             	add    esp,0x10
c0028bf7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028bfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028bff:	85 c0                	test   eax,eax
c0028c01:	75 09                	jne    c0028c0c <FAT::truncate(void*, unsigned long long)+0x60>
c0028c03:	b8 00 00 00 00       	mov    eax,0x0
c0028c08:	eb 0a                	jmp    c0028c14 <FAT::truncate(void*, unsigned long long)+0x68>
c0028c0a:	66 90                	xchg   ax,ax
c0028c0c:	b8 01 00 00 00       	mov    eax,0x1
c0028c11:	8d 76 00             	lea    esi,[esi+0x0]
c0028c14:	83 c4 2c             	add    esp,0x2c
c0028c17:	c3                   	ret    

c0028c18 <FAT::seek(void*, unsigned long long)>:
c0028c18:	83 ec 2c             	sub    esp,0x2c
c0028c1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028c1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028c27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028c2b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028c30:	75 0a                	jne    c0028c3c <FAT::seek(void*, unsigned long long)+0x24>
c0028c32:	b8 04 00 00 00       	mov    eax,0x4
c0028c37:	eb 33                	jmp    c0028c6c <FAT::seek(void*, unsigned long long)+0x54>
c0028c39:	8d 76 00             	lea    esi,[esi+0x0]
c0028c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c40:	83 ec 08             	sub    esp,0x8
c0028c43:	50                   	push   eax
c0028c44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028c48:	e8 76 bb fd ff       	call   c00047c3 <f_lseek>
c0028c4d:	83 c4 10             	add    esp,0x10
c0028c50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028c58:	85 c0                	test   eax,eax
c0028c5a:	75 08                	jne    c0028c64 <FAT::seek(void*, unsigned long long)+0x4c>
c0028c5c:	b8 00 00 00 00       	mov    eax,0x0
c0028c61:	eb 09                	jmp    c0028c6c <FAT::seek(void*, unsigned long long)+0x54>
c0028c63:	90                   	nop
c0028c64:	b8 01 00 00 00       	mov    eax,0x1
c0028c69:	8d 76 00             	lea    esi,[esi+0x0]
c0028c6c:	83 c4 2c             	add    esp,0x2c
c0028c6f:	c3                   	ret    

c0028c70 <fatWrapperReadDisk>:
c0028c70:	53                   	push   ebx
c0028c71:	83 ec 18             	sub    esp,0x18
c0028c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028c7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c81:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028c88:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028c8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028c90:	ba 00 00 00 00       	mov    edx,0x0
c0028c95:	83 ec 0c             	sub    esp,0xc
c0028c98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c9c:	53                   	push   ebx
c0028c9d:	52                   	push   edx
c0028c9e:	50                   	push   eax
c0028c9f:	51                   	push   ecx
c0028ca0:	e8 31 3d ff ff       	call   c001c9d6 <LogicalDisk::read(unsigned long long, int, void*)>
c0028ca5:	83 c4 20             	add    esp,0x20
c0028ca8:	83 c4 18             	add    esp,0x18
c0028cab:	5b                   	pop    ebx
c0028cac:	c3                   	ret    
c0028cad:	8d 76 00             	lea    esi,[esi+0x0]

c0028cb0 <fatWrapperWriteDisk>:
c0028cb0:	53                   	push   ebx
c0028cb1:	83 ec 18             	sub    esp,0x18
c0028cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028cb8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028cbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028cc1:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028cc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028ccc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028cd0:	ba 00 00 00 00       	mov    edx,0x0
c0028cd5:	83 ec 0c             	sub    esp,0xc
c0028cd8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028cdc:	53                   	push   ebx
c0028cdd:	52                   	push   edx
c0028cde:	50                   	push   eax
c0028cdf:	51                   	push   ecx
c0028ce0:	e8 5d 3d ff ff       	call   c001ca42 <LogicalDisk::write(unsigned long long, int, void*)>
c0028ce5:	83 c4 20             	add    esp,0x20
c0028ce8:	83 c4 18             	add    esp,0x18
c0028ceb:	5b                   	pop    ebx
c0028cec:	c3                   	ret    
c0028ced:	8d 76 00             	lea    esi,[esi+0x0]

c0028cf0 <fatWrapperIoctl>:
c0028cf0:	53                   	push   ebx
c0028cf1:	83 ec 28             	sub    esp,0x28
c0028cf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028cf8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0028cfc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028d00:	88 d0                	mov    al,dl
c0028d02:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028d06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d0b:	83 f8 02             	cmp    eax,0x2
c0028d0e:	75 34                	jne    c0028d44 <fatWrapperIoctl+0x54>
c0028d10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028d18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028d1d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028d24:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028d2a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028d30:	89 c2                	mov    edx,eax
c0028d32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028d36:	66 89 10             	mov    WORD PTR [eax],dx
c0028d39:	b8 00 00 00 00       	mov    eax,0x0
c0028d3e:	e9 c5 00 00 00       	jmp    c0028e08 <fatWrapperIoctl+0x118>
c0028d43:	90                   	nop
c0028d44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d49:	83 f8 01             	cmp    eax,0x1
c0028d4c:	75 6a                	jne    c0028db8 <fatWrapperIoctl+0xc8>
c0028d4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028d52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028d56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028d5b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028d62:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028d68:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028d6e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028d74:	89 c8                	mov    eax,ecx
c0028d76:	89 da                	mov    edx,ebx
c0028d78:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028d7c:	c1 e0 0a             	shl    eax,0xa
c0028d7f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028d84:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028d8b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028d91:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028d97:	89 cb                	mov    ebx,ecx
c0028d99:	c1 fb 1f             	sar    ebx,0x1f
c0028d9c:	53                   	push   ebx
c0028d9d:	51                   	push   ecx
c0028d9e:	52                   	push   edx
c0028d9f:	50                   	push   eax
c0028da0:	e8 eb 5b 00 00       	call   c002e990 <__udivdi3>
c0028da5:	83 c4 10             	add    esp,0x10
c0028da8:	89 c2                	mov    edx,eax
c0028daa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028dae:	89 10                	mov    DWORD PTR [eax],edx
c0028db0:	b8 00 00 00 00       	mov    eax,0x0
c0028db5:	eb 51                	jmp    c0028e08 <fatWrapperIoctl+0x118>
c0028db7:	90                   	nop
c0028db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028dbd:	85 c0                	test   eax,eax
c0028dbf:	75 07                	jne    c0028dc8 <fatWrapperIoctl+0xd8>
c0028dc1:	b8 00 00 00 00       	mov    eax,0x0
c0028dc6:	eb 40                	jmp    c0028e08 <fatWrapperIoctl+0x118>
c0028dc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028dcd:	83 f8 03             	cmp    eax,0x3
c0028dd0:	75 1a                	jne    c0028dec <fatWrapperIoctl+0xfc>
c0028dd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028dd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028dda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028dde:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028de4:	b8 00 00 00 00       	mov    eax,0x0
c0028de9:	eb 1d                	jmp    c0028e08 <fatWrapperIoctl+0x118>
c0028deb:	90                   	nop
c0028dec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028df1:	83 f8 04             	cmp    eax,0x4
c0028df4:	75 0a                	jne    c0028e00 <fatWrapperIoctl+0x110>
c0028df6:	b8 00 00 00 00       	mov    eax,0x0
c0028dfb:	eb 0b                	jmp    c0028e08 <fatWrapperIoctl+0x118>
c0028dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0028e00:	b8 04 00 00 00       	mov    eax,0x4
c0028e05:	8d 76 00             	lea    esi,[esi+0x0]
c0028e08:	83 c4 28             	add    esp,0x28
c0028e0b:	5b                   	pop    ebx
c0028e0c:	c3                   	ret    
c0028e0d:	90                   	nop
c0028e0e:	66 90                	xchg   ax,ax

c0028e10 <FAT::FAT()>:
c0028e10:	83 ec 1c             	sub    esp,0x1c
c0028e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e17:	83 ec 0c             	sub    esp,0xc
c0028e1a:	50                   	push   eax
c0028e1b:	e8 8c 15 ff ff       	call   c001a3ac <Filesystem::Filesystem()>
c0028e20:	83 c4 10             	add    esp,0x10
c0028e23:	ba 08 37 03 c0       	mov    edx,0xc0033708
c0028e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e2c:	89 10                	mov    DWORD PTR [eax],edx
c0028e2e:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028e38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028e40:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028e45:	7f 19                	jg     c0028e60 <FAT::FAT()+0x50>
c0028e47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028e4b:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028e56:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028e5b:	eb e3                	jmp    c0028e40 <FAT::FAT()+0x30>
c0028e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e60:	90                   	nop
c0028e61:	83 c4 1c             	add    esp,0x1c
c0028e64:	c3                   	ret    
c0028e65:	90                   	nop
c0028e66:	66 90                	xchg   ax,ax

c0028e68 <FAT::fixFilepath(char*)>:
c0028e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e6c:	8a 00                	mov    al,BYTE PTR [eax]
c0028e6e:	0f be c0             	movsx  eax,al
c0028e71:	83 f8 40             	cmp    eax,0x40
c0028e74:	7e 2e                	jle    c0028ea4 <FAT::fixFilepath(char*)+0x3c>
c0028e76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e7a:	8a 00                	mov    al,BYTE PTR [eax]
c0028e7c:	83 e8 41             	sub    eax,0x41
c0028e7f:	88 c2                	mov    dl,al
c0028e81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e85:	88 10                	mov    BYTE PTR [eax],dl
c0028e87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e8b:	8a 00                	mov    al,BYTE PTR [eax]
c0028e8d:	0f be c0             	movsx  eax,al
c0028e90:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028e97:	83 c0 30             	add    eax,0x30
c0028e9a:	88 c2                	mov    dl,al
c0028e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ea0:	88 10                	mov    BYTE PTR [eax],dl
c0028ea2:	66 90                	xchg   ax,ax
c0028ea4:	90                   	nop
c0028ea5:	c3                   	ret    
c0028ea6:	66 90                	xchg   ax,ax

c0028ea8 <FAT::open(char const*, void**, FileOpenMode)>:
c0028ea8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028eae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028eb6:	74 0c                	je     c0028ec4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028eb8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028ec0:	75 0e                	jne    c0028ed0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028ec2:	66 90                	xchg   ax,ax
c0028ec4:	b8 04 00 00 00       	mov    eax,0x4
c0028ec9:	e9 46 01 00 00       	jmp    c0029014 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028ece:	66 90                	xchg   ax,ax
c0028ed0:	83 ec 08             	sub    esp,0x8
c0028ed3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028eda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028ede:	50                   	push   eax
c0028edf:	e8 6c 77 fd ff       	call   c0000650 <strcpy>
c0028ee4:	83 c4 10             	add    esp,0x10
c0028ee7:	83 ec 08             	sub    esp,0x8
c0028eea:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028eee:	50                   	push   eax
c0028eef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028ef6:	e8 6d ff ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c0028efb:	83 c4 10             	add    esp,0x10
c0028efe:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028f06:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f0d:	83 e0 01             	and    eax,0x1
c0028f10:	74 12                	je     c0028f24 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028f12:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f19:	83 c8 01             	or     eax,0x1
c0028f1c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f23:	90                   	nop
c0028f24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f2b:	83 e0 04             	and    eax,0x4
c0028f2e:	74 24                	je     c0028f54 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028f30:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f37:	83 c8 30             	or     eax,0x30
c0028f3a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f41:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f48:	83 c8 02             	or     eax,0x2
c0028f4b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f52:	66 90                	xchg   ax,ax
c0028f54:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f5b:	83 e0 02             	and    eax,0x2
c0028f5e:	74 14                	je     c0028f74 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028f60:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f67:	83 c8 02             	or     eax,0x2
c0028f6a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f71:	8d 76 00             	lea    esi,[esi+0x0]
c0028f74:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f7b:	83 e0 08             	and    eax,0x8
c0028f7e:	74 14                	je     c0028f94 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028f80:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f87:	83 c8 04             	or     eax,0x4
c0028f8a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f91:	8d 76 00             	lea    esi,[esi+0x0]
c0028f94:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f9b:	83 e0 10             	and    eax,0x10
c0028f9e:	74 14                	je     c0028fb4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028fa0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028fa7:	83 c8 08             	or     eax,0x8
c0028faa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	68 28 02 00 00       	push   0x228
c0028fbc:	e8 53 d7 fe ff       	call   c0016714 <malloc>
c0028fc1:	83 c4 10             	add    esp,0x10
c0028fc4:	89 c2                	mov    edx,eax
c0028fc6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028fcd:	89 10                	mov    DWORD PTR [eax],edx
c0028fcf:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028fd7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028fde:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fe0:	83 ec 04             	sub    esp,0x4
c0028fe3:	52                   	push   edx
c0028fe4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028fe8:	52                   	push   edx
c0028fe9:	50                   	push   eax
c0028fea:	e8 f5 af fd ff       	call   c0003fe4 <f_open>
c0028fef:	83 c4 10             	add    esp,0x10
c0028ff2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028ff9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0029001:	74 09                	je     c002900c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0029003:	b8 01 00 00 00       	mov    eax,0x1
c0029008:	eb 0a                	jmp    c0029014 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c002900a:	66 90                	xchg   ax,ax
c002900c:	b8 00 00 00 00       	mov    eax,0x0
c0029011:	8d 76 00             	lea    esi,[esi+0x0]
c0029014:	81 c4 1c 01 00 00    	add    esp,0x11c
c002901a:	c3                   	ret    
c002901b:	90                   	nop

c002901c <FAT::openDir(char const*, void**)>:
c002901c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029022:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002902a:	74 0c                	je     c0029038 <FAT::openDir(char const*, void**)+0x1c>
c002902c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0029034:	75 0e                	jne    c0029044 <FAT::openDir(char const*, void**)+0x28>
c0029036:	66 90                	xchg   ax,ax
c0029038:	b8 04 00 00 00       	mov    eax,0x4
c002903d:	e9 82 00 00 00       	jmp    c00290c4 <FAT::openDir(char const*, void**)+0xa8>
c0029042:	66 90                	xchg   ax,ax
c0029044:	83 ec 08             	sub    esp,0x8
c0029047:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002904e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029052:	50                   	push   eax
c0029053:	e8 f8 75 fd ff       	call   c0000650 <strcpy>
c0029058:	83 c4 10             	add    esp,0x10
c002905b:	83 ec 08             	sub    esp,0x8
c002905e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029062:	50                   	push   eax
c0029063:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002906a:	e8 f9 fd ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c002906f:	83 c4 10             	add    esp,0x10
c0029072:	83 ec 0c             	sub    esp,0xc
c0029075:	6a 30                	push   0x30
c0029077:	e8 98 d6 fe ff       	call   c0016714 <malloc>
c002907c:	83 c4 10             	add    esp,0x10
c002907f:	89 c2                	mov    edx,eax
c0029081:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029088:	89 10                	mov    DWORD PTR [eax],edx
c002908a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029091:	8b 00                	mov    eax,DWORD PTR [eax]
c0029093:	83 ec 08             	sub    esp,0x8
c0029096:	8d 54 24 14          	lea    edx,[esp+0x14]
c002909a:	52                   	push   edx
c002909b:	50                   	push   eax
c002909c:	e8 d2 b8 fd ff       	call   c0004973 <f_opendir>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00290ab:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00290b3:	74 07                	je     c00290bc <FAT::openDir(char const*, void**)+0xa0>
c00290b5:	b8 01 00 00 00       	mov    eax,0x1
c00290ba:	eb 08                	jmp    c00290c4 <FAT::openDir(char const*, void**)+0xa8>
c00290bc:	b8 00 00 00 00       	mov    eax,0x0
c00290c1:	8d 76 00             	lea    esi,[esi+0x0]
c00290c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00290ca:	c3                   	ret    
c00290cb:	90                   	nop

c00290cc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00290cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00290d2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00290da:	75 0c                	jne    c00290e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00290dc:	b8 04 00 00 00       	mov    eax,0x4
c00290e1:	e9 d6 00 00 00       	jmp    c00291bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00290e6:	66 90                	xchg   ax,ax
c00290e8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00290f0:	75 0a                	jne    c00290fc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00290f2:	b8 04 00 00 00       	mov    eax,0x4
c00290f7:	e9 c0 00 00 00       	jmp    c00291bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00290fc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0029104:	75 0a                	jne    c0029110 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0029106:	b8 04 00 00 00       	mov    eax,0x4
c002910b:	e9 ac 00 00 00       	jmp    c00291bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029110:	83 ec 08             	sub    esp,0x8
c0029113:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002911a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029121:	50                   	push   eax
c0029122:	e8 29 75 fd ff       	call   c0000650 <strcpy>
c0029127:	83 c4 10             	add    esp,0x10
c002912a:	83 ec 08             	sub    esp,0x8
c002912d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0029134:	50                   	push   eax
c0029135:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002913c:	e8 27 fd ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c0029141:	83 c4 10             	add    esp,0x10
c0029144:	83 ec 08             	sub    esp,0x8
c0029147:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002914b:	50                   	push   eax
c002914c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029153:	50                   	push   eax
c0029154:	e8 99 b9 fd ff       	call   c0004af2 <f_stat>
c0029159:	83 c4 10             	add    esp,0x10
c002915c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029163:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002916a:	85 c0                	test   eax,eax
c002916c:	74 0a                	je     c0029178 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c002916e:	83 f8 04             	cmp    eax,0x4
c0029171:	74 39                	je     c00291ac <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029173:	eb 3f                	jmp    c00291b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0029175:	8d 76 00             	lea    esi,[esi+0x0]
c0029178:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002917c:	0f b6 c0             	movzx  eax,al
c002917f:	83 e0 10             	and    eax,0x10
c0029182:	0f 95 c2             	setne  dl
c0029185:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002918c:	88 10                	mov    BYTE PTR [eax],dl
c002918e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029192:	ba 00 00 00 00       	mov    edx,0x0
c0029197:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002919e:	89 01                	mov    DWORD PTR [ecx],eax
c00291a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00291a3:	b8 00 00 00 00       	mov    eax,0x0
c00291a8:	eb 12                	jmp    c00291bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00291aa:	66 90                	xchg   ax,ax
c00291ac:	b8 02 00 00 00       	mov    eax,0x2
c00291b1:	eb 09                	jmp    c00291bc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00291b3:	90                   	nop
c00291b4:	b8 01 00 00 00       	mov    eax,0x1
c00291b9:	8d 76 00             	lea    esi,[esi+0x0]
c00291bc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00291c2:	c3                   	ret    
c00291c3:	90                   	nop

c00291c4 <FAT::unlink(char const*)>:
c00291c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00291ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00291d2:	75 08                	jne    c00291dc <FAT::unlink(char const*)+0x18>
c00291d4:	b8 04 00 00 00       	mov    eax,0x4
c00291d9:	eb 61                	jmp    c002923c <FAT::unlink(char const*)+0x78>
c00291db:	90                   	nop
c00291dc:	83 ec 08             	sub    esp,0x8
c00291df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00291e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00291ea:	50                   	push   eax
c00291eb:	e8 60 74 fd ff       	call   c0000650 <strcpy>
c00291f0:	83 c4 10             	add    esp,0x10
c00291f3:	83 ec 08             	sub    esp,0x8
c00291f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291fa:	50                   	push   eax
c00291fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029202:	e8 61 fc ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c0029207:	83 c4 10             	add    esp,0x10
c002920a:	83 ec 0c             	sub    esp,0xc
c002920d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029211:	50                   	push   eax
c0029212:	e8 4d bb fd ff       	call   c0004d64 <f_unlink>
c0029217:	83 c4 10             	add    esp,0x10
c002921a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029221:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029228:	85 c0                	test   eax,eax
c002922a:	75 08                	jne    c0029234 <FAT::unlink(char const*)+0x70>
c002922c:	b8 00 00 00 00       	mov    eax,0x0
c0029231:	eb 09                	jmp    c002923c <FAT::unlink(char const*)+0x78>
c0029233:	90                   	nop
c0029234:	b8 01 00 00 00       	mov    eax,0x1
c0029239:	8d 76 00             	lea    esi,[esi+0x0]
c002923c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029242:	c3                   	ret    
c0029243:	90                   	nop

c0029244 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0029244:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002924a:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0029251:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0029258:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002925c:	88 d0                	mov    al,dl
c002925e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0029262:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002926a:	75 0c                	jne    c0029278 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c002926c:	b8 04 00 00 00       	mov    eax,0x4
c0029271:	e9 7e 01 00 00       	jmp    c00293f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0029276:	66 90                	xchg   ax,ax
c0029278:	83 ec 08             	sub    esp,0x8
c002927b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0029282:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029286:	50                   	push   eax
c0029287:	e8 c4 73 fd ff       	call   c0000650 <strcpy>
c002928c:	83 c4 10             	add    esp,0x10
c002928f:	83 ec 08             	sub    esp,0x8
c0029292:	8d 44 24 20          	lea    eax,[esp+0x20]
c0029296:	50                   	push   eax
c0029297:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002929e:	e8 c5 fb ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c00292a3:	83 c4 10             	add    esp,0x10
c00292a6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00292ae:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00292b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00292bb:	83 e0 01             	and    eax,0x1
c00292be:	74 14                	je     c00292d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c00292c0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00292c7:	83 c8 01             	or     eax,0x1
c00292ca:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00292d1:	8d 76 00             	lea    esi,[esi+0x0]
c00292d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00292d9:	83 e0 02             	and    eax,0x2
c00292dc:	74 12                	je     c00292f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c00292de:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00292e5:	83 c8 20             	or     eax,0x20
c00292e8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00292ef:	90                   	nop
c00292f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00292f5:	83 e0 04             	and    eax,0x4
c00292f8:	74 12                	je     c002930c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00292fa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029301:	83 c8 04             	or     eax,0x4
c0029304:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002930b:	90                   	nop
c002930c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029311:	83 e0 08             	and    eax,0x8
c0029314:	74 12                	je     c0029328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0029316:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002931d:	83 c8 02             	or     eax,0x2
c0029320:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029327:	90                   	nop
c0029328:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002932d:	83 e0 01             	and    eax,0x1
c0029330:	74 12                	je     c0029344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0029332:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029339:	83 c8 01             	or     eax,0x1
c002933c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029343:	90                   	nop
c0029344:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029349:	83 e0 02             	and    eax,0x2
c002934c:	74 12                	je     c0029360 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c002934e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029355:	83 c8 20             	or     eax,0x20
c0029358:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002935f:	90                   	nop
c0029360:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029365:	83 e0 04             	and    eax,0x4
c0029368:	74 12                	je     c002937c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c002936a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029371:	83 c8 04             	or     eax,0x4
c0029374:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002937b:	90                   	nop
c002937c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029381:	83 e0 08             	and    eax,0x8
c0029384:	74 12                	je     c0029398 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0029386:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002938d:	83 c8 02             	or     eax,0x2
c0029390:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029397:	90                   	nop
c0029398:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c002939f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00293a6:	09 d0                	or     eax,edx
c00293a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00293af:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00293b7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00293bf:	83 ec 04             	sub    esp,0x4
c00293c2:	52                   	push   edx
c00293c3:	50                   	push   eax
c00293c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00293c8:	50                   	push   eax
c00293c9:	e8 09 be fd ff       	call   c00051d7 <f_chmod>
c00293ce:	83 c4 10             	add    esp,0x10
c00293d1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00293d8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00293df:	85 c0                	test   eax,eax
c00293e1:	75 09                	jne    c00293ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c00293e3:	b8 00 00 00 00       	mov    eax,0x0
c00293e8:	eb 0a                	jmp    c00293f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c00293ea:	66 90                	xchg   ax,ax
c00293ec:	b8 01 00 00 00       	mov    eax,0x1
c00293f1:	8d 76 00             	lea    esi,[esi+0x0]
c00293f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00293fa:	c3                   	ret    
c00293fb:	90                   	nop

c00293fc <FAT::rename(char const*, char const*)>:
c00293fc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029402:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002940a:	74 0c                	je     c0029418 <FAT::rename(char const*, char const*)+0x1c>
c002940c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029414:	75 0e                	jne    c0029424 <FAT::rename(char const*, char const*)+0x28>
c0029416:	66 90                	xchg   ax,ax
c0029418:	b8 04 00 00 00       	mov    eax,0x4
c002941d:	e9 9e 00 00 00       	jmp    c00294c0 <FAT::rename(char const*, char const*)+0xc4>
c0029422:	66 90                	xchg   ax,ax
c0029424:	83 ec 08             	sub    esp,0x8
c0029427:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002942e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029435:	50                   	push   eax
c0029436:	e8 15 72 fd ff       	call   c0000650 <strcpy>
c002943b:	83 c4 10             	add    esp,0x10
c002943e:	83 ec 08             	sub    esp,0x8
c0029441:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0029448:	50                   	push   eax
c0029449:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029450:	e8 13 fa ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c0029455:	83 c4 10             	add    esp,0x10
c0029458:	83 ec 08             	sub    esp,0x8
c002945b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0029462:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029466:	50                   	push   eax
c0029467:	e8 e4 71 fd ff       	call   c0000650 <strcpy>
c002946c:	83 c4 10             	add    esp,0x10
c002946f:	83 ec 08             	sub    esp,0x8
c0029472:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029476:	50                   	push   eax
c0029477:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002947e:	e8 e5 f9 ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c0029483:	83 c4 10             	add    esp,0x10
c0029486:	83 ec 08             	sub    esp,0x8
c0029489:	8d 44 24 14          	lea    eax,[esp+0x14]
c002948d:	50                   	push   eax
c002948e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029495:	50                   	push   eax
c0029496:	e8 84 bb fd ff       	call   c000501f <f_rename>
c002949b:	83 c4 10             	add    esp,0x10
c002949e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00294a5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00294ac:	85 c0                	test   eax,eax
c00294ae:	75 08                	jne    c00294b8 <FAT::rename(char const*, char const*)+0xbc>
c00294b0:	b8 00 00 00 00       	mov    eax,0x0
c00294b5:	eb 09                	jmp    c00294c0 <FAT::rename(char const*, char const*)+0xc4>
c00294b7:	90                   	nop
c00294b8:	b8 01 00 00 00       	mov    eax,0x1
c00294bd:	8d 76 00             	lea    esi,[esi+0x0]
c00294c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00294c6:	c3                   	ret    
c00294c7:	90                   	nop

c00294c8 <FAT::mkdir(char const*)>:
c00294c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00294ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00294d6:	75 08                	jne    c00294e0 <FAT::mkdir(char const*)+0x18>
c00294d8:	b8 04 00 00 00       	mov    eax,0x4
c00294dd:	eb 61                	jmp    c0029540 <FAT::mkdir(char const*)+0x78>
c00294df:	90                   	nop
c00294e0:	83 ec 08             	sub    esp,0x8
c00294e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00294ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00294ee:	50                   	push   eax
c00294ef:	e8 5c 71 fd ff       	call   c0000650 <strcpy>
c00294f4:	83 c4 10             	add    esp,0x10
c00294f7:	83 ec 08             	sub    esp,0x8
c00294fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00294fe:	50                   	push   eax
c00294ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029506:	e8 5d f9 ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c002950b:	83 c4 10             	add    esp,0x10
c002950e:	83 ec 0c             	sub    esp,0xc
c0029511:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029515:	50                   	push   eax
c0029516:	e8 69 b9 fd ff       	call   c0004e84 <f_mkdir>
c002951b:	83 c4 10             	add    esp,0x10
c002951e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029525:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002952c:	85 c0                	test   eax,eax
c002952e:	75 08                	jne    c0029538 <FAT::mkdir(char const*)+0x70>
c0029530:	b8 00 00 00 00       	mov    eax,0x0
c0029535:	eb 09                	jmp    c0029540 <FAT::mkdir(char const*)+0x78>
c0029537:	90                   	nop
c0029538:	b8 01 00 00 00       	mov    eax,0x1
c002953d:	8d 76 00             	lea    esi,[esi+0x0]
c0029540:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029546:	c3                   	ret    
c0029547:	90                   	nop

c0029548 <FAT::exists(char const*)>:
c0029548:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002954e:	83 ec 08             	sub    esp,0x8
c0029551:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029558:	8d 44 24 10          	lea    eax,[esp+0x10]
c002955c:	50                   	push   eax
c002955d:	e8 ee 70 fd ff       	call   c0000650 <strcpy>
c0029562:	83 c4 10             	add    esp,0x10
c0029565:	83 ec 08             	sub    esp,0x8
c0029568:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002956c:	50                   	push   eax
c002956d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029574:	e8 ef f8 ff ff       	call   c0028e68 <FAT::fixFilepath(char*)>
c0029579:	83 c4 10             	add    esp,0x10
c002957c:	83 ec 08             	sub    esp,0x8
c002957f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0029586:	50                   	push   eax
c0029587:	8d 44 24 10          	lea    eax,[esp+0x10]
c002958b:	50                   	push   eax
c002958c:	e8 61 b5 fd ff       	call   c0004af2 <f_stat>
c0029591:	83 c4 10             	add    esp,0x10
c0029594:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002959b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00295a2:	85 c0                	test   eax,eax
c00295a4:	75 06                	jne    c00295ac <FAT::exists(char const*)+0x64>
c00295a6:	b0 01                	mov    al,0x1
c00295a8:	eb 06                	jmp    c00295b0 <FAT::exists(char const*)+0x68>
c00295aa:	66 90                	xchg   ax,ax
c00295ac:	b0 00                	mov    al,0x0
c00295ae:	66 90                	xchg   ax,ax
c00295b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00295b6:	c3                   	ret    
c00295b7:	90                   	nop

c00295b8 <isoReadDiscSectorHelper>:
c00295b8:	83 ec 2c             	sub    esp,0x2c
c00295bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00295bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00295c3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00295c8:	83 e8 41             	sub    eax,0x41
c00295cb:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00295d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00295d6:	ba 00 00 00 00       	mov    edx,0x0
c00295db:	83 ec 0c             	sub    esp,0xc
c00295de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00295e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00295e6:	52                   	push   edx
c00295e7:	50                   	push   eax
c00295e8:	51                   	push   ecx
c00295e9:	e8 e8 33 ff ff       	call   c001c9d6 <LogicalDisk::read(unsigned long long, int, void*)>
c00295ee:	83 c4 20             	add    esp,0x20
c00295f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00295f5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00295fa:	74 0c                	je     c0029608 <isoReadDiscSectorHelper+0x50>
c00295fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029600:	c1 e0 0b             	shl    eax,0xb
c0029603:	eb 0b                	jmp    c0029610 <isoReadDiscSectorHelper+0x58>
c0029605:	8d 76 00             	lea    esi,[esi+0x0]
c0029608:	b8 00 00 00 00       	mov    eax,0x0
c002960d:	8d 76 00             	lea    esi,[esi+0x0]
c0029610:	83 c4 2c             	add    esp,0x2c
c0029613:	c3                   	ret    

c0029614 <iso_kprintf>:
c0029614:	83 ec 0c             	sub    esp,0xc
c0029617:	83 ec 08             	sub    esp,0x8
c002961a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002961e:	68 b6 34 03 c0       	push   0xc00334b6
c0029623:	e8 22 ff fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0029628:	83 c4 10             	add    esp,0x10
c002962b:	90                   	nop
c002962c:	83 c4 0c             	add    esp,0xc
c002962f:	c3                   	ret    

c0029630 <iso_kprintfd>:
c0029630:	83 ec 0c             	sub    esp,0xc
c0029633:	83 ec 08             	sub    esp,0x8
c0029636:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002963a:	68 ee 1a 03 c0       	push   0xc0031aee
c002963f:	e8 06 ff fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0029644:	83 c4 10             	add    esp,0x10
c0029647:	90                   	nop
c0029648:	83 c4 0c             	add    esp,0xc
c002964b:	c3                   	ret    

c002964c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002964c:	b8 08 00 00 00       	mov    eax,0x8
c0029651:	c3                   	ret    

c0029652 <ISO9660::truncate(void*, unsigned long long)>:
c0029652:	b8 01 00 00 00       	mov    eax,0x1
c0029657:	c3                   	ret    

c0029658 <ISO9660::getName()>:
c0029658:	b8 6c 37 03 c0       	mov    eax,0xc003376c
c002965d:	c3                   	ret    

c002965e <ISO9660::closeDir(void*)>:
c002965e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029662:	8b 00                	mov    eax,DWORD PTR [eax]
c0029664:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0029667:	90                   	nop

c0029668 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029668:	b8 01 00 00 00       	mov    eax,0x1
c002966d:	c3                   	ret    

c002966e <ISO9660::unlink(char const*)>:
c002966e:	b8 01 00 00 00       	mov    eax,0x1
c0029673:	c3                   	ret    

c0029674 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029674:	b8 03 00 00 00       	mov    eax,0x3
c0029679:	c3                   	ret    

c002967a <ISO9660::rename(char const*, char const*)>:
c002967a:	b8 01 00 00 00       	mov    eax,0x1
c002967f:	c3                   	ret    

c0029680 <ISO9660::mkdir(char const*)>:
c0029680:	b8 01 00 00 00       	mov    eax,0x1
c0029685:	c3                   	ret    

c0029686 <ISO9660::~ISO9660()>:
c0029686:	83 ec 0c             	sub    esp,0xc
c0029689:	ba ac 38 03 c0       	mov    edx,0xc00338ac
c002968e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029692:	89 10                	mov    DWORD PTR [eax],edx
c0029694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029698:	83 ec 0c             	sub    esp,0xc
c002969b:	50                   	push   eax
c002969c:	e8 2f 0d ff ff       	call   c001a3d0 <Filesystem::~Filesystem()>
c00296a1:	83 c4 10             	add    esp,0x10
c00296a4:	90                   	nop
c00296a5:	83 c4 0c             	add    esp,0xc
c00296a8:	c3                   	ret    
c00296a9:	90                   	nop

c00296aa <ISO9660::~ISO9660()>:
c00296aa:	83 ec 0c             	sub    esp,0xc
c00296ad:	83 ec 0c             	sub    esp,0xc
c00296b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296b4:	e8 cd ff ff ff       	call   c0029686 <ISO9660::~ISO9660()>
c00296b9:	83 c4 10             	add    esp,0x10
c00296bc:	83 ec 08             	sub    esp,0x8
c00296bf:	6a 08                	push   0x8
c00296c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296c5:	e8 82 fd fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c00296ca:	83 c4 10             	add    esp,0x10
c00296cd:	83 c4 0c             	add    esp,0xc
c00296d0:	c3                   	ret    
c00296d1:	90                   	nop

c00296d2 <ISO9660::exists(char const*)>:
c00296d2:	83 ec 18             	sub    esp,0x18
c00296d5:	68 87 37 03 c0       	push   0xc0033787
c00296da:	e8 f3 6d ff ff       	call   c00204d2 <KePanic(char const*)>
c00296df:	31 c0                	xor    eax,eax
c00296e1:	83 c4 1c             	add    esp,0x1c
c00296e4:	c3                   	ret    
c00296e5:	90                   	nop

c00296e6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00296e6:	56                   	push   esi
c00296e7:	53                   	push   ebx
c00296e8:	53                   	push   ebx
c00296e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00296ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00296f1:	85 db                	test   ebx,ebx
c00296f3:	0f 84 ca 00 00 00    	je     c00297c3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00296f9:	85 f6                	test   esi,esi
c00296fb:	0f 84 c2 00 00 00    	je     c00297c3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029701:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029706:	b8 03 00 00 00       	mov    eax,0x3
c002970b:	0f 85 b7 00 00 00    	jne    c00297c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029711:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029713:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029719:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029720:	74 1b                	je     c002973d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029722:	85 c0                	test   eax,eax
c0029724:	74 10                	je     c0029736 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029726:	83 ec 0c             	sub    esp,0xc
c0029729:	68 a5 37 03 c0       	push   0xc00337a5
c002972e:	e8 9f 6d ff ff       	call   c00204d2 <KePanic(char const*)>
c0029733:	83 c4 10             	add    esp,0x10
c0029736:	8a 03                	mov    al,BYTE PTR [ebx]
c0029738:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002973d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029740:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029747:	85 c0                	test   eax,eax
c0029749:	74 09                	je     c0029754 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c002974b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029752:	74 48                	je     c002979c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029754:	83 ec 0c             	sub    esp,0xc
c0029757:	68 b5 37 03 c0       	push   0xc00337b5
c002975c:	e8 e9 fd fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0029761:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029764:	83 c4 10             	add    esp,0x10
c0029767:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002976e:	85 c0                	test   eax,eax
c0029770:	74 17                	je     c0029789 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0029772:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029779:	83 ec 0c             	sub    esp,0xc
c002977c:	68 d5 37 03 c0       	push   0xc00337d5
c0029781:	e8 c4 fd fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0029786:	83 c4 10             	add    esp,0x10
c0029789:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029790:	83 ec 0c             	sub    esp,0xc
c0029793:	50                   	push   eax
c0029794:	e8 12 d6 fd ff       	call   c0006dab <init_percd>
c0029799:	83 c4 10             	add    esp,0x10
c002979c:	51                   	push   ecx
c002979d:	83 c3 03             	add    ebx,0x3
c00297a0:	51                   	push   ecx
c00297a1:	6a 00                	push   0x0
c00297a3:	53                   	push   ebx
c00297a4:	e8 c5 d0 fd ff       	call   c000686e <iso_open>
c00297a9:	83 c4 10             	add    esp,0x10
c00297ac:	89 c2                	mov    edx,eax
c00297ae:	b8 01 00 00 00       	mov    eax,0x1
c00297b3:	83 fa ff             	cmp    edx,0xffffffff
c00297b6:	74 10                	je     c00297c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00297b8:	83 c2 32             	add    edx,0x32
c00297bb:	31 c0                	xor    eax,eax
c00297bd:	01 d2                	add    edx,edx
c00297bf:	89 16                	mov    DWORD PTR [esi],edx
c00297c1:	eb 05                	jmp    c00297c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00297c3:	b8 04 00 00 00       	mov    eax,0x4
c00297c8:	5a                   	pop    edx
c00297c9:	5b                   	pop    ebx
c00297ca:	5e                   	pop    esi
c00297cb:	c3                   	ret    

c00297cc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00297cc:	53                   	push   ebx
c00297cd:	83 ec 08             	sub    esp,0x8
c00297d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00297d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00297d8:	85 c0                	test   eax,eax
c00297da:	74 2d                	je     c0029809 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00297dc:	85 db                	test   ebx,ebx
c00297de:	74 29                	je     c0029809 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00297e0:	52                   	push   edx
c00297e1:	b9 02 00 00 00       	mov    ecx,0x2
c00297e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ea:	99                   	cdq    
c00297eb:	f7 f9                	idiv   ecx
c00297ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00297f1:	83 e8 32             	sub    eax,0x32
c00297f4:	50                   	push   eax
c00297f5:	e8 1c d1 fd ff       	call   c0006916 <iso_read>
c00297fa:	83 c4 10             	add    esp,0x10
c00297fd:	89 03                	mov    DWORD PTR [ebx],eax
c00297ff:	09 d0                	or     eax,edx
c0029801:	0f 94 c0             	sete   al
c0029804:	0f b6 c0             	movzx  eax,al
c0029807:	eb 05                	jmp    c002980e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029809:	b8 04 00 00 00       	mov    eax,0x4
c002980e:	83 c4 08             	add    esp,0x8
c0029811:	5b                   	pop    ebx
c0029812:	c3                   	ret    
c0029813:	90                   	nop

c0029814 <ISO9660::seek(void*, unsigned long long)>:
c0029814:	57                   	push   edi
c0029815:	b8 04 00 00 00       	mov    eax,0x4
c002981a:	56                   	push   esi
c002981b:	51                   	push   ecx
c002981c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029820:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029824:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029828:	85 d2                	test   edx,edx
c002982a:	74 26                	je     c0029852 <ISO9660::seek(void*, unsigned long long)+0x3e>
c002982c:	89 d0                	mov    eax,edx
c002982e:	b9 02 00 00 00       	mov    ecx,0x2
c0029833:	6a 00                	push   0x0
c0029835:	99                   	cdq    
c0029836:	f7 f9                	idiv   ecx
c0029838:	57                   	push   edi
c0029839:	56                   	push   esi
c002983a:	83 e8 32             	sub    eax,0x32
c002983d:	50                   	push   eax
c002983e:	e8 e9 d1 fd ff       	call   c0006a2c <iso_seek>
c0029843:	83 c4 10             	add    esp,0x10
c0029846:	31 f0                	xor    eax,esi
c0029848:	31 fa                	xor    edx,edi
c002984a:	09 d0                	or     eax,edx
c002984c:	0f 95 c0             	setne  al
c002984f:	0f b6 c0             	movzx  eax,al
c0029852:	5a                   	pop    edx
c0029853:	5e                   	pop    esi
c0029854:	5f                   	pop    edi
c0029855:	c3                   	ret    

c0029856 <ISO9660::tell(void*, unsigned long long*)>:
c0029856:	53                   	push   ebx
c0029857:	83 ec 08             	sub    esp,0x8
c002985a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002985e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029862:	85 c0                	test   eax,eax
c0029864:	74 24                	je     c002988a <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029866:	85 db                	test   ebx,ebx
c0029868:	74 20                	je     c002988a <ISO9660::tell(void*, unsigned long long*)+0x34>
c002986a:	b9 02 00 00 00       	mov    ecx,0x2
c002986f:	99                   	cdq    
c0029870:	f7 f9                	idiv   ecx
c0029872:	83 ec 0c             	sub    esp,0xc
c0029875:	83 e8 32             	sub    eax,0x32
c0029878:	50                   	push   eax
c0029879:	e8 32 d2 fd ff       	call   c0006ab0 <iso_tell>
c002987e:	83 c4 10             	add    esp,0x10
c0029881:	89 03                	mov    DWORD PTR [ebx],eax
c0029883:	31 c0                	xor    eax,eax
c0029885:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029888:	eb 05                	jmp    c002988f <ISO9660::tell(void*, unsigned long long*)+0x39>
c002988a:	b8 04 00 00 00       	mov    eax,0x4
c002988f:	83 c4 08             	add    esp,0x8
c0029892:	5b                   	pop    ebx
c0029893:	c3                   	ret    

c0029894 <ISO9660::stat(void*, unsigned long long*)>:
c0029894:	56                   	push   esi
c0029895:	53                   	push   ebx
c0029896:	83 ec 10             	sub    esp,0x10
c0029899:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002989d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00298a1:	68 f9 37 03 c0       	push   0xc00337f9
c00298a6:	e8 9f fc fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c00298ab:	83 c4 10             	add    esp,0x10
c00298ae:	85 db                	test   ebx,ebx
c00298b0:	74 2a                	je     c00298dc <ISO9660::stat(void*, unsigned long long*)+0x48>
c00298b2:	85 f6                	test   esi,esi
c00298b4:	74 26                	je     c00298dc <ISO9660::stat(void*, unsigned long long*)+0x48>
c00298b6:	89 d8                	mov    eax,ebx
c00298b8:	b9 02 00 00 00       	mov    ecx,0x2
c00298bd:	99                   	cdq    
c00298be:	83 ec 0c             	sub    esp,0xc
c00298c1:	f7 f9                	idiv   ecx
c00298c3:	83 e8 32             	sub    eax,0x32
c00298c6:	50                   	push   eax
c00298c7:	e8 15 d2 fd ff       	call   c0006ae1 <iso_total>
c00298cc:	83 c4 10             	add    esp,0x10
c00298cf:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00298d6:	89 06                	mov    DWORD PTR [esi],eax
c00298d8:	31 c0                	xor    eax,eax
c00298da:	eb 05                	jmp    c00298e1 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00298dc:	b8 04 00 00 00       	mov    eax,0x4
c00298e1:	5a                   	pop    edx
c00298e2:	5b                   	pop    ebx
c00298e3:	5e                   	pop    esi
c00298e4:	c3                   	ret    
c00298e5:	90                   	nop

c00298e6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00298e6:	55                   	push   ebp
c00298e7:	57                   	push   edi
c00298e8:	56                   	push   esi
c00298e9:	53                   	push   ebx
c00298ea:	83 ec 18             	sub    esp,0x18
c00298ed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00298f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00298f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00298f9:	68 01 38 03 c0       	push   0xc0033801
c00298fe:	e8 47 fc fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0029903:	83 c4 10             	add    esp,0x10
c0029906:	85 ff                	test   edi,edi
c0029908:	0f 94 c0             	sete   al
c002990b:	85 f6                	test   esi,esi
c002990d:	0f 94 c2             	sete   dl
c0029910:	09 d0                	or     eax,edx
c0029912:	a8 01                	test   al,0x1
c0029914:	0f 85 dd 00 00 00    	jne    c00299f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002991a:	85 db                	test   ebx,ebx
c002991c:	0f 84 d5 00 00 00    	je     c00299f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029922:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029925:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002992b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029932:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029939:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002993b:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029941:	74 1b                	je     c002995e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029943:	85 c0                	test   eax,eax
c0029945:	74 10                	je     c0029957 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029947:	83 ec 0c             	sub    esp,0xc
c002994a:	68 a5 37 03 c0       	push   0xc00337a5
c002994f:	e8 7e 6b ff ff       	call   c00204d2 <KePanic(char const*)>
c0029954:	83 c4 10             	add    esp,0x10
c0029957:	8a 03                	mov    al,BYTE PTR [ebx]
c0029959:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002995e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029961:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029968:	85 c0                	test   eax,eax
c002996a:	74 09                	je     c0029975 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c002996c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029973:	74 51                	je     c00299c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029975:	83 ec 0c             	sub    esp,0xc
c0029978:	68 09 38 03 c0       	push   0xc0033809
c002997d:	e8 c8 fb fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0029982:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029985:	83 c4 10             	add    esp,0x10
c0029988:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029990:	74 21                	je     c00299b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029992:	83 ec 0c             	sub    esp,0xc
c0029995:	68 29 38 03 c0       	push   0xc0033829
c002999a:	e8 ab fb fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002999f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00299a2:	83 c4 10             	add    esp,0x10
c00299a5:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00299ac:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00299b3:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00299ba:	83 ec 0c             	sub    esp,0xc
c00299bd:	50                   	push   eax
c00299be:	e8 e8 d3 fd ff       	call   c0006dab <init_percd>
c00299c3:	83 c4 10             	add    esp,0x10
c00299c6:	52                   	push   edx
c00299c7:	83 c3 03             	add    ebx,0x3
c00299ca:	52                   	push   edx
c00299cb:	6a 00                	push   0x0
c00299cd:	53                   	push   ebx
c00299ce:	e8 9b ce fd ff       	call   c000686e <iso_open>
c00299d3:	83 c4 10             	add    esp,0x10
c00299d6:	83 f8 ff             	cmp    eax,0xffffffff
c00299d9:	89 c5                	mov    ebp,eax
c00299db:	75 21                	jne    c00299fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00299dd:	50                   	push   eax
c00299de:	50                   	push   eax
c00299df:	6a 01                	push   0x1
c00299e1:	53                   	push   ebx
c00299e2:	e8 87 ce fd ff       	call   c000686e <iso_open>
c00299e7:	83 c4 10             	add    esp,0x10
c00299ea:	ba 02 00 00 00       	mov    edx,0x2
c00299ef:	40                   	inc    eax
c00299f0:	74 2b                	je     c0029a1d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00299f2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00299f5:	eb 24                	jmp    c0029a1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00299f7:	ba 04 00 00 00       	mov    edx,0x4
c00299fc:	eb 1f                	jmp    c0029a1d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00299fe:	83 ec 0c             	sub    esp,0xc
c0029a01:	50                   	push   eax
c0029a02:	e8 da d0 fd ff       	call   c0006ae1 <iso_total>
c0029a07:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029a0e:	89 07                	mov    DWORD PTR [edi],eax
c0029a10:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029a13:	e8 e0 ce fd ff       	call   c00068f8 <iso_close>
c0029a18:	83 c4 10             	add    esp,0x10
c0029a1b:	31 d2                	xor    edx,edx
c0029a1d:	83 c4 0c             	add    esp,0xc
c0029a20:	89 d0                	mov    eax,edx
c0029a22:	5b                   	pop    ebx
c0029a23:	5e                   	pop    esi
c0029a24:	5f                   	pop    edi
c0029a25:	5d                   	pop    ebp
c0029a26:	c3                   	ret    
c0029a27:	90                   	nop

c0029a28 <ISO9660::close(void*)>:
c0029a28:	83 ec 0c             	sub    esp,0xc
c0029a2b:	b8 04 00 00 00       	mov    eax,0x4
c0029a30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029a34:	85 d2                	test   edx,edx
c0029a36:	74 1b                	je     c0029a53 <ISO9660::close(void*)+0x2b>
c0029a38:	89 d0                	mov    eax,edx
c0029a3a:	b9 02 00 00 00       	mov    ecx,0x2
c0029a3f:	99                   	cdq    
c0029a40:	83 ec 0c             	sub    esp,0xc
c0029a43:	f7 f9                	idiv   ecx
c0029a45:	83 e8 32             	sub    eax,0x32
c0029a48:	50                   	push   eax
c0029a49:	e8 aa ce fd ff       	call   c00068f8 <iso_close>
c0029a4e:	83 c4 10             	add    esp,0x10
c0029a51:	31 c0                	xor    eax,eax
c0029a53:	83 c4 0c             	add    esp,0xc
c0029a56:	c3                   	ret    
c0029a57:	90                   	nop

c0029a58 <ISO9660::openDir(char const*, void**)>:
c0029a58:	56                   	push   esi
c0029a59:	53                   	push   ebx
c0029a5a:	50                   	push   eax
c0029a5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029a5f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029a63:	85 db                	test   ebx,ebx
c0029a65:	0f 84 bd 00 00 00    	je     c0029b28 <ISO9660::openDir(char const*, void**)+0xd0>
c0029a6b:	85 f6                	test   esi,esi
c0029a6d:	0f 84 b5 00 00 00    	je     c0029b28 <ISO9660::openDir(char const*, void**)+0xd0>
c0029a73:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029a75:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c0029a7b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029a82:	74 1b                	je     c0029a9f <ISO9660::openDir(char const*, void**)+0x47>
c0029a84:	85 c0                	test   eax,eax
c0029a86:	74 10                	je     c0029a98 <ISO9660::openDir(char const*, void**)+0x40>
c0029a88:	83 ec 0c             	sub    esp,0xc
c0029a8b:	68 a5 37 03 c0       	push   0xc00337a5
c0029a90:	e8 3d 6a ff ff       	call   c00204d2 <KePanic(char const*)>
c0029a95:	83 c4 10             	add    esp,0x10
c0029a98:	8a 03                	mov    al,BYTE PTR [ebx]
c0029a9a:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029a9f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029aa2:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029aa9:	85 c0                	test   eax,eax
c0029aab:	74 10                	je     c0029abd <ISO9660::openDir(char const*, void**)+0x65>
c0029aad:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029ab4:	74 1a                	je     c0029ad0 <ISO9660::openDir(char const*, void**)+0x78>
c0029ab6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029abd:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029ac4:	83 ec 0c             	sub    esp,0xc
c0029ac7:	50                   	push   eax
c0029ac8:	e8 de d2 fd ff       	call   c0006dab <init_percd>
c0029acd:	83 c4 10             	add    esp,0x10
c0029ad0:	50                   	push   eax
c0029ad1:	83 c3 03             	add    ebx,0x3
c0029ad4:	50                   	push   eax
c0029ad5:	6a 01                	push   0x1
c0029ad7:	53                   	push   ebx
c0029ad8:	e8 91 cd fd ff       	call   c000686e <iso_open>
c0029add:	83 c4 10             	add    esp,0x10
c0029ae0:	83 f8 ff             	cmp    eax,0xffffffff
c0029ae3:	89 c3                	mov    ebx,eax
c0029ae5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029aea:	75 1c                	jne    c0029b08 <ISO9660::openDir(char const*, void**)+0xb0>
c0029aec:	53                   	push   ebx
c0029aed:	53                   	push   ebx
c0029aee:	68 4d 38 03 c0       	push   0xc003384d
c0029af3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029af9:	e8 ee db fe ff       	call   c00176ec <VgaText::puts(char const*)>
c0029afe:	83 c4 10             	add    esp,0x10
c0029b01:	b8 01 00 00 00       	mov    eax,0x1
c0029b06:	eb 25                	jmp    c0029b2d <ISO9660::openDir(char const*, void**)+0xd5>
c0029b08:	51                   	push   ecx
c0029b09:	01 db                	add    ebx,ebx
c0029b0b:	51                   	push   ecx
c0029b0c:	83 c3 65             	add    ebx,0x65
c0029b0f:	68 60 38 03 c0       	push   0xc0033860
c0029b14:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029b1a:	e8 cd db fe ff       	call   c00176ec <VgaText::puts(char const*)>
c0029b1f:	83 c4 10             	add    esp,0x10
c0029b22:	31 c0                	xor    eax,eax
c0029b24:	89 1e                	mov    DWORD PTR [esi],ebx
c0029b26:	eb 05                	jmp    c0029b2d <ISO9660::openDir(char const*, void**)+0xd5>
c0029b28:	b8 04 00 00 00       	mov    eax,0x4
c0029b2d:	5a                   	pop    edx
c0029b2e:	5b                   	pop    ebx
c0029b2f:	5e                   	pop    esi
c0029b30:	c3                   	ret    
c0029b31:	90                   	nop

c0029b32 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029b32:	55                   	push   ebp
c0029b33:	57                   	push   edi
c0029b34:	56                   	push   esi
c0029b35:	53                   	push   ebx
c0029b36:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029b3c:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0029b43:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029b4a:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0029b51:	85 db                	test   ebx,ebx
c0029b53:	0f 84 e4 00 00 00    	je     c0029c3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0029b59:	85 ed                	test   ebp,ebp
c0029b5b:	0f 84 dc 00 00 00    	je     c0029c3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0029b61:	83 ec 0c             	sub    esp,0xc
c0029b64:	68 73 38 03 c0       	push   0xc0033873
c0029b69:	e8 dc f9 fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c0029b6e:	89 d8                	mov    eax,ebx
c0029b70:	b9 02 00 00 00       	mov    ecx,0x2
c0029b75:	99                   	cdq    
c0029b76:	f7 f9                	idiv   ecx
c0029b78:	83 e8 32             	sub    eax,0x32
c0029b7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0029b7e:	e8 b0 cf fd ff       	call   c0006b33 <iso_readdir>
c0029b83:	83 c4 10             	add    esp,0x10
c0029b86:	85 c0                	test   eax,eax
c0029b88:	89 c3                	mov    ebx,eax
c0029b8a:	75 38                	jne    c0029bc4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0029b8c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029b91:	53                   	push   ebx
c0029b92:	53                   	push   ebx
c0029b93:	68 7e 38 03 c0       	push   0xc003387e
c0029b98:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029b9e:	e8 49 db fe ff       	call   c00176ec <VgaText::puts(char const*)>
c0029ba3:	83 c4 0c             	add    esp,0xc
c0029ba6:	68 10 01 00 00       	push   0x110
c0029bab:	6a 00                	push   0x0
c0029bad:	57                   	push   edi
c0029bae:	e8 3d 69 fd ff       	call   c00004f0 <memset>
c0029bb3:	83 c4 10             	add    esp,0x10
c0029bb6:	b8 01 00 00 00       	mov    eax,0x1
c0029bbb:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0029bc2:	eb 7e                	jmp    c0029c42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029bc4:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029bca:	8d 70 08             	lea    esi,[eax+0x8]
c0029bcd:	83 ec 0c             	sub    esp,0xc
c0029bd0:	56                   	push   esi
c0029bd1:	e8 aa 69 fd ff       	call   c0000580 <strlen>
c0029bd6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029bde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029be2:	83 c4 10             	add    esp,0x10
c0029be5:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029be9:	75 0a                	jne    c0029bf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0029beb:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0029bee:	b8 02 00 00 00       	mov    eax,0x2
c0029bf3:	74 05                	je     c0029bfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0029bf5:	b8 01 00 00 00       	mov    eax,0x1
c0029bfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029bfe:	50                   	push   eax
c0029bff:	50                   	push   eax
c0029c00:	56                   	push   esi
c0029c01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029c05:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029c09:	50                   	push   eax
c0029c0a:	e8 41 6a fd ff       	call   c0000650 <strcpy>
c0029c0f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029c16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029c18:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0029c1f:	5a                   	pop    edx
c0029c20:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029c25:	59                   	pop    ecx
c0029c26:	68 91 38 03 c0       	push   0xc0033891
c0029c2b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029c31:	e8 b6 da fe ff       	call   c00176ec <VgaText::puts(char const*)>
c0029c36:	83 c4 10             	add    esp,0x10
c0029c39:	31 c0                	xor    eax,eax
c0029c3b:	eb 05                	jmp    c0029c42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029c3d:	b8 04 00 00 00       	mov    eax,0x4
c0029c42:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029c48:	5b                   	pop    ebx
c0029c49:	5e                   	pop    esi
c0029c4a:	5f                   	pop    edi
c0029c4b:	5d                   	pop    ebp
c0029c4c:	c3                   	ret    

c0029c4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029c4d:	57                   	push   edi
c0029c4e:	56                   	push   esi
c0029c4f:	53                   	push   ebx
c0029c50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029c54:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029c58:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029c5e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029c62:	0f be cb             	movsx  ecx,bl
c0029c65:	75 0b                	jne    c0029c72 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029c67:	0f be 05 e0 4a 03 c0 	movsx  eax,BYTE PTR ds:0xc0034ae0
c0029c6e:	39 c8                	cmp    eax,ecx
c0029c70:	74 47                	je     c0029cb9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029c72:	83 ec 0c             	sub    esp,0xc
c0029c75:	31 d2                	xor    edx,edx
c0029c77:	68 a0 03 04 c0       	push   0xc00403a0
c0029c7c:	6a 01                	push   0x1
c0029c7e:	52                   	push   edx
c0029c7f:	56                   	push   esi
c0029c80:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029c87:	e8 4a 2d ff ff       	call   c001c9d6 <LogicalDisk::read(unsigned long long, int, void*)>
c0029c8c:	83 c4 20             	add    esp,0x20
c0029c8f:	85 c0                	test   eax,eax
c0029c91:	75 0e                	jne    c0029ca1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029c93:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029c99:	88 1d e0 4a 03 c0    	mov    BYTE PTR ds:0xc0034ae0,bl
c0029c9f:	eb 18                	jmp    c0029cb9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029ca1:	50                   	push   eax
c0029ca2:	68 00 08 00 00       	push   0x800
c0029ca7:	6a 00                	push   0x0
c0029ca9:	57                   	push   edi
c0029caa:	e8 41 68 fd ff       	call   c00004f0 <memset>
c0029caf:	83 c4 10             	add    esp,0x10
c0029cb2:	b8 01 00 00 00       	mov    eax,0x1
c0029cb7:	eb 0e                	jmp    c0029cc7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029cb9:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029cbe:	b9 00 08 00 00       	mov    ecx,0x800
c0029cc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029cc5:	31 c0                	xor    eax,eax
c0029cc7:	5b                   	pop    ebx
c0029cc8:	5e                   	pop    esi
c0029cc9:	5f                   	pop    edi
c0029cca:	c3                   	ret    
c0029ccb:	90                   	nop

c0029ccc <ISO9660::tryMount(LogicalDisk*, int)>:
c0029ccc:	53                   	push   ebx
c0029ccd:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029cd3:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029cdd:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029ce4:	8d 58 41             	lea    ebx,[eax+0x41]
c0029ce7:	0f be db             	movsx  ebx,bl
c0029cea:	53                   	push   ebx
c0029ceb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029cef:	50                   	push   eax
c0029cf0:	6a 10                	push   0x10
c0029cf2:	e8 56 ff ff ff       	call   c0029c4d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029cf7:	83 c4 10             	add    esp,0x10
c0029cfa:	31 d2                	xor    edx,edx
c0029cfc:	85 c0                	test   eax,eax
c0029cfe:	75 33                	jne    c0029d33 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029d00:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029d05:	75 2c                	jne    c0029d33 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029d07:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029d0c:	75 25                	jne    c0029d33 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029d0e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029d13:	75 1e                	jne    c0029d33 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029d15:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029d1a:	75 17                	jne    c0029d33 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029d1c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029d21:	75 10                	jne    c0029d33 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029d23:	83 ec 0c             	sub    esp,0xc
c0029d26:	53                   	push   ebx
c0029d27:	e8 7f d0 fd ff       	call   c0006dab <init_percd>
c0029d2c:	83 c4 10             	add    esp,0x10
c0029d2f:	40                   	inc    eax
c0029d30:	0f 95 c2             	setne  dl
c0029d33:	81 c4 08 08 00 00    	add    esp,0x808
c0029d39:	88 d0                	mov    al,dl
c0029d3b:	5b                   	pop    ebx
c0029d3c:	c3                   	ret    
c0029d3d:	90                   	nop

c0029d3e <ISO9660::ISO9660()>:
c0029d3e:	83 ec 0c             	sub    esp,0xc
c0029d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d45:	83 ec 0c             	sub    esp,0xc
c0029d48:	50                   	push   eax
c0029d49:	e8 5e 06 ff ff       	call   c001a3ac <Filesystem::Filesystem()>
c0029d4e:	83 c4 10             	add    esp,0x10
c0029d51:	ba ac 38 03 c0       	mov    edx,0xc00338ac
c0029d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d5a:	89 10                	mov    DWORD PTR [eax],edx
c0029d5c:	e8 5c d1 fd ff       	call   c0006ebd <fs_iso9660_init>
c0029d61:	90                   	nop
c0029d62:	83 c4 0c             	add    esp,0xc
c0029d65:	c3                   	ret    

c0029d66 <SoundCard::beginPlayback()>:
c0029d66:	c7 44 24 04 10 39 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033910
c0029d6e:	e9 5f 67 ff ff       	jmp    c00204d2 <KePanic(char const*)>
c0029d73:	90                   	nop

c0029d74 <SoundCard::stopPlayback()>:
c0029d74:	c7 44 24 04 10 39 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033910
c0029d7c:	e9 51 67 ff ff       	jmp    c00204d2 <KePanic(char const*)>
c0029d81:	90                   	nop

c0029d82 <SoundCard::SoundCard(char const*)>:
c0029d82:	83 ec 1c             	sub    esp,0x1c
c0029d85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d89:	83 ec 08             	sub    esp,0x8
c0029d8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029d90:	50                   	push   eax
c0029d91:	e8 ac 19 ff ff       	call   c001b742 <Device::Device(char const*)>
c0029d96:	83 c4 10             	add    esp,0x10
c0029d99:	ba 5c 39 03 c0       	mov    edx,0xc003395c
c0029d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029da2:	89 10                	mov    DWORD PTR [eax],edx
c0029da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029da8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029daf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029db3:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029dc1:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029dcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029dcf:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029dd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ddd:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029de7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029def:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029df4:	7f 1a                	jg     c0029e10 <SoundCard::SoundCard(char const*)+0x8e>
c0029df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029dfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029dfe:	83 c2 54             	add    edx,0x54
c0029e01:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029e09:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029e0e:	eb df                	jmp    c0029def <SoundCard::SoundCard(char const*)+0x6d>
c0029e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029e14:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029e1b:	90                   	nop
c0029e1c:	83 c4 1c             	add    esp,0x1c
c0029e1f:	c3                   	ret    

c0029e20 <SoundCard::~SoundCard()>:
c0029e20:	83 ec 0c             	sub    esp,0xc
c0029e23:	ba 5c 39 03 c0       	mov    edx,0xc003395c
c0029e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e2c:	89 10                	mov    DWORD PTR [eax],edx
c0029e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e32:	83 ec 0c             	sub    esp,0xc
c0029e35:	50                   	push   eax
c0029e36:	e8 a7 16 ff ff       	call   c001b4e2 <Device::~Device()>
c0029e3b:	83 c4 10             	add    esp,0x10
c0029e3e:	90                   	nop
c0029e3f:	83 c4 0c             	add    esp,0xc
c0029e42:	c3                   	ret    
c0029e43:	90                   	nop

c0029e44 <SoundCard::~SoundCard()>:
c0029e44:	83 ec 0c             	sub    esp,0xc
c0029e47:	83 ec 0c             	sub    esp,0xc
c0029e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e4e:	e8 cd ff ff ff       	call   c0029e20 <SoundCard::~SoundCard()>
c0029e53:	83 c4 10             	add    esp,0x10
c0029e56:	83 ec 08             	sub    esp,0x8
c0029e59:	68 e8 01 00 00       	push   0x1e8
c0029e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e62:	e8 e5 f5 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c0029e67:	83 c4 10             	add    esp,0x10
c0029e6a:	83 c4 0c             	add    esp,0xc
c0029e6d:	c3                   	ret    

c0029e6e <SoundCard::configureRates(int, int, int)>:
c0029e6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029e72:	31 c0                	xor    eax,eax
c0029e74:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029e7b:	75 20                	jne    c0029e9d <SoundCard::configureRates(int, int, int)+0x2f>
c0029e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029e81:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029e8b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e95:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029e9b:	b0 01                	mov    al,0x1
c0029e9d:	c3                   	ret    

c0029e9e <SoundCard::getSamples16(int, short*)>:
c0029e9e:	55                   	push   ebp
c0029e9f:	57                   	push   edi
c0029ea0:	31 ff                	xor    edi,edi
c0029ea2:	56                   	push   esi
c0029ea3:	53                   	push   ebx
c0029ea4:	31 db                	xor    ebx,ebx
c0029ea6:	83 ec 10             	sub    esp,0x10
c0029ea9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029ead:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029eb1:	8d 04 36             	lea    eax,[esi+esi*1]
c0029eb4:	50                   	push   eax
c0029eb5:	6a 00                	push   0x0
c0029eb7:	55                   	push   ebp
c0029eb8:	e8 33 66 fd ff       	call   c00004f0 <memset>
c0029ebd:	83 c4 10             	add    esp,0x10
c0029ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ec4:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0029ecb:	85 c0                	test   eax,eax
c0029ecd:	74 1a                	je     c0029ee9 <SoundCard::getSamples16(int, short*)+0x4b>
c0029ecf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029ed3:	75 14                	jne    c0029ee9 <SoundCard::getSamples16(int, short*)+0x4b>
c0029ed5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029ed9:	55                   	push   ebp
c0029eda:	56                   	push   esi
c0029edb:	50                   	push   eax
c0029edc:	e8 f3 02 00 00       	call   c002a1d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029ee1:	83 c4 10             	add    esp,0x10
c0029ee4:	39 c3                	cmp    ebx,eax
c0029ee6:	0f 4c d8             	cmovl  ebx,eax
c0029ee9:	47                   	inc    edi
c0029eea:	83 ff 20             	cmp    edi,0x20
c0029eed:	75 d1                	jne    c0029ec0 <SoundCard::getSamples16(int, short*)+0x22>
c0029eef:	83 c4 0c             	add    esp,0xc
c0029ef2:	89 d8                	mov    eax,ebx
c0029ef4:	5b                   	pop    ebx
c0029ef5:	5e                   	pop    esi
c0029ef6:	5f                   	pop    edi
c0029ef7:	5d                   	pop    ebp
c0029ef8:	c3                   	ret    
c0029ef9:	90                   	nop

c0029efa <SoundCard::getSamples32(int, int*)>:
c0029efa:	55                   	push   ebp
c0029efb:	57                   	push   edi
c0029efc:	31 ff                	xor    edi,edi
c0029efe:	56                   	push   esi
c0029eff:	31 f6                	xor    esi,esi
c0029f01:	53                   	push   ebx
c0029f02:	83 ec 10             	sub    esp,0x10
c0029f05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029f09:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029f0d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029f11:	c1 e0 02             	shl    eax,0x2
c0029f14:	50                   	push   eax
c0029f15:	6a 00                	push   0x0
c0029f17:	55                   	push   ebp
c0029f18:	e8 d3 65 fd ff       	call   c00004f0 <memset>
c0029f1d:	83 c4 10             	add    esp,0x10
c0029f20:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029f27:	85 c0                	test   eax,eax
c0029f29:	74 1a                	je     c0029f45 <SoundCard::getSamples32(int, int*)+0x4b>
c0029f2b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029f2f:	75 14                	jne    c0029f45 <SoundCard::getSamples32(int, int*)+0x4b>
c0029f31:	53                   	push   ebx
c0029f32:	55                   	push   ebp
c0029f33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029f37:	50                   	push   eax
c0029f38:	e8 67 03 00 00       	call   c002a2a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029f3d:	83 c4 10             	add    esp,0x10
c0029f40:	39 c6                	cmp    esi,eax
c0029f42:	0f 4c f0             	cmovl  esi,eax
c0029f45:	47                   	inc    edi
c0029f46:	83 ff 20             	cmp    edi,0x20
c0029f49:	75 d5                	jne    c0029f20 <SoundCard::getSamples32(int, int*)+0x26>
c0029f4b:	85 f6                	test   esi,esi
c0029f4d:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029f54:	75 0f                	jne    c0029f65 <SoundCard::getSamples32(int, int*)+0x6b>
c0029f56:	85 c0                	test   eax,eax
c0029f58:	74 1b                	je     c0029f75 <SoundCard::getSamples32(int, int*)+0x7b>
c0029f5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029f5c:	83 ec 0c             	sub    esp,0xc
c0029f5f:	53                   	push   ebx
c0029f60:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029f63:	eb 0d                	jmp    c0029f72 <SoundCard::getSamples32(int, int*)+0x78>
c0029f65:	85 c0                	test   eax,eax
c0029f67:	75 0c                	jne    c0029f75 <SoundCard::getSamples32(int, int*)+0x7b>
c0029f69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029f6b:	83 ec 0c             	sub    esp,0xc
c0029f6e:	53                   	push   ebx
c0029f6f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029f72:	83 c4 10             	add    esp,0x10
c0029f75:	83 c4 0c             	add    esp,0xc
c0029f78:	89 f0                	mov    eax,esi
c0029f7a:	5b                   	pop    ebx
c0029f7b:	5e                   	pop    esi
c0029f7c:	5f                   	pop    edi
c0029f7d:	5d                   	pop    ebp
c0029f7e:	c3                   	ret    
c0029f7f:	90                   	nop

c0029f80 <SoundCard::addChannel(SoundPort*)>:
c0029f80:	83 ec 0c             	sub    esp,0xc
c0029f83:	31 c0                	xor    eax,eax
c0029f85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029f89:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029f91:	74 1b                	je     c0029fae <SoundCard::addChannel(SoundPort*)+0x2e>
c0029f93:	40                   	inc    eax
c0029f94:	83 f8 20             	cmp    eax,0x20
c0029f97:	75 f0                	jne    c0029f89 <SoundCard::addChannel(SoundPort*)+0x9>
c0029f99:	83 ec 0c             	sub    esp,0xc
c0029f9c:	68 35 39 03 c0       	push   0xc0033935
c0029fa1:	e8 2c 65 ff ff       	call   c00204d2 <KePanic(char const*)>
c0029fa6:	83 c4 10             	add    esp,0x10
c0029fa9:	83 c8 ff             	or     eax,0xffffffff
c0029fac:	eb 0b                	jmp    c0029fb9 <SoundCard::addChannel(SoundPort*)+0x39>
c0029fae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029fb2:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029fb9:	83 c4 0c             	add    esp,0xc
c0029fbc:	c3                   	ret    
c0029fbd:	90                   	nop

c0029fbe <SoundCard::removeChannel(int)>:
c0029fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029fc6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029fd1:	c3                   	ret    
c0029fd2:	66 90                	xchg   ax,ax

c0029fd4 <SoundPort::SoundPort(int, int, int, int)>:
c0029fd4:	83 ec 0c             	sub    esp,0xc
c0029fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fdb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fe6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029ff2:	89 10                	mov    DWORD PTR [eax],edx
c0029ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ff8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029ffc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a003:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002a007:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002a00a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c002a00f:	75 13                	jne    c002a024 <SoundPort::SoundPort(int, int, int, int)+0x50>
c002a011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a015:	8b 00                	mov    eax,DWORD PTR [eax]
c002a017:	05 a0 0f 00 00       	add    eax,0xfa0
c002a01c:	d1 e0                	shl    eax,1
c002a01e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a022:	66 90                	xchg   ax,ax
c002a024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a028:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a02c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002a02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a033:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002a03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a03e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a041:	c1 e0 02             	shl    eax,0x2
c002a044:	83 ec 0c             	sub    esp,0xc
c002a047:	50                   	push   eax
c002a048:	e8 c7 c6 fe ff       	call   c0016714 <malloc>
c002a04d:	83 c4 10             	add    esp,0x10
c002a050:	89 c2                	mov    edx,eax
c002a052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a056:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002a059:	90                   	nop
c002a05a:	83 c4 0c             	add    esp,0xc
c002a05d:	c3                   	ret    
c002a05e:	66 90                	xchg   ax,ax

c002a060 <SoundPort::~SoundPort()>:
c002a060:	83 ec 0c             	sub    esp,0xc
c002a063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a067:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a06a:	85 c0                	test   eax,eax
c002a06c:	74 1e                	je     c002a08c <SoundPort::~SoundPort()+0x2c>
c002a06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a072:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a075:	83 ec 0c             	sub    esp,0xc
c002a078:	50                   	push   eax
c002a079:	e8 a6 c6 fe ff       	call   c0016724 <free>
c002a07e:	83 c4 10             	add    esp,0x10
c002a081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a085:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a08c:	90                   	nop
c002a08d:	83 c4 0c             	add    esp,0xc
c002a090:	c3                   	ret    
c002a091:	90                   	nop
c002a092:	66 90                	xchg   ax,ax

c002a094 <SoundPort::unpause()>:
c002a094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a098:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c002a09c:	c3                   	ret    
c002a09d:	90                   	nop
c002a09e:	66 90                	xchg   ax,ax

c002a0a0 <SoundPort::pause()>:
c002a0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a0a4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a0a8:	c3                   	ret    
c002a0a9:	90                   	nop
c002a0aa:	66 90                	xchg   ax,ax

c002a0ac <SoundPort::getBufferUsed()>:
c002a0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a0b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002a0b3:	c3                   	ret    

c002a0b4 <SoundPort::getBufferSize()>:
c002a0b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a0b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a0bb:	c3                   	ret    

c002a0bc <SoundPort::buffer16(short*, int)>:
c002a0bc:	55                   	push   ebp
c002a0bd:	57                   	push   edi
c002a0be:	56                   	push   esi
c002a0bf:	53                   	push   ebx
c002a0c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a0c4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002a0c8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002a0cb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c002a0ce:	74 68                	je     c002a138 <SoundPort::buffer16(short*, int)+0x7c>
c002a0d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a0d4:	85 c9                	test   ecx,ecx
c002a0d6:	7e 60                	jle    c002a138 <SoundPort::buffer16(short*, int)+0x7c>
c002a0d8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c002a0dc:	8d 70 01             	lea    esi,[eax+0x1]
c002a0df:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a0e2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a0e5:	c1 e1 0f             	shl    ecx,0xf
c002a0e8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a0eb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a0ee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a0f1:	74 4d                	je     c002a140 <SoundPort::buffer16(short*, int)+0x84>
c002a0f3:	31 f6                	xor    esi,esi
c002a0f5:	eb 21                	jmp    c002a118 <SoundPort::buffer16(short*, int)+0x5c>
c002a0f7:	90                   	nop
c002a0f8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a0fd:	8d 79 01             	lea    edi,[ecx+0x1]
c002a100:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a103:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a106:	c1 e3 0f             	shl    ebx,0xf
c002a109:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a10c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a10f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a112:	74 1c                	je     c002a130 <SoundPort::buffer16(short*, int)+0x74>
c002a114:	89 c6                	mov    esi,eax
c002a116:	66 90                	xchg   ax,ax
c002a118:	8d 46 01             	lea    eax,[esi+0x1]
c002a11b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a11f:	75 d7                	jne    c002a0f8 <SoundPort::buffer16(short*, int)+0x3c>
c002a121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a125:	8d 76 00             	lea    esi,[esi+0x0]
c002a128:	5b                   	pop    ebx
c002a129:	5e                   	pop    esi
c002a12a:	5f                   	pop    edi
c002a12b:	5d                   	pop    ebp
c002a12c:	c3                   	ret    
c002a12d:	8d 76 00             	lea    esi,[esi+0x0]
c002a130:	5b                   	pop    ebx
c002a131:	8d 46 02             	lea    eax,[esi+0x2]
c002a134:	5e                   	pop    esi
c002a135:	5f                   	pop    edi
c002a136:	5d                   	pop    ebp
c002a137:	c3                   	ret    
c002a138:	5b                   	pop    ebx
c002a139:	31 c0                	xor    eax,eax
c002a13b:	5e                   	pop    esi
c002a13c:	5f                   	pop    edi
c002a13d:	5d                   	pop    ebp
c002a13e:	c3                   	ret    
c002a13f:	90                   	nop
c002a140:	b8 01 00 00 00       	mov    eax,0x1
c002a145:	eb e1                	jmp    c002a128 <SoundPort::buffer16(short*, int)+0x6c>
c002a147:	90                   	nop

c002a148 <SoundPort::buffer32(int*, int)>:
c002a148:	55                   	push   ebp
c002a149:	57                   	push   edi
c002a14a:	56                   	push   esi
c002a14b:	53                   	push   ebx
c002a14c:	83 ec 04             	sub    esp,0x4
c002a14f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a157:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a15b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a15e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a161:	89 04 24             	mov    DWORD PTR [esp],eax
c002a164:	74 5a                	je     c002a1c0 <SoundPort::buffer32(int*, int)+0x78>
c002a166:	85 c0                	test   eax,eax
c002a168:	7e 56                	jle    c002a1c0 <SoundPort::buffer32(int*, int)+0x78>
c002a16a:	8d 71 01             	lea    esi,[ecx+0x1]
c002a16d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a170:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a173:	8b 37                	mov    esi,DWORD PTR [edi]
c002a175:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a178:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a17b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a17e:	74 4c                	je     c002a1cc <SoundPort::buffer32(int*, int)+0x84>
c002a180:	31 f6                	xor    esi,esi
c002a182:	eb 1c                	jmp    c002a1a0 <SoundPort::buffer32(int*, int)+0x58>
c002a184:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a187:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a18a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a18d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a190:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a194:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a197:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a19a:	74 18                	je     c002a1b4 <SoundPort::buffer32(int*, int)+0x6c>
c002a19c:	89 de                	mov    esi,ebx
c002a19e:	66 90                	xchg   ax,ax
c002a1a0:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a1a3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a1a6:	75 dc                	jne    c002a184 <SoundPort::buffer32(int*, int)+0x3c>
c002a1a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a1ab:	90                   	nop
c002a1ac:	83 c4 04             	add    esp,0x4
c002a1af:	5b                   	pop    ebx
c002a1b0:	5e                   	pop    esi
c002a1b1:	5f                   	pop    edi
c002a1b2:	5d                   	pop    ebp
c002a1b3:	c3                   	ret    
c002a1b4:	8d 46 02             	lea    eax,[esi+0x2]
c002a1b7:	83 c4 04             	add    esp,0x4
c002a1ba:	5b                   	pop    ebx
c002a1bb:	5e                   	pop    esi
c002a1bc:	5f                   	pop    edi
c002a1bd:	5d                   	pop    ebp
c002a1be:	c3                   	ret    
c002a1bf:	90                   	nop
c002a1c0:	83 c4 04             	add    esp,0x4
c002a1c3:	31 c0                	xor    eax,eax
c002a1c5:	5b                   	pop    ebx
c002a1c6:	5e                   	pop    esi
c002a1c7:	5f                   	pop    edi
c002a1c8:	5d                   	pop    ebp
c002a1c9:	c3                   	ret    
c002a1ca:	66 90                	xchg   ax,ax
c002a1cc:	b8 01 00 00 00       	mov    eax,0x1
c002a1d1:	eb d9                	jmp    c002a1ac <SoundPort::buffer32(int*, int)+0x64>
c002a1d3:	90                   	nop

c002a1d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a1d4:	55                   	push   ebp
c002a1d5:	57                   	push   edi
c002a1d6:	56                   	push   esi
c002a1d7:	53                   	push   ebx
c002a1d8:	83 ec 0c             	sub    esp,0xc
c002a1db:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a1df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a1e3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002a1e7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002a1eb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a1f1:	39 03                	cmp    DWORD PTR [ebx],eax
c002a1f3:	74 13                	je     c002a208 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c002a1f5:	83 ec 0c             	sub    esp,0xc
c002a1f8:	68 88 39 03 c0       	push   0xc0033988
c002a1fd:	e8 d0 62 ff ff       	call   c00204d2 <KePanic(char const*)>
c002a202:	83 c4 10             	add    esp,0x10
c002a205:	8d 76 00             	lea    esi,[esi+0x0]
c002a208:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a20e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a211:	74 11                	je     c002a224 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c002a213:	83 ec 0c             	sub    esp,0xc
c002a216:	68 c7 39 03 c0       	push   0xc00339c7
c002a21b:	e8 b2 62 ff ff       	call   c00204d2 <KePanic(char const*)>
c002a220:	83 c4 10             	add    esp,0x10
c002a223:	90                   	nop
c002a224:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a22a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a22d:	74 11                	je     c002a240 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c002a22f:	83 ec 0c             	sub    esp,0xc
c002a232:	68 c7 39 03 c0       	push   0xc00339c7
c002a237:	e8 96 62 ff ff       	call   c00204d2 <KePanic(char const*)>
c002a23c:	83 c4 10             	add    esp,0x10
c002a23f:	90                   	nop
c002a240:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c002a243:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c002a247:	85 f6                	test   esi,esi
c002a249:	7e 2d                	jle    c002a278 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c002a24b:	31 c0                	xor    eax,eax
c002a24d:	8d 76 00             	lea    esi,[esi+0x0]
c002a250:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a253:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c002a256:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c002a25c:	85 c9                	test   ecx,ecx
c002a25e:	0f 49 d1             	cmovns edx,ecx
c002a261:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c002a265:	c1 fa 0f             	sar    edx,0xf
c002a268:	01 d1                	add    ecx,edx
c002a26a:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c002a26e:	83 c0 01             	add    eax,0x1
c002a271:	39 f0                	cmp    eax,esi
c002a273:	75 db                	jne    c002a250 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c002a275:	8d 76 00             	lea    esi,[esi+0x0]
c002a278:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a27b:	83 ec 04             	sub    esp,0x4
c002a27e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a281:	29 f0                	sub    eax,esi
c002a283:	c1 e0 02             	shl    eax,0x2
c002a286:	50                   	push   eax
c002a287:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a28a:	50                   	push   eax
c002a28b:	52                   	push   edx
c002a28c:	e8 3f 61 fd ff       	call   c00003d0 <memmove>
c002a291:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a294:	29 f0                	sub    eax,esi
c002a296:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a299:	83 c4 1c             	add    esp,0x1c
c002a29c:	89 f0                	mov    eax,esi
c002a29e:	5b                   	pop    ebx
c002a29f:	5e                   	pop    esi
c002a2a0:	5f                   	pop    edi
c002a2a1:	5d                   	pop    ebp
c002a2a2:	c3                   	ret    
c002a2a3:	90                   	nop

c002a2a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a2a4:	55                   	push   ebp
c002a2a5:	57                   	push   edi
c002a2a6:	56                   	push   esi
c002a2a7:	53                   	push   ebx
c002a2a8:	83 ec 0c             	sub    esp,0xc
c002a2ab:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a2af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a2b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a2b7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a2bb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a2c1:	39 03                	cmp    DWORD PTR [ebx],eax
c002a2c3:	74 13                	je     c002a2d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c002a2c5:	83 ec 0c             	sub    esp,0xc
c002a2c8:	68 a8 39 03 c0       	push   0xc00339a8
c002a2cd:	e8 00 62 ff ff       	call   c00204d2 <KePanic(char const*)>
c002a2d2:	83 c4 10             	add    esp,0x10
c002a2d5:	8d 76 00             	lea    esi,[esi+0x0]
c002a2d8:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a2de:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a2e1:	74 11                	je     c002a2f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c002a2e3:	83 ec 0c             	sub    esp,0xc
c002a2e6:	68 e3 39 03 c0       	push   0xc00339e3
c002a2eb:	e8 e2 61 ff ff       	call   c00204d2 <KePanic(char const*)>
c002a2f0:	83 c4 10             	add    esp,0x10
c002a2f3:	90                   	nop
c002a2f4:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a2fa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a2fd:	74 11                	je     c002a310 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c002a2ff:	83 ec 0c             	sub    esp,0xc
c002a302:	68 e3 39 03 c0       	push   0xc00339e3
c002a307:	e8 c6 61 ff ff       	call   c00204d2 <KePanic(char const*)>
c002a30c:	83 c4 10             	add    esp,0x10
c002a30f:	90                   	nop
c002a310:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c002a313:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c002a317:	85 ff                	test   edi,edi
c002a319:	7e 21                	jle    c002a33c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c002a31b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a322:	31 c0                	xor    eax,eax
c002a324:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a327:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c002a32a:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a32d:	01 d5                	add    ebp,edx
c002a32f:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c002a332:	83 c0 04             	add    eax,0x4
c002a335:	39 c1                	cmp    ecx,eax
c002a337:	75 eb                	jne    c002a324 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c002a339:	8d 76 00             	lea    esi,[esi+0x0]
c002a33c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a33f:	83 ec 04             	sub    esp,0x4
c002a342:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a345:	29 f8                	sub    eax,edi
c002a347:	c1 e0 02             	shl    eax,0x2
c002a34a:	50                   	push   eax
c002a34b:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a34e:	50                   	push   eax
c002a34f:	52                   	push   edx
c002a350:	e8 7b 60 fd ff       	call   c00003d0 <memmove>
c002a355:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a358:	29 f8                	sub    eax,edi
c002a35a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a35d:	83 c4 1c             	add    esp,0x1c
c002a360:	89 f8                	mov    eax,edi
c002a362:	5b                   	pop    ebx
c002a363:	5e                   	pop    esi
c002a364:	5f                   	pop    edi
c002a365:	5d                   	pop    ebp
c002a366:	c3                   	ret    
c002a367:	90                   	nop

c002a368 <PCI::open(int, int, void*)>:
c002a368:	83 ec 18             	sub    esp,0x18
c002a36b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a36f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a373:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a379:	8b 10                	mov    edx,DWORD PTR [eax]
c002a37b:	50                   	push   eax
c002a37c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a37f:	31 c0                	xor    eax,eax
c002a381:	83 c4 1c             	add    esp,0x1c
c002a384:	c3                   	ret    
c002a385:	90                   	nop

c002a386 <PCI::close(int, int, void*)>:
c002a386:	31 c0                	xor    eax,eax
c002a388:	c3                   	ret    
c002a389:	90                   	nop

c002a38a <PCI::PCI()>:
c002a38a:	83 ec 0c             	sub    esp,0xc
c002a38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a391:	83 ec 08             	sub    esp,0x8
c002a394:	68 ff 39 03 c0       	push   0xc00339ff
c002a399:	50                   	push   eax
c002a39a:	e8 9d 0b ff ff       	call   c001af3c <Bus::Bus(char const*)>
c002a39f:	83 c4 10             	add    esp,0x10
c002a3a2:	ba a8 3a 03 c0       	mov    edx,0xc0033aa8
c002a3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3ab:	89 10                	mov    DWORD PTR [eax],edx
c002a3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3b1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3bf:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a3ce:	0f b6 d0             	movzx  edx,al
c002a3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3d5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a3e6:	0f b6 d0             	movzx  edx,al
c002a3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3ed:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a3fc:	8d 50 01             	lea    edx,[eax+0x1]
c002a3ff:	88 d1                	mov    cl,dl
c002a401:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a405:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a40b:	0f b6 d0             	movzx  edx,al
c002a40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a412:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a416:	83 c9 c0             	or     ecx,0xffffffc0
c002a419:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a41d:	90                   	nop
c002a41e:	83 c4 0c             	add    esp,0xc
c002a421:	c3                   	ret    

c002a422 <PCI::readBAR8(unsigned int, int)>:
c002a422:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a42a:	f6 c2 01             	test   dl,0x1
c002a42d:	74 07                	je     c002a436 <PCI::readBAR8(unsigned int, int)+0x14>
c002a42f:	83 e2 fc             	and    edx,0xfffffffc
c002a432:	01 c2                	add    edx,eax
c002a434:	ec                   	in     al,dx
c002a435:	c3                   	ret    
c002a436:	83 e2 f0             	and    edx,0xfffffff0
c002a439:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a43c:	c3                   	ret    
c002a43d:	90                   	nop

c002a43e <PCI::readBAR16(unsigned int, int)>:
c002a43e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a442:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a446:	f6 c2 01             	test   dl,0x1
c002a449:	74 08                	je     c002a453 <PCI::readBAR16(unsigned int, int)+0x15>
c002a44b:	83 e2 fc             	and    edx,0xfffffffc
c002a44e:	01 c2                	add    edx,eax
c002a450:	66 ed                	in     ax,dx
c002a452:	c3                   	ret    
c002a453:	83 e2 f0             	and    edx,0xfffffff0
c002a456:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a45a:	c3                   	ret    
c002a45b:	90                   	nop

c002a45c <PCI::readBAR32(unsigned int, int)>:
c002a45c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a460:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a464:	f6 c2 01             	test   dl,0x1
c002a467:	74 07                	je     c002a470 <PCI::readBAR32(unsigned int, int)+0x14>
c002a469:	83 e2 fc             	and    edx,0xfffffffc
c002a46c:	01 c2                	add    edx,eax
c002a46e:	ed                   	in     eax,dx
c002a46f:	c3                   	ret    
c002a470:	83 e2 f0             	and    edx,0xfffffff0
c002a473:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a476:	c3                   	ret    
c002a477:	90                   	nop

c002a478 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a478:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a47c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a480:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a484:	f6 c2 01             	test   dl,0x1
c002a487:	74 07                	je     c002a490 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a489:	83 e2 fc             	and    edx,0xfffffffc
c002a48c:	01 ca                	add    edx,ecx
c002a48e:	ee                   	out    dx,al
c002a48f:	c3                   	ret    
c002a490:	83 e2 f0             	and    edx,0xfffffff0
c002a493:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a496:	c3                   	ret    
c002a497:	90                   	nop

c002a498 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a49c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a4a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a4a4:	f6 c2 01             	test   dl,0x1
c002a4a7:	74 08                	je     c002a4b1 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a4a9:	83 e2 fc             	and    edx,0xfffffffc
c002a4ac:	01 ca                	add    edx,ecx
c002a4ae:	66 ef                	out    dx,ax
c002a4b0:	c3                   	ret    
c002a4b1:	83 e2 f0             	and    edx,0xfffffff0
c002a4b4:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a4b8:	c3                   	ret    
c002a4b9:	90                   	nop

c002a4ba <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a4ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a4be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a4c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a4c6:	f6 c2 01             	test   dl,0x1
c002a4c9:	74 07                	je     c002a4d2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a4cb:	83 e2 fc             	and    edx,0xfffffffc
c002a4ce:	01 ca                	add    edx,ecx
c002a4d0:	ef                   	out    dx,eax
c002a4d1:	c3                   	ret    
c002a4d2:	83 e2 f0             	and    edx,0xfffffff0
c002a4d5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a4d8:	c3                   	ret    
c002a4d9:	90                   	nop

c002a4da <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a4da:	55                   	push   ebp
c002a4db:	57                   	push   edi
c002a4dc:	56                   	push   esi
c002a4dd:	53                   	push   ebx
c002a4de:	83 ec 0c             	sub    esp,0xc
c002a4e1:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a4e6:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a4ea:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a4ee:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a4f2:	83 fe 07             	cmp    esi,0x7
c002a4f5:	76 10                	jbe    c002a507 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a4f7:	83 ec 0c             	sub    esp,0xc
c002a4fa:	68 07 3a 03 c0       	push   0xc0033a07
c002a4ff:	e8 ce 5f ff ff       	call   c00204d2 <KePanic(char const*)>
c002a504:	83 c4 10             	add    esp,0x10
c002a507:	0f b6 db             	movzx  ebx,bl
c002a50a:	83 fb 0f             	cmp    ebx,0xf
c002a50d:	76 10                	jbe    c002a51f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a50f:	83 ec 0c             	sub    esp,0xc
c002a512:	68 37 3a 03 c0       	push   0xc0033a37
c002a517:	e8 b6 5f ff ff       	call   c00204d2 <KePanic(char const*)>
c002a51c:	83 c4 10             	add    esp,0x10
c002a51f:	8d 04 36             	lea    eax,[esi+esi*1]
c002a522:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a527:	83 c8 f0             	or     eax,0xfffffff0
c002a52a:	ee                   	out    dx,al
c002a52b:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a530:	89 e8                	mov    eax,ebp
c002a532:	ee                   	out    dx,al
c002a533:	89 f9                	mov    ecx,edi
c002a535:	89 d8                	mov    eax,ebx
c002a537:	0f b6 d9             	movzx  ebx,cl
c002a53a:	83 c4 0c             	add    esp,0xc
c002a53d:	c1 e0 08             	shl    eax,0x8
c002a540:	83 e3 fc             	and    ebx,0xfffffffc
c002a543:	09 d8                	or     eax,ebx
c002a545:	5b                   	pop    ebx
c002a546:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a54b:	5e                   	pop    esi
c002a54c:	5f                   	pop    edi
c002a54d:	5d                   	pop    ebp
c002a54e:	c3                   	ret    
c002a54f:	90                   	nop

c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a550:	57                   	push   edi
c002a551:	56                   	push   esi
c002a552:	53                   	push   ebx
c002a553:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a557:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a55b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a55f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a563:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a569:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a56d:	83 ff 01             	cmp    edi,0x1
c002a570:	75 3f                	jne    c002a5b1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a572:	89 de                	mov    esi,ebx
c002a574:	0f b6 c0             	movzx  eax,al
c002a577:	c1 e0 10             	shl    eax,0x10
c002a57a:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a580:	0f b6 c9             	movzx  ecx,cl
c002a583:	09 f0                	or     eax,esi
c002a585:	c1 e1 08             	shl    ecx,0x8
c002a588:	0f b6 d2             	movzx  edx,dl
c002a58b:	c1 e2 0b             	shl    edx,0xb
c002a58e:	09 c8                	or     eax,ecx
c002a590:	09 d0                	or     eax,edx
c002a592:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a597:	0d 00 00 00 80       	or     eax,0x80000000
c002a59c:	ef                   	out    dx,eax
c002a59d:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a5a2:	ed                   	in     eax,dx
c002a5a3:	83 e3 02             	and    ebx,0x2
c002a5a6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a5ad:	d3 e8                	shr    eax,cl
c002a5af:	eb 44                	jmp    c002a5f5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a5b1:	83 ff 02             	cmp    edi,0x2
c002a5b4:	75 2d                	jne    c002a5e3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a5b6:	83 ec 0c             	sub    esp,0xc
c002a5b9:	0f b6 fb             	movzx  edi,bl
c002a5bc:	57                   	push   edi
c002a5bd:	0f b6 c9             	movzx  ecx,cl
c002a5c0:	51                   	push   ecx
c002a5c1:	0f b6 d2             	movzx  edx,dl
c002a5c4:	52                   	push   edx
c002a5c5:	0f b6 c0             	movzx  eax,al
c002a5c8:	50                   	push   eax
c002a5c9:	56                   	push   esi
c002a5ca:	e8 0b ff ff ff       	call   c002a4da <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5cf:	89 c2                	mov    edx,eax
c002a5d1:	ed                   	in     eax,dx
c002a5d2:	83 e3 02             	and    ebx,0x2
c002a5d5:	83 c4 20             	add    esp,0x20
c002a5d8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a5df:	d3 e8                	shr    eax,cl
c002a5e1:	eb 12                	jmp    c002a5f5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a5e3:	83 ec 0c             	sub    esp,0xc
c002a5e6:	68 67 3a 03 c0       	push   0xc0033a67
c002a5eb:	e8 e2 5e ff ff       	call   c00204d2 <KePanic(char const*)>
c002a5f0:	83 c4 10             	add    esp,0x10
c002a5f3:	31 c0                	xor    eax,eax
c002a5f5:	5b                   	pop    ebx
c002a5f6:	5e                   	pop    esi
c002a5f7:	5f                   	pop    edi
c002a5f8:	c3                   	ret    
c002a5f9:	90                   	nop

c002a5fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a5fa:	83 ec 18             	sub    esp,0x18
c002a5fd:	6a 00                	push   0x0
c002a5ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a604:	50                   	push   eax
c002a605:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a60a:	50                   	push   eax
c002a60b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a610:	50                   	push   eax
c002a611:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a615:	e8 36 ff ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a61a:	83 c4 2c             	add    esp,0x2c
c002a61d:	c3                   	ret    

c002a61e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a61e:	83 ec 18             	sub    esp,0x18
c002a621:	6a 0e                	push   0xe
c002a623:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a628:	50                   	push   eax
c002a629:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a62e:	50                   	push   eax
c002a62f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a634:	50                   	push   eax
c002a635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a639:	e8 12 ff ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a63e:	83 c4 2c             	add    esp,0x2c
c002a641:	0f b6 c0             	movzx  eax,al
c002a644:	c3                   	ret    
c002a645:	90                   	nop

c002a646 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a646:	55                   	push   ebp
c002a647:	57                   	push   edi
c002a648:	56                   	push   esi
c002a649:	53                   	push   ebx
c002a64a:	83 ec 18             	sub    esp,0x18
c002a64d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a652:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a657:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a65c:	6a 0a                	push   0xa
c002a65e:	56                   	push   esi
c002a65f:	55                   	push   ebp
c002a660:	57                   	push   edi
c002a661:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a665:	e8 e6 fe ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a66a:	83 c4 14             	add    esp,0x14
c002a66d:	6a 0a                	push   0xa
c002a66f:	56                   	push   esi
c002a670:	55                   	push   ebp
c002a671:	57                   	push   edi
c002a672:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a676:	89 c3                	mov    ebx,eax
c002a678:	0f b6 db             	movzx  ebx,bl
c002a67b:	e8 d0 fe ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a680:	83 c4 2c             	add    esp,0x2c
c002a683:	25 00 ff 00 00       	and    eax,0xff00
c002a688:	09 d8                	or     eax,ebx
c002a68a:	5b                   	pop    ebx
c002a68b:	5e                   	pop    esi
c002a68c:	5f                   	pop    edi
c002a68d:	5d                   	pop    ebp
c002a68e:	c3                   	ret    
c002a68f:	90                   	nop

c002a690 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a690:	83 ec 18             	sub    esp,0x18
c002a693:	6a 08                	push   0x8
c002a695:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a69a:	50                   	push   eax
c002a69b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6a0:	50                   	push   eax
c002a6a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6a6:	50                   	push   eax
c002a6a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a6ab:	e8 a0 fe ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6b0:	83 c4 2c             	add    esp,0x2c
c002a6b3:	0f b6 c4             	movzx  eax,ah
c002a6b6:	c3                   	ret    
c002a6b7:	90                   	nop

c002a6b8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a6b8:	83 ec 18             	sub    esp,0x18
c002a6bb:	6a 08                	push   0x8
c002a6bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6c2:	50                   	push   eax
c002a6c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6c8:	50                   	push   eax
c002a6c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6ce:	50                   	push   eax
c002a6cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a6d3:	e8 78 fe ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6d8:	83 c4 2c             	add    esp,0x2c
c002a6db:	c3                   	ret    

c002a6dc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a6dc:	83 ec 18             	sub    esp,0x18
c002a6df:	6a 3c                	push   0x3c
c002a6e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6e6:	50                   	push   eax
c002a6e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6ec:	50                   	push   eax
c002a6ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6f2:	50                   	push   eax
c002a6f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a6f7:	e8 54 fe ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6fc:	83 c4 2c             	add    esp,0x2c
c002a6ff:	c3                   	ret    

c002a700 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a700:	83 ec 18             	sub    esp,0x18
c002a703:	6a 18                	push   0x18
c002a705:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a70a:	50                   	push   eax
c002a70b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a710:	50                   	push   eax
c002a711:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a716:	50                   	push   eax
c002a717:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a71b:	e8 30 fe ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a720:	83 c4 2c             	add    esp,0x2c
c002a723:	0f b6 c4             	movzx  eax,ah
c002a726:	c3                   	ret    
c002a727:	90                   	nop

c002a728 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a728:	55                   	push   ebp
c002a729:	57                   	push   edi
c002a72a:	56                   	push   esi
c002a72b:	53                   	push   ebx
c002a72c:	83 ec 28             	sub    esp,0x28
c002a72f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a733:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a738:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a73d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a742:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a749:	8d 43 12             	lea    eax,[ebx+0x12]
c002a74c:	83 c3 10             	add    ebx,0x10
c002a74f:	0f b6 c0             	movzx  eax,al
c002a752:	0f b6 db             	movzx  ebx,bl
c002a755:	50                   	push   eax
c002a756:	51                   	push   ecx
c002a757:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a75b:	57                   	push   edi
c002a75c:	55                   	push   ebp
c002a75d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a761:	e8 ea fd ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a766:	83 c4 14             	add    esp,0x14
c002a769:	53                   	push   ebx
c002a76a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a76e:	51                   	push   ecx
c002a76f:	89 c6                	mov    esi,eax
c002a771:	57                   	push   edi
c002a772:	55                   	push   ebp
c002a773:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a777:	c1 e6 10             	shl    esi,0x10
c002a77a:	e8 d1 fd ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a77f:	83 c4 3c             	add    esp,0x3c
c002a782:	5b                   	pop    ebx
c002a783:	0f b7 c0             	movzx  eax,ax
c002a786:	09 f0                	or     eax,esi
c002a788:	5e                   	pop    esi
c002a789:	5f                   	pop    edi
c002a78a:	5d                   	pop    ebp
c002a78b:	c3                   	ret    

c002a78c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a78c:	55                   	push   ebp
c002a78d:	57                   	push   edi
c002a78e:	56                   	push   esi
c002a78f:	53                   	push   ebx
c002a790:	83 ec 0c             	sub    esp,0xc
c002a793:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a797:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a79b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a79f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a7a3:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a7a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a7ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a7b1:	83 f9 01             	cmp    ecx,0x1
c002a7b4:	75 5d                	jne    c002a813 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a7b6:	0f b6 c8             	movzx  ecx,al
c002a7b9:	89 f0                	mov    eax,esi
c002a7bb:	25 fc 00 00 00       	and    eax,0xfc
c002a7c0:	0f b6 d2             	movzx  edx,dl
c002a7c3:	c1 e1 10             	shl    ecx,0x10
c002a7c6:	c1 e2 0b             	shl    edx,0xb
c002a7c9:	09 c1                	or     ecx,eax
c002a7cb:	89 f8                	mov    eax,edi
c002a7cd:	0f b6 f8             	movzx  edi,al
c002a7d0:	c1 e7 08             	shl    edi,0x8
c002a7d3:	09 f9                	or     ecx,edi
c002a7d5:	09 d1                	or     ecx,edx
c002a7d7:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a7dc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a7e2:	89 c8                	mov    eax,ecx
c002a7e4:	ef                   	out    dx,eax
c002a7e5:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a7ea:	ed                   	in     eax,dx
c002a7eb:	83 e6 02             	and    esi,0x2
c002a7ee:	0f b7 db             	movzx  ebx,bx
c002a7f1:	74 0a                	je     c002a7fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a7f3:	c1 e3 10             	shl    ebx,0x10
c002a7f6:	0f b7 d0             	movzx  edx,ax
c002a7f9:	09 d3                	or     ebx,edx
c002a7fb:	eb 05                	jmp    c002a802 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a7fd:	66 31 c0             	xor    ax,ax
c002a800:	09 c3                	or     ebx,eax
c002a802:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a807:	89 c8                	mov    eax,ecx
c002a809:	ef                   	out    dx,eax
c002a80a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a80f:	89 d8                	mov    eax,ebx
c002a811:	eb 41                	jmp    c002a854 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a813:	83 f9 02             	cmp    ecx,0x2
c002a816:	75 45                	jne    c002a85d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002a818:	89 f1                	mov    ecx,esi
c002a81a:	83 ec 0c             	sub    esp,0xc
c002a81d:	0f b6 f1             	movzx  esi,cl
c002a820:	89 f9                	mov    ecx,edi
c002a822:	56                   	push   esi
c002a823:	0f b6 f9             	movzx  edi,cl
c002a826:	57                   	push   edi
c002a827:	0f b6 d2             	movzx  edx,dl
c002a82a:	52                   	push   edx
c002a82b:	0f b6 c0             	movzx  eax,al
c002a82e:	50                   	push   eax
c002a82f:	55                   	push   ebp
c002a830:	e8 a5 fc ff ff       	call   c002a4da <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a835:	89 c2                	mov    edx,eax
c002a837:	ed                   	in     eax,dx
c002a838:	83 c4 20             	add    esp,0x20
c002a83b:	f6 c2 02             	test   dl,0x2
c002a83e:	0f b7 db             	movzx  ebx,bx
c002a841:	74 0c                	je     c002a84f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002a843:	0f b7 c8             	movzx  ecx,ax
c002a846:	89 d8                	mov    eax,ebx
c002a848:	c1 e0 10             	shl    eax,0x10
c002a84b:	09 c8                	or     eax,ecx
c002a84d:	eb 05                	jmp    c002a854 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a84f:	66 31 c0             	xor    ax,ax
c002a852:	09 d8                	or     eax,ebx
c002a854:	ef                   	out    dx,eax
c002a855:	83 c4 0c             	add    esp,0xc
c002a858:	5b                   	pop    ebx
c002a859:	5e                   	pop    esi
c002a85a:	5f                   	pop    edi
c002a85b:	5d                   	pop    ebp
c002a85c:	c3                   	ret    
c002a85d:	c7 44 24 20 67 3a 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033a67
c002a865:	83 c4 0c             	add    esp,0xc
c002a868:	5b                   	pop    ebx
c002a869:	5e                   	pop    esi
c002a86a:	5f                   	pop    edi
c002a86b:	5d                   	pop    ebp
c002a86c:	e9 61 5c ff ff       	jmp    c00204d2 <KePanic(char const*)>
c002a871:	90                   	nop

c002a872 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a872:	55                   	push   ebp
c002a873:	57                   	push   edi
c002a874:	56                   	push   esi
c002a875:	53                   	push   ebx
c002a876:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a87c:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a883:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002a88a:	0f 85 bd 00 00 00    	jne    c002a94d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a890:	83 ec 0c             	sub    esp,0xc
c002a893:	68 14 01 00 00       	push   0x114
c002a898:	e8 77 be fe ff       	call   c0016714 <malloc>
c002a89d:	83 c4 0c             	add    esp,0xc
c002a8a0:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a8a6:	68 6d 3a 03 c0       	push   0xc0033a6d
c002a8ab:	50                   	push   eax
c002a8ac:	89 c3                	mov    ebx,eax
c002a8ae:	e8 af fe fe ff       	call   c001a762 <File::File(char const*, Process*)>
c002a8b3:	83 c4 10             	add    esp,0x10
c002a8b6:	85 db                	test   ebx,ebx
c002a8b8:	0f 84 6b 02 00 00    	je     c002ab29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a8be:	57                   	push   edi
c002a8bf:	57                   	push   edi
c002a8c0:	6a 01                	push   0x1
c002a8c2:	53                   	push   ebx
c002a8c3:	e8 b8 fe fe ff       	call   c001a780 <File::open(FileOpenMode)>
c002a8c8:	83 c4 10             	add    esp,0x10
c002a8cb:	85 c0                	test   eax,eax
c002a8cd:	0f 85 56 02 00 00    	jne    c002ab29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a8d3:	52                   	push   edx
c002a8d4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a8d8:	50                   	push   eax
c002a8d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a8dd:	50                   	push   eax
c002a8de:	53                   	push   ebx
c002a8df:	e8 9e 01 ff ff       	call   c001aa82 <File::stat(unsigned long long*, bool*)>
c002a8e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a8e8:	40                   	inc    eax
c002a8e9:	89 04 24             	mov    DWORD PTR [esp],eax
c002a8ec:	e8 23 be fe ff       	call   c0016714 <malloc>
c002a8f1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a8f5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a8f9:	59                   	pop    ecx
c002a8fa:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a8ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a901:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a905:	51                   	push   ecx
c002a906:	50                   	push   eax
c002a907:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a90b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a90f:	53                   	push   ebx
c002a910:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a913:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a917:	83 c4 20             	add    esp,0x20
c002a91a:	89 c8                	mov    eax,ecx
c002a91c:	99                   	cdq    
c002a91d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a921:	0f 85 02 02 00 00    	jne    c002ab29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a927:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a92b:	0f 85 f8 01 00 00    	jne    c002ab29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a931:	83 ec 0c             	sub    esp,0xc
c002a934:	53                   	push   ebx
c002a935:	e8 a4 fe fe ff       	call   c001a7de <File::close()>
c002a93a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a93e:	83 c4 10             	add    esp,0x10
c002a941:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a948:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a94d:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a955:	31 c9                	xor    ecx,ecx
c002a957:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002a95e:	8b 2d a4 0b 04 c0    	mov    ebp,DWORD PTR ds:0xc0040ba4
c002a964:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a96b:	8b 15 a8 0b 04 c0    	mov    edx,DWORD PTR ds:0xc0040ba8
c002a971:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a976:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a97e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a983:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a98f:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a997:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a99b:	39 cd                	cmp    ebp,ecx
c002a99d:	0f 8e 86 01 00 00    	jle    c002ab29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a9a3:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002a9a6:	d4 40                	aam    0x40
c002a9a8:	d5 39                	aad    0x39
c002a9aa:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a9ae:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002a9b2:	d4 40                	aam    0x40
c002a9b4:	d5 39                	aad    0x39
c002a9b6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a9ba:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002a9be:	d4 40                	aam    0x40
c002a9c0:	d5 39                	aad    0x39
c002a9c2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a9c6:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002a9ca:	d4 40                	aam    0x40
c002a9cc:	d5 39                	aad    0x39
c002a9ce:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a9d2:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002a9d6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a9da:	3c 56                	cmp    al,0x56
c002a9dc:	74 47                	je     c002aa25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002a9de:	d4 40                	aam    0x40
c002a9e0:	d5 39                	aad    0x39
c002a9e2:	8d 58 d0             	lea    ebx,[eax-0x30]
c002a9e5:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002a9e9:	0f b6 db             	movzx  ebx,bl
c002a9ec:	c1 e3 04             	shl    ebx,0x4
c002a9ef:	d4 40                	aam    0x40
c002a9f1:	d5 39                	aad    0x39
c002a9f3:	83 e8 30             	sub    eax,0x30
c002a9f6:	0f b6 c0             	movzx  eax,al
c002a9f9:	09 c3                	or     ebx,eax
c002a9fb:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002a9ff:	c1 e3 04             	shl    ebx,0x4
c002aa02:	d4 40                	aam    0x40
c002aa04:	d5 39                	aad    0x39
c002aa06:	83 e8 30             	sub    eax,0x30
c002aa09:	0f b6 c0             	movzx  eax,al
c002aa0c:	09 c3                	or     ebx,eax
c002aa0e:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002aa12:	c1 e3 04             	shl    ebx,0x4
c002aa15:	d4 40                	aam    0x40
c002aa17:	d5 39                	aad    0x39
c002aa19:	83 e8 30             	sub    eax,0x30
c002aa1c:	0f b6 c0             	movzx  eax,al
c002aa1f:	09 c3                	or     ebx,eax
c002aa21:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002aa25:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002aa29:	80 fb 58             	cmp    bl,0x58
c002aa2c:	74 49                	je     c002aa77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002aa2e:	88 d8                	mov    al,bl
c002aa30:	d4 40                	aam    0x40
c002aa32:	d5 39                	aad    0x39
c002aa34:	83 e8 30             	sub    eax,0x30
c002aa37:	0f b6 f8             	movzx  edi,al
c002aa3a:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002aa3e:	c1 e7 04             	shl    edi,0x4
c002aa41:	d4 40                	aam    0x40
c002aa43:	d5 39                	aad    0x39
c002aa45:	83 e8 30             	sub    eax,0x30
c002aa48:	0f b6 c0             	movzx  eax,al
c002aa4b:	09 c7                	or     edi,eax
c002aa4d:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002aa51:	c1 e7 04             	shl    edi,0x4
c002aa54:	d4 40                	aam    0x40
c002aa56:	d5 39                	aad    0x39
c002aa58:	83 e8 30             	sub    eax,0x30
c002aa5b:	0f b6 c0             	movzx  eax,al
c002aa5e:	09 c7                	or     edi,eax
c002aa60:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002aa64:	c1 e7 04             	shl    edi,0x4
c002aa67:	d4 40                	aam    0x40
c002aa69:	d5 39                	aad    0x39
c002aa6b:	83 e8 30             	sub    eax,0x30
c002aa6e:	0f b6 c0             	movzx  eax,al
c002aa71:	09 c7                	or     edi,eax
c002aa73:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002aa77:	8d 41 10             	lea    eax,[ecx+0x10]
c002aa7a:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002aa7e:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002aa82:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002aa86:	83 f9 0a             	cmp    ecx,0xa
c002aa89:	74 07                	je     c002aa92 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002aa8b:	47                   	inc    edi
c002aa8c:	39 c5                	cmp    ebp,eax
c002aa8e:	75 16                	jne    c002aaa6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002aa90:	89 e8                	mov    eax,ebp
c002aa92:	83 f9 0a             	cmp    ecx,0xa
c002aa95:	0f 94 c1             	sete   cl
c002aa98:	0f b6 c9             	movzx  ecx,cl
c002aa9b:	01 c1                	add    ecx,eax
c002aa9d:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002aaa2:	75 0f                	jne    c002aab3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002aaa4:	eb 1c                	jmp    c002aac2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002aaa6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002aaa9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002aaad:	40                   	inc    eax
c002aaae:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002aab1:	eb cb                	jmp    c002aa7e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002aab3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002aab7:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002aabc:	0f 85 d9 fe ff ff    	jne    c002a99b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002aac2:	80 fb 58             	cmp    bl,0x58
c002aac5:	74 10                	je     c002aad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002aac7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002aacc:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002aad1:	0f 85 c4 fe ff ff    	jne    c002a99b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002aad7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aadb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002aadf:	83 e8 30             	sub    eax,0x30
c002aae2:	c1 e0 04             	shl    eax,0x4
c002aae5:	83 eb 30             	sub    ebx,0x30
c002aae8:	09 d8                	or     eax,ebx
c002aaea:	0f b6 c0             	movzx  eax,al
c002aaed:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002aaf1:	0f 85 a4 fe ff ff    	jne    c002a99b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002aaf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002aafb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002aaff:	83 e8 30             	sub    eax,0x30
c002ab02:	c1 e0 04             	shl    eax,0x4
c002ab05:	83 eb 30             	sub    ebx,0x30
c002ab08:	09 d8                	or     eax,ebx
c002ab0a:	0f b6 c0             	movzx  eax,al
c002ab0d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002ab11:	0f 85 84 fe ff ff    	jne    c002a99b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002ab17:	50                   	push   eax
c002ab18:	50                   	push   eax
c002ab19:	8d 44 24 48          	lea    eax,[esp+0x48]
c002ab1d:	50                   	push   eax
c002ab1e:	56                   	push   esi
c002ab1f:	e8 2c 5b fd ff       	call   c0000650 <strcpy>
c002ab24:	83 c4 10             	add    esp,0x10
c002ab27:	eb 05                	jmp    c002ab2e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002ab29:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002ab2c:	31 f6                	xor    esi,esi
c002ab2e:	81 c4 4c 01 00 00    	add    esp,0x14c
c002ab34:	89 f0                	mov    eax,esi
c002ab36:	5b                   	pop    ebx
c002ab37:	5e                   	pop    esi
c002ab38:	5f                   	pop    edi
c002ab39:	5d                   	pop    ebp
c002ab3a:	c3                   	ret    
c002ab3b:	90                   	nop

c002ab3c <PCI::checkBus(unsigned char)>:
c002ab3c:	56                   	push   esi
c002ab3d:	53                   	push   ebx
c002ab3e:	31 db                	xor    ebx,ebx
c002ab40:	51                   	push   ecx
c002ab41:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002ab46:	52                   	push   edx
c002ab47:	53                   	push   ebx
c002ab48:	43                   	inc    ebx
c002ab49:	56                   	push   esi
c002ab4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ab4e:	e8 0f 03 00 00       	call   c002ae62 <PCI::checkDevice(unsigned char, unsigned char)>
c002ab53:	83 c4 10             	add    esp,0x10
c002ab56:	83 fb 20             	cmp    ebx,0x20
c002ab59:	75 eb                	jne    c002ab46 <PCI::checkBus(unsigned char)+0xa>
c002ab5b:	58                   	pop    eax
c002ab5c:	5b                   	pop    ebx
c002ab5d:	5e                   	pop    esi
c002ab5e:	c3                   	ret    
c002ab5f:	90                   	nop

c002ab60 <PCI::foundDevice(PCIDeviceInfo)>:
c002ab60:	55                   	push   ebp
c002ab61:	57                   	push   edi
c002ab62:	56                   	push   esi
c002ab63:	53                   	push   ebx
c002ab64:	83 ec 1c             	sub    esp,0x1c
c002ab67:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002ab6c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ab70:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab75:	0f 84 63 01 00 00    	je     c002acde <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002ab7b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002ab80:	66 3d 06 04          	cmp    ax,0x406
c002ab84:	75 2c                	jne    c002abb2 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002ab86:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002ab8b:	50                   	push   eax
c002ab8c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002ab91:	50                   	push   eax
c002ab92:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002ab97:	50                   	push   eax
c002ab98:	53                   	push   ebx
c002ab99:	e8 62 fb ff ff       	call   c002a700 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002ab9e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002aba2:	0f b6 c0             	movzx  eax,al
c002aba5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002aba9:	83 c4 2c             	add    esp,0x2c
c002abac:	5b                   	pop    ebx
c002abad:	5e                   	pop    esi
c002abae:	5f                   	pop    edi
c002abaf:	5d                   	pop    ebp
c002abb0:	eb 8a                	jmp    c002ab3c <PCI::checkBus(unsigned char)>
c002abb2:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c002abb7:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002abbd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002abc1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002abc5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002abc9:	85 d2                	test   edx,edx
c002abcb:	74 34                	je     c002ac01 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c002abcd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002abd0:	85 c9                	test   ecx,ecx
c002abd2:	74 29                	je     c002abfd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002abd4:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c002abda:	31 f5                	xor    ebp,esi
c002abdc:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c002abe2:	75 19                	jne    c002abfd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002abe4:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c002abea:	75 11                	jne    c002abfd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002abec:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002abf3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c002abf7:	0f 84 e1 00 00 00    	je     c002acde <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002abfd:	8b 12                	mov    edx,DWORD PTR [edx]
c002abff:	eb c8                	jmp    c002abc9 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002ac01:	3d 01 06 00 00       	cmp    eax,0x601
c002ac06:	75 19                	jne    c002ac21 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002ac08:	83 ec 0c             	sub    esp,0xc
c002ac0b:	68 64 01 00 00       	push   0x164
c002ac10:	e8 ff ba fe ff       	call   c0016714 <malloc>
c002ac15:	89 04 24             	mov    DWORD PTR [esp],eax
c002ac18:	89 c5                	mov    ebp,eax
c002ac1a:	e8 ab 0e 00 00       	call   c002baca <SATABus::SATABus()>
c002ac1f:	eb 1e                	jmp    c002ac3f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002ac21:	3d 01 01 00 00       	cmp    eax,0x101
c002ac26:	75 62                	jne    c002ac8a <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c002ac28:	83 ec 0c             	sub    esp,0xc
c002ac2b:	68 70 02 00 00       	push   0x270
c002ac30:	e8 df ba fe ff       	call   c0016714 <malloc>
c002ac35:	89 04 24             	mov    DWORD PTR [esp],eax
c002ac38:	89 c5                	mov    ebp,eax
c002ac3a:	e8 f3 02 00 00       	call   c002af32 <IDE::IDE()>
c002ac3f:	58                   	pop    eax
c002ac40:	5a                   	pop    edx
c002ac41:	55                   	push   ebp
c002ac42:	53                   	push   ebx
c002ac43:	e8 98 09 ff ff       	call   c001b5e0 <Device::addChild(Device*)>
c002ac48:	83 ec 1c             	sub    esp,0x1c
c002ac4b:	b9 09 00 00 00       	mov    ecx,0x9
c002ac50:	fc                   	cld    
c002ac51:	8d 74 24 60          	lea    esi,[esp+0x60]
c002ac55:	89 e7                	mov    edi,esp
c002ac57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ac59:	55                   	push   ebp
c002ac5a:	e8 c7 08 ff ff       	call   c001b526 <Device::preOpenPCI(PCIDeviceInfo)>
c002ac5f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002ac62:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002ac66:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002ac6e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002ac76:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002ac7e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002ac81:	83 c4 4c             	add    esp,0x4c
c002ac84:	5b                   	pop    ebx
c002ac85:	5e                   	pop    esi
c002ac86:	5f                   	pop    edi
c002ac87:	5d                   	pop    ebp
c002ac88:	ff e0                	jmp    eax
c002ac8a:	83 ec 0c             	sub    esp,0xc
c002ac8d:	68 58 01 00 00       	push   0x158
c002ac92:	e8 7d ba fe ff       	call   c0016714 <malloc>
c002ac97:	5a                   	pop    edx
c002ac98:	59                   	pop    ecx
c002ac99:	68 86 3a 03 c0       	push   0xc0033a86
c002ac9e:	50                   	push   eax
c002ac9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002aca3:	e8 ec 0b ff ff       	call   c001b894 <DriverlessDevice::DriverlessDevice(char const*)>
c002aca8:	5e                   	pop    esi
c002aca9:	5f                   	pop    edi
c002acaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002acae:	50                   	push   eax
c002acaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002acb3:	53                   	push   ebx
c002acb4:	e8 27 09 ff ff       	call   c001b5e0 <Device::addChild(Device*)>
c002acb9:	83 c4 10             	add    esp,0x10
c002acbc:	b9 09 00 00 00       	mov    ecx,0x9
c002acc1:	fc                   	cld    
c002acc2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002acc6:	89 fe                	mov    esi,edi
c002acc8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002acca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002acce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002acd2:	83 c4 1c             	add    esp,0x1c
c002acd5:	5b                   	pop    ebx
c002acd6:	5e                   	pop    esi
c002acd7:	5f                   	pop    edi
c002acd8:	5d                   	pop    ebp
c002acd9:	e9 48 08 ff ff       	jmp    c001b526 <Device::preOpenPCI(PCIDeviceInfo)>
c002acde:	83 c4 1c             	add    esp,0x1c
c002ace1:	5b                   	pop    ebx
c002ace2:	5e                   	pop    esi
c002ace3:	5f                   	pop    edi
c002ace4:	5d                   	pop    ebp
c002ace5:	c3                   	ret    

c002ace6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002ace6:	55                   	push   ebp
c002ace7:	57                   	push   edi
c002ace8:	56                   	push   esi
c002ace9:	53                   	push   ebx
c002acea:	83 ec 68             	sub    esp,0x68
c002aced:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002acf4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002acf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002acfc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002ad03:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002ad08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002ad0c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002ad13:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002ad18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002ad1c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002ad21:	6a 0c                	push   0xc
c002ad23:	57                   	push   edi
c002ad24:	53                   	push   ebx
c002ad25:	56                   	push   esi
c002ad26:	55                   	push   ebp
c002ad27:	e8 24 f8 ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ad2c:	83 c4 20             	add    esp,0x20
c002ad2f:	57                   	push   edi
c002ad30:	53                   	push   ebx
c002ad31:	56                   	push   esi
c002ad32:	55                   	push   ebp
c002ad33:	e8 0e f9 ff ff       	call   c002a646 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002ad38:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002ad3d:	57                   	push   edi
c002ad3e:	53                   	push   ebx
c002ad3f:	56                   	push   esi
c002ad40:	55                   	push   ebp
c002ad41:	e8 96 f9 ff ff       	call   c002a6dc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002ad46:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002ad4a:	83 c4 14             	add    esp,0x14
c002ad4d:	6a 3c                	push   0x3c
c002ad4f:	57                   	push   edi
c002ad50:	53                   	push   ebx
c002ad51:	56                   	push   esi
c002ad52:	55                   	push   ebp
c002ad53:	e8 f8 f7 ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ad58:	0f b6 c4             	movzx  eax,ah
c002ad5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002ad5f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002ad63:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002ad67:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002ad6c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002ad72:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002ad78:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002ad7c:	83 c4 20             	add    esp,0x20
c002ad7f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002ad84:	74 30                	je     c002adb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ad86:	31 c0                	xor    eax,eax
c002ad88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002ad8c:	7e 28                	jle    c002adb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ad8e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002ad96:	39 cb                	cmp    ebx,ecx
c002ad98:	75 19                	jne    c002adb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ad9a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002ada2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002ada6:	75 0b                	jne    c002adb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ada8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002adaf:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002adb3:	40                   	inc    eax
c002adb4:	eb d2                	jmp    c002ad88 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002adb6:	31 d2                	xor    edx,edx
c002adb8:	83 ec 0c             	sub    esp,0xc
c002adbb:	57                   	push   edi
c002adbc:	53                   	push   ebx
c002adbd:	56                   	push   esi
c002adbe:	52                   	push   edx
c002adbf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002adc3:	55                   	push   ebp
c002adc4:	e8 5f f9 ff ff       	call   c002a728 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002adc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002adcd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002add1:	42                   	inc    edx
c002add2:	83 c4 20             	add    esp,0x20
c002add5:	83 fa 06             	cmp    edx,0x6
c002add8:	75 de                	jne    c002adb8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002adda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002adde:	83 ec 0c             	sub    esp,0xc
c002ade1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ade5:	c1 e2 08             	shl    edx,0x8
c002ade8:	0f b6 c4             	movzx  eax,ah
c002adeb:	09 d0                	or     eax,edx
c002aded:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002adf2:	6a 02                	push   0x2
c002adf4:	57                   	push   edi
c002adf5:	53                   	push   ebx
c002adf6:	56                   	push   esi
c002adf7:	55                   	push   ebp
c002adf8:	e8 53 f7 ff ff       	call   c002a550 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002adfd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002ae02:	83 c4 20             	add    esp,0x20
c002ae05:	57                   	push   edi
c002ae06:	53                   	push   ebx
c002ae07:	56                   	push   esi
c002ae08:	55                   	push   ebp
c002ae09:	e8 82 f8 ff ff       	call   c002a690 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002ae0e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002ae12:	57                   	push   edi
c002ae13:	53                   	push   ebx
c002ae14:	56                   	push   esi
c002ae15:	55                   	push   ebp
c002ae16:	e8 df f7 ff ff       	call   c002a5fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ae1b:	b9 09 00 00 00       	mov    ecx,0x9
c002ae20:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002ae25:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002ae29:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002ae2d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002ae31:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002ae35:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002ae39:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002ae3d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002ae41:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002ae45:	83 ec 0c             	sub    esp,0xc
c002ae48:	fc                   	cld    
c002ae49:	8d 74 24 58          	lea    esi,[esp+0x58]
c002ae4d:	89 e7                	mov    edi,esp
c002ae4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ae51:	55                   	push   ebp
c002ae52:	e8 09 fd ff ff       	call   c002ab60 <PCI::foundDevice(PCIDeviceInfo)>
c002ae57:	81 c4 8c 00 00 00    	add    esp,0x8c
c002ae5d:	5b                   	pop    ebx
c002ae5e:	5e                   	pop    esi
c002ae5f:	5f                   	pop    edi
c002ae60:	5d                   	pop    ebp
c002ae61:	c3                   	ret    

c002ae62 <PCI::checkDevice(unsigned char, unsigned char)>:
c002ae62:	55                   	push   ebp
c002ae63:	57                   	push   edi
c002ae64:	56                   	push   esi
c002ae65:	53                   	push   ebx
c002ae66:	83 ec 0c             	sub    esp,0xc
c002ae69:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002ae6e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002ae73:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002ae77:	6a 00                	push   0x0
c002ae79:	56                   	push   esi
c002ae7a:	57                   	push   edi
c002ae7b:	55                   	push   ebp
c002ae7c:	e8 79 f7 ff ff       	call   c002a5fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ae81:	6a 00                	push   0x0
c002ae83:	56                   	push   esi
c002ae84:	57                   	push   edi
c002ae85:	55                   	push   ebp
c002ae86:	e8 5b fe ff ff       	call   c002ace6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ae8b:	83 c4 20             	add    esp,0x20
c002ae8e:	6a 00                	push   0x0
c002ae90:	56                   	push   esi
c002ae91:	57                   	push   edi
c002ae92:	55                   	push   ebp
c002ae93:	e8 86 f7 ff ff       	call   c002a61e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ae98:	83 c4 10             	add    esp,0x10
c002ae9b:	a8 80                	test   al,0x80
c002ae9d:	74 2d                	je     c002aecc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ae9f:	bb 01 00 00 00       	mov    ebx,0x1
c002aea4:	53                   	push   ebx
c002aea5:	56                   	push   esi
c002aea6:	57                   	push   edi
c002aea7:	55                   	push   ebp
c002aea8:	e8 4d f7 ff ff       	call   c002a5fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aead:	83 c4 10             	add    esp,0x10
c002aeb0:	0f b7 c0             	movzx  eax,ax
c002aeb3:	3d ff ff 00 00       	cmp    eax,0xffff
c002aeb8:	74 0c                	je     c002aec6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002aeba:	53                   	push   ebx
c002aebb:	56                   	push   esi
c002aebc:	57                   	push   edi
c002aebd:	55                   	push   ebp
c002aebe:	e8 23 fe ff ff       	call   c002ace6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002aec3:	83 c4 10             	add    esp,0x10
c002aec6:	43                   	inc    ebx
c002aec7:	83 fb 08             	cmp    ebx,0x8
c002aeca:	75 d8                	jne    c002aea4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002aecc:	83 c4 0c             	add    esp,0xc
c002aecf:	5b                   	pop    ebx
c002aed0:	5e                   	pop    esi
c002aed1:	5f                   	pop    edi
c002aed2:	5d                   	pop    ebp
c002aed3:	c3                   	ret    

c002aed4 <PCI::detect()>:
c002aed4:	56                   	push   esi
c002aed5:	53                   	push   ebx
c002aed6:	53                   	push   ebx
c002aed7:	31 db                	xor    ebx,ebx
c002aed9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002aedd:	6a 00                	push   0x0
c002aedf:	6a 00                	push   0x0
c002aee1:	6a 00                	push   0x0
c002aee3:	56                   	push   esi
c002aee4:	e8 35 f7 ff ff       	call   c002a61e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002aee9:	83 c4 10             	add    esp,0x10
c002aeec:	a8 80                	test   al,0x80
c002aeee:	75 21                	jne    c002af11 <PCI::detect()+0x3d>
c002aef0:	51                   	push   ecx
c002aef1:	51                   	push   ecx
c002aef2:	6a 00                	push   0x0
c002aef4:	56                   	push   esi
c002aef5:	e8 42 fc ff ff       	call   c002ab3c <PCI::checkBus(unsigned char)>
c002aefa:	83 c4 10             	add    esp,0x10
c002aefd:	eb 2a                	jmp    c002af29 <PCI::detect()+0x55>
c002aeff:	52                   	push   edx
c002af00:	52                   	push   edx
c002af01:	53                   	push   ebx
c002af02:	43                   	inc    ebx
c002af03:	56                   	push   esi
c002af04:	e8 33 fc ff ff       	call   c002ab3c <PCI::checkBus(unsigned char)>
c002af09:	83 c4 10             	add    esp,0x10
c002af0c:	83 fb 08             	cmp    ebx,0x8
c002af0f:	74 18                	je     c002af29 <PCI::detect()+0x55>
c002af11:	53                   	push   ebx
c002af12:	6a 00                	push   0x0
c002af14:	6a 00                	push   0x0
c002af16:	56                   	push   esi
c002af17:	e8 de f6 ff ff       	call   c002a5fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002af1c:	83 c4 10             	add    esp,0x10
c002af1f:	0f b7 c0             	movzx  eax,ax
c002af22:	3d ff ff 00 00       	cmp    eax,0xffff
c002af27:	74 d6                	je     c002aeff <PCI::detect()+0x2b>
c002af29:	58                   	pop    eax
c002af2a:	5b                   	pop    ebx
c002af2b:	5e                   	pop    esi
c002af2c:	c3                   	ret    
c002af2d:	90                   	nop

c002af2e <IDE::close(int, int, void*)>:
c002af2e:	83 c8 ff             	or     eax,0xffffffff
c002af31:	c3                   	ret    

c002af32 <IDE::IDE()>:
c002af32:	83 ec 0c             	sub    esp,0xc
c002af35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002af39:	83 ec 08             	sub    esp,0x8
c002af3c:	68 cc 3a 03 c0       	push   0xc0033acc
c002af41:	50                   	push   eax
c002af42:	e8 f1 09 ff ff       	call   c001b938 <HardDiskController::HardDiskController(char const*)>
c002af47:	83 c4 10             	add    esp,0x10
c002af4a:	ba 5c 3b 03 c0       	mov    edx,0xc0033b5c
c002af4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002af53:	89 10                	mov    DWORD PTR [eax],edx
c002af55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002af59:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002af60:	90                   	nop
c002af61:	83 c4 0c             	add    esp,0xc
c002af64:	c3                   	ret    
c002af65:	90                   	nop

c002af66 <IDE::prepareInterrupt(unsigned char)>:
c002af66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002af6b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002af6f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002af77:	c3                   	ret    

c002af78 <selectDrive(unsigned char, unsigned char)>:
c002af78:	c3                   	ret    
c002af79:	90                   	nop

c002af7a <IDE::getBase(unsigned char)>:
c002af7a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002af7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002af83:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002af8b:	c3                   	ret    

c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002af8c:	55                   	push   ebp
c002af8d:	57                   	push   edi
c002af8e:	56                   	push   esi
c002af8f:	53                   	push   ebx
c002af90:	83 ec 1c             	sub    esp,0x1c
c002af93:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002af97:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002af9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002af9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002afa3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002afa6:	80 f9 03             	cmp    cl,0x3
c002afa9:	77 4f                	ja     c002affa <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002afab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002afaf:	0f b6 f2             	movzx  esi,dl
c002afb2:	0f b6 db             	movzx  ebx,bl
c002afb5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002afb8:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002afbd:	80 ca 80             	or     dl,0x80
c002afc0:	52                   	push   edx
c002afc1:	6a 0c                	push   0xc
c002afc3:	56                   	push   esi
c002afc4:	57                   	push   edi
c002afc5:	e8 c2 ff ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002afca:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002afcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002afd3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002afd7:	ee                   	out    dx,al
c002afd8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002afdd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002afe1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002afe5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002afed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002aff1:	83 c4 2c             	add    esp,0x2c
c002aff4:	5b                   	pop    ebx
c002aff5:	5e                   	pop    esi
c002aff6:	5f                   	pop    edi
c002aff7:	5d                   	pop    ebp
c002aff8:	eb 92                	jmp    c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002affa:	0f b6 cb             	movzx  ecx,bl
c002affd:	83 f9 07             	cmp    ecx,0x7
c002b000:	77 12                	ja     c002b014 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002b002:	0f b6 d2             	movzx  edx,dl
c002b005:	0f b6 db             	movzx  ebx,bl
c002b008:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002b010:	01 da                	add    edx,ebx
c002b012:	eb 2f                	jmp    c002b043 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b014:	83 f9 0d             	cmp    ecx,0xd
c002b017:	77 13                	ja     c002b02c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002b019:	0f b6 d2             	movzx  edx,dl
c002b01c:	0f b6 db             	movzx  ebx,bl
c002b01f:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002b026:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002b02a:	eb 17                	jmp    c002b043 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b02c:	83 f9 15             	cmp    ecx,0x15
c002b02f:	77 13                	ja     c002b044 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002b031:	0f b6 d2             	movzx  edx,dl
c002b034:	0f b6 db             	movzx  ebx,bl
c002b037:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002b03f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002b043:	ee                   	out    dx,al
c002b044:	83 c4 1c             	add    esp,0x1c
c002b047:	5b                   	pop    ebx
c002b048:	5e                   	pop    esi
c002b049:	5f                   	pop    edi
c002b04a:	5d                   	pop    ebp
c002b04b:	c3                   	ret    

c002b04c <IDE::read(unsigned char, unsigned char)>:
c002b04c:	57                   	push   edi
c002b04d:	56                   	push   esi
c002b04e:	53                   	push   ebx
c002b04f:	83 ec 10             	sub    esp,0x10
c002b052:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002b056:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002b05a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b05e:	8d 42 f8             	lea    eax,[edx-0x8]
c002b061:	3c 03                	cmp    al,0x3
c002b063:	77 48                	ja     c002b0ad <IDE::read(unsigned char, unsigned char)+0x61>
c002b065:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002b069:	0f b6 f1             	movzx  esi,cl
c002b06c:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002b06f:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002b074:	0c 80                	or     al,0x80
c002b076:	50                   	push   eax
c002b077:	6a 0c                	push   0xc
c002b079:	56                   	push   esi
c002b07a:	53                   	push   ebx
c002b07b:	e8 0c ff ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b080:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002b084:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002b089:	0f b6 d2             	movzx  edx,dl
c002b08c:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b090:	ec                   	in     al,dx
c002b091:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002b095:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002b09a:	52                   	push   edx
c002b09b:	6a 0c                	push   0xc
c002b09d:	56                   	push   esi
c002b09e:	53                   	push   ebx
c002b09f:	e8 e8 fe ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b0a4:	83 c4 20             	add    esp,0x20
c002b0a7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002b0ab:	eb 4c                	jmp    c002b0f9 <IDE::read(unsigned char, unsigned char)+0xad>
c002b0ad:	0f b6 f2             	movzx  esi,dl
c002b0b0:	83 fe 07             	cmp    esi,0x7
c002b0b3:	77 12                	ja     c002b0c7 <IDE::read(unsigned char, unsigned char)+0x7b>
c002b0b5:	0f b6 c9             	movzx  ecx,cl
c002b0b8:	0f b6 d2             	movzx  edx,dl
c002b0bb:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002b0c3:	01 c2                	add    edx,eax
c002b0c5:	eb 31                	jmp    c002b0f8 <IDE::read(unsigned char, unsigned char)+0xac>
c002b0c7:	83 fe 0d             	cmp    esi,0xd
c002b0ca:	77 13                	ja     c002b0df <IDE::read(unsigned char, unsigned char)+0x93>
c002b0cc:	0f b6 c9             	movzx  ecx,cl
c002b0cf:	0f b6 d2             	movzx  edx,dl
c002b0d2:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002b0d9:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b0dd:	eb 19                	jmp    c002b0f8 <IDE::read(unsigned char, unsigned char)+0xac>
c002b0df:	31 c0                	xor    eax,eax
c002b0e1:	83 fe 15             	cmp    esi,0x15
c002b0e4:	77 13                	ja     c002b0f9 <IDE::read(unsigned char, unsigned char)+0xad>
c002b0e6:	0f b6 c9             	movzx  ecx,cl
c002b0e9:	0f b6 d2             	movzx  edx,dl
c002b0ec:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002b0f4:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b0f8:	ec                   	in     al,dx
c002b0f9:	83 c4 10             	add    esp,0x10
c002b0fc:	5b                   	pop    ebx
c002b0fd:	5e                   	pop    esi
c002b0fe:	5f                   	pop    edi
c002b0ff:	c3                   	ret    

c002b100 <IDE::waitInterrupt(unsigned char)>:
c002b100:	55                   	push   ebp
c002b101:	57                   	push   edi
c002b102:	56                   	push   esi
c002b103:	53                   	push   ebx
c002b104:	31 db                	xor    ebx,ebx
c002b106:	83 ec 0c             	sub    esp,0xc
c002b109:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b10d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b112:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b11a:	89 e8                	mov    eax,ebp
c002b11c:	84 c0                	test   al,al
c002b11e:	75 30                	jne    c002b150 <IDE::waitInterrupt(unsigned char)+0x50>
c002b120:	50                   	push   eax
c002b121:	6a 0c                	push   0xc
c002b123:	56                   	push   esi
c002b124:	57                   	push   edi
c002b125:	e8 22 ff ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b12a:	83 c4 10             	add    esp,0x10
c002b12d:	a8 01                	test   al,0x1
c002b12f:	75 27                	jne    c002b158 <IDE::waitInterrupt(unsigned char)+0x58>
c002b131:	f6 c3 04             	test   bl,0x4
c002b134:	75 12                	jne    c002b148 <IDE::waitInterrupt(unsigned char)+0x48>
c002b136:	83 fb 32             	cmp    ebx,0x32
c002b139:	7e 0d                	jle    c002b148 <IDE::waitInterrupt(unsigned char)+0x48>
c002b13b:	83 ec 0c             	sub    esp,0xc
c002b13e:	6a 64                	push   0x64
c002b140:	e8 c7 a5 ff ff       	call   c002570c <milliTenthSleep(unsigned int)>
c002b145:	83 c4 10             	add    esp,0x10
c002b148:	83 fb 3c             	cmp    ebx,0x3c
c002b14b:	74 0b                	je     c002b158 <IDE::waitInterrupt(unsigned char)+0x58>
c002b14d:	43                   	inc    ebx
c002b14e:	eb c2                	jmp    c002b112 <IDE::waitInterrupt(unsigned char)+0x12>
c002b150:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b158:	83 c4 0c             	add    esp,0xc
c002b15b:	89 e8                	mov    eax,ebp
c002b15d:	5b                   	pop    ebx
c002b15e:	5e                   	pop    esi
c002b15f:	5f                   	pop    edi
c002b160:	5d                   	pop    ebp
c002b161:	c3                   	ret    

c002b162 <ideChannel0IRQHandler(regs*, void*)>:
c002b162:	83 ec 10             	sub    esp,0x10
c002b165:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b169:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b170:	6a 07                	push   0x7
c002b172:	6a 00                	push   0x0
c002b174:	50                   	push   eax
c002b175:	e8 d2 fe ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b17a:	83 c4 1c             	add    esp,0x1c
c002b17d:	c3                   	ret    

c002b17e <ideChannel1IRQHandler(regs*, void*)>:
c002b17e:	83 ec 10             	sub    esp,0x10
c002b181:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b185:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b18c:	6a 07                	push   0x7
c002b18e:	6a 01                	push   0x1
c002b190:	50                   	push   eax
c002b191:	e8 b6 fe ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b196:	83 c4 1c             	add    esp,0x1c
c002b199:	c3                   	ret    

c002b19a <IDE::enableIRQs(unsigned char, bool)>:
c002b19a:	57                   	push   edi
c002b19b:	b8 02 00 00 00       	mov    eax,0x2
c002b1a0:	56                   	push   esi
c002b1a1:	53                   	push   ebx
c002b1a2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b1a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b1ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b1af:	74 02                	je     c002b1b3 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b1b1:	31 c0                	xor    eax,eax
c002b1b3:	0f b6 db             	movzx  ebx,bl
c002b1b6:	bf 04 00 00 00       	mov    edi,0x4
c002b1bb:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b1c2:	50                   	push   eax
c002b1c3:	6a 0c                	push   0xc
c002b1c5:	53                   	push   ebx
c002b1c6:	56                   	push   esi
c002b1c7:	e8 c0 fd ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b1cc:	83 c4 10             	add    esp,0x10
c002b1cf:	50                   	push   eax
c002b1d0:	6a 0c                	push   0xc
c002b1d2:	53                   	push   ebx
c002b1d3:	56                   	push   esi
c002b1d4:	e8 73 fe ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b1d9:	83 c4 10             	add    esp,0x10
c002b1dc:	4f                   	dec    edi
c002b1dd:	75 f0                	jne    c002b1cf <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b1df:	5b                   	pop    ebx
c002b1e0:	5e                   	pop    esi
c002b1e1:	5f                   	pop    edi
c002b1e2:	c3                   	ret    
c002b1e3:	90                   	nop

c002b1e4 <IDE::open(int, int, void*)>:
c002b1e4:	55                   	push   ebp
c002b1e5:	57                   	push   edi
c002b1e6:	56                   	push   esi
c002b1e7:	53                   	push   ebx
c002b1e8:	83 ec 1c             	sub    esp,0x1c
c002b1eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002b1ef:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b1f6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b1ff:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b208:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b20f:	0f 85 da 02 00 00    	jne    c002b4ef <IDE::open(int, int, void*)+0x30b>
c002b215:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b21b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c002b21f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b223:	83 e0 7f             	and    eax,0x7f
c002b226:	83 f8 05             	cmp    eax,0x5
c002b229:	74 05                	je     c002b230 <IDE::open(int, int, void*)+0x4c>
c002b22b:	83 f8 0f             	cmp    eax,0xf
c002b22e:	75 32                	jne    c002b262 <IDE::open(int, int, void*)+0x7e>
c002b230:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b236:	83 e0 fc             	and    eax,0xfffffffc
c002b239:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b240:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b246:	83 e0 fc             	and    eax,0xfffffffc
c002b249:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b250:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b256:	83 e0 fc             	and    eax,0xfffffffc
c002b259:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b260:	eb 14                	jmp    c002b276 <IDE::open(int, int, void*)+0x92>
c002b262:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b26c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b276:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c002b27d:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b282:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b289:	89 fa                	mov    edx,edi
c002b28b:	89 f1                	mov    ecx,esi
c002b28d:	c1 e1 10             	shl    ecx,0x10
c002b290:	89 e8                	mov    eax,ebp
c002b292:	c1 e0 0b             	shl    eax,0xb
c002b295:	09 c1                	or     ecx,eax
c002b297:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b29e:	c1 e0 08             	shl    eax,0x8
c002b2a1:	09 c1                	or     ecx,eax
c002b2a3:	89 c8                	mov    eax,ecx
c002b2a5:	0d 08 00 00 80       	or     eax,0x80000008
c002b2aa:	ef                   	out    dx,eax
c002b2ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b2b0:	ed                   	in     eax,dx
c002b2b1:	c1 e8 10             	shr    eax,0x10
c002b2b4:	3d ff ff 00 00       	cmp    eax,0xffff
c002b2b9:	0f 84 f9 00 00 00    	je     c002b3b8 <IDE::open(int, int, void*)+0x1d4>
c002b2bf:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b2c5:	89 fa                	mov    edx,edi
c002b2c7:	89 c8                	mov    eax,ecx
c002b2c9:	ef                   	out    dx,eax
c002b2ca:	b0 fe                	mov    al,0xfe
c002b2cc:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b2d1:	ee                   	out    dx,al
c002b2d2:	89 c8                	mov    eax,ecx
c002b2d4:	89 fa                	mov    edx,edi
c002b2d6:	ef                   	out    dx,eax
c002b2d7:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b2dc:	ed                   	in     eax,dx
c002b2dd:	3c fe                	cmp    al,0xfe
c002b2df:	0f 85 a4 00 00 00    	jne    c002b389 <IDE::open(int, int, void*)+0x1a5>
c002b2e5:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b2eb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b2f2:	74 30                	je     c002b324 <IDE::open(int, int, void*)+0x140>
c002b2f4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b2fa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b2fe:	83 ec 0c             	sub    esp,0xc
c002b301:	40                   	inc    eax
c002b302:	0f b6 c0             	movzx  eax,al
c002b305:	50                   	push   eax
c002b306:	55                   	push   ebp
c002b307:	56                   	push   esi
c002b308:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b30e:	51                   	push   ecx
c002b30f:	e8 30 35 ff ff       	call   c001e844 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b314:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b319:	83 c4 1c             	add    esp,0x1c
c002b31c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b322:	eb 0a                	jmp    c002b32e <IDE::open(int, int, void*)+0x14a>
c002b324:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b32e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b335:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002b33a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b341:	89 ea                	mov    edx,ebp
c002b343:	c1 e1 10             	shl    ecx,0x10
c002b346:	c1 e0 08             	shl    eax,0x8
c002b349:	09 c1                	or     ecx,eax
c002b34b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b352:	c1 e0 0b             	shl    eax,0xb
c002b355:	09 c1                	or     ecx,eax
c002b357:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b35d:	89 c8                	mov    eax,ecx
c002b35f:	ef                   	out    dx,eax
c002b360:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002b366:	be fc 0c 00 00       	mov    esi,0xcfc
c002b36b:	89 f2                	mov    edx,esi
c002b36d:	89 f8                	mov    eax,edi
c002b36f:	ee                   	out    dx,al
c002b370:	89 c8                	mov    eax,ecx
c002b372:	89 ea                	mov    edx,ebp
c002b374:	ef                   	out    dx,eax
c002b375:	89 f2                	mov    edx,esi
c002b377:	ed                   	in     eax,dx
c002b378:	0f b6 c0             	movzx  eax,al
c002b37b:	39 f8                	cmp    eax,edi
c002b37d:	74 49                	je     c002b3c8 <IDE::open(int, int, void*)+0x1e4>
c002b37f:	83 ec 0c             	sub    esp,0xc
c002b382:	68 e4 3a 03 c0       	push   0xc0033ae4
c002b387:	eb 37                	jmp    c002b3c0 <IDE::open(int, int, void*)+0x1dc>
c002b389:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b392:	75 1a                	jne    c002b3ae <IDE::open(int, int, void*)+0x1ca>
c002b394:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002b399:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b39e:	74 05                	je     c002b3a5 <IDE::open(int, int, void*)+0x1c1>
c002b3a0:	83 c0 80             	add    eax,0xffffff80
c002b3a3:	75 09                	jne    c002b3ae <IDE::open(int, int, void*)+0x1ca>
c002b3a5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b3ac:	eb 1a                	jmp    c002b3c8 <IDE::open(int, int, void*)+0x1e4>
c002b3ae:	83 ec 0c             	sub    esp,0xc
c002b3b1:	68 ec 3a 03 c0       	push   0xc0033aec
c002b3b6:	eb 08                	jmp    c002b3c0 <IDE::open(int, int, void*)+0x1dc>
c002b3b8:	83 ec 0c             	sub    esp,0xc
c002b3bb:	68 1d 3b 03 c0       	push   0xc0033b1d
c002b3c0:	e8 0d 51 ff ff       	call   c00204d2 <KePanic(char const*)>
c002b3c5:	83 c4 10             	add    esp,0x10
c002b3c8:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b3cf:	74 1a                	je     c002b3eb <IDE::open(int, int, void*)+0x207>
c002b3d1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b3d7:	83 e0 fc             	and    eax,0xfffffffc
c002b3da:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b3e1:	83 c0 08             	add    eax,0x8
c002b3e4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b3eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b3f1:	89 c2                	mov    edx,eax
c002b3f3:	83 e2 0f             	and    edx,0xf
c002b3f6:	83 fa 08             	cmp    edx,0x8
c002b3f9:	75 0a                	jne    c002b405 <IDE::open(int, int, void*)+0x221>
c002b3fb:	83 e8 02             	sub    eax,0x2
c002b3fe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b405:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b40b:	89 c2                	mov    edx,eax
c002b40d:	83 e2 0f             	and    edx,0xf
c002b410:	83 fa 08             	cmp    edx,0x8
c002b413:	75 0a                	jne    c002b41f <IDE::open(int, int, void*)+0x23b>
c002b415:	83 e8 02             	sub    eax,0x2
c002b418:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b41f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b426:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b42d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b430:	89 d0                	mov    eax,edx
c002b432:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b436:	8d 7a 01             	lea    edi,[edx+0x1]
c002b439:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b43d:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b441:	83 e1 3f             	and    ecx,0x3f
c002b444:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b448:	89 f9                	mov    ecx,edi
c002b44a:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b451:	8d 78 02             	lea    edi,[eax+0x2]
c002b454:	0f b6 c9             	movzx  ecx,cl
c002b457:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b45a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b45e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b462:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b466:	83 e2 3f             	and    edx,0x3f
c002b469:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b46d:	89 f9                	mov    ecx,edi
c002b46f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b475:	8d 78 03             	lea    edi,[eax+0x3]
c002b478:	0f b6 d1             	movzx  edx,cl
c002b47b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b47e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b482:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b486:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b48a:	83 e1 3f             	and    ecx,0x3f
c002b48d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b491:	89 f9                	mov    ecx,edi
c002b493:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b499:	8d 78 04             	lea    edi,[eax+0x4]
c002b49c:	0f b6 c9             	movzx  ecx,cl
c002b49f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b4a2:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b4a6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b4aa:	89 fa                	mov    edx,edi
c002b4ac:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b4b2:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b4b6:	83 e2 3f             	and    edx,0x3f
c002b4b9:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b4bd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b4c4:	66 85 f6             	test   si,si
c002b4c7:	74 65                	je     c002b52e <IDE::open(int, int, void*)+0x34a>
c002b4c9:	89 f9                	mov    ecx,edi
c002b4cb:	83 c0 05             	add    eax,0x5
c002b4ce:	0f b6 d1             	movzx  edx,cl
c002b4d1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b4d4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b4d8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b4dc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b4e2:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b4e6:	83 e0 3f             	and    eax,0x3f
c002b4e9:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b4ed:	eb 3f                	jmp    c002b52e <IDE::open(int, int, void*)+0x34a>
c002b4ef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b4f6:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b4fc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b503:	05 06 02 00 00       	add    eax,0x206
c002b508:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b50f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b516:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b51d:	05 06 02 00 00       	add    eax,0x206
c002b522:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b529:	e9 bd fe ff ff       	jmp    c002b3eb <IDE::open(int, int, void*)+0x207>
c002b52e:	50                   	push   eax
c002b52f:	50                   	push   eax
c002b530:	6a 00                	push   0x0
c002b532:	53                   	push   ebx
c002b533:	e8 2e fa ff ff       	call   c002af66 <IDE::prepareInterrupt(unsigned char)>
c002b538:	5a                   	pop    edx
c002b539:	59                   	pop    ecx
c002b53a:	6a 01                	push   0x1
c002b53c:	53                   	push   ebx
c002b53d:	e8 24 fa ff ff       	call   c002af66 <IDE::prepareInterrupt(unsigned char)>
c002b542:	83 c4 0c             	add    esp,0xc
c002b545:	6a 00                	push   0x0
c002b547:	6a 00                	push   0x0
c002b549:	53                   	push   ebx
c002b54a:	e8 4b fc ff ff       	call   c002b19a <IDE::enableIRQs(unsigned char, bool)>
c002b54f:	83 c4 0c             	add    esp,0xc
c002b552:	6a 00                	push   0x0
c002b554:	6a 01                	push   0x1
c002b556:	53                   	push   ebx
c002b557:	e8 3e fc ff ff       	call   c002b19a <IDE::enableIRQs(unsigned char, bool)>
c002b55c:	83 c4 10             	add    esp,0x10
c002b55f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b566:	74 34                	je     c002b59c <IDE::open(int, int, void*)+0x3b8>
c002b568:	83 ec 0c             	sub    esp,0xc
c002b56b:	53                   	push   ebx
c002b56c:	6a 01                	push   0x1
c002b56e:	68 62 b1 02 c0       	push   0xc002b162
c002b573:	6a 0e                	push   0xe
c002b575:	53                   	push   ebx
c002b576:	e8 11 00 ff ff       	call   c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b57b:	83 c4 14             	add    esp,0x14
c002b57e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b584:	53                   	push   ebx
c002b585:	6a 01                	push   0x1
c002b587:	68 7e b1 02 c0       	push   0xc002b17e
c002b58c:	6a 0f                	push   0xf
c002b58e:	53                   	push   ebx
c002b58f:	e8 f8 ff fe ff       	call   c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b594:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b59a:	eb 38                	jmp    c002b5d4 <IDE::open(int, int, void*)+0x3f0>
c002b59c:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b5a6:	83 ec 0c             	sub    esp,0xc
c002b5a9:	53                   	push   ebx
c002b5aa:	6a 00                	push   0x0
c002b5ac:	68 62 b1 02 c0       	push   0xc002b162
c002b5b1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b5b7:	53                   	push   ebx
c002b5b8:	e8 cf ff fe ff       	call   c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b5bd:	83 c4 14             	add    esp,0x14
c002b5c0:	53                   	push   ebx
c002b5c1:	6a 00                	push   0x0
c002b5c3:	68 7e b1 02 c0       	push   0xc002b17e
c002b5c8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b5ce:	53                   	push   ebx
c002b5cf:	e8 b8 ff fe ff       	call   c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b5d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b5d6:	83 c4 20             	add    esp,0x20
c002b5d9:	83 ec 0c             	sub    esp,0xc
c002b5dc:	53                   	push   ebx
c002b5dd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b5e0:	83 c4 0c             	add    esp,0xc
c002b5e3:	6a 07                	push   0x7
c002b5e5:	6a 00                	push   0x0
c002b5e7:	53                   	push   ebx
c002b5e8:	e8 5f fa ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b5ed:	83 c4 0c             	add    esp,0xc
c002b5f0:	6a 07                	push   0x7
c002b5f2:	6a 01                	push   0x1
c002b5f4:	53                   	push   ebx
c002b5f5:	e8 52 fa ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b5fa:	83 c4 0c             	add    esp,0xc
c002b5fd:	6a 01                	push   0x1
c002b5ff:	6a 00                	push   0x0
c002b601:	53                   	push   ebx
c002b602:	e8 93 fb ff ff       	call   c002b19a <IDE::enableIRQs(unsigned char, bool)>
c002b607:	83 c4 0c             	add    esp,0xc
c002b60a:	6a 01                	push   0x1
c002b60c:	6a 01                	push   0x1
c002b60e:	53                   	push   ebx
c002b60f:	e8 86 fb ff ff       	call   c002b19a <IDE::enableIRQs(unsigned char, bool)>
c002b614:	83 c4 2c             	add    esp,0x2c
c002b617:	31 c0                	xor    eax,eax
c002b619:	5b                   	pop    ebx
c002b61a:	5e                   	pop    esi
c002b61b:	5f                   	pop    edi
c002b61c:	5d                   	pop    ebp
c002b61d:	c3                   	ret    

c002b61e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b61e:	55                   	push   ebp
c002b61f:	57                   	push   edi
c002b620:	56                   	push   esi
c002b621:	53                   	push   ebx
c002b622:	83 ec 1c             	sub    esp,0x1c
c002b625:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b629:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b62d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b631:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b635:	8d 42 f8             	lea    eax,[edx-0x8]
c002b638:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b63c:	3c 03                	cmp    al,0x3
c002b63e:	77 5a                	ja     c002b69a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b640:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b644:	0f b6 db             	movzx  ebx,bl
c002b647:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b64b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b64e:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b653:	0c 80                	or     al,0x80
c002b655:	50                   	push   eax
c002b656:	6a 0c                	push   0xc
c002b658:	53                   	push   ebx
c002b659:	56                   	push   esi
c002b65a:	e8 2d f9 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b65f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b663:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b668:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b66c:	0f b6 d2             	movzx  edx,dl
c002b66f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b673:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b675:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b67a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b67e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b682:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b68a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b68e:	83 c4 2c             	add    esp,0x2c
c002b691:	5b                   	pop    ebx
c002b692:	5e                   	pop    esi
c002b693:	5f                   	pop    edi
c002b694:	5d                   	pop    ebp
c002b695:	e9 f2 f8 ff ff       	jmp    c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b69a:	0f b6 c2             	movzx  eax,dl
c002b69d:	83 f8 07             	cmp    eax,0x7
c002b6a0:	77 12                	ja     c002b6b4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b6a2:	0f b6 db             	movzx  ebx,bl
c002b6a5:	0f b6 c2             	movzx  eax,dl
c002b6a8:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b6b0:	01 c2                	add    edx,eax
c002b6b2:	eb 2f                	jmp    c002b6e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b6b4:	83 f8 0d             	cmp    eax,0xd
c002b6b7:	77 13                	ja     c002b6cc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b6b9:	0f b6 db             	movzx  ebx,bl
c002b6bc:	0f b6 d2             	movzx  edx,dl
c002b6bf:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b6c6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b6ca:	eb 17                	jmp    c002b6e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b6cc:	83 f8 15             	cmp    eax,0x15
c002b6cf:	77 14                	ja     c002b6e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b6d1:	0f b6 db             	movzx  ebx,bl
c002b6d4:	0f b6 d2             	movzx  edx,dl
c002b6d7:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b6df:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b6e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b6e5:	83 c4 1c             	add    esp,0x1c
c002b6e8:	5b                   	pop    ebx
c002b6e9:	5e                   	pop    esi
c002b6ea:	5f                   	pop    edi
c002b6eb:	5d                   	pop    ebp
c002b6ec:	c3                   	ret    
c002b6ed:	90                   	nop

c002b6ee <IDE::detect()>:
c002b6ee:	55                   	push   ebp
c002b6ef:	57                   	push   edi
c002b6f0:	56                   	push   esi
c002b6f1:	53                   	push   ebx
c002b6f2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b6f8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b6ff:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b706:	0f 85 9e 02 00 00    	jne    c002b9aa <IDE::detect()+0x2bc>
c002b70c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b713:	31 f6                	xor    esi,esi
c002b715:	31 ff                	xor    edi,edi
c002b717:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b71f:	89 f8                	mov    eax,edi
c002b721:	c1 e0 06             	shl    eax,0x6
c002b724:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b72c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b730:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b738:	c1 e0 04             	shl    eax,0x4
c002b73b:	83 c8 a0             	or     eax,0xffffffa0
c002b73e:	0f b6 c0             	movzx  eax,al
c002b741:	50                   	push   eax
c002b742:	6a 06                	push   0x6
c002b744:	56                   	push   esi
c002b745:	53                   	push   ebx
c002b746:	e8 41 f8 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b74b:	83 c4 0c             	add    esp,0xc
c002b74e:	6a 0c                	push   0xc
c002b750:	56                   	push   esi
c002b751:	53                   	push   ebx
c002b752:	e8 f5 f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b757:	83 c4 0c             	add    esp,0xc
c002b75a:	6a 0c                	push   0xc
c002b75c:	56                   	push   esi
c002b75d:	53                   	push   ebx
c002b75e:	e8 e9 f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b763:	83 c4 0c             	add    esp,0xc
c002b766:	6a 0c                	push   0xc
c002b768:	56                   	push   esi
c002b769:	53                   	push   ebx
c002b76a:	e8 dd f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b76f:	83 c4 0c             	add    esp,0xc
c002b772:	6a 0c                	push   0xc
c002b774:	56                   	push   esi
c002b775:	53                   	push   ebx
c002b776:	e8 d1 f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b77b:	68 ec 00 00 00       	push   0xec
c002b780:	6a 07                	push   0x7
c002b782:	56                   	push   esi
c002b783:	53                   	push   ebx
c002b784:	e8 03 f8 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b789:	83 c4 1c             	add    esp,0x1c
c002b78c:	6a 0c                	push   0xc
c002b78e:	56                   	push   esi
c002b78f:	53                   	push   ebx
c002b790:	e8 b7 f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b795:	83 c4 0c             	add    esp,0xc
c002b798:	6a 0c                	push   0xc
c002b79a:	56                   	push   esi
c002b79b:	53                   	push   ebx
c002b79c:	e8 ab f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b7a1:	83 c4 0c             	add    esp,0xc
c002b7a4:	6a 0c                	push   0xc
c002b7a6:	56                   	push   esi
c002b7a7:	53                   	push   ebx
c002b7a8:	e8 9f f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b7ad:	83 c4 0c             	add    esp,0xc
c002b7b0:	6a 0c                	push   0xc
c002b7b2:	56                   	push   esi
c002b7b3:	53                   	push   ebx
c002b7b4:	e8 93 f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b7b9:	83 c4 0c             	add    esp,0xc
c002b7bc:	6a 0c                	push   0xc
c002b7be:	56                   	push   esi
c002b7bf:	53                   	push   ebx
c002b7c0:	e8 87 f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b7c5:	83 c4 10             	add    esp,0x10
c002b7c8:	84 c0                	test   al,al
c002b7ca:	0f 84 61 01 00 00    	je     c002b931 <IDE::detect()+0x243>
c002b7d0:	31 ed                	xor    ebp,ebp
c002b7d2:	50                   	push   eax
c002b7d3:	6a 0c                	push   0xc
c002b7d5:	56                   	push   esi
c002b7d6:	53                   	push   ebx
c002b7d7:	e8 70 f8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b7dc:	83 c4 10             	add    esp,0x10
c002b7df:	a8 01                	test   al,0x1
c002b7e1:	0f 85 6b 01 00 00    	jne    c002b952 <IDE::detect()+0x264>
c002b7e7:	a8 80                	test   al,0x80
c002b7e9:	75 04                	jne    c002b7ef <IDE::detect()+0x101>
c002b7eb:	a8 08                	test   al,0x8
c002b7ed:	75 23                	jne    c002b812 <IDE::detect()+0x124>
c002b7ef:	45                   	inc    ebp
c002b7f0:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002b7f6:	7e da                	jle    c002b7d2 <IDE::detect()+0xe4>
c002b7f8:	83 ec 0c             	sub    esp,0xc
c002b7fb:	6a 32                	push   0x32
c002b7fd:	e8 0a 9f ff ff       	call   c002570c <milliTenthSleep(unsigned int)>
c002b802:	83 c4 10             	add    esp,0x10
c002b805:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002b80b:	75 c5                	jne    c002b7d2 <IDE::detect()+0xe4>
c002b80d:	e9 40 01 00 00       	jmp    c002b952 <IDE::detect()+0x264>
c002b812:	31 c9                	xor    ecx,ecx
c002b814:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b818:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c002b81c:	83 ec 0c             	sub    esp,0xc
c002b81f:	68 80 00 00 00       	push   0x80
c002b824:	55                   	push   ebp
c002b825:	6a 00                	push   0x0
c002b827:	56                   	push   esi
c002b828:	53                   	push   ebx
c002b829:	e8 f0 fd ff ff       	call   c002b61e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b82e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b833:	89 f8                	mov    eax,edi
c002b835:	c1 e0 06             	shl    eax,0x6
c002b838:	01 d8                	add    eax,ebx
c002b83a:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b841:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b848:	89 d1                	mov    ecx,edx
c002b84a:	89 f2                	mov    edx,esi
c002b84c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b852:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b856:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b85c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b860:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b867:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b86f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b876:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b87e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b884:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b88b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b891:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b895:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b899:	83 c4 20             	add    esp,0x20
c002b89c:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c002b89f:	83 c5 02             	add    ebp,0x2
c002b8a2:	83 c0 02             	add    eax,0x2
c002b8a5:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b8ab:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c002b8ae:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b8b4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c002b8b8:	75 e2                	jne    c002b89c <IDE::detect()+0x1ae>
c002b8ba:	89 f8                	mov    eax,edi
c002b8bc:	c1 e0 06             	shl    eax,0x6
c002b8bf:	01 d8                	add    eax,ebx
c002b8c1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b8c8:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b8cf:	c1 ea 09             	shr    edx,0x9
c002b8d2:	83 e2 01             	and    edx,0x1
c002b8d5:	80 e1 01             	and    cl,0x1
c002b8d8:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b8de:	75 22                	jne    c002b902 <IDE::detect()+0x214>
c002b8e0:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b8e7:	74 47                	je     c002b930 <IDE::detect()+0x242>
c002b8e9:	83 ec 0c             	sub    esp,0xc
c002b8ec:	68 7c 01 00 00       	push   0x17c
c002b8f1:	e8 1e ae fe ff       	call   c0016714 <malloc>
c002b8f6:	89 04 24             	mov    DWORD PTR [esp],eax
c002b8f9:	89 c5                	mov    ebp,eax
c002b8fb:	e8 2a 05 00 00       	call   c002be2a <ATA::ATA()>
c002b900:	eb 17                	jmp    c002b919 <IDE::detect()+0x22b>
c002b902:	83 ec 0c             	sub    esp,0xc
c002b905:	68 84 01 00 00       	push   0x184
c002b90a:	e8 05 ae fe ff       	call   c0016714 <malloc>
c002b90f:	89 04 24             	mov    DWORD PTR [esp],eax
c002b912:	89 c5                	mov    ebp,eax
c002b914:	e8 83 0e 00 00       	call   c002c79c <ATAPI::ATAPI()>
c002b919:	5a                   	pop    edx
c002b91a:	59                   	pop    ecx
c002b91b:	55                   	push   ebp
c002b91c:	53                   	push   ebx
c002b91d:	e8 be fc fe ff       	call   c001b5e0 <Device::addChild(Device*)>
c002b922:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002b925:	53                   	push   ebx
c002b926:	57                   	push   edi
c002b927:	6a 00                	push   0x0
c002b929:	55                   	push   ebp
c002b92a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b92d:	83 c4 20             	add    esp,0x20
c002b930:	47                   	inc    edi
c002b931:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b936:	74 0d                	je     c002b945 <IDE::detect()+0x257>
c002b938:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b940:	e9 da fd ff ff       	jmp    c002b71f <IDE::detect()+0x31>
c002b945:	4e                   	dec    esi
c002b946:	74 62                	je     c002b9aa <IDE::detect()+0x2bc>
c002b948:	be 01 00 00 00       	mov    esi,0x1
c002b94d:	e9 c5 fd ff ff       	jmp    c002b717 <IDE::detect()+0x29>
c002b952:	50                   	push   eax
c002b953:	6a 04                	push   0x4
c002b955:	56                   	push   esi
c002b956:	53                   	push   ebx
c002b957:	e8 f0 f6 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b95c:	83 c4 0c             	add    esp,0xc
c002b95f:	6a 05                	push   0x5
c002b961:	56                   	push   esi
c002b962:	53                   	push   ebx
c002b963:	89 c5                	mov    ebp,eax
c002b965:	e8 e2 f6 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002b96a:	89 e9                	mov    ecx,ebp
c002b96c:	83 c4 10             	add    esp,0x10
c002b96f:	0f b6 e9             	movzx  ebp,cl
c002b972:	83 fd 14             	cmp    ebp,0x14
c002b975:	74 2d                	je     c002b9a4 <IDE::detect()+0x2b6>
c002b977:	83 fd 69             	cmp    ebp,0x69
c002b97a:	75 b5                	jne    c002b931 <IDE::detect()+0x243>
c002b97c:	3c 96                	cmp    al,0x96
c002b97e:	75 b1                	jne    c002b931 <IDE::detect()+0x243>
c002b980:	68 a1 00 00 00       	push   0xa1
c002b985:	6a 07                	push   0x7
c002b987:	56                   	push   esi
c002b988:	53                   	push   ebx
c002b989:	e8 fe f5 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b98e:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b995:	e8 72 9d ff ff       	call   c002570c <milliTenthSleep(unsigned int)>
c002b99a:	83 c4 10             	add    esp,0x10
c002b99d:	b1 01                	mov    cl,0x1
c002b99f:	e9 70 fe ff ff       	jmp    c002b814 <IDE::detect()+0x126>
c002b9a4:	3c eb                	cmp    al,0xeb
c002b9a6:	75 cf                	jne    c002b977 <IDE::detect()+0x289>
c002b9a8:	eb d6                	jmp    c002b980 <IDE::detect()+0x292>
c002b9aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b9b0:	5b                   	pop    ebx
c002b9b1:	5e                   	pop    esi
c002b9b2:	5f                   	pop    edi
c002b9b3:	5d                   	pop    ebp
c002b9b4:	c3                   	ret    
c002b9b5:	90                   	nop

c002b9b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b9b6:	55                   	push   ebp
c002b9b7:	57                   	push   edi
c002b9b8:	56                   	push   esi
c002b9b9:	53                   	push   ebx
c002b9ba:	83 ec 1c             	sub    esp,0x1c
c002b9bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b9c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b9c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b9c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b9cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b9d1:	88 c3                	mov    bl,al
c002b9d3:	25 ff 00 00 00       	and    eax,0xff
c002b9d8:	0f 84 88 00 00 00    	je     c002ba66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9de:	83 ec 0c             	sub    esp,0xc
c002b9e1:	89 c7                	mov    edi,eax
c002b9e3:	68 47 3b 03 c0       	push   0xc0033b47
c002b9e8:	e8 5d db fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002b9ed:	83 c4 10             	add    esp,0x10
c002b9f0:	83 ff 01             	cmp    edi,0x1
c002b9f3:	74 6b                	je     c002ba60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b9f5:	83 ff 02             	cmp    edi,0x2
c002b9f8:	75 58                	jne    c002ba52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b9fa:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b9ff:	50                   	push   eax
c002ba00:	6a 01                	push   0x1
c002ba02:	01 ff                	add    edi,edi
c002ba04:	09 fe                	or     esi,edi
c002ba06:	89 f0                	mov    eax,esi
c002ba08:	0f b6 f0             	movzx  esi,al
c002ba0b:	c1 e6 06             	shl    esi,0x6
c002ba0e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002ba16:	50                   	push   eax
c002ba17:	55                   	push   ebp
c002ba18:	e8 2f f6 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002ba1d:	83 c4 10             	add    esp,0x10
c002ba20:	a8 01                	test   al,0x1
c002ba22:	74 02                	je     c002ba26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002ba24:	b3 07                	mov    bl,0x7
c002ba26:	a8 02                	test   al,0x2
c002ba28:	74 02                	je     c002ba2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002ba2a:	b3 03                	mov    bl,0x3
c002ba2c:	a8 04                	test   al,0x4
c002ba2e:	74 02                	je     c002ba32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002ba30:	b3 14                	mov    bl,0x14
c002ba32:	a8 08                	test   al,0x8
c002ba34:	74 02                	je     c002ba38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002ba36:	b3 03                	mov    bl,0x3
c002ba38:	a8 10                	test   al,0x10
c002ba3a:	74 02                	je     c002ba3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002ba3c:	b3 15                	mov    bl,0x15
c002ba3e:	a8 20                	test   al,0x20
c002ba40:	74 02                	je     c002ba44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002ba42:	b3 03                	mov    bl,0x3
c002ba44:	a8 40                	test   al,0x40
c002ba46:	74 02                	je     c002ba4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002ba48:	b3 16                	mov    bl,0x16
c002ba4a:	a8 80                	test   al,0x80
c002ba4c:	74 18                	je     c002ba66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002ba4e:	b3 0d                	mov    bl,0xd
c002ba50:	eb 14                	jmp    c002ba66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002ba52:	83 ff 03             	cmp    edi,0x3
c002ba55:	74 0d                	je     c002ba64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002ba57:	83 ff 04             	cmp    edi,0x4
c002ba5a:	75 0a                	jne    c002ba66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002ba5c:	b3 08                	mov    bl,0x8
c002ba5e:	eb 06                	jmp    c002ba66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002ba60:	b3 13                	mov    bl,0x13
c002ba62:	eb 02                	jmp    c002ba66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002ba64:	b3 17                	mov    bl,0x17
c002ba66:	83 c4 1c             	add    esp,0x1c
c002ba69:	88 d8                	mov    al,bl
c002ba6b:	5b                   	pop    ebx
c002ba6c:	5e                   	pop    esi
c002ba6d:	5f                   	pop    edi
c002ba6e:	5d                   	pop    ebp
c002ba6f:	c3                   	ret    

c002ba70 <IDE::polling(unsigned char, unsigned int)>:
c002ba70:	57                   	push   edi
c002ba71:	56                   	push   esi
c002ba72:	53                   	push   ebx
c002ba73:	bb 04 00 00 00       	mov    ebx,0x4
c002ba78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002ba7c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002ba81:	52                   	push   edx
c002ba82:	6a 0c                	push   0xc
c002ba84:	56                   	push   esi
c002ba85:	57                   	push   edi
c002ba86:	e8 c1 f5 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002ba8b:	83 c4 10             	add    esp,0x10
c002ba8e:	4b                   	dec    ebx
c002ba8f:	75 f0                	jne    c002ba81 <IDE::polling(unsigned char, unsigned int)+0x11>
c002ba91:	bb a0 86 01 00       	mov    ebx,0x186a0
c002ba96:	50                   	push   eax
c002ba97:	6a 0c                	push   0xc
c002ba99:	56                   	push   esi
c002ba9a:	57                   	push   edi
c002ba9b:	e8 ac f5 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002baa0:	83 c4 10             	add    esp,0x10
c002baa3:	a8 01                	test   al,0x1
c002baa5:	75 17                	jne    c002babe <IDE::polling(unsigned char, unsigned int)+0x4e>
c002baa7:	a8 20                	test   al,0x20
c002baa9:	75 0f                	jne    c002baba <IDE::polling(unsigned char, unsigned int)+0x4a>
c002baab:	4b                   	dec    ebx
c002baac:	74 10                	je     c002babe <IDE::polling(unsigned char, unsigned int)+0x4e>
c002baae:	a8 80                	test   al,0x80
c002bab0:	75 e4                	jne    c002ba96 <IDE::polling(unsigned char, unsigned int)+0x26>
c002bab2:	a8 08                	test   al,0x8
c002bab4:	74 e0                	je     c002ba96 <IDE::polling(unsigned char, unsigned int)+0x26>
c002bab6:	31 c0                	xor    eax,eax
c002bab8:	eb 06                	jmp    c002bac0 <IDE::polling(unsigned char, unsigned int)+0x50>
c002baba:	b0 01                	mov    al,0x1
c002babc:	eb 02                	jmp    c002bac0 <IDE::polling(unsigned char, unsigned int)+0x50>
c002babe:	b0 02                	mov    al,0x2
c002bac0:	5b                   	pop    ebx
c002bac1:	5e                   	pop    esi
c002bac2:	5f                   	pop    edi
c002bac3:	c3                   	ret    

c002bac4 <SATABus::close(int, int, void*)>:
c002bac4:	31 c0                	xor    eax,eax
c002bac6:	c3                   	ret    
c002bac7:	90                   	nop

c002bac8 <SATABus::detect()>:
c002bac8:	c3                   	ret    
c002bac9:	90                   	nop

c002baca <SATABus::SATABus()>:
c002baca:	83 ec 0c             	sub    esp,0xc
c002bacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bad1:	83 ec 08             	sub    esp,0x8
c002bad4:	68 80 3b 03 c0       	push   0xc0033b80
c002bad9:	50                   	push   eax
c002bada:	e8 59 fe fe ff       	call   c001b938 <HardDiskController::HardDiskController(char const*)>
c002badf:	83 c4 10             	add    esp,0x10
c002bae2:	ba ac 3b 03 c0       	mov    edx,0xc0033bac
c002bae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002baeb:	89 10                	mov    DWORD PTR [eax],edx
c002baed:	83 ec 0c             	sub    esp,0xc
c002baf0:	6a 50                	push   0x50
c002baf2:	e8 fb af fe ff       	call   c0016af2 <Phys::allocateContiguousPages(int)>
c002baf7:	83 c4 10             	add    esp,0x10
c002bafa:	89 c2                	mov    edx,eax
c002bafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb00:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002bb06:	83 ec 0c             	sub    esp,0xc
c002bb09:	6a 50                	push   0x50
c002bb0b:	e8 25 c7 fe ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c002bb10:	83 c4 10             	add    esp,0x10
c002bb13:	89 c2                	mov    edx,eax
c002bb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb19:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002bb1f:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002bb24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002bb28:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002bb2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002bb32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002bb38:	83 ec 0c             	sub    esp,0xc
c002bb3b:	6a 03                	push   0x3
c002bb3d:	6a 50                	push   0x50
c002bb3f:	51                   	push   ecx
c002bb40:	52                   	push   edx
c002bb41:	50                   	push   eax
c002bb42:	e8 01 d0 fe ff       	call   c0018b48 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002bb47:	83 c4 20             	add    esp,0x20
c002bb4a:	90                   	nop
c002bb4b:	83 c4 0c             	add    esp,0xc
c002bb4e:	c3                   	ret    
c002bb4f:	90                   	nop

c002bb50 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002bb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bb54:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002bb57:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002bb5a:	09 c2                	or     edx,eax
c002bb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002bb60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002bb66:	8b 08                	mov    ecx,DWORD PTR [eax]
c002bb68:	31 c0                	xor    eax,eax
c002bb6a:	c1 e9 08             	shr    ecx,0x8
c002bb6d:	83 e1 0f             	and    ecx,0xf
c002bb70:	39 c8                	cmp    eax,ecx
c002bb72:	74 0a                	je     c002bb7e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002bb74:	f6 c2 01             	test   dl,0x1
c002bb77:	74 08                	je     c002bb81 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002bb79:	d1 ea                	shr    edx,1
c002bb7b:	40                   	inc    eax
c002bb7c:	eb f2                	jmp    c002bb70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002bb7e:	83 c8 ff             	or     eax,0xffffffff
c002bb81:	c3                   	ret    

c002bb82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002bb82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bb86:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002bb89:	89 c2                	mov    edx,eax
c002bb8b:	c1 ea 08             	shr    edx,0x8
c002bb8e:	83 e2 0f             	and    edx,0xf
c002bb91:	4a                   	dec    edx
c002bb92:	75 32                	jne    c002bbc6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bb94:	83 e0 0f             	and    eax,0xf
c002bb97:	83 f8 03             	cmp    eax,0x3
c002bb9a:	75 2a                	jne    c002bbc6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bb9c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002bb9f:	b8 02 00 00 00       	mov    eax,0x2
c002bba4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002bbaa:	74 1c                	je     c002bbc8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bbac:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002bbb2:	b8 04 00 00 00       	mov    eax,0x4
c002bbb7:	74 0f                	je     c002bbc8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bbb9:	31 c0                	xor    eax,eax
c002bbbb:	83 fa 03             	cmp    edx,0x3
c002bbbe:	0f 94 c0             	sete   al
c002bbc1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002bbc5:	c3                   	ret    
c002bbc6:	31 c0                	xor    eax,eax
c002bbc8:	c3                   	ret    
c002bbc9:	90                   	nop

c002bbca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002bbca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bbce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bbd1:	0f ba e2 0f          	bt     edx,0xf
c002bbd5:	72 f7                	jb     c002bbce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002bbd7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bbda:	83 ca 10             	or     edx,0x10
c002bbdd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bbe0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bbe3:	83 ca 01             	or     edx,0x1
c002bbe6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bbe9:	c3                   	ret    

c002bbea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002bbea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bbee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bbf1:	83 e2 fe             	and    edx,0xfffffffe
c002bbf4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bbf7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bbfa:	83 e2 ef             	and    edx,0xffffffef
c002bbfd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bc00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bc03:	0f ba e2 0e          	bt     edx,0xe
c002bc07:	72 f7                	jb     c002bc00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bc09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bc0c:	0f ba e2 0f          	bt     edx,0xf
c002bc10:	72 ee                	jb     c002bc00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bc12:	c3                   	ret    
c002bc13:	90                   	nop

c002bc14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002bc14:	55                   	push   ebp
c002bc15:	57                   	push   edi
c002bc16:	56                   	push   esi
c002bc17:	53                   	push   ebx
c002bc18:	83 ec 1c             	sub    esp,0x1c
c002bc1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002bc1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002bc23:	53                   	push   ebx
c002bc24:	57                   	push   edi
c002bc25:	e8 c0 ff ff ff       	call   c002bbea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002bc2a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002bc2e:	83 ec 0c             	sub    esp,0xc
c002bc31:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002bc37:	c1 e5 0a             	shl    ebp,0xa
c002bc3a:	01 e8                	add    eax,ebp
c002bc3c:	89 03                	mov    DWORD PTR [ebx],eax
c002bc3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c002bc40:	68 00 04 00 00       	push   0x400
c002bc45:	6a 00                	push   0x0
c002bc47:	50                   	push   eax
c002bc48:	e8 a3 48 fd ff       	call   c00004f0 <memset>
c002bc4d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002bc53:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002bc57:	83 c4 1c             	add    esp,0x1c
c002bc5a:	01 e8                	add    eax,ebp
c002bc5c:	89 03                	mov    DWORD PTR [ebx],eax
c002bc5e:	c1 e6 08             	shl    esi,0x8
c002bc61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002bc68:	81 c6 00 80 00 00    	add    esi,0x8000
c002bc6e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002bc74:	01 f0                	add    eax,esi
c002bc76:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002bc79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002bc7c:	68 00 01 00 00       	push   0x100
c002bc81:	6a 00                	push   0x0
c002bc83:	50                   	push   eax
c002bc84:	e8 67 48 fd ff       	call   c00004f0 <memset>
c002bc89:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002bc8f:	31 d2                	xor    edx,edx
c002bc91:	01 f0                	add    eax,esi
c002bc93:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002bc96:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002bc9d:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002bca3:	01 ee                	add    esi,ebp
c002bca5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002bca9:	83 c4 10             	add    esp,0x10
c002bcac:	c1 e5 0d             	shl    ebp,0xd
c002bcaf:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002bcb5:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002bcbb:	83 c6 20             	add    esi,0x20
c002bcbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002bcc2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002bcc8:	01 e8                	add    eax,ebp
c002bcca:	01 d0                	add    eax,edx
c002bccc:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002bccf:	52                   	push   edx
c002bcd0:	68 00 01 00 00       	push   0x100
c002bcd5:	6a 00                	push   0x0
c002bcd7:	50                   	push   eax
c002bcd8:	e8 13 48 fd ff       	call   c00004f0 <memset>
c002bcdd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002bce3:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002bcea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bcee:	83 c4 10             	add    esp,0x10
c002bcf1:	01 e8                	add    eax,ebp
c002bcf3:	01 d0                	add    eax,edx
c002bcf5:	81 c2 00 01 00 00    	add    edx,0x100
c002bcfb:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002bcfe:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002bd04:	75 af                	jne    c002bcb5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002bd06:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bd0d:	50                   	push   eax
c002bd0e:	50                   	push   eax
c002bd0f:	53                   	push   ebx
c002bd10:	57                   	push   edi
c002bd11:	e8 b4 fe ff ff       	call   c002bbca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002bd16:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bd1d:	83 c4 2c             	add    esp,0x2c
c002bd20:	5b                   	pop    ebx
c002bd21:	5e                   	pop    esi
c002bd22:	5f                   	pop    edi
c002bd23:	5d                   	pop    ebp
c002bd24:	c3                   	ret    
c002bd25:	90                   	nop

c002bd26 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002bd26:	55                   	push   ebp
c002bd27:	57                   	push   edi
c002bd28:	56                   	push   esi
c002bd29:	53                   	push   ebx
c002bd2a:	31 db                	xor    ebx,ebx
c002bd2c:	83 ec 0c             	sub    esp,0xc
c002bd2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bd33:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002bd37:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002bd3a:	f7 c7 01 00 00 00    	test   edi,0x1
c002bd40:	74 7a                	je     c002bdbc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bd42:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002bd46:	89 d8                	mov    eax,ebx
c002bd48:	c1 e0 07             	shl    eax,0x7
c002bd4b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002bd52:	55                   	push   ebp
c002bd53:	56                   	push   esi
c002bd54:	e8 29 fe ff ff       	call   c002bb82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002bd59:	5a                   	pop    edx
c002bd5a:	59                   	pop    ecx
c002bd5b:	83 f8 01             	cmp    eax,0x1
c002bd5e:	75 21                	jne    c002bd81 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002bd60:	50                   	push   eax
c002bd61:	53                   	push   ebx
c002bd62:	55                   	push   ebp
c002bd63:	56                   	push   esi
c002bd64:	e8 ab fe ff ff       	call   c002bc14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bd69:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bd70:	e8 9f a9 fe ff       	call   c0016714 <malloc>
c002bd75:	89 04 24             	mov    DWORD PTR [esp],eax
c002bd78:	89 c5                	mov    ebp,eax
c002bd7a:	e8 e3 10 00 00       	call   c002ce62 <SATA::SATA()>
c002bd7f:	eb 24                	jmp    c002bda5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002bd81:	83 f8 04             	cmp    eax,0x4
c002bd84:	75 36                	jne    c002bdbc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bd86:	51                   	push   ecx
c002bd87:	53                   	push   ebx
c002bd88:	55                   	push   ebp
c002bd89:	56                   	push   esi
c002bd8a:	e8 85 fe ff ff       	call   c002bc14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bd8f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bd96:	e8 79 a9 fe ff       	call   c0016714 <malloc>
c002bd9b:	89 04 24             	mov    DWORD PTR [esp],eax
c002bd9e:	89 c5                	mov    ebp,eax
c002bda0:	e8 4b 18 00 00       	call   c002d5f0 <SATAPI::SATAPI()>
c002bda5:	58                   	pop    eax
c002bda6:	5a                   	pop    edx
c002bda7:	55                   	push   ebp
c002bda8:	56                   	push   esi
c002bda9:	e8 32 f8 fe ff       	call   c001b5e0 <Device::addChild(Device*)>
c002bdae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bdb1:	56                   	push   esi
c002bdb2:	6a 00                	push   0x0
c002bdb4:	53                   	push   ebx
c002bdb5:	55                   	push   ebp
c002bdb6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002bdb9:	83 c4 20             	add    esp,0x20
c002bdbc:	d1 ef                	shr    edi,1
c002bdbe:	43                   	inc    ebx
c002bdbf:	83 fb 20             	cmp    ebx,0x20
c002bdc2:	0f 85 72 ff ff ff    	jne    c002bd3a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bdc8:	83 c4 0c             	add    esp,0xc
c002bdcb:	5b                   	pop    ebx
c002bdcc:	5e                   	pop    esi
c002bdcd:	5f                   	pop    edi
c002bdce:	5d                   	pop    ebp
c002bdcf:	c3                   	ret    

c002bdd0 <SATABus::open(int, int, void*)>:
c002bdd0:	53                   	push   ebx
c002bdd1:	83 ec 08             	sub    esp,0x8
c002bdd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bdd8:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bdde:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bde4:	e8 b7 94 ff ff       	call   c00252a0 <KeDisablePreemption()>
c002bde9:	52                   	push   edx
c002bdea:	52                   	push   edx
c002bdeb:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bdf1:	53                   	push   ebx
c002bdf2:	e8 2f ff ff ff       	call   c002bd26 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bdf7:	e8 cc 94 ff ff       	call   c00252c8 <KeRestorePreemption()>
c002bdfc:	83 c4 18             	add    esp,0x18
c002bdff:	31 c0                	xor    eax,eax
c002be01:	5b                   	pop    ebx
c002be02:	c3                   	ret    
c002be03:	90                   	nop

c002be04 <ATA::close(int, int, void*)>:
c002be04:	83 ec 0c             	sub    esp,0xc
c002be07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002be11:	85 c0                	test   eax,eax
c002be13:	74 0c                	je     c002be21 <ATA::close(int, int, void*)+0x1d>
c002be15:	8b 10                	mov    edx,DWORD PTR [eax]
c002be17:	83 ec 0c             	sub    esp,0xc
c002be1a:	50                   	push   eax
c002be1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002be1e:	83 c4 10             	add    esp,0x10
c002be21:	31 c0                	xor    eax,eax
c002be23:	83 c4 0c             	add    esp,0xc
c002be26:	c3                   	ret    
c002be27:	90                   	nop

c002be28 <ATA::powerSaving(PowerSavingLevel)>:
c002be28:	c3                   	ret    
c002be29:	90                   	nop

c002be2a <ATA::ATA()>:
c002be2a:	83 ec 0c             	sub    esp,0xc
c002be2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be31:	83 ec 04             	sub    esp,0x4
c002be34:	68 00 02 00 00       	push   0x200
c002be39:	68 85 3c 03 c0       	push   0xc0033c85
c002be3e:	50                   	push   eax
c002be3f:	e8 7e fb fe ff       	call   c001b9c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002be44:	83 c4 10             	add    esp,0x10
c002be47:	ba ec 3b 03 c0       	mov    edx,0xc0033bec
c002be4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be50:	89 10                	mov    DWORD PTR [eax],edx
c002be52:	90                   	nop
c002be53:	83 c4 0c             	add    esp,0xc
c002be56:	c3                   	ret    
c002be57:	90                   	nop

c002be58 <ATA::flush(bool)>:
c002be58:	53                   	push   ebx
c002be59:	83 ec 08             	sub    esp,0x8
c002be5c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002be61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002be65:	83 f8 01             	cmp    eax,0x1
c002be68:	19 c0                	sbb    eax,eax
c002be6a:	83 e0 fd             	and    eax,0xfffffffd
c002be6d:	05 ea 00 00 00       	add    eax,0xea
c002be72:	50                   	push   eax
c002be73:	6a 07                	push   0x7
c002be75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be7c:	50                   	push   eax
c002be7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be83:	e8 04 f1 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be88:	83 c4 0c             	add    esp,0xc
c002be8b:	6a 00                	push   0x0
c002be8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be94:	50                   	push   eax
c002be95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be9b:	e8 d0 fb ff ff       	call   c002ba70 <IDE::polling(unsigned char, unsigned int)>
c002bea0:	83 c4 18             	add    esp,0x18
c002bea3:	5b                   	pop    ebx
c002bea4:	c3                   	ret    
c002bea5:	90                   	nop

c002bea6 <ATA::readyForCommand()>:
c002bea6:	56                   	push   esi
c002bea7:	53                   	push   ebx
c002bea8:	53                   	push   ebx
c002bea9:	31 db                	xor    ebx,ebx
c002beab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002beaf:	51                   	push   ecx
c002beb0:	6a 0c                	push   0xc
c002beb2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002beb9:	50                   	push   eax
c002beba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bec0:	e8 87 f1 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002bec5:	83 c4 10             	add    esp,0x10
c002bec8:	a8 88                	test   al,0x88
c002beca:	74 1f                	je     c002beeb <ATA::readyForCommand()+0x45>
c002becc:	43                   	inc    ebx
c002becd:	83 fb 63             	cmp    ebx,0x63
c002bed0:	7e dd                	jle    c002beaf <ATA::readyForCommand()+0x9>
c002bed2:	83 ec 0c             	sub    esp,0xc
c002bed5:	6a 0a                	push   0xa
c002bed7:	e8 30 98 ff ff       	call   c002570c <milliTenthSleep(unsigned int)>
c002bedc:	83 c4 10             	add    esp,0x10
c002bedf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bee5:	75 c8                	jne    c002beaf <ATA::readyForCommand()+0x9>
c002bee7:	31 c0                	xor    eax,eax
c002bee9:	eb 02                	jmp    c002beed <ATA::readyForCommand()+0x47>
c002beeb:	b0 01                	mov    al,0x1
c002beed:	5a                   	pop    edx
c002beee:	5b                   	pop    ebx
c002beef:	5e                   	pop    esi
c002bef0:	c3                   	ret    
c002bef1:	90                   	nop

c002bef2 <ATA::access(unsigned long long, int, void*, bool)>:
c002bef2:	55                   	push   ebp
c002bef3:	57                   	push   edi
c002bef4:	56                   	push   esi
c002bef5:	53                   	push   ebx
c002bef6:	83 ec 2c             	sub    esp,0x2c
c002bef9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002befd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bf01:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bf05:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bf09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bf0d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bf11:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002bf15:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bf1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bf1f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bf25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bf29:	c1 e0 06             	shl    eax,0x6
c002bf2c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bf34:	74 5b                	je     c002bf91 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002bf36:	89 fa                	mov    edx,edi
c002bf38:	89 f0                	mov    eax,esi
c002bf3a:	c1 ea 1c             	shr    edx,0x1c
c002bf3d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002bf41:	89 d1                	mov    ecx,edx
c002bf43:	09 c1                	or     ecx,eax
c002bf45:	74 25                	je     c002bf6c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bf47:	31 ed                	xor    ebp,ebp
c002bf49:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bf50:	89 fa                	mov    edx,edi
c002bf52:	89 f0                	mov    eax,esi
c002bf54:	0f ad d0             	shrd   eax,edx,cl
c002bf57:	d3 ea                	shr    edx,cl
c002bf59:	f6 c1 20             	test   cl,0x20
c002bf5c:	74 02                	je     c002bf60 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bf5e:	89 d0                	mov    eax,edx
c002bf60:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bf64:	45                   	inc    ebp
c002bf65:	83 fd 06             	cmp    ebp,0x6
c002bf68:	75 df                	jne    c002bf49 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bf6a:	eb 71                	jmp    c002bfdd <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002bf6c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bf71:	89 f0                	mov    eax,esi
c002bf73:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bf7a:	0f ac f8 10          	shrd   eax,edi,0x10
c002bf7e:	bf 01 00 00 00       	mov    edi,0x1
c002bf83:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bf87:	c1 ee 18             	shr    esi,0x18
c002bf8a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bf8f:	eb 53                	jmp    c002bfe4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bf91:	6a 00                	push   0x0
c002bf93:	6a 3f                	push   0x3f
c002bf95:	57                   	push   edi
c002bf96:	56                   	push   esi
c002bf97:	e8 f4 2a 00 00       	call   c002ea90 <__umoddi3>
c002bf9c:	83 c4 10             	add    esp,0x10
c002bf9f:	40                   	inc    eax
c002bfa0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bfa4:	6a 00                	push   0x0
c002bfa6:	68 f0 03 00 00       	push   0x3f0
c002bfab:	57                   	push   edi
c002bfac:	56                   	push   esi
c002bfad:	e8 de 29 00 00       	call   c002e990 <__udivdi3>
c002bfb2:	83 c4 10             	add    esp,0x10
c002bfb5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bfba:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bfc1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bfc6:	6a 00                	push   0x0
c002bfc8:	6a 3f                	push   0x3f
c002bfca:	57                   	push   edi
c002bfcb:	31 ff                	xor    edi,edi
c002bfcd:	56                   	push   esi
c002bfce:	e8 bd 29 00 00       	call   c002e990 <__udivdi3>
c002bfd3:	83 c4 10             	add    esp,0x10
c002bfd6:	83 e0 0f             	and    eax,0xf
c002bfd9:	89 c6                	mov    esi,eax
c002bfdb:	eb 07                	jmp    c002bfe4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bfdd:	31 f6                	xor    esi,esi
c002bfdf:	bf 02 00 00 00       	mov    edi,0x2
c002bfe4:	50                   	push   eax
c002bfe5:	6a 00                	push   0x0
c002bfe7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfee:	50                   	push   eax
c002bfef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bff3:	e8 a2 f1 ff ff       	call   c002b19a <IDE::enableIRQs(unsigned char, bool)>
c002bff8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bffb:	e8 a6 fe ff ff       	call   c002bea6 <ATA::readyForCommand()>
c002c000:	83 c4 10             	add    esp,0x10
c002c003:	84 c0                	test   al,al
c002c005:	75 0a                	jne    c002c011 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002c007:	be 01 00 00 00       	mov    esi,0x1
c002c00c:	e9 9b 02 00 00       	jmp    c002c2ac <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002c011:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002c017:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c01d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002c024:	c1 e0 04             	shl    eax,0x4
c002c027:	09 c6                	or     esi,eax
c002c029:	f7 c7 03 00 00 00    	test   edi,0x3
c002c02f:	75 05                	jne    c002c036 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002c031:	83 ce a0             	or     esi,0xffffffa0
c002c034:	eb 03                	jmp    c002c039 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002c036:	83 ce e0             	or     esi,0xffffffe0
c002c039:	89 f0                	mov    eax,esi
c002c03b:	0f b6 f0             	movzx  esi,al
c002c03e:	56                   	push   esi
c002c03f:	6a 06                	push   0x6
c002c041:	51                   	push   ecx
c002c042:	52                   	push   edx
c002c043:	e8 44 ef ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c048:	83 c4 10             	add    esp,0x10
c002c04b:	6a 00                	push   0x0
c002c04d:	6a 01                	push   0x1
c002c04f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c056:	50                   	push   eax
c002c057:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c05d:	e8 2a ef ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c062:	89 f8                	mov    eax,edi
c002c064:	83 c4 10             	add    esp,0x10
c002c067:	0f b6 f0             	movzx  esi,al
c002c06a:	83 fe 02             	cmp    esi,0x2
c002c06d:	75 6e                	jne    c002c0dd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002c06f:	6a 00                	push   0x0
c002c071:	6a 08                	push   0x8
c002c073:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c07a:	50                   	push   eax
c002c07b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c081:	e8 06 ef ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c086:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002c08b:	50                   	push   eax
c002c08c:	6a 09                	push   0x9
c002c08e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c095:	50                   	push   eax
c002c096:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c09c:	e8 eb ee ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0a1:	83 c4 20             	add    esp,0x20
c002c0a4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002c0a9:	50                   	push   eax
c002c0aa:	6a 0a                	push   0xa
c002c0ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0b3:	50                   	push   eax
c002c0b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0ba:	e8 cd ee ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0bf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002c0c4:	50                   	push   eax
c002c0c5:	6a 0b                	push   0xb
c002c0c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0ce:	50                   	push   eax
c002c0cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0d5:	e8 b2 ee ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0da:	83 c4 20             	add    esp,0x20
c002c0dd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002c0e2:	50                   	push   eax
c002c0e3:	6a 02                	push   0x2
c002c0e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0ec:	50                   	push   eax
c002c0ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0f3:	e8 94 ee ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0f8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c0fd:	50                   	push   eax
c002c0fe:	6a 03                	push   0x3
c002c100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c107:	50                   	push   eax
c002c108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c10e:	e8 79 ee ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c113:	83 c4 20             	add    esp,0x20
c002c116:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c11b:	50                   	push   eax
c002c11c:	6a 04                	push   0x4
c002c11e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c125:	50                   	push   eax
c002c126:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c12c:	e8 5b ee ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c131:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c136:	50                   	push   eax
c002c137:	6a 05                	push   0x5
c002c139:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c140:	50                   	push   eax
c002c141:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c147:	e8 40 ee ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c14c:	83 c4 20             	add    esp,0x20
c002c14f:	83 fe 02             	cmp    esi,0x2
c002c152:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002c157:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002c15c:	85 c9                	test   ecx,ecx
c002c15e:	74 07                	je     c002c167 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002c160:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c165:	75 47                	jne    c002c1ae <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c002c167:	89 f8                	mov    eax,edi
c002c169:	0f b6 f8             	movzx  edi,al
c002c16c:	31 c0                	xor    eax,eax
c002c16e:	83 ff 02             	cmp    edi,0x2
c002c171:	0f 95 c0             	setne  al
c002c174:	89 c6                	mov    esi,eax
c002c176:	74 0c                	je     c002c184 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c002c178:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c17d:	b8 30 00 00 00       	mov    eax,0x30
c002c182:	75 2f                	jne    c002c1b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002c184:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c188:	83 f2 01             	xor    edx,0x1
c002c18b:	85 c9                	test   ecx,ecx
c002c18d:	74 09                	je     c002c198 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002c18f:	84 d2                	test   dl,dl
c002c191:	b8 24 00 00 00       	mov    eax,0x24
c002c196:	75 1b                	jne    c002c1b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002c198:	85 f6                	test   esi,esi
c002c19a:	0f 84 67 fe ff ff    	je     c002c007 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002c1a0:	84 d2                	test   dl,dl
c002c1a2:	b8 20 00 00 00       	mov    eax,0x20
c002c1a7:	75 0a                	jne    c002c1b3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002c1a9:	e9 59 fe ff ff       	jmp    c002c007 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002c1ae:	b8 34 00 00 00       	mov    eax,0x34
c002c1b3:	50                   	push   eax
c002c1b4:	6a 07                	push   0x7
c002c1b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c1bd:	50                   	push   eax
c002c1be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c1c4:	e8 c3 ed ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c1c9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002c1cd:	83 c4 10             	add    esp,0x10
c002c1d0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002c1d5:	85 f6                	test   esi,esi
c002c1d7:	0f 84 b5 00 00 00    	je     c002c292 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c002c1dd:	50                   	push   eax
c002c1de:	6a 01                	push   0x1
c002c1e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c1e7:	50                   	push   eax
c002c1e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c1ee:	e8 7d f8 ff ff       	call   c002ba70 <IDE::polling(unsigned char, unsigned int)>
c002c1f3:	83 c4 10             	add    esp,0x10
c002c1f6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c1fc:	0f b6 c0             	movzx  eax,al
c002c1ff:	85 c0                	test   eax,eax
c002c201:	74 1f                	je     c002c222 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c002c203:	50                   	push   eax
c002c204:	89 c6                	mov    esi,eax
c002c206:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c20d:	0f b6 d2             	movzx  edx,dl
c002c210:	50                   	push   eax
c002c211:	52                   	push   edx
c002c212:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c218:	e8 99 f7 ff ff       	call   c002b9b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c21d:	e9 87 00 00 00       	jmp    c002c2a9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c002c222:	85 ed                	test   ebp,ebp
c002c224:	74 3b                	je     c002c261 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c002c226:	31 ff                	xor    edi,edi
c002c228:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c22c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002c230:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002c235:	50                   	push   eax
c002c236:	50                   	push   eax
c002c237:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c23e:	50                   	push   eax
c002c23f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c245:	e8 30 ed ff ff       	call   c002af7a <IDE::getBase(unsigned char)>
c002c24a:	89 c2                	mov    edx,eax
c002c24c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002c251:	66 ef                	out    dx,ax
c002c253:	47                   	inc    edi
c002c254:	83 c4 10             	add    esp,0x10
c002c257:	81 ff 00 01 00 00    	cmp    edi,0x100
c002c25d:	75 c9                	jne    c002c228 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002c25f:	eb 23                	jmp    c002c284 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c002c261:	51                   	push   ecx
c002c262:	0f b6 d2             	movzx  edx,dl
c002c265:	51                   	push   ecx
c002c266:	52                   	push   edx
c002c267:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c26d:	e8 08 ed ff ff       	call   c002af7a <IDE::getBase(unsigned char)>
c002c272:	b9 00 01 00 00       	mov    ecx,0x100
c002c277:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c27b:	89 c2                	mov    edx,eax
c002c27d:	fc                   	cld    
c002c27e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c281:	83 c4 10             	add    esp,0x10
c002c284:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c28c:	4e                   	dec    esi
c002c28d:	e9 43 ff ff ff       	jmp    c002c1d5 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002c292:	31 f6                	xor    esi,esi
c002c294:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c299:	74 11                	je     c002c2ac <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002c29b:	50                   	push   eax
c002c29c:	50                   	push   eax
c002c29d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002c2a2:	50                   	push   eax
c002c2a3:	53                   	push   ebx
c002c2a4:	e8 af fb ff ff       	call   c002be58 <ATA::flush(bool)>
c002c2a9:	83 c4 10             	add    esp,0x10
c002c2ac:	83 c4 2c             	add    esp,0x2c
c002c2af:	89 f0                	mov    eax,esi
c002c2b1:	5b                   	pop    ebx
c002c2b2:	5e                   	pop    esi
c002c2b3:	5f                   	pop    edi
c002c2b4:	5d                   	pop    ebp
c002c2b5:	c3                   	ret    

c002c2b6 <ATA::detectCHS()>:
c002c2b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c2ba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c2c0:	c1 e0 06             	shl    eax,0x6
c002c2c3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c2c9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c2d3:	c7 44 24 04 d0 3b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033bd0
c002c2db:	e9 f2 41 ff ff       	jmp    c00204d2 <KePanic(char const*)>

c002c2e0 <ATA::open(int, int, void*)>:
c002c2e0:	53                   	push   ebx
c002c2e1:	83 ec 08             	sub    esp,0x8
c002c2e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c2e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c2ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c2f0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c2f6:	c1 e0 06             	shl    eax,0x6
c002c2f9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c2ff:	01 d0                	add    eax,edx
c002c301:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c308:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c30e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c315:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c31f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c326:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c32c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c333:	75 0c                	jne    c002c341 <ATA::open(int, int, void*)+0x61>
c002c335:	83 ec 0c             	sub    esp,0xc
c002c338:	53                   	push   ebx
c002c339:	e8 78 ff ff ff       	call   c002c2b6 <ATA::detectCHS()>
c002c33e:	83 c4 10             	add    esp,0x10
c002c341:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c347:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c34d:	c1 e0 06             	shl    eax,0x6
c002c350:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c357:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c361:	d1 e8                	shr    eax,1
c002c363:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c369:	6a 04                	push   0x4
c002c36b:	6a 0c                	push   0xc
c002c36d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c374:	50                   	push   eax
c002c375:	52                   	push   edx
c002c376:	e8 11 ec ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c37b:	90                   	nop
c002c37c:	90                   	nop
c002c37d:	6a 00                	push   0x0
c002c37f:	6a 0c                	push   0xc
c002c381:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c388:	50                   	push   eax
c002c389:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c38f:	e8 f8 eb ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c394:	83 c4 14             	add    esp,0x14
c002c397:	53                   	push   ebx
c002c398:	e8 8d f6 fe ff       	call   c001ba2a <PhysicalDisk::startCache()>
c002c39d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c3a0:	e8 c9 08 ff ff       	call   c001cc6e <createPartitionsForDisk(PhysicalDisk*)>
c002c3a5:	83 c4 18             	add    esp,0x18
c002c3a8:	31 c0                	xor    eax,eax
c002c3aa:	5b                   	pop    ebx
c002c3ab:	c3                   	ret    

c002c3ac <combineCharAndColour(char, unsigned char)>:
c002c3ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c3b1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c3b7:	c1 e0 08             	shl    eax,0x8
c002c3ba:	09 d0                	or     eax,edx
c002c3bc:	c3                   	ret    

c002c3bd <combineColours(unsigned char, unsigned char)>:
c002c3bd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c3c2:	c1 e0 04             	shl    eax,0x4
c002c3c5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c3c9:	c3                   	ret    

c002c3ca <ATA::read(unsigned long long, int, void*)>:
c002c3ca:	55                   	push   ebp
c002c3cb:	57                   	push   edi
c002c3cc:	56                   	push   esi
c002c3cd:	be 04 00 00 00       	mov    esi,0x4
c002c3d2:	53                   	push   ebx
c002c3d3:	83 ec 0c             	sub    esp,0xc
c002c3d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c3da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c3de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c3e2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c3e6:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c3e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c3ef:	0f 87 a1 01 00 00    	ja     c002c596 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c3f5:	85 c9                	test   ecx,ecx
c002c3f7:	be 06 00 00 00       	mov    esi,0x6
c002c3fc:	0f 84 94 01 00 00    	je     c002c596 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c402:	55                   	push   ebp
c002c403:	55                   	push   ebp
c002c404:	6a 00                	push   0x0
c002c406:	51                   	push   ecx
c002c407:	53                   	push   ebx
c002c408:	52                   	push   edx
c002c409:	50                   	push   eax
c002c40a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c40e:	e8 df fa ff ff       	call   c002bef2 <ATA::access(unsigned long long, int, void*, bool)>
c002c413:	83 c4 20             	add    esp,0x20
c002c416:	85 c0                	test   eax,eax
c002c418:	89 c6                	mov    esi,eax
c002c41a:	0f 85 71 01 00 00    	jne    c002c591 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c420:	50                   	push   eax
c002c421:	bd 10 27 00 00       	mov    ebp,0x2710
c002c426:	50                   	push   eax
c002c427:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c42d:	6a 0f                	push   0xf
c002c42f:	6a 00                	push   0x0
c002c431:	89 da                	mov    edx,ebx
c002c433:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c439:	e8 7f ff ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002c43e:	59                   	pop    ecx
c002c43f:	b9 0a 00 00 00       	mov    ecx,0xa
c002c444:	5b                   	pop    ebx
c002c445:	0f b6 d8             	movzx  ebx,al
c002c448:	89 d0                	mov    eax,edx
c002c44a:	53                   	push   ebx
c002c44b:	99                   	cdq    
c002c44c:	f7 fd                	idiv   ebp
c002c44e:	99                   	cdq    
c002c44f:	f7 f9                	idiv   ecx
c002c451:	83 c2 30             	add    edx,0x30
c002c454:	0f b6 d2             	movzx  edx,dl
c002c457:	52                   	push   edx
c002c458:	e8 4f ff ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c45d:	5f                   	pop    edi
c002c45e:	bf e8 03 00 00       	mov    edi,0x3e8
c002c463:	5a                   	pop    edx
c002c464:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c46a:	53                   	push   ebx
c002c46b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c470:	99                   	cdq    
c002c471:	f7 ff                	idiv   edi
c002c473:	99                   	cdq    
c002c474:	f7 f9                	idiv   ecx
c002c476:	8d 42 30             	lea    eax,[edx+0x30]
c002c479:	0f b6 c0             	movzx  eax,al
c002c47c:	50                   	push   eax
c002c47d:	e8 2a ff ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c482:	5f                   	pop    edi
c002c483:	bf 64 00 00 00       	mov    edi,0x64
c002c488:	5a                   	pop    edx
c002c489:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c48f:	53                   	push   ebx
c002c490:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c495:	99                   	cdq    
c002c496:	f7 ff                	idiv   edi
c002c498:	99                   	cdq    
c002c499:	f7 f9                	idiv   ecx
c002c49b:	8d 42 30             	lea    eax,[edx+0x30]
c002c49e:	0f b6 c0             	movzx  eax,al
c002c4a1:	50                   	push   eax
c002c4a2:	e8 05 ff ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c4a7:	5a                   	pop    edx
c002c4a8:	5a                   	pop    edx
c002c4a9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c4af:	53                   	push   ebx
c002c4b0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c4b5:	99                   	cdq    
c002c4b6:	f7 f9                	idiv   ecx
c002c4b8:	99                   	cdq    
c002c4b9:	f7 f9                	idiv   ecx
c002c4bb:	8d 42 30             	lea    eax,[edx+0x30]
c002c4be:	0f b6 c0             	movzx  eax,al
c002c4c1:	50                   	push   eax
c002c4c2:	e8 e5 fe ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c4c7:	5a                   	pop    edx
c002c4c8:	5a                   	pop    edx
c002c4c9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c4cf:	53                   	push   ebx
c002c4d0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c4d5:	99                   	cdq    
c002c4d6:	f7 f9                	idiv   ecx
c002c4d8:	83 c2 30             	add    edx,0x30
c002c4db:	0f b6 d2             	movzx  edx,dl
c002c4de:	52                   	push   edx
c002c4df:	e8 c8 fe ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c4e4:	5a                   	pop    edx
c002c4e5:	5a                   	pop    edx
c002c4e6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c4ec:	53                   	push   ebx
c002c4ed:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c4f2:	99                   	cdq    
c002c4f3:	f7 fd                	idiv   ebp
c002c4f5:	99                   	cdq    
c002c4f6:	f7 f9                	idiv   ecx
c002c4f8:	8d 42 30             	lea    eax,[edx+0x30]
c002c4fb:	0f b6 c0             	movzx  eax,al
c002c4fe:	50                   	push   eax
c002c4ff:	e8 a8 fe ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c504:	5d                   	pop    ebp
c002c505:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c50a:	5a                   	pop    edx
c002c50b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c511:	53                   	push   ebx
c002c512:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c517:	99                   	cdq    
c002c518:	f7 fd                	idiv   ebp
c002c51a:	99                   	cdq    
c002c51b:	f7 f9                	idiv   ecx
c002c51d:	8d 42 30             	lea    eax,[edx+0x30]
c002c520:	0f b6 c0             	movzx  eax,al
c002c523:	50                   	push   eax
c002c524:	e8 83 fe ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c529:	5d                   	pop    ebp
c002c52a:	5a                   	pop    edx
c002c52b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c531:	53                   	push   ebx
c002c532:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c537:	99                   	cdq    
c002c538:	f7 ff                	idiv   edi
c002c53a:	99                   	cdq    
c002c53b:	f7 f9                	idiv   ecx
c002c53d:	8d 42 30             	lea    eax,[edx+0x30]
c002c540:	0f b6 c0             	movzx  eax,al
c002c543:	50                   	push   eax
c002c544:	e8 63 fe ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c549:	5f                   	pop    edi
c002c54a:	5d                   	pop    ebp
c002c54b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c551:	53                   	push   ebx
c002c552:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c557:	99                   	cdq    
c002c558:	f7 f9                	idiv   ecx
c002c55a:	99                   	cdq    
c002c55b:	f7 f9                	idiv   ecx
c002c55d:	8d 42 30             	lea    eax,[edx+0x30]
c002c560:	0f b6 c0             	movzx  eax,al
c002c563:	50                   	push   eax
c002c564:	e8 43 fe ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c569:	5a                   	pop    edx
c002c56a:	5f                   	pop    edi
c002c56b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c571:	53                   	push   ebx
c002c572:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c577:	99                   	cdq    
c002c578:	f7 f9                	idiv   ecx
c002c57a:	83 c2 30             	add    edx,0x30
c002c57d:	0f b6 d2             	movzx  edx,dl
c002c580:	52                   	push   edx
c002c581:	e8 26 fe ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c586:	83 c4 10             	add    esp,0x10
c002c589:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c58f:	eb 05                	jmp    c002c596 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c591:	be 01 00 00 00       	mov    esi,0x1
c002c596:	83 c4 0c             	add    esp,0xc
c002c599:	89 f0                	mov    eax,esi
c002c59b:	5b                   	pop    ebx
c002c59c:	5e                   	pop    esi
c002c59d:	5f                   	pop    edi
c002c59e:	5d                   	pop    ebp
c002c59f:	c3                   	ret    

c002c5a0 <ATA::write(unsigned long long, int, void*)>:
c002c5a0:	55                   	push   ebp
c002c5a1:	57                   	push   edi
c002c5a2:	56                   	push   esi
c002c5a3:	be 04 00 00 00       	mov    esi,0x4
c002c5a8:	53                   	push   ebx
c002c5a9:	83 ec 0c             	sub    esp,0xc
c002c5ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c5b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c5b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c5b8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c5bc:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c5bf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c5c5:	0f 87 9c 01 00 00    	ja     c002c767 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c5cb:	85 c9                	test   ecx,ecx
c002c5cd:	be 06 00 00 00       	mov    esi,0x6
c002c5d2:	0f 84 8f 01 00 00    	je     c002c767 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c5d8:	55                   	push   ebp
c002c5d9:	55                   	push   ebp
c002c5da:	6a 01                	push   0x1
c002c5dc:	51                   	push   ecx
c002c5dd:	53                   	push   ebx
c002c5de:	52                   	push   edx
c002c5df:	50                   	push   eax
c002c5e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c5e4:	e8 09 f9 ff ff       	call   c002bef2 <ATA::access(unsigned long long, int, void*, bool)>
c002c5e9:	83 c4 20             	add    esp,0x20
c002c5ec:	85 c0                	test   eax,eax
c002c5ee:	89 c6                	mov    esi,eax
c002c5f0:	0f 85 6c 01 00 00    	jne    c002c762 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c5f6:	50                   	push   eax
c002c5f7:	bd 10 27 00 00       	mov    ebp,0x2710
c002c5fc:	50                   	push   eax
c002c5fd:	6a 0f                	push   0xf
c002c5ff:	6a 00                	push   0x0
c002c601:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c607:	e8 b1 fd ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002c60c:	5a                   	pop    edx
c002c60d:	59                   	pop    ecx
c002c60e:	b9 0a 00 00 00       	mov    ecx,0xa
c002c613:	0f b6 d8             	movzx  ebx,al
c002c616:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c61b:	53                   	push   ebx
c002c61c:	99                   	cdq    
c002c61d:	f7 fd                	idiv   ebp
c002c61f:	99                   	cdq    
c002c620:	f7 f9                	idiv   ecx
c002c622:	8d 42 30             	lea    eax,[edx+0x30]
c002c625:	0f b6 c0             	movzx  eax,al
c002c628:	50                   	push   eax
c002c629:	e8 7e fd ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c62e:	5f                   	pop    edi
c002c62f:	bf e8 03 00 00       	mov    edi,0x3e8
c002c634:	5a                   	pop    edx
c002c635:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c63b:	53                   	push   ebx
c002c63c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c641:	99                   	cdq    
c002c642:	f7 ff                	idiv   edi
c002c644:	99                   	cdq    
c002c645:	f7 f9                	idiv   ecx
c002c647:	8d 42 30             	lea    eax,[edx+0x30]
c002c64a:	0f b6 c0             	movzx  eax,al
c002c64d:	50                   	push   eax
c002c64e:	e8 59 fd ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c653:	5f                   	pop    edi
c002c654:	bf 64 00 00 00       	mov    edi,0x64
c002c659:	5a                   	pop    edx
c002c65a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c660:	53                   	push   ebx
c002c661:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c666:	99                   	cdq    
c002c667:	f7 ff                	idiv   edi
c002c669:	99                   	cdq    
c002c66a:	f7 f9                	idiv   ecx
c002c66c:	8d 42 30             	lea    eax,[edx+0x30]
c002c66f:	0f b6 c0             	movzx  eax,al
c002c672:	50                   	push   eax
c002c673:	e8 34 fd ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c678:	5a                   	pop    edx
c002c679:	5a                   	pop    edx
c002c67a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c680:	53                   	push   ebx
c002c681:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c686:	99                   	cdq    
c002c687:	f7 f9                	idiv   ecx
c002c689:	99                   	cdq    
c002c68a:	f7 f9                	idiv   ecx
c002c68c:	8d 42 30             	lea    eax,[edx+0x30]
c002c68f:	0f b6 c0             	movzx  eax,al
c002c692:	50                   	push   eax
c002c693:	e8 14 fd ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c698:	5a                   	pop    edx
c002c699:	5a                   	pop    edx
c002c69a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c6a0:	53                   	push   ebx
c002c6a1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c6a6:	99                   	cdq    
c002c6a7:	f7 f9                	idiv   ecx
c002c6a9:	83 c2 30             	add    edx,0x30
c002c6ac:	0f b6 d2             	movzx  edx,dl
c002c6af:	52                   	push   edx
c002c6b0:	e8 f7 fc ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c6b5:	5a                   	pop    edx
c002c6b6:	5a                   	pop    edx
c002c6b7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c6bd:	53                   	push   ebx
c002c6be:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c6c3:	99                   	cdq    
c002c6c4:	f7 fd                	idiv   ebp
c002c6c6:	99                   	cdq    
c002c6c7:	f7 f9                	idiv   ecx
c002c6c9:	8d 42 30             	lea    eax,[edx+0x30]
c002c6cc:	0f b6 c0             	movzx  eax,al
c002c6cf:	50                   	push   eax
c002c6d0:	e8 d7 fc ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c6d5:	5d                   	pop    ebp
c002c6d6:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c6db:	5a                   	pop    edx
c002c6dc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c6e2:	53                   	push   ebx
c002c6e3:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c6e8:	99                   	cdq    
c002c6e9:	f7 fd                	idiv   ebp
c002c6eb:	99                   	cdq    
c002c6ec:	f7 f9                	idiv   ecx
c002c6ee:	8d 42 30             	lea    eax,[edx+0x30]
c002c6f1:	0f b6 c0             	movzx  eax,al
c002c6f4:	50                   	push   eax
c002c6f5:	e8 b2 fc ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c6fa:	5d                   	pop    ebp
c002c6fb:	5a                   	pop    edx
c002c6fc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c702:	53                   	push   ebx
c002c703:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c708:	99                   	cdq    
c002c709:	f7 ff                	idiv   edi
c002c70b:	99                   	cdq    
c002c70c:	f7 f9                	idiv   ecx
c002c70e:	8d 42 30             	lea    eax,[edx+0x30]
c002c711:	0f b6 c0             	movzx  eax,al
c002c714:	50                   	push   eax
c002c715:	e8 92 fc ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c71a:	5f                   	pop    edi
c002c71b:	5d                   	pop    ebp
c002c71c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c722:	53                   	push   ebx
c002c723:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c728:	99                   	cdq    
c002c729:	f7 f9                	idiv   ecx
c002c72b:	99                   	cdq    
c002c72c:	f7 f9                	idiv   ecx
c002c72e:	8d 42 30             	lea    eax,[edx+0x30]
c002c731:	0f b6 c0             	movzx  eax,al
c002c734:	50                   	push   eax
c002c735:	e8 72 fc ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c73a:	5a                   	pop    edx
c002c73b:	5f                   	pop    edi
c002c73c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c742:	53                   	push   ebx
c002c743:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c748:	99                   	cdq    
c002c749:	f7 f9                	idiv   ecx
c002c74b:	83 c2 30             	add    edx,0x30
c002c74e:	0f b6 d2             	movzx  edx,dl
c002c751:	52                   	push   edx
c002c752:	e8 55 fc ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002c757:	83 c4 10             	add    esp,0x10
c002c75a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c760:	eb 05                	jmp    c002c767 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c762:	be 01 00 00 00       	mov    esi,0x1
c002c767:	83 c4 0c             	add    esp,0xc
c002c76a:	89 f0                	mov    eax,esi
c002c76c:	5b                   	pop    ebx
c002c76d:	5e                   	pop    esi
c002c76e:	5f                   	pop    edi
c002c76f:	5d                   	pop    ebp
c002c770:	c3                   	ret    
c002c771:	90                   	nop

c002c772 <ATAPI::write(unsigned long long, int, void*)>:
c002c772:	b8 03 00 00 00       	mov    eax,0x3
c002c777:	c3                   	ret    

c002c778 <ATAPI::close(int, int, void*)>:
c002c778:	83 ec 0c             	sub    esp,0xc
c002c77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c77f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c785:	85 c0                	test   eax,eax
c002c787:	74 0c                	je     c002c795 <ATAPI::close(int, int, void*)+0x1d>
c002c789:	8b 10                	mov    edx,DWORD PTR [eax]
c002c78b:	83 ec 0c             	sub    esp,0xc
c002c78e:	50                   	push   eax
c002c78f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c792:	83 c4 10             	add    esp,0x10
c002c795:	31 c0                	xor    eax,eax
c002c797:	83 c4 0c             	add    esp,0xc
c002c79a:	c3                   	ret    
c002c79b:	90                   	nop

c002c79c <ATAPI::ATAPI()>:
c002c79c:	83 ec 0c             	sub    esp,0xc
c002c79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c7a3:	83 ec 04             	sub    esp,0x4
c002c7a6:	68 00 08 00 00       	push   0x800
c002c7ab:	68 25 3d 03 c0       	push   0xc0033d25
c002c7b0:	50                   	push   eax
c002c7b1:	e8 0c f2 fe ff       	call   c001b9c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c7b6:	83 c4 10             	add    esp,0x10
c002c7b9:	ba 34 3c 03 c0       	mov    edx,0xc0033c34
c002c7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c7c2:	89 10                	mov    DWORD PTR [eax],edx
c002c7c4:	90                   	nop
c002c7c5:	83 c4 0c             	add    esp,0xc
c002c7c8:	c3                   	ret    
c002c7c9:	90                   	nop

c002c7ca <ATAPI::readyForCommand()>:
c002c7ca:	56                   	push   esi
c002c7cb:	53                   	push   ebx
c002c7cc:	53                   	push   ebx
c002c7cd:	31 db                	xor    ebx,ebx
c002c7cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c7d3:	51                   	push   ecx
c002c7d4:	6a 0c                	push   0xc
c002c7d6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c7dd:	50                   	push   eax
c002c7de:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c7e4:	e8 63 e8 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002c7e9:	83 c4 10             	add    esp,0x10
c002c7ec:	a8 88                	test   al,0x88
c002c7ee:	74 25                	je     c002c815 <ATAPI::readyForCommand()+0x4b>
c002c7f0:	43                   	inc    ebx
c002c7f1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c7f7:	7e da                	jle    c002c7d3 <ATAPI::readyForCommand()+0x9>
c002c7f9:	83 ec 0c             	sub    esp,0xc
c002c7fc:	68 5e 01 00 00       	push   0x15e
c002c801:	e8 06 8f ff ff       	call   c002570c <milliTenthSleep(unsigned int)>
c002c806:	83 c4 10             	add    esp,0x10
c002c809:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c80f:	75 c2                	jne    c002c7d3 <ATAPI::readyForCommand()+0x9>
c002c811:	31 c0                	xor    eax,eax
c002c813:	eb 02                	jmp    c002c817 <ATAPI::readyForCommand()+0x4d>
c002c815:	b0 01                	mov    al,0x1
c002c817:	5a                   	pop    edx
c002c818:	5b                   	pop    ebx
c002c819:	5e                   	pop    esi
c002c81a:	c3                   	ret    
c002c81b:	90                   	nop

c002c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c81c:	55                   	push   ebp
c002c81d:	57                   	push   edi
c002c81e:	56                   	push   esi
c002c81f:	53                   	push   ebx
c002c820:	83 ec 20             	sub    esp,0x20
c002c823:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c827:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c82b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002c82f:	6a 01                	push   0x1
c002c831:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c838:	50                   	push   eax
c002c839:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c83f:	e8 56 e9 ff ff       	call   c002b19a <IDE::enableIRQs(unsigned char, bool)>
c002c844:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c84b:	59                   	pop    ecx
c002c84c:	5e                   	pop    esi
c002c84d:	50                   	push   eax
c002c84e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c854:	e8 0d e7 ff ff       	call   c002af66 <IDE::prepareInterrupt(unsigned char)>
c002c859:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c85c:	e8 69 ff ff ff       	call   c002c7ca <ATAPI::readyForCommand()>
c002c861:	83 c4 10             	add    esp,0x10
c002c864:	84 c0                	test   al,al
c002c866:	75 0a                	jne    c002c872 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002c868:	bb 01 00 00 00       	mov    ebx,0x1
c002c86d:	e9 5f 02 00 00       	jmp    c002cad1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c872:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c878:	c1 e0 04             	shl    eax,0x4
c002c87b:	0f b6 c0             	movzx  eax,al
c002c87e:	50                   	push   eax
c002c87f:	6a 06                	push   0x6
c002c881:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c888:	50                   	push   eax
c002c889:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c88f:	e8 f8 e6 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c894:	6a 00                	push   0x0
c002c896:	6a 01                	push   0x1
c002c898:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c89f:	50                   	push   eax
c002c8a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8a6:	e8 e1 e6 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8ab:	83 c4 20             	add    esp,0x20
c002c8ae:	0f b6 c3             	movzx  eax,bl
c002c8b1:	50                   	push   eax
c002c8b2:	0f b6 df             	movzx  ebx,bh
c002c8b5:	6a 04                	push   0x4
c002c8b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c8be:	50                   	push   eax
c002c8bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8c5:	e8 c2 e6 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8ca:	53                   	push   ebx
c002c8cb:	6a 05                	push   0x5
c002c8cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c8d4:	50                   	push   eax
c002c8d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8db:	e8 ac e6 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8e0:	83 c4 20             	add    esp,0x20
c002c8e3:	68 a0 00 00 00       	push   0xa0
c002c8e8:	6a 07                	push   0x7
c002c8ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c8f1:	50                   	push   eax
c002c8f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8f8:	e8 8f e6 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8fd:	83 c4 0c             	add    esp,0xc
c002c900:	6a 01                	push   0x1
c002c902:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c909:	50                   	push   eax
c002c90a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c910:	e8 5b f1 ff ff       	call   c002ba70 <IDE::polling(unsigned char, unsigned int)>
c002c915:	83 c4 10             	add    esp,0x10
c002c918:	0f b6 d8             	movzx  ebx,al
c002c91b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c921:	85 db                	test   ebx,ebx
c002c923:	74 20                	je     c002c945 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002c925:	53                   	push   ebx
c002c926:	0f b6 c0             	movzx  eax,al
c002c929:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c930:	52                   	push   edx
c002c931:	50                   	push   eax
c002c932:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c938:	e8 79 f0 ff ff       	call   c002b9b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c93d:	83 c4 10             	add    esp,0x10
c002c940:	e9 8c 01 00 00       	jmp    c002cad1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c945:	52                   	push   edx
c002c946:	0f b6 c0             	movzx  eax,al
c002c949:	52                   	push   edx
c002c94a:	50                   	push   eax
c002c94b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c951:	e8 24 e6 ff ff       	call   c002af7a <IDE::getBase(unsigned char)>
c002c956:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c95a:	b9 06 00 00 00       	mov    ecx,0x6
c002c95f:	89 c2                	mov    edx,eax
c002c961:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c964:	89 e8                	mov    eax,ebp
c002c966:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c96a:	83 c4 10             	add    esp,0x10
c002c96d:	0f b6 c0             	movzx  eax,al
c002c970:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002c974:	85 db                	test   ebx,ebx
c002c976:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c97c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c983:	0f 84 eb 00 00 00    	je     c002ca74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002c989:	55                   	push   ebp
c002c98a:	55                   	push   ebp
c002c98b:	52                   	push   edx
c002c98c:	50                   	push   eax
c002c98d:	e8 6e e7 ff ff       	call   c002b100 <IDE::waitInterrupt(unsigned char)>
c002c992:	83 c4 10             	add    esp,0x10
c002c995:	84 c0                	test   al,al
c002c997:	0f 84 cb fe ff ff    	je     c002c868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c99d:	56                   	push   esi
c002c99e:	56                   	push   esi
c002c99f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c9a6:	50                   	push   eax
c002c9a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c9ad:	e8 b4 e5 ff ff       	call   c002af66 <IDE::prepareInterrupt(unsigned char)>
c002c9b2:	83 c4 0c             	add    esp,0xc
c002c9b5:	6a 04                	push   0x4
c002c9b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c9be:	50                   	push   eax
c002c9bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c9c5:	e8 82 e6 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002c9ca:	83 c4 0c             	add    esp,0xc
c002c9cd:	6a 05                	push   0x5
c002c9cf:	89 c6                	mov    esi,eax
c002c9d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c9d8:	50                   	push   eax
c002c9d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c9df:	e8 68 e6 ff ff       	call   c002b04c <IDE::read(unsigned char, unsigned char)>
c002c9e4:	83 c4 10             	add    esp,0x10
c002c9e7:	0f b6 e8             	movzx  ebp,al
c002c9ea:	89 f0                	mov    eax,esi
c002c9ec:	c1 e5 08             	shl    ebp,0x8
c002c9ef:	0f b6 f0             	movzx  esi,al
c002c9f2:	09 f5                	or     ebp,esi
c002c9f4:	31 f6                	xor    esi,esi
c002c9f6:	d1 fd                	sar    ebp,1
c002c9f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002c9fd:	74 5c                	je     c002ca5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002c9ff:	39 ee                	cmp    esi,ebp
c002ca01:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002ca07:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002ca0e:	75 0d                	jne    c002ca1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002ca10:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002ca13:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002ca17:	4b                   	dec    ebx
c002ca18:	e9 57 ff ff ff       	jmp    c002c974 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002ca1d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002ca21:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002ca25:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002ca2a:	51                   	push   ecx
c002ca2b:	51                   	push   ecx
c002ca2c:	52                   	push   edx
c002ca2d:	50                   	push   eax
c002ca2e:	e8 47 e5 ff ff       	call   c002af7a <IDE::getBase(unsigned char)>
c002ca33:	89 c2                	mov    edx,eax
c002ca35:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002ca3a:	66 ef                	out    dx,ax
c002ca3c:	46                   	inc    esi
c002ca3d:	83 c4 10             	add    esp,0x10
c002ca40:	eb bd                	jmp    c002c9ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002ca42:	51                   	push   ecx
c002ca43:	51                   	push   ecx
c002ca44:	52                   	push   edx
c002ca45:	50                   	push   eax
c002ca46:	e8 2f e5 ff ff       	call   c002af7a <IDE::getBase(unsigned char)>
c002ca4b:	89 c2                	mov    edx,eax
c002ca4d:	66 ed                	in     ax,dx
c002ca4f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002ca53:	83 c4 10             	add    esp,0x10
c002ca56:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002ca5a:	46                   	inc    esi
c002ca5b:	39 ee                	cmp    esi,ebp
c002ca5d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002ca63:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002ca6a:	75 d6                	jne    c002ca42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002ca6c:	01 f6                	add    esi,esi
c002ca6e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002ca72:	eb a3                	jmp    c002ca17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002ca74:	51                   	push   ecx
c002ca75:	51                   	push   ecx
c002ca76:	52                   	push   edx
c002ca77:	50                   	push   eax
c002ca78:	e8 83 e6 ff ff       	call   c002b100 <IDE::waitInterrupt(unsigned char)>
c002ca7d:	83 c4 10             	add    esp,0x10
c002ca80:	84 c0                	test   al,al
c002ca82:	0f 84 e0 fd ff ff    	je     c002c868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002ca88:	52                   	push   edx
c002ca89:	bb a0 86 01 00       	mov    ebx,0x186a0
c002ca8e:	52                   	push   edx
c002ca8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ca96:	50                   	push   eax
c002ca97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ca9d:	e8 c4 e4 ff ff       	call   c002af66 <IDE::prepareInterrupt(unsigned char)>
c002caa2:	83 c4 10             	add    esp,0x10
c002caa5:	50                   	push   eax
c002caa6:	50                   	push   eax
c002caa7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002caae:	50                   	push   eax
c002caaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cab5:	e8 c0 e4 ff ff       	call   c002af7a <IDE::getBase(unsigned char)>
c002caba:	8d 50 07             	lea    edx,[eax+0x7]
c002cabd:	ec                   	in     al,dx
c002cabe:	83 c4 10             	add    esp,0x10
c002cac1:	a8 88                	test   al,0x88
c002cac3:	74 0a                	je     c002cacf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002cac5:	4b                   	dec    ebx
c002cac6:	75 dd                	jne    c002caa5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002cac8:	bb 02 00 00 00       	mov    ebx,0x2
c002cacd:	eb 02                	jmp    c002cad1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002cacf:	31 db                	xor    ebx,ebx
c002cad1:	83 c4 1c             	add    esp,0x1c
c002cad4:	89 d8                	mov    eax,ebx
c002cad6:	5b                   	pop    ebx
c002cad7:	5e                   	pop    esi
c002cad8:	5f                   	pop    edi
c002cad9:	5d                   	pop    ebp
c002cada:	c3                   	ret    
c002cadb:	90                   	nop

c002cadc <ATAPI::diskRemoved()>:
c002cadc:	53                   	push   ebx
c002cadd:	83 ec 14             	sub    esp,0x14
c002cae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002cae4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002caeb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002caf1:	e8 66 fe fe ff       	call   c001c95c <LogicalDisk::unmount()>
c002caf6:	58                   	pop    eax
c002caf7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002cafd:	e8 3a 08 ff ff       	call   c001d33c <VCache::writeWriteBuffer()>
c002cb02:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002cb08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cb0c:	83 c4 18             	add    esp,0x18
c002cb0f:	5b                   	pop    ebx
c002cb10:	e9 17 08 ff ff       	jmp    c001d32c <VCache::invalidateReadBuffer()>
c002cb15:	90                   	nop

c002cb16 <ATAPI::eject()>:
c002cb16:	57                   	push   edi
c002cb17:	b9 03 00 00 00       	mov    ecx,0x3
c002cb1c:	53                   	push   ebx
c002cb1d:	83 ec 14             	sub    esp,0x14
c002cb20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002cb24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cb28:	fc                   	cld    
c002cb29:	31 c0                	xor    eax,eax
c002cb2b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cb2d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002cb32:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002cb37:	50                   	push   eax
c002cb38:	50                   	push   eax
c002cb39:	6a 00                	push   0x0
c002cb3b:	6a 00                	push   0x0
c002cb3d:	6a 00                	push   0x0
c002cb3f:	6a 02                	push   0x2
c002cb41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cb45:	50                   	push   eax
c002cb46:	53                   	push   ebx
c002cb47:	e8 d0 fc ff ff       	call   c002c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cb4c:	83 c4 14             	add    esp,0x14
c002cb4f:	53                   	push   ebx
c002cb50:	e8 87 ff ff ff       	call   c002cadc <ATAPI::diskRemoved()>
c002cb55:	83 c4 24             	add    esp,0x24
c002cb58:	31 c0                	xor    eax,eax
c002cb5a:	5b                   	pop    ebx
c002cb5b:	5f                   	pop    edi
c002cb5c:	c3                   	ret    
c002cb5d:	90                   	nop

c002cb5e <ATAPI::diskInserted()>:
c002cb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002cb62:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002cb69:	c3                   	ret    

c002cb6a <ATAPI::detectMedia()>:
c002cb6a:	56                   	push   esi
c002cb6b:	53                   	push   ebx
c002cb6c:	83 ec 28             	sub    esp,0x28
c002cb6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002cb73:	6a 0c                	push   0xc
c002cb75:	6a 00                	push   0x0
c002cb77:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002cb7b:	56                   	push   esi
c002cb7c:	e8 6f 39 fd ff       	call   c00004f0 <memset>
c002cb81:	58                   	pop    eax
c002cb82:	5a                   	pop    edx
c002cb83:	6a 00                	push   0x0
c002cb85:	6a 00                	push   0x0
c002cb87:	6a 00                	push   0x0
c002cb89:	6a 00                	push   0x0
c002cb8b:	56                   	push   esi
c002cb8c:	53                   	push   ebx
c002cb8d:	e8 8a fc ff ff       	call   c002c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cb92:	83 c4 1c             	add    esp,0x1c
c002cb95:	6a 0c                	push   0xc
c002cb97:	6a 00                	push   0x0
c002cb99:	56                   	push   esi
c002cb9a:	e8 51 39 fd ff       	call   c00004f0 <memset>
c002cb9f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002cba4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002cba9:	59                   	pop    ecx
c002cbaa:	58                   	pop    eax
c002cbab:	6a 01                	push   0x1
c002cbad:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002cbb1:	50                   	push   eax
c002cbb2:	6a 00                	push   0x0
c002cbb4:	6a 12                	push   0x12
c002cbb6:	56                   	push   esi
c002cbb7:	53                   	push   ebx
c002cbb8:	e8 5f fc ff ff       	call   c002c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cbbd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002cbc1:	83 c4 20             	add    esp,0x20
c002cbc4:	83 e0 7f             	and    eax,0x7f
c002cbc7:	83 f8 70             	cmp    eax,0x70
c002cbca:	74 15                	je     c002cbe1 <ATAPI::detectMedia()+0x77>
c002cbcc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cbd3:	75 0c                	jne    c002cbe1 <ATAPI::detectMedia()+0x77>
c002cbd5:	83 ec 0c             	sub    esp,0xc
c002cbd8:	53                   	push   ebx
c002cbd9:	e8 80 ff ff ff       	call   c002cb5e <ATAPI::diskInserted()>
c002cbde:	83 c4 10             	add    esp,0x10
c002cbe1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002cbe5:	83 e0 0f             	and    eax,0xf
c002cbe8:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002cbed:	0f b6 c0             	movzx  eax,al
c002cbf0:	75 19                	jne    c002cc0b <ATAPI::detectMedia()+0xa1>
c002cbf2:	83 f8 02             	cmp    eax,0x2
c002cbf5:	75 14                	jne    c002cc0b <ATAPI::detectMedia()+0xa1>
c002cbf7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cbfe:	74 24                	je     c002cc24 <ATAPI::detectMedia()+0xba>
c002cc00:	83 ec 0c             	sub    esp,0xc
c002cc03:	53                   	push   ebx
c002cc04:	e8 d3 fe ff ff       	call   c002cadc <ATAPI::diskRemoved()>
c002cc09:	eb 16                	jmp    c002cc21 <ATAPI::detectMedia()+0xb7>
c002cc0b:	85 c0                	test   eax,eax
c002cc0d:	75 15                	jne    c002cc24 <ATAPI::detectMedia()+0xba>
c002cc0f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cc16:	75 0c                	jne    c002cc24 <ATAPI::detectMedia()+0xba>
c002cc18:	83 ec 0c             	sub    esp,0xc
c002cc1b:	53                   	push   ebx
c002cc1c:	e8 3d ff ff ff       	call   c002cb5e <ATAPI::diskInserted()>
c002cc21:	83 c4 10             	add    esp,0x10
c002cc24:	83 c4 24             	add    esp,0x24
c002cc27:	5b                   	pop    ebx
c002cc28:	5e                   	pop    esi
c002cc29:	c3                   	ret    

c002cc2a <ATAPI::open(int, int, void*)>:
c002cc2a:	56                   	push   esi
c002cc2b:	53                   	push   ebx
c002cc2c:	50                   	push   eax
c002cc2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002cc31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cc35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cc39:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cc3f:	c1 e0 06             	shl    eax,0x6
c002cc42:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002cc48:	01 d0                	add    eax,edx
c002cc4a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002cc51:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002cc57:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002cc5e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002cc68:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002cc6f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cc75:	6a 04                	push   0x4
c002cc77:	6a 0c                	push   0xc
c002cc79:	51                   	push   ecx
c002cc7a:	52                   	push   edx
c002cc7b:	e8 0c e3 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc80:	90                   	nop
c002cc81:	90                   	nop
c002cc82:	6a 00                	push   0x0
c002cc84:	6a 0c                	push   0xc
c002cc86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002cc8d:	50                   	push   eax
c002cc8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002cc94:	e8 f3 e2 ff ff       	call   c002af8c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc99:	83 c4 14             	add    esp,0x14
c002cc9c:	68 78 01 00 00       	push   0x178
c002cca1:	e8 6e 9a fe ff       	call   c0016714 <malloc>
c002cca6:	83 c4 0c             	add    esp,0xc
c002cca9:	6a 00                	push   0x0
c002ccab:	68 ff ff ff 7f       	push   0x7fffffff
c002ccb0:	6a 00                	push   0x0
c002ccb2:	6a 00                	push   0x0
c002ccb4:	53                   	push   ebx
c002ccb5:	68 d7 3d 03 c0       	push   0xc0033dd7
c002ccba:	89 c6                	mov    esi,eax
c002ccbc:	50                   	push   eax
c002ccbd:	e8 d8 fa fe ff       	call   c001c79a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002ccc2:	83 c4 14             	add    esp,0x14
c002ccc5:	56                   	push   esi
c002ccc6:	e8 8f fb fe ff       	call   c001c85a <LogicalDisk::assignDriveLetter()>
c002cccb:	5a                   	pop    edx
c002cccc:	59                   	pop    ecx
c002cccd:	0f be c0             	movsx  eax,al
c002ccd0:	50                   	push   eax
c002ccd1:	68 1c 3c 03 c0       	push   0xc0033c1c
c002ccd6:	e8 6f c8 fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002ccdb:	58                   	pop    eax
c002ccdc:	5a                   	pop    edx
c002ccdd:	56                   	push   esi
c002ccde:	53                   	push   ebx
c002ccdf:	e8 fc e8 fe ff       	call   c001b5e0 <Device::addChild(Device*)>
c002cce4:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002ccea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cced:	e8 38 ed fe ff       	call   c001ba2a <PhysicalDisk::startCache()>
c002ccf2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ccf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ccfc:	e8 69 fe ff ff       	call   c002cb6a <ATAPI::detectMedia()>
c002cd01:	83 c4 14             	add    esp,0x14
c002cd04:	31 c0                	xor    eax,eax
c002cd06:	5b                   	pop    ebx
c002cd07:	5e                   	pop    esi
c002cd08:	c3                   	ret    
c002cd09:	90                   	nop

c002cd0a <ATAPI::read(unsigned long long, int, void*)>:
c002cd0a:	55                   	push   ebp
c002cd0b:	57                   	push   edi
c002cd0c:	56                   	push   esi
c002cd0d:	53                   	push   ebx
c002cd0e:	83 ec 1c             	sub    esp,0x1c
c002cd11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cd15:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002cd19:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cd1d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cd24:	74 3c                	je     c002cd62 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002cd26:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cd2a:	b9 03 00 00 00       	mov    ecx,0x3
c002cd2f:	fc                   	cld    
c002cd30:	31 c0                	xor    eax,eax
c002cd32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cd34:	89 e8                	mov    eax,ebp
c002cd36:	0f ce                	bswap  esi
c002cd38:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002cd3c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002cd41:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002cd45:	50                   	push   eax
c002cd46:	50                   	push   eax
c002cd47:	55                   	push   ebp
c002cd48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cd4c:	c1 e5 0b             	shl    ebp,0xb
c002cd4f:	6a 00                	push   0x0
c002cd51:	55                   	push   ebp
c002cd52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cd56:	50                   	push   eax
c002cd57:	53                   	push   ebx
c002cd58:	e8 bf fa ff ff       	call   c002c81c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cd5d:	83 c4 20             	add    esp,0x20
c002cd60:	eb 1a                	jmp    c002cd7c <ATAPI::read(unsigned long long, int, void*)+0x72>
c002cd62:	83 ec 0c             	sub    esp,0xc
c002cd65:	53                   	push   ebx
c002cd66:	e8 ff fd ff ff       	call   c002cb6a <ATAPI::detectMedia()>
c002cd6b:	83 c4 10             	add    esp,0x10
c002cd6e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cd75:	75 af                	jne    c002cd26 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002cd77:	b8 02 00 00 00       	mov    eax,0x2
c002cd7c:	83 c4 1c             	add    esp,0x1c
c002cd7f:	5b                   	pop    ebx
c002cd80:	5e                   	pop    esi
c002cd81:	5f                   	pop    edi
c002cd82:	5d                   	pop    ebp
c002cd83:	c3                   	ret    

c002cd84 <SATA::close(int, int, void*)>:
c002cd84:	83 ec 0c             	sub    esp,0xc
c002cd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cd8b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cd91:	85 c0                	test   eax,eax
c002cd93:	74 0c                	je     c002cda1 <SATA::close(int, int, void*)+0x1d>
c002cd95:	8b 10                	mov    edx,DWORD PTR [eax]
c002cd97:	83 ec 0c             	sub    esp,0xc
c002cd9a:	50                   	push   eax
c002cd9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cd9e:	83 c4 10             	add    esp,0x10
c002cda1:	31 c0                	xor    eax,eax
c002cda3:	83 c4 0c             	add    esp,0xc
c002cda6:	c3                   	ret    
c002cda7:	90                   	nop

c002cda8 <SATA::powerSaving(PowerSavingLevel)>:
c002cda8:	c3                   	ret    
c002cda9:	90                   	nop

c002cdaa <SATA::open(int, int, void*)>:
c002cdaa:	56                   	push   esi
c002cdab:	53                   	push   ebx
c002cdac:	83 ec 10             	sub    esp,0x10
c002cdaf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002cdb3:	68 64 3c 03 c0       	push   0xc0033c64
c002cdb8:	e8 8d c7 fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002cdbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cdc1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cdcb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002cdd5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002cddb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cddf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cde9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cdf0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cdf6:	e8 28 9c fe ff       	call   c0016a23 <Phys::allocatePage()>
c002cdfb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002ce01:	89 c6                	mov    esi,eax
c002ce03:	e8 1b 9c fe ff       	call   c0016a23 <Phys::allocatePage()>
c002ce08:	81 c6 00 10 00 00    	add    esi,0x1000
c002ce0e:	83 c4 10             	add    esp,0x10
c002ce11:	39 c6                	cmp    esi,eax
c002ce13:	74 10                	je     c002ce25 <SATA::open(int, int, void*)+0x7b>
c002ce15:	83 ec 0c             	sub    esp,0xc
c002ce18:	68 70 3c 03 c0       	push   0xc0033c70
c002ce1d:	e8 b0 36 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ce22:	83 c4 10             	add    esp,0x10
c002ce25:	83 ec 0c             	sub    esp,0xc
c002ce28:	6a 02                	push   0x2
c002ce2a:	e8 06 b4 fe ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c002ce2f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002ce35:	6a 03                	push   0x3
c002ce37:	50                   	push   eax
c002ce38:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002ce3e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002ce44:	e8 f5 ba fe ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c002ce49:	83 c4 14             	add    esp,0x14
c002ce4c:	53                   	push   ebx
c002ce4d:	e8 d8 eb fe ff       	call   c001ba2a <PhysicalDisk::startCache()>
c002ce52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ce55:	e8 14 fe fe ff       	call   c001cc6e <createPartitionsForDisk(PhysicalDisk*)>
c002ce5a:	83 c4 14             	add    esp,0x14
c002ce5d:	31 c0                	xor    eax,eax
c002ce5f:	5b                   	pop    ebx
c002ce60:	5e                   	pop    esi
c002ce61:	c3                   	ret    

c002ce62 <SATA::SATA()>:
c002ce62:	83 ec 0c             	sub    esp,0xc
c002ce65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ce69:	83 ec 04             	sub    esp,0x4
c002ce6c:	68 00 02 00 00       	push   0x200
c002ce71:	68 84 3c 03 c0       	push   0xc0033c84
c002ce76:	50                   	push   eax
c002ce77:	e8 46 eb fe ff       	call   c001b9c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002ce7c:	83 c4 10             	add    esp,0x10
c002ce7f:	ba f4 3c 03 c0       	mov    edx,0xc0033cf4
c002ce84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ce88:	89 10                	mov    DWORD PTR [eax],edx
c002ce8a:	90                   	nop
c002ce8b:	83 c4 0c             	add    esp,0xc
c002ce8e:	c3                   	ret    
c002ce8f:	90                   	nop

c002ce90 <SATA::access(unsigned long long, int, void*, bool)>:
c002ce90:	55                   	push   ebp
c002ce91:	57                   	push   edi
c002ce92:	56                   	push   esi
c002ce93:	53                   	push   ebx
c002ce94:	83 ec 2c             	sub    esp,0x2c
c002ce97:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002ce9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002ce9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cea3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cea7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002ceab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002ceaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ceb3:	fa                   	cli    
c002ceb4:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002ceba:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cebf:	7e 10                	jle    c002ced1 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002cec1:	83 ec 0c             	sub    esp,0xc
c002cec4:	68 94 3c 03 c0       	push   0xc0033c94
c002cec9:	e8 04 36 ff ff       	call   c00204d2 <KePanic(char const*)>
c002cece:	83 c4 10             	add    esp,0x10
c002ced1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002ced7:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002cedd:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002cee3:	89 e8                	mov    eax,ebp
c002cee5:	c1 e0 07             	shl    eax,0x7
c002cee8:	01 d0                	add    eax,edx
c002ceea:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cef4:	8d 45 02             	lea    eax,[ebp+0x2]
c002cef7:	51                   	push   ecx
c002cef8:	c1 e0 07             	shl    eax,0x7
c002cefb:	51                   	push   ecx
c002cefc:	01 d0                	add    eax,edx
c002cefe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002cf02:	50                   	push   eax
c002cf03:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cf09:	e8 42 ec ff ff       	call   c002bb50 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cf0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002cf12:	83 c4 10             	add    esp,0x10
c002cf15:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002cf1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002cf1e:	0f 84 ac 01 00 00    	je     c002d0d0 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002cf24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cf28:	c1 e0 09             	shl    eax,0x9
c002cf2b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002cf34:	74 0e                	je     c002cf44 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002cf36:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cf3c:	89 c1                	mov    ecx,eax
c002cf3e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cf42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cf44:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cf48:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cf4e:	8d 45 02             	lea    eax,[ebp+0x2]
c002cf51:	c1 e0 07             	shl    eax,0x7
c002cf54:	01 d0                	add    eax,edx
c002cf56:	8b 00                	mov    eax,DWORD PTR [eax]
c002cf58:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cf5e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cf64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cf68:	c1 e1 05             	shl    ecx,0x5
c002cf6b:	01 c8                	add    eax,ecx
c002cf6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002cf71:	83 e1 01             	and    ecx,0x1
c002cf74:	89 ce                	mov    esi,ecx
c002cf76:	8a 08                	mov    cl,BYTE PTR [eax]
c002cf78:	c1 e6 06             	shl    esi,0x6
c002cf7b:	83 e1 bf             	and    ecx,0xffffffbf
c002cf7e:	09 f1                	or     ecx,esi
c002cf80:	88 08                	mov    BYTE PTR [eax],cl
c002cf82:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cf84:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cf8a:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cf90:	89 08                	mov    DWORD PTR [eax],ecx
c002cf92:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cf98:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cf9e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cfa4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cfa7:	50                   	push   eax
c002cfa8:	68 90 00 00 00       	push   0x90
c002cfad:	6a 00                	push   0x0
c002cfaf:	56                   	push   esi
c002cfb0:	e8 3b 35 fd ff       	call   c00004f0 <memset>
c002cfb5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cfbb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cfc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002cfc5:	83 c4 10             	add    esp,0x10
c002cfc8:	48                   	dec    eax
c002cfc9:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cfce:	89 c1                	mov    ecx,eax
c002cfd0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cfd6:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cfdb:	09 c8                	or     eax,ecx
c002cfdd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cfe3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cfe9:	83 c8 80             	or     eax,0xffffff80
c002cfec:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cff2:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cff5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cff9:	25 00 7f 00 00       	and    eax,0x7f00
c002cffe:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d003:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d008:	66 89 06             	mov    WORD PTR [esi],ax
c002d00b:	b0 35                	mov    al,0x35
c002d00d:	75 02                	jne    c002d011 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002d00f:	b0 25                	mov    al,0x25
c002d011:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002d014:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d018:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002d01c:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002d020:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d024:	c1 e8 10             	shr    eax,0x10
c002d027:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002d02a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d02e:	c1 e8 18             	shr    eax,0x18
c002d031:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002d034:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002d038:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002d03b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d03f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002d042:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d046:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002d04a:	89 ee                	mov    esi,ebp
c002d04c:	31 c0                	xor    eax,eax
c002d04e:	c1 e6 07             	shl    esi,0x7
c002d051:	01 d6                	add    esi,edx
c002d053:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002d059:	80 e1 88             	and    cl,0x88
c002d05c:	74 0a                	je     c002d068 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002d05e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d063:	74 0a                	je     c002d06f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002d065:	40                   	inc    eax
c002d066:	eb eb                	jmp    c002d053 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002d068:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d06d:	75 0a                	jne    c002d079 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002d06f:	83 ec 0c             	sub    esp,0xc
c002d072:	68 cd 3c 03 c0       	push   0xc0033ccd
c002d077:	eb 34                	jmp    c002d0ad <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002d079:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002d07d:	c1 e5 07             	shl    ebp,0x7
c002d080:	b8 01 00 00 00       	mov    eax,0x1
c002d085:	01 ea                	add    edx,ebp
c002d087:	d3 e0                	shl    eax,cl
c002d089:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002d08f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002d095:	85 c8                	test   eax,ecx
c002d097:	74 2b                	je     c002d0c4 <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002d099:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002d09f:	0f ba e1 1e          	bt     ecx,0x1e
c002d0a3:	73 ea                	jae    c002d08f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002d0a5:	83 ec 0c             	sub    esp,0xc
c002d0a8:	68 db 3c 03 c0       	push   0xc0033cdb
c002d0ad:	e8 98 c4 fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002d0b2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d0b7:	83 c4 10             	add    esp,0x10
c002d0ba:	48                   	dec    eax
c002d0bb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d0c0:	85 c0                	test   eax,eax
c002d0c2:	eb 17                	jmp    c002d0db <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002d0c4:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002d0ca:	0f ba e0 1e          	bt     eax,0x1e
c002d0ce:	73 15                	jae    c002d0e5 <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002d0d0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d0d5:	48                   	dec    eax
c002d0d6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d0db:	75 01                	jne    c002d0de <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002d0dd:	fb                   	sti    
c002d0de:	b8 01 00 00 00       	mov    eax,0x1
c002d0e3:	eb 29                	jmp    c002d10e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d0e5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d0ea:	75 10                	jne    c002d0fc <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002d0ec:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002d0f2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002d0f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d0fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d0fc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d101:	48                   	dec    eax
c002d102:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d107:	75 03                	jne    c002d10c <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002d109:	fb                   	sti    
c002d10a:	eb 02                	jmp    c002d10e <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d10c:	31 c0                	xor    eax,eax
c002d10e:	83 c4 2c             	add    esp,0x2c
c002d111:	5b                   	pop    ebx
c002d112:	5e                   	pop    esi
c002d113:	5f                   	pop    edi
c002d114:	5d                   	pop    ebp
c002d115:	c3                   	ret    

c002d116 <SATA::read(unsigned long long, int, void*)>:
c002d116:	55                   	push   ebp
c002d117:	57                   	push   edi
c002d118:	56                   	push   esi
c002d119:	be 04 00 00 00       	mov    esi,0x4
c002d11e:	53                   	push   ebx
c002d11f:	83 ec 0c             	sub    esp,0xc
c002d122:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d126:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d12a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d12e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d132:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d135:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d13b:	0f 87 1a 02 00 00    	ja     c002d35b <SATA::read(unsigned long long, int, void*)+0x245>
c002d141:	85 c9                	test   ecx,ecx
c002d143:	be 06 00 00 00       	mov    esi,0x6
c002d148:	0f 84 0d 02 00 00    	je     c002d35b <SATA::read(unsigned long long, int, void*)+0x245>
c002d14e:	56                   	push   esi
c002d14f:	56                   	push   esi
c002d150:	6a 00                	push   0x0
c002d152:	51                   	push   ecx
c002d153:	53                   	push   ebx
c002d154:	52                   	push   edx
c002d155:	50                   	push   eax
c002d156:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d15a:	e8 31 fd ff ff       	call   c002ce90 <SATA::access(unsigned long long, int, void*, bool)>
c002d15f:	83 c4 20             	add    esp,0x20
c002d162:	85 c0                	test   eax,eax
c002d164:	89 c6                	mov    esi,eax
c002d166:	0f 85 ea 01 00 00    	jne    c002d356 <SATA::read(unsigned long long, int, void*)+0x240>
c002d16c:	50                   	push   eax
c002d16d:	50                   	push   eax
c002d16e:	6a 0f                	push   0xf
c002d170:	6a 00                	push   0x0
c002d172:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002d178:	bb 0a 00 00 00       	mov    ebx,0xa
c002d17d:	e8 3b f2 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d182:	5a                   	pop    edx
c002d183:	59                   	pop    ecx
c002d184:	b9 10 27 00 00       	mov    ecx,0x2710
c002d189:	0f b6 c0             	movzx  eax,al
c002d18c:	50                   	push   eax
c002d18d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d192:	99                   	cdq    
c002d193:	f7 f9                	idiv   ecx
c002d195:	99                   	cdq    
c002d196:	f7 fb                	idiv   ebx
c002d198:	8d 42 30             	lea    eax,[edx+0x30]
c002d19b:	0f b6 c0             	movzx  eax,al
c002d19e:	50                   	push   eax
c002d19f:	e8 08 f2 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d1a4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d1aa:	5f                   	pop    edi
c002d1ab:	5d                   	pop    ebp
c002d1ac:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d1b1:	6a 0f                	push   0xf
c002d1b3:	6a 00                	push   0x0
c002d1b5:	e8 03 f2 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d1ba:	5a                   	pop    edx
c002d1bb:	59                   	pop    ecx
c002d1bc:	0f b6 c0             	movzx  eax,al
c002d1bf:	50                   	push   eax
c002d1c0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1c5:	99                   	cdq    
c002d1c6:	f7 fd                	idiv   ebp
c002d1c8:	99                   	cdq    
c002d1c9:	f7 fb                	idiv   ebx
c002d1cb:	8d 42 30             	lea    eax,[edx+0x30]
c002d1ce:	0f b6 c0             	movzx  eax,al
c002d1d1:	50                   	push   eax
c002d1d2:	e8 d5 f1 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d1d7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d1dd:	5f                   	pop    edi
c002d1de:	bf 64 00 00 00       	mov    edi,0x64
c002d1e3:	58                   	pop    eax
c002d1e4:	6a 0f                	push   0xf
c002d1e6:	6a 00                	push   0x0
c002d1e8:	e8 d0 f1 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d1ed:	5a                   	pop    edx
c002d1ee:	59                   	pop    ecx
c002d1ef:	0f b6 c0             	movzx  eax,al
c002d1f2:	50                   	push   eax
c002d1f3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1f8:	99                   	cdq    
c002d1f9:	f7 ff                	idiv   edi
c002d1fb:	99                   	cdq    
c002d1fc:	f7 fb                	idiv   ebx
c002d1fe:	8d 42 30             	lea    eax,[edx+0x30]
c002d201:	0f b6 c0             	movzx  eax,al
c002d204:	50                   	push   eax
c002d205:	e8 a2 f1 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d20a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d210:	58                   	pop    eax
c002d211:	5a                   	pop    edx
c002d212:	6a 0f                	push   0xf
c002d214:	6a 00                	push   0x0
c002d216:	e8 a2 f1 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d21b:	59                   	pop    ecx
c002d21c:	5a                   	pop    edx
c002d21d:	0f b6 c0             	movzx  eax,al
c002d220:	50                   	push   eax
c002d221:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d226:	99                   	cdq    
c002d227:	f7 fb                	idiv   ebx
c002d229:	99                   	cdq    
c002d22a:	f7 fb                	idiv   ebx
c002d22c:	8d 42 30             	lea    eax,[edx+0x30]
c002d22f:	0f b6 c0             	movzx  eax,al
c002d232:	50                   	push   eax
c002d233:	e8 74 f1 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d238:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d23e:	59                   	pop    ecx
c002d23f:	58                   	pop    eax
c002d240:	6a 0f                	push   0xf
c002d242:	6a 00                	push   0x0
c002d244:	e8 74 f1 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d249:	5a                   	pop    edx
c002d24a:	59                   	pop    ecx
c002d24b:	0f b6 c0             	movzx  eax,al
c002d24e:	50                   	push   eax
c002d24f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d254:	99                   	cdq    
c002d255:	f7 fb                	idiv   ebx
c002d257:	83 c2 30             	add    edx,0x30
c002d25a:	0f b6 d2             	movzx  edx,dl
c002d25d:	52                   	push   edx
c002d25e:	e8 49 f1 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d263:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d269:	58                   	pop    eax
c002d26a:	5a                   	pop    edx
c002d26b:	6a 0f                	push   0xf
c002d26d:	6a 00                	push   0x0
c002d26f:	e8 49 f1 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d274:	59                   	pop    ecx
c002d275:	b9 10 27 00 00       	mov    ecx,0x2710
c002d27a:	5a                   	pop    edx
c002d27b:	0f b6 c0             	movzx  eax,al
c002d27e:	50                   	push   eax
c002d27f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d284:	99                   	cdq    
c002d285:	f7 f9                	idiv   ecx
c002d287:	99                   	cdq    
c002d288:	f7 fb                	idiv   ebx
c002d28a:	8d 42 30             	lea    eax,[edx+0x30]
c002d28d:	0f b6 c0             	movzx  eax,al
c002d290:	50                   	push   eax
c002d291:	e8 16 f1 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d296:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d29c:	59                   	pop    ecx
c002d29d:	58                   	pop    eax
c002d29e:	6a 0f                	push   0xf
c002d2a0:	6a 00                	push   0x0
c002d2a2:	e8 16 f1 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d2a7:	5a                   	pop    edx
c002d2a8:	59                   	pop    ecx
c002d2a9:	0f b6 c0             	movzx  eax,al
c002d2ac:	50                   	push   eax
c002d2ad:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2b2:	99                   	cdq    
c002d2b3:	f7 fd                	idiv   ebp
c002d2b5:	99                   	cdq    
c002d2b6:	f7 fb                	idiv   ebx
c002d2b8:	8d 42 30             	lea    eax,[edx+0x30]
c002d2bb:	0f b6 c0             	movzx  eax,al
c002d2be:	50                   	push   eax
c002d2bf:	e8 e8 f0 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d2c4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d2ca:	5d                   	pop    ebp
c002d2cb:	58                   	pop    eax
c002d2cc:	6a 0f                	push   0xf
c002d2ce:	6a 00                	push   0x0
c002d2d0:	e8 e8 f0 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d2d5:	5a                   	pop    edx
c002d2d6:	59                   	pop    ecx
c002d2d7:	0f b6 c0             	movzx  eax,al
c002d2da:	50                   	push   eax
c002d2db:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2e0:	99                   	cdq    
c002d2e1:	f7 ff                	idiv   edi
c002d2e3:	99                   	cdq    
c002d2e4:	f7 fb                	idiv   ebx
c002d2e6:	8d 42 30             	lea    eax,[edx+0x30]
c002d2e9:	0f b6 c0             	movzx  eax,al
c002d2ec:	50                   	push   eax
c002d2ed:	e8 ba f0 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d2f2:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d2f8:	5f                   	pop    edi
c002d2f9:	5d                   	pop    ebp
c002d2fa:	6a 0f                	push   0xf
c002d2fc:	6a 00                	push   0x0
c002d2fe:	e8 ba f0 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d303:	5a                   	pop    edx
c002d304:	59                   	pop    ecx
c002d305:	0f b6 c0             	movzx  eax,al
c002d308:	50                   	push   eax
c002d309:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d30e:	99                   	cdq    
c002d30f:	f7 fb                	idiv   ebx
c002d311:	99                   	cdq    
c002d312:	f7 fb                	idiv   ebx
c002d314:	8d 42 30             	lea    eax,[edx+0x30]
c002d317:	0f b6 c0             	movzx  eax,al
c002d31a:	50                   	push   eax
c002d31b:	e8 8c f0 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d320:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d326:	5f                   	pop    edi
c002d327:	5d                   	pop    ebp
c002d328:	6a 0f                	push   0xf
c002d32a:	6a 00                	push   0x0
c002d32c:	e8 8c f0 ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d331:	5a                   	pop    edx
c002d332:	59                   	pop    ecx
c002d333:	0f b6 c0             	movzx  eax,al
c002d336:	50                   	push   eax
c002d337:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d33c:	99                   	cdq    
c002d33d:	f7 fb                	idiv   ebx
c002d33f:	83 c2 30             	add    edx,0x30
c002d342:	0f b6 d2             	movzx  edx,dl
c002d345:	52                   	push   edx
c002d346:	e8 61 f0 ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d34b:	83 c4 10             	add    esp,0x10
c002d34e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d354:	eb 05                	jmp    c002d35b <SATA::read(unsigned long long, int, void*)+0x245>
c002d356:	be 01 00 00 00       	mov    esi,0x1
c002d35b:	83 c4 0c             	add    esp,0xc
c002d35e:	89 f0                	mov    eax,esi
c002d360:	5b                   	pop    ebx
c002d361:	5e                   	pop    esi
c002d362:	5f                   	pop    edi
c002d363:	5d                   	pop    ebp
c002d364:	c3                   	ret    
c002d365:	90                   	nop

c002d366 <SATA::write(unsigned long long, int, void*)>:
c002d366:	55                   	push   ebp
c002d367:	57                   	push   edi
c002d368:	56                   	push   esi
c002d369:	53                   	push   ebx
c002d36a:	83 ec 0c             	sub    esp,0xc
c002d36d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d371:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002d375:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d379:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d37d:	8d 70 ff             	lea    esi,[eax-0x1]
c002d380:	b8 04 00 00 00       	mov    eax,0x4
c002d385:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d38b:	0f 87 2c 02 00 00    	ja     c002d5bd <SATA::write(unsigned long long, int, void*)+0x257>
c002d391:	85 db                	test   ebx,ebx
c002d393:	b8 06 00 00 00       	mov    eax,0x6
c002d398:	0f 84 1f 02 00 00    	je     c002d5bd <SATA::write(unsigned long long, int, void*)+0x257>
c002d39e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002d3a2:	c1 e6 09             	shl    esi,0x9
c002d3a5:	01 de                	add    esi,ebx
c002d3a7:	50                   	push   eax
c002d3a8:	89 d7                	mov    edi,edx
c002d3aa:	50                   	push   eax
c002d3ab:	83 c7 01             	add    edi,0x1
c002d3ae:	6a 01                	push   0x1
c002d3b0:	89 cd                	mov    ebp,ecx
c002d3b2:	53                   	push   ebx
c002d3b3:	83 d5 00             	adc    ebp,0x0
c002d3b6:	6a 01                	push   0x1
c002d3b8:	81 c3 00 02 00 00    	add    ebx,0x200
c002d3be:	51                   	push   ecx
c002d3bf:	52                   	push   edx
c002d3c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d3c4:	e8 c7 fa ff ff       	call   c002ce90 <SATA::access(unsigned long long, int, void*, bool)>
c002d3c9:	83 c4 20             	add    esp,0x20
c002d3cc:	39 f3                	cmp    ebx,esi
c002d3ce:	89 fa                	mov    edx,edi
c002d3d0:	89 e9                	mov    ecx,ebp
c002d3d2:	75 d3                	jne    c002d3a7 <SATA::write(unsigned long long, int, void*)+0x41>
c002d3d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d3d8:	bd 10 27 00 00       	mov    ebp,0x2710
c002d3dd:	bb 0a 00 00 00       	mov    ebx,0xa
c002d3e2:	01 05 b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,eax
c002d3e8:	50                   	push   eax
c002d3e9:	50                   	push   eax
c002d3ea:	6a 0f                	push   0xf
c002d3ec:	6a 00                	push   0x0
c002d3ee:	e8 ca ef ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d3f3:	5a                   	pop    edx
c002d3f4:	59                   	pop    ecx
c002d3f5:	0f b6 c0             	movzx  eax,al
c002d3f8:	50                   	push   eax
c002d3f9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3fe:	99                   	cdq    
c002d3ff:	f7 fd                	idiv   ebp
c002d401:	99                   	cdq    
c002d402:	f7 fb                	idiv   ebx
c002d404:	8d 42 30             	lea    eax,[edx+0x30]
c002d407:	0f b6 c0             	movzx  eax,al
c002d40a:	50                   	push   eax
c002d40b:	e8 9c ef ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d410:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d416:	5e                   	pop    esi
c002d417:	5f                   	pop    edi
c002d418:	bf e8 03 00 00       	mov    edi,0x3e8
c002d41d:	6a 0f                	push   0xf
c002d41f:	6a 00                	push   0x0
c002d421:	e8 97 ef ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d426:	5a                   	pop    edx
c002d427:	59                   	pop    ecx
c002d428:	0f b6 c0             	movzx  eax,al
c002d42b:	50                   	push   eax
c002d42c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d431:	99                   	cdq    
c002d432:	f7 ff                	idiv   edi
c002d434:	99                   	cdq    
c002d435:	f7 fb                	idiv   ebx
c002d437:	8d 42 30             	lea    eax,[edx+0x30]
c002d43a:	0f b6 c0             	movzx  eax,al
c002d43d:	50                   	push   eax
c002d43e:	e8 69 ef ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d443:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d449:	5e                   	pop    esi
c002d44a:	be 64 00 00 00       	mov    esi,0x64
c002d44f:	58                   	pop    eax
c002d450:	6a 0f                	push   0xf
c002d452:	6a 00                	push   0x0
c002d454:	e8 64 ef ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d459:	5a                   	pop    edx
c002d45a:	59                   	pop    ecx
c002d45b:	0f b6 c0             	movzx  eax,al
c002d45e:	50                   	push   eax
c002d45f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d464:	99                   	cdq    
c002d465:	f7 fe                	idiv   esi
c002d467:	99                   	cdq    
c002d468:	f7 fb                	idiv   ebx
c002d46a:	8d 42 30             	lea    eax,[edx+0x30]
c002d46d:	0f b6 c0             	movzx  eax,al
c002d470:	50                   	push   eax
c002d471:	e8 36 ef ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d476:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d47c:	58                   	pop    eax
c002d47d:	5a                   	pop    edx
c002d47e:	6a 0f                	push   0xf
c002d480:	6a 00                	push   0x0
c002d482:	e8 36 ef ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d487:	59                   	pop    ecx
c002d488:	5a                   	pop    edx
c002d489:	0f b6 c0             	movzx  eax,al
c002d48c:	50                   	push   eax
c002d48d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d492:	99                   	cdq    
c002d493:	f7 fb                	idiv   ebx
c002d495:	99                   	cdq    
c002d496:	f7 fb                	idiv   ebx
c002d498:	8d 42 30             	lea    eax,[edx+0x30]
c002d49b:	0f b6 c0             	movzx  eax,al
c002d49e:	50                   	push   eax
c002d49f:	e8 08 ef ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d4a4:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d4aa:	59                   	pop    ecx
c002d4ab:	58                   	pop    eax
c002d4ac:	6a 0f                	push   0xf
c002d4ae:	6a 00                	push   0x0
c002d4b0:	e8 08 ef ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d4b5:	5a                   	pop    edx
c002d4b6:	59                   	pop    ecx
c002d4b7:	0f b6 c0             	movzx  eax,al
c002d4ba:	50                   	push   eax
c002d4bb:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d4c0:	99                   	cdq    
c002d4c1:	f7 fb                	idiv   ebx
c002d4c3:	83 c2 30             	add    edx,0x30
c002d4c6:	0f b6 d2             	movzx  edx,dl
c002d4c9:	52                   	push   edx
c002d4ca:	e8 dd ee ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d4cf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d4d5:	58                   	pop    eax
c002d4d6:	5a                   	pop    edx
c002d4d7:	6a 0f                	push   0xf
c002d4d9:	6a 00                	push   0x0
c002d4db:	e8 dd ee ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d4e0:	59                   	pop    ecx
c002d4e1:	5a                   	pop    edx
c002d4e2:	0f b6 c0             	movzx  eax,al
c002d4e5:	50                   	push   eax
c002d4e6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d4eb:	99                   	cdq    
c002d4ec:	f7 fd                	idiv   ebp
c002d4ee:	99                   	cdq    
c002d4ef:	f7 fb                	idiv   ebx
c002d4f1:	8d 42 30             	lea    eax,[edx+0x30]
c002d4f4:	0f b6 c0             	movzx  eax,al
c002d4f7:	50                   	push   eax
c002d4f8:	e8 af ee ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d4fd:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d503:	59                   	pop    ecx
c002d504:	5d                   	pop    ebp
c002d505:	6a 0f                	push   0xf
c002d507:	6a 00                	push   0x0
c002d509:	e8 af ee ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d50e:	5a                   	pop    edx
c002d50f:	59                   	pop    ecx
c002d510:	0f b6 c0             	movzx  eax,al
c002d513:	50                   	push   eax
c002d514:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d519:	99                   	cdq    
c002d51a:	f7 ff                	idiv   edi
c002d51c:	99                   	cdq    
c002d51d:	f7 fb                	idiv   ebx
c002d51f:	8d 42 30             	lea    eax,[edx+0x30]
c002d522:	0f b6 c0             	movzx  eax,al
c002d525:	50                   	push   eax
c002d526:	e8 81 ee ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d52b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d531:	5f                   	pop    edi
c002d532:	5d                   	pop    ebp
c002d533:	6a 0f                	push   0xf
c002d535:	6a 00                	push   0x0
c002d537:	e8 81 ee ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d53c:	5a                   	pop    edx
c002d53d:	59                   	pop    ecx
c002d53e:	0f b6 c0             	movzx  eax,al
c002d541:	50                   	push   eax
c002d542:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d547:	99                   	cdq    
c002d548:	f7 fe                	idiv   esi
c002d54a:	99                   	cdq    
c002d54b:	f7 fb                	idiv   ebx
c002d54d:	8d 42 30             	lea    eax,[edx+0x30]
c002d550:	0f b6 c0             	movzx  eax,al
c002d553:	50                   	push   eax
c002d554:	e8 53 ee ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d559:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d55f:	5e                   	pop    esi
c002d560:	5f                   	pop    edi
c002d561:	6a 0f                	push   0xf
c002d563:	6a 00                	push   0x0
c002d565:	e8 53 ee ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d56a:	5d                   	pop    ebp
c002d56b:	5a                   	pop    edx
c002d56c:	0f b6 c0             	movzx  eax,al
c002d56f:	50                   	push   eax
c002d570:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d575:	99                   	cdq    
c002d576:	f7 fb                	idiv   ebx
c002d578:	99                   	cdq    
c002d579:	f7 fb                	idiv   ebx
c002d57b:	8d 42 30             	lea    eax,[edx+0x30]
c002d57e:	0f b6 c0             	movzx  eax,al
c002d581:	50                   	push   eax
c002d582:	e8 25 ee ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d587:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d58d:	59                   	pop    ecx
c002d58e:	5e                   	pop    esi
c002d58f:	6a 0f                	push   0xf
c002d591:	6a 00                	push   0x0
c002d593:	e8 25 ee ff ff       	call   c002c3bd <combineColours(unsigned char, unsigned char)>
c002d598:	5f                   	pop    edi
c002d599:	5d                   	pop    ebp
c002d59a:	0f b6 c0             	movzx  eax,al
c002d59d:	50                   	push   eax
c002d59e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d5a3:	99                   	cdq    
c002d5a4:	f7 fb                	idiv   ebx
c002d5a6:	83 c2 30             	add    edx,0x30
c002d5a9:	0f b6 d2             	movzx  edx,dl
c002d5ac:	52                   	push   edx
c002d5ad:	e8 fa ed ff ff       	call   c002c3ac <combineCharAndColour(char, unsigned char)>
c002d5b2:	83 c4 10             	add    esp,0x10
c002d5b5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d5bb:	31 c0                	xor    eax,eax
c002d5bd:	83 c4 0c             	add    esp,0xc
c002d5c0:	5b                   	pop    ebx
c002d5c1:	5e                   	pop    esi
c002d5c2:	5f                   	pop    edi
c002d5c3:	5d                   	pop    ebp
c002d5c4:	c3                   	ret    
c002d5c5:	90                   	nop

c002d5c6 <SATAPI::write(unsigned long long, int, void*)>:
c002d5c6:	b8 03 00 00 00       	mov    eax,0x3
c002d5cb:	c3                   	ret    

c002d5cc <SATAPI::close(int, int, void*)>:
c002d5cc:	83 ec 0c             	sub    esp,0xc
c002d5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d5d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d5d9:	85 c0                	test   eax,eax
c002d5db:	74 0c                	je     c002d5e9 <SATAPI::close(int, int, void*)+0x1d>
c002d5dd:	8b 10                	mov    edx,DWORD PTR [eax]
c002d5df:	83 ec 0c             	sub    esp,0xc
c002d5e2:	50                   	push   eax
c002d5e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d5e6:	83 c4 10             	add    esp,0x10
c002d5e9:	31 c0                	xor    eax,eax
c002d5eb:	83 c4 0c             	add    esp,0xc
c002d5ee:	c3                   	ret    
c002d5ef:	90                   	nop

c002d5f0 <SATAPI::SATAPI()>:
c002d5f0:	83 ec 0c             	sub    esp,0xc
c002d5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d5f7:	83 ec 04             	sub    esp,0x4
c002d5fa:	68 00 08 00 00       	push   0x800
c002d5ff:	68 24 3d 03 c0       	push   0xc0033d24
c002d604:	50                   	push   eax
c002d605:	e8 b8 e3 fe ff       	call   c001b9c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d60a:	83 c4 10             	add    esp,0x10
c002d60d:	ba 18 3e 03 c0       	mov    edx,0xc0033e18
c002d612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d616:	89 10                	mov    DWORD PTR [eax],edx
c002d618:	90                   	nop
c002d619:	83 c4 0c             	add    esp,0xc
c002d61c:	c3                   	ret    
c002d61d:	90                   	nop

c002d61e <SATAPI::diskRemoved()>:
c002d61e:	c3                   	ret    
c002d61f:	90                   	nop

c002d620 <SATAPI::diskInserted()>:
c002d620:	83 ec 18             	sub    esp,0x18
c002d623:	68 30 3d 03 c0       	push   0xc0033d30
c002d628:	e8 1d bf fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002d62d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d631:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d638:	83 c4 1c             	add    esp,0x1c
c002d63b:	c3                   	ret    

c002d63c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d63c:	55                   	push   ebp
c002d63d:	57                   	push   edi
c002d63e:	56                   	push   esi
c002d63f:	53                   	push   ebx
c002d640:	83 ec 34             	sub    esp,0x34
c002d643:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d647:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d64b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d64f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d653:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d657:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d65d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d663:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d667:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d66d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d671:	83 c0 02             	add    eax,0x2
c002d674:	c1 e0 07             	shl    eax,0x7
c002d677:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d67b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d67f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d683:	c1 e0 07             	shl    eax,0x7
c002d686:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d68a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d68e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d698:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d69c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d6a2:	e8 a9 e4 ff ff       	call   c002bb50 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d6a7:	83 c4 10             	add    esp,0x10
c002d6aa:	89 c2                	mov    edx,eax
c002d6ac:	b8 01 00 00 00       	mov    eax,0x1
c002d6b1:	83 fa ff             	cmp    edx,0xffffffff
c002d6b4:	0f 84 5f 02 00 00    	je     c002d919 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d6ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d6c2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d6c8:	8b 00                	mov    eax,DWORD PTR [eax]
c002d6ca:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d6d0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d6d6:	89 d1                	mov    ecx,edx
c002d6d8:	c1 e1 05             	shl    ecx,0x5
c002d6db:	01 c8                	add    eax,ecx
c002d6dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d6df:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d6e5:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d6eb:	89 08                	mov    DWORD PTR [eax],ecx
c002d6ed:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d6f3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d6f9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d6ff:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d702:	50                   	push   eax
c002d703:	68 90 00 00 00       	push   0x90
c002d708:	6a 00                	push   0x0
c002d70a:	53                   	push   ebx
c002d70b:	e8 e0 2d fd ff       	call   c00004f0 <memset>
c002d710:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d713:	b9 0c 00 00 00       	mov    ecx,0xc
c002d718:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d71c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d71e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d724:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d728:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d72c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d732:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d736:	48                   	dec    eax
c002d737:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d73c:	89 c1                	mov    ecx,eax
c002d73e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d744:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d749:	09 c8                	or     eax,ecx
c002d74b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d751:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d757:	83 c8 80             	or     eax,0xffffff80
c002d75a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d760:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d763:	25 00 7f 00 00       	and    eax,0x7f00
c002d768:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d76d:	66 89 03             	mov    WORD PTR [ebx],ax
c002d770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d774:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002d778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d77c:	c1 e8 10             	shr    eax,0x10
c002d77f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d786:	c1 e8 18             	shr    eax,0x18
c002d789:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002d78c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d790:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d793:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d797:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d79a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d79e:	83 c4 10             	add    esp,0x10
c002d7a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d7a5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d7a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002d7ad:	31 c0                	xor    eax,eax
c002d7af:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002d7b5:	80 e1 88             	and    cl,0x88
c002d7b8:	74 0a                	je     c002d7c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002d7ba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d7bf:	74 0a                	je     c002d7cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002d7c1:	40                   	inc    eax
c002d7c2:	eb eb                	jmp    c002d7af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002d7c4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d7c9:	75 43                	jne    c002d80e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002d7cb:	83 ec 0c             	sub    esp,0xc
c002d7ce:	68 48 3d 03 c0       	push   0xc0033d48
c002d7d3:	e8 72 bd fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002d7d8:	58                   	pop    eax
c002d7d9:	5a                   	pop    edx
c002d7da:	68 5d 3d 03 c0       	push   0xc0033d5d
c002d7df:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d7e5:	e8 02 9f fe ff       	call   c00176ec <VgaText::puts(char const*)>
c002d7ea:	59                   	pop    ecx
c002d7eb:	5b                   	pop    ebx
c002d7ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d7f0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d7f6:	e8 ef e3 ff ff       	call   c002bbea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d7fb:	5e                   	pop    esi
c002d7fc:	5f                   	pop    edi
c002d7fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d801:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d807:	e8 be e3 ff ff       	call   c002bbca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d80c:	eb 48                	jmp    c002d856 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002d80e:	b8 01 00 00 00       	mov    eax,0x1
c002d813:	88 d1                	mov    cl,dl
c002d815:	d3 e0                	shl    eax,cl
c002d817:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002d81c:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002d822:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002d826:	89 c7                	mov    edi,eax
c002d828:	c1 e3 07             	shl    ebx,0x7
c002d82b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002d82f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002d835:	85 c7                	test   edi,eax
c002d837:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002d83d:	0f 84 a3 00 00 00    	je     c002d8e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002d843:	0f ba e0 1e          	bt     eax,0x1e
c002d847:	73 1a                	jae    c002d863 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002d849:	83 ec 0c             	sub    esp,0xc
c002d84c:	68 6f 3d 03 c0       	push   0xc0033d6f
c002d851:	e8 f4 bc fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002d856:	83 c4 10             	add    esp,0x10
c002d859:	b8 01 00 00 00       	mov    eax,0x1
c002d85e:	e9 b6 00 00 00       	jmp    c002d919 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d863:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002d869:	83 f8 0d             	cmp    eax,0xd
c002d86c:	77 0a                	ja     c002d878 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002d86e:	83 ec 0c             	sub    esp,0xc
c002d871:	68 c8 00 00 00       	push   0xc8
c002d876:	eb 28                	jmp    c002d8a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d878:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002d87e:	83 f8 0d             	cmp    eax,0xd
c002d881:	77 0a                	ja     c002d88d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002d883:	83 ec 0c             	sub    esp,0xc
c002d886:	68 58 02 00 00       	push   0x258
c002d88b:	eb 13                	jmp    c002d8a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d88d:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002d893:	83 f8 06             	cmp    eax,0x6
c002d896:	77 10                	ja     c002d8a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002d898:	83 ec 0c             	sub    esp,0xc
c002d89b:	68 dc 05 00 00       	push   0x5dc
c002d8a0:	e8 67 7e ff ff       	call   c002570c <milliTenthSleep(unsigned int)>
c002d8a5:	83 c4 10             	add    esp,0x10
c002d8a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d8ac:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d8af:	75 06                	jne    c002d8b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002d8b1:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d8b5:	74 15                	je     c002d8cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d8b7:	83 fe 06             	cmp    esi,0x6
c002d8ba:	77 10                	ja     c002d8cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d8bc:	83 ec 0c             	sub    esp,0xc
c002d8bf:	68 c4 09 00 00       	push   0x9c4
c002d8c4:	e8 43 7e ff ff       	call   c002570c <milliTenthSleep(unsigned int)>
c002d8c9:	83 c4 10             	add    esp,0x10
c002d8cc:	46                   	inc    esi
c002d8cd:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002d8d3:	0f 85 56 ff ff ff    	jne    c002d82f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002d8d9:	83 ec 0c             	sub    esp,0xc
c002d8dc:	68 82 3d 03 c0       	push   0xc0033d82
c002d8e1:	e9 6b ff ff ff       	jmp    c002d851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d8e6:	0f ba e0 1e          	bt     eax,0x1e
c002d8ea:	73 0d                	jae    c002d8f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002d8ec:	83 ec 0c             	sub    esp,0xc
c002d8ef:	68 96 3d 03 c0       	push   0xc0033d96
c002d8f4:	e9 58 ff ff ff       	jmp    c002d851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d8f9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d8fe:	74 17                	je     c002d917 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d900:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d905:	74 10                	je     c002d917 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d907:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d90d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d911:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d915:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d917:	31 c0                	xor    eax,eax
c002d919:	83 c4 2c             	add    esp,0x2c
c002d91c:	5b                   	pop    ebx
c002d91d:	5e                   	pop    esi
c002d91e:	5f                   	pop    edi
c002d91f:	5d                   	pop    ebp
c002d920:	c3                   	ret    
c002d921:	90                   	nop

c002d922 <SATAPI::eject()>:
c002d922:	57                   	push   edi
c002d923:	b9 03 00 00 00       	mov    ecx,0x3
c002d928:	83 ec 18             	sub    esp,0x18
c002d92b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d92f:	fc                   	cld    
c002d930:	31 c0                	xor    eax,eax
c002d932:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d934:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d939:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d93e:	50                   	push   eax
c002d93f:	6a 00                	push   0x0
c002d941:	6a 00                	push   0x0
c002d943:	6a 00                	push   0x0
c002d945:	6a 00                	push   0x0
c002d947:	6a 02                	push   0x2
c002d949:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d94d:	50                   	push   eax
c002d94e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d952:	e8 e5 fc ff ff       	call   c002d63c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d957:	83 c4 38             	add    esp,0x38
c002d95a:	31 c0                	xor    eax,eax
c002d95c:	5f                   	pop    edi
c002d95d:	c3                   	ret    

c002d95e <SATAPI::detectMedia()>:
c002d95e:	53                   	push   ebx
c002d95f:	83 ec 14             	sub    esp,0x14
c002d962:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d966:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d96c:	e8 cb f9 fe ff       	call   c001d33c <VCache::writeWriteBuffer()>
c002d971:	59                   	pop    ecx
c002d972:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d978:	e8 af f9 fe ff       	call   c001d32c <VCache::invalidateReadBuffer()>
c002d97d:	c7 04 24 ab 3d 03 c0 	mov    DWORD PTR [esp],0xc0033dab
c002d984:	e8 c1 bb fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002d989:	83 c4 10             	add    esp,0x10
c002d98c:	31 c0                	xor    eax,eax
c002d98e:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d995:	85 d2                	test   edx,edx
c002d997:	74 0f                	je     c002d9a8 <SATAPI::detectMedia()+0x4a>
c002d999:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d99f:	75 07                	jne    c002d9a8 <SATAPI::detectMedia()+0x4a>
c002d9a1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d9a8:	40                   	inc    eax
c002d9a9:	83 f8 1a             	cmp    eax,0x1a
c002d9ac:	75 e0                	jne    c002d98e <SATAPI::detectMedia()+0x30>
c002d9ae:	83 c4 08             	add    esp,0x8
c002d9b1:	5b                   	pop    ebx
c002d9b2:	c3                   	ret    
c002d9b3:	90                   	nop

c002d9b4 <SATAPI::open(int, int, void*)>:
c002d9b4:	56                   	push   esi
c002d9b5:	53                   	push   ebx
c002d9b6:	51                   	push   ecx
c002d9b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d9bf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d9c9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d9cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d9d3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d9dd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d9e7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d9ee:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d9f4:	e8 2a 90 fe ff       	call   c0016a23 <Phys::allocatePage()>
c002d9f9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d9ff:	89 c6                	mov    esi,eax
c002da01:	e8 1d 90 fe ff       	call   c0016a23 <Phys::allocatePage()>
c002da06:	81 c6 00 10 00 00    	add    esi,0x1000
c002da0c:	39 c6                	cmp    esi,eax
c002da0e:	74 10                	je     c002da20 <SATAPI::open(int, int, void*)+0x6c>
c002da10:	83 ec 0c             	sub    esp,0xc
c002da13:	68 c0 3d 03 c0       	push   0xc0033dc0
c002da18:	e8 b5 2a ff ff       	call   c00204d2 <KePanic(char const*)>
c002da1d:	83 c4 10             	add    esp,0x10
c002da20:	83 ec 0c             	sub    esp,0xc
c002da23:	6a 02                	push   0x2
c002da25:	e8 0b a8 fe ff       	call   c0018235 <Virt::allocateKernelVirtualPages(int)>
c002da2a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002da30:	6a 03                	push   0x3
c002da32:	50                   	push   eax
c002da33:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002da39:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002da3f:	e8 fa ae fe ff       	call   c001893e <VAS::mapPage(unsigned long, unsigned long, int)>
c002da44:	83 c4 14             	add    esp,0x14
c002da47:	68 78 01 00 00       	push   0x178
c002da4c:	e8 c3 8c fe ff       	call   c0016714 <malloc>
c002da51:	83 c4 0c             	add    esp,0xc
c002da54:	6a 00                	push   0x0
c002da56:	68 ff ff ff 7f       	push   0x7fffffff
c002da5b:	6a 00                	push   0x0
c002da5d:	6a 00                	push   0x0
c002da5f:	53                   	push   ebx
c002da60:	68 d6 3d 03 c0       	push   0xc0033dd6
c002da65:	89 c6                	mov    esi,eax
c002da67:	50                   	push   eax
c002da68:	e8 2d ed fe ff       	call   c001c79a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002da6d:	83 c4 14             	add    esp,0x14
c002da70:	56                   	push   esi
c002da71:	e8 e4 ed fe ff       	call   c001c85a <LogicalDisk::assignDriveLetter()>
c002da76:	5a                   	pop    edx
c002da77:	59                   	pop    ecx
c002da78:	0f be c0             	movsx  eax,al
c002da7b:	50                   	push   eax
c002da7c:	68 1c 3c 03 c0       	push   0xc0033c1c
c002da81:	e8 c4 ba fe ff       	call   c001954a <Dbg::kprintf(char const*, ...)>
c002da86:	58                   	pop    eax
c002da87:	5a                   	pop    edx
c002da88:	56                   	push   esi
c002da89:	53                   	push   ebx
c002da8a:	e8 51 db fe ff       	call   c001b5e0 <Device::addChild(Device*)>
c002da8f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002da95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002da98:	e8 8d df fe ff       	call   c001ba2a <PhysicalDisk::startCache()>
c002da9d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002daa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002daa7:	e8 b2 fe ff ff       	call   c002d95e <SATAPI::detectMedia()>
c002daac:	83 c4 14             	add    esp,0x14
c002daaf:	31 c0                	xor    eax,eax
c002dab1:	5b                   	pop    ebx
c002dab2:	5e                   	pop    esi
c002dab3:	c3                   	ret    

c002dab4 <SATAPI::read(unsigned long long, int, void*)>:
c002dab4:	55                   	push   ebp
c002dab5:	57                   	push   edi
c002dab6:	56                   	push   esi
c002dab7:	53                   	push   ebx
c002dab8:	83 ec 3c             	sub    esp,0x3c
c002dabb:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002dabf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002dac3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002dac7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002dacb:	83 fd 04             	cmp    ebp,0x4
c002dace:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002dad2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002dad6:	7e 10                	jle    c002dae8 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002dad8:	83 ec 0c             	sub    esp,0xc
c002dadb:	68 e4 3d 03 c0       	push   0xc0033de4
c002dae0:	e8 ed 29 ff ff       	call   c00204d2 <KePanic(char const*)>
c002dae5:	83 c4 10             	add    esp,0x10
c002dae8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002daee:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002daf4:	51                   	push   ecx
c002daf5:	50                   	push   eax
c002daf6:	83 c0 02             	add    eax,0x2
c002daf9:	c1 e0 07             	shl    eax,0x7
c002dafc:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002db02:	50                   	push   eax
c002db03:	52                   	push   edx
c002db04:	e8 0b e1 ff ff       	call   c002bc14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002db09:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002db0d:	b9 03 00 00 00       	mov    ecx,0x3
c002db12:	fc                   	cld    
c002db13:	31 c0                	xor    eax,eax
c002db15:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002db17:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002db1c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002db21:	83 c4 0c             	add    esp,0xc
c002db24:	6a 00                	push   0x0
c002db26:	6a 00                	push   0x0
c002db28:	6a 00                	push   0x0
c002db2a:	6a 00                	push   0x0
c002db2c:	6a 02                	push   0x2
c002db2e:	8d 44 24 30          	lea    eax,[esp+0x30]
c002db32:	50                   	push   eax
c002db33:	53                   	push   ebx
c002db34:	e8 03 fb ff ff       	call   c002d63c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002db39:	83 c4 20             	add    esp,0x20
c002db3c:	85 c0                	test   eax,eax
c002db3e:	89 c6                	mov    esi,eax
c002db40:	75 46                	jne    c002db88 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002db42:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002db46:	b9 03 00 00 00       	mov    ecx,0x3
c002db4b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002db4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002db51:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002db56:	0f c8                	bswap  eax
c002db58:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002db5c:	89 e8                	mov    eax,ebp
c002db5e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002db62:	50                   	push   eax
c002db63:	55                   	push   ebp
c002db64:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002db68:	c1 e5 0b             	shl    ebp,0xb
c002db6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002db6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002db73:	55                   	push   ebp
c002db74:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002db78:	50                   	push   eax
c002db79:	53                   	push   ebx
c002db7a:	e8 bd fa ff ff       	call   c002d63c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002db7f:	83 c4 20             	add    esp,0x20
c002db82:	85 c0                	test   eax,eax
c002db84:	89 c6                	mov    esi,eax
c002db86:	74 0c                	je     c002db94 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002db88:	83 ec 0c             	sub    esp,0xc
c002db8b:	53                   	push   ebx
c002db8c:	e8 cd fd ff ff       	call   c002d95e <SATAPI::detectMedia()>
c002db91:	83 c4 10             	add    esp,0x10
c002db94:	83 c4 3c             	add    esp,0x3c
c002db97:	89 f0                	mov    eax,esi
c002db99:	5b                   	pop    ebx
c002db9a:	5e                   	pop    esi
c002db9b:	5f                   	pop    edi
c002db9c:	5d                   	pop    ebp
c002db9d:	c3                   	ret    

c002db9e <IOAPIC::close(int, int, void*)>:
c002db9e:	b8 00 00 00 00       	mov    eax,0x0
c002dba3:	c3                   	ret    

c002dba4 <apicGetBase()>:
c002dba4:	55                   	push   ebp
c002dba5:	89 e5                	mov    ebp,esp
c002dba7:	83 ec 18             	sub    esp,0x18
c002dbaa:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002dbaf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002dbb5:	83 e0 08             	and    eax,0x8
c002dbb8:	0f b6 c0             	movzx  eax,al
c002dbbb:	85 c0                	test   eax,eax
c002dbbd:	75 07                	jne    c002dbc6 <apicGetBase()+0x22>
c002dbbf:	b8 00 00 00 00       	mov    eax,0x0
c002dbc4:	eb 21                	jmp    c002dbe7 <apicGetBase()+0x43>
c002dbc6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002dbcb:	83 ec 08             	sub    esp,0x8
c002dbce:	6a 1b                	push   0x1b
c002dbd0:	50                   	push   eax
c002dbd1:	e8 62 80 fe ff       	call   c0015c38 <Computer::rdmsr(unsigned int)>
c002dbd6:	83 c4 10             	add    esp,0x10
c002dbd9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dbdc:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002dbdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dbe2:	25 00 00 ff ff       	and    eax,0xffff0000
c002dbe7:	c9                   	leave  
c002dbe8:	c3                   	ret    
c002dbe9:	90                   	nop

c002dbea <IOAPIC::IOAPIC()>:
c002dbea:	83 ec 0c             	sub    esp,0xc
c002dbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbf1:	83 ec 08             	sub    esp,0x8
c002dbf4:	68 48 3e 03 c0       	push   0xc0033e48
c002dbf9:	50                   	push   eax
c002dbfa:	e8 43 db fe ff       	call   c001b742 <Device::Device(char const*)>
c002dbff:	83 c4 10             	add    esp,0x10
c002dc02:	ba 58 3e 03 c0       	mov    edx,0xc0033e58
c002dc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc0b:	89 10                	mov    DWORD PTR [eax],edx
c002dc0d:	90                   	nop
c002dc0e:	83 c4 0c             	add    esp,0xc
c002dc11:	c3                   	ret    

c002dc12 <apicOpen()>:
c002dc12:	55                   	push   ebp
c002dc13:	89 e5                	mov    ebp,esp
c002dc15:	53                   	push   ebx
c002dc16:	83 ec 34             	sub    esp,0x34
c002dc19:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002dc1e:	83 f0 01             	xor    eax,0x1
c002dc21:	0f b6 c0             	movzx  eax,al
c002dc24:	85 c0                	test   eax,eax
c002dc26:	0f 84 a3 00 00 00    	je     c002dccf <apicOpen()+0xbd>
c002dc2c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002dc30:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002dc35:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002dc39:	0f b6 c0             	movzx  eax,al
c002dc3c:	39 c2                	cmp    edx,eax
c002dc3e:	0f 83 84 00 00 00    	jae    c002dcc8 <apicOpen()+0xb6>
c002dc44:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002dc4b:	83 ec 0c             	sub    esp,0xc
c002dc4e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002dc51:	e8 be 8a fe ff       	call   c0016714 <malloc>
c002dc56:	83 c4 10             	add    esp,0x10
c002dc59:	89 c3                	mov    ebx,eax
c002dc5b:	83 ec 0c             	sub    esp,0xc
c002dc5e:	53                   	push   ebx
c002dc5f:	e8 86 ff ff ff       	call   c002dbea <IOAPIC::IOAPIC()>
c002dc64:	83 c4 10             	add    esp,0x10
c002dc67:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002dc6a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002dc6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002dc71:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002dc78:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002dc7d:	83 c0 01             	add    eax,0x1
c002dc80:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002dc85:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002dc8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002dc90:	83 ec 08             	sub    esp,0x8
c002dc93:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dc96:	50                   	push   eax
c002dc97:	e8 44 d9 fe ff       	call   c001b5e0 <Device::addChild(Device*)>
c002dc9c:	83 c4 10             	add    esp,0x10
c002dc9f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dca2:	8b 00                	mov    eax,DWORD PTR [eax]
c002dca4:	83 c0 08             	add    eax,0x8
c002dca7:	8b 00                	mov    eax,DWORD PTR [eax]
c002dca9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002dcad:	6a 00                	push   0x0
c002dcaf:	6a 00                	push   0x0
c002dcb1:	52                   	push   edx
c002dcb2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dcb5:	ff d0                	call   eax
c002dcb7:	83 c4 10             	add    esp,0x10
c002dcba:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002dcbd:	83 c0 01             	add    eax,0x1
c002dcc0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002dcc3:	e9 68 ff ff ff       	jmp    c002dc30 <apicOpen()+0x1e>
c002dcc8:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002dccf:	e8 d0 fe ff ff       	call   c002dba4 <apicGetBase()>
c002dcd4:	05 f0 00 00 00       	add    eax,0xf0
c002dcd9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dcdc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dcdf:	8b 00                	mov    eax,DWORD PTR [eax]
c002dce1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002dce4:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002dceb:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002dcf2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dcf5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002dcf8:	89 10                	mov    DWORD PTR [eax],edx
c002dcfa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002dd01:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002dd06:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002dd09:	7d 7c                	jge    c002dd87 <apicOpen()+0x175>
c002dd0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dd0e:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dd15:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002dd18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dd1b:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dd22:	c1 e8 08             	shr    eax,0x8
c002dd25:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002dd29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dd2c:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dd33:	c1 e8 18             	shr    eax,0x18
c002dd36:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002dd39:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002dd3d:	3d ff 00 00 00       	cmp    eax,0xff
c002dd42:	75 3a                	jne    c002dd7e <apicOpen()+0x16c>
c002dd44:	e8 5b fe ff ff       	call   c002dba4 <apicGetBase()>
c002dd49:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002dd4d:	83 fa 01             	cmp    edx,0x1
c002dd50:	75 07                	jne    c002dd59 <apicOpen()+0x147>
c002dd52:	ba 60 03 00 00       	mov    edx,0x360
c002dd57:	eb 05                	jmp    c002dd5e <apicOpen()+0x14c>
c002dd59:	ba 50 03 00 00       	mov    edx,0x350
c002dd5e:	01 d0                	add    eax,edx
c002dd60:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dd63:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dd66:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd68:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002dd6b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002dd72:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002dd76:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dd79:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002dd7c:	89 10                	mov    DWORD PTR [eax],edx
c002dd7e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002dd82:	e9 7a ff ff ff       	jmp    c002dd01 <apicOpen()+0xef>
c002dd87:	90                   	nop
c002dd88:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dd8b:	c9                   	leave  
c002dd8c:	c3                   	ret    
c002dd8d:	90                   	nop

c002dd8e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002dd8e:	55                   	push   ebp
c002dd8f:	89 e5                	mov    ebp,esp
c002dd91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002dd9a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dd9d:	72 1d                	jb     c002ddbc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dd9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dda2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002dda8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ddab:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002ddb1:	01 d0                	add    eax,edx
c002ddb3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002ddb6:	73 04                	jae    c002ddbc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002ddb8:	b0 01                	mov    al,0x1
c002ddba:	eb 02                	jmp    c002ddbe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002ddbc:	b0 00                	mov    al,0x0
c002ddbe:	5d                   	pop    ebp
c002ddbf:	c3                   	ret    

c002ddc0 <IOAPIC::read(int)>:
c002ddc0:	55                   	push   ebp
c002ddc1:	89 e5                	mov    ebp,esp
c002ddc3:	83 ec 10             	sub    esp,0x10
c002ddc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ddc9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002ddcf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002ddd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002ddd5:	0f b6 d0             	movzx  edx,al
c002ddd8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dddb:	89 10                	mov    DWORD PTR [eax],edx
c002dddd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dde0:	83 c0 10             	add    eax,0x10
c002dde3:	8b 00                	mov    eax,DWORD PTR [eax]
c002dde5:	c9                   	leave  
c002dde6:	c3                   	ret    
c002dde7:	90                   	nop

c002dde8 <IOAPIC::open(int, int, void*)>:
c002dde8:	55                   	push   ebp
c002dde9:	89 e5                	mov    ebp,esp
c002ddeb:	57                   	push   edi
c002ddec:	56                   	push   esi
c002dded:	53                   	push   ebx
c002ddee:	83 ec 04             	sub    esp,0x4
c002ddf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ddf4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002ddf7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002ddfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de00:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002de06:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002de0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002de16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de19:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002de1f:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002de26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de29:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002de2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de32:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002de38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de3b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002de41:	0f b6 f0             	movzx  esi,al
c002de44:	89 d0                	mov    eax,edx
c002de46:	ba 00 00 00 00       	mov    edx,0x0
c002de4b:	89 c7                	mov    edi,eax
c002de4d:	83 e7 ff             	and    edi,0xffffffff
c002de50:	89 f9                	mov    ecx,edi
c002de52:	0f b6 da             	movzx  ebx,dl
c002de55:	89 c8                	mov    eax,ecx
c002de57:	89 da                	mov    edx,ebx
c002de59:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002de5c:	8d 5e 08             	lea    ebx,[esi+0x8]
c002de5f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002de63:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002de67:	83 e0 00             	and    eax,0x0
c002de6a:	09 d0                	or     eax,edx
c002de6c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002de70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de73:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002de79:	8d 50 01             	lea    edx,[eax+0x1]
c002de7c:	88 d1                	mov    cl,dl
c002de7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002de81:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002de87:	0f b6 d0             	movzx  edx,al
c002de8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de8d:	83 c2 08             	add    edx,0x8
c002de90:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002de94:	0f b6 c9             	movzx  ecx,cl
c002de97:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002de9d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002dea1:	6a 01                	push   0x1
c002dea3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dea6:	e8 15 ff ff ff       	call   c002ddc0 <IOAPIC::read(int)>
c002deab:	83 c4 08             	add    esp,0x8
c002deae:	c1 f8 10             	sar    eax,0x10
c002deb1:	0f b6 c0             	movzx  eax,al
c002deb4:	8d 50 01             	lea    edx,[eax+0x1]
c002deb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002deba:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002dec0:	b8 00 00 00 00       	mov    eax,0x0
c002dec5:	8d 65 f4             	lea    esp,[ebp-0xc]
c002dec8:	5b                   	pop    ebx
c002dec9:	5e                   	pop    esi
c002deca:	5f                   	pop    edi
c002decb:	5d                   	pop    ebp
c002decc:	c3                   	ret    
c002decd:	90                   	nop

c002dece <IOAPIC::write(int, int)>:
c002dece:	55                   	push   ebp
c002decf:	89 e5                	mov    ebp,esp
c002ded1:	83 ec 10             	sub    esp,0x10
c002ded4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ded7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dedd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dee0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dee3:	0f b6 d0             	movzx  edx,al
c002dee6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dee9:	89 10                	mov    DWORD PTR [eax],edx
c002deeb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002deee:	8d 50 10             	lea    edx,[eax+0x10]
c002def1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002def4:	89 02                	mov    DWORD PTR [edx],eax
c002def6:	90                   	nop
c002def7:	c9                   	leave  
c002def8:	c3                   	ret    
c002def9:	90                   	nop

c002defa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002defa:	55                   	push   ebp
c002defb:	89 e5                	mov    ebp,esp
c002defd:	53                   	push   ebx
c002defe:	83 ec 2c             	sub    esp,0x2c
c002df01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002df04:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002df07:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002df0a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002df0d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002df10:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002df13:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002df16:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002df19:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002df1c:	88 d8                	mov    al,bl
c002df1e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002df21:	88 c8                	mov    al,cl
c002df23:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002df26:	88 d0                	mov    al,dl
c002df28:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002df2b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002df2f:	83 c0 08             	add    eax,0x8
c002df32:	d1 e0                	shl    eax,1
c002df34:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002df37:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002df3b:	83 c0 08             	add    eax,0x8
c002df3e:	d1 e0                	shl    eax,1
c002df40:	83 c0 01             	add    eax,0x1
c002df43:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002df46:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002df49:	50                   	push   eax
c002df4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002df4d:	e8 6e fe ff ff       	call   c002ddc0 <IOAPIC::read(int)>
c002df52:	83 c4 08             	add    esp,0x8
c002df55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002df58:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002df5f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002df62:	c1 e0 18             	shl    eax,0x18
c002df65:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002df68:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002df6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002df6e:	52                   	push   edx
c002df6f:	50                   	push   eax
c002df70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002df73:	e8 56 ff ff ff       	call   c002dece <IOAPIC::write(int, int)>
c002df78:	83 c4 0c             	add    esp,0xc
c002df7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002df7e:	50                   	push   eax
c002df7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002df82:	e8 39 fe ff ff       	call   c002ddc0 <IOAPIC::read(int)>
c002df87:	83 c4 08             	add    esp,0x8
c002df8a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002df8d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002df94:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002df9b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dfa2:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dfa6:	85 c0                	test   eax,eax
c002dfa8:	74 09                	je     c002dfb3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dfaa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dfb1:	eb 07                	jmp    c002dfba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dfb3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dfba:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dfbe:	85 c0                	test   eax,eax
c002dfc0:	74 09                	je     c002dfcb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dfc2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dfc9:	eb 07                	jmp    c002dfd2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dfcb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dfd2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dfd9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dfdd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dfe0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dfe3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dfe6:	52                   	push   edx
c002dfe7:	50                   	push   eax
c002dfe8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dfeb:	e8 de fe ff ff       	call   c002dece <IOAPIC::write(int, int)>
c002dff0:	83 c4 0c             	add    esp,0xc
c002dff3:	90                   	nop
c002dff4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dff7:	c9                   	leave  
c002dff8:	c3                   	ret    
c002dff9:	66 90                	xchg   ax,ax
c002dffb:	90                   	nop

c002dffc <APICTimer::close(int, int, void*)>:
c002dffc:	b8 00 00 00 00       	mov    eax,0x0
c002e001:	c3                   	ret    
c002e002:	66 90                	xchg   ax,ax

c002e004 <apicTimerHandler(regs*, void*)>:
c002e004:	83 ec 0c             	sub    esp,0xc
c002e007:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e00b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002e00d:	b8 10 27 00 00       	mov    eax,0x2710
c002e012:	ba 00 00 00 00       	mov    edx,0x0
c002e017:	f7 f1                	div    ecx
c002e019:	83 ec 0c             	sub    esp,0xc
c002e01c:	50                   	push   eax
c002e01d:	e8 36 f0 fe ff       	call   c001d058 <timerHandler(unsigned int)>
c002e022:	83 c4 10             	add    esp,0x10
c002e025:	90                   	nop
c002e026:	83 c4 0c             	add    esp,0xc
c002e029:	c3                   	ret    
c002e02a:	66 90                	xchg   ax,ax

c002e02c <APICTimer::open(int, int, void*)>:
c002e02c:	83 ec 0c             	sub    esp,0xc
c002e02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e033:	8b 00                	mov    eax,DWORD PTR [eax]
c002e035:	83 c0 24             	add    eax,0x24
c002e038:	8b 00                	mov    eax,DWORD PTR [eax]
c002e03a:	83 ec 08             	sub    esp,0x8
c002e03d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e045:	ff d0                	call   eax
c002e047:	83 c4 10             	add    esp,0x10
c002e04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e04e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e052:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e05c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e060:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002e066:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e06a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002e070:	83 ec 0c             	sub    esp,0xc
c002e073:	51                   	push   ecx
c002e074:	6a 01                	push   0x1
c002e076:	68 04 e0 02 c0       	push   0xc002e004
c002e07b:	52                   	push   edx
c002e07c:	50                   	push   eax
c002e07d:	e8 0a d5 fe ff       	call   c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e082:	83 c4 20             	add    esp,0x20
c002e085:	89 c2                	mov    edx,eax
c002e087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e08b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e091:	b8 00 00 00 00       	mov    eax,0x0
c002e096:	83 c4 0c             	add    esp,0xc
c002e099:	c3                   	ret    
c002e09a:	66 90                	xchg   ax,ax

c002e09c <APICTimer::write(int)>:
c002e09c:	83 ec 0c             	sub    esp,0xc
c002e09f:	83 ec 0c             	sub    esp,0xc
c002e0a2:	68 7c 3e 03 c0       	push   0xc0033e7c
c002e0a7:	e8 26 24 ff ff       	call   c00204d2 <KePanic(char const*)>
c002e0ac:	83 c4 10             	add    esp,0x10
c002e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e0b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e0bd:	90                   	nop
c002e0be:	83 c4 0c             	add    esp,0xc
c002e0c1:	c3                   	ret    
c002e0c2:	66 90                	xchg   ax,ax

c002e0c4 <APICTimer::APICTimer()>:
c002e0c4:	83 ec 0c             	sub    esp,0xc
c002e0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0cb:	83 ec 08             	sub    esp,0x8
c002e0ce:	68 8c 3e 03 c0       	push   0xc0033e8c
c002e0d3:	50                   	push   eax
c002e0d4:	e8 b3 ee fe ff       	call   c001cf8c <Timer::Timer(char const*)>
c002e0d9:	83 c4 10             	add    esp,0x10
c002e0dc:	ba a0 3e 03 c0       	mov    edx,0xc0033ea0
c002e0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0e5:	89 10                	mov    DWORD PTR [eax],edx
c002e0e7:	90                   	nop
c002e0e8:	83 c4 0c             	add    esp,0xc
c002e0eb:	c3                   	ret    

c002e0ec <PIT::write(int)>:
c002e0ec:	83 ec 10             	sub    esp,0x10
c002e0ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e0f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e0f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e0fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e101:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002e106:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002e10b:	89 c2                	mov    edx,eax
c002e10d:	c1 fa 1f             	sar    edx,0x1f
c002e110:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002e114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e118:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002e11f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e124:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e128:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e12d:	ee                   	out    dx,al
c002e12e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e132:	0f b6 c0             	movzx  eax,al
c002e135:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e13c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e140:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e144:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e149:	ee                   	out    dx,al
c002e14a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e14e:	c1 f8 08             	sar    eax,0x8
c002e151:	0f b6 c0             	movzx  eax,al
c002e154:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e15b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e15f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e163:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e168:	ee                   	out    dx,al
c002e169:	90                   	nop
c002e16a:	83 c4 10             	add    esp,0x10
c002e16d:	c3                   	ret    
c002e16e:	66 90                	xchg   ax,ax

c002e170 <pitHandler(regs*, void*)>:
c002e170:	83 ec 0c             	sub    esp,0xc
c002e173:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002e179:	b8 10 27 00 00       	mov    eax,0x2710
c002e17e:	89 c2                	mov    edx,eax
c002e180:	c1 fa 1f             	sar    edx,0x1f
c002e183:	f7 f9                	idiv   ecx
c002e185:	83 ec 0c             	sub    esp,0xc
c002e188:	50                   	push   eax
c002e189:	e8 ca ee fe ff       	call   c001d058 <timerHandler(unsigned int)>
c002e18e:	83 c4 10             	add    esp,0x10
c002e191:	90                   	nop
c002e192:	83 c4 0c             	add    esp,0xc
c002e195:	c3                   	ret    
c002e196:	66 90                	xchg   ax,ax

c002e198 <PIT::open(int, int, void*)>:
c002e198:	83 ec 0c             	sub    esp,0xc
c002e19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e19f:	8b 00                	mov    eax,DWORD PTR [eax]
c002e1a1:	83 c0 24             	add    eax,0x24
c002e1a4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e1a6:	83 ec 08             	sub    esp,0x8
c002e1a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e1ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e1b1:	ff d0                	call   eax
c002e1b3:	83 c4 10             	add    esp,0x10
c002e1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1ba:	83 ec 0c             	sub    esp,0xc
c002e1bd:	6a 00                	push   0x0
c002e1bf:	6a 01                	push   0x1
c002e1c1:	68 70 e1 02 c0       	push   0xc002e170
c002e1c6:	6a 00                	push   0x0
c002e1c8:	50                   	push   eax
c002e1c9:	e8 be d3 fe ff       	call   c001b58c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e1ce:	83 c4 20             	add    esp,0x20
c002e1d1:	89 c2                	mov    edx,eax
c002e1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e1dd:	b8 00 00 00 00       	mov    eax,0x0
c002e1e2:	83 c4 0c             	add    esp,0xc
c002e1e5:	c3                   	ret    
c002e1e6:	66 90                	xchg   ax,ax

c002e1e8 <PIT::close(int, int, void*)>:
c002e1e8:	83 ec 0c             	sub    esp,0xc
c002e1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1ef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1fd:	6a 01                	push   0x1
c002e1ff:	68 70 e1 02 c0       	push   0xc002e170
c002e204:	6a 00                	push   0x0
c002e206:	50                   	push   eax
c002e207:	e8 b6 d3 fe ff       	call   c001b5c2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e20c:	83 c4 10             	add    esp,0x10
c002e20f:	b8 00 00 00 00       	mov    eax,0x0
c002e214:	83 c4 0c             	add    esp,0xc
c002e217:	c3                   	ret    

c002e218 <PIT::PIT()>:
c002e218:	83 ec 0c             	sub    esp,0xc
c002e21b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e21f:	83 ec 08             	sub    esp,0x8
c002e222:	68 c8 3e 03 c0       	push   0xc0033ec8
c002e227:	50                   	push   eax
c002e228:	e8 5f ed fe ff       	call   c001cf8c <Timer::Timer(char const*)>
c002e22d:	83 c4 10             	add    esp,0x10
c002e230:	ba f0 3e 03 c0       	mov    edx,0xc0033ef0
c002e235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e239:	89 10                	mov    DWORD PTR [eax],edx
c002e23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e23f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e245:	0f b6 d0             	movzx  edx,al
c002e248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e24c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e257:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e25d:	0f b6 d0             	movzx  edx,al
c002e260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e264:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e26d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e273:	8d 50 01             	lea    edx,[eax+0x1]
c002e276:	88 d1                	mov    cl,dl
c002e278:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e27c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e282:	0f b6 d0             	movzx  edx,al
c002e285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e289:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e28d:	83 e1 3f             	and    ecx,0x3f
c002e290:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e294:	90                   	nop
c002e295:	83 c4 0c             	add    esp,0xc
c002e298:	c3                   	ret    
c002e299:	66 90                	xchg   ax,ax
c002e29b:	66 90                	xchg   ax,ax
c002e29d:	66 90                	xchg   ax,ax
c002e29f:	90                   	nop

c002e2a0 <avxDetect>:
c002e2a0:	b8 01 00 00 00       	mov    eax,0x1
c002e2a5:	0f a2                	cpuid  
c002e2a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e2ad:	74 15                	je     c002e2c4 <avxDetect.noAVX>
c002e2af:	b8 01 00 00 00       	mov    eax,0x1
c002e2b4:	0f a2                	cpuid  
c002e2b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e2bc:	74 06                	je     c002e2c4 <avxDetect.noAVX>
c002e2be:	b8 01 00 00 00       	mov    eax,0x1
c002e2c3:	c3                   	ret    

c002e2c4 <avxDetect.noAVX>:
c002e2c4:	b8 00 00 00 00       	mov    eax,0x0
c002e2c9:	c3                   	ret    

c002e2ca <avxSave>:
c002e2ca:	53                   	push   ebx
c002e2cb:	52                   	push   edx
c002e2cc:	31 c0                	xor    eax,eax
c002e2ce:	48                   	dec    eax
c002e2cf:	89 c2                	mov    edx,eax
c002e2d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e2d5:	0f ae 23             	xsave  [ebx]
c002e2d8:	5a                   	pop    edx
c002e2d9:	5b                   	pop    ebx
c002e2da:	c3                   	ret    

c002e2db <avxLoad>:
c002e2db:	53                   	push   ebx
c002e2dc:	52                   	push   edx
c002e2dd:	31 c0                	xor    eax,eax
c002e2df:	48                   	dec    eax
c002e2e0:	89 c2                	mov    edx,eax
c002e2e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e2e6:	0f ae 2b             	xrstor [ebx]
c002e2e9:	5a                   	pop    edx
c002e2ea:	5b                   	pop    ebx
c002e2eb:	c3                   	ret    

c002e2ec <avxInit>:
c002e2ec:	e8 47 03 00 00       	call   c002e638 <sseInit>
c002e2f1:	50                   	push   eax
c002e2f2:	51                   	push   ecx
c002e2f3:	0f 20 e0             	mov    eax,cr4
c002e2f6:	0d 00 00 04 00       	or     eax,0x40000
c002e2fb:	0f 22 e0             	mov    cr4,eax
c002e2fe:	31 c9                	xor    ecx,ecx
c002e300:	0f 01 d0             	xgetbv 
c002e303:	0d 07 00 00 00       	or     eax,0x7
c002e308:	0f 01 d1             	xsetbv 
c002e30b:	59                   	pop    ecx
c002e30c:	58                   	pop    eax
c002e30d:	c3                   	ret    

c002e30e <avxClose>:
c002e30e:	c3                   	ret    
c002e30f:	90                   	nop

c002e310 <isr0>:
c002e310:	fa                   	cli    
c002e311:	68 00 00 00 00       	push   0x0
c002e316:	68 00 00 00 00       	push   0x0
c002e31b:	e9 56 01 00 00       	jmp    c002e476 <int_common_stub>

c002e320 <isr1>:
c002e320:	fa                   	cli    
c002e321:	6a 00                	push   0x0
c002e323:	6a 01                	push   0x1
c002e325:	e9 4c 01 00 00       	jmp    c002e476 <int_common_stub>

c002e32a <isr2>:
c002e32a:	fa                   	cli    
c002e32b:	6a 00                	push   0x0
c002e32d:	6a 02                	push   0x2
c002e32f:	e9 42 01 00 00       	jmp    c002e476 <int_common_stub>

c002e334 <isr3>:
c002e334:	fa                   	cli    
c002e335:	6a 00                	push   0x0
c002e337:	6a 03                	push   0x3
c002e339:	e9 38 01 00 00       	jmp    c002e476 <int_common_stub>

c002e33e <isr4>:
c002e33e:	fa                   	cli    
c002e33f:	6a 00                	push   0x0
c002e341:	6a 04                	push   0x4
c002e343:	e9 2e 01 00 00       	jmp    c002e476 <int_common_stub>

c002e348 <isr5>:
c002e348:	fa                   	cli    
c002e349:	6a 00                	push   0x0
c002e34b:	6a 05                	push   0x5
c002e34d:	e9 24 01 00 00       	jmp    c002e476 <int_common_stub>

c002e352 <isr6>:
c002e352:	fa                   	cli    
c002e353:	6a 00                	push   0x0
c002e355:	6a 06                	push   0x6
c002e357:	e9 1a 01 00 00       	jmp    c002e476 <int_common_stub>

c002e35c <isr7>:
c002e35c:	fa                   	cli    
c002e35d:	6a 00                	push   0x0
c002e35f:	6a 07                	push   0x7
c002e361:	e9 10 01 00 00       	jmp    c002e476 <int_common_stub>

c002e366 <isr8>:
c002e366:	fa                   	cli    
c002e367:	6a 08                	push   0x8
c002e369:	e9 08 01 00 00       	jmp    c002e476 <int_common_stub>

c002e36e <isr9>:
c002e36e:	fa                   	cli    
c002e36f:	6a 00                	push   0x0
c002e371:	6a 09                	push   0x9
c002e373:	e9 fe 00 00 00       	jmp    c002e476 <int_common_stub>

c002e378 <isr10>:
c002e378:	fa                   	cli    
c002e379:	6a 0a                	push   0xa
c002e37b:	e9 f6 00 00 00       	jmp    c002e476 <int_common_stub>

c002e380 <isr11>:
c002e380:	fa                   	cli    
c002e381:	6a 0b                	push   0xb
c002e383:	e9 ee 00 00 00       	jmp    c002e476 <int_common_stub>

c002e388 <isr12>:
c002e388:	fa                   	cli    
c002e389:	6a 0c                	push   0xc
c002e38b:	e9 e6 00 00 00       	jmp    c002e476 <int_common_stub>

c002e390 <isr13>:
c002e390:	fa                   	cli    
c002e391:	6a 0d                	push   0xd
c002e393:	53                   	push   ebx
c002e394:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e398:	81 fb 66 e5 02 c0    	cmp    ebx,0xc002e566
c002e39e:	5b                   	pop    ebx
c002e39f:	0f 84 c3 01 00 00    	je     c002e568 <finishSignal2>
c002e3a5:	e9 cc 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3aa <isr14>:
c002e3aa:	fa                   	cli    
c002e3ab:	6a 0e                	push   0xe
c002e3ad:	e9 c4 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3b2 <isr15>:
c002e3b2:	fa                   	cli    
c002e3b3:	6a 00                	push   0x0
c002e3b5:	6a 0f                	push   0xf
c002e3b7:	e9 ba 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3bc <isr16>:
c002e3bc:	fa                   	cli    
c002e3bd:	6a 00                	push   0x0
c002e3bf:	6a 10                	push   0x10
c002e3c1:	e9 b0 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3c6 <isr17>:
c002e3c6:	fa                   	cli    
c002e3c7:	6a 00                	push   0x0
c002e3c9:	6a 11                	push   0x11
c002e3cb:	e9 a6 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3d0 <isr18>:
c002e3d0:	fa                   	cli    
c002e3d1:	6a 00                	push   0x0
c002e3d3:	6a 12                	push   0x12
c002e3d5:	e9 9c 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3da <irq3>:
c002e3da:	fa                   	cli    
c002e3db:	6a 00                	push   0x0
c002e3dd:	6a 23                	push   0x23
c002e3df:	e9 92 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3e4 <irq4>:
c002e3e4:	fa                   	cli    
c002e3e5:	6a 00                	push   0x0
c002e3e7:	6a 24                	push   0x24
c002e3e9:	e9 88 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3ee <irq5>:
c002e3ee:	fa                   	cli    
c002e3ef:	6a 00                	push   0x0
c002e3f1:	6a 25                	push   0x25
c002e3f3:	e9 7e 00 00 00       	jmp    c002e476 <int_common_stub>

c002e3f8 <irq6>:
c002e3f8:	fa                   	cli    
c002e3f9:	6a 00                	push   0x0
c002e3fb:	6a 26                	push   0x26
c002e3fd:	e9 74 00 00 00       	jmp    c002e476 <int_common_stub>

c002e402 <irq7>:
c002e402:	fa                   	cli    
c002e403:	6a 00                	push   0x0
c002e405:	6a 27                	push   0x27
c002e407:	e9 6a 00 00 00       	jmp    c002e476 <int_common_stub>

c002e40c <irq8>:
c002e40c:	fa                   	cli    
c002e40d:	6a 00                	push   0x0
c002e40f:	6a 28                	push   0x28
c002e411:	e9 60 00 00 00       	jmp    c002e476 <int_common_stub>

c002e416 <irq9>:
c002e416:	fa                   	cli    
c002e417:	6a 00                	push   0x0
c002e419:	6a 29                	push   0x29
c002e41b:	e9 56 00 00 00       	jmp    c002e476 <int_common_stub>

c002e420 <irq10>:
c002e420:	fa                   	cli    
c002e421:	6a 00                	push   0x0
c002e423:	6a 2a                	push   0x2a
c002e425:	e9 4c 00 00 00       	jmp    c002e476 <int_common_stub>

c002e42a <irq11>:
c002e42a:	fa                   	cli    
c002e42b:	6a 00                	push   0x0
c002e42d:	6a 2b                	push   0x2b
c002e42f:	e9 42 00 00 00       	jmp    c002e476 <int_common_stub>

c002e434 <irq12>:
c002e434:	fa                   	cli    
c002e435:	6a 00                	push   0x0
c002e437:	6a 2c                	push   0x2c
c002e439:	e9 38 00 00 00       	jmp    c002e476 <int_common_stub>

c002e43e <irq13>:
c002e43e:	fa                   	cli    
c002e43f:	6a 00                	push   0x0
c002e441:	6a 2d                	push   0x2d
c002e443:	e9 2e 00 00 00       	jmp    c002e476 <int_common_stub>

c002e448 <irq14>:
c002e448:	fa                   	cli    
c002e449:	6a 00                	push   0x0
c002e44b:	6a 2e                	push   0x2e
c002e44d:	e9 24 00 00 00       	jmp    c002e476 <int_common_stub>

c002e452 <irq15>:
c002e452:	fa                   	cli    
c002e453:	6a 00                	push   0x0
c002e455:	6a 2f                	push   0x2f
c002e457:	e9 1a 00 00 00       	jmp    c002e476 <int_common_stub>

c002e45c <irq1>:
c002e45c:	fa                   	cli    
c002e45d:	6a 00                	push   0x0
c002e45f:	6a 21                	push   0x21
c002e461:	eb 13                	jmp    c002e476 <int_common_stub>

c002e463 <irq2>:
c002e463:	fa                   	cli    
c002e464:	6a 00                	push   0x0
c002e466:	6a 22                	push   0x22
c002e468:	eb 0c                	jmp    c002e476 <int_common_stub>

c002e46a <isr96>:
c002e46a:	6a 00                	push   0x0
c002e46c:	6a 60                	push   0x60
c002e46e:	fb                   	sti    
c002e46f:	eb 37                	jmp    c002e4a8 <syscall_common_stub>

c002e471 <irq0>:
c002e471:	fa                   	cli    
c002e472:	6a 00                	push   0x0
c002e474:	6a 20                	push   0x20

c002e476 <int_common_stub>:
c002e476:	60                   	pusha  
c002e477:	1e                   	push   ds
c002e478:	06                   	push   es
c002e479:	0f a0                	push   fs
c002e47b:	0f a8                	push   gs
c002e47d:	66 b8 10 00          	mov    ax,0x10
c002e481:	66 8e d8             	mov    ds,ax
c002e484:	66 8e c0             	mov    es,ax
c002e487:	66 8e e0             	mov    fs,ax
c002e48a:	66 8e e8             	mov    gs,ax
c002e48d:	54                   	push   esp
c002e48e:	fc                   	cld    
c002e48f:	e8 0c d6 fe ff       	call   c001baa0 <int_handler>
c002e494:	81 c4 04 00 00 00    	add    esp,0x4
c002e49a:	0f a9                	pop    gs
c002e49c:	0f a1                	pop    fs
c002e49e:	07                   	pop    es
c002e49f:	1f                   	pop    ds
c002e4a0:	61                   	popa   
c002e4a1:	81 c4 08 00 00 00    	add    esp,0x8
c002e4a7:	cf                   	iret   

c002e4a8 <syscall_common_stub>:
c002e4a8:	60                   	pusha  
c002e4a9:	1e                   	push   ds
c002e4aa:	06                   	push   es
c002e4ab:	0f a0                	push   fs
c002e4ad:	0f a8                	push   gs
c002e4af:	66 b8 10 00          	mov    ax,0x10
c002e4b3:	66 8e d8             	mov    ds,ax
c002e4b6:	66 8e c0             	mov    es,ax
c002e4b9:	66 8e e0             	mov    fs,ax
c002e4bc:	66 8e e8             	mov    gs,ax
c002e4bf:	54                   	push   esp
c002e4c0:	fc                   	cld    
c002e4c1:	e8 da d5 fe ff       	call   c001baa0 <int_handler>
c002e4c6:	81 c4 04 00 00 00    	add    esp,0x4
c002e4cc:	0f a9                	pop    gs
c002e4ce:	0f a1                	pop    fs
c002e4d0:	07                   	pop    es
c002e4d1:	1f                   	pop    ds
c002e4d2:	e8 21 2a ff ff       	call   c0020ef8 <KiCheckSignalZ>
c002e4d7:	3d 00 00 00 00       	cmp    eax,0x0
c002e4dc:	0f 84 c0 00 00 00    	je     c002e5a2 <skipSignals>
c002e4e2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e4e7:	61                   	popa   
c002e4e8:	53                   	push   ebx
c002e4e9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e4ef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e4f2:	5b                   	pop    ebx
c002e4f3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e4f8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e4fb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e4fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e501:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e504:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e507:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e50a:	81 c4 08 00 00 00    	add    esp,0x8
c002e510:	5e                   	pop    esi
c002e511:	5b                   	pop    ebx
c002e512:	59                   	pop    ecx
c002e513:	5a                   	pop    edx
c002e514:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e517:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e51a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e51d:	52                   	push   edx
c002e51e:	51                   	push   ecx
c002e51f:	53                   	push   ebx
c002e520:	56                   	push   esi
c002e521:	81 ec 08 00 00 00    	sub    esp,0x8
c002e527:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e52a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e52d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e530:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e533:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e536:	60                   	pusha  
c002e537:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e53d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e540:	89 e3                	mov    ebx,esp
c002e542:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e545:	52                   	push   edx
c002e546:	68 66 e5 02 c0       	push   0xc002e566
c002e54b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e54e:	89 dc                	mov    esp,ebx
c002e550:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e553:	68 23 00 00 00       	push   0x23
c002e558:	51                   	push   ecx
c002e559:	68 02 02 00 00       	push   0x202
c002e55e:	68 1b 00 00 00       	push   0x1b
c002e563:	ff 36                	push   DWORD PTR [esi]
c002e565:	cf                   	iret   

c002e566 <finishSignal>:
c002e566:	cd 0f                	int    0xf

c002e568 <finishSignal2>:
c002e568:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e56e:	e8 02 2a ff ff       	call   c0020f75 <KiFinishSignalZ>
c002e573:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e579:	68 23 00 00 00       	push   0x23
c002e57e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e581:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e584:	68 1b 00 00 00       	push   0x1b
c002e589:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e58c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e58f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e592:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e595:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e598:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e59b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e59e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e5a1:	cf                   	iret   

c002e5a2 <skipSignals>:
c002e5a2:	61                   	popa   
c002e5a3:	81 c4 08 00 00 00    	add    esp,0x8
c002e5a9:	cf                   	iret   
c002e5aa:	90                   	nop
c002e5ab:	90                   	nop

c002e5ac <irq16>:
c002e5ac:	fa                   	cli    
c002e5ad:	6a 00                	push   0x0
c002e5af:	6a 30                	push   0x30
c002e5b1:	e9 c0 fe ff ff       	jmp    c002e476 <int_common_stub>

c002e5b6 <irq17>:
c002e5b6:	fa                   	cli    
c002e5b7:	6a 00                	push   0x0
c002e5b9:	6a 31                	push   0x31
c002e5bb:	e9 b6 fe ff ff       	jmp    c002e476 <int_common_stub>

c002e5c0 <irq18>:
c002e5c0:	fa                   	cli    
c002e5c1:	6a 00                	push   0x0
c002e5c3:	6a 32                	push   0x32
c002e5c5:	e9 ac fe ff ff       	jmp    c002e476 <int_common_stub>

c002e5ca <irq19>:
c002e5ca:	fa                   	cli    
c002e5cb:	6a 00                	push   0x0
c002e5cd:	6a 33                	push   0x33
c002e5cf:	e9 a2 fe ff ff       	jmp    c002e476 <int_common_stub>

c002e5d4 <irq20>:
c002e5d4:	fa                   	cli    
c002e5d5:	6a 00                	push   0x0
c002e5d7:	6a 34                	push   0x34
c002e5d9:	e9 98 fe ff ff       	jmp    c002e476 <int_common_stub>

c002e5de <irq21>:
c002e5de:	fa                   	cli    
c002e5df:	6a 00                	push   0x0
c002e5e1:	6a 35                	push   0x35
c002e5e3:	e9 8e fe ff ff       	jmp    c002e476 <int_common_stub>

c002e5e8 <irq22>:
c002e5e8:	fa                   	cli    
c002e5e9:	6a 00                	push   0x0
c002e5eb:	6a 36                	push   0x36
c002e5ed:	e9 84 fe ff ff       	jmp    c002e476 <int_common_stub>

c002e5f2 <irq23>:
c002e5f2:	fa                   	cli    
c002e5f3:	6a 00                	push   0x0
c002e5f5:	6a 37                	push   0x37
c002e5f7:	e9 7a fe ff ff       	jmp    c002e476 <int_common_stub>
c002e5fc:	66 90                	xchg   ax,ax
c002e5fe:	66 90                	xchg   ax,ax

c002e600 <i386GetRDRAND>:
c002e600:	b9 64 00 00 00       	mov    ecx,0x64

c002e605 <retry>:
c002e605:	0f c7 f0             	rdrand eax
c002e608:	72 05                	jb     c002e60f <retry.done>
c002e60a:	e2 f9                	loop   c002e605 <retry>

c002e60c <retry.fail>:
c002e60c:	31 c0                	xor    eax,eax
c002e60e:	c3                   	ret    

c002e60f <retry.done>:
c002e60f:	c3                   	ret    

c002e610 <sseDetect>:
c002e610:	b8 01 00 00 00       	mov    eax,0x1
c002e615:	0f a2                	cpuid  
c002e617:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e61d:	74 06                	je     c002e625 <sseDetect.noSSE>
c002e61f:	b8 01 00 00 00       	mov    eax,0x1
c002e624:	c3                   	ret    

c002e625 <sseDetect.noSSE>:
c002e625:	31 c0                	xor    eax,eax
c002e627:	c3                   	ret    

c002e628 <sseSave>:
c002e628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e62c:	0f ae 00             	fxsave [eax]
c002e62f:	c3                   	ret    

c002e630 <sseLoad>:
c002e630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e634:	0f ae 08             	fxrstor [eax]
c002e637:	c3                   	ret    

c002e638 <sseInit>:
c002e638:	e8 42 00 00 00       	call   c002e67f <x87Init>
c002e63d:	0f 20 e0             	mov    eax,cr4
c002e640:	66 0d 00 06          	or     ax,0x600
c002e644:	0f 22 e0             	mov    cr4,eax
c002e647:	c3                   	ret    

c002e648 <sseClose>:
c002e648:	c3                   	ret    
c002e649:	66 90                	xchg   ax,ax
c002e64b:	66 90                	xchg   ax,ax
c002e64d:	66 90                	xchg   ax,ax
c002e64f:	90                   	nop

c002e650 <value_37F>:
c002e650:	7f 03                	jg     c002e655 <value_37A+0x1>

c002e652 <value_37E>:
c002e652:	7e 03                	jle    c002e657 <x87Detect+0x1>

c002e654 <value_37A>:
c002e654:	7a 03                	jp     c002e659 <x87Detect+0x3>

c002e656 <x87Detect>:
c002e656:	b8 01 00 00 00       	mov    eax,0x1
c002e65b:	0f a2                	cpuid  
c002e65d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e663:	74 06                	je     c002e66b <x87Detect.nox87>
c002e665:	b8 01 00 00 00       	mov    eax,0x1
c002e66a:	c3                   	ret    

c002e66b <x87Detect.nox87>:
c002e66b:	b8 00 00 00 00       	mov    eax,0x0
c002e670:	c3                   	ret    

c002e671 <x87Save>:
c002e671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e675:	dd 30                	fnsave [eax]
c002e677:	c3                   	ret    

c002e678 <x87Load>:
c002e678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e67c:	dd 20                	frstor [eax]
c002e67e:	c3                   	ret    

c002e67f <x87Init>:
c002e67f:	0f 20 c0             	mov    eax,cr0
c002e682:	66 25 fb ff          	and    ax,0xfffb
c002e686:	66 0d 22 00          	or     ax,0x22
c002e68a:	0f 22 c0             	mov    cr0,eax
c002e68d:	db e3                	fninit 
c002e68f:	0f 06                	clts   
c002e691:	d9 2d 54 e6 02 c0    	fldcw  WORD PTR ds:0xc002e654
c002e697:	c3                   	ret    

c002e698 <x87Close>:
c002e698:	c3                   	ret    
c002e699:	66 90                	xchg   ax,ax
c002e69b:	90                   	nop

c002e69c <__do_global_ctors_aux>:
c002e69c:	a1 50 f6 02 c0       	mov    eax,ds:0xc002f650
c002e6a1:	83 f8 ff             	cmp    eax,0xffffffff
c002e6a4:	74 1a                	je     c002e6c0 <__do_global_ctors_aux+0x24>
c002e6a6:	55                   	push   ebp
c002e6a7:	89 e5                	mov    ebp,esp
c002e6a9:	53                   	push   ebx
c002e6aa:	52                   	push   edx
c002e6ab:	bb 50 f6 02 c0       	mov    ebx,0xc002f650
c002e6b0:	ff d0                	call   eax
c002e6b2:	83 eb 04             	sub    ebx,0x4
c002e6b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e6b7:	83 f8 ff             	cmp    eax,0xffffffff
c002e6ba:	75 f4                	jne    c002e6b0 <__do_global_ctors_aux+0x14>
c002e6bc:	58                   	pop    eax
c002e6bd:	5b                   	pop    ebx
c002e6be:	5d                   	pop    ebp
c002e6bf:	c3                   	ret    
c002e6c0:	c3                   	ret    
c002e6c1:	66 90                	xchg   ax,ax
c002e6c3:	90                   	nop

c002e6c4 <__divdi3>:
c002e6c4:	55                   	push   ebp
c002e6c5:	57                   	push   edi
c002e6c6:	56                   	push   esi
c002e6c7:	53                   	push   ebx
c002e6c8:	83 ec 1c             	sub    esp,0x1c
c002e6cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e6cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e6d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e6d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e6da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e6de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e6e2:	85 db                	test   ebx,ebx
c002e6e4:	0f 88 8e 00 00 00    	js     c002e778 <__divdi3+0xb4>
c002e6ea:	89 dd                	mov    ebp,ebx
c002e6ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e6f4:	89 d3                	mov    ebx,edx
c002e6f6:	85 d2                	test   edx,edx
c002e6f8:	79 0d                	jns    c002e707 <__divdi3+0x43>
c002e6fa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e6fe:	f7 d8                	neg    eax
c002e700:	83 d2 00             	adc    edx,0x0
c002e703:	f7 da                	neg    edx
c002e705:	89 d3                	mov    ebx,edx
c002e707:	89 c7                	mov    edi,eax
c002e709:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e70c:	85 db                	test   ebx,ebx
c002e70e:	75 48                	jne    c002e758 <__divdi3+0x94>
c002e710:	39 ef                	cmp    edi,ebp
c002e712:	76 24                	jbe    c002e738 <__divdi3+0x74>
c002e714:	89 ea                	mov    edx,ebp
c002e716:	f7 f7                	div    edi
c002e718:	89 c1                	mov    ecx,eax
c002e71a:	31 f6                	xor    esi,esi
c002e71c:	89 c8                	mov    eax,ecx
c002e71e:	89 f2                	mov    edx,esi
c002e720:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e724:	85 c9                	test   ecx,ecx
c002e726:	74 07                	je     c002e72f <__divdi3+0x6b>
c002e728:	f7 d8                	neg    eax
c002e72a:	83 d2 00             	adc    edx,0x0
c002e72d:	f7 da                	neg    edx
c002e72f:	83 c4 1c             	add    esp,0x1c
c002e732:	5b                   	pop    ebx
c002e733:	5e                   	pop    esi
c002e734:	5f                   	pop    edi
c002e735:	5d                   	pop    ebp
c002e736:	c3                   	ret    
c002e737:	90                   	nop
c002e738:	85 ff                	test   edi,edi
c002e73a:	75 0b                	jne    c002e747 <__divdi3+0x83>
c002e73c:	b8 01 00 00 00       	mov    eax,0x1
c002e741:	31 d2                	xor    edx,edx
c002e743:	f7 f3                	div    ebx
c002e745:	89 c7                	mov    edi,eax
c002e747:	31 d2                	xor    edx,edx
c002e749:	89 e8                	mov    eax,ebp
c002e74b:	f7 f7                	div    edi
c002e74d:	89 c6                	mov    esi,eax
c002e74f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e752:	f7 f7                	div    edi
c002e754:	89 c1                	mov    ecx,eax
c002e756:	eb c4                	jmp    c002e71c <__divdi3+0x58>
c002e758:	39 eb                	cmp    ebx,ebp
c002e75a:	77 3c                	ja     c002e798 <__divdi3+0xd4>
c002e75c:	0f bd f3             	bsr    esi,ebx
c002e75f:	83 f6 1f             	xor    esi,0x1f
c002e762:	75 40                	jne    c002e7a4 <__divdi3+0xe0>
c002e764:	39 eb                	cmp    ebx,ebp
c002e766:	72 09                	jb     c002e771 <__divdi3+0xad>
c002e768:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e76b:	0f 87 97 00 00 00    	ja     c002e808 <__divdi3+0x144>
c002e771:	b9 01 00 00 00       	mov    ecx,0x1
c002e776:	eb a4                	jmp    c002e71c <__divdi3+0x58>
c002e778:	f7 d9                	neg    ecx
c002e77a:	83 d3 00             	adc    ebx,0x0
c002e77d:	f7 db                	neg    ebx
c002e77f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e782:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e786:	89 dd                	mov    ebp,ebx
c002e788:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e790:	e9 5f ff ff ff       	jmp    c002e6f4 <__divdi3+0x30>
c002e795:	8d 76 00             	lea    esi,[esi+0x0]
c002e798:	31 f6                	xor    esi,esi
c002e79a:	31 c9                	xor    ecx,ecx
c002e79c:	e9 7b ff ff ff       	jmp    c002e71c <__divdi3+0x58>
c002e7a1:	8d 76 00             	lea    esi,[esi+0x0]
c002e7a4:	b8 20 00 00 00       	mov    eax,0x20
c002e7a9:	29 f0                	sub    eax,esi
c002e7ab:	89 f1                	mov    ecx,esi
c002e7ad:	d3 e3                	shl    ebx,cl
c002e7af:	89 fa                	mov    edx,edi
c002e7b1:	88 c1                	mov    cl,al
c002e7b3:	d3 ea                	shr    edx,cl
c002e7b5:	09 da                	or     edx,ebx
c002e7b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e7bb:	89 f1                	mov    ecx,esi
c002e7bd:	d3 e7                	shl    edi,cl
c002e7bf:	89 eb                	mov    ebx,ebp
c002e7c1:	88 c1                	mov    cl,al
c002e7c3:	d3 eb                	shr    ebx,cl
c002e7c5:	89 f1                	mov    ecx,esi
c002e7c7:	d3 e5                	shl    ebp,cl
c002e7c9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e7cc:	88 c1                	mov    cl,al
c002e7ce:	d3 ea                	shr    edx,cl
c002e7d0:	09 d5                	or     ebp,edx
c002e7d2:	89 e8                	mov    eax,ebp
c002e7d4:	89 da                	mov    edx,ebx
c002e7d6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e7da:	89 d3                	mov    ebx,edx
c002e7dc:	89 c5                	mov    ebp,eax
c002e7de:	f7 e7                	mul    edi
c002e7e0:	39 d3                	cmp    ebx,edx
c002e7e2:	72 18                	jb     c002e7fc <__divdi3+0x138>
c002e7e4:	74 0a                	je     c002e7f0 <__divdi3+0x12c>
c002e7e6:	89 e9                	mov    ecx,ebp
c002e7e8:	31 f6                	xor    esi,esi
c002e7ea:	e9 2d ff ff ff       	jmp    c002e71c <__divdi3+0x58>
c002e7ef:	90                   	nop
c002e7f0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e7f3:	89 f1                	mov    ecx,esi
c002e7f5:	d3 e7                	shl    edi,cl
c002e7f7:	39 c7                	cmp    edi,eax
c002e7f9:	73 eb                	jae    c002e7e6 <__divdi3+0x122>
c002e7fb:	90                   	nop
c002e7fc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e7ff:	31 f6                	xor    esi,esi
c002e801:	e9 16 ff ff ff       	jmp    c002e71c <__divdi3+0x58>
c002e806:	66 90                	xchg   ax,ax
c002e808:	31 c9                	xor    ecx,ecx
c002e80a:	e9 0d ff ff ff       	jmp    c002e71c <__divdi3+0x58>
c002e80f:	90                   	nop

c002e810 <__moddi3>:
c002e810:	55                   	push   ebp
c002e811:	57                   	push   edi
c002e812:	56                   	push   esi
c002e813:	53                   	push   ebx
c002e814:	83 ec 2c             	sub    esp,0x2c
c002e817:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e81b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e81f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e823:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e827:	85 db                	test   ebx,ebx
c002e829:	0f 88 85 00 00 00    	js     c002e8b4 <__moddi3+0xa4>
c002e82f:	89 de                	mov    esi,ebx
c002e831:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e839:	89 d7                	mov    edi,edx
c002e83b:	85 d2                	test   edx,edx
c002e83d:	79 09                	jns    c002e848 <__moddi3+0x38>
c002e83f:	f7 d8                	neg    eax
c002e841:	83 d2 00             	adc    edx,0x0
c002e844:	f7 da                	neg    edx
c002e846:	89 d7                	mov    edi,edx
c002e848:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e84c:	89 cd                	mov    ebp,ecx
c002e84e:	85 ff                	test   edi,edi
c002e850:	75 52                	jne    c002e8a4 <__moddi3+0x94>
c002e852:	89 c3                	mov    ebx,eax
c002e854:	39 f0                	cmp    eax,esi
c002e856:	76 24                	jbe    c002e87c <__moddi3+0x6c>
c002e858:	89 c8                	mov    eax,ecx
c002e85a:	89 f2                	mov    edx,esi
c002e85c:	f7 f3                	div    ebx
c002e85e:	89 d6                	mov    esi,edx
c002e860:	89 f0                	mov    eax,esi
c002e862:	31 d2                	xor    edx,edx
c002e864:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e868:	85 c9                	test   ecx,ecx
c002e86a:	74 07                	je     c002e873 <__moddi3+0x63>
c002e86c:	f7 d8                	neg    eax
c002e86e:	83 d2 00             	adc    edx,0x0
c002e871:	f7 da                	neg    edx
c002e873:	83 c4 2c             	add    esp,0x2c
c002e876:	5b                   	pop    ebx
c002e877:	5e                   	pop    esi
c002e878:	5f                   	pop    edi
c002e879:	5d                   	pop    ebp
c002e87a:	c3                   	ret    
c002e87b:	90                   	nop
c002e87c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e880:	85 db                	test   ebx,ebx
c002e882:	75 0d                	jne    c002e891 <__moddi3+0x81>
c002e884:	b8 01 00 00 00       	mov    eax,0x1
c002e889:	31 d2                	xor    edx,edx
c002e88b:	f7 f7                	div    edi
c002e88d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e891:	89 f0                	mov    eax,esi
c002e893:	31 d2                	xor    edx,edx
c002e895:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e899:	f7 f7                	div    edi
c002e89b:	89 e8                	mov    eax,ebp
c002e89d:	f7 f7                	div    edi
c002e89f:	89 d6                	mov    esi,edx
c002e8a1:	eb bd                	jmp    c002e860 <__moddi3+0x50>
c002e8a3:	90                   	nop
c002e8a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e8a8:	39 f7                	cmp    edi,esi
c002e8aa:	76 20                	jbe    c002e8cc <__moddi3+0xbc>
c002e8ac:	89 c8                	mov    eax,ecx
c002e8ae:	89 f2                	mov    edx,esi
c002e8b0:	eb b2                	jmp    c002e864 <__moddi3+0x54>
c002e8b2:	66 90                	xchg   ax,ax
c002e8b4:	f7 d9                	neg    ecx
c002e8b6:	83 d3 00             	adc    ebx,0x0
c002e8b9:	f7 db                	neg    ebx
c002e8bb:	89 de                	mov    esi,ebx
c002e8bd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e8c5:	e9 6f ff ff ff       	jmp    c002e839 <__moddi3+0x29>
c002e8ca:	66 90                	xchg   ax,ax
c002e8cc:	0f bd c7             	bsr    eax,edi
c002e8cf:	83 f0 1f             	xor    eax,0x1f
c002e8d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e8d6:	75 24                	jne    c002e8fc <__moddi3+0xec>
c002e8d8:	39 f7                	cmp    edi,esi
c002e8da:	72 06                	jb     c002e8e2 <__moddi3+0xd2>
c002e8dc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e8e0:	77 0c                	ja     c002e8ee <__moddi3+0xde>
c002e8e2:	89 e9                	mov    ecx,ebp
c002e8e4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e8e8:	19 fe                	sbb    esi,edi
c002e8ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e8ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e8f2:	89 f2                	mov    edx,esi
c002e8f4:	e9 6b ff ff ff       	jmp    c002e864 <__moddi3+0x54>
c002e8f9:	8d 76 00             	lea    esi,[esi+0x0]
c002e8fc:	b8 20 00 00 00       	mov    eax,0x20
c002e901:	89 c2                	mov    edx,eax
c002e903:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e907:	29 da                	sub    edx,ebx
c002e909:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e90d:	88 d9                	mov    cl,bl
c002e90f:	d3 e7                	shl    edi,cl
c002e911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e915:	88 d1                	mov    cl,dl
c002e917:	d3 e8                	shr    eax,cl
c002e919:	09 c7                	or     edi,eax
c002e91b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e91f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e923:	89 d8                	mov    eax,ebx
c002e925:	88 d9                	mov    cl,bl
c002e927:	d3 e7                	shl    edi,cl
c002e929:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e92d:	89 f3                	mov    ebx,esi
c002e92f:	88 d1                	mov    cl,dl
c002e931:	d3 eb                	shr    ebx,cl
c002e933:	89 c7                	mov    edi,eax
c002e935:	88 c1                	mov    cl,al
c002e937:	d3 e6                	shl    esi,cl
c002e939:	89 e8                	mov    eax,ebp
c002e93b:	88 d1                	mov    cl,dl
c002e93d:	d3 e8                	shr    eax,cl
c002e93f:	09 f0                	or     eax,esi
c002e941:	89 f9                	mov    ecx,edi
c002e943:	d3 e5                	shl    ebp,cl
c002e945:	89 da                	mov    edx,ebx
c002e947:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e94b:	89 d3                	mov    ebx,edx
c002e94d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e951:	89 c6                	mov    esi,eax
c002e953:	89 d1                	mov    ecx,edx
c002e955:	39 d3                	cmp    ebx,edx
c002e957:	72 27                	jb     c002e980 <__moddi3+0x170>
c002e959:	74 21                	je     c002e97c <__moddi3+0x16c>
c002e95b:	29 f5                	sub    ebp,esi
c002e95d:	19 cb                	sbb    ebx,ecx
c002e95f:	89 de                	mov    esi,ebx
c002e961:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e965:	d3 e6                	shl    esi,cl
c002e967:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e96b:	89 f9                	mov    ecx,edi
c002e96d:	d3 ed                	shr    ebp,cl
c002e96f:	09 ee                	or     esi,ebp
c002e971:	89 f0                	mov    eax,esi
c002e973:	d3 eb                	shr    ebx,cl
c002e975:	89 da                	mov    edx,ebx
c002e977:	e9 e8 fe ff ff       	jmp    c002e864 <__moddi3+0x54>
c002e97c:	39 c5                	cmp    ebp,eax
c002e97e:	73 db                	jae    c002e95b <__moddi3+0x14b>
c002e980:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e984:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e988:	89 d1                	mov    ecx,edx
c002e98a:	89 c6                	mov    esi,eax
c002e98c:	eb cd                	jmp    c002e95b <__moddi3+0x14b>
c002e98e:	66 90                	xchg   ax,ax

c002e990 <__udivdi3>:
c002e990:	55                   	push   ebp
c002e991:	57                   	push   edi
c002e992:	56                   	push   esi
c002e993:	53                   	push   ebx
c002e994:	83 ec 1c             	sub    esp,0x1c
c002e997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e99b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e99f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e9a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e9a7:	85 d2                	test   edx,edx
c002e9a9:	75 41                	jne    c002e9ec <__udivdi3+0x5c>
c002e9ab:	39 f7                	cmp    edi,esi
c002e9ad:	76 15                	jbe    c002e9c4 <__udivdi3+0x34>
c002e9af:	89 e8                	mov    eax,ebp
c002e9b1:	89 f2                	mov    edx,esi
c002e9b3:	f7 f7                	div    edi
c002e9b5:	31 db                	xor    ebx,ebx
c002e9b7:	89 da                	mov    edx,ebx
c002e9b9:	83 c4 1c             	add    esp,0x1c
c002e9bc:	5b                   	pop    ebx
c002e9bd:	5e                   	pop    esi
c002e9be:	5f                   	pop    edi
c002e9bf:	5d                   	pop    ebp
c002e9c0:	c3                   	ret    
c002e9c1:	8d 76 00             	lea    esi,[esi+0x0]
c002e9c4:	89 f9                	mov    ecx,edi
c002e9c6:	85 ff                	test   edi,edi
c002e9c8:	75 0b                	jne    c002e9d5 <__udivdi3+0x45>
c002e9ca:	b8 01 00 00 00       	mov    eax,0x1
c002e9cf:	31 d2                	xor    edx,edx
c002e9d1:	f7 f7                	div    edi
c002e9d3:	89 c1                	mov    ecx,eax
c002e9d5:	31 d2                	xor    edx,edx
c002e9d7:	89 f0                	mov    eax,esi
c002e9d9:	f7 f1                	div    ecx
c002e9db:	89 c3                	mov    ebx,eax
c002e9dd:	89 e8                	mov    eax,ebp
c002e9df:	f7 f1                	div    ecx
c002e9e1:	89 da                	mov    edx,ebx
c002e9e3:	83 c4 1c             	add    esp,0x1c
c002e9e6:	5b                   	pop    ebx
c002e9e7:	5e                   	pop    esi
c002e9e8:	5f                   	pop    edi
c002e9e9:	5d                   	pop    ebp
c002e9ea:	c3                   	ret    
c002e9eb:	90                   	nop
c002e9ec:	39 f2                	cmp    edx,esi
c002e9ee:	77 1c                	ja     c002ea0c <__udivdi3+0x7c>
c002e9f0:	0f bd da             	bsr    ebx,edx
c002e9f3:	83 f3 1f             	xor    ebx,0x1f
c002e9f6:	75 24                	jne    c002ea1c <__udivdi3+0x8c>
c002e9f8:	39 f2                	cmp    edx,esi
c002e9fa:	72 08                	jb     c002ea04 <__udivdi3+0x74>
c002e9fc:	39 ef                	cmp    edi,ebp
c002e9fe:	0f 87 84 00 00 00    	ja     c002ea88 <__udivdi3+0xf8>
c002ea04:	b8 01 00 00 00       	mov    eax,0x1
c002ea09:	eb ac                	jmp    c002e9b7 <__udivdi3+0x27>
c002ea0b:	90                   	nop
c002ea0c:	31 db                	xor    ebx,ebx
c002ea0e:	31 c0                	xor    eax,eax
c002ea10:	89 da                	mov    edx,ebx
c002ea12:	83 c4 1c             	add    esp,0x1c
c002ea15:	5b                   	pop    ebx
c002ea16:	5e                   	pop    esi
c002ea17:	5f                   	pop    edi
c002ea18:	5d                   	pop    ebp
c002ea19:	c3                   	ret    
c002ea1a:	66 90                	xchg   ax,ax
c002ea1c:	b8 20 00 00 00       	mov    eax,0x20
c002ea21:	29 d8                	sub    eax,ebx
c002ea23:	88 d9                	mov    cl,bl
c002ea25:	d3 e2                	shl    edx,cl
c002ea27:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002ea2b:	89 fa                	mov    edx,edi
c002ea2d:	88 c1                	mov    cl,al
c002ea2f:	d3 ea                	shr    edx,cl
c002ea31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ea35:	09 d1                	or     ecx,edx
c002ea37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ea3b:	88 d9                	mov    cl,bl
c002ea3d:	d3 e7                	shl    edi,cl
c002ea3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ea43:	89 f7                	mov    edi,esi
c002ea45:	88 c1                	mov    cl,al
c002ea47:	d3 ef                	shr    edi,cl
c002ea49:	88 d9                	mov    cl,bl
c002ea4b:	d3 e6                	shl    esi,cl
c002ea4d:	89 ea                	mov    edx,ebp
c002ea4f:	88 c1                	mov    cl,al
c002ea51:	d3 ea                	shr    edx,cl
c002ea53:	09 d6                	or     esi,edx
c002ea55:	89 f0                	mov    eax,esi
c002ea57:	89 fa                	mov    edx,edi
c002ea59:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ea5d:	89 d7                	mov    edi,edx
c002ea5f:	89 c6                	mov    esi,eax
c002ea61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ea65:	39 d7                	cmp    edi,edx
c002ea67:	72 13                	jb     c002ea7c <__udivdi3+0xec>
c002ea69:	74 09                	je     c002ea74 <__udivdi3+0xe4>
c002ea6b:	89 f0                	mov    eax,esi
c002ea6d:	31 db                	xor    ebx,ebx
c002ea6f:	e9 43 ff ff ff       	jmp    c002e9b7 <__udivdi3+0x27>
c002ea74:	88 d9                	mov    cl,bl
c002ea76:	d3 e5                	shl    ebp,cl
c002ea78:	39 c5                	cmp    ebp,eax
c002ea7a:	73 ef                	jae    c002ea6b <__udivdi3+0xdb>
c002ea7c:	8d 46 ff             	lea    eax,[esi-0x1]
c002ea7f:	31 db                	xor    ebx,ebx
c002ea81:	e9 31 ff ff ff       	jmp    c002e9b7 <__udivdi3+0x27>
c002ea86:	66 90                	xchg   ax,ax
c002ea88:	31 c0                	xor    eax,eax
c002ea8a:	e9 28 ff ff ff       	jmp    c002e9b7 <__udivdi3+0x27>
c002ea8f:	90                   	nop

c002ea90 <__umoddi3>:
c002ea90:	55                   	push   ebp
c002ea91:	57                   	push   edi
c002ea92:	56                   	push   esi
c002ea93:	53                   	push   ebx
c002ea94:	83 ec 1c             	sub    esp,0x1c
c002ea97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ea9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ea9f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002eaa3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002eaa7:	89 da                	mov    edx,ebx
c002eaa9:	85 c0                	test   eax,eax
c002eaab:	75 37                	jne    c002eae4 <__umoddi3+0x54>
c002eaad:	39 df                	cmp    edi,ebx
c002eaaf:	76 13                	jbe    c002eac4 <__umoddi3+0x34>
c002eab1:	89 f0                	mov    eax,esi
c002eab3:	f7 f7                	div    edi
c002eab5:	89 d0                	mov    eax,edx
c002eab7:	31 d2                	xor    edx,edx
c002eab9:	83 c4 1c             	add    esp,0x1c
c002eabc:	5b                   	pop    ebx
c002eabd:	5e                   	pop    esi
c002eabe:	5f                   	pop    edi
c002eabf:	5d                   	pop    ebp
c002eac0:	c3                   	ret    
c002eac1:	8d 76 00             	lea    esi,[esi+0x0]
c002eac4:	89 fd                	mov    ebp,edi
c002eac6:	85 ff                	test   edi,edi
c002eac8:	75 0b                	jne    c002ead5 <__umoddi3+0x45>
c002eaca:	b8 01 00 00 00       	mov    eax,0x1
c002eacf:	31 d2                	xor    edx,edx
c002ead1:	f7 f7                	div    edi
c002ead3:	89 c5                	mov    ebp,eax
c002ead5:	89 d8                	mov    eax,ebx
c002ead7:	31 d2                	xor    edx,edx
c002ead9:	f7 f5                	div    ebp
c002eadb:	89 f0                	mov    eax,esi
c002eadd:	f7 f5                	div    ebp
c002eadf:	89 d0                	mov    eax,edx
c002eae1:	eb d4                	jmp    c002eab7 <__umoddi3+0x27>
c002eae3:	90                   	nop
c002eae4:	89 f1                	mov    ecx,esi
c002eae6:	39 d8                	cmp    eax,ebx
c002eae8:	76 0a                	jbe    c002eaf4 <__umoddi3+0x64>
c002eaea:	89 f0                	mov    eax,esi
c002eaec:	83 c4 1c             	add    esp,0x1c
c002eaef:	5b                   	pop    ebx
c002eaf0:	5e                   	pop    esi
c002eaf1:	5f                   	pop    edi
c002eaf2:	5d                   	pop    ebp
c002eaf3:	c3                   	ret    
c002eaf4:	0f bd e8             	bsr    ebp,eax
c002eaf7:	83 f5 1f             	xor    ebp,0x1f
c002eafa:	75 1c                	jne    c002eb18 <__umoddi3+0x88>
c002eafc:	39 d8                	cmp    eax,ebx
c002eafe:	72 04                	jb     c002eb04 <__umoddi3+0x74>
c002eb00:	39 f7                	cmp    edi,esi
c002eb02:	77 08                	ja     c002eb0c <__umoddi3+0x7c>
c002eb04:	89 da                	mov    edx,ebx
c002eb06:	29 fe                	sub    esi,edi
c002eb08:	19 c2                	sbb    edx,eax
c002eb0a:	89 f1                	mov    ecx,esi
c002eb0c:	89 c8                	mov    eax,ecx
c002eb0e:	83 c4 1c             	add    esp,0x1c
c002eb11:	5b                   	pop    ebx
c002eb12:	5e                   	pop    esi
c002eb13:	5f                   	pop    edi
c002eb14:	5d                   	pop    ebp
c002eb15:	c3                   	ret    
c002eb16:	66 90                	xchg   ax,ax
c002eb18:	ba 20 00 00 00       	mov    edx,0x20
c002eb1d:	29 ea                	sub    edx,ebp
c002eb1f:	89 e9                	mov    ecx,ebp
c002eb21:	d3 e0                	shl    eax,cl
c002eb23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002eb27:	89 f8                	mov    eax,edi
c002eb29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002eb2d:	88 d1                	mov    cl,dl
c002eb2f:	d3 e8                	shr    eax,cl
c002eb31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002eb35:	09 c1                	or     ecx,eax
c002eb37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002eb3b:	89 e9                	mov    ecx,ebp
c002eb3d:	d3 e7                	shl    edi,cl
c002eb3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002eb43:	89 d8                	mov    eax,ebx
c002eb45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002eb49:	88 d1                	mov    cl,dl
c002eb4b:	d3 e8                	shr    eax,cl
c002eb4d:	89 c7                	mov    edi,eax
c002eb4f:	89 e9                	mov    ecx,ebp
c002eb51:	d3 e3                	shl    ebx,cl
c002eb53:	89 f0                	mov    eax,esi
c002eb55:	88 d1                	mov    cl,dl
c002eb57:	d3 e8                	shr    eax,cl
c002eb59:	09 d8                	or     eax,ebx
c002eb5b:	89 e9                	mov    ecx,ebp
c002eb5d:	d3 e6                	shl    esi,cl
c002eb5f:	89 f3                	mov    ebx,esi
c002eb61:	89 fa                	mov    edx,edi
c002eb63:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002eb67:	89 d1                	mov    ecx,edx
c002eb69:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002eb6d:	89 c6                	mov    esi,eax
c002eb6f:	89 d7                	mov    edi,edx
c002eb71:	39 d1                	cmp    ecx,edx
c002eb73:	72 27                	jb     c002eb9c <__umoddi3+0x10c>
c002eb75:	74 21                	je     c002eb98 <__umoddi3+0x108>
c002eb77:	89 ca                	mov    edx,ecx
c002eb79:	29 f3                	sub    ebx,esi
c002eb7b:	19 fa                	sbb    edx,edi
c002eb7d:	89 d0                	mov    eax,edx
c002eb7f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002eb83:	d3 e0                	shl    eax,cl
c002eb85:	89 e9                	mov    ecx,ebp
c002eb87:	d3 eb                	shr    ebx,cl
c002eb89:	09 d8                	or     eax,ebx
c002eb8b:	d3 ea                	shr    edx,cl
c002eb8d:	83 c4 1c             	add    esp,0x1c
c002eb90:	5b                   	pop    ebx
c002eb91:	5e                   	pop    esi
c002eb92:	5f                   	pop    edi
c002eb93:	5d                   	pop    ebp
c002eb94:	c3                   	ret    
c002eb95:	8d 76 00             	lea    esi,[esi+0x0]
c002eb98:	39 c3                	cmp    ebx,eax
c002eb9a:	73 db                	jae    c002eb77 <__umoddi3+0xe7>
c002eb9c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002eba0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002eba4:	89 d7                	mov    edi,edx
c002eba6:	89 c6                	mov    esi,eax
c002eba8:	eb cd                	jmp    c002eb77 <__umoddi3+0xe7>

Disassembly of section .init:

c002ebaa <_init>:
c002ebaa:	55                   	push   ebp
c002ebab:	89 e5                	mov    ebp,esp
c002ebad:	e8 42 15 fd ff       	call   c00000f4 <frame_dummy>
c002ebb2:	e8 e5 fa ff ff       	call   c002e69c <__do_global_ctors_aux>
c002ebb7:	5d                   	pop    ebp
c002ebb8:	c3                   	ret    

Disassembly of section .fini:

c002ebb9 <_fini>:
c002ebb9:	55                   	push   ebp
c002ebba:	89 e5                	mov    ebp,esp
c002ebbc:	e8 c3 14 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002ebc1:	5d                   	pop    ebp
c002ebc2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002ebc4 <Computer::~Computer()>:
c002ebc4:	83 ec 0c             	sub    esp,0xc
c002ebc7:	ba 24 14 03 c0       	mov    edx,0xc0031424
c002ebcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebd0:	89 10                	mov    DWORD PTR [eax],edx
c002ebd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebd6:	83 ec 0c             	sub    esp,0xc
c002ebd9:	50                   	push   eax
c002ebda:	e8 03 c9 fe ff       	call   c001b4e2 <Device::~Device()>
c002ebdf:	83 c4 10             	add    esp,0x10
c002ebe2:	90                   	nop
c002ebe3:	83 c4 0c             	add    esp,0xc
c002ebe6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002ebe8 <Computer::~Computer()>:
c002ebe8:	83 ec 0c             	sub    esp,0xc
c002ebeb:	83 ec 0c             	sub    esp,0xc
c002ebee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ebf2:	e8 cd ff ff ff       	call   c002ebc4 <Computer::~Computer()>
c002ebf7:	83 c4 10             	add    esp,0x10
c002ebfa:	83 ec 08             	sub    esp,0x8
c002ebfd:	68 70 01 00 00       	push   0x170
c002ec02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ec06:	e8 41 a8 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002ec0b:	83 c4 10             	add    esp,0x10
c002ec0e:	83 c4 0c             	add    esp,0xc
c002ec11:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002ec12 <idleCommon()>:
c002ec12:	83 ec 0c             	sub    esp,0xc
c002ec15:	fa                   	cli    
c002ec16:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002ec1c:	e8 13 69 ff ff       	call   c0025534 <schedule()>
c002ec21:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ec26:	48                   	dec    eax
c002ec27:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ec2c:	75 01                	jne    c002ec2f <idleCommon()+0x1d>
c002ec2e:	fb                   	sti    
c002ec2f:	83 c4 0c             	add    esp,0xc
c002ec32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002ec34 <LinkedList<UnixFile>::~LinkedList()>:
c002ec34:	90                   	nop
c002ec35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002ec36 <LinkedList<UnixFile>::LinkedList()>:
c002ec36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec76:	90                   	nop
c002ec77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002ec78 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002ec78:	83 ec 0c             	sub    esp,0xc
c002ec7b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ec80:	75 10                	jne    c002ec92 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002ec82:	83 ec 0c             	sub    esp,0xc
c002ec85:	68 7c 16 03 c0       	push   0xc003167c
c002ec8a:	e8 43 18 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ec8f:	83 c4 10             	add    esp,0x10
c002ec92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec96:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec98:	85 c0                	test   eax,eax
c002ec9a:	74 34                	je     c002ecd0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eca3:	85 c0                	test   eax,eax
c002eca5:	74 29                	je     c002ecd0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002eca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ecb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ecb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ecbd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ecc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ecce:	eb 65                	jmp    c002ed35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ecd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecd4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecd6:	85 c0                	test   eax,eax
c002ecd8:	75 4b                	jne    c002ed25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ecda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ece1:	85 c0                	test   eax,eax
c002ece3:	75 40                	jne    c002ed25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ece5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eced:	89 10                	mov    DWORD PTR [eax],edx
c002ecef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ecf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ed08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed0f:	85 c0                	test   eax,eax
c002ed11:	74 22                	je     c002ed35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ed13:	83 ec 0c             	sub    esp,0xc
c002ed16:	68 9e 16 03 c0       	push   0xc003169e
c002ed1b:	e8 b2 17 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ed20:	83 c4 10             	add    esp,0x10
c002ed23:	eb 10                	jmp    c002ed35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ed25:	83 ec 0c             	sub    esp,0xc
c002ed28:	68 a8 16 03 c0       	push   0xc00316a8
c002ed2d:	e8 a0 17 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ed32:	83 c4 10             	add    esp,0x10
c002ed35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed3c:	8d 50 01             	lea    edx,[eax+0x1]
c002ed3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed43:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed46:	90                   	nop
c002ed47:	83 c4 0c             	add    esp,0xc
c002ed4a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ed4c <LinkedList<UnixFile>::getFirstElement()>:
c002ed4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ed54 <LinkedList<UnixFile>::removeFirst()>:
c002ed54:	83 ec 0c             	sub    esp,0xc
c002ed57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed5b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed5d:	85 c0                	test   eax,eax
c002ed5f:	75 12                	jne    c002ed73 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ed61:	83 ec 0c             	sub    esp,0xc
c002ed64:	68 b4 16 03 c0       	push   0xc00316b4
c002ed69:	e8 64 17 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ed6e:	83 c4 10             	add    esp,0x10
c002ed71:	eb 7e                	jmp    c002edf1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ed73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed7d:	85 c0                	test   eax,eax
c002ed7f:	74 10                	je     c002ed91 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002ed81:	83 ec 0c             	sub    esp,0xc
c002ed84:	68 ff 16 03 c0       	push   0xc00316ff
c002ed89:	e8 44 17 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ed8e:	83 c4 10             	add    esp,0x10
c002ed91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed95:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed9a:	85 c0                	test   eax,eax
c002ed9c:	75 33                	jne    c002edd1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ed9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eda2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edba:	83 f8 01             	cmp    eax,0x1
c002edbd:	74 21                	je     c002ede0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002edbf:	83 ec 0c             	sub    esp,0xc
c002edc2:	68 d8 16 03 c0       	push   0xc00316d8
c002edc7:	e8 06 17 ff ff       	call   c00204d2 <KePanic(char const*)>
c002edcc:	83 c4 10             	add    esp,0x10
c002edcf:	eb 0f                	jmp    c002ede0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002edd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd5:	8b 00                	mov    eax,DWORD PTR [eax]
c002edd7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002edda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edde:	89 10                	mov    DWORD PTR [eax],edx
c002ede0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ede4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ede7:	8d 50 ff             	lea    edx,[eax-0x1]
c002edea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002edf1:	83 c4 0c             	add    esp,0xc
c002edf4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002edf6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002edf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002edfa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edfd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002edfe <DriverlessDevice::~DriverlessDevice()>:
c002edfe:	ba 28 23 03 c0       	mov    edx,0xc0032328
c002ee03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee07:	89 10                	mov    DWORD PTR [eax],edx
c002ee09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee0d:	50                   	push   eax
c002ee0e:	e8 cf c6 fe ff       	call   c001b4e2 <Device::~Device()>
c002ee13:	83 c4 04             	add    esp,0x4
c002ee16:	90                   	nop
c002ee17:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ee18 <DriverlessDevice::~DriverlessDevice()>:
c002ee18:	83 ec 0c             	sub    esp,0xc
c002ee1b:	83 ec 0c             	sub    esp,0xc
c002ee1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee22:	e8 d7 ff ff ff       	call   c002edfe <DriverlessDevice::~DriverlessDevice()>
c002ee27:	83 c4 10             	add    esp,0x10
c002ee2a:	83 ec 08             	sub    esp,0x8
c002ee2d:	68 58 01 00 00       	push   0x158
c002ee32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee36:	e8 11 a6 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002ee3b:	83 c4 10             	add    esp,0x10
c002ee3e:	83 c4 0c             	add    esp,0xc
c002ee41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002ee42 <LinkedList<Device>::addElement(Device*)>:
c002ee42:	83 ec 0c             	sub    esp,0xc
c002ee45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ee4a:	75 10                	jne    c002ee5c <LinkedList<Device>::addElement(Device*)+0x1a>
c002ee4c:	83 ec 0c             	sub    esp,0xc
c002ee4f:	68 7c 16 03 c0       	push   0xc003167c
c002ee54:	e8 79 16 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ee59:	83 c4 10             	add    esp,0x10
c002ee5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee60:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee62:	85 c0                	test   eax,eax
c002ee64:	74 3a                	je     c002eea0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ee66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee6d:	85 c0                	test   eax,eax
c002ee6f:	74 2f                	je     c002eea0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ee71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee7c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002ee82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ee8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee94:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ee9e:	eb 68                	jmp    c002ef08 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eea4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eea6:	85 c0                	test   eax,eax
c002eea8:	75 4e                	jne    c002eef8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eeb1:	85 c0                	test   eax,eax
c002eeb3:	75 43                	jne    c002eef8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eeb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eebd:	89 10                	mov    DWORD PTR [eax],edx
c002eebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eec3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eec7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eed1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eedf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eee2:	85 c0                	test   eax,eax
c002eee4:	74 22                	je     c002ef08 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eee6:	83 ec 0c             	sub    esp,0xc
c002eee9:	68 9e 16 03 c0       	push   0xc003169e
c002eeee:	e8 df 15 ff ff       	call   c00204d2 <KePanic(char const*)>
c002eef3:	83 c4 10             	add    esp,0x10
c002eef6:	eb 10                	jmp    c002ef08 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eef8:	83 ec 0c             	sub    esp,0xc
c002eefb:	68 a8 16 03 c0       	push   0xc00316a8
c002ef00:	e8 cd 15 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ef05:	83 c4 10             	add    esp,0x10
c002ef08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef0f:	8d 50 01             	lea    edx,[eax+0x1]
c002ef12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ef19:	90                   	nop
c002ef1a:	83 c4 0c             	add    esp,0xc
c002ef1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ef1e <LinkedList<Device>::LinkedList()>:
c002ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef5e:	90                   	nop
c002ef5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ef60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ef60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef64:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef66:	85 c0                	test   eax,eax
c002ef68:	75 0e                	jne    c002ef78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ef6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef71:	85 c0                	test   eax,eax
c002ef73:	75 03                	jne    c002ef78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ef75:	b0 01                	mov    al,0x1
c002ef77:	c3                   	ret    
c002ef78:	b0 00                	mov    al,0x0
c002ef7a:	90                   	nop
c002ef7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ef7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ef7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef80:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ef84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ef84:	83 ec 0c             	sub    esp,0xc
c002ef87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef8b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef8d:	85 c0                	test   eax,eax
c002ef8f:	75 17                	jne    c002efa8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ef91:	83 ec 0c             	sub    esp,0xc
c002ef94:	68 b4 16 03 c0       	push   0xc00316b4
c002ef99:	e8 34 15 ff ff       	call   c00204d2 <KePanic(char const*)>
c002ef9e:	83 c4 10             	add    esp,0x10
c002efa1:	e9 96 00 00 00       	jmp    c002f03c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002efa6:	66 90                	xchg   ax,ax
c002efa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002efb2:	85 c0                	test   eax,eax
c002efb4:	0f 95 c0             	setne  al
c002efb7:	0f b6 c0             	movzx  eax,al
c002efba:	85 c0                	test   eax,eax
c002efbc:	74 12                	je     c002efd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002efbe:	83 ec 0c             	sub    esp,0xc
c002efc1:	68 ff 16 03 c0       	push   0xc00316ff
c002efc6:	e8 07 15 ff ff       	call   c00204d2 <KePanic(char const*)>
c002efcb:	83 c4 10             	add    esp,0x10
c002efce:	66 90                	xchg   ax,ax
c002efd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd4:	8b 00                	mov    eax,DWORD PTR [eax]
c002efd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002efd9:	85 c0                	test   eax,eax
c002efdb:	0f 94 c0             	sete   al
c002efde:	0f b6 c0             	movzx  eax,al
c002efe1:	85 c0                	test   eax,eax
c002efe3:	74 33                	je     c002f018 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002efe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efe9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002efef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002effa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002effe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f001:	83 f8 01             	cmp    eax,0x1
c002f004:	74 22                	je     c002f028 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f006:	83 ec 0c             	sub    esp,0xc
c002f009:	68 d8 16 03 c0       	push   0xc00316d8
c002f00e:	e8 bf 14 ff ff       	call   c00204d2 <KePanic(char const*)>
c002f013:	83 c4 10             	add    esp,0x10
c002f016:	eb 10                	jmp    c002f028 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f01c:	8b 00                	mov    eax,DWORD PTR [eax]
c002f01e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002f021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f025:	89 10                	mov    DWORD PTR [eax],edx
c002f027:	90                   	nop
c002f028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f02c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f02f:	8d 50 ff             	lea    edx,[eax-0x1]
c002f032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f036:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f039:	8d 76 00             	lea    esi,[esi+0x0]
c002f03c:	83 c4 0c             	add    esp,0xc
c002f03f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002f040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002f040:	83 ec 0c             	sub    esp,0xc
c002f043:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f048:	75 12                	jne    c002f05c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002f04a:	83 ec 0c             	sub    esp,0xc
c002f04d:	68 7c 16 03 c0       	push   0xc003167c
c002f052:	e8 7b 14 ff ff       	call   c00204d2 <KePanic(char const*)>
c002f057:	83 c4 10             	add    esp,0x10
c002f05a:	66 90                	xchg   ax,ax
c002f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f060:	8b 00                	mov    eax,DWORD PTR [eax]
c002f062:	85 c0                	test   eax,eax
c002f064:	74 36                	je     c002f09c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f06a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f06d:	85 c0                	test   eax,eax
c002f06f:	74 2b                	je     c002f09c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f075:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f078:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f07c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002f07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f083:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f087:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f08e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f091:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f098:	eb 6a                	jmp    c002f104 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f09a:	66 90                	xchg   ax,ax
c002f09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0a2:	85 c0                	test   eax,eax
c002f0a4:	75 4e                	jne    c002f0f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0ad:	85 c0                	test   eax,eax
c002f0af:	75 43                	jne    c002f0f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f0b9:	89 10                	mov    DWORD PTR [eax],edx
c002f0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f0c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0db:	85 c0                	test   eax,eax
c002f0dd:	74 25                	je     c002f104 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f0df:	83 ec 0c             	sub    esp,0xc
c002f0e2:	68 9e 16 03 c0       	push   0xc003169e
c002f0e7:	e8 e6 13 ff ff       	call   c00204d2 <KePanic(char const*)>
c002f0ec:	83 c4 10             	add    esp,0x10
c002f0ef:	eb 13                	jmp    c002f104 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f0f1:	8d 76 00             	lea    esi,[esi+0x0]
c002f0f4:	83 ec 0c             	sub    esp,0xc
c002f0f7:	68 a8 16 03 c0       	push   0xc00316a8
c002f0fc:	e8 d1 13 ff ff       	call   c00204d2 <KePanic(char const*)>
c002f101:	83 c4 10             	add    esp,0x10
c002f104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f108:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f10b:	8d 50 01             	lea    edx,[eax+0x1]
c002f10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f112:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f115:	90                   	nop
c002f116:	83 c4 0c             	add    esp,0xc
c002f119:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002f11c <ACPI::~ACPI()>:
c002f11c:	83 ec 0c             	sub    esp,0xc
c002f11f:	ba e0 29 03 c0       	mov    edx,0xc00329e0
c002f124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f128:	89 10                	mov    DWORD PTR [eax],edx
c002f12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f12e:	83 ec 0c             	sub    esp,0xc
c002f131:	50                   	push   eax
c002f132:	e8 ab c3 fe ff       	call   c001b4e2 <Device::~Device()>
c002f137:	83 c4 10             	add    esp,0x10
c002f13a:	90                   	nop
c002f13b:	83 c4 0c             	add    esp,0xc
c002f13e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f140 <ACPI::~ACPI()>:
c002f140:	83 ec 0c             	sub    esp,0xc
c002f143:	83 ec 0c             	sub    esp,0xc
c002f146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f14a:	e8 cd ff ff ff       	call   c002f11c <ACPI::~ACPI()>
c002f14f:	83 c4 10             	add    esp,0x10
c002f152:	83 ec 08             	sub    esp,0x8
c002f155:	68 64 12 00 00       	push   0x1264
c002f15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f15e:	e8 e9 a2 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f163:	83 c4 10             	add    esp,0x10
c002f166:	83 c4 0c             	add    esp,0xc
c002f169:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f16c <LinkedList<Device>::~LinkedList()>:
c002f16c:	90                   	nop
c002f16d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f170 <LinkedList<Device>::isEmpty()>:
c002f170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f174:	8b 00                	mov    eax,DWORD PTR [eax]
c002f176:	85 c0                	test   eax,eax
c002f178:	75 0e                	jne    c002f188 <LinkedList<Device>::isEmpty()+0x18>
c002f17a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f17e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f181:	85 c0                	test   eax,eax
c002f183:	75 03                	jne    c002f188 <LinkedList<Device>::isEmpty()+0x18>
c002f185:	b0 01                	mov    al,0x1
c002f187:	c3                   	ret    
c002f188:	b0 00                	mov    al,0x0
c002f18a:	90                   	nop
c002f18b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f18c <LinkedList<Device>::getFirstElement()>:
c002f18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f190:	8b 00                	mov    eax,DWORD PTR [eax]
c002f192:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f194 <LinkedList<Device>::removeFirst()>:
c002f194:	83 ec 0c             	sub    esp,0xc
c002f197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f19b:	8b 00                	mov    eax,DWORD PTR [eax]
c002f19d:	85 c0                	test   eax,eax
c002f19f:	75 17                	jne    c002f1b8 <LinkedList<Device>::removeFirst()+0x24>
c002f1a1:	83 ec 0c             	sub    esp,0xc
c002f1a4:	68 b4 16 03 c0       	push   0xc00316b4
c002f1a9:	e8 24 13 ff ff       	call   c00204d2 <KePanic(char const*)>
c002f1ae:	83 c4 10             	add    esp,0x10
c002f1b1:	e9 92 00 00 00       	jmp    c002f248 <LinkedList<Device>::removeFirst()+0xb4>
c002f1b6:	66 90                	xchg   ax,ax
c002f1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1bf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f1c5:	85 c0                	test   eax,eax
c002f1c7:	74 13                	je     c002f1dc <LinkedList<Device>::removeFirst()+0x48>
c002f1c9:	83 ec 0c             	sub    esp,0xc
c002f1cc:	68 ff 16 03 c0       	push   0xc00316ff
c002f1d1:	e8 fc 12 ff ff       	call   c00204d2 <KePanic(char const*)>
c002f1d6:	83 c4 10             	add    esp,0x10
c002f1d9:	8d 76 00             	lea    esi,[esi+0x0]
c002f1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1e0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1e2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f1e8:	85 c0                	test   eax,eax
c002f1ea:	75 34                	jne    c002f220 <LinkedList<Device>::removeFirst()+0x8c>
c002f1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f205:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f208:	83 f8 01             	cmp    eax,0x1
c002f20b:	74 27                	je     c002f234 <LinkedList<Device>::removeFirst()+0xa0>
c002f20d:	83 ec 0c             	sub    esp,0xc
c002f210:	68 d8 16 03 c0       	push   0xc00316d8
c002f215:	e8 b8 12 ff ff       	call   c00204d2 <KePanic(char const*)>
c002f21a:	83 c4 10             	add    esp,0x10
c002f21d:	eb 15                	jmp    c002f234 <LinkedList<Device>::removeFirst()+0xa0>
c002f21f:	90                   	nop
c002f220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f224:	8b 00                	mov    eax,DWORD PTR [eax]
c002f226:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f230:	89 10                	mov    DWORD PTR [eax],edx
c002f232:	66 90                	xchg   ax,ax
c002f234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f238:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f23b:	8d 50 ff             	lea    edx,[eax-0x1]
c002f23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f242:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f245:	8d 76 00             	lea    esi,[esi+0x0]
c002f248:	83 c4 0c             	add    esp,0xc
c002f24b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f24c <CPU::~CPU()>:
c002f24c:	83 ec 0c             	sub    esp,0xc
c002f24f:	ba 88 2b 03 c0       	mov    edx,0xc0032b88
c002f254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f258:	89 10                	mov    DWORD PTR [eax],edx
c002f25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f25e:	83 ec 0c             	sub    esp,0xc
c002f261:	50                   	push   eax
c002f262:	e8 7b c2 fe ff       	call   c001b4e2 <Device::~Device()>
c002f267:	83 c4 10             	add    esp,0x10
c002f26a:	90                   	nop
c002f26b:	83 c4 0c             	add    esp,0xc
c002f26e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f270 <CPU::~CPU()>:
c002f270:	83 ec 0c             	sub    esp,0xc
c002f273:	83 ec 0c             	sub    esp,0xc
c002f276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f27a:	e8 cd ff ff ff       	call   c002f24c <CPU::~CPU()>
c002f27f:	83 c4 10             	add    esp,0x10
c002f282:	83 ec 08             	sub    esp,0x8
c002f285:	68 94 11 00 00       	push   0x1194
c002f28a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f28e:	e8 b9 a1 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f293:	83 c4 10             	add    esp,0x10
c002f296:	83 c4 0c             	add    esp,0xc
c002f299:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f29c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f2a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f2a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f2a4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f2a4:	90                   	nop
c002f2a5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f2a8 <ThreadControlBlock::ThreadControlBlock()>:
c002f2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2ac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f2b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2b7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2c2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f2c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2cd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2d8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f2df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2e3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f2e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2eb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f2ef:	90                   	nop
c002f2f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f2f4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f302:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f30d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f318:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f322:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f32d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f334:	90                   	nop
c002f335:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f336 <PCI::~PCI()>:
c002f336:	83 ec 0c             	sub    esp,0xc
c002f339:	ba a8 3a 03 c0       	mov    edx,0xc0033aa8
c002f33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f342:	89 10                	mov    DWORD PTR [eax],edx
c002f344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f348:	83 ec 0c             	sub    esp,0xc
c002f34b:	50                   	push   eax
c002f34c:	e8 23 bc fe ff       	call   c001af74 <Bus::~Bus()>
c002f351:	83 c4 10             	add    esp,0x10
c002f354:	90                   	nop
c002f355:	83 c4 0c             	add    esp,0xc
c002f358:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f35a <PCI::~PCI()>:
c002f35a:	83 ec 0c             	sub    esp,0xc
c002f35d:	83 ec 0c             	sub    esp,0xc
c002f360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f364:	e8 cd ff ff ff       	call   c002f336 <PCI::~PCI()>
c002f369:	83 c4 10             	add    esp,0x10
c002f36c:	83 ec 08             	sub    esp,0x8
c002f36f:	68 5c 01 00 00       	push   0x15c
c002f374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f378:	e8 cf a0 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f37d:	83 c4 10             	add    esp,0x10
c002f380:	83 c4 0c             	add    esp,0xc
c002f383:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f384 <IDE::~IDE()>:
c002f384:	83 ec 0c             	sub    esp,0xc
c002f387:	ba 5c 3b 03 c0       	mov    edx,0xc0033b5c
c002f38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f390:	89 10                	mov    DWORD PTR [eax],edx
c002f392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f396:	83 ec 0c             	sub    esp,0xc
c002f399:	50                   	push   eax
c002f39a:	e8 d1 c5 fe ff       	call   c001b970 <HardDiskController::~HardDiskController()>
c002f39f:	83 c4 10             	add    esp,0x10
c002f3a2:	90                   	nop
c002f3a3:	83 c4 0c             	add    esp,0xc
c002f3a6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f3a8 <IDE::~IDE()>:
c002f3a8:	83 ec 0c             	sub    esp,0xc
c002f3ab:	83 ec 0c             	sub    esp,0xc
c002f3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3b2:	e8 cd ff ff ff       	call   c002f384 <IDE::~IDE()>
c002f3b7:	83 c4 10             	add    esp,0x10
c002f3ba:	83 ec 08             	sub    esp,0x8
c002f3bd:	68 70 02 00 00       	push   0x270
c002f3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3c6:	e8 81 a0 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f3cb:	83 c4 10             	add    esp,0x10
c002f3ce:	83 c4 0c             	add    esp,0xc
c002f3d1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f3d2 <SATABus::~SATABus()>:
c002f3d2:	83 ec 0c             	sub    esp,0xc
c002f3d5:	ba ac 3b 03 c0       	mov    edx,0xc0033bac
c002f3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3de:	89 10                	mov    DWORD PTR [eax],edx
c002f3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3e4:	83 ec 0c             	sub    esp,0xc
c002f3e7:	50                   	push   eax
c002f3e8:	e8 83 c5 fe ff       	call   c001b970 <HardDiskController::~HardDiskController()>
c002f3ed:	83 c4 10             	add    esp,0x10
c002f3f0:	90                   	nop
c002f3f1:	83 c4 0c             	add    esp,0xc
c002f3f4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f3f6 <SATABus::~SATABus()>:
c002f3f6:	83 ec 0c             	sub    esp,0xc
c002f3f9:	83 ec 0c             	sub    esp,0xc
c002f3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f400:	e8 cd ff ff ff       	call   c002f3d2 <SATABus::~SATABus()>
c002f405:	83 c4 10             	add    esp,0x10
c002f408:	83 ec 08             	sub    esp,0x8
c002f40b:	68 64 01 00 00       	push   0x164
c002f410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f414:	e8 33 a0 fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f419:	83 c4 10             	add    esp,0x10
c002f41c:	83 c4 0c             	add    esp,0xc
c002f41f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f420 <ATA::~ATA()>:
c002f420:	83 ec 0c             	sub    esp,0xc
c002f423:	ba ec 3b 03 c0       	mov    edx,0xc0033bec
c002f428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f42c:	89 10                	mov    DWORD PTR [eax],edx
c002f42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f432:	83 ec 0c             	sub    esp,0xc
c002f435:	50                   	push   eax
c002f436:	e8 17 c6 fe ff       	call   c001ba52 <PhysicalDisk::~PhysicalDisk()>
c002f43b:	83 c4 10             	add    esp,0x10
c002f43e:	90                   	nop
c002f43f:	83 c4 0c             	add    esp,0xc
c002f442:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f444 <ATA::~ATA()>:
c002f444:	83 ec 0c             	sub    esp,0xc
c002f447:	83 ec 0c             	sub    esp,0xc
c002f44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f44e:	e8 cd ff ff ff       	call   c002f420 <ATA::~ATA()>
c002f453:	83 c4 10             	add    esp,0x10
c002f456:	83 ec 08             	sub    esp,0x8
c002f459:	68 7c 01 00 00       	push   0x17c
c002f45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f462:	e8 e5 9f fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f467:	83 c4 10             	add    esp,0x10
c002f46a:	83 c4 0c             	add    esp,0xc
c002f46d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f46e <ATAPI::~ATAPI()>:
c002f46e:	83 ec 0c             	sub    esp,0xc
c002f471:	ba 34 3c 03 c0       	mov    edx,0xc0033c34
c002f476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f47a:	89 10                	mov    DWORD PTR [eax],edx
c002f47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f480:	83 ec 0c             	sub    esp,0xc
c002f483:	50                   	push   eax
c002f484:	e8 c9 c5 fe ff       	call   c001ba52 <PhysicalDisk::~PhysicalDisk()>
c002f489:	83 c4 10             	add    esp,0x10
c002f48c:	90                   	nop
c002f48d:	83 c4 0c             	add    esp,0xc
c002f490:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f492 <ATAPI::~ATAPI()>:
c002f492:	83 ec 0c             	sub    esp,0xc
c002f495:	83 ec 0c             	sub    esp,0xc
c002f498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f49c:	e8 cd ff ff ff       	call   c002f46e <ATAPI::~ATAPI()>
c002f4a1:	83 c4 10             	add    esp,0x10
c002f4a4:	83 ec 08             	sub    esp,0x8
c002f4a7:	68 84 01 00 00       	push   0x184
c002f4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4b0:	e8 97 9f fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f4b5:	83 c4 10             	add    esp,0x10
c002f4b8:	83 c4 0c             	add    esp,0xc
c002f4bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f4bc <SATA::~SATA()>:
c002f4bc:	83 ec 0c             	sub    esp,0xc
c002f4bf:	ba f4 3c 03 c0       	mov    edx,0xc0033cf4
c002f4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4c8:	89 10                	mov    DWORD PTR [eax],edx
c002f4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4ce:	83 ec 0c             	sub    esp,0xc
c002f4d1:	50                   	push   eax
c002f4d2:	e8 7b c5 fe ff       	call   c001ba52 <PhysicalDisk::~PhysicalDisk()>
c002f4d7:	83 c4 10             	add    esp,0x10
c002f4da:	90                   	nop
c002f4db:	83 c4 0c             	add    esp,0xc
c002f4de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f4e0 <SATA::~SATA()>:
c002f4e0:	83 ec 0c             	sub    esp,0xc
c002f4e3:	83 ec 0c             	sub    esp,0xc
c002f4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4ea:	e8 cd ff ff ff       	call   c002f4bc <SATA::~SATA()>
c002f4ef:	83 c4 10             	add    esp,0x10
c002f4f2:	83 ec 08             	sub    esp,0x8
c002f4f5:	68 7c 01 00 00       	push   0x17c
c002f4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4fe:	e8 49 9f fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f503:	83 c4 10             	add    esp,0x10
c002f506:	83 c4 0c             	add    esp,0xc
c002f509:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f50a <SATAPI::~SATAPI()>:
c002f50a:	83 ec 0c             	sub    esp,0xc
c002f50d:	ba 18 3e 03 c0       	mov    edx,0xc0033e18
c002f512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f516:	89 10                	mov    DWORD PTR [eax],edx
c002f518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f51c:	83 ec 0c             	sub    esp,0xc
c002f51f:	50                   	push   eax
c002f520:	e8 2d c5 fe ff       	call   c001ba52 <PhysicalDisk::~PhysicalDisk()>
c002f525:	83 c4 10             	add    esp,0x10
c002f528:	90                   	nop
c002f529:	83 c4 0c             	add    esp,0xc
c002f52c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f52e <SATAPI::~SATAPI()>:
c002f52e:	83 ec 0c             	sub    esp,0xc
c002f531:	83 ec 0c             	sub    esp,0xc
c002f534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f538:	e8 cd ff ff ff       	call   c002f50a <SATAPI::~SATAPI()>
c002f53d:	83 c4 10             	add    esp,0x10
c002f540:	83 ec 08             	sub    esp,0x8
c002f543:	68 84 01 00 00       	push   0x184
c002f548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f54c:	e8 fb 9e fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f551:	83 c4 10             	add    esp,0x10
c002f554:	83 c4 0c             	add    esp,0xc
c002f557:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f558 <IOAPIC::~IOAPIC()>:
c002f558:	83 ec 0c             	sub    esp,0xc
c002f55b:	ba 58 3e 03 c0       	mov    edx,0xc0033e58
c002f560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f564:	89 10                	mov    DWORD PTR [eax],edx
c002f566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f56a:	83 ec 0c             	sub    esp,0xc
c002f56d:	50                   	push   eax
c002f56e:	e8 6f bf fe ff       	call   c001b4e2 <Device::~Device()>
c002f573:	83 c4 10             	add    esp,0x10
c002f576:	90                   	nop
c002f577:	83 c4 0c             	add    esp,0xc
c002f57a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f57c <IOAPIC::~IOAPIC()>:
c002f57c:	83 ec 0c             	sub    esp,0xc
c002f57f:	83 ec 0c             	sub    esp,0xc
c002f582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f586:	e8 cd ff ff ff       	call   c002f558 <IOAPIC::~IOAPIC()>
c002f58b:	83 c4 10             	add    esp,0x10
c002f58e:	83 ec 08             	sub    esp,0x8
c002f591:	68 68 01 00 00       	push   0x168
c002f596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f59a:	e8 ad 9e fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f59f:	83 c4 10             	add    esp,0x10
c002f5a2:	83 c4 0c             	add    esp,0xc
c002f5a5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f5a8 <APICTimer::~APICTimer()>:
c002f5a8:	83 ec 0c             	sub    esp,0xc
c002f5ab:	ba a0 3e 03 c0       	mov    edx,0xc0033ea0
c002f5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5b4:	89 10                	mov    DWORD PTR [eax],edx
c002f5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5ba:	83 ec 0c             	sub    esp,0xc
c002f5bd:	50                   	push   eax
c002f5be:	e8 01 da fe ff       	call   c001cfc4 <Timer::~Timer()>
c002f5c3:	83 c4 10             	add    esp,0x10
c002f5c6:	90                   	nop
c002f5c7:	83 c4 0c             	add    esp,0xc
c002f5ca:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f5cc <APICTimer::~APICTimer()>:
c002f5cc:	83 ec 0c             	sub    esp,0xc
c002f5cf:	83 ec 0c             	sub    esp,0xc
c002f5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5d6:	e8 cd ff ff ff       	call   c002f5a8 <APICTimer::~APICTimer()>
c002f5db:	83 c4 10             	add    esp,0x10
c002f5de:	83 ec 08             	sub    esp,0x8
c002f5e1:	68 60 01 00 00       	push   0x160
c002f5e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5ea:	e8 5d 9e fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f5ef:	83 c4 10             	add    esp,0x10
c002f5f2:	83 c4 0c             	add    esp,0xc
c002f5f5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f5f8 <PIT::~PIT()>:
c002f5f8:	83 ec 0c             	sub    esp,0xc
c002f5fb:	ba f0 3e 03 c0       	mov    edx,0xc0033ef0
c002f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f604:	89 10                	mov    DWORD PTR [eax],edx
c002f606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f60a:	83 ec 0c             	sub    esp,0xc
c002f60d:	50                   	push   eax
c002f60e:	e8 b1 d9 fe ff       	call   c001cfc4 <Timer::~Timer()>
c002f613:	83 c4 10             	add    esp,0x10
c002f616:	90                   	nop
c002f617:	83 c4 0c             	add    esp,0xc
c002f61a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f61c <PIT::~PIT()>:
c002f61c:	83 ec 0c             	sub    esp,0xc
c002f61f:	83 ec 0c             	sub    esp,0xc
c002f622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f626:	e8 cd ff ff ff       	call   c002f5f8 <PIT::~PIT()>
c002f62b:	83 c4 10             	add    esp,0x10
c002f62e:	83 ec 08             	sub    esp,0x8
c002f631:	68 5c 01 00 00       	push   0x15c
c002f636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f63a:	e8 0d 9e fe ff       	call   c001944c <operator delete(void*, unsigned long)>
c002f63f:	83 c4 10             	add    esp,0x10
c002f642:	83 c4 0c             	add    esp,0xc
c002f645:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be db 2c 03 c0       	mov    esi,0xc0032cdb
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be f7 2c 03 c0       	mov    esi,0xc0032cf7
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
