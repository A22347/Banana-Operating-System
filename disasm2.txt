
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 38 02 c0       	mov    eax,0xc00238c4
c0000025:	3d c4 38 02 c0       	cmp    eax,0xc00238c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 38 02 c0       	push   0xc00238c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 38 02 c0       	mov    eax,0xc00238c4
c0000051:	2d c4 38 02 c0       	sub    eax,0xc00238c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 38 02 c0       	push   0xc00238c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 6c ff 01 c0       	mov    ebx,0xc001ff6c
c0000097:	81 eb 68 ff 01 c0    	sub    ebx,0xc001ff68
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 68 ff 01 c0       	mov    esi,0xc001ff68
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 38 02 c0       	push   0xc00238c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 c4 38 02 c0       	push   0xc00238c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 73 51 01 00       	call   c0015420 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 51 51 01 00       	call   c0015420 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 5e 56 01 00       	call   c001594c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f9 5c 01 00       	call   c0015ff0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 55 0f 01 00       	jmp    c00112d4 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0080],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0080],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0080],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0080],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0080],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0080],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 84 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff7c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 e2 77 01 00       	jmp    c00195bc <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 0c 78 01 00       	jmp    c00195fc <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 2d 78 01 00       	jmp    c001963c <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 e0 01 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfe20]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 e0 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe20]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba e4 28 02 c0       	mov    edx,0xc00228e4
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 9c 00 02 c0       	mov    edx,0xc002009c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 a2 00 02 c0       	mov    eax,0xc00200a2
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 60 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfea0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 ab 00 02 c0       	mov    eax,0xc00200ab
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 e0 01 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfe20]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 30 01 02 c0       	mov    eax,0xc0020130
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 20 01 02 c0       	mov    ebx,0xc0020120
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 00 01 02 c0       	mov    eax,0xc0020100
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 10 01 02 c0       	mov    eax,0xc0020110
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba b2 00 02 c0       	mov    edx,0xc00200b2
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba be 00 02 c0       	mov    edx,0xc00200be
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba d2 00 02 c0       	mov    edx,0xc00200d2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 00 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020500
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 00 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020500
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 00 03 02 c0       	mov    eax,0xc0020300
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 40 02 02 c0       	mov    eax,0xc0020240
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 00 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfe00]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 00 06 02 c0       	push   0xc0020600
c0006147:	e8 14 3e 01 00       	call   c0019f60 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 0e 06 02 c0       	push   0xc002060e
c000617f:	e8 dc 3d 01 00       	call   c0019f60 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 45 3d 01 00       	call   c0019f04 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 1d 06 02 c0       	push   0xc002061d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 20 06 02 c0       	push   0xc0020620
c000682f:	e8 2c 37 01 00       	call   c0019f60 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 3a 37 01 00       	call   c0019f7c <iso_kprintfd>
c0006842:	c7 04 24 25 06 02 c0 	mov    DWORD PTR [esp],0xc0020625
c0006849:	e8 12 37 01 00       	call   c0019f60 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 22 37 01 00       	call   c0019f7c <iso_kprintfd>
c000685a:	c7 04 24 2b 06 02 c0 	mov    DWORD PTR [esp],0xc002062b
c0006861:	e8 fa 36 01 00       	call   c0019f60 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 0a 37 01 00       	call   c0019f7c <iso_kprintfd>
c0006872:	c7 04 24 31 06 02 c0 	mov    DWORD PTR [esp],0xc0020631
c0006879:	e8 e2 36 01 00       	call   c0019f60 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 f2 36 01 00       	call   c0019f7c <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 1d 06 02 c0       	push   0xc002061d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 3a 06 02 c0       	push   0xc002063a
c0006a52:	e8 09 35 01 00       	call   c0019f60 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 45 06 02 c0       	push   0xc0020645
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 4c 06 02 c0       	push   0xc002064c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 53 06 02 c0       	push   0xc0020653
c0006b69:	e8 f2 33 01 00       	call   c0019f60 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 5e 06 02 c0       	push   0xc002065e
c0006b84:	e8 d7 33 01 00       	call   c0019f60 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 a2 9e 00 00       	call   c0010b36 <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 c7 5b 00 00       	call   c000c86a <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 6f 06 02 c0       	push   0xc002066f
c0006cd4:	e8 3c 9f 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 88 06 02 c0       	push   0xc0020688
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 77 ea 00 00       	call   c0015778 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 86 ec 00 00       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 60 64 01 c0       	push   0xc0016460
c0006d25:	52                   	push   edx
c0006d26:	e8 71 ec 00 00       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 84 07 02 c0       	push   0xc0020784
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 d8 9e 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 57 a7 00 00       	call   c00114a0 <KeInitRand()>
c0006d49:	e8 35 fb 00 00       	call   c0016883 <Vm::initialise8086()>
c0006d4e:	e8 2f 48 00 00       	call   c000b582 <Fs::initVFS()>
c0006d53:	c7 04 24 95 06 02 c0 	mov    DWORD PTR [esp],0xc0020695
c0006d5a:	e8 b6 9e 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 84 07 02 c0       	push   0xc0020784
c0006d7e:	e8 92 9e 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0006d83:	e8 d7 44 00 00       	call   c000b25f <KeInitialiseSymlinks()>
c0006d88:	e8 bf a3 00 00       	call   c001114c <KeLoadSystemEnv()>
c0006d8d:	e8 1c a6 00 00       	call   c00113ae <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 af 06 02 c0       	push   0xc00206af
c0006d9c:	68 b8 06 02 c0       	push   0xc00206b8
c0006da1:	e8 00 cc 00 00       	call   c00139a6 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 16 54 00 00       	call   c000c1c4 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 a8 07 02 c0 	mov    DWORD PTR [esp],0xc00207a8
c0006db5:	e8 5b 9e 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 9c 5a 00 00       	call   c000c868 <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 c0 06 02 c0 	mov    DWORD PTR [esp],0xc00206c0
c0006dd3:	e8 3d 9e 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 d1 06 02 c0       	push   0xc00206d1
c0006de7:	e8 90 e3 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 c7 e5 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 e6 ef 00 00       	call   c0015de8 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 ed 06 02 c0       	push   0xc00206ed
c0006e17:	50                   	push   eax
c0006e18:	e8 c7 5a 00 00       	call   c000c8e4 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba f4 07 02 c0       	mov    edx,0xc00207f4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 4f 80 01 00       	call   c001ef66 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 f9 90 00 00       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 d2 90 00 00       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 b0 90 00 00       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 8e 90 00 00       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 9b 8f 00 00       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 76 8f 00 00       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 ae 7e 01 00       	call   c001ef20 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 fc 7a 01 00       	call   c001eb90 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 8c 8f 00 00       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 f6 06 02 c0       	push   0xc00206f6
c0007104:	e8 e0 a1 00 00       	call   c00112e9 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 fc 06 02 c0       	push   0xc00206fc
c0007140:	e8 a4 a1 00 00       	call   c00112e9 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 93 89 00 00       	jmp    c000fb20 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 02 07 02 c0       	push   0xc0020702
c00071e3:	0f 94 05 20 31 02 c0 	sete   BYTE PTR ds:0xc0023120
c00071ea:	e8 26 9a 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 8f 84 00 00       	call   c000f694 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 38 55 00 00       	call   c000c74c <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 1a 07 02 c0 	mov    DWORD PTR [esp],0xc002071a
c000722d:	e8 e3 99 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 be 8e 00 00       	call   c0010106 <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 f5 54 00 00       	call   c000c74c <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 c8 07 02 c0       	push   0xc00207c8
c0007274:	e8 9c 99 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0007279:	e8 4c 08 01 00       	call   c0017aca <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 34 07 02 c0 	mov    DWORD PTR [esp],0xc0020734
c0007285:	e8 8b 99 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 2e e8 00 00       	call   c0015ac4 <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 4f 07 02 c0       	push   0xc002074f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 60 07 02 c0       	push   0xc0020760
c000730d:	e8 d7 9f 00 00       	call   c00112e9 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 6d 07 02 c0       	push   0xc002076d
c0007322:	e8 c2 9f 00 00       	call   c00112e9 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 77 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020777
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 a8 9f 00 00       	jmp    c00112e9 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 63 02 01 00       	call   c0017796 <HalSystemIdle()>
c0007533:	e8 ea 7f 01 00       	call   c001f522 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 20 ec 01 c0       	push   0xc001ec20
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 30 ec 01 c0       	push   0xc001ec30
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 3a ec 01 c0       	push   0xc001ec3a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 44 ec 01 c0       	push   0xc001ec44
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 4e ec 01 c0       	push   0xc001ec4e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 58 ec 01 c0       	push   0xc001ec58
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 62 ec 01 c0       	push   0xc001ec62
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 6c ec 01 c0       	push   0xc001ec6c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 76 ec 01 c0       	push   0xc001ec76
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 7e ec 01 c0       	push   0xc001ec7e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 88 ec 01 c0       	push   0xc001ec88
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 90 ec 01 c0       	push   0xc001ec90
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 98 ec 01 c0       	push   0xc001ec98
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 a0 ec 01 c0       	push   0xc001eca0
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 ba ec 01 c0       	push   0xc001ecba
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 c2 ec 01 c0       	push   0xc001ecc2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 cc ec 01 c0       	push   0xc001eccc
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 d6 ec 01 c0       	push   0xc001ecd6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 e0 ec 01 c0       	push   0xc001ece0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 7a ed 01 c0       	push   0xc001ed7a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 81 ed 01 c0       	push   0xc001ed81
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 6c ed 01 c0       	push   0xc001ed6c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 73 ed 01 c0       	push   0xc001ed73
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 ea ec 01 c0       	push   0xc001ecea
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 f4 ec 01 c0       	push   0xc001ecf4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 fe ec 01 c0       	push   0xc001ecfe
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 08 ed 01 c0       	push   0xc001ed08
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 12 ed 01 c0       	push   0xc001ed12
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 1c ed 01 c0       	push   0xc001ed1c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 26 ed 01 c0       	push   0xc001ed26
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 30 ed 01 c0       	push   0xc001ed30
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 3a ed 01 c0       	push   0xc001ed3a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 44 ed 01 c0       	push   0xc001ed44
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 4e ed 01 c0       	push   0xc001ed4e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 58 ed 01 c0       	push   0xc001ed58
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 62 ed 01 c0       	push   0xc001ed62
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 bc ee 01 c0       	push   0xc001eebc
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 c6 ee 01 c0       	push   0xc001eec6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 d0 ee 01 c0       	push   0xc001eed0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 da ee 01 c0       	push   0xc001eeda
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 e4 ee 01 c0       	push   0xc001eee4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 ee ee 01 c0       	push   0xc001eeee
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 f8 ee 01 c0       	push   0xc001eef8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 02 ef 01 c0       	push   0xc001ef02
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 76 ec 01 c0       	push   0xc001ec76
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 14 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023114
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 14 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023114
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 14 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023114,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 14 31 02 c0       	mov    eax,ds:0xc0023114
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 18 08 02 c0       	push   0xc0020818
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 48 08 02 c0       	push   0xc0020848
c0007a44:	e8 a0 98 00 00       	call   c00112e9 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 4d 08 02 c0       	push   0xc002084d
c0007a5a:	e8 8a 98 00 00       	call   c00112e9 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 54 08 02 c0       	push   0xc0020854
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 13 90 00 00       	call   c0010b99 <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 3c 8f 00 00       	call   c0010ae3 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 fd 78 01 00       	call   c001f4ba <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 6c 08 02 c0       	push   0xc002086c
c0007c4b:	e8 99 96 00 00       	call   c00112e9 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 6c 08 02 c0       	push   0xc002086c
c0007cc5:	e8 1f 96 00 00       	call   c00112e9 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 18 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023118
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 18 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023118
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 18 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023118
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 11 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020911
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 19 95 00 00       	jmp    c00112e9 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 94 08 02 c0       	push   0xc0020894
c0007e54:	e8 90 94 00 00       	call   c00112e9 <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 27 09 02 c0       	push   0xc0020927
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 c4 08 02 c0       	push   0xc00208c4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 3f 09 02 c0       	push   0xc002093f
c000810a:	e8 da 91 00 00       	call   c00112e9 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 e8 08 02 c0       	push   0xc00208e8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 4d 09 02 c0       	push   0xc002094d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba ac 09 02 c0       	mov    edx,0xc00209ac
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 69 09 02 c0       	push   0xc0020969
c0008331:	e8 b3 8f 00 00       	call   c00112e9 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 69 d8 00 00       	call   c0015be8 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 93 6f 01 00       	call   c001f3a0 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 86 09 02 c0       	push   0xc0020986
c0008422:	e8 c2 8e 00 00       	call   c00112e9 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba ac 09 02 c0       	mov    edx,0xc00209ac
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba f4 09 02 c0       	mov    edx,0xc00209f4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 22 51 00 00       	call   c000d62e <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 56 04 01 00       	call   c0018988 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 40 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcec0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 40 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcec0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 f8 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd008]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 d0 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd030]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 88 01 01 00       	call   c001881c <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 e5 01 01 00       	jmp    c0018924 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 c0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209c0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 5d 8b 00 00       	jmp    c00112e9 <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 82 38 00 00       	jmp    c000c16b <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ce 09 02 c0       	mov    esi,0xc00209ce
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 fc fc 00 00       	call   c0018924 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba f4 09 02 c0       	mov    edx,0xc00209f4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 df 09 02 c0       	push   0xc00209df
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 e5 09 02 c0       	push   0xc00209e5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba bc 0a 02 c0       	mov    edx,0xc0020abc
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 80 31 02 c0       	mov    eax,ds:0xc0023180
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 80 31 02 c0    	mov    DWORD PTR ds:0xc0023180,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 9f 63 01 00       	call   c001f588 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba d8 0a 02 c0       	mov    edx,0xc0020ad8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba bc 0a 02 c0       	mov    edx,0xc0020abc
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 9f 62 01 00       	call   c001f65c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 93 62 01 00       	call   c001f664 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 99 61 01 00       	call   c001f588 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 94 0a 02 c0       	push   0xc0020a94
c0009414:	e8 d0 7e 00 00       	call   c00112e9 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba d8 0a 02 c0       	mov    edx,0xc0020ad8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 9e 61 01 00       	call   c001f65c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 2b 62 01 00       	call   c001f706 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 e9 5f 01 00       	call   c001f546 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 10 31 02 c0       	push   0xc0023110
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 44 f5 01 c0       	push   0xc001f544
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 88 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023188
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 88 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023188
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 84 31 02 c0    	mov    ebp,DWORD PTR ds:0xc0023184
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 84 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023184,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 84 31 02 c0    	mov    DWORD PTR ds:0xc0023184,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 ec 0a 02 c0       	push   0xc0020aec
c0009674:	e8 70 7c 00 00       	call   c00112e9 <KePanic(char const*)>
c0009679:	8b 2d 84 31 02 c0    	mov    ebp,DWORD PTR ds:0xc0023184
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 84 31 02 c0    	mov    DWORD PTR ds:0xc0023184,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 84 31 02 c0       	mov    eax,ds:0xc0023184
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 84 31 02 c0    	mov    DWORD PTR ds:0xc0023184,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 84 31 02 c0       	mov    ds:0xc0023184,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 8c 31 02 c0    	mov    edx,DWORD PTR ds:0xc002318c
c000973e:	8b 0d 94 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023194
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 90 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023190
c0009759:	8b 0d 8c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002318c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 80 0d 02 c0       	push   0xc0020d80
c000979e:	e8 46 7b 00 00       	call   c00112e9 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 97 0d 02 c0       	push   0xc0020d97
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 90 31 02 c0    	mov    DWORD PTR ds:0xc0023190,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 98 31 02 c0 43 	mov    BYTE PTR ds:0xc0023198,0x43
c000984f:	c7 05 8c 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002318c,0x8
c0009859:	a3 94 31 02 c0       	mov    ds:0xc0023194,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 90 31 02 c0       	mov    eax,ds:0xc0023190
c0009874:	f7 35 8c 31 02 c0    	div    DWORD PTR ds:0xc002318c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 0c 0b 02 c0       	push   0xc0020b0c
c00098af:	e8 35 7a 00 00       	call   c00112e9 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 ae 0d 02 c0       	push   0xc0020dae
c0009981:	e8 63 79 00 00       	call   c00112e9 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 30 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020b30
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 00 79 00 00       	jmp    c00112e9 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 ca 0d 02 c0       	push   0xc0020dca
c00099f6:	e8 ee 78 00 00       	call   c00112e9 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 e6 0d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020de6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 a4 78 00 00       	jmp    c00112e9 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 54 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b54
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 78 0b 02 c0       	push   0xc0020b78
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 e0 0b 02 c0       	push   0xc0020be0
c0009d87:	e8 5d 75 00 00       	call   c00112e9 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 04 0c 02 c0       	push   0xc0020c04
c0009e7b:	e8 69 74 00 00       	call   c00112e9 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 30 0c 02 c0       	push   0xc0020c30
c0009fd9:	e8 0b 73 00 00       	call   c00112e9 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 d2 27 00 00       	call   c000c9e0 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 00 0e 02 c0       	push   0xc0020e00
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 8c 31 02 c0       	mov    eax,ds:0xc002318c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 98 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023198
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 ae 38 00 00       	call   c000dba2 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 8c 31 02 c0    	cmp    DWORD PTR ds:0xc002318c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 54 0c 02 c0       	push   0xc0020c54
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 0e 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020e0e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 31 0e 02 c0       	push   0xc0020e31
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 1f 0e 02 c0       	push   0xc0020e1f
c000a413:	e8 d1 6e 00 00       	call   c00112e9 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 84 0c 02 c0       	push   0xc0020c84
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 8c 31 02 c0       	mov    eax,ds:0xc002318c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 98 31 02 c0 	movsx  eax,BYTE PTR ds:0xc0023198
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 6a 36 00 00       	call   c000db36 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 8c 31 02 c0    	cmp    DWORD PTR ds:0xc002318c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 44 0e 02 c0       	push   0xc0020e44
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 a4 0c 02 c0       	push   0xc0020ca4
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 04 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d04
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 59 0e 02 c0       	push   0xc0020e59
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 6d 0e 02 c0       	push   0xc0020e6d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 80 0e 02 c0       	push   0xc0020e80
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 8d 0e 02 c0       	push   0xc0020e8d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 a6 0e 02 c0       	push   0xc0020ea6
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 a6 0e 02 c0       	push   0xc0020ea6
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 ae 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eae
c000a7ec:	e8 f8 6a 00 00       	call   c00112e9 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7fe:	e8 e6 6a 00 00       	call   c00112e9 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 dc 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf124]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 2c 10 02 c0       	push   0xc002102c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 40 10 02 c0       	push   0xc0021040
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 4a 10 02 c0       	push   0xc002104a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 54 10 02 c0       	push   0xc0021054
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 98 11 02 c0       	push   0xc0021198
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 5e 10 02 c0       	push   0xc002105e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 b8 11 02 c0       	push   0xc00211b8
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 73 10 02 c0       	push   0xc0021073
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 8d 10 02 c0       	push   0xc002108d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 a0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce60]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 e0 11 02 c0       	push   0xc00211e0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 98 11 02 c0       	push   0xc0021198
c000ab78:	e8 6c 67 00 00       	call   c00112e9 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 28 12 02 c0       	push   0xc0021228
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 28 12 02 c0       	push   0xc0021228
c000aba7:	e8 3d 67 00 00       	call   c00112e9 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 98 10 02 c0       	push   0xc0021098
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 98 10 02 c0       	push   0xc0021098
c000abd3:	e8 11 67 00 00       	call   c00112e9 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 b5 10 02 c0       	push   0xc00210b5
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 b5 10 02 c0       	push   0xc00210b5
c000abff:	e8 e5 66 00 00       	call   c00112e9 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 48 12 02 c0       	push   0xc0021248
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 48 12 02 c0       	push   0xc0021248
c000ac2b:	e8 b9 66 00 00       	call   c00112e9 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 6c 12 02 c0       	push   0xc002126c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 6c 12 02 c0       	push   0xc002126c
c000ac57:	e8 8d 66 00 00       	call   c00112e9 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 d1 10 02 c0       	push   0xc00210d1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 d1 10 02 c0       	push   0xc00210d1
c000ac83:	e8 61 66 00 00       	call   c00112e9 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 ed 10 02 c0       	push   0xc00210ed
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 ed 10 02 c0       	push   0xc00210ed
c000acaf:	e8 35 66 00 00       	call   c00112e9 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 8c 12 02 c0       	push   0xc002128c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 8c 12 02 c0       	push   0xc002128c
c000acdb:	e8 09 66 00 00       	call   c00112e9 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 b0 12 02 c0       	push   0xc00212b0
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 b0 12 02 c0       	push   0xc00212b0
c000ad07:	e8 dd 65 00 00       	call   c00112e9 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 15 67 00 00       	call   c0011437 <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 cf 12 02 c0       	push   0xc00212cf
c000ad57:	e8 8d 65 00 00       	call   c00112e9 <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 d8 12 02 c0       	push   0xc00212d8
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 7e 0a 00 00       	call   c000b822 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 f6 12 02 c0       	push   0xc00212f6
c000adb3:	e8 31 65 00 00       	call   c00112e9 <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 25 0b 00 00       	call   c000b8ea <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 10 13 02 c0       	push   0xc0021310
c000add4:	e8 10 65 00 00       	call   c00112e9 <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 2a 13 02 c0       	push   0xc002132a
c000ae1b:	e8 c9 64 00 00       	call   c00112e9 <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 0f 0b 00 00       	call   c000b948 <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 44             	sub    esp,0x44
c000af14:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af18:	56                   	push   esi
c000af19:	68 44 13 02 c0       	push   0xc0021344
c000af1e:	e8 e7 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af23:	89 34 24             	mov    DWORD PTR [esp],esi
c000af26:	e8 9b ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 c7                	mov    edi,eax
c000af30:	89 d0                	mov    eax,edx
c000af32:	09 f8                	or     eax,edi
c000af34:	0f 84 de 01 00 00    	je     c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af3a:	53                   	push   ebx
c000af3b:	89 d5                	mov    ebp,edx
c000af3d:	53                   	push   ebx
c000af3e:	57                   	push   edi
c000af3f:	68 5e 13 02 c0       	push   0xc002135e
c000af44:	e8 c1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af49:	58                   	pop    eax
c000af4a:	5a                   	pop    edx
c000af4b:	55                   	push   ebp
c000af4c:	68 6c 13 02 c0       	push   0xc002136c
c000af51:	e8 b4 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af5d:	e8 71 cb ff ff       	call   c0007ad3 <malloc>
c000af62:	83 c4 0c             	add    esp,0xc
c000af65:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af6b:	56                   	push   esi
c000af6c:	50                   	push   eax
c000af6d:	89 c3                	mov    ebx,eax
c000af6f:	e8 ae 08 00 00       	call   c000b822 <File::File(char const*, Process*)>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	85 db                	test   ebx,ebx
c000af79:	0f 84 68 01 00 00    	je     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	68 80 1f 02 c0       	push   0xc0021f80
c000af87:	e8 7e f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8c:	5a                   	pop    edx
c000af8d:	59                   	pop    ecx
c000af8e:	6a 01                	push   0x1
c000af90:	53                   	push   ebx
c000af91:	e8 54 09 00 00       	call   c000b8ea <File::open(FileOpenMode)>
c000af96:	83 c4 10             	add    esp,0x10
c000af99:	85 c0                	test   eax,eax
c000af9b:	74 0b                	je     c000afa8 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000af9d:	83 ec 0c             	sub    esp,0xc
c000afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa2:	53                   	push   ebx
c000afa3:	e9 39 01 00 00       	jmp    c000b0e1 <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	68 66 09 02 c0       	push   0xc0020966
c000afb0:	e8 55 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb5:	58                   	pop    eax
c000afb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afbc:	56                   	push   esi
c000afbd:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afc1:	52                   	push   edx
c000afc2:	6a 00                	push   0x0
c000afc4:	6a 08                	push   0x8
c000afc6:	53                   	push   ebx
c000afc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afca:	83 c4 20             	add    esp,0x20
c000afcd:	85 c0                	test   eax,eax
c000afcf:	0f 85 fe 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afd5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afda:	0f 85 f3 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	68 b2 1f 02 c0       	push   0xc0021fb2
c000afe8:	e8 1d f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afed:	8d 54 24 20          	lea    edx,[esp+0x20]
c000aff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff3:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff6:	52                   	push   edx
c000aff7:	6a 00                	push   0x0
c000aff9:	6a 08                	push   0x8
c000affb:	53                   	push   ebx
c000affc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afff:	83 c4 20             	add    esp,0x20
c000b002:	85 c0                	test   eax,eax
c000b004:	0f 85 c9 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b00a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b00f:	0f 85 be 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b015:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b019:	0f 85 f9 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b01f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b023:	0f 85 ef 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	68 7a 13 02 c0       	push   0xc002137a
c000b031:	e8 d4 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b036:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b03e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b046:	83 c4 0c             	add    esp,0xc
c000b049:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b04d:	50                   	push   eax
c000b04e:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b052:	50                   	push   eax
c000b053:	53                   	push   ebx
c000b054:	e8 93 0b 00 00       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b061:	75 70                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b063:	b8 0f 00 00 00       	mov    eax,0xf
c000b068:	31 ff                	xor    edi,edi
c000b06a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b06e:	89 f8                	mov    eax,edi
c000b070:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b074:	73 5d                	jae    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	68 7a 13 02 c0       	push   0xc002137a
c000b07e:	e8 87 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b087:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b090:	83 c0 f0             	add    eax,0xfffffff0
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	83 d2 ff             	adc    edx,0xffffffff
c000b09a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	39 c1                	cmp    ecx,eax
c000b0a3:	19 d7                	sbb    edi,edx
c000b0a5:	72 40                	jb     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ac:	56                   	push   esi
c000b0ad:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0b1:	52                   	push   edx
c000b0b2:	50                   	push   eax
c000b0b3:	53                   	push   ebx
c000b0b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0b7:	83 c4 20             	add    esp,0x20
c000b0ba:	85 c0                	test   eax,eax
c000b0bc:	75 15                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c2:	89 c7                	mov    edi,eax
c000b0c4:	c1 ff 1f             	sar    edi,0x1f
c000b0c7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0cb:	75 06                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0cd:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0d1:	74 19                	je     c000b0ec <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	53                   	push   ebx
c000b0d7:	e8 6c 08 00 00       	call   c000b948 <File::close()>
c000b0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	83 c8 ff             	or     eax,0xffffffff
c000b0ea:	eb 2e                	jmp    c000b11a <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	68 92 2a 02 c0       	push   0xc0022a92
c000b0f4:	e8 11 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0fc:	e8 47 08 00 00       	call   c000b948 <File::close()>
c000b101:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b109:	c7 04 24 7d 13 02 c0 	mov    DWORD PTR [esp],0xc002137d
c000b110:	e8 f5 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	31 c0                	xor    eax,eax
c000b11a:	83 c4 3c             	add    esp,0x3c
c000b11d:	5b                   	pop    ebx
c000b11e:	5e                   	pop    esi
c000b11f:	5f                   	pop    edi
c000b120:	5d                   	pop    ebp
c000b121:	c3                   	ret    

c000b122 <KeCreateSymlink(char const*, char const*)>:
c000b122:	55                   	push   ebp
c000b123:	57                   	push   edi
c000b124:	56                   	push   esi
c000b125:	53                   	push   ebx
c000b126:	83 ec 38             	sub    esp,0x38
c000b129:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b12d:	68 14 01 00 00       	push   0x114
c000b132:	e8 9c c9 ff ff       	call   c0007ad3 <malloc>
c000b137:	83 c4 0c             	add    esp,0xc
c000b13a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b140:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b144:	89 c3                	mov    ebx,eax
c000b146:	50                   	push   eax
c000b147:	e8 d6 06 00 00       	call   c000b822 <File::File(char const*, Process*)>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	85 db                	test   ebx,ebx
c000b151:	b8 01 00 00 00       	mov    eax,0x1
c000b156:	0f 84 fb 00 00 00    	je     c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b15c:	52                   	push   edx
c000b15d:	52                   	push   edx
c000b15e:	6a 12                	push   0x12
c000b160:	53                   	push   ebx
c000b161:	e8 84 07 00 00       	call   c000b8ea <File::open(FileOpenMode)>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	85 c0                	test   eax,eax
c000b16b:	74 0b                	je     c000b178 <KeCreateSymlink(char const*, char const*)+0x56>
c000b16d:	83 ec 0c             	sub    esp,0xc
c000b170:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b172:	53                   	push   ebx
c000b173:	e9 d4 00 00 00       	jmp    c000b24c <KeCreateSymlink(char const*, char const*)+0x12a>
c000b178:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b17c:	be 80 13 02 c0       	mov    esi,0xc0021380
c000b181:	b9 09 00 00 00       	mov    ecx,0x9
c000b186:	fc                   	cld    
c000b187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b189:	83 ec 0c             	sub    esp,0xc
c000b18c:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b190:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b192:	56                   	push   esi
c000b193:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b197:	52                   	push   edx
c000b198:	6a 00                	push   0x0
c000b19a:	6a 08                	push   0x8
c000b19c:	53                   	push   ebx
c000b19d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a0:	83 c4 20             	add    esp,0x20
c000b1a3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1a8:	0f 85 90 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	0f 85 88 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1b6:	e8 59 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c8:	56                   	push   esi
c000b1c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1cd:	52                   	push   edx
c000b1ce:	6a 00                	push   0x0
c000b1d0:	6a 08                	push   0x8
c000b1d2:	53                   	push   ebx
c000b1d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1d6:	83 c4 20             	add    esp,0x20
c000b1d9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1de:	75 5e                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e0:	85 c0                	test   eax,eax
c000b1e2:	75 5a                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1ec:	55                   	push   ebp
c000b1ed:	e8 8e 53 ff ff       	call   c0000580 <strlen>
c000b1f2:	31 d2                	xor    edx,edx
c000b1f4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1f7:	55                   	push   ebp
c000b1f8:	52                   	push   edx
c000b1f9:	50                   	push   eax
c000b1fa:	53                   	push   ebx
c000b1fb:	ff d7                	call   edi
c000b1fd:	83 c4 14             	add    esp,0x14
c000b200:	55                   	push   ebp
c000b201:	89 c6                	mov    esi,eax
c000b203:	e8 78 53 ff ff       	call   c0000580 <strlen>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b20f:	75 2d                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b211:	85 f6                	test   esi,esi
c000b213:	75 29                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b215:	50                   	push   eax
c000b216:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b222:	e8 30 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22a:	e8 19 07 00 00       	call   c000b948 <File::close()>
c000b22f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b237:	83 c4 10             	add    esp,0x10
c000b23a:	31 c0                	xor    eax,eax
c000b23c:	eb 19                	jmp    c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	53                   	push   ebx
c000b242:	e8 01 07 00 00       	call   c000b948 <File::close()>
c000b247:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b249:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24f:	83 c4 10             	add    esp,0x10
c000b252:	b8 01 00 00 00       	mov    eax,0x1
c000b257:	83 c4 2c             	add    esp,0x2c
c000b25a:	5b                   	pop    ebx
c000b25b:	5e                   	pop    esi
c000b25c:	5f                   	pop    edi
c000b25d:	5d                   	pop    ebp
c000b25e:	c3                   	ret    

c000b25f <KeInitialiseSymlinks()>:
c000b25f:	53                   	push   ebx
c000b260:	83 ec 10             	sub    esp,0x10
c000b263:	6a 00                	push   0x0
c000b265:	68 52 ae 00 c0       	push   0xc000ae52
c000b26a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b274:	e8 89 58 00 00       	call   c0010b02 <KeRegisterAtexit(void (*)(void*), void*)>
c000b279:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b280:	e8 4e c8 ff ff       	call   c0007ad3 <malloc>
c000b285:	83 c4 0c             	add    esp,0xc
c000b288:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b28e:	68 d8 12 02 c0       	push   0xc00212d8
c000b293:	50                   	push   eax
c000b294:	89 c3                	mov    ebx,eax
c000b296:	e8 87 05 00 00       	call   c000b822 <File::File(char const*, Process*)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	85 db                	test   ebx,ebx
c000b2a0:	75 10                	jne    c000b2b2 <KeInitialiseSymlinks()+0x53>
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	68 89 13 02 c0       	push   0xc0021389
c000b2aa:	e8 3a 60 00 00       	call   c00112e9 <KePanic(char const*)>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	83 ec 0c             	sub    esp,0xc
c000b2b5:	53                   	push   ebx
c000b2b6:	e8 f3 08 00 00       	call   c000bbae <File::exists()>
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	84 c0                	test   al,al
c000b2c0:	75 2d                	jne    c000b2ef <KeInitialiseSymlinks()+0x90>
c000b2c2:	52                   	push   edx
c000b2c3:	52                   	push   edx
c000b2c4:	6a 12                	push   0x12
c000b2c6:	53                   	push   ebx
c000b2c7:	e8 1e 06 00 00       	call   c000b8ea <File::open(FileOpenMode)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	85 c0                	test   eax,eax
c000b2d1:	74 10                	je     c000b2e3 <KeInitialiseSymlinks()+0x84>
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	68 a6 13 02 c0       	push   0xc00213a6
c000b2db:	e8 09 60 00 00       	call   c00112e9 <KePanic(char const*)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	83 ec 0c             	sub    esp,0xc
c000b2e6:	53                   	push   ebx
c000b2e7:	e8 5c 06 00 00       	call   c000b948 <File::close()>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	85 db                	test   ebx,ebx
c000b2f1:	74 0c                	je     c000b2ff <KeInitialiseSymlinks()+0xa0>
c000b2f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f5:	83 ec 0c             	sub    esp,0xc
c000b2f8:	53                   	push   ebx
c000b2f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	50                   	push   eax
c000b300:	50                   	push   eax
c000b301:	68 c3 13 02 c0       	push   0xc00213c3
c000b306:	68 d1 13 02 c0       	push   0xc00213d1
c000b30b:	e8 12 fe ff ff       	call   c000b122 <KeCreateSymlink(char const*, char const*)>
c000b310:	83 c4 18             	add    esp,0x18
c000b313:	5b                   	pop    ebx
c000b314:	c3                   	ret    
c000b315:	90                   	nop

c000b316 <File::read(unsigned long long, void*, int*)>:
c000b316:	53                   	push   ebx
c000b317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b31b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b326:	83 f8 19             	cmp    eax,0x19
c000b329:	77 35                	ja     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b32b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b332:	85 c0                	test   eax,eax
c000b334:	74 2a                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b336:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33c:	85 c0                	test   eax,eax
c000b33e:	74 20                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b340:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b344:	74 21                	je     c000b367 <File::read(unsigned long long, void*, int*)+0x51>
c000b346:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b348:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b352:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b356:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b35a:	5b                   	pop    ebx
c000b35b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b35e:	ff e0                	jmp    eax
c000b360:	b8 0b 00 00 00       	mov    eax,0xb
c000b365:	eb 05                	jmp    c000b36c <File::read(unsigned long long, void*, int*)+0x56>
c000b367:	b8 05 00 00 00       	mov    eax,0x5
c000b36c:	5b                   	pop    ebx
c000b36d:	c3                   	ret    

c000b36e <File::write(unsigned long long, void*, int*)>:
c000b36e:	53                   	push   ebx
c000b36f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b373:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b377:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37e:	83 f8 19             	cmp    eax,0x19
c000b381:	77 35                	ja     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b383:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b38a:	85 c0                	test   eax,eax
c000b38c:	74 2a                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b38e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b394:	85 c0                	test   eax,eax
c000b396:	74 20                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b398:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b39c:	74 21                	je     c000b3bf <File::write(unsigned long long, void*, int*)+0x51>
c000b39e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b2:	5b                   	pop    ebx
c000b3b3:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3b6:	ff e0                	jmp    eax
c000b3b8:	b8 0b 00 00 00       	mov    eax,0xb
c000b3bd:	eb 05                	jmp    c000b3c4 <File::write(unsigned long long, void*, int*)+0x56>
c000b3bf:	b8 05 00 00 00       	mov    eax,0x5
c000b3c4:	5b                   	pop    ebx
c000b3c5:	c3                   	ret    

c000b3c6 <Directory::read(unsigned long long, void*, int*)>:
c000b3c6:	53                   	push   ebx
c000b3c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3d6:	83 f8 19             	cmp    eax,0x19
c000b3d9:	77 35                	ja     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3db:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3e2:	85 c0                	test   eax,eax
c000b3e4:	74 2a                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3e6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	74 20                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f4:	74 21                	je     c000b417 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3fc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b406:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40a:	5b                   	pop    ebx
c000b40b:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b40e:	ff e0                	jmp    eax
c000b410:	b8 0b 00 00 00       	mov    eax,0xb
c000b415:	eb 05                	jmp    c000b41c <Directory::read(unsigned long long, void*, int*)+0x56>
c000b417:	b8 05 00 00 00       	mov    eax,0x5
c000b41c:	5b                   	pop    ebx
c000b41d:	c3                   	ret    

c000b41e <Directory::write(unsigned long long, void*, int*)>:
c000b41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b422:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b429:	b8 0b 00 00 00       	mov    eax,0xb
c000b42e:	83 fa 19             	cmp    edx,0x19
c000b431:	77 18                	ja     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b433:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b43a:	85 d2                	test   edx,edx
c000b43c:	74 0d                	je     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b43e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b445:	19 c0                	sbb    eax,eax
c000b447:	83 e0 0a             	and    eax,0xa
c000b44a:	40                   	inc    eax
c000b44b:	c3                   	ret    

c000b44c <File::isAtty()>:
c000b44c:	31 c0                	xor    eax,eax
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Directory::isAtty()>:
c000b450:	31 c0                	xor    eax,eax
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b454:	b8 0a 00 00 00       	mov    eax,0xa
c000b459:	c3                   	ret    

c000b45a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b45a:	b8 0a 00 00 00       	mov    eax,0xa
c000b45f:	c3                   	ret    

c000b460 <Filesystem::allocateSwapfile(char const*, int)>:
c000b460:	31 c0                	xor    eax,eax
c000b462:	31 d2                	xor    edx,edx
c000b464:	c3                   	ret    
c000b465:	90                   	nop

c000b466 <File::~File()>:
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	ba b4 14 02 c0       	mov    edx,0xc00214b4
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	89 10                	mov    DWORD PTR [eax],edx
c000b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	50                   	push   eax
c000b47c:	e8 0b df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	90                   	nop
c000b485:	83 c4 0c             	add    esp,0xc
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <File::~File()>:
c000b48a:	83 ec 0c             	sub    esp,0xc
c000b48d:	83 ec 0c             	sub    esp,0xc
c000b490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b494:	e8 cd ff ff ff       	call   c000b466 <File::~File()>
c000b499:	83 c4 10             	add    esp,0x10
c000b49c:	83 ec 08             	sub    esp,0x8
c000b49f:	68 14 01 00 00       	push   0x114
c000b4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a8:	e8 5f f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4ad:	83 c4 10             	add    esp,0x10
c000b4b0:	83 c4 0c             	add    esp,0xc
c000b4b3:	c3                   	ret    

c000b4b4 <Directory::~Directory()>:
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	ba d0 14 02 c0       	mov    edx,0xc00214d0
c000b4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c0:	89 10                	mov    DWORD PTR [eax],edx
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	50                   	push   eax
c000b4ca:	e8 bd de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	90                   	nop
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <Directory::~Directory()>:
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	83 ec 0c             	sub    esp,0xc
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 cd ff ff ff       	call   c000b4b4 <Directory::~Directory()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 ec 08             	sub    esp,0x8
c000b4ed:	68 14 01 00 00       	push   0x114
c000b4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f6:	e8 11 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 c4 0c             	add    esp,0xc
c000b501:	c3                   	ret    

c000b502 <Filesystem::Filesystem()>:
c000b502:	ba 48 14 02 c0       	mov    edx,0xc0021448
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	89 10                	mov    DWORD PTR [eax],edx
c000b50d:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b51a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51e:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b523:	90                   	nop
c000b524:	c3                   	ret    
c000b525:	90                   	nop

c000b526 <Filesystem::~Filesystem()>:
c000b526:	ba 48 14 02 c0       	mov    edx,0xc0021448
c000b52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52f:	89 10                	mov    DWORD PTR [eax],edx
c000b531:	90                   	nop
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Filesystem::~Filesystem()>:
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b53b:	e8 e6 ff ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c000b540:	83 c4 04             	add    esp,0x4
c000b543:	83 ec 08             	sub    esp,0x8
c000b546:	6a 08                	push   0x8
c000b548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54c:	e8 bb f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	83 c4 0c             	add    esp,0xc
c000b557:	c3                   	ret    

c000b558 <Fs::getcwd(Process*, char*, int)>:
c000b558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b55c:	31 c0                	xor    eax,eax
c000b55e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b562:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b565:	7d 15                	jge    c000b57c <Fs::getcwd(Process*, char*, int)+0x24>
c000b567:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b56b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b572:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b575:	84 c9                	test   cl,cl
c000b577:	74 06                	je     c000b57f <Fs::getcwd(Process*, char*, int)+0x27>
c000b579:	40                   	inc    eax
c000b57a:	eb e2                	jmp    c000b55e <Fs::getcwd(Process*, char*, int)+0x6>
c000b57c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b57f:	31 c0                	xor    eax,eax
c000b581:	c3                   	ret    

c000b582 <Fs::initVFS()>:
c000b582:	83 ec 18             	sub    esp,0x18
c000b585:	6a 08                	push   0x8
c000b587:	e8 47 c5 ff ff       	call   c0007ad3 <malloc>
c000b58c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58f:	e8 c8 e1 00 00       	call   c001975c <FAT::FAT()>
c000b594:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b59b:	e8 33 c5 ff ff       	call   c0007ad3 <malloc>
c000b5a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a3:	e8 e2 f0 00 00       	call   c001a68a <ISO9660::ISO9660()>
c000b5a8:	83 c4 1c             	add    esp,0x1c
c000b5ab:	c3                   	ret    

c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ac:	55                   	push   ebp
c000b5ad:	57                   	push   edi
c000b5ae:	56                   	push   esi
c000b5af:	53                   	push   ebx
c000b5b0:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5b6:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b5bd:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b5c4:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5cb:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5d2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b5d6:	68 00 04 00 00       	push   0x400
c000b5db:	6a 00                	push   0x0
c000b5dd:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b5e1:	57                   	push   edi
c000b5e2:	e8 09 4f ff ff       	call   c00004f0 <memset>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b5ee:	75 0b                	jne    c000b5fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b5f0:	50                   	push   eax
c000b5f1:	50                   	push   eax
c000b5f2:	56                   	push   esi
c000b5f3:	57                   	push   edi
c000b5f4:	e8 57 50 ff ff       	call   c0000650 <strcpy>
c000b5f9:	eb 45                	jmp    c000b640 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b5fb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b5fe:	83 f8 2f             	cmp    eax,0x2f
c000b601:	74 05                	je     c000b608 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b603:	83 f8 5c             	cmp    eax,0x5c
c000b606:	75 19                	jne    c000b621 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b608:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b60b:	3c 60                	cmp    al,0x60
c000b60d:	7e 03                	jle    c000b612 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b60f:	83 e8 20             	sub    eax,0x20
c000b612:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b616:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b61d:	50                   	push   eax
c000b61e:	50                   	push   eax
c000b61f:	eb 18                	jmp    c000b639 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b621:	50                   	push   eax
c000b622:	50                   	push   eax
c000b623:	55                   	push   ebp
c000b624:	57                   	push   edi
c000b625:	e8 26 50 ff ff       	call   c0000650 <strcpy>
c000b62a:	58                   	pop    eax
c000b62b:	5a                   	pop    edx
c000b62c:	68 03 24 02 c0       	push   0xc0022403
c000b631:	57                   	push   edi
c000b632:	e8 39 52 ff ff       	call   c0000870 <strcat>
c000b637:	59                   	pop    ecx
c000b638:	5d                   	pop    ebp
c000b639:	56                   	push   esi
c000b63a:	57                   	push   edi
c000b63b:	e8 30 52 ff ff       	call   c0000870 <strcat>
c000b640:	83 c4 10             	add    esp,0x10
c000b643:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b647:	3c 60                	cmp    al,0x60
c000b649:	7e 03                	jle    c000b64e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b64b:	83 e8 20             	sub    eax,0x20
c000b64e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b652:	be 03 00 00 00       	mov    esi,0x3
c000b657:	88 03                	mov    BYTE PTR [ebx],al
c000b659:	b8 03 00 00 00       	mov    eax,0x3
c000b65e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b665:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b66b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b66f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b674:	89 fa                	mov    edx,edi
c000b676:	0f be ea             	movsx  ebp,dl
c000b679:	85 ed                	test   ebp,ebp
c000b67b:	0f 84 a1 00 00 00    	je     c000b722 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b681:	8d 56 01             	lea    edx,[esi+0x1]
c000b684:	83 fd 2f             	cmp    ebp,0x2f
c000b687:	74 05                	je     c000b68e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b689:	83 fd 5c             	cmp    ebp,0x5c
c000b68c:	75 12                	jne    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b68e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b693:	89 c5                	mov    ebp,eax
c000b695:	74 09                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b697:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b69b:	40                   	inc    eax
c000b69c:	89 d6                	mov    esi,edx
c000b69e:	eb cf                	jmp    c000b66f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6a0:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b6a5:	89 f9                	mov    ecx,edi
c000b6a7:	0f be e9             	movsx  ebp,cl
c000b6aa:	75 61                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6ac:	83 fd 2e             	cmp    ebp,0x2e
c000b6af:	75 5c                	jne    c000b70d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b6b1:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6b6:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b6bb:	74 19                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b6bd:	83 fd 2e             	cmp    ebp,0x2e
c000b6c0:	74 55                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6c2:	89 f2                	mov    edx,esi
c000b6c4:	42                   	inc    edx
c000b6c5:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6ca:	83 f9 2f             	cmp    ecx,0x2f
c000b6cd:	74 f5                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6cf:	83 f9 5c             	cmp    ecx,0x5c
c000b6d2:	74 f0                	je     c000b6c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b6d4:	eb c6                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d6:	83 fd 2e             	cmp    ebp,0x2e
c000b6d9:	74 3c                	je     c000b717 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b6db:	83 f8 03             	cmp    eax,0x3
c000b6de:	74 bc                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6e0:	42                   	inc    edx
c000b6e1:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b6e6:	83 f9 2f             	cmp    ecx,0x2f
c000b6e9:	74 f5                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6eb:	83 f9 5c             	cmp    ecx,0x5c
c000b6ee:	74 f0                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b6f0:	48                   	dec    eax
c000b6f1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6f5:	75 06                	jne    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b6f7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6fb:	eb f3                	jmp    c000b6f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b6fd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b701:	74 07                	je     c000b70a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b703:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b707:	48                   	dec    eax
c000b708:	eb f3                	jmp    c000b6fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b70a:	40                   	inc    eax
c000b70b:	eb 8f                	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b70d:	83 fd 2f             	cmp    ebp,0x2f
c000b710:	74 8a                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b712:	83 fd 5c             	cmp    ebp,0x5c
c000b715:	74 85                	je     c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b717:	89 f9                	mov    ecx,edi
c000b719:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b71c:	40                   	inc    eax
c000b71d:	e9 7a ff ff ff       	jmp    c000b69c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b722:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	53                   	push   ebx
c000b72a:	e8 51 4e ff ff       	call   c0000580 <strlen>
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b737:	75 26                	jne    c000b75f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1b3>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	53                   	push   ebx
c000b73d:	e8 3e 4e ff ff       	call   c0000580 <strlen>
c000b742:	83 c4 10             	add    esp,0x10
c000b745:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b74a:	74 26                	je     c000b772 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1c6>
c000b74c:	83 ec 0c             	sub    esp,0xc
c000b74f:	53                   	push   ebx
c000b750:	e8 2b 4e ff ff       	call   c0000580 <strlen>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b75d:	eb c7                	jmp    c000b726 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b75f:	83 ec 0c             	sub    esp,0xc
c000b762:	53                   	push   ebx
c000b763:	e8 18 4e ff ff       	call   c0000580 <strlen>
c000b768:	83 c4 10             	add    esp,0x10
c000b76b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b770:	74 c7                	je     c000b739 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x18d>
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	53                   	push   ebx
c000b776:	e8 05 4e ff ff       	call   c0000580 <strlen>
c000b77b:	0f be 7c 03 fe       	movsx  edi,BYTE PTR [ebx+eax*1-0x2]
c000b780:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b783:	e8 f8 4d ff ff       	call   c0000580 <strlen>
c000b788:	57                   	push   edi
c000b789:	31 ff                	xor    edi,edi
c000b78b:	0f be 44 03 ff       	movsx  eax,BYTE PTR [ebx+eax*1-0x1]
c000b790:	50                   	push   eax
c000b791:	53                   	push   ebx
c000b792:	68 ef 13 02 c0       	push   0xc00213ef
c000b797:	e8 6e f1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b79c:	83 c4 14             	add    esp,0x14
c000b79f:	53                   	push   ebx
c000b7a0:	e8 db 4d ff ff       	call   c0000580 <strlen>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b7ad:	80 7c 03 ff 77       	cmp    BYTE PTR [ebx+eax*1-0x1],0x77
c000b7b2:	75 46                	jne    c000b7fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x24e>
c000b7b4:	83 ec 0c             	sub    esp,0xc
c000b7b7:	53                   	push   ebx
c000b7b8:	e8 c3 4d ff ff       	call   c0000580 <strlen>
c000b7bd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b7c2:	5e                   	pop    esi
c000b7c3:	5f                   	pop    edi
c000b7c4:	53                   	push   ebx
c000b7c5:	68 02 14 02 c0       	push   0xc0021402
c000b7ca:	e8 3b f1 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b7cf:	83 c4 10             	add    esp,0x10
c000b7d2:	eb 43                	jmp    c000b817 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x26b>
c000b7d4:	50                   	push   eax
c000b7d5:	50                   	push   eax
c000b7d6:	53                   	push   ebx
c000b7d7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b7db:	55                   	push   ebp
c000b7dc:	e8 6f 4e ff ff       	call   c0000650 <strcpy>
c000b7e1:	5a                   	pop    edx
c000b7e2:	59                   	pop    ecx
c000b7e3:	53                   	push   ebx
c000b7e4:	55                   	push   ebp
c000b7e5:	e8 23 f7 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b7ea:	83 c4 10             	add    esp,0x10
c000b7ed:	48                   	dec    eax
c000b7ee:	75 27                	jne    c000b817 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x26b>
c000b7f0:	8d 47 01             	lea    eax,[edi+0x1]
c000b7f3:	83 ff 14             	cmp    edi,0x14
c000b7f6:	74 08                	je     c000b800 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x254>
c000b7f8:	89 c7                	mov    edi,eax
c000b7fa:	85 f6                	test   esi,esi
c000b7fc:	75 d6                	jne    c000b7d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x228>
c000b7fe:	eb 17                	jmp    c000b817 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x26b>
c000b800:	83 ec 0c             	sub    esp,0xc
c000b803:	bf 15 00 00 00       	mov    edi,0x15
c000b808:	68 17 14 02 c0       	push   0xc0021417
c000b80d:	e8 d7 5a 00 00       	call   c00112e9 <KePanic(char const*)>
c000b812:	83 c4 10             	add    esp,0x10
c000b815:	eb e3                	jmp    c000b7fa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x24e>
c000b817:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b81d:	5b                   	pop    ebx
c000b81e:	5e                   	pop    esi
c000b81f:	5f                   	pop    edi
c000b820:	5d                   	pop    ebp
c000b821:	c3                   	ret    

c000b822 <File::File(char const*, Process*)>:
c000b822:	83 ec 0c             	sub    esp,0xc
c000b825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b829:	83 ec 08             	sub    esp,0x8
c000b82c:	6a 00                	push   0x0
c000b82e:	50                   	push   eax
c000b82f:	e8 72 d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b834:	83 c4 10             	add    esp,0x10
c000b837:	ba b4 14 02 c0       	mov    edx,0xc00214b4
c000b83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b840:	89 10                	mov    DWORD PTR [eax],edx
c000b842:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b847:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b84b:	0f 95 c0             	setne  al
c000b84e:	0f b6 c0             	movzx  eax,al
c000b851:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b855:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b85b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b85f:	83 c2 0d             	add    edx,0xd
c000b862:	50                   	push   eax
c000b863:	51                   	push   ecx
c000b864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b868:	52                   	push   edx
c000b869:	e8 3e fd ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b86e:	83 c4 10             	add    esp,0x10
c000b871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b875:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b878:	83 e8 41             	sub    eax,0x41
c000b87b:	88 c2                	mov    dl,al
c000b87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b881:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b893:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b899:	0f b6 c0             	movzx  eax,al
c000b89c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8a3:	85 c0                	test   eax,eax
c000b8a5:	74 3e                	je     c000b8e5 <File::File(char const*, Process*)+0xc3>
c000b8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ab:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8b1:	0f b6 c0             	movzx  eax,al
c000b8b4:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8bb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8c1:	85 c0                	test   eax,eax
c000b8c3:	75 20                	jne    c000b8e5 <File::File(char const*, Process*)+0xc3>
c000b8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8cf:	0f b6 c0             	movzx  eax,al
c000b8d2:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8d9:	83 ec 0c             	sub    esp,0xc
c000b8dc:	50                   	push   eax
c000b8dd:	e8 92 21 00 00       	call   c000da74 <LogicalDisk::mount()>
c000b8e2:	83 c4 10             	add    esp,0x10
c000b8e5:	90                   	nop
c000b8e6:	83 c4 0c             	add    esp,0xc
c000b8e9:	c3                   	ret    

c000b8ea <File::open(FileOpenMode)>:
c000b8ea:	53                   	push   ebx
c000b8eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b8f0:	83 ec 08             	sub    esp,0x8
c000b8f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8f7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b8fe:	83 fa 19             	cmp    edx,0x19
c000b901:	77 40                	ja     c000b943 <File::open(FileOpenMode)+0x59>
c000b903:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b90a:	85 d2                	test   edx,edx
c000b90c:	74 35                	je     c000b943 <File::open(FileOpenMode)+0x59>
c000b90e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b914:	85 d2                	test   edx,edx
c000b916:	74 2b                	je     c000b943 <File::open(FileOpenMode)+0x59>
c000b918:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b91c:	b8 06 00 00 00       	mov    eax,0x6
c000b921:	75 20                	jne    c000b943 <File::open(FileOpenMode)+0x59>
c000b923:	8b 02                	mov    eax,DWORD PTR [edx]
c000b925:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b92b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92f:	51                   	push   ecx
c000b930:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b933:	51                   	push   ecx
c000b934:	52                   	push   edx
c000b935:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b938:	83 c4 10             	add    esp,0x10
c000b93b:	85 c0                	test   eax,eax
c000b93d:	75 04                	jne    c000b943 <File::open(FileOpenMode)+0x59>
c000b93f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b943:	83 c4 08             	add    esp,0x8
c000b946:	5b                   	pop    ebx
c000b947:	c3                   	ret    

c000b948 <File::close()>:
c000b948:	53                   	push   ebx
c000b949:	b8 0b 00 00 00       	mov    eax,0xb
c000b94e:	83 ec 08             	sub    esp,0x8
c000b951:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b955:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b95c:	83 f9 19             	cmp    ecx,0x19
c000b95f:	77 41                	ja     c000b9a2 <File::close()+0x5a>
c000b961:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b968:	85 db                	test   ebx,ebx
c000b96a:	74 36                	je     c000b9a2 <File::close()+0x5a>
c000b96c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b973:	74 2d                	je     c000b9a2 <File::close()+0x5a>
c000b975:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b979:	b8 05 00 00 00       	mov    eax,0x5
c000b97e:	74 22                	je     c000b9a2 <File::close()+0x5a>
c000b980:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b984:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b98b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b991:	53                   	push   ebx
c000b992:	53                   	push   ebx
c000b993:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b995:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b99b:	50                   	push   eax
c000b99c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	83 c4 08             	add    esp,0x8
c000b9a5:	5b                   	pop    ebx
c000b9a6:	c3                   	ret    
c000b9a7:	90                   	nop

c000b9a8 <File::seek(unsigned long long)>:
c000b9a8:	56                   	push   esi
c000b9a9:	b8 0b 00 00 00       	mov    eax,0xb
c000b9ae:	53                   	push   ebx
c000b9af:	51                   	push   ecx
c000b9b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9bc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9c3:	83 fa 19             	cmp    edx,0x19
c000b9c6:	77 31                	ja     c000b9f9 <File::seek(unsigned long long)+0x51>
c000b9c8:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9cf:	85 d2                	test   edx,edx
c000b9d1:	74 26                	je     c000b9f9 <File::seek(unsigned long long)+0x51>
c000b9d3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9d9:	85 d2                	test   edx,edx
c000b9db:	74 1c                	je     c000b9f9 <File::seek(unsigned long long)+0x51>
c000b9dd:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9e1:	b8 05 00 00 00       	mov    eax,0x5
c000b9e6:	74 11                	je     c000b9f9 <File::seek(unsigned long long)+0x51>
c000b9e8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9ea:	53                   	push   ebx
c000b9eb:	51                   	push   ecx
c000b9ec:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9f2:	52                   	push   edx
c000b9f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9f6:	83 c4 10             	add    esp,0x10
c000b9f9:	5a                   	pop    edx
c000b9fa:	5b                   	pop    ebx
c000b9fb:	5e                   	pop    esi
c000b9fc:	c3                   	ret    
c000b9fd:	90                   	nop

c000b9fe <File::truncate(unsigned long long)>:
c000b9fe:	56                   	push   esi
c000b9ff:	b8 0b 00 00 00       	mov    eax,0xb
c000ba04:	53                   	push   ebx
c000ba05:	51                   	push   ecx
c000ba06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba19:	83 fa 19             	cmp    edx,0x19
c000ba1c:	77 31                	ja     c000ba4f <File::truncate(unsigned long long)+0x51>
c000ba1e:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba25:	85 d2                	test   edx,edx
c000ba27:	74 26                	je     c000ba4f <File::truncate(unsigned long long)+0x51>
c000ba29:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba2f:	85 d2                	test   edx,edx
c000ba31:	74 1c                	je     c000ba4f <File::truncate(unsigned long long)+0x51>
c000ba33:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba37:	b8 05 00 00 00       	mov    eax,0x5
c000ba3c:	74 11                	je     c000ba4f <File::truncate(unsigned long long)+0x51>
c000ba3e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba40:	53                   	push   ebx
c000ba41:	51                   	push   ecx
c000ba42:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba48:	52                   	push   edx
c000ba49:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba4c:	83 c4 10             	add    esp,0x10
c000ba4f:	5a                   	pop    edx
c000ba50:	5b                   	pop    ebx
c000ba51:	5e                   	pop    esi
c000ba52:	c3                   	ret    
c000ba53:	90                   	nop

c000ba54 <File::tell(unsigned long long*)>:
c000ba54:	83 ec 0c             	sub    esp,0xc
c000ba57:	b8 0b 00 00 00       	mov    eax,0xb
c000ba5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba60:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba67:	83 fa 19             	cmp    edx,0x19
c000ba6a:	77 34                	ja     c000baa0 <File::tell(unsigned long long*)+0x4c>
c000ba6c:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba73:	85 d2                	test   edx,edx
c000ba75:	74 29                	je     c000baa0 <File::tell(unsigned long long*)+0x4c>
c000ba77:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba7d:	85 d2                	test   edx,edx
c000ba7f:	74 1f                	je     c000baa0 <File::tell(unsigned long long*)+0x4c>
c000ba81:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba85:	b8 05 00 00 00       	mov    eax,0x5
c000ba8a:	74 14                	je     c000baa0 <File::tell(unsigned long long*)+0x4c>
c000ba8c:	50                   	push   eax
c000ba8d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba93:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba99:	52                   	push   edx
c000ba9a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba9d:	83 c4 10             	add    esp,0x10
c000baa0:	83 c4 0c             	add    esp,0xc
c000baa3:	c3                   	ret    

c000baa4 <File::rewind()>:
c000baa4:	83 ec 10             	sub    esp,0x10
c000baa7:	6a 00                	push   0x0
c000baa9:	6a 00                	push   0x0
c000baab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaf:	e8 f4 fe ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c000bab4:	83 c4 1c             	add    esp,0x1c
c000bab7:	c3                   	ret    

c000bab8 <File::unlink()>:
c000bab8:	83 ec 0c             	sub    esp,0xc
c000babb:	b8 0b 00 00 00       	mov    eax,0xb
c000bac0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bac4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bacb:	83 f9 19             	cmp    ecx,0x19
c000bace:	77 2f                	ja     c000baff <File::unlink()+0x47>
c000bad0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bad7:	85 c9                	test   ecx,ecx
c000bad9:	74 24                	je     c000baff <File::unlink()+0x47>
c000badb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bae1:	85 c9                	test   ecx,ecx
c000bae3:	74 1a                	je     c000baff <File::unlink()+0x47>
c000bae5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bae9:	b8 06 00 00 00       	mov    eax,0x6
c000baee:	75 0f                	jne    c000baff <File::unlink()+0x47>
c000baf0:	50                   	push   eax
c000baf1:	83 c2 0d             	add    edx,0xd
c000baf4:	50                   	push   eax
c000baf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baf7:	52                   	push   edx
c000baf8:	51                   	push   ecx
c000baf9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bafc:	83 c4 10             	add    esp,0x10
c000baff:	83 c4 0c             	add    esp,0xc
c000bb02:	c3                   	ret    
c000bb03:	90                   	nop

c000bb04 <File::rename(char const*)>:
c000bb04:	83 ec 0c             	sub    esp,0xc
c000bb07:	b8 0b 00 00 00       	mov    eax,0xb
c000bb0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb17:	83 f9 19             	cmp    ecx,0x19
c000bb1a:	77 32                	ja     c000bb4e <File::rename(char const*)+0x4a>
c000bb1c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb23:	85 c9                	test   ecx,ecx
c000bb25:	74 27                	je     c000bb4e <File::rename(char const*)+0x4a>
c000bb27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb2d:	85 c9                	test   ecx,ecx
c000bb2f:	74 1d                	je     c000bb4e <File::rename(char const*)+0x4a>
c000bb31:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb35:	b8 06 00 00 00       	mov    eax,0x6
c000bb3a:	75 12                	jne    c000bb4e <File::rename(char const*)+0x4a>
c000bb3c:	50                   	push   eax
c000bb3d:	83 c2 0d             	add    edx,0xd
c000bb40:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb46:	52                   	push   edx
c000bb47:	51                   	push   ecx
c000bb48:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb4b:	83 c4 10             	add    esp,0x10
c000bb4e:	83 c4 0c             	add    esp,0xc
c000bb51:	c3                   	ret    

c000bb52 <File::chfatattr(unsigned char, unsigned char)>:
c000bb52:	57                   	push   edi
c000bb53:	b8 0b 00 00 00       	mov    eax,0xb
c000bb58:	56                   	push   esi
c000bb59:	53                   	push   ebx
c000bb5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb62:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb6d:	83 f9 19             	cmp    ecx,0x19
c000bb70:	77 37                	ja     c000bba9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb72:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb79:	85 c9                	test   ecx,ecx
c000bb7b:	74 2c                	je     c000bba9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb7d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb83:	85 c9                	test   ecx,ecx
c000bb85:	74 22                	je     c000bba9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb8b:	b8 06 00 00 00       	mov    eax,0x6
c000bb90:	75 17                	jne    c000bba9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb92:	89 f0                	mov    eax,esi
c000bb94:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb96:	0f b6 db             	movzx  ebx,bl
c000bb99:	0f b6 f0             	movzx  esi,al
c000bb9c:	83 c2 0d             	add    edx,0xd
c000bb9f:	56                   	push   esi
c000bba0:	53                   	push   ebx
c000bba1:	52                   	push   edx
c000bba2:	51                   	push   ecx
c000bba3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bba6:	83 c4 10             	add    esp,0x10
c000bba9:	5b                   	pop    ebx
c000bbaa:	5e                   	pop    esi
c000bbab:	5f                   	pop    edi
c000bbac:	c3                   	ret    
c000bbad:	90                   	nop

c000bbae <File::exists()>:
c000bbae:	83 ec 0c             	sub    esp,0xc
c000bbb1:	31 c0                	xor    eax,eax
c000bbb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbb7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbbe:	83 f9 19             	cmp    ecx,0x19
c000bbc1:	77 24                	ja     c000bbe7 <File::exists()+0x39>
c000bbc3:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbca:	85 c9                	test   ecx,ecx
c000bbcc:	74 19                	je     c000bbe7 <File::exists()+0x39>
c000bbce:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbd4:	85 c9                	test   ecx,ecx
c000bbd6:	74 0f                	je     c000bbe7 <File::exists()+0x39>
c000bbd8:	50                   	push   eax
c000bbd9:	83 c2 0d             	add    edx,0xd
c000bbdc:	50                   	push   eax
c000bbdd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbdf:	52                   	push   edx
c000bbe0:	51                   	push   ecx
c000bbe1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	83 c4 0c             	add    esp,0xc
c000bbea:	c3                   	ret    
c000bbeb:	90                   	nop

c000bbec <File::stat(unsigned long long*, bool*)>:
c000bbec:	56                   	push   esi
c000bbed:	53                   	push   ebx
c000bbee:	50                   	push   eax
c000bbef:	b8 0b 00 00 00       	mov    eax,0xb
c000bbf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbf8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbfc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc07:	83 f9 19             	cmp    ecx,0x19
c000bc0a:	77 3d                	ja     c000bc49 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc0c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc13:	85 c9                	test   ecx,ecx
c000bc15:	74 32                	je     c000bc49 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc17:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc1d:	85 c9                	test   ecx,ecx
c000bc1f:	74 28                	je     c000bc49 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc21:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc27:	74 13                	je     c000bc3c <File::stat(unsigned long long*, bool*)+0x50>
c000bc29:	83 ec 04             	sub    esp,0x4
c000bc2c:	56                   	push   esi
c000bc2d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc33:	51                   	push   ecx
c000bc34:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc37:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc3a:	eb 0a                	jmp    c000bc46 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc3c:	53                   	push   ebx
c000bc3d:	83 c2 0d             	add    edx,0xd
c000bc40:	56                   	push   esi
c000bc41:	52                   	push   edx
c000bc42:	51                   	push   ecx
c000bc43:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc46:	83 c4 10             	add    esp,0x10
c000bc49:	5a                   	pop    edx
c000bc4a:	5b                   	pop    ebx
c000bc4b:	5e                   	pop    esi
c000bc4c:	c3                   	ret    

c000bc4d <Fs::setcwd(Process*, char*)>:
c000bc4d:	55                   	push   ebp
c000bc4e:	57                   	push   edi
c000bc4f:	56                   	push   esi
c000bc50:	53                   	push   ebx
c000bc51:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc57:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc5e:	6a 00                	push   0x0
c000bc60:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc66:	57                   	push   edi
c000bc67:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc6e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc72:	56                   	push   esi
c000bc73:	e8 34 f9 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc78:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc7b:	e8 00 49 ff ff       	call   c0000580 <strlen>
c000bc80:	83 c4 10             	add    esp,0x10
c000bc83:	83 f8 02             	cmp    eax,0x2
c000bc86:	77 15                	ja     c000bc9d <Fs::setcwd(Process*, char*)+0x50>
c000bc88:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc8d:	83 eb 41             	sub    ebx,0x41
c000bc90:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc97:	85 c0                	test   eax,eax
c000bc99:	75 1c                	jne    c000bcb7 <Fs::setcwd(Process*, char*)+0x6a>
c000bc9b:	eb 2f                	jmp    c000bccc <Fs::setcwd(Process*, char*)+0x7f>
c000bc9d:	83 ec 0c             	sub    esp,0xc
c000bca0:	56                   	push   esi
c000bca1:	e8 da 48 ff ff       	call   c0000580 <strlen>
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	83 f8 03             	cmp    eax,0x3
c000bcac:	75 57                	jne    c000bd05 <Fs::setcwd(Process*, char*)+0xb8>
c000bcae:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bcb3:	75 50                	jne    c000bd05 <Fs::setcwd(Process*, char*)+0xb8>
c000bcb5:	eb d1                	jmp    c000bc88 <Fs::setcwd(Process*, char*)+0x3b>
c000bcb7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bcbe:	75 0c                	jne    c000bccc <Fs::setcwd(Process*, char*)+0x7f>
c000bcc0:	83 ec 0c             	sub    esp,0xc
c000bcc3:	50                   	push   eax
c000bcc4:	e8 ab 1d 00 00       	call   c000da74 <LogicalDisk::mount()>
c000bcc9:	83 c4 10             	add    esp,0x10
c000bccc:	83 fb 19             	cmp    ebx,0x19
c000bccf:	b8 03 00 00 00       	mov    eax,0x3
c000bcd4:	0f 87 c6 00 00 00    	ja     c000bda0 <Fs::setcwd(Process*, char*)+0x153>
c000bcda:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bce1:	b8 05 00 00 00       	mov    eax,0x5
c000bce6:	85 d2                	test   edx,edx
c000bce8:	0f 84 b2 00 00 00    	je     c000bda0 <Fs::setcwd(Process*, char*)+0x153>
c000bcee:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bcf5:	b8 06 00 00 00       	mov    eax,0x6
c000bcfa:	0f 85 92 00 00 00    	jne    c000bd92 <Fs::setcwd(Process*, char*)+0x145>
c000bd00:	e9 9b 00 00 00       	jmp    c000bda0 <Fs::setcwd(Process*, char*)+0x153>
c000bd05:	83 ec 0c             	sub    esp,0xc
c000bd08:	68 14 01 00 00       	push   0x114
c000bd0d:	e8 c1 bd ff ff       	call   c0007ad3 <malloc>
c000bd12:	83 c4 0c             	add    esp,0xc
c000bd15:	55                   	push   ebp
c000bd16:	56                   	push   esi
c000bd17:	50                   	push   eax
c000bd18:	89 c3                	mov    ebx,eax
c000bd1a:	e8 03 fb ff ff       	call   c000b822 <File::File(char const*, Process*)>
c000bd1f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd24:	83 c4 0c             	add    esp,0xc
c000bd27:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd2b:	50                   	push   eax
c000bd2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd30:	50                   	push   eax
c000bd31:	53                   	push   ebx
c000bd32:	e8 b5 fe ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c000bd37:	83 c4 10             	add    esp,0x10
c000bd3a:	83 f8 02             	cmp    eax,0x2
c000bd3d:	74 27                	je     c000bd66 <Fs::setcwd(Process*, char*)+0x119>
c000bd3f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd44:	75 1c                	jne    c000bd62 <Fs::setcwd(Process*, char*)+0x115>
c000bd46:	85 db                	test   ebx,ebx
c000bd48:	b8 02 00 00 00       	mov    eax,0x2
c000bd4d:	74 51                	je     c000bda0 <Fs::setcwd(Process*, char*)+0x153>
c000bd4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd51:	83 ec 0c             	sub    esp,0xc
c000bd54:	53                   	push   ebx
c000bd55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	b8 02 00 00 00       	mov    eax,0x2
c000bd60:	eb 3e                	jmp    c000bda0 <Fs::setcwd(Process*, char*)+0x153>
c000bd62:	85 c0                	test   eax,eax
c000bd64:	74 1c                	je     c000bd82 <Fs::setcwd(Process*, char*)+0x135>
c000bd66:	85 db                	test   ebx,ebx
c000bd68:	b8 01 00 00 00       	mov    eax,0x1
c000bd6d:	74 31                	je     c000bda0 <Fs::setcwd(Process*, char*)+0x153>
c000bd6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd71:	83 ec 0c             	sub    esp,0xc
c000bd74:	53                   	push   ebx
c000bd75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd78:	83 c4 10             	add    esp,0x10
c000bd7b:	b8 01 00 00 00       	mov    eax,0x1
c000bd80:	eb 1e                	jmp    c000bda0 <Fs::setcwd(Process*, char*)+0x153>
c000bd82:	85 db                	test   ebx,ebx
c000bd84:	74 0c                	je     c000bd92 <Fs::setcwd(Process*, char*)+0x145>
c000bd86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	53                   	push   ebx
c000bd8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd8f:	83 c4 10             	add    esp,0x10
c000bd92:	50                   	push   eax
c000bd93:	50                   	push   eax
c000bd94:	56                   	push   esi
c000bd95:	57                   	push   edi
c000bd96:	e8 b5 48 ff ff       	call   c0000650 <strcpy>
c000bd9b:	83 c4 10             	add    esp,0x10
c000bd9e:	31 c0                	xor    eax,eax
c000bda0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bda6:	5b                   	pop    ebx
c000bda7:	5e                   	pop    esi
c000bda8:	5f                   	pop    edi
c000bda9:	5d                   	pop    ebp
c000bdaa:	c3                   	ret    
c000bdab:	90                   	nop

c000bdac <Directory::Directory(char const*, Process*)>:
c000bdac:	83 ec 0c             	sub    esp,0xc
c000bdaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb3:	83 ec 08             	sub    esp,0x8
c000bdb6:	6a 00                	push   0x0
c000bdb8:	50                   	push   eax
c000bdb9:	e8 e8 d3 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bdbe:	83 c4 10             	add    esp,0x10
c000bdc1:	ba d0 14 02 c0       	mov    edx,0xc00214d0
c000bdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdca:	89 10                	mov    DWORD PTR [eax],edx
c000bdcc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdd1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bdd5:	0f 95 c0             	setne  al
c000bdd8:	0f b6 c0             	movzx  eax,al
c000bddb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bddf:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bde5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde9:	83 c2 0d             	add    edx,0xd
c000bdec:	50                   	push   eax
c000bded:	51                   	push   ecx
c000bdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf2:	52                   	push   edx
c000bdf3:	e8 b4 f7 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bdf8:	83 c4 10             	add    esp,0x10
c000bdfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdff:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000be02:	83 e8 41             	sub    eax,0x41
c000be05:	88 c2                	mov    dl,al
c000be07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be15:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be1d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be23:	0f b6 c0             	movzx  eax,al
c000be26:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be2d:	85 c0                	test   eax,eax
c000be2f:	74 3e                	je     c000be6f <Directory::Directory(char const*, Process*)+0xc3>
c000be31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be35:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be3b:	0f b6 c0             	movzx  eax,al
c000be3e:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be45:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be4b:	85 c0                	test   eax,eax
c000be4d:	75 20                	jne    c000be6f <Directory::Directory(char const*, Process*)+0xc3>
c000be4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be53:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be59:	0f b6 c0             	movzx  eax,al
c000be5c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be63:	83 ec 0c             	sub    esp,0xc
c000be66:	50                   	push   eax
c000be67:	e8 08 1c 00 00       	call   c000da74 <LogicalDisk::mount()>
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	90                   	nop
c000be70:	83 c4 0c             	add    esp,0xc
c000be73:	c3                   	ret    

c000be74 <Directory::open()>:
c000be74:	53                   	push   ebx
c000be75:	b8 0b 00 00 00       	mov    eax,0xb
c000be7a:	83 ec 08             	sub    esp,0x8
c000be7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be81:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be88:	83 fa 19             	cmp    edx,0x19
c000be8b:	77 3d                	ja     c000beca <Directory::open()+0x56>
c000be8d:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be94:	85 d2                	test   edx,edx
c000be96:	74 32                	je     c000beca <Directory::open()+0x56>
c000be98:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be9e:	85 d2                	test   edx,edx
c000bea0:	74 28                	je     c000beca <Directory::open()+0x56>
c000bea2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bea6:	b8 06 00 00 00       	mov    eax,0x6
c000beab:	75 1d                	jne    c000beca <Directory::open()+0x56>
c000bead:	50                   	push   eax
c000beae:	8b 02                	mov    eax,DWORD PTR [edx]
c000beb0:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000beb6:	51                   	push   ecx
c000beb7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000beba:	51                   	push   ecx
c000bebb:	52                   	push   edx
c000bebc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bebf:	83 c4 10             	add    esp,0x10
c000bec2:	85 c0                	test   eax,eax
c000bec4:	75 04                	jne    c000beca <Directory::open()+0x56>
c000bec6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000beca:	83 c4 08             	add    esp,0x8
c000becd:	5b                   	pop    ebx
c000bece:	c3                   	ret    
c000becf:	90                   	nop

c000bed0 <Directory::close()>:
c000bed0:	53                   	push   ebx
c000bed1:	b8 0b 00 00 00       	mov    eax,0xb
c000bed6:	83 ec 08             	sub    esp,0x8
c000bed9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bedd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bee4:	83 f9 19             	cmp    ecx,0x19
c000bee7:	77 41                	ja     c000bf2a <Directory::close()+0x5a>
c000bee9:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bef0:	85 db                	test   ebx,ebx
c000bef2:	74 36                	je     c000bf2a <Directory::close()+0x5a>
c000bef4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000befb:	74 2d                	je     c000bf2a <Directory::close()+0x5a>
c000befd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf01:	b8 05 00 00 00       	mov    eax,0x5
c000bf06:	74 22                	je     c000bf2a <Directory::close()+0x5a>
c000bf08:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf0c:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf13:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf19:	53                   	push   ebx
c000bf1a:	53                   	push   ebx
c000bf1b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf1d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf23:	50                   	push   eax
c000bf24:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf27:	83 c4 10             	add    esp,0x10
c000bf2a:	83 c4 08             	add    esp,0x8
c000bf2d:	5b                   	pop    ebx
c000bf2e:	c3                   	ret    
c000bf2f:	90                   	nop

c000bf30 <Directory::unlink()>:
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	b8 0b 00 00 00       	mov    eax,0xb
c000bf38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf43:	83 f9 19             	cmp    ecx,0x19
c000bf46:	77 2f                	ja     c000bf77 <Directory::unlink()+0x47>
c000bf48:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf4f:	85 c9                	test   ecx,ecx
c000bf51:	74 24                	je     c000bf77 <Directory::unlink()+0x47>
c000bf53:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf59:	85 c9                	test   ecx,ecx
c000bf5b:	74 1a                	je     c000bf77 <Directory::unlink()+0x47>
c000bf5d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf61:	b8 06 00 00 00       	mov    eax,0x6
c000bf66:	75 0f                	jne    c000bf77 <Directory::unlink()+0x47>
c000bf68:	50                   	push   eax
c000bf69:	83 c2 0d             	add    edx,0xd
c000bf6c:	50                   	push   eax
c000bf6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf6f:	52                   	push   edx
c000bf70:	51                   	push   ecx
c000bf71:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	83 c4 0c             	add    esp,0xc
c000bf7a:	c3                   	ret    
c000bf7b:	90                   	nop

c000bf7c <Directory::rename(char const*)>:
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	b8 0b 00 00 00       	mov    eax,0xb
c000bf84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf8f:	83 f9 19             	cmp    ecx,0x19
c000bf92:	77 32                	ja     c000bfc6 <Directory::rename(char const*)+0x4a>
c000bf94:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf9b:	85 c9                	test   ecx,ecx
c000bf9d:	74 27                	je     c000bfc6 <Directory::rename(char const*)+0x4a>
c000bf9f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfa5:	85 c9                	test   ecx,ecx
c000bfa7:	74 1d                	je     c000bfc6 <Directory::rename(char const*)+0x4a>
c000bfa9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfad:	b8 06 00 00 00       	mov    eax,0x6
c000bfb2:	75 12                	jne    c000bfc6 <Directory::rename(char const*)+0x4a>
c000bfb4:	50                   	push   eax
c000bfb5:	83 c2 0d             	add    edx,0xd
c000bfb8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfbe:	52                   	push   edx
c000bfbf:	51                   	push   ecx
c000bfc0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	83 c4 0c             	add    esp,0xc
c000bfc9:	c3                   	ret    

c000bfca <Directory::exists()>:
c000bfca:	83 ec 0c             	sub    esp,0xc
c000bfcd:	31 c0                	xor    eax,eax
c000bfcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfd3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfda:	83 f9 19             	cmp    ecx,0x19
c000bfdd:	77 24                	ja     c000c003 <Directory::exists()+0x39>
c000bfdf:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfe6:	85 c9                	test   ecx,ecx
c000bfe8:	74 19                	je     c000c003 <Directory::exists()+0x39>
c000bfea:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bff0:	85 c9                	test   ecx,ecx
c000bff2:	74 0f                	je     c000c003 <Directory::exists()+0x39>
c000bff4:	50                   	push   eax
c000bff5:	83 c2 0d             	add    edx,0xd
c000bff8:	50                   	push   eax
c000bff9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bffb:	52                   	push   edx
c000bffc:	51                   	push   ecx
c000bffd:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c000:	83 c4 10             	add    esp,0x10
c000c003:	83 c4 0c             	add    esp,0xc
c000c006:	c3                   	ret    
c000c007:	90                   	nop

c000c008 <Directory::read(dirent*)>:
c000c008:	83 ec 1c             	sub    esp,0x1c
c000c00b:	b8 0b 00 00 00       	mov    eax,0xb
c000c010:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c014:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c01b:	83 f9 19             	cmp    ecx,0x19
c000c01e:	77 30                	ja     c000c050 <Directory::read(dirent*)+0x48>
c000c020:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c027:	85 c9                	test   ecx,ecx
c000c029:	74 25                	je     c000c050 <Directory::read(dirent*)+0x48>
c000c02b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c032:	74 1c                	je     c000c050 <Directory::read(dirent*)+0x48>
c000c034:	83 ec 0c             	sub    esp,0xc
c000c037:	8b 02                	mov    eax,DWORD PTR [edx]
c000c039:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c03d:	51                   	push   ecx
c000c03e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c042:	6a 00                	push   0x0
c000c044:	68 10 01 00 00       	push   0x110
c000c049:	52                   	push   edx
c000c04a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c04d:	83 c4 20             	add    esp,0x20
c000c050:	83 c4 1c             	add    esp,0x1c
c000c053:	c3                   	ret    

c000c054 <Directory::create()>:
c000c054:	83 ec 0c             	sub    esp,0xc
c000c057:	b8 0b 00 00 00       	mov    eax,0xb
c000c05c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c060:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c067:	83 f9 19             	cmp    ecx,0x19
c000c06a:	77 2f                	ja     c000c09b <Directory::create()+0x47>
c000c06c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c073:	85 c9                	test   ecx,ecx
c000c075:	74 24                	je     c000c09b <Directory::create()+0x47>
c000c077:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c07d:	85 c9                	test   ecx,ecx
c000c07f:	74 1a                	je     c000c09b <Directory::create()+0x47>
c000c081:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c085:	b8 06 00 00 00       	mov    eax,0x6
c000c08a:	75 0f                	jne    c000c09b <Directory::create()+0x47>
c000c08c:	50                   	push   eax
c000c08d:	83 c2 0d             	add    edx,0xd
c000c090:	50                   	push   eax
c000c091:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c093:	52                   	push   edx
c000c094:	51                   	push   ecx
c000c095:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c098:	83 c4 10             	add    esp,0x10
c000c09b:	83 c4 0c             	add    esp,0xc
c000c09e:	c3                   	ret    
c000c09f:	90                   	nop

c000c0a0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c0a0:	b8 0a 00 00 00       	mov    eax,0xa
c000c0a5:	c3                   	ret    
c000c0a6:	66 90                	xchg   ax,ax

c000c0a8 <Bus::Bus(char const*)>:
c000c0a8:	83 ec 0c             	sub    esp,0xc
c000c0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0af:	83 ec 08             	sub    esp,0x8
c000c0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b6:	50                   	push   eax
c000c0b7:	e8 28 08 00 00       	call   c000c8e4 <Device::Device(char const*)>
c000c0bc:	83 c4 10             	add    esp,0x10
c000c0bf:	ba ec 14 02 c0       	mov    edx,0xc00214ec
c000c0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c8:	89 10                	mov    DWORD PTR [eax],edx
c000c0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ce:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0d8:	90                   	nop
c000c0d9:	83 c4 0c             	add    esp,0xc
c000c0dc:	c3                   	ret    
c000c0dd:	90                   	nop
c000c0de:	66 90                	xchg   ax,ax

c000c0e0 <Bus::~Bus()>:
c000c0e0:	83 ec 0c             	sub    esp,0xc
c000c0e3:	ba ec 14 02 c0       	mov    edx,0xc00214ec
c000c0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ec:	89 10                	mov    DWORD PTR [eax],edx
c000c0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f2:	83 ec 0c             	sub    esp,0xc
c000c0f5:	50                   	push   eax
c000c0f6:	e8 53 05 00 00       	call   c000c64e <Device::~Device()>
c000c0fb:	83 c4 10             	add    esp,0x10
c000c0fe:	90                   	nop
c000c0ff:	83 c4 0c             	add    esp,0xc
c000c102:	c3                   	ret    
c000c103:	90                   	nop

c000c104 <Bus::~Bus()>:
c000c104:	83 ec 0c             	sub    esp,0xc
c000c107:	83 ec 0c             	sub    esp,0xc
c000c10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10e:	e8 cd ff ff ff       	call   c000c0e0 <Bus::~Bus()>
c000c113:	83 c4 10             	add    esp,0x10
c000c116:	83 ec 08             	sub    esp,0x8
c000c119:	68 58 01 00 00       	push   0x158
c000c11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c122:	e8 e5 e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	83 c4 0c             	add    esp,0xc
c000c12d:	c3                   	ret    

c000c12e <beepThread(void*)>:
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c13a:	48                   	dec    eax
c000c13b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c140:	75 01                	jne    c000c143 <beepThread(void*)+0x15>
c000c142:	fb                   	sti    
c000c143:	6b c2 0a             	imul   eax,edx,0xa
c000c146:	83 ec 0c             	sub    esp,0xc
c000c149:	50                   	push   eax
c000c14a:	e8 b5 9d 00 00       	call   c0015f04 <milliTenthSleep(unsigned int)>
c000c14f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c156:	e8 02 bd 00 00       	call   c0017e5d <HalMakeBeep(int)>
c000c15b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c163:	83 c4 1c             	add    esp,0x1c
c000c166:	e9 7d 9c 00 00       	jmp    c0015de8 <blockTask(TaskState)>

c000c16b <Krnl::beep(int, int, bool)>:
c000c16b:	56                   	push   esi
c000c16c:	53                   	push   ebx
c000c16d:	83 ec 10             	sub    esp,0x10
c000c170:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c174:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17c:	e8 dc bc 00 00       	call   c0017e5d <HalMakeBeep(int)>
c000c181:	89 f0                	mov    eax,esi
c000c183:	83 c4 10             	add    esp,0x10
c000c186:	84 c0                	test   al,al
c000c188:	74 1e                	je     c000c1a8 <Krnl::beep(int, int, bool)+0x3d>
c000c18a:	6b db 0a             	imul   ebx,ebx,0xa
c000c18d:	83 ec 0c             	sub    esp,0xc
c000c190:	53                   	push   ebx
c000c191:	e8 6e 9d 00 00       	call   c0015f04 <milliTenthSleep(unsigned int)>
c000c196:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c19e:	83 c4 14             	add    esp,0x14
c000c1a1:	5b                   	pop    ebx
c000c1a2:	5e                   	pop    esi
c000c1a3:	e9 b5 bc 00 00       	jmp    c0017e5d <HalMakeBeep(int)>
c000c1a8:	68 e6 00 00 00       	push   0xe6
c000c1ad:	53                   	push   ebx
c000c1ae:	68 2e c1 00 c0       	push   0xc000c12e
c000c1b3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1b9:	e8 de 97 00 00       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c000c1be:	83 c4 14             	add    esp,0x14
c000c1c1:	5b                   	pop    ebx
c000c1c2:	5e                   	pop    esi
c000c1c3:	c3                   	ret    

c000c1c4 <User::loadClockSettings(int)>:
c000c1c4:	53                   	push   ebx
c000c1c5:	83 ec 14             	sub    esp,0x14
c000c1c8:	68 14 01 00 00       	push   0x114
c000c1cd:	e8 01 b9 ff ff       	call   c0007ad3 <malloc>
c000c1d2:	83 c4 0c             	add    esp,0xc
c000c1d5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1db:	68 10 15 02 c0       	push   0xc0021510
c000c1e0:	50                   	push   eax
c000c1e1:	89 c3                	mov    ebx,eax
c000c1e3:	e8 3a f6 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c000c1e8:	58                   	pop    eax
c000c1e9:	5a                   	pop    edx
c000c1ea:	6a 01                	push   0x1
c000c1ec:	53                   	push   ebx
c000c1ed:	e8 f8 f6 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c000c1f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1f5:	e8 4e f7 ff ff       	call   c000b948 <File::close()>
c000c1fa:	83 c4 10             	add    esp,0x10
c000c1fd:	85 db                	test   ebx,ebx
c000c1ff:	74 0f                	je     c000c210 <User::loadClockSettings(int)+0x4c>
c000c201:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c203:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c207:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c20a:	83 c4 08             	add    esp,0x8
c000c20d:	5b                   	pop    ebx
c000c20e:	ff e0                	jmp    eax
c000c210:	83 c4 08             	add    esp,0x8
c000c213:	5b                   	pop    ebx
c000c214:	c3                   	ret    
c000c215:	90                   	nop

c000c216 <Clock::Clock(char const*)>:
c000c216:	83 ec 0c             	sub    esp,0xc
c000c219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21d:	83 ec 08             	sub    esp,0x8
c000c220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c224:	50                   	push   eax
c000c225:	e8 ba 06 00 00       	call   c000c8e4 <Device::Device(char const*)>
c000c22a:	83 c4 10             	add    esp,0x10
c000c22d:	ba 38 15 02 c0       	mov    edx,0xc0021538
c000c232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c236:	89 10                	mov    DWORD PTR [eax],edx
c000c238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c246:	90                   	nop
c000c247:	83 c4 0c             	add    esp,0xc
c000c24a:	c3                   	ret    
c000c24b:	90                   	nop

c000c24c <Clock::~Clock()>:
c000c24c:	83 ec 0c             	sub    esp,0xc
c000c24f:	ba 38 15 02 c0       	mov    edx,0xc0021538
c000c254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c258:	89 10                	mov    DWORD PTR [eax],edx
c000c25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25e:	83 ec 0c             	sub    esp,0xc
c000c261:	50                   	push   eax
c000c262:	e8 e7 03 00 00       	call   c000c64e <Device::~Device()>
c000c267:	83 c4 10             	add    esp,0x10
c000c26a:	90                   	nop
c000c26b:	83 c4 0c             	add    esp,0xc
c000c26e:	c3                   	ret    
c000c26f:	90                   	nop

c000c270 <Clock::~Clock()>:
c000c270:	83 ec 0c             	sub    esp,0xc
c000c273:	83 ec 0c             	sub    esp,0xc
c000c276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c27a:	e8 cd ff ff ff       	call   c000c24c <Clock::~Clock()>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	83 ec 08             	sub    esp,0x8
c000c285:	68 58 01 00 00       	push   0x158
c000c28a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c28e:	e8 79 e5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c293:	83 c4 10             	add    esp,0x10
c000c296:	83 c4 0c             	add    esp,0xc
c000c299:	c3                   	ret    

c000c29a <Clock::timeInSecondsLocal()>:
c000c29a:	53                   	push   ebx
c000c29b:	83 ec 14             	sub    esp,0x14
c000c29e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2a4:	50                   	push   eax
c000c2a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2a8:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2af:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c2b5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c2bb:	89 cb                	mov    ebx,ecx
c000c2bd:	c1 fb 1f             	sar    ebx,0x1f
c000c2c0:	01 c8                	add    eax,ecx
c000c2c2:	11 da                	adc    edx,ebx
c000c2c4:	83 c4 10             	add    esp,0x10
c000c2c7:	31 c9                	xor    ecx,ecx
c000c2c9:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2d0:	74 05                	je     c000c2d7 <Clock::timeInSecondsLocal()+0x3d>
c000c2d2:	b9 08 07 00 00       	mov    ecx,0x708
c000c2d7:	31 db                	xor    ebx,ebx
c000c2d9:	01 c8                	add    eax,ecx
c000c2db:	11 da                	adc    edx,ebx
c000c2dd:	83 c4 08             	add    esp,0x8
c000c2e0:	5b                   	pop    ebx
c000c2e1:	c3                   	ret    

c000c2e2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2e2:	57                   	push   edi
c000c2e3:	56                   	push   esi
c000c2e4:	53                   	push   ebx
c000c2e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2f3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2f6:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c2fd:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c303:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c309:	99                   	cdq    
c000c30a:	29 c6                	sub    esi,eax
c000c30c:	19 d7                	sbb    edi,edx
c000c30e:	89 f0                	mov    eax,esi
c000c310:	31 f6                	xor    esi,esi
c000c312:	89 fa                	mov    edx,edi
c000c314:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c31b:	74 05                	je     c000c322 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c31d:	be 08 07 00 00       	mov    esi,0x708
c000c322:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c326:	31 ff                	xor    edi,edi
c000c328:	29 f0                	sub    eax,esi
c000c32a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c32e:	19 fa                	sbb    edx,edi
c000c330:	89 d8                	mov    eax,ebx
c000c332:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c336:	5b                   	pop    ebx
c000c337:	5e                   	pop    esi
c000c338:	5f                   	pop    edi
c000c339:	ff e0                	jmp    eax

c000c33b <datetimeToSeconds(datetime_t)>:
c000c33b:	55                   	push   ebp
c000c33c:	57                   	push   edi
c000c33d:	56                   	push   esi
c000c33e:	53                   	push   ebx
c000c33f:	83 ec 0c             	sub    esp,0xc
c000c342:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c346:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c34a:	89 f7                	mov    edi,esi
c000c34c:	89 f0                	mov    eax,esi
c000c34e:	0f b6 cf             	movzx  ecx,bh
c000c351:	0f b6 c4             	movzx  eax,ah
c000c354:	c1 ef 10             	shr    edi,0x10
c000c357:	89 da                	mov    edx,ebx
c000c359:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c35c:	89 f9                	mov    ecx,edi
c000c35e:	0f b6 f9             	movzx  edi,cl
c000c361:	89 f1                	mov    ecx,esi
c000c363:	6b c0 3c             	imul   eax,eax,0x3c
c000c366:	0f b6 f1             	movzx  esi,cl
c000c369:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c36f:	0f b6 db             	movzx  ebx,bl
c000c372:	c1 ea 10             	shr    edx,0x10
c000c375:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c37b:	01 f8                	add    eax,edi
c000c37d:	01 f0                	add    eax,esi
c000c37f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c382:	c1 f8 1f             	sar    eax,0x1f
c000c385:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c389:	89 e8                	mov    eax,ebp
c000c38b:	0f b6 c0             	movzx  eax,al
c000c38e:	8b 0c 85 80 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea80]
c000c395:	83 f8 01             	cmp    eax,0x1
c000c398:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c39c:	0f b7 da             	movzx  ebx,dx
c000c39f:	76 27                	jbe    c000c3c8 <datetimeToSeconds(datetime_t)+0x8d>
c000c3a1:	80 e2 03             	and    dl,0x3
c000c3a4:	75 22                	jne    c000c3c8 <datetimeToSeconds(datetime_t)+0x8d>
c000c3a6:	31 d2                	xor    edx,edx
c000c3a8:	be 64 00 00 00       	mov    esi,0x64
c000c3ad:	89 d8                	mov    eax,ebx
c000c3af:	f7 f6                	div    esi
c000c3b1:	85 d2                	test   edx,edx
c000c3b3:	75 12                	jne    c000c3c7 <datetimeToSeconds(datetime_t)+0x8c>
c000c3b5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c3bb:	be 90 01 00 00       	mov    esi,0x190
c000c3c0:	99                   	cdq    
c000c3c1:	f7 fe                	idiv   esi
c000c3c3:	85 d2                	test   edx,edx
c000c3c5:	75 01                	jne    c000c3c8 <datetimeToSeconds(datetime_t)+0x8d>
c000c3c7:	41                   	inc    ecx
c000c3c8:	83 fb 46             	cmp    ebx,0x46
c000c3cb:	76 48                	jbe    c000c415 <datetimeToSeconds(datetime_t)+0xda>
c000c3cd:	be 46 00 00 00       	mov    esi,0x46
c000c3d2:	bf 64 00 00 00       	mov    edi,0x64
c000c3d7:	bd 90 01 00 00       	mov    ebp,0x190
c000c3dc:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3e2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3e7:	75 23                	jne    c000c40c <datetimeToSeconds(datetime_t)+0xd1>
c000c3e9:	89 f0                	mov    eax,esi
c000c3eb:	99                   	cdq    
c000c3ec:	f7 ff                	idiv   edi
c000c3ee:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3f3:	85 d2                	test   edx,edx
c000c3f5:	75 15                	jne    c000c40c <datetimeToSeconds(datetime_t)+0xd1>
c000c3f7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3fd:	99                   	cdq    
c000c3fe:	f7 fd                	idiv   ebp
c000c400:	83 fa 01             	cmp    edx,0x1
c000c403:	19 c0                	sbb    eax,eax
c000c405:	f7 d0                	not    eax
c000c407:	05 6e 01 00 00       	add    eax,0x16e
c000c40c:	46                   	inc    esi
c000c40d:	01 c1                	add    ecx,eax
c000c40f:	39 de                	cmp    esi,ebx
c000c411:	7c c9                	jl     c000c3dc <datetimeToSeconds(datetime_t)+0xa1>
c000c413:	eb 34                	jmp    c000c449 <datetimeToSeconds(datetime_t)+0x10e>
c000c415:	74 32                	je     c000c449 <datetimeToSeconds(datetime_t)+0x10e>
c000c417:	b8 45 00 00 00       	mov    eax,0x45
c000c41c:	89 c2                	mov    edx,eax
c000c41e:	83 e2 03             	and    edx,0x3
c000c421:	39 d8                	cmp    eax,ebx
c000c423:	7e 0f                	jle    c000c434 <datetimeToSeconds(datetime_t)+0xf9>
c000c425:	83 fa 01             	cmp    edx,0x1
c000c428:	19 d2                	sbb    edx,edx
c000c42a:	48                   	dec    eax
c000c42b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c432:	eb e8                	jmp    c000c41c <datetimeToSeconds(datetime_t)+0xe1>
c000c434:	85 d2                	test   edx,edx
c000c436:	b8 6d 01 00 00       	mov    eax,0x16d
c000c43b:	75 0a                	jne    c000c447 <datetimeToSeconds(datetime_t)+0x10c>
c000c43d:	83 fb 01             	cmp    ebx,0x1
c000c440:	19 c0                	sbb    eax,eax
c000c442:	05 6e 01 00 00       	add    eax,0x16e
c000c447:	29 c1                	sub    ecx,eax
c000c449:	b8 80 51 01 00       	mov    eax,0x15180
c000c44e:	f7 e9                	imul   ecx
c000c450:	03 04 24             	add    eax,DWORD PTR [esp]
c000c453:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c457:	83 c4 0c             	add    esp,0xc
c000c45a:	5b                   	pop    ebx
c000c45b:	5e                   	pop    esi
c000c45c:	5f                   	pop    edi
c000c45d:	5d                   	pop    ebp
c000c45e:	c3                   	ret    
c000c45f:	90                   	nop

c000c460 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c460:	57                   	push   edi
c000c461:	56                   	push   esi
c000c462:	53                   	push   ebx
c000c463:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c467:	8b 06                	mov    eax,DWORD PTR [esi]
c000c469:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c46c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c470:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c474:	e8 c2 fe ff ff       	call   c000c33b <datetimeToSeconds(datetime_t)>
c000c479:	59                   	pop    ecx
c000c47a:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c481:	5b                   	pop    ebx
c000c482:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c488:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c48e:	89 cb                	mov    ebx,ecx
c000c490:	c1 fb 1f             	sar    ebx,0x1f
c000c493:	29 c8                	sub    eax,ecx
c000c495:	19 da                	sbb    edx,ebx
c000c497:	31 c9                	xor    ecx,ecx
c000c499:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c4a0:	74 05                	je     c000c4a7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c4a2:	b9 08 07 00 00       	mov    ecx,0x708
c000c4a7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4ab:	31 db                	xor    ebx,ebx
c000c4ad:	29 c8                	sub    eax,ecx
c000c4af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4b3:	19 da                	sbb    edx,ebx
c000c4b5:	89 f8                	mov    eax,edi
c000c4b7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4bb:	5b                   	pop    ebx
c000c4bc:	5e                   	pop    esi
c000c4bd:	5f                   	pop    edi
c000c4be:	ff e0                	jmp    eax

c000c4c0 <secondsToDatetime(unsigned long long)>:
c000c4c0:	55                   	push   ebp
c000c4c1:	57                   	push   edi
c000c4c2:	56                   	push   esi
c000c4c3:	53                   	push   ebx
c000c4c4:	83 ec 1c             	sub    esp,0x1c
c000c4c7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4d3:	6a 00                	push   0x0
c000c4d5:	68 80 51 01 00       	push   0x15180
c000c4da:	55                   	push   ebp
c000c4db:	57                   	push   edi
c000c4dc:	e8 bf 2d 01 00       	call   c001f2a0 <__udivdi3>
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4e8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4ee:	6a 00                	push   0x0
c000c4f0:	68 80 51 01 00       	push   0x15180
c000c4f5:	55                   	push   ebp
c000c4f6:	57                   	push   edi
c000c4f7:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4fc:	e8 9f 2e 01 00       	call   c001f3a0 <__umoddi3>
c000c501:	83 c4 10             	add    esp,0x10
c000c504:	99                   	cdq    
c000c505:	f7 ff                	idiv   edi
c000c507:	bf 3c 00 00 00       	mov    edi,0x3c
c000c50c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c50f:	89 d0                	mov    eax,edx
c000c511:	99                   	cdq    
c000c512:	f7 ff                	idiv   edi
c000c514:	85 db                	test   ebx,ebx
c000c516:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c519:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c51c:	79 11                	jns    c000c52f <secondsToDatetime(unsigned long long)+0x6f>
c000c51e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c522:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c528:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c52d:	eb 07                	jmp    c000c536 <secondsToDatetime(unsigned long long)+0x76>
c000c52f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c534:	89 d8                	mov    eax,ebx
c000c536:	99                   	cdq    
c000c537:	bf b4 05 00 00       	mov    edi,0x5b4
c000c53c:	f7 f9                	idiv   ecx
c000c53e:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c543:	31 d2                	xor    edx,edx
c000c545:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c54a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c556:	01 c3                	add    ebx,eax
c000c558:	89 d8                	mov    eax,ebx
c000c55a:	f7 f1                	div    ecx
c000c55c:	31 d2                	xor    edx,edx
c000c55e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c561:	89 d8                	mov    eax,ebx
c000c563:	f7 f7                	div    edi
c000c565:	31 d2                	xor    edx,edx
c000c567:	29 c1                	sub    ecx,eax
c000c569:	89 d8                	mov    eax,ebx
c000c56b:	f7 f5                	div    ebp
c000c56d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c572:	31 d2                	xor    edx,edx
c000c574:	29 c1                	sub    ecx,eax
c000c576:	89 c8                	mov    eax,ecx
c000c578:	f7 f5                	div    ebp
c000c57a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c57f:	31 d2                	xor    edx,edx
c000c581:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c585:	89 c8                	mov    eax,ecx
c000c587:	f7 f5                	div    ebp
c000c589:	31 d2                	xor    edx,edx
c000c58b:	01 c3                	add    ebx,eax
c000c58d:	89 c8                	mov    eax,ecx
c000c58f:	f7 f7                	div    edi
c000c591:	bf 99 00 00 00       	mov    edi,0x99
c000c596:	31 d2                	xor    edx,edx
c000c598:	29 c3                	sub    ebx,eax
c000c59a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c5a2:	29 c3                	sub    ebx,eax
c000c5a4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c5a7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5aa:	83 c1 02             	add    ecx,0x2
c000c5ad:	89 c8                	mov    eax,ecx
c000c5af:	bb 05 00 00 00       	mov    ebx,0x5
c000c5b4:	f7 f7                	div    edi
c000c5b6:	31 d2                	xor    edx,edx
c000c5b8:	89 c7                	mov    edi,eax
c000c5ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5c0:	83 c0 02             	add    eax,0x2
c000c5c3:	f7 f3                	div    ebx
c000c5c5:	89 eb                	mov    ebx,ebp
c000c5c7:	29 c3                	sub    ebx,eax
c000c5c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5cf:	88 1e                	mov    BYTE PTR [esi],bl
c000c5d1:	19 c0                	sbb    eax,eax
c000c5d3:	31 d2                	xor    edx,edx
c000c5d5:	83 e0 0c             	and    eax,0xc
c000c5d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5e8:	83 f9 01             	cmp    ecx,0x1
c000c5eb:	0f 96 c2             	setbe  dl
c000c5ee:	41                   	inc    ecx
c000c5ef:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5f2:	01 d0                	add    eax,edx
c000c5f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5f8:	83 c4 1c             	add    esp,0x1c
c000c5fb:	89 f0                	mov    eax,esi
c000c5fd:	5b                   	pop    ebx
c000c5fe:	5e                   	pop    esi
c000c5ff:	5f                   	pop    edi
c000c600:	5d                   	pop    ebp
c000c601:	c2 04 00             	ret    0x4

c000c604 <Clock::timeInDatetimeLocal()>:
c000c604:	53                   	push   ebx
c000c605:	83 ec 14             	sub    esp,0x14
c000c608:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c60c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c610:	e8 85 fc ff ff       	call   c000c29a <Clock::timeInSecondsLocal()>
c000c615:	83 c4 0c             	add    esp,0xc
c000c618:	52                   	push   edx
c000c619:	50                   	push   eax
c000c61a:	53                   	push   ebx
c000c61b:	e8 a0 fe ff ff       	call   c000c4c0 <secondsToDatetime(unsigned long long)>
c000c620:	89 d8                	mov    eax,ebx
c000c622:	83 c4 14             	add    esp,0x14
c000c625:	5b                   	pop    ebx
c000c626:	c2 04 00             	ret    0x4
c000c629:	90                   	nop

c000c62a <Device::hibernate()>:
c000c62a:	c3                   	ret    
c000c62b:	90                   	nop

c000c62c <Device::wake()>:
c000c62c:	c3                   	ret    
c000c62d:	90                   	nop

c000c62e <Device::detect()>:
c000c62e:	c3                   	ret    
c000c62f:	90                   	nop

c000c630 <Device::disableLegacy()>:
c000c630:	c3                   	ret    
c000c631:	90                   	nop

c000c632 <Device::powerSaving(PowerSavingLevel)>:
c000c632:	c3                   	ret    
c000c633:	90                   	nop

c000c634 <DriverlessDevice::close(int, int, void*)>:
c000c634:	31 c0                	xor    eax,eax
c000c636:	c3                   	ret    
c000c637:	90                   	nop

c000c638 <DriverlessDevice::detect()>:
c000c638:	c3                   	ret    
c000c639:	90                   	nop

c000c63a <DriverlessDevice::open(int, int, void*)>:
c000c63a:	83 ec 18             	sub    esp,0x18
c000c63d:	68 b0 15 02 c0       	push   0xc00215b0
c000c642:	e8 a2 4c 00 00       	call   c00112e9 <KePanic(char const*)>
c000c647:	83 c8 ff             	or     eax,0xffffffff
c000c64a:	83 c4 1c             	add    esp,0x1c
c000c64d:	c3                   	ret    

c000c64e <Device::~Device()>:
c000c64e:	ba 10 16 02 c0       	mov    edx,0xc0021610
c000c653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c657:	89 10                	mov    DWORD PTR [eax],edx
c000c659:	90                   	nop
c000c65a:	c3                   	ret    
c000c65b:	90                   	nop

c000c65c <Device::~Device()>:
c000c65c:	83 ec 0c             	sub    esp,0xc
c000c65f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c663:	e8 e6 ff ff ff       	call   c000c64e <Device::~Device()>
c000c668:	83 c4 04             	add    esp,0x4
c000c66b:	83 ec 08             	sub    esp,0x8
c000c66e:	68 58 01 00 00       	push   0x158
c000c673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c677:	e8 90 e1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	83 c4 0c             	add    esp,0xc
c000c682:	c3                   	ret    
c000c683:	90                   	nop

c000c684 <Device::findAndLoadDriver()>:
c000c684:	c7 44 24 04 ce 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215ce
c000c68c:	e9 79 e2 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c691:	90                   	nop

c000c692 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c692:	57                   	push   edi
c000c693:	b9 09 00 00 00       	mov    ecx,0x9
c000c698:	56                   	push   esi
c000c699:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c69d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c6a1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6ab:	81 c7 18 01 00 00    	add    edi,0x118
c000c6b1:	fc                   	cld    
c000c6b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6b4:	5e                   	pop    esi
c000c6b5:	5f                   	pop    edi
c000c6b6:	c3                   	ret    
c000c6b7:	90                   	nop

c000c6b8 <Device::preOpenACPI(void*, char*, char*)>:
c000c6b8:	57                   	push   edi
c000c6b9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c6be:	56                   	push   esi
c000c6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6cb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6d5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6db:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6e3:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6ed:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6f4:	5e                   	pop    esi
c000c6f5:	5f                   	pop    edi
c000c6f6:	c3                   	ret    
c000c6f7:	90                   	nop

c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6f8:	53                   	push   ebx
c000c6f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c701:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c705:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c709:	0f b6 c0             	movzx  eax,al
c000c70c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c710:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c714:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c718:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c71c:	5b                   	pop    ebx
c000c71d:	e9 aa 05 00 00       	jmp    c000cccc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c722 <Device::getParent()>:
c000c722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c726:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c72c:	c3                   	ret    
c000c72d:	90                   	nop

c000c72e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c72e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c736:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c73b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c73f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c743:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c747:	e9 f7 06 00 00       	jmp    c000ce43 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c74c <Device::addChild(Device*)>:
c000c74c:	53                   	push   ebx
c000c74d:	83 ec 08             	sub    esp,0x8
c000c750:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c754:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c758:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c75e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c764:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c766:	85 d2                	test   edx,edx
c000c768:	74 04                	je     c000c76e <Device::addChild(Device*)+0x22>
c000c76a:	89 d3                	mov    ebx,edx
c000c76c:	eb f6                	jmp    c000c764 <Device::addChild(Device*)+0x18>
c000c76e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c771:	83 ec 0c             	sub    esp,0xc
c000c774:	6a 08                	push   0x8
c000c776:	e8 58 b3 ff ff       	call   c0007ad3 <malloc>
c000c77b:	89 03                	mov    DWORD PTR [ebx],eax
c000c77d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c783:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c78a:	83 c4 18             	add    esp,0x18
c000c78d:	5b                   	pop    ebx
c000c78e:	c3                   	ret    
c000c78f:	90                   	nop

c000c790 <Device::removeAllChildren()>:
c000c790:	56                   	push   esi
c000c791:	53                   	push   ebx
c000c792:	52                   	push   edx
c000c793:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c797:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c79d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7a0:	74 17                	je     c000c7b9 <Device::removeAllChildren()+0x29>
c000c7a2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c7a5:	85 c0                	test   eax,eax
c000c7a7:	74 0c                	je     c000c7b5 <Device::removeAllChildren()+0x25>
c000c7a9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7ab:	83 ec 0c             	sub    esp,0xc
c000c7ae:	50                   	push   eax
c000c7af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7b2:	83 c4 10             	add    esp,0x10
c000c7b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7b7:	eb e4                	jmp    c000c79d <Device::removeAllChildren()+0xd>
c000c7b9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7c5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7d2:	58                   	pop    eax
c000c7d3:	5b                   	pop    ebx
c000c7d4:	5e                   	pop    esi
c000c7d5:	c3                   	ret    

c000c7d6 <Device::hibernateAll()>:
c000c7d6:	53                   	push   ebx
c000c7d7:	83 ec 14             	sub    esp,0x14
c000c7da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7e0:	53                   	push   ebx
c000c7e1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7ea:	83 c4 10             	add    esp,0x10
c000c7ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7f0:	74 0f                	je     c000c801 <Device::hibernateAll()+0x2b>
c000c7f2:	83 ec 0c             	sub    esp,0xc
c000c7f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7f8:	e8 d9 ff ff ff       	call   c000c7d6 <Device::hibernateAll()>
c000c7fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7ff:	eb e9                	jmp    c000c7ea <Device::hibernateAll()+0x14>
c000c801:	83 c4 08             	add    esp,0x8
c000c804:	5b                   	pop    ebx
c000c805:	c3                   	ret    

c000c806 <Device::wakeAll()>:
c000c806:	53                   	push   ebx
c000c807:	83 ec 14             	sub    esp,0x14
c000c80a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c80e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c810:	53                   	push   ebx
c000c811:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c814:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c81a:	83 c4 10             	add    esp,0x10
c000c81d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c820:	74 0f                	je     c000c831 <Device::wakeAll()+0x2b>
c000c822:	83 ec 0c             	sub    esp,0xc
c000c825:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c828:	e8 d9 ff ff ff       	call   c000c806 <Device::wakeAll()>
c000c82d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c82f:	eb e9                	jmp    c000c81a <Device::wakeAll()+0x14>
c000c831:	83 c4 08             	add    esp,0x8
c000c834:	5b                   	pop    ebx
c000c835:	c3                   	ret    

c000c836 <Device::detectAll()>:
c000c836:	53                   	push   ebx
c000c837:	83 ec 14             	sub    esp,0x14
c000c83a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c83e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c840:	53                   	push   ebx
c000c841:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c844:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c84a:	83 c4 10             	add    esp,0x10
c000c84d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c850:	74 0f                	je     c000c861 <Device::detectAll()+0x2b>
c000c852:	83 ec 0c             	sub    esp,0xc
c000c855:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c858:	e8 d9 ff ff ff       	call   c000c836 <Device::detectAll()>
c000c85d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c85f:	eb e9                	jmp    c000c84a <Device::detectAll()+0x14>
c000c861:	83 c4 08             	add    esp,0x8
c000c864:	5b                   	pop    ebx
c000c865:	c3                   	ret    

c000c866 <Device::disableLegacyAll()>:
c000c866:	c3                   	ret    
c000c867:	90                   	nop

c000c868 <Device::loadDriversForAll()>:
c000c868:	c3                   	ret    
c000c869:	90                   	nop

c000c86a <Device::closeAll()>:
c000c86a:	53                   	push   ebx
c000c86b:	83 ec 08             	sub    esp,0x8
c000c86e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c872:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c874:	6a 00                	push   0x0
c000c876:	6a 00                	push   0x0
c000c878:	6a 00                	push   0x0
c000c87a:	53                   	push   ebx
c000c87b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c87e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c884:	83 c4 10             	add    esp,0x10
c000c887:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c88a:	74 0f                	je     c000c89b <Device::closeAll()+0x31>
c000c88c:	83 ec 0c             	sub    esp,0xc
c000c88f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c892:	e8 d3 ff ff ff       	call   c000c86a <Device::closeAll()>
c000c897:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c899:	eb e9                	jmp    c000c884 <Device::closeAll()+0x1a>
c000c89b:	83 c4 08             	add    esp,0x8
c000c89e:	5b                   	pop    ebx
c000c89f:	c3                   	ret    

c000c8a0 <Device::powerSavingAll(PowerSavingLevel)>:
c000c8a0:	56                   	push   esi
c000c8a1:	53                   	push   ebx
c000c8a2:	83 ec 0c             	sub    esp,0xc
c000c8a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8a9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8af:	56                   	push   esi
c000c8b0:	53                   	push   ebx
c000c8b1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8ba:	83 c4 10             	add    esp,0x10
c000c8bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8c0:	74 0f                	je     c000c8d1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8c2:	52                   	push   edx
c000c8c3:	52                   	push   edx
c000c8c4:	56                   	push   esi
c000c8c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8c8:	e8 d3 ff ff ff       	call   c000c8a0 <Device::powerSavingAll(PowerSavingLevel)>
c000c8cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8cf:	eb e9                	jmp    c000c8ba <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8d1:	58                   	pop    eax
c000c8d2:	5b                   	pop    ebx
c000c8d3:	5e                   	pop    esi
c000c8d4:	c3                   	ret    
c000c8d5:	90                   	nop

c000c8d6 <Device::setName(char const*)>:
c000c8d6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8de:	e9 6d 3d ff ff       	jmp    c0000650 <strcpy>
c000c8e3:	90                   	nop

c000c8e4 <Device::Device(char const*)>:
c000c8e4:	83 ec 1c             	sub    esp,0x1c
c000c8e7:	ba 10 16 02 c0       	mov    edx,0xc0021610
c000c8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f0:	89 10                	mov    DWORD PTR [eax],edx
c000c8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c904:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c912:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c91c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c920:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c92a:	83 ec 08             	sub    esp,0x8
c000c92d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c931:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c935:	e8 9c ff ff ff       	call   c000c8d6 <Device::setName(char const*)>
c000c93a:	83 c4 10             	add    esp,0x10
c000c93d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c945:	83 ec 0c             	sub    esp,0xc
c000c948:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c94c:	e8 82 b1 ff ff       	call   c0007ad3 <malloc>
c000c951:	83 c4 10             	add    esp,0x10
c000c954:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c95a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c965:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c96b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c975:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c97b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c985:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c990:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9da:	90                   	nop
c000c9db:	83 c4 1c             	add    esp,0x1c
c000c9de:	c3                   	ret    
c000c9df:	90                   	nop

c000c9e0 <Device::getName()>:
c000c9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9e4:	05 d0 00 00 00       	add    eax,0xd0
c000c9e9:	c3                   	ret    

c000c9ea <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9ea:	83 ec 0c             	sub    esp,0xc
c000c9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f1:	83 ec 08             	sub    esp,0x8
c000c9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f8:	50                   	push   eax
c000c9f9:	e8 e6 fe ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c000ca06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0a:	89 10                	mov    DWORD PTR [eax],edx
c000ca0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca10:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca1a:	90                   	nop
c000ca1b:	83 c4 0c             	add    esp,0xc
c000ca1e:	c3                   	ret    
c000ca1f:	90                   	nop

c000ca20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca20:	57                   	push   edi
c000ca21:	56                   	push   esi
c000ca22:	53                   	push   ebx
c000ca23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca2f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca35:	75 0c                	jne    c000ca43 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca37:	52                   	push   edx
c000ca38:	52                   	push   edx
c000ca39:	53                   	push   ebx
c000ca3a:	56                   	push   esi
c000ca3b:	e8 12 2d 01 00       	call   c001f752 <LinkedList<Device>::addElement(Device*)>
c000ca40:	83 c4 10             	add    esp,0x10
c000ca43:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca4c:	74 12                	je     c000ca60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca4e:	50                   	push   eax
c000ca4f:	57                   	push   edi
c000ca50:	56                   	push   esi
c000ca51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca54:	e8 c7 ff ff ff       	call   c000ca20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca5b:	83 c4 10             	add    esp,0x10
c000ca5e:	eb e9                	jmp    c000ca49 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca60:	5b                   	pop    ebx
c000ca61:	5e                   	pop    esi
c000ca62:	5f                   	pop    edi
c000ca63:	c3                   	ret    

c000ca64 <getDevicesOfType(DeviceType)>:
c000ca64:	53                   	push   ebx
c000ca65:	83 ec 14             	sub    esp,0x14
c000ca68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca6c:	53                   	push   ebx
c000ca6d:	e8 bc 2d 01 00       	call   c001f82e <LinkedList<Device>::LinkedList()>
c000ca72:	83 c4 0c             	add    esp,0xc
c000ca75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca79:	53                   	push   ebx
c000ca7a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca80:	e8 9b ff ff ff       	call   c000ca20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca85:	83 c4 18             	add    esp,0x18
c000ca88:	89 d8                	mov    eax,ebx
c000ca8a:	5b                   	pop    ebx
c000ca8b:	c2 04 00             	ret    0x4
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <HardDiskController::HardDiskController(char const*)>:
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca97:	83 ec 08             	sub    esp,0x8
c000ca9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9e:	50                   	push   eax
c000ca9f:	e8 40 fe ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000caa4:	83 c4 10             	add    esp,0x10
c000caa7:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab0:	89 10                	mov    DWORD PTR [eax],edx
c000cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cac0:	90                   	nop
c000cac1:	83 c4 0c             	add    esp,0xc
c000cac4:	c3                   	ret    
c000cac5:	90                   	nop
c000cac6:	66 90                	xchg   ax,ax

c000cac8 <HardDiskController::~HardDiskController()>:
c000cac8:	83 ec 0c             	sub    esp,0xc
c000cacb:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad4:	89 10                	mov    DWORD PTR [eax],edx
c000cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cada:	83 ec 0c             	sub    esp,0xc
c000cadd:	50                   	push   eax
c000cade:	e8 6b fb ff ff       	call   c000c64e <Device::~Device()>
c000cae3:	83 c4 10             	add    esp,0x10
c000cae6:	90                   	nop
c000cae7:	83 c4 0c             	add    esp,0xc
c000caea:	c3                   	ret    
c000caeb:	90                   	nop

c000caec <HardDiskController::~HardDiskController()>:
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	83 ec 0c             	sub    esp,0xc
c000caf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caf6:	e8 cd ff ff ff       	call   c000cac8 <HardDiskController::~HardDiskController()>
c000cafb:	83 c4 10             	add    esp,0x10
c000cafe:	83 ec 08             	sub    esp,0x8
c000cb01:	68 58 01 00 00       	push   0x158
c000cb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb0a:	e8 fd dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	83 c4 0c             	add    esp,0xc
c000cb15:	c3                   	ret    

c000cb16 <PhysicalDisk::eject()>:
c000cb16:	83 c8 ff             	or     eax,0xffffffff
c000cb19:	c3                   	ret    

c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb1a:	83 ec 0c             	sub    esp,0xc
c000cb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb21:	83 ec 08             	sub    esp,0x8
c000cb24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb28:	50                   	push   eax
c000cb29:	e8 b6 fd ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	ba 94 16 02 c0       	mov    edx,0xc0021694
c000cb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3a:	89 10                	mov    DWORD PTR [eax],edx
c000cb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb56:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb7c:	90                   	nop
c000cb7d:	83 c4 0c             	add    esp,0xc
c000cb80:	c3                   	ret    
c000cb81:	90                   	nop

c000cb82 <PhysicalDisk::startCache()>:
c000cb82:	56                   	push   esi
c000cb83:	53                   	push   ebx
c000cb84:	83 ec 10             	sub    esp,0x10
c000cb87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb8b:	6a 44                	push   0x44
c000cb8d:	e8 41 af ff ff       	call   c0007ad3 <malloc>
c000cb92:	89 c6                	mov    esi,eax
c000cb94:	58                   	pop    eax
c000cb95:	5a                   	pop    edx
c000cb96:	53                   	push   ebx
c000cb97:	56                   	push   esi
c000cb98:	e8 83 17 00 00       	call   c000e320 <VCache::VCache(PhysicalDisk*)>
c000cb9d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cba3:	83 c4 14             	add    esp,0x14
c000cba6:	5b                   	pop    ebx
c000cba7:	5e                   	pop    esi
c000cba8:	c3                   	ret    
c000cba9:	90                   	nop

c000cbaa <PhysicalDisk::~PhysicalDisk()>:
c000cbaa:	83 ec 0c             	sub    esp,0xc
c000cbad:	ba 94 16 02 c0       	mov    edx,0xc0021694
c000cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb6:	89 10                	mov    DWORD PTR [eax],edx
c000cbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbbc:	83 ec 0c             	sub    esp,0xc
c000cbbf:	50                   	push   eax
c000cbc0:	e8 89 fa ff ff       	call   c000c64e <Device::~Device()>
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	90                   	nop
c000cbc9:	83 c4 0c             	add    esp,0xc
c000cbcc:	c3                   	ret    
c000cbcd:	90                   	nop

c000cbce <PhysicalDisk::~PhysicalDisk()>:
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	83 ec 0c             	sub    esp,0xc
c000cbd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbd8:	e8 cd ff ff ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c000cbdd:	83 c4 10             	add    esp,0x10
c000cbe0:	83 ec 08             	sub    esp,0x8
c000cbe3:	68 6c 01 00 00       	push   0x16c
c000cbe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbec:	e8 1b dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	83 c4 0c             	add    esp,0xc
c000cbf7:	c3                   	ret    

c000cbf8 <int_handler>:
c000cbf8:	55                   	push   ebp
c000cbf9:	57                   	push   edi
c000cbfa:	56                   	push   esi
c000cbfb:	53                   	push   ebx
c000cbfc:	83 ec 0c             	sub    esp,0xc
c000cbff:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc06:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cc0a:	74 0b                	je     c000cc17 <int_handler+0x1f>
c000cc0c:	fa                   	cli    
c000cc0d:	f4                   	hlt    
c000cc0e:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc15:	75 f5                	jne    c000cc0c <int_handler+0x14>
c000cc17:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc1a:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc1d:	83 f8 17             	cmp    eax,0x17
c000cc20:	76 40                	jbe    c000cc62 <int_handler+0x6a>
c000cc22:	c1 e6 04             	shl    esi,0x4
c000cc25:	31 db                	xor    ebx,ebx
c000cc27:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc2d:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc33:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc37:	85 c0                	test   eax,eax
c000cc39:	74 13                	je     c000cc4e <int_handler+0x56>
c000cc3b:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc3f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc42:	74 2c                	je     c000cc70 <int_handler+0x78>
c000cc44:	83 ec 08             	sub    esp,0x8
c000cc47:	52                   	push   edx
c000cc48:	57                   	push   edi
c000cc49:	ff d0                	call   eax
c000cc4b:	83 c4 10             	add    esp,0x10
c000cc4e:	83 c3 01             	add    ebx,0x1
c000cc51:	83 fb 04             	cmp    ebx,0x4
c000cc54:	75 dd                	jne    c000cc33 <int_handler+0x3b>
c000cc56:	83 c4 0c             	add    esp,0xc
c000cc59:	31 c0                	xor    eax,eax
c000cc5b:	5b                   	pop    ebx
c000cc5c:	31 d2                	xor    edx,edx
c000cc5e:	5e                   	pop    esi
c000cc5f:	5f                   	pop    edi
c000cc60:	5d                   	pop    ebp
c000cc61:	c3                   	ret    
c000cc62:	83 ec 0c             	sub    esp,0xc
c000cc65:	50                   	push   eax
c000cc66:	e8 2f b2 00 00       	call   c0017e9a <HalEndOfInterrupt(int)>
c000cc6b:	83 c4 10             	add    esp,0x10
c000cc6e:	eb b2                	jmp    c000cc22 <int_handler+0x2a>
c000cc70:	83 ec 08             	sub    esp,0x8
c000cc73:	52                   	push   edx
c000cc74:	57                   	push   edi
c000cc75:	ff d0                	call   eax
c000cc77:	83 c4 10             	add    esp,0x10
c000cc7a:	83 c4 0c             	add    esp,0xc
c000cc7d:	5b                   	pop    ebx
c000cc7e:	5e                   	pop    esi
c000cc7f:	5f                   	pop    edi
c000cc80:	5d                   	pop    ebp
c000cc81:	c3                   	ret    

c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc82:	56                   	push   esi
c000cc83:	31 c0                	xor    eax,eax
c000cc85:	53                   	push   ebx
c000cc86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc92:	89 ca                	mov    edx,ecx
c000cc94:	c1 e2 04             	shl    edx,0x4
c000cc97:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc9f:	74 17                	je     c000ccb8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cca1:	83 c0 01             	add    eax,0x1
c000cca4:	83 f8 04             	cmp    eax,0x4
c000cca7:	75 ee                	jne    c000cc97 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cca9:	c7 44 24 0c c4 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc00216c4
c000ccb1:	5b                   	pop    ebx
c000ccb2:	5e                   	pop    esi
c000ccb3:	e9 31 46 00 00       	jmp    c00112e9 <KePanic(char const*)>
c000ccb8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccbb:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000ccc2:	5b                   	pop    ebx
c000ccc3:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000ccca:	5e                   	pop    esi
c000cccb:	c3                   	ret    

c000cccc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cccc:	55                   	push   ebp
c000cccd:	57                   	push   edi
c000ccce:	56                   	push   esi
c000cccf:	53                   	push   ebx
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccd9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cce1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cce8:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cceb:	74 57                	je     c000cd44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cced:	84 c0                	test   al,al
c000ccef:	89 c7                	mov    edi,eax
c000ccf1:	74 1d                	je     c000cd10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000ccf3:	83 fe 0f             	cmp    esi,0xf
c000ccf6:	0f 8f d9 00 00 00    	jg     c000cdd5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000ccfc:	0f b6 b6 c8 31 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdce38]
c000cd03:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd0b:	d1 ef                	shr    edi,1
c000cd0d:	83 e7 01             	and    edi,0x1
c000cd10:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd15:	83 ec 08             	sub    esp,0x8
c000cd18:	31 db                	xor    ebx,ebx
c000cd1a:	50                   	push   eax
c000cd1b:	68 d1 16 02 c0       	push   0xc00216d1
c000cd20:	e8 e5 db ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cd25:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd2a:	83 c4 10             	add    esp,0x10
c000cd2d:	85 c0                	test   eax,eax
c000cd2f:	7f 59                	jg     c000cd8a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cd31:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	68 e8 16 02 c0       	push   0xc00216e8
c000cd3c:	e8 a8 45 00 00       	call   c00112e9 <KePanic(char const*)>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 e8                	mov    eax,ebp
c000cd46:	31 d2                	xor    edx,edx
c000cd48:	c1 e0 04             	shl    eax,0x4
c000cd4b:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd52:	85 c9                	test   ecx,ecx
c000cd54:	0f 84 92 00 00 00    	je     c000cdec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cd5a:	83 c2 01             	add    edx,0x1
c000cd5d:	83 fa 04             	cmp    edx,0x4
c000cd60:	75 e9                	jne    c000cd4b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cd62:	83 ec 0c             	sub    esp,0xc
c000cd65:	68 3c 17 02 c0       	push   0xc002173c
c000cd6a:	e8 7a 45 00 00       	call   c00112e9 <KePanic(char const*)>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd77:	83 c4 0c             	add    esp,0xc
c000cd7a:	5b                   	pop    ebx
c000cd7b:	5e                   	pop    esi
c000cd7c:	5f                   	pop    edi
c000cd7d:	5d                   	pop    ebp
c000cd7e:	c3                   	ret    
c000cd7f:	83 c3 01             	add    ebx,0x1
c000cd82:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd88:	7e a7                	jle    c000cd31 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cd8a:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd91:	83 ec 08             	sub    esp,0x8
c000cd94:	56                   	push   esi
c000cd95:	55                   	push   ebp
c000cd96:	e8 e9 18 01 00       	call   c001e684 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd9b:	83 c4 10             	add    esp,0x10
c000cd9e:	84 c0                	test   al,al
c000cda0:	74 dd                	je     c000cd7f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cda2:	89 f8                	mov    eax,edi
c000cda4:	83 ec 04             	sub    esp,0x4
c000cda7:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cdae:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cdb1:	0f b6 f8             	movzx  edi,al
c000cdb4:	57                   	push   edi
c000cdb5:	89 e8                	mov    eax,ebp
c000cdb7:	6a 00                	push   0x0
c000cdb9:	0f b6 c0             	movzx  eax,al
c000cdbc:	50                   	push   eax
c000cdbd:	89 f0                	mov    eax,esi
c000cdbf:	6a 00                	push   0x0
c000cdc1:	0f b6 c0             	movzx  eax,al
c000cdc4:	6a 00                	push   0x0
c000cdc6:	50                   	push   eax
c000cdc7:	53                   	push   ebx
c000cdc8:	e8 23 1a 01 00       	call   c001e7f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cdcd:	83 c4 20             	add    esp,0x20
c000cdd0:	e9 6f ff ff ff       	jmp    c000cd44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cdd5:	83 ec 0c             	sub    esp,0xc
c000cdd8:	31 ff                	xor    edi,edi
c000cdda:	68 04 17 02 c0       	push   0xc0021704
c000cddf:	e8 05 45 00 00       	call   c00112e9 <KePanic(char const*)>
c000cde4:	83 c4 10             	add    esp,0x10
c000cde7:	e9 24 ff ff ff       	jmp    c000cd10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cdec:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cdef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cdf3:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdfa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cdfe:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ce05:	83 c4 0c             	add    esp,0xc
c000ce08:	89 f0                	mov    eax,esi
c000ce0a:	5b                   	pop    ebx
c000ce0b:	5e                   	pop    esi
c000ce0c:	5f                   	pop    edi
c000ce0d:	5d                   	pop    ebp
c000ce0e:	c3                   	ret    

c000ce0f <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ce0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce17:	c1 e0 04             	shl    eax,0x4
c000ce1a:	8d 50 10             	lea    edx,[eax+0x10]
c000ce1d:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce23:	74 08                	je     c000ce2d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce25:	83 c0 04             	add    eax,0x4
c000ce28:	39 d0                	cmp    eax,edx
c000ce2a:	75 f1                	jne    c000ce1d <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce2c:	c3                   	ret    
c000ce2d:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce37:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce41:	eb e2                	jmp    c000ce25 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce43 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce43:	56                   	push   esi
c000ce44:	53                   	push   ebx
c000ce45:	83 ec 04             	sub    esp,0x4
c000ce48:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce55:	74 0e                	je     c000ce65 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce57:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce5c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce63:	75 34                	jne    c000ce99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000ce65:	8d 43 20             	lea    eax,[ebx+0x20]
c000ce68:	c1 e0 04             	shl    eax,0x4
c000ce6b:	8d 50 10             	lea    edx,[eax+0x10]
c000ce6e:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000ce74:	74 0d                	je     c000ce83 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000ce76:	83 c0 04             	add    eax,0x4
c000ce79:	39 d0                	cmp    eax,edx
c000ce7b:	75 f1                	jne    c000ce6e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ce7d:	83 c4 04             	add    esp,0x4
c000ce80:	5b                   	pop    ebx
c000ce81:	5e                   	pop    esi
c000ce82:	c3                   	ret    
c000ce83:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce8d:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce97:	eb dd                	jmp    c000ce76 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000ce99:	83 fb 0f             	cmp    ebx,0xf
c000ce9c:	7f 09                	jg     c000cea7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000ce9e:	0f b6 9b c8 31 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdce38]
c000cea5:	eb be                	jmp    c000ce65 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cea7:	83 ec 0c             	sub    esp,0xc
c000ceaa:	68 f5 16 02 c0       	push   0xc00216f5
c000ceaf:	e8 35 44 00 00       	call   c00112e9 <KePanic(char const*)>
c000ceb4:	83 c4 10             	add    esp,0x10
c000ceb7:	eb ac                	jmp    c000ce65 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ceb9 <setupINTS()>:
c000ceb9:	31 c0                	xor    eax,eax
c000cebb:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cec5:	83 c0 10             	add    eax,0x10
c000cec8:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000ced2:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000cedc:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000cee6:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000cef0:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000cefa:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000cf04:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000cf0e:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf13:	75 a6                	jne    c000cebb <setupINTS()+0x2>
c000cf15:	c3                   	ret    

c000cf16 <convertLegacyIRQNumber(int)>:
c000cf16:	83 ec 0c             	sub    esp,0xc
c000cf19:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf23:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf2a:	74 0c                	je     c000cf38 <convertLegacyIRQNumber(int)+0x22>
c000cf2c:	83 f8 0f             	cmp    eax,0xf
c000cf2f:	7f 0b                	jg     c000cf3c <convertLegacyIRQNumber(int)+0x26>
c000cf31:	0f b6 80 c8 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce38]
c000cf38:	83 c4 0c             	add    esp,0xc
c000cf3b:	c3                   	ret    
c000cf3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf40:	83 ec 0c             	sub    esp,0xc
c000cf43:	68 04 17 02 c0       	push   0xc0021704
c000cf48:	e8 9c 43 00 00       	call   c00112e9 <KePanic(char const*)>
c000cf4d:	83 c4 10             	add    esp,0x10
c000cf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf54:	83 c4 0c             	add    esp,0xc
c000cf57:	c3                   	ret    

c000cf58 <startGUI(void*)>:
c000cf58:	55                   	push   ebp
c000cf59:	89 e5                	mov    ebp,esp
c000cf5b:	53                   	push   ebx
c000cf5c:	83 ec 04             	sub    esp,0x4
c000cf5f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf64:	83 e8 01             	sub    eax,0x1
c000cf67:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf6c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf71:	85 c0                	test   eax,eax
c000cf73:	75 01                	jne    c000cf76 <startGUI(void*)+0x1e>
c000cf75:	fb                   	sti    
c000cf76:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	6a 01                	push   0x1
c000cf81:	68 61 17 02 c0       	push   0xc0021761
c000cf86:	e8 f1 81 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	83 ec 08             	sub    esp,0x8
c000cf91:	53                   	push   ebx
c000cf92:	50                   	push   eax
c000cf93:	e8 24 84 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c000cf98:	83 c4 10             	add    esp,0x10
c000cf9b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfa1:	83 ec 08             	sub    esp,0x8
c000cfa4:	6a 01                	push   0x1
c000cfa6:	68 7b 17 02 c0       	push   0xc002177b
c000cfab:	e8 cc 81 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c000cfb0:	83 c4 10             	add    esp,0x10
c000cfb3:	83 ec 08             	sub    esp,0x8
c000cfb6:	53                   	push   ebx
c000cfb7:	50                   	push   eax
c000cfb8:	e8 ff 83 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c000cfbd:	83 c4 10             	add    esp,0x10
c000cfc0:	90                   	nop
c000cfc1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfc4:	c9                   	leave  
c000cfc5:	c3                   	ret    

c000cfc6 <startGUIVESA(void*)>:
c000cfc6:	55                   	push   ebp
c000cfc7:	89 e5                	mov    ebp,esp
c000cfc9:	53                   	push   ebx
c000cfca:	83 ec 04             	sub    esp,0x4
c000cfcd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfd2:	83 e8 01             	sub    eax,0x1
c000cfd5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfda:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfdf:	85 c0                	test   eax,eax
c000cfe1:	75 01                	jne    c000cfe4 <startGUIVESA(void*)+0x1e>
c000cfe3:	fb                   	sti    
c000cfe4:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfea:	83 ec 08             	sub    esp,0x8
c000cfed:	6a 01                	push   0x1
c000cfef:	68 99 17 02 c0       	push   0xc0021799
c000cff4:	e8 83 81 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	83 ec 08             	sub    esp,0x8
c000cfff:	53                   	push   ebx
c000d000:	50                   	push   eax
c000d001:	e8 b6 83 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c000d006:	83 c4 10             	add    esp,0x10
c000d009:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d00f:	83 ec 08             	sub    esp,0x8
c000d012:	6a 01                	push   0x1
c000d014:	68 7b 17 02 c0       	push   0xc002177b
c000d019:	e8 5e 81 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c000d01e:	83 c4 10             	add    esp,0x10
c000d021:	83 ec 08             	sub    esp,0x8
c000d024:	53                   	push   ebx
c000d025:	50                   	push   eax
c000d026:	e8 91 83 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	90                   	nop
c000d02f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d032:	c9                   	leave  
c000d033:	c3                   	ret    

c000d034 <sendKeyToTerminal(unsigned char)>:
c000d034:	55                   	push   ebp
c000d035:	89 e5                	mov    ebp,esp
c000d037:	83 ec 28             	sub    esp,0x28
c000d03a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d03d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d040:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d045:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d049:	83 ec 08             	sub    esp,0x8
c000d04c:	52                   	push   edx
c000d04d:	50                   	push   eax
c000d04e:	e8 69 bd ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d053:	83 c4 10             	add    esp,0x10
c000d056:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d05a:	83 f8 0a             	cmp    eax,0xa
c000d05d:	74 16                	je     c000d075 <sendKeyToTerminal(unsigned char)+0x41>
c000d05f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d063:	83 f8 03             	cmp    eax,0x3
c000d066:	74 0d                	je     c000d075 <sendKeyToTerminal(unsigned char)+0x41>
c000d068:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d06c:	83 f8 1c             	cmp    eax,0x1c
c000d06f:	0f 85 97 00 00 00    	jne    c000d10c <sendKeyToTerminal(unsigned char)+0xd8>
c000d075:	fa                   	cli    
c000d076:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d07b:	83 c0 01             	add    eax,0x1
c000d07e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d083:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d088:	83 c0 01             	add    eax,0x1
c000d08b:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d090:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d095:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d098:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d0a2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d0a6:	74 1f                	je     c000d0c7 <sendKeyToTerminal(unsigned char)+0x93>
c000d0a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0b1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0b7:	83 ec 0c             	sub    esp,0xc
c000d0ba:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0bd:	e8 1e 90 00 00       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c000d0c2:	83 c4 10             	add    esp,0x10
c000d0c5:	eb db                	jmp    c000d0a2 <sendKeyToTerminal(unsigned char)+0x6e>
c000d0c7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0cc:	83 e8 01             	sub    eax,0x1
c000d0cf:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0d4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0d9:	85 c0                	test   eax,eax
c000d0db:	75 18                	jne    c000d0f5 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0dd:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0e2:	85 c0                	test   eax,eax
c000d0e4:	74 0f                	je     c000d0f5 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0e6:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0f0:	e8 f3 8a 00 00       	call   c0015be8 <schedule()>
c000d0f5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0fa:	83 e8 01             	sub    eax,0x1
c000d0fd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d102:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d107:	85 c0                	test   eax,eax
c000d109:	75 01                	jne    c000d10c <sendKeyToTerminal(unsigned char)+0xd8>
c000d10b:	fb                   	sti    
c000d10c:	90                   	nop
c000d10d:	c9                   	leave  
c000d10e:	c3                   	ret    

c000d10f <sendKeyboardToken(KeyboardToken)>:
c000d10f:	55                   	push   ebp
c000d110:	89 e5                	mov    ebp,esp
c000d112:	83 ec 18             	sub    esp,0x18
c000d115:	e8 1f 42 00 00       	call   c0011339 <KeUserIOReceived()>
c000d11a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d11d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d120:	0f b7 c0             	movzx  eax,ax
c000d123:	83 f2 01             	xor    edx,0x1
c000d126:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d12c:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d131:	85 c0                	test   eax,eax
c000d133:	74 24                	je     c000d159 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d135:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d13b:	83 ec 04             	sub    esp,0x4
c000d13e:	68 40 84 02 c0       	push   0xc0028440
c000d143:	83 ec 08             	sub    esp,0x8
c000d146:	89 e0                	mov    eax,esp
c000d148:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d14b:	89 08                	mov    DWORD PTR [eax],ecx
c000d14d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d150:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d154:	ff d2                	call   edx
c000d156:	83 c4 10             	add    esp,0x10
c000d159:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d15d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d160:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d165:	0f b6 d2             	movzx  edx,dl
c000d168:	0f b6 c0             	movzx  eax,al
c000d16b:	39 c2                	cmp    edx,eax
c000d16d:	74 1c                	je     c000d18b <sendKeyboardToken(KeyboardToken)+0x7c>
c000d16f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d172:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d177:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d17c:	0f b6 c0             	movzx  eax,al
c000d17f:	83 ec 0c             	sub    esp,0xc
c000d182:	50                   	push   eax
c000d183:	e8 90 b3 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d188:	83 c4 10             	add    esp,0x10
c000d18b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d18e:	0f b6 c0             	movzx  eax,al
c000d191:	85 c0                	test   eax,eax
c000d193:	0f 84 da 00 00 00    	je     c000d273 <sendKeyboardToken(KeyboardToken)+0x164>
c000d199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d19c:	0f b7 c0             	movzx  eax,ax
c000d19f:	3d 18 03 00 00       	cmp    eax,0x318
c000d1a4:	75 06                	jne    c000d1ac <sendKeyboardToken(KeyboardToken)+0x9d>
c000d1a6:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1af:	0f b7 c0             	movzx  eax,ax
c000d1b2:	3d 19 03 00 00       	cmp    eax,0x319
c000d1b7:	75 06                	jne    c000d1bf <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1b9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c2:	0f b7 c0             	movzx  eax,ax
c000d1c5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1ca:	75 06                	jne    c000d1d2 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1cc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d5:	0f b7 c0             	movzx  eax,ax
c000d1d8:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1dd:	75 06                	jne    c000d1e5 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1df:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e8:	0f b7 c0             	movzx  eax,ax
c000d1eb:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1f0:	75 06                	jne    c000d1f8 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1f2:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1fb:	0f b7 c0             	movzx  eax,ax
c000d1fe:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d203:	75 06                	jne    c000d20b <sendKeyboardToken(KeyboardToken)+0xfc>
c000d205:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d20e:	0f b7 c0             	movzx  eax,ax
c000d211:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d216:	75 06                	jne    c000d21e <sendKeyboardToken(KeyboardToken)+0x10f>
c000d218:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d221:	0f b7 c0             	movzx  eax,ax
c000d224:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d229:	75 06                	jne    c000d231 <sendKeyboardToken(KeyboardToken)+0x122>
c000d22b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d234:	0f b7 c0             	movzx  eax,ax
c000d237:	3d 20 03 00 00       	cmp    eax,0x320
c000d23c:	75 06                	jne    c000d244 <sendKeyboardToken(KeyboardToken)+0x135>
c000d23e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d247:	0f b7 c0             	movzx  eax,ax
c000d24a:	3d 21 03 00 00       	cmp    eax,0x321
c000d24f:	75 06                	jne    c000d257 <sendKeyboardToken(KeyboardToken)+0x148>
c000d251:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d25a:	0f b7 c0             	movzx  eax,ax
c000d25d:	3d 22 03 00 00       	cmp    eax,0x322
c000d262:	0f 85 f1 00 00 00    	jne    c000d359 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d268:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d26e:	e9 e6 00 00 00       	jmp    c000d359 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d276:	0f b7 c0             	movzx  eax,ax
c000d279:	3d 18 03 00 00       	cmp    eax,0x318
c000d27e:	75 0a                	jne    c000d28a <sendKeyboardToken(KeyboardToken)+0x17b>
c000d280:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d286:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d28a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d28d:	0f b7 c0             	movzx  eax,ax
c000d290:	3d 19 03 00 00       	cmp    eax,0x319
c000d295:	75 0a                	jne    c000d2a1 <sendKeyboardToken(KeyboardToken)+0x192>
c000d297:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d29d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a4:	0f b7 c0             	movzx  eax,ax
c000d2a7:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2ac:	75 0a                	jne    c000d2b8 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2ae:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2bb:	0f b7 c0             	movzx  eax,ax
c000d2be:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2c3:	75 0a                	jne    c000d2cf <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2c5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d2:	0f b7 c0             	movzx  eax,ax
c000d2d5:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2da:	75 0a                	jne    c000d2e6 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2dc:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e9:	0f b7 c0             	movzx  eax,ax
c000d2ec:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2f1:	75 0a                	jne    c000d2fd <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2f3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d300:	0f b7 c0             	movzx  eax,ax
c000d303:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d308:	75 0a                	jne    c000d314 <sendKeyboardToken(KeyboardToken)+0x205>
c000d30a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d310:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d317:	0f b7 c0             	movzx  eax,ax
c000d31a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d31f:	75 0a                	jne    c000d32b <sendKeyboardToken(KeyboardToken)+0x21c>
c000d321:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d327:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d32e:	0f b7 c0             	movzx  eax,ax
c000d331:	3d 20 03 00 00       	cmp    eax,0x320
c000d336:	75 0a                	jne    c000d342 <sendKeyboardToken(KeyboardToken)+0x233>
c000d338:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d33e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d345:	0f b7 c0             	movzx  eax,ax
c000d348:	3d 21 03 00 00       	cmp    eax,0x321
c000d34d:	75 0a                	jne    c000d359 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d34f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d355:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d35c:	0f b7 c0             	movzx  eax,ax
c000d35f:	3d 00 02 00 00       	cmp    eax,0x200
c000d364:	75 2f                	jne    c000d395 <sendKeyboardToken(KeyboardToken)+0x286>
c000d366:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d36b:	83 f0 01             	xor    eax,0x1
c000d36e:	0f b6 c0             	movzx  eax,al
c000d371:	85 c0                	test   eax,eax
c000d373:	74 20                	je     c000d395 <sendKeyboardToken(KeyboardToken)+0x286>
c000d375:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d37a:	6a 01                	push   0x1
c000d37c:	6a 00                	push   0x0
c000d37e:	68 58 cf 00 c0       	push   0xc000cf58
c000d383:	50                   	push   eax
c000d384:	e8 13 86 00 00       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d393:	eb 3a                	jmp    c000d3cf <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d398:	0f b7 c0             	movzx  eax,ax
c000d39b:	3d 01 02 00 00       	cmp    eax,0x201
c000d3a0:	75 2d                	jne    c000d3cf <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3a2:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d3a7:	83 f0 01             	xor    eax,0x1
c000d3aa:	0f b6 c0             	movzx  eax,al
c000d3ad:	85 c0                	test   eax,eax
c000d3af:	74 1e                	je     c000d3cf <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3b1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3b6:	6a 01                	push   0x1
c000d3b8:	6a 00                	push   0x0
c000d3ba:	68 c6 cf 00 c0       	push   0xc000cfc6
c000d3bf:	50                   	push   eax
c000d3c0:	e8 d7 85 00 00       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c000d3c5:	83 c4 10             	add    esp,0x10
c000d3c8:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d2:	0f b7 c0             	movzx  eax,ax
c000d3d5:	3d 25 03 00 00       	cmp    eax,0x325
c000d3da:	75 06                	jne    c000d3e2 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3dc:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e5:	0f b7 c0             	movzx  eax,ax
c000d3e8:	3d 24 03 00 00       	cmp    eax,0x324
c000d3ed:	75 06                	jne    c000d3f5 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3ef:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f8:	0f b7 c0             	movzx  eax,ax
c000d3fb:	3d 23 03 00 00       	cmp    eax,0x323
c000d400:	75 06                	jne    c000d408 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d402:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40b:	0f b7 c0             	movzx  eax,ax
c000d40e:	3d 26 03 00 00       	cmp    eax,0x326
c000d413:	75 06                	jne    c000d41b <sendKeyboardToken(KeyboardToken)+0x30c>
c000d415:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d41b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41e:	0f b7 c0             	movzx  eax,ax
c000d421:	3d 27 03 00 00       	cmp    eax,0x327
c000d426:	75 06                	jne    c000d42e <sendKeyboardToken(KeyboardToken)+0x31f>
c000d428:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d42e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d431:	0f b7 c0             	movzx  eax,ax
c000d434:	3d 22 03 00 00       	cmp    eax,0x322
c000d439:	75 06                	jne    c000d441 <sendKeyboardToken(KeyboardToken)+0x332>
c000d43b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d441:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d445:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d448:	83 f0 01             	xor    eax,0x1
c000d44b:	0f b6 c0             	movzx  eax,al
c000d44e:	85 c0                	test   eax,eax
c000d450:	74 7c                	je     c000d4ce <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d452:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d457:	0f b6 c0             	movzx  eax,al
c000d45a:	85 c0                	test   eax,eax
c000d45c:	74 43                	je     c000d4a1 <sendKeyboardToken(KeyboardToken)+0x392>
c000d45e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d462:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d466:	85 c0                	test   eax,eax
c000d468:	74 2b                	je     c000d495 <sendKeyboardToken(KeyboardToken)+0x386>
c000d46a:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d470:	89 d0                	mov    eax,edx
c000d472:	c1 e0 02             	shl    eax,0x2
c000d475:	01 d0                	add    eax,edx
c000d477:	d1 e0                	shl    eax,1
c000d479:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d47e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d481:	0f b7 c0             	movzx  eax,ax
c000d484:	8d 50 d0             	lea    edx,[eax-0x30]
c000d487:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d48c:	01 d0                	add    eax,edx
c000d48e:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d493:	eb 71                	jmp    c000d506 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d495:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d49f:	eb 65                	jmp    c000d506 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4a1:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a6:	85 c0                	test   eax,eax
c000d4a8:	74 18                	je     c000d4c2 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4aa:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4af:	0f b6 c0             	movzx  eax,al
c000d4b2:	83 ec 0c             	sub    esp,0xc
c000d4b5:	50                   	push   eax
c000d4b6:	e8 79 fb ff ff       	call   c000d034 <sendKeyToTerminal(unsigned char)>
c000d4bb:	83 c4 10             	add    esp,0x10
c000d4be:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4c2:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4cc:	eb 38                	jmp    c000d506 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d1:	0f b7 c0             	movzx  eax,ax
c000d4d4:	3d 01 01 00 00       	cmp    eax,0x101
c000d4d9:	75 2b                	jne    c000d506 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4db:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4e0:	85 c0                	test   eax,eax
c000d4e2:	74 18                	je     c000d4fc <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4e4:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4e9:	0f b6 c0             	movzx  eax,al
c000d4ec:	83 ec 0c             	sub    esp,0xc
c000d4ef:	50                   	push   eax
c000d4f0:	e8 3f fb ff ff       	call   c000d034 <sendKeyToTerminal(unsigned char)>
c000d4f5:	83 c4 10             	add    esp,0x10
c000d4f8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4fc:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d506:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d509:	83 f0 01             	xor    eax,0x1
c000d50c:	0f b6 c0             	movzx  eax,al
c000d50f:	85 c0                	test   eax,eax
c000d511:	74 5a                	je     c000d56d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d513:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d516:	83 f0 01             	xor    eax,0x1
c000d519:	0f b6 c0             	movzx  eax,al
c000d51c:	85 c0                	test   eax,eax
c000d51e:	74 4d                	je     c000d56d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d520:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d525:	83 f0 01             	xor    eax,0x1
c000d528:	0f b6 c0             	movzx  eax,al
c000d52b:	85 c0                	test   eax,eax
c000d52d:	74 3e                	je     c000d56d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d532:	0f b7 c0             	movzx  eax,ax
c000d535:	83 f8 1f             	cmp    eax,0x1f
c000d538:	76 0b                	jbe    c000d545 <sendKeyboardToken(KeyboardToken)+0x436>
c000d53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53d:	0f b7 c0             	movzx  eax,ax
c000d540:	83 f8 7e             	cmp    eax,0x7e
c000d543:	76 16                	jbe    c000d55b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d548:	0f b7 c0             	movzx  eax,ax
c000d54b:	83 f8 0a             	cmp    eax,0xa
c000d54e:	74 0b                	je     c000d55b <sendKeyboardToken(KeyboardToken)+0x44c>
c000d550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d553:	0f b7 c0             	movzx  eax,ax
c000d556:	83 f8 08             	cmp    eax,0x8
c000d559:	75 12                	jne    c000d56d <sendKeyboardToken(KeyboardToken)+0x45e>
c000d55b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55e:	0f b6 c0             	movzx  eax,al
c000d561:	83 ec 0c             	sub    esp,0xc
c000d564:	50                   	push   eax
c000d565:	e8 ca fa ff ff       	call   c000d034 <sendKeyToTerminal(unsigned char)>
c000d56a:	83 c4 10             	add    esp,0x10
c000d56d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d570:	83 f0 01             	xor    eax,0x1
c000d573:	0f b6 c0             	movzx  eax,al
c000d576:	85 c0                	test   eax,eax
c000d578:	74 5d                	je     c000d5d7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d57a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d57d:	83 f0 01             	xor    eax,0x1
c000d580:	0f b6 c0             	movzx  eax,al
c000d583:	85 c0                	test   eax,eax
c000d585:	74 50                	je     c000d5d7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d587:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d58c:	0f b6 c0             	movzx  eax,al
c000d58f:	85 c0                	test   eax,eax
c000d591:	74 44                	je     c000d5d7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d596:	0f b7 c0             	movzx  eax,ax
c000d599:	83 f8 3f             	cmp    eax,0x3f
c000d59c:	76 39                	jbe    c000d5d7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d59e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a1:	0f b7 c0             	movzx  eax,ax
c000d5a4:	83 f8 7f             	cmp    eax,0x7f
c000d5a7:	77 2e                	ja     c000d5d7 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ac:	88 c2                	mov    dl,al
c000d5ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b1:	0f b7 c0             	movzx  eax,ax
c000d5b4:	83 f8 5f             	cmp    eax,0x5f
c000d5b7:	76 04                	jbe    c000d5bd <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5b9:	b0 20                	mov    al,0x20
c000d5bb:	eb 02                	jmp    c000d5bf <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5bd:	b0 00                	mov    al,0x0
c000d5bf:	89 d1                	mov    ecx,edx
c000d5c1:	29 c1                	sub    ecx,eax
c000d5c3:	89 c8                	mov    eax,ecx
c000d5c5:	83 e8 40             	sub    eax,0x40
c000d5c8:	0f b6 c0             	movzx  eax,al
c000d5cb:	83 ec 0c             	sub    esp,0xc
c000d5ce:	50                   	push   eax
c000d5cf:	e8 60 fa ff ff       	call   c000d034 <sendKeyToTerminal(unsigned char)>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5da:	0f b7 c0             	movzx  eax,ax
c000d5dd:	3d 00 03 00 00       	cmp    eax,0x300
c000d5e2:	75 12                	jne    c000d5f6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5e4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5e7:	83 f0 01             	xor    eax,0x1
c000d5ea:	0f b6 c0             	movzx  eax,al
c000d5ed:	85 c0                	test   eax,eax
c000d5ef:	74 05                	je     c000d5f6 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5f1:	e8 23 af ff ff       	call   c0008519 <doTerminalCycle()>
c000d5f6:	90                   	nop
c000d5f7:	c9                   	leave  
c000d5f8:	c3                   	ret    

c000d5f9 <clearInternalKeybuffer(VgaText*)>:
c000d5f9:	55                   	push   ebp
c000d5fa:	89 e5                	mov    ebp,esp
c000d5fc:	83 ec 08             	sub    esp,0x8
c000d5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d602:	05 02 01 00 00       	add    eax,0x102
c000d607:	83 ec 0c             	sub    esp,0xc
c000d60a:	50                   	push   eax
c000d60b:	e8 70 2f ff ff       	call   c0000580 <strlen>
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d616:	81 c2 02 01 00 00    	add    edx,0x102
c000d61c:	83 ec 04             	sub    esp,0x4
c000d61f:	50                   	push   eax
c000d620:	6a 00                	push   0x0
c000d622:	52                   	push   edx
c000d623:	e8 c8 2e ff ff       	call   c00004f0 <memset>
c000d628:	83 c4 10             	add    esp,0x10
c000d62b:	90                   	nop
c000d62c:	c9                   	leave  
c000d62d:	c3                   	ret    

c000d62e <readKeyboard(VgaText*, char*, unsigned long)>:
c000d62e:	55                   	push   ebp
c000d62f:	89 e5                	mov    ebp,esp
c000d631:	83 ec 18             	sub    esp,0x18
c000d634:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d639:	85 c0                	test   eax,eax
c000d63b:	74 2a                	je     c000d667 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d63d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d643:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d649:	83 ec 04             	sub    esp,0x4
c000d64c:	68 40 84 02 c0       	push   0xc0028440
c000d651:	83 ec 08             	sub    esp,0x8
c000d654:	89 e0                	mov    eax,esp
c000d656:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d659:	89 08                	mov    DWORD PTR [eax],ecx
c000d65b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d65e:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d662:	ff d2                	call   edx
c000d664:	83 c4 10             	add    esp,0x10
c000d667:	fb                   	sti    
c000d668:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d66f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d673:	0f 84 0d 01 00 00    	je     c000d786 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d67c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d682:	0f be c0             	movsx  eax,al
c000d685:	85 c0                	test   eax,eax
c000d687:	75 2c                	jne    c000d6b5 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d689:	fa                   	cli    
c000d68a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d68f:	83 c0 01             	add    eax,0x1
c000d692:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d697:	e8 4c 85 00 00       	call   c0015be8 <schedule()>
c000d69c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6a1:	83 e8 01             	sub    eax,0x1
c000d6a4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6a9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6ae:	85 c0                	test   eax,eax
c000d6b0:	75 c7                	jne    c000d679 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6b2:	fb                   	sti    
c000d6b3:	eb c4                	jmp    c000d679 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6b8:	8d 50 01             	lea    edx,[eax+0x1]
c000d6bb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6c1:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6c7:	88 10                	mov    BYTE PTR [eax],dl
c000d6c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cc:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6d2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6d5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6d9:	83 f8 03             	cmp    eax,0x3
c000d6dc:	75 1e                	jne    c000d6fc <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6e8:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6ee:	83 ec 08             	sub    esp,0x8
c000d6f1:	6a 02                	push   0x2
c000d6f3:	50                   	push   eax
c000d6f4:	e8 8e 40 00 00       	call   c0011787 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d700:	83 f8 1c             	cmp    eax,0x1c
c000d703:	75 1e                	jne    c000d723 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d705:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d70a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d70c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d70f:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d715:	83 ec 08             	sub    esp,0x8
c000d718:	6a 09                	push   0x9
c000d71a:	50                   	push   eax
c000d71b:	e8 67 40 00 00       	call   c0011787 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d720:	83 c4 10             	add    esp,0x10
c000d723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d726:	05 02 01 00 00       	add    eax,0x102
c000d72b:	83 ec 0c             	sub    esp,0xc
c000d72e:	50                   	push   eax
c000d72f:	e8 4c 2e ff ff       	call   c0000580 <strlen>
c000d734:	83 c4 10             	add    esp,0x10
c000d737:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d73a:	81 c2 02 01 00 00    	add    edx,0x102
c000d740:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d743:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d746:	81 c2 02 01 00 00    	add    edx,0x102
c000d74c:	83 ec 04             	sub    esp,0x4
c000d74f:	50                   	push   eax
c000d750:	51                   	push   ecx
c000d751:	52                   	push   edx
c000d752:	e8 79 2c ff ff       	call   c00003d0 <memmove>
c000d757:	83 c4 10             	add    esp,0x10
c000d75a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d75e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d762:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d766:	83 f8 0a             	cmp    eax,0xa
c000d769:	74 16                	je     c000d781 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d76b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d76f:	83 f8 03             	cmp    eax,0x3
c000d772:	74 0d                	je     c000d781 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d774:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d778:	83 f8 1c             	cmp    eax,0x1c
c000d77b:	0f 85 ee fe ff ff    	jne    c000d66f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d781:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d784:	eb 03                	jmp    c000d789 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d786:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d789:	c9                   	leave  
c000d78a:	c3                   	ret    
c000d78b:	90                   	nop

c000d78c <Keyboard::Keyboard(char const*)>:
c000d78c:	83 ec 0c             	sub    esp,0xc
c000d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d793:	83 ec 08             	sub    esp,0x8
c000d796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79a:	50                   	push   eax
c000d79b:	e8 44 f1 ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000d7a0:	83 c4 10             	add    esp,0x10
c000d7a3:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	89 10                	mov    DWORD PTR [eax],edx
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7bc:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7c3:	90                   	nop
c000d7c4:	83 c4 0c             	add    esp,0xc
c000d7c7:	c3                   	ret    

c000d7c8 <Keyboard::~Keyboard()>:
c000d7c8:	83 ec 0c             	sub    esp,0xc
c000d7cb:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	89 10                	mov    DWORD PTR [eax],edx
c000d7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7da:	83 ec 0c             	sub    esp,0xc
c000d7dd:	50                   	push   eax
c000d7de:	e8 6b ee ff ff       	call   c000c64e <Device::~Device()>
c000d7e3:	83 c4 10             	add    esp,0x10
c000d7e6:	90                   	nop
c000d7e7:	83 c4 0c             	add    esp,0xc
c000d7ea:	c3                   	ret    
c000d7eb:	90                   	nop

c000d7ec <Keyboard::~Keyboard()>:
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	83 ec 0c             	sub    esp,0xc
c000d7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f6:	e8 cd ff ff ff       	call   c000d7c8 <Keyboard::~Keyboard()>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	83 ec 08             	sub    esp,0x8
c000d801:	68 5c 01 00 00       	push   0x15c
c000d806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80a:	e8 fd cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d80f:	83 c4 10             	add    esp,0x10
c000d812:	83 c4 0c             	add    esp,0xc
c000d815:	c3                   	ret    

c000d816 <LogicalDisk::close(int, int, void*)>:
c000d816:	83 c8 ff             	or     eax,0xffffffff
c000d819:	c3                   	ret    

c000d81a <LogicalDisk::~LogicalDisk()>:
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ba 34 18 02 c0       	mov    edx,0xc0021834
c000d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d826:	89 10                	mov    DWORD PTR [eax],edx
c000d828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82c:	83 ec 0c             	sub    esp,0xc
c000d82f:	50                   	push   eax
c000d830:	e8 19 ee ff ff       	call   c000c64e <Device::~Device()>
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	90                   	nop
c000d839:	83 c4 0c             	add    esp,0xc
c000d83c:	c3                   	ret    
c000d83d:	90                   	nop

c000d83e <LogicalDisk::~LogicalDisk()>:
c000d83e:	83 ec 0c             	sub    esp,0xc
c000d841:	83 ec 0c             	sub    esp,0xc
c000d844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d848:	e8 cd ff ff ff       	call   c000d81a <LogicalDisk::~LogicalDisk()>
c000d84d:	83 c4 10             	add    esp,0x10
c000d850:	83 ec 08             	sub    esp,0x8
c000d853:	68 78 01 00 00       	push   0x178
c000d858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85c:	e8 ab cf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d861:	83 c4 10             	add    esp,0x10
c000d864:	83 c4 0c             	add    esp,0xc
c000d867:	c3                   	ret    

c000d868 <LogicalDisk::open(int, int, void*)>:
c000d868:	83 ec 18             	sub    esp,0x18
c000d86b:	68 e8 17 02 c0       	push   0xc00217e8
c000d870:	e8 74 3a 00 00       	call   c00112e9 <KePanic(char const*)>
c000d875:	83 c8 ff             	or     eax,0xffffffff
c000d878:	83 c4 1c             	add    esp,0x1c
c000d87b:	c3                   	ret    

c000d87c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d87c:	53                   	push   ebx
c000d87d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d881:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d885:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d889:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d88f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d895:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d89b:	77 10                	ja     c000d8ad <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d89d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d8a3:	89 d3                	mov    ebx,edx
c000d8a5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8ab:	72 05                	jb     c000d8b2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8ad:	83 c8 ff             	or     eax,0xffffffff
c000d8b0:	89 c2                	mov    edx,eax
c000d8b2:	5b                   	pop    ebx
c000d8b3:	c3                   	ret    

c000d8b4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8b4:	56                   	push   esi
c000d8b5:	83 c8 ff             	or     eax,0xffffffff
c000d8b8:	53                   	push   ebx
c000d8b9:	89 c2                	mov    edx,eax
c000d8bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8bf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8cd:	77 27                	ja     c000d8f6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8cf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8e2:	89 c2                	mov    edx,eax
c000d8e4:	73 10                	jae    c000d8f6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8e6:	89 c8                	mov    eax,ecx
c000d8e8:	89 da                	mov    edx,ebx
c000d8ea:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8f0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8f6:	5b                   	pop    ebx
c000d8f7:	5e                   	pop    esi
c000d8f8:	c3                   	ret    
c000d8f9:	90                   	nop

c000d8fa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8fa:	83 ec 1c             	sub    esp,0x1c
c000d8fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d901:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d90d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d911:	89 04 24             	mov    DWORD PTR [esp],eax
c000d914:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d918:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d91c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d920:	83 ec 08             	sub    esp,0x8
c000d923:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d927:	50                   	push   eax
c000d928:	e8 b7 ef ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000d92d:	83 c4 10             	add    esp,0x10
c000d930:	ba 34 18 02 c0       	mov    edx,0xc0021834
c000d935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d939:	89 10                	mov    DWORD PTR [eax],edx
c000d93b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d95c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d960:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d96a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d976:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d97c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d982:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d989:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d98d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d993:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9a1:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d9a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ab:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9b5:	90                   	nop
c000d9b6:	83 c4 1c             	add    esp,0x1c
c000d9b9:	c3                   	ret    

c000d9ba <LogicalDisk::assignDriveLetter()>:
c000d9ba:	55                   	push   ebp
c000d9bb:	57                   	push   edi
c000d9bc:	56                   	push   esi
c000d9bd:	53                   	push   ebx
c000d9be:	83 ec 14             	sub    esp,0x14
c000d9c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9c5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9cb:	b0 41                	mov    al,0x41
c000d9cd:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9d3:	84 d2                	test   dl,dl
c000d9d5:	75 02                	jne    c000d9d9 <LogicalDisk::assignDriveLetter()+0x1f>
c000d9d7:	b0 43                	mov    al,0x43
c000d9d9:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9df:	0f b6 ca             	movzx  ecx,dl
c000d9e2:	0f be e8             	movsx  ebp,al
c000d9e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9e9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9ed:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9f3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9f7:	3c 43                	cmp    al,0x43
c000d9f9:	75 10                	jne    c000da0b <LogicalDisk::assignDriveLetter()+0x51>
c000d9fb:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000da02:	75 5a                	jne    c000da5e <LogicalDisk::assignDriveLetter()+0xa4>
c000da04:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000da09:	75 53                	jne    c000da5e <LogicalDisk::assignDriveLetter()+0xa4>
c000da0b:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da0e:	ba 01 00 00 00       	mov    edx,0x1
c000da13:	89 34 24             	mov    DWORD PTR [esp],esi
c000da16:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da19:	d3 e2                	shl    edx,cl
c000da1b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da1f:	89 d7                	mov    edi,edx
c000da21:	89 d6                	mov    esi,edx
c000da23:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da27:	c1 ff 1f             	sar    edi,0x1f
c000da2a:	21 f9                	and    ecx,edi
c000da2c:	09 d1                	or     ecx,edx
c000da2e:	75 2e                	jne    c000da5e <LogicalDisk::assignDriveLetter()+0xa4>
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da38:	09 f2                	or     edx,esi
c000da3a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da3d:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da47:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da4d:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da54:	09 fa                	or     edx,edi
c000da56:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da5c:	eb 0d                	jmp    c000da6b <LogicalDisk::assignDriveLetter()+0xb1>
c000da5e:	8d 50 01             	lea    edx,[eax+0x1]
c000da61:	45                   	inc    ebp
c000da62:	80 fa 5b             	cmp    dl,0x5b
c000da65:	88 d0                	mov    al,dl
c000da67:	75 8e                	jne    c000d9f7 <LogicalDisk::assignDriveLetter()+0x3d>
c000da69:	31 c0                	xor    eax,eax
c000da6b:	83 c4 14             	add    esp,0x14
c000da6e:	5b                   	pop    ebx
c000da6f:	5e                   	pop    esi
c000da70:	5f                   	pop    edi
c000da71:	5d                   	pop    ebp
c000da72:	c3                   	ret    
c000da73:	90                   	nop

c000da74 <LogicalDisk::mount()>:
c000da74:	56                   	push   esi
c000da75:	53                   	push   ebx
c000da76:	53                   	push   ebx
c000da77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da7b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da81:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da8b:	85 db                	test   ebx,ebx
c000da8d:	74 27                	je     c000dab6 <LogicalDisk::mount()+0x42>
c000da8f:	51                   	push   ecx
c000da90:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da97:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da99:	83 e8 41             	sub    eax,0x41
c000da9c:	50                   	push   eax
c000da9d:	56                   	push   esi
c000da9e:	53                   	push   ebx
c000da9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	84 c0                	test   al,al
c000daa7:	74 08                	je     c000dab1 <LogicalDisk::mount()+0x3d>
c000daa9:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000daaf:	eb 07                	jmp    c000dab8 <LogicalDisk::mount()+0x44>
c000dab1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dab4:	eb d5                	jmp    c000da8b <LogicalDisk::mount()+0x17>
c000dab6:	31 c0                	xor    eax,eax
c000dab8:	5a                   	pop    edx
c000dab9:	5b                   	pop    ebx
c000daba:	5e                   	pop    esi
c000dabb:	c3                   	ret    

c000dabc <LogicalDisk::unmount()>:
c000dabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000daca:	c3                   	ret    
c000dacb:	90                   	nop

c000dacc <LogicalDisk::eject()>:
c000dacc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dad6:	8b 10                	mov    edx,DWORD PTR [eax]
c000dad8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dadc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dadf:	90                   	nop

c000dae0 <LogicalDisk::unassignDriveLetter()>:
c000dae0:	57                   	push   edi
c000dae1:	56                   	push   esi
c000dae2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dae6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000daed:	85 c9                	test   ecx,ecx
c000daef:	75 0f                	jne    c000db00 <LogicalDisk::unassignDriveLetter()+0x20>
c000daf1:	c7 44 24 0c 0c 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc002180c
c000daf9:	5e                   	pop    esi
c000dafa:	5f                   	pop    edi
c000dafb:	e9 e9 37 00 00       	jmp    c00112e9 <KePanic(char const*)>
c000db00:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000db07:	83 e9 41             	sub    ecx,0x41
c000db0a:	b8 01 00 00 00       	mov    eax,0x1
c000db0f:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db1a:	d3 e0                	shl    eax,cl
c000db1c:	89 c7                	mov    edi,eax
c000db1e:	f7 d0                	not    eax
c000db20:	c1 ff 1f             	sar    edi,0x1f
c000db23:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db29:	89 fe                	mov    esi,edi
c000db2b:	f7 d6                	not    esi
c000db2d:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db33:	5e                   	pop    esi
c000db34:	5f                   	pop    edi
c000db35:	c3                   	ret    

c000db36 <LogicalDisk::read(unsigned long long, int, void*)>:
c000db36:	57                   	push   edi
c000db37:	56                   	push   esi
c000db38:	53                   	push   ebx
c000db39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db49:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db4f:	77 41                	ja     c000db92 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db51:	99                   	cdq    
c000db52:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db58:	01 c8                	add    eax,ecx
c000db5a:	11 da                	adc    edx,ebx
c000db5c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db62:	19 d7                	sbb    edi,edx
c000db64:	72 33                	jb     c000db99 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db66:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db6c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db76:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db7a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db8a:	5b                   	pop    ebx
c000db8b:	5e                   	pop    esi
c000db8c:	5f                   	pop    edi
c000db8d:	e9 d4 0a 00 00       	jmp    c000e666 <VCache::read(unsigned long long, int, void*)>
c000db92:	b8 05 00 00 00       	mov    eax,0x5
c000db97:	eb 05                	jmp    c000db9e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db99:	b8 07 00 00 00       	mov    eax,0x7
c000db9e:	5b                   	pop    ebx
c000db9f:	5e                   	pop    esi
c000dba0:	5f                   	pop    edi
c000dba1:	c3                   	ret    

c000dba2 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dba2:	57                   	push   edi
c000dba3:	56                   	push   esi
c000dba4:	53                   	push   ebx
c000dba5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dbb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbb5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbbb:	77 41                	ja     c000dbfe <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbbd:	99                   	cdq    
c000dbbe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dbc4:	01 c8                	add    eax,ecx
c000dbc6:	11 da                	adc    edx,ebx
c000dbc8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbce:	19 d7                	sbb    edi,edx
c000dbd0:	72 33                	jb     c000dc05 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbd2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbd8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbe2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbe6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbf6:	5b                   	pop    ebx
c000dbf7:	5e                   	pop    esi
c000dbf8:	5f                   	pop    edi
c000dbf9:	e9 6e 09 00 00       	jmp    c000e56c <VCache::write(unsigned long long, int, void*)>
c000dbfe:	b8 05 00 00 00       	mov    eax,0x5
c000dc03:	eb 05                	jmp    c000dc0a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dc05:	b8 07 00 00 00       	mov    eax,0x7
c000dc0a:	5b                   	pop    ebx
c000dc0b:	5e                   	pop    esi
c000dc0c:	5f                   	pop    edi
c000dc0d:	c3                   	ret    
c000dc0e:	66 90                	xchg   ax,ax

c000dc10 <Mouse::Mouse(char const*)>:
c000dc10:	83 ec 0c             	sub    esp,0xc
c000dc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc17:	83 ec 08             	sub    esp,0x8
c000dc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1e:	50                   	push   eax
c000dc1f:	e8 c0 ec ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000dc24:	83 c4 10             	add    esp,0x10
c000dc27:	ba 60 18 02 c0       	mov    edx,0xc0021860
c000dc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc30:	89 10                	mov    DWORD PTR [eax],edx
c000dc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc36:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc40:	90                   	nop
c000dc41:	83 c4 0c             	add    esp,0xc
c000dc44:	c3                   	ret    
c000dc45:	90                   	nop
c000dc46:	66 90                	xchg   ax,ax

c000dc48 <Mouse::~Mouse()>:
c000dc48:	83 ec 0c             	sub    esp,0xc
c000dc4b:	ba 60 18 02 c0       	mov    edx,0xc0021860
c000dc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc54:	89 10                	mov    DWORD PTR [eax],edx
c000dc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc5a:	83 ec 0c             	sub    esp,0xc
c000dc5d:	50                   	push   eax
c000dc5e:	e8 eb e9 ff ff       	call   c000c64e <Device::~Device()>
c000dc63:	83 c4 10             	add    esp,0x10
c000dc66:	90                   	nop
c000dc67:	83 c4 0c             	add    esp,0xc
c000dc6a:	c3                   	ret    
c000dc6b:	90                   	nop

c000dc6c <Mouse::~Mouse()>:
c000dc6c:	83 ec 0c             	sub    esp,0xc
c000dc6f:	83 ec 0c             	sub    esp,0xc
c000dc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc76:	e8 cd ff ff ff       	call   c000dc48 <Mouse::~Mouse()>
c000dc7b:	83 c4 10             	add    esp,0x10
c000dc7e:	83 ec 08             	sub    esp,0x8
c000dc81:	68 58 01 00 00       	push   0x158
c000dc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8a:	e8 7d cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	83 c4 0c             	add    esp,0xc
c000dc95:	c3                   	ret    

c000dc96 <NIC::getMAC()>:
c000dc96:	31 c0                	xor    eax,eax
c000dc98:	31 d2                	xor    edx,edx
c000dc9a:	c3                   	ret    
c000dc9b:	90                   	nop

c000dc9c <NIC::write(int, unsigned char*, int*)>:
c000dc9c:	b8 01 00 00 00       	mov    eax,0x1
c000dca1:	c3                   	ret    

c000dca2 <NIC::NIC(char const*)>:
c000dca2:	83 ec 0c             	sub    esp,0xc
c000dca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca9:	83 ec 08             	sub    esp,0x8
c000dcac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcb0:	50                   	push   eax
c000dcb1:	e8 2e ec ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000dcb6:	83 c4 10             	add    esp,0x10
c000dcb9:	ba 8c 18 02 c0       	mov    edx,0xc002188c
c000dcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc2:	89 10                	mov    DWORD PTR [eax],edx
c000dcc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcd2:	90                   	nop
c000dcd3:	83 c4 0c             	add    esp,0xc
c000dcd6:	c3                   	ret    
c000dcd7:	90                   	nop

c000dcd8 <NIC::~NIC()>:
c000dcd8:	83 ec 0c             	sub    esp,0xc
c000dcdb:	ba 8c 18 02 c0       	mov    edx,0xc002188c
c000dce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce4:	89 10                	mov    DWORD PTR [eax],edx
c000dce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcea:	83 ec 0c             	sub    esp,0xc
c000dced:	50                   	push   eax
c000dcee:	e8 5b e9 ff ff       	call   c000c64e <Device::~Device()>
c000dcf3:	83 c4 10             	add    esp,0x10
c000dcf6:	90                   	nop
c000dcf7:	83 c4 0c             	add    esp,0xc
c000dcfa:	c3                   	ret    
c000dcfb:	90                   	nop

c000dcfc <NIC::~NIC()>:
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	83 ec 0c             	sub    esp,0xc
c000dd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd06:	e8 cd ff ff ff       	call   c000dcd8 <NIC::~NIC()>
c000dd0b:	83 c4 10             	add    esp,0x10
c000dd0e:	83 ec 08             	sub    esp,0x8
c000dd11:	68 58 01 00 00       	push   0x158
c000dd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd1a:	e8 ed ca ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dd1f:	83 c4 10             	add    esp,0x10
c000dd22:	83 c4 0c             	add    esp,0xc
c000dd25:	c3                   	ret    

c000dd26 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd26:	55                   	push   ebp
c000dd27:	57                   	push   edi
c000dd28:	56                   	push   esi
c000dd29:	53                   	push   ebx
c000dd2a:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd30:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dd37:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dd3e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dd45:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dd4c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd50:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd54:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd5b:	e8 80 ec ff ff       	call   c000c9e0 <Device::getName()>
c000dd60:	5a                   	pop    edx
c000dd61:	59                   	pop    ecx
c000dd62:	50                   	push   eax
c000dd63:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd67:	55                   	push   ebp
c000dd68:	e8 e3 28 ff ff       	call   c0000650 <strcpy>
c000dd6d:	5b                   	pop    ebx
c000dd6e:	58                   	pop    eax
c000dd6f:	68 b8 18 02 c0       	push   0xc00218b8
c000dd74:	55                   	push   ebp
c000dd75:	e8 f6 2a ff ff       	call   c0000870 <strcat>
c000dd7a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd81:	e8 4d 9d ff ff       	call   c0007ad3 <malloc>
c000dd86:	83 c4 0c             	add    esp,0xc
c000dd89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd91:	89 c3                	mov    ebx,eax
c000dd93:	57                   	push   edi
c000dd94:	56                   	push   esi
c000dd95:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd9c:	55                   	push   ebp
c000dd9d:	50                   	push   eax
c000dd9e:	e8 57 fb ff ff       	call   c000d8fa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dda3:	83 c4 14             	add    esp,0x14
c000dda6:	53                   	push   ebx
c000dda7:	e8 0e fc ff ff       	call   c000d9ba <LogicalDisk::assignDriveLetter()>
c000ddac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ddaf:	e8 c0 fc ff ff       	call   c000da74 <LogicalDisk::mount()>
c000ddb4:	58                   	pop    eax
c000ddb5:	5a                   	pop    edx
c000ddb6:	53                   	push   ebx
c000ddb7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddbe:	e8 89 e9 ff ff       	call   c000c74c <Device::addChild(Device*)>
c000ddc3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ddc9:	5b                   	pop    ebx
c000ddca:	5e                   	pop    esi
c000ddcb:	5f                   	pop    edi
c000ddcc:	5d                   	pop    ebp
c000ddcd:	c3                   	ret    

c000ddce <createPartitionsForDisk(PhysicalDisk*)>:
c000ddce:	55                   	push   ebp
c000ddcf:	57                   	push   edi
c000ddd0:	56                   	push   esi
c000ddd1:	53                   	push   ebx
c000ddd2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddd8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dddf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dde5:	3d 00 02 00 00       	cmp    eax,0x200
c000ddea:	74 27                	je     c000de13 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ddec:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddf2:	83 ec 10             	sub    esp,0x10
c000ddf5:	99                   	cdq    
c000ddf6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddfc:	52                   	push   edx
c000ddfd:	50                   	push   eax
c000ddfe:	0f a4 f7 0a          	shld   edi,esi,0xa
c000de02:	c1 e6 0a             	shl    esi,0xa
c000de05:	89 fd                	mov    ebp,edi
c000de07:	55                   	push   ebp
c000de08:	56                   	push   esi
c000de09:	e8 92 14 01 00       	call   c001f2a0 <__udivdi3>
c000de0e:	e9 b9 00 00 00       	jmp    c000decc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de18:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de1c:	56                   	push   esi
c000de1d:	6a 01                	push   0x1
c000de1f:	6a 00                	push   0x0
c000de21:	6a 00                	push   0x0
c000de23:	53                   	push   ebx
c000de24:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de27:	83 c4 20             	add    esp,0x20
c000de2a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de32:	75 0a                	jne    c000de3e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de34:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de3c:	74 2c                	je     c000de6a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de3e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de44:	83 ec 10             	sub    esp,0x10
c000de47:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de4d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de53:	89 f7                	mov    edi,esi
c000de55:	c1 ff 1f             	sar    edi,0x1f
c000de58:	57                   	push   edi
c000de59:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de5d:	56                   	push   esi
c000de5e:	c1 e0 0a             	shl    eax,0xa
c000de61:	52                   	push   edx
c000de62:	50                   	push   eax
c000de63:	e8 38 14 01 00       	call   c001f2a0 <__udivdi3>
c000de68:	eb 62                	jmp    c000decc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de6a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de71:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de78:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de7f:	89 cf                	mov    edi,ecx
c000de81:	83 e2 7f             	and    edx,0x7f
c000de84:	83 e7 7f             	and    edi,0x7f
c000de87:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de8a:	83 e0 7f             	and    eax,0x7f
c000de8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de90:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de97:	83 e0 7f             	and    eax,0x7f
c000de9a:	01 d0                	add    eax,edx
c000de9c:	84 c0                	test   al,al
c000de9e:	89 c5                	mov    ebp,eax
c000dea0:	74 41                	je     c000dee3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dea2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000deb1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000deb7:	89 f7                	mov    edi,esi
c000deb9:	c1 ff 1f             	sar    edi,0x1f
c000debc:	57                   	push   edi
c000debd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dec1:	56                   	push   esi
c000dec2:	c1 e0 0a             	shl    eax,0xa
c000dec5:	52                   	push   edx
c000dec6:	50                   	push   eax
c000dec7:	e8 d4 13 01 00       	call   c001f2a0 <__udivdi3>
c000decc:	83 c4 14             	add    esp,0x14
c000decf:	52                   	push   edx
c000ded0:	50                   	push   eax
c000ded1:	6a 00                	push   0x0
c000ded3:	6a 00                	push   0x0
c000ded5:	53                   	push   ebx
c000ded6:	e8 4b fe ff ff       	call   c000dd26 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dedb:	83 c4 20             	add    esp,0x20
c000dede:	e9 73 01 00 00       	jmp    c000e056 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dee3:	89 f0                	mov    eax,esi
c000dee5:	31 c9                	xor    ecx,ecx
c000dee7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000deee:	75 02                	jne    c000def2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000def0:	89 cd                	mov    ebp,ecx
c000def2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000defa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000df01:	83 c0 10             	add    eax,0x10
c000df04:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df0c:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000df13:	c1 e2 08             	shl    edx,0x8
c000df16:	c1 e6 10             	shl    esi,0x10
c000df19:	09 f2                	or     edx,esi
c000df1b:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000df22:	09 f2                	or     edx,esi
c000df24:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df2b:	c1 e6 18             	shl    esi,0x18
c000df2e:	09 f2                	or     edx,esi
c000df30:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df37:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df3b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df42:	c1 e6 10             	shl    esi,0x10
c000df45:	c1 e2 08             	shl    edx,0x8
c000df48:	09 f2                	or     edx,esi
c000df4a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df51:	09 f2                	or     edx,esi
c000df53:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df5a:	c1 e6 18             	shl    esi,0x18
c000df5d:	09 f2                	or     edx,esi
c000df5f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df63:	41                   	inc    ecx
c000df64:	83 f9 04             	cmp    ecx,0x4
c000df67:	0f 85 7a ff ff ff    	jne    c000dee7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df71:	83 f0 01             	xor    eax,0x1
c000df74:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df78:	75 4f                	jne    c000dfc9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df7e:	83 f0 01             	xor    eax,0x1
c000df81:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df85:	75 42                	jne    c000dfc9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df87:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df8d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df95:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df9b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dfa3:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dfa9:	89 f7                	mov    edi,esi
c000dfab:	c1 ff 1f             	sar    edi,0x1f
c000dfae:	57                   	push   edi
c000dfaf:	56                   	push   esi
c000dfb0:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfb4:	52                   	push   edx
c000dfb5:	c1 e0 0a             	shl    eax,0xa
c000dfb8:	50                   	push   eax
c000dfb9:	e8 e2 12 01 00       	call   c001f2a0 <__udivdi3>
c000dfbe:	83 c4 10             	add    esp,0x10
c000dfc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfc5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfc9:	89 e8                	mov    eax,ebp
c000dfcb:	0f b6 e8             	movzx  ebp,al
c000dfce:	85 ed                	test   ebp,ebp
c000dfd0:	74 50                	je     c000e022 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfd6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfde:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfe6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfee:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dff2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dffa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dffe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e002:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e006:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e00a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e00e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e012:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e016:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e01a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e01e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e022:	31 ed                	xor    ebp,ebp
c000e024:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e028:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e02c:	89 f8                	mov    eax,edi
c000e02e:	09 f0                	or     eax,esi
c000e030:	74 1e                	je     c000e050 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e032:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e036:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e03a:	89 d1                	mov    ecx,edx
c000e03c:	09 c1                	or     ecx,eax
c000e03e:	74 10                	je     c000e050 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	57                   	push   edi
c000e044:	56                   	push   esi
c000e045:	52                   	push   edx
c000e046:	50                   	push   eax
c000e047:	53                   	push   ebx
c000e048:	e8 d9 fc ff ff       	call   c000dd26 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e04d:	83 c4 20             	add    esp,0x20
c000e050:	45                   	inc    ebp
c000e051:	83 fd 04             	cmp    ebp,0x4
c000e054:	75 ce                	jne    c000e024 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e056:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e05c:	5b                   	pop    ebx
c000e05d:	5e                   	pop    esi
c000e05e:	5f                   	pop    edi
c000e05f:	5d                   	pop    ebp
c000e060:	c3                   	ret    
c000e061:	66 90                	xchg   ax,ax
c000e063:	90                   	nop

c000e064 <Serial::Serial(char const*)>:
c000e064:	83 ec 0c             	sub    esp,0xc
c000e067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06b:	83 ec 08             	sub    esp,0x8
c000e06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e072:	50                   	push   eax
c000e073:	e8 6c e8 ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000e078:	83 c4 10             	add    esp,0x10
c000e07b:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000e080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e084:	89 10                	mov    DWORD PTR [eax],edx
c000e086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e094:	90                   	nop
c000e095:	83 c4 0c             	add    esp,0xc
c000e098:	c3                   	ret    
c000e099:	90                   	nop
c000e09a:	66 90                	xchg   ax,ax

c000e09c <Serial::~Serial()>:
c000e09c:	83 ec 0c             	sub    esp,0xc
c000e09f:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000e0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a8:	89 10                	mov    DWORD PTR [eax],edx
c000e0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ae:	83 ec 0c             	sub    esp,0xc
c000e0b1:	50                   	push   eax
c000e0b2:	e8 97 e5 ff ff       	call   c000c64e <Device::~Device()>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	90                   	nop
c000e0bb:	83 c4 0c             	add    esp,0xc
c000e0be:	c3                   	ret    
c000e0bf:	90                   	nop

c000e0c0 <Serial::~Serial()>:
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	83 ec 0c             	sub    esp,0xc
c000e0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ca:	e8 cd ff ff ff       	call   c000e09c <Serial::~Serial()>
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	83 ec 08             	sub    esp,0x8
c000e0d5:	68 58 01 00 00       	push   0x158
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 29 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	83 c4 0c             	add    esp,0xc
c000e0e9:	c3                   	ret    
c000e0ea:	66 90                	xchg   ax,ax

c000e0ec <Timer::Timer(char const*)>:
c000e0ec:	83 ec 0c             	sub    esp,0xc
c000e0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f3:	83 ec 08             	sub    esp,0x8
c000e0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fa:	50                   	push   eax
c000e0fb:	e8 e4 e7 ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000e100:	83 c4 10             	add    esp,0x10
c000e103:	ba 10 19 02 c0       	mov    edx,0xc0021910
c000e108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e10c:	89 10                	mov    DWORD PTR [eax],edx
c000e10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e112:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e11c:	90                   	nop
c000e11d:	83 c4 0c             	add    esp,0xc
c000e120:	c3                   	ret    
c000e121:	90                   	nop
c000e122:	66 90                	xchg   ax,ax

c000e124 <Timer::~Timer()>:
c000e124:	83 ec 0c             	sub    esp,0xc
c000e127:	ba 10 19 02 c0       	mov    edx,0xc0021910
c000e12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e130:	89 10                	mov    DWORD PTR [eax],edx
c000e132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e136:	83 ec 0c             	sub    esp,0xc
c000e139:	50                   	push   eax
c000e13a:	e8 0f e5 ff ff       	call   c000c64e <Device::~Device()>
c000e13f:	83 c4 10             	add    esp,0x10
c000e142:	90                   	nop
c000e143:	83 c4 0c             	add    esp,0xc
c000e146:	c3                   	ret    
c000e147:	90                   	nop

c000e148 <Timer::~Timer()>:
c000e148:	83 ec 0c             	sub    esp,0xc
c000e14b:	83 ec 0c             	sub    esp,0xc
c000e14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e152:	e8 cd ff ff ff       	call   c000e124 <Timer::~Timer()>
c000e157:	83 c4 10             	add    esp,0x10
c000e15a:	83 ec 08             	sub    esp,0x8
c000e15d:	68 5c 01 00 00       	push   0x15c
c000e162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e166:	e8 a1 c6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	83 c4 0c             	add    esp,0xc
c000e171:	c3                   	ret    

c000e172 <Timer::read()>:
c000e172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e176:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e17c:	c3                   	ret    

c000e17d <setupTimer(int)>:
c000e17d:	53                   	push   ebx
c000e17e:	83 ec 14             	sub    esp,0x14
c000e181:	68 5c 01 00 00       	push   0x15c
c000e186:	e8 48 99 ff ff       	call   c0007ad3 <malloc>
c000e18b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e18e:	89 c3                	mov    ebx,eax
c000e190:	e8 77 09 01 00       	call   c001eb0c <PIT::PIT()>
c000e195:	58                   	pop    eax
c000e196:	5a                   	pop    edx
c000e197:	53                   	push   ebx
c000e198:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e19e:	e8 a9 e5 ff ff       	call   c000c74c <Device::addChild(Device*)>
c000e1a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1a5:	6a 00                	push   0x0
c000e1a7:	6a 00                	push   0x0
c000e1a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1ad:	53                   	push   ebx
c000e1ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1b1:	83 c4 28             	add    esp,0x28
c000e1b4:	89 d8                	mov    eax,ebx
c000e1b6:	5b                   	pop    ebx
c000e1b7:	c3                   	ret    

c000e1b8 <timerHandler(unsigned int)>:
c000e1b8:	56                   	push   esi
c000e1b9:	53                   	push   ebx
c000e1ba:	51                   	push   ecx
c000e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1bf:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1c5:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1cc:	0f 84 4a 01 00 00    	je     c000e31c <timerHandler(unsigned int)+0x164>
c000e1d2:	fa                   	cli    
c000e1d3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1d9:	83 ec 0c             	sub    esp,0xc
c000e1dc:	68 d8 96 02 c0       	push   0xc00296d8
c000e1e1:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1e7:	e8 84 16 01 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1ec:	83 c4 10             	add    esp,0x10
c000e1ef:	84 c0                	test   al,al
c000e1f1:	0f 85 a1 00 00 00    	jne    c000e298 <timerHandler(unsigned int)+0xe0>
c000e1f7:	83 ec 0c             	sub    esp,0xc
c000e1fa:	68 d8 96 02 c0       	push   0xc00296d8
c000e1ff:	e8 88 16 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e204:	83 c4 10             	add    esp,0x10
c000e207:	89 c6                	mov    esi,eax
c000e209:	8d 76 00             	lea    esi,[esi+0x0]
c000e20c:	83 ec 0c             	sub    esp,0xc
c000e20f:	68 d8 96 02 c0       	push   0xc00296d8
c000e214:	e8 73 16 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e219:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e220:	89 c3                	mov    ebx,eax
c000e222:	e8 6d 16 01 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e227:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e22a:	83 c4 10             	add    esp,0x10
c000e22d:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e233:	77 23                	ja     c000e258 <timerHandler(unsigned int)+0xa0>
c000e235:	83 ec 0c             	sub    esp,0xc
c000e238:	53                   	push   ebx
c000e239:	e8 a2 7e 00 00       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c000e23e:	83 c4 10             	add    esp,0x10
c000e241:	39 de                	cmp    esi,ebx
c000e243:	75 27                	jne    c000e26c <timerHandler(unsigned int)+0xb4>
c000e245:	83 ec 0c             	sub    esp,0xc
c000e248:	68 d8 96 02 c0       	push   0xc00296d8
c000e24d:	e8 3a 16 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e252:	89 c6                	mov    esi,eax
c000e254:	eb 12                	jmp    c000e268 <timerHandler(unsigned int)+0xb0>
c000e256:	66 90                	xchg   ax,ax
c000e258:	52                   	push   edx
c000e259:	52                   	push   edx
c000e25a:	53                   	push   ebx
c000e25b:	68 d8 96 02 c0       	push   0xc00296d8
c000e260:	e8 eb 16 01 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e265:	8d 76 00             	lea    esi,[esi+0x0]
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	90                   	nop
c000e26c:	83 ec 0c             	sub    esp,0xc
c000e26f:	68 d8 96 02 c0       	push   0xc00296d8
c000e274:	e8 f7 15 01 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e279:	83 c4 10             	add    esp,0x10
c000e27c:	84 c0                	test   al,al
c000e27e:	75 18                	jne    c000e298 <timerHandler(unsigned int)+0xe0>
c000e280:	83 ec 0c             	sub    esp,0xc
c000e283:	68 d8 96 02 c0       	push   0xc00296d8
c000e288:	e8 ff 15 01 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e28d:	83 c4 10             	add    esp,0x10
c000e290:	39 f0                	cmp    eax,esi
c000e292:	0f 85 74 ff ff ff    	jne    c000e20c <timerHandler(unsigned int)+0x54>
c000e298:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e29d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e2a1:	74 41                	je     c000e2e4 <timerHandler(unsigned int)+0x12c>
c000e2a3:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e2aa:	74 38                	je     c000e2e4 <timerHandler(unsigned int)+0x12c>
c000e2ac:	fa                   	cli    
c000e2ad:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2b3:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2be:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2c7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2ca:	72 08                	jb     c000e2d4 <timerHandler(unsigned int)+0x11c>
c000e2cc:	e8 17 79 00 00       	call   c0015be8 <schedule()>
c000e2d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2d9:	48                   	dec    eax
c000e2da:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2df:	75 03                	jne    c000e2e4 <timerHandler(unsigned int)+0x12c>
c000e2e1:	fb                   	sti    
c000e2e2:	66 90                	xchg   ax,ax
c000e2e4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2e9:	48                   	dec    eax
c000e2ea:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2ef:	75 1b                	jne    c000e30c <timerHandler(unsigned int)+0x154>
c000e2f1:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2f8:	74 12                	je     c000e30c <timerHandler(unsigned int)+0x154>
c000e2fa:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e304:	e8 df 78 00 00       	call   c0015be8 <schedule()>
c000e309:	8d 76 00             	lea    esi,[esi+0x0]
c000e30c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e311:	48                   	dec    eax
c000e312:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e317:	75 03                	jne    c000e31c <timerHandler(unsigned int)+0x164>
c000e319:	fb                   	sti    
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	58                   	pop    eax
c000e31d:	5b                   	pop    ebx
c000e31e:	5e                   	pop    esi
c000e31f:	c3                   	ret    

c000e320 <VCache::VCache(PhysicalDisk*)>:
c000e320:	53                   	push   ebx
c000e321:	83 ec 18             	sub    esp,0x18
c000e324:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000e329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32d:	89 10                	mov    DWORD PTR [eax],edx
c000e32f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e333:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e33a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e349:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e350:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e362:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e378:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e37c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e380:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e387:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e392:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3aa:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3b1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3b9:	83 ec 0c             	sub    esp,0xc
c000e3bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3c0:	e8 0e 97 ff ff       	call   c0007ad3 <malloc>
c000e3c5:	83 c4 10             	add    esp,0x10
c000e3c8:	89 c3                	mov    ebx,eax
c000e3ca:	83 ec 0c             	sub    esp,0xc
c000e3cd:	53                   	push   ebx
c000e3ce:	e8 b5 75 00 00       	call   c0015988 <Mutex::Mutex()>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3da:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ec:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3f7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e401:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e404:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e408:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e40e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e414:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e418:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e41b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e41e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e422:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e426:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e42a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e430:	05 00 02 00 00       	add    eax,0x200
c000e435:	c1 e0 03             	shl    eax,0x3
c000e438:	83 ec 0c             	sub    esp,0xc
c000e43b:	50                   	push   eax
c000e43c:	e8 92 96 ff ff       	call   c0007ad3 <malloc>
c000e441:	83 c4 10             	add    esp,0x10
c000e444:	89 c2                	mov    edx,eax
c000e446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e44a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e44d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e451:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e45c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e460:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e464:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e46a:	89 d0                	mov    eax,edx
c000e46c:	c1 e0 02             	shl    eax,0x2
c000e46f:	01 d0                	add    eax,edx
c000e471:	c1 e0 04             	shl    eax,0x4
c000e474:	83 ec 0c             	sub    esp,0xc
c000e477:	50                   	push   eax
c000e478:	e8 56 96 ff ff       	call   c0007ad3 <malloc>
c000e47d:	83 c4 10             	add    esp,0x10
c000e480:	89 c2                	mov    edx,eax
c000e482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e486:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e489:	90                   	nop
c000e48a:	83 c4 18             	add    esp,0x18
c000e48d:	5b                   	pop    ebx
c000e48e:	c3                   	ret    
c000e48f:	90                   	nop

c000e490 <VCache::invalidateReadBuffer()>:
c000e490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e494:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e49a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e49e:	c3                   	ret    
c000e49f:	90                   	nop

c000e4a0 <VCache::writeWriteBuffer()>:
c000e4a0:	53                   	push   ebx
c000e4a1:	83 ec 08             	sub    esp,0x8
c000e4a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4ac:	74 1e                	je     c000e4cc <VCache::writeWriteBuffer()+0x2c>
c000e4ae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4b1:	83 ec 0c             	sub    esp,0xc
c000e4b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4b6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4bc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4bf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4c2:	50                   	push   eax
c000e4c3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4c6:	83 c4 20             	add    esp,0x20
c000e4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4da:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4de:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4e5:	83 c4 08             	add    esp,0x8
c000e4e8:	5b                   	pop    ebx
c000e4e9:	c3                   	ret    
c000e4ea:	66 90                	xchg   ax,ax

c000e4ec <VCache::~VCache()>:
c000e4ec:	83 ec 0c             	sub    esp,0xc
c000e4ef:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000e4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f8:	89 10                	mov    DWORD PTR [eax],edx
c000e4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4fe:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e501:	0f b6 c0             	movzx  eax,al
c000e504:	85 c0                	test   eax,eax
c000e506:	74 10                	je     c000e518 <VCache::~VCache()+0x2c>
c000e508:	83 ec 0c             	sub    esp,0xc
c000e50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50f:	e8 8c ff ff ff       	call   c000e4a0 <VCache::writeWriteBuffer()>
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	90                   	nop
c000e518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e51c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e51f:	83 ec 0c             	sub    esp,0xc
c000e522:	50                   	push   eax
c000e523:	e8 bb 95 ff ff       	call   c0007ae3 <free>
c000e528:	83 c4 10             	add    esp,0x10
c000e52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e52f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e532:	83 ec 0c             	sub    esp,0xc
c000e535:	50                   	push   eax
c000e536:	e8 a8 95 ff ff       	call   c0007ae3 <free>
c000e53b:	83 c4 10             	add    esp,0x10
c000e53e:	90                   	nop
c000e53f:	83 c4 0c             	add    esp,0xc
c000e542:	c3                   	ret    
c000e543:	90                   	nop

c000e544 <VCache::~VCache()>:
c000e544:	83 ec 0c             	sub    esp,0xc
c000e547:	83 ec 0c             	sub    esp,0xc
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 99 ff ff ff       	call   c000e4ec <VCache::~VCache()>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	83 ec 08             	sub    esp,0x8
c000e559:	6a 44                	push   0x44
c000e55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55f:	e8 a8 c2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	83 c4 0c             	add    esp,0xc
c000e56a:	c3                   	ret    
c000e56b:	90                   	nop

c000e56c <VCache::write(unsigned long long, int, void*)>:
c000e56c:	55                   	push   ebp
c000e56d:	57                   	push   edi
c000e56e:	56                   	push   esi
c000e56f:	53                   	push   ebx
c000e570:	83 ec 1c             	sub    esp,0x1c
c000e573:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e577:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e57b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e57f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e583:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e587:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e58b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e58f:	74 0f                	je     c000e5a0 <VCache::write(unsigned long long, int, void*)+0x34>
c000e591:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e595:	53                   	push   ebx
c000e596:	e8 f5 fe ff ff       	call   c000e490 <VCache::invalidateReadBuffer()>
c000e59b:	58                   	pop    eax
c000e59c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e5a4:	74 66                	je     c000e60c <VCache::write(unsigned long long, int, void*)+0xa0>
c000e5a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5ad:	99                   	cdq    
c000e5ae:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5b1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5b4:	89 c6                	mov    esi,eax
c000e5b6:	31 ce                	xor    esi,ecx
c000e5b8:	89 d0                	mov    eax,edx
c000e5ba:	31 e8                	xor    eax,ebp
c000e5bc:	09 c6                	or     esi,eax
c000e5be:	75 38                	jne    c000e5f8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5c0:	83 ff 01             	cmp    edi,0x1
c000e5c3:	75 33                	jne    c000e5f8 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e5c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e5cc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5d0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5d6:	0f af f9             	imul   edi,ecx
c000e5d9:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e5dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5de:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5e1:	40                   	inc    eax
c000e5e2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5e5:	83 f8 50             	cmp    eax,0x50
c000e5e8:	75 72                	jne    c000e65c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5ea:	83 ec 0c             	sub    esp,0xc
c000e5ed:	53                   	push   ebx
c000e5ee:	e8 ad fe ff ff       	call   c000e4a0 <VCache::writeWriteBuffer()>
c000e5f3:	83 c4 10             	add    esp,0x10
c000e5f6:	eb 64                	jmp    c000e65c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e5f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e5fc:	83 ec 0c             	sub    esp,0xc
c000e5ff:	53                   	push   ebx
c000e600:	e8 9b fe ff ff       	call   c000e4a0 <VCache::writeWriteBuffer()>
c000e605:	83 c4 10             	add    esp,0x10
c000e608:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e60c:	83 ff 4f             	cmp    edi,0x4f
c000e60f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e612:	7f 20                	jg     c000e634 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e614:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e617:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e61b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e61e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e621:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e624:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e628:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e62e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e630:	eb 2a                	jmp    c000e65c <VCache::write(unsigned long long, int, void*)+0xf0>
c000e632:	66 90                	xchg   ax,ax
c000e634:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e638:	8b 10                	mov    edx,DWORD PTR [eax]
c000e63a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e63e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e642:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e646:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e64a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e64e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e651:	83 c4 1c             	add    esp,0x1c
c000e654:	5b                   	pop    ebx
c000e655:	5e                   	pop    esi
c000e656:	5f                   	pop    edi
c000e657:	5d                   	pop    ebp
c000e658:	ff e0                	jmp    eax
c000e65a:	66 90                	xchg   ax,ax
c000e65c:	83 c4 1c             	add    esp,0x1c
c000e65f:	31 c0                	xor    eax,eax
c000e661:	5b                   	pop    ebx
c000e662:	5e                   	pop    esi
c000e663:	5f                   	pop    edi
c000e664:	5d                   	pop    ebp
c000e665:	c3                   	ret    

c000e666 <VCache::read(unsigned long long, int, void*)>:
c000e666:	55                   	push   ebp
c000e667:	57                   	push   edi
c000e668:	56                   	push   esi
c000e669:	53                   	push   ebx
c000e66a:	83 ec 1c             	sub    esp,0x1c
c000e66d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e671:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e675:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e679:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e67d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e681:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e685:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e689:	74 0d                	je     c000e698 <VCache::read(unsigned long long, int, void*)+0x32>
c000e68b:	83 ec 0c             	sub    esp,0xc
c000e68e:	57                   	push   edi
c000e68f:	e8 0c fe ff ff       	call   c000e4a0 <VCache::writeWriteBuffer()>
c000e694:	83 c4 10             	add    esp,0x10
c000e697:	90                   	nop
c000e698:	83 fd 01             	cmp    ebp,0x1
c000e69b:	0f 85 93 00 00 00    	jne    c000e734 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6a1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6a4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ae:	0f 85 80 00 00 00    	jne    c000e734 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6b4:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e6b7:	89 cd                	mov    ebp,ecx
c000e6b9:	f7 dd                	neg    ebp
c000e6bb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e6bf:	89 e8                	mov    eax,ebp
c000e6c1:	21 dd                	and    ebp,ebx
c000e6c3:	c1 f8 1f             	sar    eax,0x1f
c000e6c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6ca:	89 e8                	mov    eax,ebp
c000e6cc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e6d0:	21 f5                	and    ebp,esi
c000e6d2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6d6:	89 ea                	mov    edx,ebp
c000e6d8:	74 2e                	je     c000e708 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6da:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e6dd:	75 29                	jne    c000e708 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6df:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6e2:	75 24                	jne    c000e708 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6e7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6ed:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6f0:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6f3:	21 f3                	and    ebx,esi
c000e6f5:	0f af d9             	imul   ebx,ecx
c000e6f8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6fb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6ff:	89 de                	mov    esi,ebx
c000e701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e703:	31 c0                	xor    eax,eax
c000e705:	eb 61                	jmp    c000e768 <VCache::read(unsigned long long, int, void*)+0x102>
c000e707:	90                   	nop
c000e708:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e70c:	83 ec 0c             	sub    esp,0xc
c000e70f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e712:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e716:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e719:	8b 36                	mov    esi,DWORD PTR [esi]
c000e71b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e71e:	51                   	push   ecx
c000e71f:	52                   	push   edx
c000e720:	50                   	push   eax
c000e721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e725:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e728:	83 c4 20             	add    esp,0x20
c000e72b:	85 c0                	test   eax,eax
c000e72d:	75 39                	jne    c000e768 <VCache::read(unsigned long long, int, void*)+0x102>
c000e72f:	eb b3                	jmp    c000e6e4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e731:	8d 76 00             	lea    esi,[esi+0x0]
c000e734:	83 ec 0c             	sub    esp,0xc
c000e737:	57                   	push   edi
c000e738:	e8 53 fd ff ff       	call   c000e490 <VCache::invalidateReadBuffer()>
c000e73d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e740:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e744:	8b 10                	mov    edx,DWORD PTR [eax]
c000e746:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e74a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e74e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e752:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e756:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e75a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e75d:	83 c4 2c             	add    esp,0x2c
c000e760:	5b                   	pop    ebx
c000e761:	5e                   	pop    esi
c000e762:	5f                   	pop    edi
c000e763:	5d                   	pop    ebp
c000e764:	ff e0                	jmp    eax
c000e766:	66 90                	xchg   ax,ax
c000e768:	83 c4 1c             	add    esp,0x1c
c000e76b:	5b                   	pop    ebx
c000e76c:	5e                   	pop    esi
c000e76d:	5f                   	pop    edi
c000e76e:	5d                   	pop    ebp
c000e76f:	c3                   	ret    

c000e770 <Video::putrect(int, int, int, int, unsigned int)>:
c000e770:	55                   	push   ebp
c000e771:	57                   	push   edi
c000e772:	56                   	push   esi
c000e773:	53                   	push   ebx
c000e774:	83 ec 1c             	sub    esp,0x1c
c000e777:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e77b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e77f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e783:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e787:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e78b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e78f:	01 df                	add    edi,ebx
c000e791:	39 fb                	cmp    ebx,edi
c000e793:	7d 1f                	jge    c000e7b4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e795:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e799:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e79d:	7d 12                	jge    c000e7b1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e79f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e7a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7a5:	53                   	push   ebx
c000e7a6:	55                   	push   ebp
c000e7a7:	45                   	inc    ebp
c000e7a8:	56                   	push   esi
c000e7a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e7ac:	83 c4 10             	add    esp,0x10
c000e7af:	eb e8                	jmp    c000e799 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e7b1:	43                   	inc    ebx
c000e7b2:	eb dd                	jmp    c000e791 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e7b4:	83 c4 1c             	add    esp,0x1c
c000e7b7:	5b                   	pop    ebx
c000e7b8:	5e                   	pop    esi
c000e7b9:	5f                   	pop    edi
c000e7ba:	5d                   	pop    ebp
c000e7bb:	c3                   	ret    

c000e7bc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7bc:	55                   	push   ebp
c000e7bd:	57                   	push   edi
c000e7be:	31 ff                	xor    edi,edi
c000e7c0:	56                   	push   esi
c000e7c1:	53                   	push   ebx
c000e7c2:	83 ec 1c             	sub    esp,0x1c
c000e7c5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7cd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7d4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7e1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7e5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7ec:	01 f9                	add    ecx,edi
c000e7ee:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7f2:	7d 2f                	jge    c000e823 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7f4:	31 f6                	xor    esi,esi
c000e7f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7fa:	01 f2                	add    edx,esi
c000e7fc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e800:	7d 1a                	jge    c000e81c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e802:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e805:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e808:	46                   	inc    esi
c000e809:	51                   	push   ecx
c000e80a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e80e:	52                   	push   edx
c000e80f:	55                   	push   ebp
c000e810:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e813:	83 c4 10             	add    esp,0x10
c000e816:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e81a:	eb da                	jmp    c000e7f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e81c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e820:	47                   	inc    edi
c000e821:	eb c5                	jmp    c000e7e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e823:	83 c4 1c             	add    esp,0x1c
c000e826:	5b                   	pop    ebx
c000e827:	5e                   	pop    esi
c000e828:	5f                   	pop    edi
c000e829:	5d                   	pop    ebp
c000e82a:	c3                   	ret    
c000e82b:	90                   	nop

c000e82c <Video::blit(unsigned int*, int, int, int, int)>:
c000e82c:	55                   	push   ebp
c000e82d:	ba 00 00 00 00       	mov    edx,0x0
c000e832:	57                   	push   edi
c000e833:	56                   	push   esi
c000e834:	53                   	push   ebx
c000e835:	83 ec 1c             	sub    esp,0x1c
c000e838:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e83c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e840:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e844:	85 c0                	test   eax,eax
c000e846:	0f 49 d0             	cmovns edx,eax
c000e849:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e850:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e854:	89 eb                	mov    ebx,ebp
c000e856:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e85a:	01 ea                	add    edx,ebp
c000e85c:	39 da                	cmp    edx,ebx
c000e85e:	7e 54                	jle    c000e8b4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e860:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e866:	7c 4c                	jl     c000e8b4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e868:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e86c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e870:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e874:	01 c1                	add    ecx,eax
c000e876:	39 f9                	cmp    ecx,edi
c000e878:	7e 2f                	jle    c000e8a9 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e87a:	83 c2 04             	add    edx,0x4
c000e87d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e883:	7c 21                	jl     c000e8a6 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e885:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e889:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e88b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e88e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e892:	55                   	push   ebp
c000e893:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e897:	56                   	push   esi
c000e898:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e89b:	83 c4 10             	add    esp,0x10
c000e89e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8a6:	47                   	inc    edi
c000e8a7:	eb c7                	jmp    c000e870 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e8a9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e8ad:	43                   	inc    ebx
c000e8ae:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e8b2:	eb a2                	jmp    c000e856 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e8b4:	83 c4 1c             	add    esp,0x1c
c000e8b7:	5b                   	pop    ebx
c000e8b8:	5e                   	pop    esi
c000e8b9:	5f                   	pop    edi
c000e8ba:	5d                   	pop    ebp
c000e8bb:	c3                   	ret    

c000e8bc <Video::clearScreen(unsigned int)>:
c000e8bc:	57                   	push   edi
c000e8bd:	56                   	push   esi
c000e8be:	53                   	push   ebx
c000e8bf:	31 db                	xor    ebx,ebx
c000e8c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8c5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8cb:	7e 1f                	jle    c000e8ec <Video::clearScreen(unsigned int)+0x30>
c000e8cd:	31 ff                	xor    edi,edi
c000e8cf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8d5:	7e 12                	jle    c000e8e9 <Video::clearScreen(unsigned int)+0x2d>
c000e8d7:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8dd:	53                   	push   ebx
c000e8de:	57                   	push   edi
c000e8df:	47                   	inc    edi
c000e8e0:	56                   	push   esi
c000e8e1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8e4:	83 c4 10             	add    esp,0x10
c000e8e7:	eb e6                	jmp    c000e8cf <Video::clearScreen(unsigned int)+0x13>
c000e8e9:	43                   	inc    ebx
c000e8ea:	eb d9                	jmp    c000e8c5 <Video::clearScreen(unsigned int)+0x9>
c000e8ec:	5b                   	pop    ebx
c000e8ed:	5e                   	pop    esi
c000e8ee:	5f                   	pop    edi
c000e8ef:	c3                   	ret    

c000e8f0 <Video::putpixel(int, int, unsigned int)>:
c000e8f0:	c7 44 24 04 48 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021948
c000e8f8:	e9 ec 29 00 00       	jmp    c00112e9 <KePanic(char const*)>
c000e8fd:	90                   	nop

c000e8fe <Video::readPixelApprox(int, int)>:
c000e8fe:	83 ec 18             	sub    esp,0x18
c000e901:	68 69 19 02 c0       	push   0xc0021969
c000e906:	e8 de 29 00 00       	call   c00112e9 <KePanic(char const*)>
c000e90b:	31 c0                	xor    eax,eax
c000e90d:	83 c4 1c             	add    esp,0x1c
c000e910:	c3                   	ret    
c000e911:	90                   	nop

c000e912 <Video::Video(char const*)>:
c000e912:	83 ec 0c             	sub    esp,0xc
c000e915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e919:	83 ec 08             	sub    esp,0x8
c000e91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e920:	50                   	push   eax
c000e921:	e8 be df ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000e926:	83 c4 10             	add    esp,0x10
c000e929:	ba e4 19 02 c0       	mov    edx,0xc00219e4
c000e92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e932:	89 10                	mov    DWORD PTR [eax],edx
c000e934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e938:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e942:	90                   	nop
c000e943:	83 c4 0c             	add    esp,0xc
c000e946:	c3                   	ret    
c000e947:	90                   	nop

c000e948 <Video::~Video()>:
c000e948:	83 ec 0c             	sub    esp,0xc
c000e94b:	ba e4 19 02 c0       	mov    edx,0xc00219e4
c000e950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e954:	89 10                	mov    DWORD PTR [eax],edx
c000e956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e95a:	83 ec 0c             	sub    esp,0xc
c000e95d:	50                   	push   eax
c000e95e:	e8 eb dc ff ff       	call   c000c64e <Device::~Device()>
c000e963:	83 c4 10             	add    esp,0x10
c000e966:	90                   	nop
c000e967:	83 c4 0c             	add    esp,0xc
c000e96a:	c3                   	ret    
c000e96b:	90                   	nop

c000e96c <Video::~Video()>:
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	83 ec 0c             	sub    esp,0xc
c000e972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e976:	e8 cd ff ff ff       	call   c000e948 <Video::~Video()>
c000e97b:	83 c4 10             	add    esp,0x10
c000e97e:	83 ec 08             	sub    esp,0x8
c000e981:	68 64 01 00 00       	push   0x164
c000e986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e98a:	e8 7d be ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e98f:	83 c4 10             	add    esp,0x10
c000e992:	83 c4 0c             	add    esp,0xc
c000e995:	c3                   	ret    

c000e996 <Video::isMonochrome()>:
c000e996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e99a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e9a0:	c3                   	ret    
c000e9a1:	90                   	nop

c000e9a2 <Video::getWidth()>:
c000e9a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e9ac:	c3                   	ret    
c000e9ad:	90                   	nop

c000e9ae <Video::getHeight()>:
c000e9ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e9b8:	c3                   	ret    
c000e9b9:	90                   	nop

c000e9ba <Video::drawCursor(int, int, unsigned int*, int)>:
c000e9ba:	55                   	push   ebp
c000e9bb:	57                   	push   edi
c000e9bc:	56                   	push   esi
c000e9bd:	53                   	push   ebx
c000e9be:	83 ec 2c             	sub    esp,0x2c
c000e9c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9c5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9c9:	83 f8 01             	cmp    eax,0x1
c000e9cc:	19 c9                	sbb    ecx,ecx
c000e9ce:	31 db                	xor    ebx,ebx
c000e9d0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9d4:	89 ce                	mov    esi,ecx
c000e9d6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9de:	f7 d6                	not    esi
c000e9e0:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e9e6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9ea:	01 d8                	add    eax,ebx
c000e9ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9f0:	57                   	push   edi
c000e9f1:	e8 b8 ff ff ff       	call   c000e9ae <Video::getHeight()>
c000e9f6:	59                   	pop    ecx
c000e9f7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9fb:	7e 70                	jle    c000ea6d <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea01:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ea05:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ea08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea10:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ea17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea1b:	89 e8                	mov    eax,ebp
c000ea1d:	83 c0 20             	add    eax,0x20
c000ea20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea24:	57                   	push   edi
c000ea25:	e8 78 ff ff ff       	call   c000e9a2 <Video::getWidth()>
c000ea2a:	5a                   	pop    edx
c000ea2b:	39 c5                	cmp    ebp,eax
c000ea2d:	7d 34                	jge    c000ea63 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea2f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea34:	74 05                	je     c000ea3b <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea36:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea38:	56                   	push   esi
c000ea39:	eb 0d                	jmp    c000ea48 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea3b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea40:	74 12                	je     c000ea54 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea42:	8b 07                	mov    eax,DWORD PTR [edi]
c000ea44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea4c:	55                   	push   ebp
c000ea4d:	57                   	push   edi
c000ea4e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea51:	83 c4 10             	add    esp,0x10
c000ea54:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea58:	45                   	inc    ebp
c000ea59:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea5d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ea61:	75 c1                	jne    c000ea24 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea63:	43                   	inc    ebx
c000ea64:	83 fb 20             	cmp    ebx,0x20
c000ea67:	0f 85 79 ff ff ff    	jne    c000e9e6 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea6d:	83 c4 2c             	add    esp,0x2c
c000ea70:	5b                   	pop    ebx
c000ea71:	5e                   	pop    esi
c000ea72:	5f                   	pop    edi
c000ea73:	5d                   	pop    ebp
c000ea74:	c3                   	ret    
c000ea75:	90                   	nop

c000ea76 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea76:	55                   	push   ebp
c000ea77:	57                   	push   edi
c000ea78:	56                   	push   esi
c000ea79:	53                   	push   ebx
c000ea7a:	83 ec 28             	sub    esp,0x28
c000ea7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea81:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ea85:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea89:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ea8d:	c1 e7 08             	shl    edi,0x8
c000ea90:	01 c7                	add    edi,eax
c000ea92:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ea96:	c1 e6 08             	shl    esi,0x8
c000ea99:	01 f0                	add    eax,esi
c000ea9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaa3:	0f af c7             	imul   eax,edi
c000eaa6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eaad:	50                   	push   eax
c000eaae:	e8 20 90 ff ff       	call   c0007ad3 <malloc>
c000eab3:	83 c4 10             	add    esp,0x10
c000eab6:	85 c0                	test   eax,eax
c000eab8:	89 c5                	mov    ebp,eax
c000eaba:	75 10                	jne    c000eacc <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eabc:	83 ec 0c             	sub    esp,0xc
c000eabf:	68 94 19 02 c0       	push   0xc0021994
c000eac4:	e8 20 28 00 00       	call   c00112e9 <KePanic(char const*)>
c000eac9:	83 c4 10             	add    esp,0x10
c000eacc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ead0:	ba 12 00 00 00       	mov    edx,0x12
c000ead5:	85 c0                	test   eax,eax
c000ead7:	74 11                	je     c000eaea <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ead9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eadd:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eae1:	c1 fa 03             	sar    edx,0x3
c000eae4:	0f af d1             	imul   edx,ecx
c000eae7:	83 c2 12             	add    edx,0x12
c000eaea:	85 ff                	test   edi,edi
c000eaec:	74 06                	je     c000eaf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eaee:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eaf2:	75 12                	jne    c000eb06 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eaf4:	83 ec 0c             	sub    esp,0xc
c000eaf7:	68 a4 19 02 c0       	push   0xc00219a4
c000eafc:	e8 09 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eb01:	e9 b8 00 00 00       	jmp    c000ebbe <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eb06:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eb0a:	83 f9 02             	cmp    ecx,0x2
c000eb0d:	0f 85 96 00 00 00    	jne    c000eba9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eb13:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eb18:	75 0e                	jne    c000eb28 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb1a:	85 c0                	test   eax,eax
c000eb1c:	75 0a                	jne    c000eb28 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb1e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eb21:	83 e8 18             	sub    eax,0x18
c000eb24:	a8 f7                	test   al,0xf7
c000eb26:	74 0a                	je     c000eb32 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	68 b9 19 02 c0       	push   0xc00219b9
c000eb30:	eb 7f                	jmp    c000ebb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb42:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eb46:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb52:	75 0c                	jne    c000eb60 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb54:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eb59:	c1 e1 18             	shl    ecx,0x18
c000eb5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eb60:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb65:	46                   	inc    esi
c000eb66:	89 c8                	mov    eax,ecx
c000eb68:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb6d:	c1 e0 10             	shl    eax,0x10
c000eb70:	c1 e1 08             	shl    ecx,0x8
c000eb73:	09 c1                	or     ecx,eax
c000eb75:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb79:	09 c1                	or     ecx,eax
c000eb7b:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb7f:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eb83:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb87:	c1 f8 03             	sar    eax,0x3
c000eb8a:	01 c2                	add    edx,eax
c000eb8c:	89 f0                	mov    eax,esi
c000eb8e:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb92:	39 c7                	cmp    edi,eax
c000eb94:	7f b0                	jg     c000eb46 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb96:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb9e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eba1:	7e 22                	jle    c000ebc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eba3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000eba7:	eb 99                	jmp    c000eb42 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eba9:	50                   	push   eax
c000ebaa:	50                   	push   eax
c000ebab:	51                   	push   ecx
c000ebac:	68 c7 19 02 c0       	push   0xc00219c7
c000ebb1:	e8 54 bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ebb6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ebb9:	e8 25 8f ff ff       	call   c0007ae3 <free>
c000ebbe:	83 c4 10             	add    esp,0x10
c000ebc1:	31 ed                	xor    ebp,ebp
c000ebc3:	eb 0f                	jmp    c000ebd4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ebc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebc9:	89 38                	mov    DWORD PTR [eax],edi
c000ebcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebcf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ebd2:	89 38                	mov    DWORD PTR [eax],edi
c000ebd4:	83 c4 1c             	add    esp,0x1c
c000ebd7:	89 e8                	mov    eax,ebp
c000ebd9:	5b                   	pop    ebx
c000ebda:	5e                   	pop    esi
c000ebdb:	5f                   	pop    edi
c000ebdc:	5d                   	pop    ebp
c000ebdd:	c3                   	ret    

c000ebde <Video::putTGA(int, int, unsigned char*, int)>:
c000ebde:	55                   	push   ebp
c000ebdf:	57                   	push   edi
c000ebe0:	56                   	push   esi
c000ebe1:	53                   	push   ebx
c000ebe2:	83 ec 28             	sub    esp,0x28
c000ebe5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebe9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ebed:	50                   	push   eax
c000ebee:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebf2:	50                   	push   eax
c000ebf3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebf7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebfb:	57                   	push   edi
c000ebfc:	e8 75 fe ff ff       	call   c000ea76 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ec01:	83 c4 20             	add    esp,0x20
c000ec04:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec08:	85 c0                	test   eax,eax
c000ec0a:	74 35                	je     c000ec41 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec0c:	89 c6                	mov    esi,eax
c000ec0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec12:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ec16:	39 d8                	cmp    eax,ebx
c000ec18:	7e 27                	jle    c000ec41 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec1a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ec1e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ec22:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ec26:	39 e9                	cmp    ecx,ebp
c000ec28:	7e 14                	jle    c000ec3e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec2a:	83 c6 04             	add    esi,0x4
c000ec2d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ec2f:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ec32:	53                   	push   ebx
c000ec33:	55                   	push   ebp
c000ec34:	45                   	inc    ebp
c000ec35:	57                   	push   edi
c000ec36:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	eb e0                	jmp    c000ec1e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec3e:	43                   	inc    ebx
c000ec3f:	eb cd                	jmp    c000ec0e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec41:	83 c4 1c             	add    esp,0x1c
c000ec44:	5b                   	pop    ebx
c000ec45:	5e                   	pop    esi
c000ec46:	5f                   	pop    edi
c000ec47:	5d                   	pop    ebp
c000ec48:	c3                   	ret    
c000ec49:	66 90                	xchg   ax,ax
c000ec4b:	90                   	nop

c000ec4c <ACPI::close(int, int, void*)>:
c000ec4c:	83 ec 1c             	sub    esp,0x1c
c000ec4f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec57:	74 0b                	je     c000ec64 <ACPI::close(int, int, void*)+0x18>
c000ec59:	b8 00 00 00 00       	mov    eax,0x0
c000ec5e:	e9 99 00 00 00       	jmp    c000ecfc <ACPI::close(int, int, void*)+0xb0>
c000ec63:	90                   	nop
c000ec64:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec69:	75 29                	jne    c000ec94 <ACPI::close(int, int, void*)+0x48>
c000ec6b:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec70:	85 c0                	test   eax,eax
c000ec72:	74 08                	je     c000ec7c <ACPI::close(int, int, void*)+0x30>
c000ec74:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec79:	ff d0                	call   eax
c000ec7b:	90                   	nop
c000ec7c:	83 ec 0c             	sub    esp,0xc
c000ec7f:	68 28 1a 02 c0       	push   0xc0021a28
c000ec84:	e8 60 26 00 00       	call   c00112e9 <KePanic(char const*)>
c000ec89:	83 c4 10             	add    esp,0x10
c000ec8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec91:	eb 69                	jmp    c000ecfc <ACPI::close(int, int, void*)+0xb0>
c000ec93:	90                   	nop
c000ec94:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec99:	75 59                	jne    c000ecf4 <ACPI::close(int, int, void*)+0xa8>
c000ec9b:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eca0:	85 c0                	test   eax,eax
c000eca2:	74 08                	je     c000ecac <ACPI::close(int, int, void*)+0x60>
c000eca4:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eca9:	ff d0                	call   eax
c000ecab:	90                   	nop
c000ecac:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ecb9:	83 e0 02             	and    eax,0x2
c000ecbc:	74 1e                	je     c000ecdc <ACPI::close(int, int, void*)+0x90>
c000ecbe:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ecc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecc9:	89 c2                	mov    edx,eax
c000eccb:	ec                   	in     al,dx
c000eccc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ecd0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecd4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecd8:	eb da                	jmp    c000ecb4 <ACPI::close(int, int, void*)+0x68>
c000ecda:	66 90                	xchg   ax,ax
c000ecdc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ece3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ece8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ecec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecf0:	ee                   	out    dx,al
c000ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecfc:	83 c4 1c             	add    esp,0x1c
c000ecff:	c3                   	ret    

c000ed00 <findRSDP()>:
c000ed00:	83 ec 1c             	sub    esp,0x1c
c000ed03:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed08:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed0e:	83 e0 04             	and    eax,0x4
c000ed11:	0f b6 c0             	movzx  eax,al
c000ed14:	85 c0                	test   eax,eax
c000ed16:	75 08                	jne    c000ed20 <findRSDP()+0x20>
c000ed18:	b8 00 00 00 00       	mov    eax,0x0
c000ed1d:	eb 75                	jmp    c000ed94 <findRSDP()+0x94>
c000ed1f:	90                   	nop
c000ed20:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ed25:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed2a:	7f 1c                	jg     c000ed48 <findRSDP()+0x48>
c000ed2c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed31:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed37:	83 e2 fb             	and    edx,0xfffffffb
c000ed3a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed40:	b8 00 00 00 00       	mov    eax,0x0
c000ed45:	eb 4d                	jmp    c000ed94 <findRSDP()+0x94>
c000ed47:	90                   	nop
c000ed48:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed50:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed58:	77 32                	ja     c000ed8c <findRSDP()+0x8c>
c000ed5a:	83 ec 04             	sub    esp,0x4
c000ed5d:	6a 08                	push   0x8
c000ed5f:	68 c3 1a 02 c0       	push   0xc0021ac3
c000ed64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed68:	e8 13 16 ff ff       	call   c0000380 <memcmp>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	85 c0                	test   eax,eax
c000ed72:	0f 94 c0             	sete   al
c000ed75:	0f b6 c0             	movzx  eax,al
c000ed78:	85 c0                	test   eax,eax
c000ed7a:	74 08                	je     c000ed84 <findRSDP()+0x84>
c000ed7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed80:	eb 12                	jmp    c000ed94 <findRSDP()+0x94>
c000ed82:	66 90                	xchg   ax,ax
c000ed84:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed89:	eb c5                	jmp    c000ed50 <findRSDP()+0x50>
c000ed8b:	90                   	nop
c000ed8c:	b8 00 00 00 00       	mov    eax,0x0
c000ed91:	8d 76 00             	lea    esi,[esi+0x0]
c000ed94:	83 c4 1c             	add    esp,0x1c
c000ed97:	c3                   	ret    

c000ed98 <loadACPITables(unsigned char*)>:
c000ed98:	57                   	push   edi
c000ed99:	56                   	push   esi
c000ed9a:	53                   	push   ebx
c000ed9b:	83 ec 60             	sub    esp,0x60
c000ed9e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eda3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eda9:	83 e0 04             	and    eax,0x4
c000edac:	0f b6 c0             	movzx  eax,al
c000edaf:	85 c0                	test   eax,eax
c000edb1:	0f 84 41 02 00 00    	je     c000eff8 <loadACPITables(unsigned char*)+0x260>
c000edb7:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000edbc:	0f b6 c0             	movzx  eax,al
c000edbf:	85 c0                	test   eax,eax
c000edc1:	74 79                	je     c000ee3c <loadACPITables(unsigned char*)+0xa4>
c000edc3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edc7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000edcb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000edcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edd2:	83 e8 24             	sub    eax,0x24
c000edd5:	c1 e8 03             	shr    eax,0x3
c000edd8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eddc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ede4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ede8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000edec:	0f 8d ba 00 00 00    	jge    c000eeac <loadACPITables(unsigned char*)+0x114>
c000edf2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edf6:	83 c0 24             	add    eax,0x24
c000edf9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edfd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ee01:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee05:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee09:	c1 e0 03             	shl    eax,0x3
c000ee0c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ee10:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee17:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee19:	89 c1                	mov    ecx,eax
c000ee1b:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee20:	8d 50 01             	lea    edx,[eax+0x1]
c000ee23:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee29:	89 ca                	mov    edx,ecx
c000ee2b:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee32:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee37:	eb ab                	jmp    c000ede4 <loadACPITables(unsigned char*)+0x4c>
c000ee39:	8d 76 00             	lea    esi,[esi+0x0]
c000ee3c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee40:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee4b:	83 e8 24             	sub    eax,0x24
c000ee4e:	c1 e8 02             	shr    eax,0x2
c000ee51:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee55:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee60:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee64:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee68:	7d 42                	jge    c000eeac <loadACPITables(unsigned char*)+0x114>
c000ee6a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee6e:	83 c0 24             	add    eax,0x24
c000ee71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee79:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee7d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee81:	c1 e0 02             	shl    eax,0x2
c000ee84:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee8e:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee93:	8d 50 01             	lea    edx,[eax+0x1]
c000ee96:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee9c:	89 ca                	mov    edx,ecx
c000ee9e:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eea5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000eeaa:	eb b4                	jmp    c000ee60 <loadACPITables(unsigned char*)+0xc8>
c000eeac:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000eeb4:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eeb9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000eebd:	0f 8d 39 01 00 00    	jge    c000effc <loadACPITables(unsigned char*)+0x264>
c000eec3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eec7:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eece:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eeda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eede:	25 ff 0f 00 00       	and    eax,0xfff
c000eee3:	89 c6                	mov    esi,eax
c000eee5:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eeeb:	83 ec 0c             	sub    esp,0xc
c000eeee:	6a 01                	push   0x1
c000eef0:	e8 00 a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000eef5:	83 c4 10             	add    esp,0x10
c000eef8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eefc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef02:	83 ec 0c             	sub    esp,0xc
c000ef05:	6a 01                	push   0x1
c000ef07:	6a 01                	push   0x1
c000ef09:	50                   	push   eax
c000ef0a:	52                   	push   edx
c000ef0b:	53                   	push   ebx
c000ef0c:	e8 f7 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef11:	83 c4 20             	add    esp,0x20
c000ef14:	09 f0                	or     eax,esi
c000ef16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef1a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef1e:	c1 e0 03             	shl    eax,0x3
c000ef21:	05 20 89 02 c0       	add    eax,0xc0028920
c000ef26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef32:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef4e:	89 c6                	mov    esi,eax
c000ef50:	89 d7                	mov    edi,edx
c000ef52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef54:	89 c8                	mov    eax,ecx
c000ef56:	89 fa                	mov    edx,edi
c000ef58:	89 f3                	mov    ebx,esi
c000ef5a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef5e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef75:	05 00 10 00 00       	add    eax,0x1000
c000ef7a:	c1 e8 0c             	shr    eax,0xc
c000ef7d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef8d:	25 ff 0f 00 00       	and    eax,0xfff
c000ef92:	89 c6                	mov    esi,eax
c000ef94:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef9a:	83 ec 0c             	sub    esp,0xc
c000ef9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000efa1:	e8 4f a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000efa6:	83 c4 10             	add    esp,0x10
c000efa9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000efad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efb3:	83 ec 0c             	sub    esp,0xc
c000efb6:	6a 01                	push   0x1
c000efb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efbc:	50                   	push   eax
c000efbd:	52                   	push   edx
c000efbe:	53                   	push   ebx
c000efbf:	e8 44 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efc4:	83 c4 20             	add    esp,0x20
c000efc7:	09 f0                	or     eax,esi
c000efc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efd1:	83 ec 0c             	sub    esp,0xc
c000efd4:	50                   	push   eax
c000efd5:	e8 2f a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efe1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efe5:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efec:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000eff1:	e9 be fe ff ff       	jmp    c000eeb4 <loadACPITables(unsigned char*)+0x11c>
c000eff6:	66 90                	xchg   ax,ax
c000eff8:	90                   	nop
c000eff9:	8d 76 00             	lea    esi,[esi+0x0]
c000effc:	83 c4 60             	add    esp,0x60
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	5f                   	pop    edi
c000f002:	c3                   	ret    
c000f003:	90                   	nop

c000f004 <findRSDT(unsigned char*)>:
c000f004:	57                   	push   edi
c000f005:	56                   	push   esi
c000f006:	53                   	push   ebx
c000f007:	83 ec 50             	sub    esp,0x50
c000f00a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f00f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f015:	83 e0 04             	and    eax,0x4
c000f018:	0f b6 c0             	movzx  eax,al
c000f01b:	85 c0                	test   eax,eax
c000f01d:	75 0d                	jne    c000f02c <findRSDT(unsigned char*)+0x28>
c000f01f:	b8 00 00 00 00       	mov    eax,0x0
c000f024:	e9 2b 01 00 00       	jmp    c000f154 <findRSDT(unsigned char*)+0x150>
c000f029:	8d 76 00             	lea    esi,[esi+0x0]
c000f02c:	89 e0                	mov    eax,esp
c000f02e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f032:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f03a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f042:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f046:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f04a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f04e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f052:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f056:	89 c6                	mov    esi,eax
c000f058:	89 d7                	mov    edi,edx
c000f05a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f05c:	89 c8                	mov    eax,ecx
c000f05e:	89 fa                	mov    edx,edi
c000f060:	89 f3                	mov    ebx,esi
c000f062:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f066:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f06a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f06e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f072:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f076:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f07e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f082:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f086:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f08e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f092:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f096:	25 ff 0f 00 00       	and    eax,0xfff
c000f09b:	89 c6                	mov    esi,eax
c000f09d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0a3:	83 ec 0c             	sub    esp,0xc
c000f0a6:	6a 02                	push   0x2
c000f0a8:	e8 48 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0ad:	83 c4 10             	add    esp,0x10
c000f0b0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f0b4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0ba:	83 ec 0c             	sub    esp,0xc
c000f0bd:	6a 01                	push   0x1
c000f0bf:	6a 02                	push   0x2
c000f0c1:	50                   	push   eax
c000f0c2:	52                   	push   edx
c000f0c3:	53                   	push   ebx
c000f0c4:	e8 3f ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0c9:	83 c4 20             	add    esp,0x20
c000f0cc:	09 f0                	or     eax,esi
c000f0ce:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0d6:	25 ff 0f 00 00       	and    eax,0xfff
c000f0db:	89 c6                	mov    esi,eax
c000f0dd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0e3:	83 ec 0c             	sub    esp,0xc
c000f0e6:	6a 02                	push   0x2
c000f0e8:	e8 08 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0ed:	83 c4 10             	add    esp,0x10
c000f0f0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0f4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0fa:	83 ec 0c             	sub    esp,0xc
c000f0fd:	6a 01                	push   0x1
c000f0ff:	6a 02                	push   0x2
c000f101:	50                   	push   eax
c000f102:	52                   	push   edx
c000f103:	53                   	push   ebx
c000f104:	e8 ff ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f109:	83 c4 20             	add    esp,0x20
c000f10c:	09 f0                	or     eax,esi
c000f10e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f112:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f117:	85 c0                	test   eax,eax
c000f119:	75 11                	jne    c000f12c <findRSDT(unsigned char*)+0x128>
c000f11b:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f122:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f126:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f12a:	eb 24                	jmp    c000f150 <findRSDT(unsigned char*)+0x14c>
c000f12c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f131:	83 f8 02             	cmp    eax,0x2
c000f134:	75 12                	jne    c000f148 <findRSDT(unsigned char*)+0x144>
c000f136:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f13d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f141:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f145:	eb 09                	jmp    c000f150 <findRSDT(unsigned char*)+0x14c>
c000f147:	90                   	nop
c000f148:	b8 00 00 00 00       	mov    eax,0x0
c000f14d:	eb 05                	jmp    c000f154 <findRSDT(unsigned char*)+0x150>
c000f14f:	90                   	nop
c000f150:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f154:	83 c4 50             	add    esp,0x50
c000f157:	5b                   	pop    ebx
c000f158:	5e                   	pop    esi
c000f159:	5f                   	pop    edi
c000f15a:	c3                   	ret    
c000f15b:	90                   	nop

c000f15c <findDataTable(unsigned char*, char*)>:
c000f15c:	83 ec 1c             	sub    esp,0x1c
c000f15f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f164:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f16a:	83 e0 04             	and    eax,0x4
c000f16d:	0f b6 c0             	movzx  eax,al
c000f170:	85 c0                	test   eax,eax
c000f172:	75 08                	jne    c000f17c <findDataTable(unsigned char*, char*)+0x20>
c000f174:	b8 00 00 00 00       	mov    eax,0x0
c000f179:	eb 5d                	jmp    c000f1d8 <findDataTable(unsigned char*, char*)+0x7c>
c000f17b:	90                   	nop
c000f17c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f184:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f189:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f18d:	7d 41                	jge    c000f1d0 <findDataTable(unsigned char*, char*)+0x74>
c000f18f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f193:	c1 e0 03             	shl    eax,0x3
c000f196:	05 20 89 02 c0       	add    eax,0xc0028920
c000f19b:	83 ec 04             	sub    esp,0x4
c000f19e:	6a 04                	push   0x4
c000f1a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1a4:	50                   	push   eax
c000f1a5:	e8 d6 11 ff ff       	call   c0000380 <memcmp>
c000f1aa:	83 c4 10             	add    esp,0x10
c000f1ad:	85 c0                	test   eax,eax
c000f1af:	0f 94 c0             	sete   al
c000f1b2:	0f b6 c0             	movzx  eax,al
c000f1b5:	85 c0                	test   eax,eax
c000f1b7:	74 0f                	je     c000f1c8 <findDataTable(unsigned char*, char*)+0x6c>
c000f1b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1bd:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f1c4:	eb 12                	jmp    c000f1d8 <findDataTable(unsigned char*, char*)+0x7c>
c000f1c6:	66 90                	xchg   ax,ax
c000f1c8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1cd:	eb b5                	jmp    c000f184 <findDataTable(unsigned char*, char*)+0x28>
c000f1cf:	90                   	nop
c000f1d0:	b8 00 00 00 00       	mov    eax,0x0
c000f1d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1d8:	83 c4 1c             	add    esp,0x1c
c000f1db:	c3                   	ret    

c000f1dc <scanMADT()>:
c000f1dc:	53                   	push   ebx
c000f1dd:	83 ec 38             	sub    esp,0x38
c000f1e0:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1e5:	25 00 04 00 00       	and    eax,0x400
c000f1ea:	74 14                	je     c000f200 <scanMADT()+0x24>
c000f1ec:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1f1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1f7:	83 e2 fb             	and    edx,0xfffffffb
c000f1fa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f200:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f205:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f20b:	83 e0 04             	and    eax,0x4
c000f20e:	0f b6 c0             	movzx  eax,al
c000f211:	85 c0                	test   eax,eax
c000f213:	0f 84 6b 04 00 00    	je     c000f684 <scanMADT()+0x4a8>
c000f219:	e8 e2 fa ff ff       	call   c000ed00 <findRSDP()>
c000f21e:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f223:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f228:	85 c0                	test   eax,eax
c000f22a:	75 1c                	jne    c000f248 <scanMADT()+0x6c>
c000f22c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f231:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f237:	83 e2 fb             	and    edx,0xfffffffb
c000f23a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f240:	e9 47 04 00 00       	jmp    c000f68c <scanMADT()+0x4b0>
c000f245:	8d 76 00             	lea    esi,[esi+0x0]
c000f248:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f24d:	83 ec 0c             	sub    esp,0xc
c000f250:	50                   	push   eax
c000f251:	e8 ae fd ff ff       	call   c000f004 <findRSDT(unsigned char*)>
c000f256:	83 c4 10             	add    esp,0x10
c000f259:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f25e:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f263:	85 c0                	test   eax,eax
c000f265:	75 19                	jne    c000f280 <scanMADT()+0xa4>
c000f267:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f26c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f272:	83 e2 fb             	and    edx,0xfffffffb
c000f275:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f27b:	e9 0c 04 00 00       	jmp    c000f68c <scanMADT()+0x4b0>
c000f280:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f285:	83 ec 0c             	sub    esp,0xc
c000f288:	50                   	push   eax
c000f289:	e8 0a fb ff ff       	call   c000ed98 <loadACPITables(unsigned char*)>
c000f28e:	83 c4 10             	add    esp,0x10
c000f291:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f296:	83 ec 08             	sub    esp,0x8
c000f299:	68 cc 1a 02 c0       	push   0xc0021acc
c000f29e:	50                   	push   eax
c000f29f:	e8 b8 fe ff ff       	call   c000f15c <findDataTable(unsigned char*, char*)>
c000f2a4:	83 c4 10             	add    esp,0x10
c000f2a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f2ab:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f2b0:	75 1a                	jne    c000f2cc <scanMADT()+0xf0>
c000f2b2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f2b7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f2bd:	83 e2 fe             	and    edx,0xfffffffe
c000f2c0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2c6:	e9 c1 03 00 00       	jmp    c000f68c <scanMADT()+0x4b0>
c000f2cb:	90                   	nop
c000f2cc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2db:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2df:	0f 87 a7 03 00 00    	ja     c000f68c <scanMADT()+0x4b0>
c000f2e5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2ed:	0f 87 99 03 00 00    	ja     c000f68c <scanMADT()+0x4b0>
c000f2f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ff:	8d 50 01             	lea    edx,[eax+0x1]
c000f302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f306:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f30a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f30e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f312:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f316:	8d 50 01             	lea    edx,[eax+0x1]
c000f319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f31d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f321:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f325:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f329:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f32e:	83 f8 02             	cmp    eax,0x2
c000f331:	0f 86 51 03 00 00    	jbe    c000f688 <scanMADT()+0x4ac>
c000f337:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f33c:	85 c0                	test   eax,eax
c000f33e:	75 58                	jne    c000f398 <scanMADT()+0x1bc>
c000f340:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f344:	8d 50 01             	lea    edx,[eax+0x1]
c000f347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f34b:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f351:	0f b6 d2             	movzx  edx,dl
c000f354:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f358:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f35c:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f362:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f366:	8d 50 01             	lea    edx,[eax+0x1]
c000f369:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f36d:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f373:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f376:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f37c:	0f b6 d2             	movzx  edx,dl
c000f37f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f383:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f387:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f38d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f392:	e9 d9 02 00 00       	jmp    c000f670 <scanMADT()+0x494>
c000f397:	90                   	nop
c000f398:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f39d:	83 f8 01             	cmp    eax,0x1
c000f3a0:	0f 85 1a 01 00 00    	jne    c000f4c0 <scanMADT()+0x2e4>
c000f3a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3b1:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f3b7:	0f b6 d2             	movzx  edx,dl
c000f3ba:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3be:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3c2:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3c8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d5:	01 d0                	add    eax,edx
c000f3d7:	83 c0 2c             	add    eax,0x2c
c000f3da:	8a 00                	mov    al,BYTE PTR [eax]
c000f3dc:	0f b6 d0             	movzx  edx,al
c000f3df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e3:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ea:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3ee:	0f b6 c0             	movzx  eax,al
c000f3f1:	c1 e0 08             	shl    eax,0x8
c000f3f4:	89 d1                	mov    ecx,edx
c000f3f6:	09 c1                	or     ecx,eax
c000f3f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3fc:	8d 50 02             	lea    edx,[eax+0x2]
c000f3ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f403:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f407:	0f b6 c0             	movzx  eax,al
c000f40a:	c1 e0 10             	shl    eax,0x10
c000f40d:	09 c1                	or     ecx,eax
c000f40f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f413:	8d 50 03             	lea    edx,[eax+0x3]
c000f416:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f41a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f41e:	0f b6 c0             	movzx  eax,al
c000f421:	c1 e0 18             	shl    eax,0x18
c000f424:	09 c1                	or     ecx,eax
c000f426:	89 ca                	mov    edx,ecx
c000f428:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f42d:	0f b6 c0             	movzx  eax,al
c000f430:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f437:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f43c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f440:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f444:	01 d0                	add    eax,edx
c000f446:	83 c0 2c             	add    eax,0x2c
c000f449:	8a 00                	mov    al,BYTE PTR [eax]
c000f44b:	0f b6 d0             	movzx  edx,al
c000f44e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f452:	8d 48 01             	lea    ecx,[eax+0x1]
c000f455:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f459:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f45d:	0f b6 c0             	movzx  eax,al
c000f460:	c1 e0 08             	shl    eax,0x8
c000f463:	89 d1                	mov    ecx,edx
c000f465:	09 c1                	or     ecx,eax
c000f467:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f46b:	8d 50 02             	lea    edx,[eax+0x2]
c000f46e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f472:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f476:	0f b6 c0             	movzx  eax,al
c000f479:	c1 e0 10             	shl    eax,0x10
c000f47c:	09 c1                	or     ecx,eax
c000f47e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f482:	8d 50 03             	lea    edx,[eax+0x3]
c000f485:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f489:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f48d:	0f b6 c0             	movzx  eax,al
c000f490:	c1 e0 18             	shl    eax,0x18
c000f493:	09 c1                	or     ecx,eax
c000f495:	89 ca                	mov    edx,ecx
c000f497:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f49c:	0f b6 c0             	movzx  eax,al
c000f49f:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f4a6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4ab:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4b0:	83 c0 01             	add    eax,0x1
c000f4b3:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f4b8:	e9 b3 01 00 00       	jmp    c000f670 <scanMADT()+0x494>
c000f4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4c0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4c5:	83 f8 02             	cmp    eax,0x2
c000f4c8:	0f 85 ea 00 00 00    	jne    c000f5b8 <scanMADT()+0x3dc>
c000f4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d2:	8d 50 01             	lea    edx,[eax+0x1]
c000f4d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4e1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e9:	8d 50 01             	lea    edx,[eax+0x1]
c000f4ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4f4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4f8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f500:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f504:	01 d0                	add    eax,edx
c000f506:	83 c0 2c             	add    eax,0x2c
c000f509:	8a 00                	mov    al,BYTE PTR [eax]
c000f50b:	0f b6 d0             	movzx  edx,al
c000f50e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f512:	8d 48 01             	lea    ecx,[eax+0x1]
c000f515:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f519:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f51d:	0f b6 c0             	movzx  eax,al
c000f520:	c1 e0 08             	shl    eax,0x8
c000f523:	89 d1                	mov    ecx,edx
c000f525:	09 c1                	or     ecx,eax
c000f527:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f52b:	8d 50 02             	lea    edx,[eax+0x2]
c000f52e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f532:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f536:	0f b6 c0             	movzx  eax,al
c000f539:	c1 e0 10             	shl    eax,0x10
c000f53c:	09 c1                	or     ecx,eax
c000f53e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f542:	8d 50 03             	lea    edx,[eax+0x3]
c000f545:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f549:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f54d:	0f b6 c0             	movzx  eax,al
c000f550:	c1 e0 18             	shl    eax,0x18
c000f553:	09 c8                	or     eax,ecx
c000f555:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f559:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f55e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f566:	01 d0                	add    eax,edx
c000f568:	83 c0 2c             	add    eax,0x2c
c000f56b:	8a 00                	mov    al,BYTE PTR [eax]
c000f56d:	0f b6 d0             	movzx  edx,al
c000f570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f574:	8d 48 01             	lea    ecx,[eax+0x1]
c000f577:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f57b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f57f:	0f b6 c0             	movzx  eax,al
c000f582:	c1 e0 08             	shl    eax,0x8
c000f585:	09 d0                	or     eax,edx
c000f587:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f58c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f591:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f596:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f59a:	88 90 c8 31 02 c0    	mov    BYTE PTR [eax-0x3ffdce38],dl
c000f5a0:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f5a5:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f5aa:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f5b2:	e9 b9 00 00 00       	jmp    c000f670 <scanMADT()+0x494>
c000f5b7:	90                   	nop
c000f5b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5bd:	83 f8 04             	cmp    eax,0x4
c000f5c0:	0f 85 9a 00 00 00    	jne    c000f660 <scanMADT()+0x484>
c000f5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ca:	8d 50 01             	lea    edx,[eax+0x1]
c000f5cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5d9:	0f b6 c0             	movzx  eax,al
c000f5dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e8:	01 d0                	add    eax,edx
c000f5ea:	83 c0 2c             	add    eax,0x2c
c000f5ed:	8a 00                	mov    al,BYTE PTR [eax]
c000f5ef:	0f b6 d0             	movzx  edx,al
c000f5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5fd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f601:	0f b6 c0             	movzx  eax,al
c000f604:	c1 e0 08             	shl    eax,0x8
c000f607:	09 d0                	or     eax,edx
c000f609:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f60d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f612:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f616:	8d 50 01             	lea    edx,[eax+0x1]
c000f619:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f61d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f621:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f625:	0f b6 c0             	movzx  eax,al
c000f628:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f630:	c1 e0 08             	shl    eax,0x8
c000f633:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f637:	89 c1                	mov    ecx,eax
c000f639:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f63d:	c1 e0 18             	shl    eax,0x18
c000f640:	89 c3                	mov    ebx,eax
c000f642:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f647:	8d 50 01             	lea    edx,[eax+0x1]
c000f64a:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f650:	09 d9                	or     ecx,ebx
c000f652:	89 ca                	mov    edx,ecx
c000f654:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f65b:	eb 13                	jmp    c000f670 <scanMADT()+0x494>
c000f65d:	8d 76 00             	lea    esi,[esi+0x0]
c000f660:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f665:	83 f8 05             	cmp    eax,0x5
c000f668:	75 06                	jne    c000f670 <scanMADT()+0x494>
c000f66a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f66f:	90                   	nop
c000f670:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f675:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f679:	01 d0                	add    eax,edx
c000f67b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f67f:	e9 50 fc ff ff       	jmp    c000f2d4 <scanMADT()+0xf8>
c000f684:	90                   	nop
c000f685:	eb 05                	jmp    c000f68c <scanMADT()+0x4b0>
c000f687:	90                   	nop
c000f688:	90                   	nop
c000f689:	8d 76 00             	lea    esi,[esi+0x0]
c000f68c:	83 c4 38             	add    esp,0x38
c000f68f:	5b                   	pop    ebx
c000f690:	c3                   	ret    
c000f691:	90                   	nop
c000f692:	66 90                	xchg   ax,ax

c000f694 <ACPI::ACPI()>:
c000f694:	83 ec 0c             	sub    esp,0xc
c000f697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69b:	83 ec 08             	sub    esp,0x8
c000f69e:	68 d1 1a 02 c0       	push   0xc0021ad1
c000f6a3:	50                   	push   eax
c000f6a4:	e8 3b d2 ff ff       	call   c000c8e4 <Device::Device(char const*)>
c000f6a9:	83 c4 10             	add    esp,0x10
c000f6ac:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c000f6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b5:	89 10                	mov    DWORD PTR [eax],edx
c000f6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6bb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6c6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6de:	e8 f9 fa ff ff       	call   c000f1dc <scanMADT()>
c000f6e3:	90                   	nop
c000f6e4:	83 c4 0c             	add    esp,0xc
c000f6e7:	c3                   	ret    

c000f6e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6e8:	83 ec 2c             	sub    esp,0x2c
c000f6eb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f6ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f6f7:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f6fb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f700:	88 c8                	mov    al,cl
c000f702:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f706:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f70b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f713:	90                   	nop
c000f714:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f718:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f71e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f722:	0f 8d b0 00 00 00    	jge    c000f7d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f728:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f72c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f730:	83 c2 2a             	add    edx,0x2a
c000f733:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f737:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f73c:	0f b7 c0             	movzx  eax,ax
c000f73f:	39 c2                	cmp    edx,eax
c000f741:	0f 85 85 00 00 00    	jne    c000f7cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f747:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f74b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f74f:	83 c2 2a             	add    edx,0x2a
c000f752:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f756:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f75b:	0f b6 c0             	movzx  eax,al
c000f75e:	39 c2                	cmp    edx,eax
c000f760:	75 6a                	jne    c000f7cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f762:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f767:	85 c0                	test   eax,eax
c000f769:	74 3d                	je     c000f7a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f76b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f76f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f773:	83 c2 2a             	add    edx,0x2a
c000f776:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f77a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f77e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f781:	39 c2                	cmp    edx,eax
c000f783:	74 13                	je     c000f798 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f785:	83 ec 0c             	sub    esp,0xc
c000f788:	68 4c 1a 02 c0       	push   0xc0021a4c
c000f78d:	e8 57 1b 00 00       	call   c00112e9 <KePanic(char const*)>
c000f792:	83 c4 10             	add    esp,0x10
c000f795:	8d 76 00             	lea    esi,[esi+0x0]
c000f798:	83 ec 0c             	sub    esp,0xc
c000f79b:	68 d6 1a 02 c0       	push   0xc0021ad6
c000f7a0:	e8 44 1b 00 00       	call   c00112e9 <KePanic(char const*)>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7b4:	83 c2 2a             	add    edx,0x2a
c000f7b7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f7bb:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7bd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7c0:	89 01                	mov    DWORD PTR [ecx],eax
c000f7c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7c5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7d1:	e9 3e ff ff ff       	jmp    c000f714 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7d6:	66 90                	xchg   ax,ax
c000f7d8:	90                   	nop
c000f7d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7dd:	83 c4 2c             	add    esp,0x2c
c000f7e0:	c2 04 00             	ret    0x4
c000f7e3:	90                   	nop

c000f7e4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7e4:	83 ec 1c             	sub    esp,0x1c
c000f7e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7f3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7f8:	88 c8                	mov    al,cl
c000f7fa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7fe:	88 d0                	mov    al,dl
c000f800:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f808:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f812:	83 c2 2a             	add    edx,0x2a
c000f815:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f819:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f81d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f821:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f82b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f82e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f832:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f83b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f841:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f845:	83 c0 01             	add    eax,0x1
c000f848:	88 c1                	mov    cl,al
c000f84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f84e:	83 c2 2a             	add    edx,0x2a
c000f851:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f859:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f85f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f863:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f866:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f86a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f86e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f872:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f878:	8d 50 01             	lea    edx,[eax+0x1]
c000f87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f87f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f889:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f88f:	3d 00 02 00 00       	cmp    eax,0x200
c000f894:	75 12                	jne    c000f8a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f896:	83 ec 0c             	sub    esp,0xc
c000f899:	68 e5 1a 02 c0       	push   0xc0021ae5
c000f89e:	e8 46 1a 00 00       	call   c00112e9 <KePanic(char const*)>
c000f8a3:	83 c4 10             	add    esp,0x10
c000f8a6:	66 90                	xchg   ax,ax
c000f8a8:	90                   	nop
c000f8a9:	83 c4 1c             	add    esp,0x1c
c000f8ac:	c3                   	ret    
c000f8ad:	90                   	nop
c000f8ae:	66 90                	xchg   ax,ax

c000f8b0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f8b0:	b8 00 00 00 00       	mov    eax,0x0
c000f8b5:	c3                   	ret    
c000f8b6:	66 90                	xchg   ax,ax

c000f8b8 <ACPI::detectPCI()>:
c000f8b8:	53                   	push   ebx
c000f8b9:	83 ec 28             	sub    esp,0x28
c000f8bc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8c1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f8c6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8cb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8d1:	83 e0 04             	and    eax,0x4
c000f8d4:	0f b6 c0             	movzx  eax,al
c000f8d7:	85 c0                	test   eax,eax
c000f8d9:	74 2d                	je     c000f908 <ACPI::detectPCI()+0x50>
c000f8db:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8e0:	83 ec 08             	sub    esp,0x8
c000f8e3:	68 02 1b 02 c0       	push   0xc0021b02
c000f8e8:	50                   	push   eax
c000f8e9:	e8 6e f8 ff ff       	call   c000f15c <findDataTable(unsigned char*, char*)>
c000f8ee:	83 c4 10             	add    esp,0x10
c000f8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8f5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8fa:	74 0c                	je     c000f908 <ACPI::detectPCI()+0x50>
c000f8fc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f901:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f906:	66 90                	xchg   ax,ax
c000f908:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f910:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f914:	8a 00                	mov    al,BYTE PTR [eax]
c000f916:	0f b6 c0             	movzx  eax,al
c000f919:	83 f8 01             	cmp    eax,0x1
c000f91c:	75 0e                	jne    c000f92c <ACPI::detectPCI()+0x74>
c000f91e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f923:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f928:	eb 2e                	jmp    c000f958 <ACPI::detectPCI()+0xa0>
c000f92a:	66 90                	xchg   ax,ax
c000f92c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f930:	8a 00                	mov    al,BYTE PTR [eax]
c000f932:	0f b6 c0             	movzx  eax,al
c000f935:	83 f8 02             	cmp    eax,0x2
c000f938:	75 1e                	jne    c000f958 <ACPI::detectPCI()+0xa0>
c000f93a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f93f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f944:	85 c0                	test   eax,eax
c000f946:	74 10                	je     c000f958 <ACPI::detectPCI()+0xa0>
c000f948:	83 ec 0c             	sub    esp,0xc
c000f94b:	68 7c 1a 02 c0       	push   0xc0021a7c
c000f950:	e8 94 19 00 00       	call   c00112e9 <KePanic(char const*)>
c000f955:	83 c4 10             	add    esp,0x10
c000f958:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f95c:	83 f0 01             	xor    eax,0x1
c000f95f:	0f b6 c0             	movzx  eax,al
c000f962:	85 c0                	test   eax,eax
c000f964:	74 46                	je     c000f9ac <ACPI::detectPCI()+0xf4>
c000f966:	e8 c5 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f96b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f96f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f974:	75 0e                	jne    c000f984 <ACPI::detectPCI()+0xcc>
c000f976:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f97b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f980:	eb 2a                	jmp    c000f9ac <ACPI::detectPCI()+0xf4>
c000f982:	66 90                	xchg   ax,ax
c000f984:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f989:	75 21                	jne    c000f9ac <ACPI::detectPCI()+0xf4>
c000f98b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f990:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f995:	85 c0                	test   eax,eax
c000f997:	74 13                	je     c000f9ac <ACPI::detectPCI()+0xf4>
c000f999:	83 ec 0c             	sub    esp,0xc
c000f99c:	68 7c 1a 02 c0       	push   0xc0021a7c
c000f9a1:	e8 43 19 00 00       	call   c00112e9 <KePanic(char const*)>
c000f9a6:	83 c4 10             	add    esp,0x10
c000f9a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9ac:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9b1:	85 c0                	test   eax,eax
c000f9b3:	0f 84 87 00 00 00    	je     c000fa40 <ACPI::detectPCI()+0x188>
c000f9b9:	83 ec 0c             	sub    esp,0xc
c000f9bc:	68 07 1b 02 c0       	push   0xc0021b07
c000f9c1:	e8 4f 12 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c000f9c6:	83 c4 10             	add    esp,0x10
c000f9c9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9d1:	83 ec 0c             	sub    esp,0xc
c000f9d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9d8:	e8 f6 80 ff ff       	call   c0007ad3 <malloc>
c000f9dd:	83 c4 10             	add    esp,0x10
c000f9e0:	89 c3                	mov    ebx,eax
c000f9e2:	83 ec 0c             	sub    esp,0xc
c000f9e5:	53                   	push   ebx
c000f9e6:	e8 eb b2 00 00       	call   c001acd6 <PCI::PCI()>
c000f9eb:	83 c4 10             	add    esp,0x10
c000f9ee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9f6:	83 ec 08             	sub    esp,0x8
c000f9f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9fd:	50                   	push   eax
c000f9fe:	e8 49 cd ff ff       	call   c000c74c <Device::addChild(Device*)>
c000fa03:	83 c4 10             	add    esp,0x10
c000fa06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa0c:	83 c0 08             	add    eax,0x8
c000fa0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa11:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fa16:	85 d2                	test   edx,edx
c000fa18:	74 0a                	je     c000fa24 <ACPI::detectPCI()+0x16c>
c000fa1a:	ba 01 00 00 00       	mov    edx,0x1
c000fa1f:	eb 0b                	jmp    c000fa2c <ACPI::detectPCI()+0x174>
c000fa21:	8d 76 00             	lea    esi,[esi+0x0]
c000fa24:	ba 02 00 00 00       	mov    edx,0x2
c000fa29:	8d 76 00             	lea    esi,[esi+0x0]
c000fa2c:	6a 00                	push   0x0
c000fa2e:	6a 00                	push   0x0
c000fa30:	52                   	push   edx
c000fa31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa35:	ff d0                	call   eax
c000fa37:	83 c4 10             	add    esp,0x10
c000fa3a:	e9 91 00 00 00       	jmp    c000fad0 <ACPI::detectPCI()+0x218>
c000fa3f:	90                   	nop
c000fa40:	83 ec 0c             	sub    esp,0xc
c000fa43:	68 1f 1b 02 c0       	push   0xc0021b1f
c000fa48:	e8 c8 11 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c000fa4d:	83 c4 10             	add    esp,0x10
c000fa50:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa57:	83 ec 0c             	sub    esp,0xc
c000fa5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa5e:	e8 70 80 ff ff       	call   c0007ad3 <malloc>
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	89 c3                	mov    ebx,eax
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	53                   	push   ebx
c000fa6c:	e8 0d be 00 00       	call   c001b87e <IDE::IDE()>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa7c:	83 ec 08             	sub    esp,0x8
c000fa7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa83:	50                   	push   eax
c000fa84:	e8 c3 cc ff ff       	call   c000c74c <Device::addChild(Device*)>
c000fa89:	83 c4 10             	add    esp,0x10
c000fa8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa90:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa9e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000faa7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faab:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fab8:	8b 00                	mov    eax,DWORD PTR [eax]
c000faba:	83 c0 08             	add    eax,0x8
c000fabd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fabf:	6a 00                	push   0x0
c000fac1:	6a 00                	push   0x0
c000fac3:	6a 00                	push   0x0
c000fac5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fac9:	ff d0                	call   eax
c000facb:	83 c4 10             	add    esp,0x10
c000face:	66 90                	xchg   ax,ax
c000fad0:	90                   	nop
c000fad1:	83 c4 28             	add    esp,0x28
c000fad4:	5b                   	pop    ebx
c000fad5:	c3                   	ret    
c000fad6:	66 90                	xchg   ax,ax

c000fad8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fad8:	83 ec 1c             	sub    esp,0x1c
c000fadb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fadf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fae2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fae6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000faeb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000faf0:	83 ec 08             	sub    esp,0x8
c000faf3:	52                   	push   edx
c000faf4:	50                   	push   eax
c000faf5:	e8 a0 76 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fafa:	83 c4 10             	add    esp,0x10
c000fafd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fb01:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb06:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb0b:	83 ec 04             	sub    esp,0x4
c000fb0e:	6a 01                	push   0x1
c000fb10:	52                   	push   edx
c000fb11:	50                   	push   eax
c000fb12:	e8 9b 77 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fb17:	83 c4 10             	add    esp,0x10
c000fb1a:	90                   	nop
c000fb1b:	83 c4 1c             	add    esp,0x1c
c000fb1e:	c3                   	ret    
c000fb1f:	90                   	nop

c000fb20 <ACPI::sleep()>:
c000fb20:	83 ec 0c             	sub    esp,0xc
c000fb23:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb28:	85 c0                	test   eax,eax
c000fb2a:	74 08                	je     c000fb34 <ACPI::sleep()+0x14>
c000fb2c:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb31:	ff d0                	call   eax
c000fb33:	90                   	nop
c000fb34:	90                   	nop
c000fb35:	83 c4 0c             	add    esp,0xc
c000fb38:	c3                   	ret    
c000fb39:	90                   	nop
c000fb3a:	66 90                	xchg   ax,ax

c000fb3c <ACPI::open(int, int, void*)>:
c000fb3c:	55                   	push   ebp
c000fb3d:	89 e5                	mov    ebp,esp
c000fb3f:	53                   	push   ebx
c000fb40:	81 ec 74 01 00 00    	sub    esp,0x174
c000fb46:	83 ec 0c             	sub    esp,0xc
c000fb49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb4c:	e8 67 fd ff ff       	call   c000f8b8 <ACPI::detectPCI()>
c000fb51:	83 c4 10             	add    esp,0x10
c000fb54:	83 ec 0c             	sub    esp,0xc
c000fb57:	68 a4 1a 02 c0       	push   0xc0021aa4
c000fb5c:	e8 b4 10 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c000fb61:	83 c4 10             	add    esp,0x10
c000fb64:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb69:	8a 00                	mov    al,BYTE PTR [eax]
c000fb6b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fb6e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb72:	83 f8 01             	cmp    eax,0x1
c000fb75:	75 15                	jne    c000fb8c <ACPI::open(int, int, void*)+0x50>
c000fb77:	83 ec 0c             	sub    esp,0xc
c000fb7a:	68 d1 13 02 c0       	push   0xc00213d1
c000fb7f:	e8 76 4b 00 00       	call   c00146fa <Thr::loadKernelSymbolTable(char const*)>
c000fb84:	83 c4 10             	add    esp,0x10
c000fb87:	eb 33                	jmp    c000fbbc <ACPI::open(int, int, void*)+0x80>
c000fb89:	8d 76 00             	lea    esi,[esi+0x0]
c000fb8c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fb90:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb95:	75 15                	jne    c000fbac <ACPI::open(int, int, void*)+0x70>
c000fb97:	83 ec 0c             	sub    esp,0xc
c000fb9a:	68 34 1b 02 c0       	push   0xc0021b34
c000fb9f:	e8 56 4b 00 00       	call   c00146fa <Thr::loadKernelSymbolTable(char const*)>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	eb 13                	jmp    c000fbbc <ACPI::open(int, int, void*)+0x80>
c000fba9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbac:	83 ec 0c             	sub    esp,0xc
c000fbaf:	68 52 1b 02 c0       	push   0xc0021b52
c000fbb4:	e8 30 17 00 00       	call   c00112e9 <KePanic(char const*)>
c000fbb9:	83 c4 10             	add    esp,0x10
c000fbbc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fbc0:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fbc7:	83 ec 0c             	sub    esp,0xc
c000fbca:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fbcd:	e8 01 7f ff ff       	call   c0007ad3 <malloc>
c000fbd2:	83 c4 10             	add    esp,0x10
c000fbd5:	89 c3                	mov    ebx,eax
c000fbd7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbdc:	83 ec 04             	sub    esp,0x4
c000fbdf:	50                   	push   eax
c000fbe0:	68 6c 1b 02 c0       	push   0xc0021b6c
c000fbe5:	53                   	push   ebx
c000fbe6:	e8 37 bc ff ff       	call   c000b822 <File::File(char const*, Process*)>
c000fbeb:	83 c4 10             	add    esp,0x10
c000fbee:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fbf1:	83 ec 08             	sub    esp,0x8
c000fbf4:	6a 01                	push   0x1
c000fbf6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbf9:	e8 ec bc ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fc04:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fc08:	75 12                	jne    c000fc1c <ACPI::open(int, int, void*)+0xe0>
c000fc0a:	83 ec 0c             	sub    esp,0xc
c000fc0d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc10:	e8 33 bd ff ff       	call   c000b948 <File::close()>
c000fc15:	83 c4 10             	add    esp,0x10
c000fc18:	eb 06                	jmp    c000fc20 <ACPI::open(int, int, void*)+0xe4>
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc20:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fc24:	74 16                	je     c000fc3c <ACPI::open(int, int, void*)+0x100>
c000fc26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc29:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc2b:	83 c0 08             	add    eax,0x8
c000fc2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc30:	83 ec 0c             	sub    esp,0xc
c000fc33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc36:	ff d0                	call   eax
c000fc38:	83 c4 10             	add    esp,0x10
c000fc3b:	90                   	nop
c000fc3c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fc3f:	83 f0 01             	xor    eax,0x1
c000fc42:	0f b6 c0             	movzx  eax,al
c000fc45:	85 c0                	test   eax,eax
c000fc47:	74 3b                	je     c000fc84 <ACPI::open(int, int, void*)+0x148>
c000fc49:	83 ec 0c             	sub    esp,0xc
c000fc4c:	68 8a 1b 02 c0       	push   0xc0021b8a
c000fc51:	e8 bf 0f 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	83 ec 04             	sub    esp,0x4
c000fc5c:	6a 0c                	push   0xc
c000fc5e:	68 a5 1b 02 c0       	push   0xc0021ba5
c000fc63:	68 b6 1b 02 c0       	push   0xc0021bb6
c000fc68:	e8 39 3d 00 00       	call   c00139a6 <Reg::readIntWithDefault(char*, char*, int)>
c000fc6d:	83 c4 10             	add    esp,0x10
c000fc70:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fc73:	83 ec 0c             	sub    esp,0xc
c000fc76:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fc79:	e8 9c 9b ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fc7e:	83 c4 10             	add    esp,0x10
c000fc81:	8d 76 00             	lea    esi,[esi+0x0]
c000fc84:	83 ec 0c             	sub    esp,0xc
c000fc87:	68 95 06 02 c0       	push   0xc0020695
c000fc8c:	e8 84 0f 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c000fc91:	83 c4 10             	add    esp,0x10
c000fc94:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc97:	83 ec 08             	sub    esp,0x8
c000fc9a:	6a 13                	push   0x13
c000fc9c:	50                   	push   eax
c000fc9d:	e8 c2 cd ff ff       	call   c000ca64 <getDevicesOfType(DeviceType)>
c000fca2:	83 c4 0c             	add    esp,0xc
c000fca5:	8d 76 00             	lea    esi,[esi+0x0]
c000fca8:	83 ec 0c             	sub    esp,0xc
c000fcab:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcae:	50                   	push   eax
c000fcaf:	e8 cc fd 00 00       	call   c001fa80 <LinkedList<Device>::isEmpty()>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	83 f0 01             	xor    eax,0x1
c000fcba:	0f b6 c0             	movzx  eax,al
c000fcbd:	85 c0                	test   eax,eax
c000fcbf:	0f 84 1f 01 00 00    	je     c000fde4 <ACPI::open(int, int, void*)+0x2a8>
c000fcc5:	83 ec 0c             	sub    esp,0xc
c000fcc8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fccb:	50                   	push   eax
c000fccc:	e8 cb fd 00 00       	call   c001fa9c <LinkedList<Device>::getFirstElement()>
c000fcd1:	83 c4 10             	add    esp,0x10
c000fcd4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fcd7:	83 ec 0c             	sub    esp,0xc
c000fcda:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fcdd:	50                   	push   eax
c000fcde:	e8 c1 fd 00 00       	call   c001faa4 <LinkedList<Device>::removeFirst()>
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fce9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fcec:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fcef:	b8 24 00 00 00       	mov    eax,0x24
c000fcf4:	83 e0 fc             	and    eax,0xfffffffc
c000fcf7:	89 c3                	mov    ebx,eax
c000fcf9:	b8 00 00 00 00       	mov    eax,0x0
c000fcfe:	66 90                	xchg   ax,ax
c000fd00:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fd07:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fd0e:	83 c0 04             	add    eax,0x4
c000fd11:	39 d8                	cmp    eax,ebx
c000fd13:	72 eb                	jb     c000fd00 <ACPI::open(int, int, void*)+0x1c4>
c000fd15:	83 ec 08             	sub    esp,0x8
c000fd18:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fd1e:	50                   	push   eax
c000fd1f:	83 ec 24             	sub    esp,0x24
c000fd22:	89 e1                	mov    ecx,esp
c000fd24:	b8 24 00 00 00       	mov    eax,0x24
c000fd29:	83 e0 fc             	and    eax,0xfffffffc
c000fd2c:	89 c3                	mov    ebx,eax
c000fd2e:	b8 00 00 00 00       	mov    eax,0x0
c000fd33:	90                   	nop
c000fd34:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fd3b:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fd3e:	83 c0 04             	add    eax,0x4
c000fd41:	39 d8                	cmp    eax,ebx
c000fd43:	72 ef                	jb     c000fd34 <ACPI::open(int, int, void*)+0x1f8>
c000fd45:	e8 74 b4 00 00       	call   c001b1be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd4a:	83 c4 30             	add    esp,0x30
c000fd4d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fd50:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fd54:	0f 84 4e ff ff ff    	je     c000fca8 <ACPI::open(int, int, void*)+0x16c>
c000fd5a:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fd61:	83 ec 0c             	sub    esp,0xc
c000fd64:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fd67:	e8 67 7d ff ff       	call   c0007ad3 <malloc>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	89 c3                	mov    ebx,eax
c000fd71:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd76:	83 ec 04             	sub    esp,0x4
c000fd79:	50                   	push   eax
c000fd7a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd7d:	53                   	push   ebx
c000fd7e:	e8 9f ba ff ff       	call   c000b822 <File::File(char const*, Process*)>
c000fd83:	83 c4 10             	add    esp,0x10
c000fd86:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd8f:	e8 1a be ff ff       	call   c000bbae <File::exists()>
c000fd94:	83 c4 10             	add    esp,0x10
c000fd97:	0f b6 c0             	movzx  eax,al
c000fd9a:	85 c0                	test   eax,eax
c000fd9c:	74 22                	je     c000fdc0 <ACPI::open(int, int, void*)+0x284>
c000fd9e:	83 ec 08             	sub    esp,0x8
c000fda1:	6a 01                	push   0x1
c000fda3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fda6:	e8 d1 53 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	83 ec 08             	sub    esp,0x8
c000fdb1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fdb4:	50                   	push   eax
c000fdb5:	e8 02 56 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdc0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fdc4:	0f 84 de fe ff ff    	je     c000fca8 <ACPI::open(int, int, void*)+0x16c>
c000fdca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fdcd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdcf:	83 c0 08             	add    eax,0x8
c000fdd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdd4:	83 ec 0c             	sub    esp,0xc
c000fdd7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fdda:	ff d0                	call   eax
c000fddc:	83 c4 10             	add    esp,0x10
c000fddf:	e9 c4 fe ff ff       	jmp    c000fca8 <ACPI::open(int, int, void*)+0x16c>
c000fde4:	83 ec 0c             	sub    esp,0xc
c000fde7:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fdea:	50                   	push   eax
c000fdeb:	e8 8c fc 00 00       	call   c001fa7c <LinkedList<Device>::~LinkedList()>
c000fdf0:	83 c4 10             	add    esp,0x10
c000fdf3:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fdf9:	83 ec 08             	sub    esp,0x8
c000fdfc:	6a 01                	push   0x1
c000fdfe:	68 bd 1b 02 c0       	push   0xc0021bbd
c000fe03:	e8 74 53 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c000fe08:	83 c4 10             	add    esp,0x10
c000fe0b:	83 ec 08             	sub    esp,0x8
c000fe0e:	53                   	push   ebx
c000fe0f:	50                   	push   eax
c000fe10:	e8 a7 55 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c000fe15:	83 c4 10             	add    esp,0x10
c000fe18:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe1d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe23:	83 e0 04             	and    eax,0x4
c000fe26:	0f b6 c0             	movzx  eax,al
c000fe29:	85 c0                	test   eax,eax
c000fe2b:	0f 84 e3 00 00 00    	je     c000ff14 <ACPI::open(int, int, void*)+0x3d8>
c000fe31:	83 ec 0c             	sub    esp,0xc
c000fe34:	68 da 1b 02 c0       	push   0xc0021bda
c000fe39:	e8 d7 0d 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c000fe3e:	83 c4 10             	add    esp,0x10
c000fe41:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fe4e:	e8 80 7c ff ff       	call   c0007ad3 <malloc>
c000fe53:	83 c4 10             	add    esp,0x10
c000fe56:	89 c3                	mov    ebx,eax
c000fe58:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe5d:	83 ec 04             	sub    esp,0x4
c000fe60:	50                   	push   eax
c000fe61:	68 f7 1b 02 c0       	push   0xc0021bf7
c000fe66:	53                   	push   ebx
c000fe67:	e8 b6 b9 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c000fe6c:	83 c4 10             	add    esp,0x10
c000fe6f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fe72:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe76:	74 1c                	je     c000fe94 <ACPI::open(int, int, void*)+0x358>
c000fe78:	83 ec 0c             	sub    esp,0xc
c000fe7b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe7e:	e8 2b bd ff ff       	call   c000bbae <File::exists()>
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	0f b6 c0             	movzx  eax,al
c000fe89:	85 c0                	test   eax,eax
c000fe8b:	74 07                	je     c000fe94 <ACPI::open(int, int, void*)+0x358>
c000fe8d:	b0 01                	mov    al,0x1
c000fe8f:	eb 07                	jmp    c000fe98 <ACPI::open(int, int, void*)+0x35c>
c000fe91:	8d 76 00             	lea    esi,[esi+0x0]
c000fe94:	b0 00                	mov    al,0x0
c000fe96:	66 90                	xchg   ax,ax
c000fe98:	0f b6 c0             	movzx  eax,al
c000fe9b:	85 c0                	test   eax,eax
c000fe9d:	74 21                	je     c000fec0 <ACPI::open(int, int, void*)+0x384>
c000fe9f:	83 ec 08             	sub    esp,0x8
c000fea2:	6a 01                	push   0x1
c000fea4:	68 f7 1b 02 c0       	push   0xc0021bf7
c000fea9:	e8 ce 52 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	83 ec 08             	sub    esp,0x8
c000feb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000feb7:	50                   	push   eax
c000feb8:	e8 ff 54 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fec4:	74 1e                	je     c000fee4 <ACPI::open(int, int, void*)+0x3a8>
c000fec6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000feca:	74 18                	je     c000fee4 <ACPI::open(int, int, void*)+0x3a8>
c000fecc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fecf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fed1:	83 c0 08             	add    eax,0x8
c000fed4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fed6:	83 ec 0c             	sub    esp,0xc
c000fed9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fedc:	ff d0                	call   eax
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	8d 76 00             	lea    esi,[esi+0x0]
c000fee4:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fee9:	83 ec 08             	sub    esp,0x8
c000feec:	68 14 1c 02 c0       	push   0xc0021c14
c000fef1:	50                   	push   eax
c000fef2:	e8 65 f2 ff ff       	call   c000f15c <findDataTable(unsigned char*, char*)>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fefd:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000ff01:	74 11                	je     c000ff14 <ACPI::open(int, int, void*)+0x3d8>
c000ff03:	83 ec 08             	sub    esp,0x8
c000ff06:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000ff09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ff0c:	e8 c7 fb ff ff       	call   c000fad8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	b8 00 00 00 00       	mov    eax,0x0
c000ff19:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff1c:	c9                   	leave  
c000ff1d:	c3                   	ret    

c000ff1e <CPU::close(int, int, void*)>:
c000ff1e:	31 c0                	xor    eax,eax
c000ff20:	c3                   	ret    
c000ff21:	90                   	nop

c000ff22 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ff22:	60                   	pusha  
c000ff23:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff2f:	9c                   	pushf  
c000ff30:	fa                   	cli    
c000ff31:	0f 09                	wbinvd 
c000ff33:	0f 30                	wrmsr  
c000ff35:	9d                   	popf   
c000ff36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff3a:	89 02                	mov    DWORD PTR [edx],eax
c000ff3c:	61                   	popa   
c000ff3d:	c3                   	ret    

c000ff3e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ff3e:	60                   	pusha  
c000ff3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff43:	9c                   	pushf  
c000ff44:	fa                   	cli    
c000ff45:	0f 09                	wbinvd 
c000ff47:	31 c0                	xor    eax,eax
c000ff49:	31 d2                	xor    edx,edx
c000ff4b:	0f 32                	rdmsr  
c000ff4d:	9d                   	popf   
c000ff4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff52:	89 02                	mov    DWORD PTR [edx],eax
c000ff54:	61                   	popa   
c000ff55:	c3                   	ret    

c000ff56 <CPU::AMD_K6_writeback(int, int, int)>:
c000ff56:	56                   	push   esi
c000ff57:	53                   	push   ebx
c000ff58:	83 ec 10             	sub    esp,0x10
c000ff5b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff64:	75 5d                	jne    c000ffc3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff66:	83 f8 08             	cmp    eax,0x8
c000ff69:	75 09                	jne    c000ff74 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff6b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff70:	7e 13                	jle    c000ff85 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff72:	eb 30                	jmp    c000ffa4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff74:	83 f8 06             	cmp    eax,0x6
c000ff77:	7c 4a                	jl     c000ffc3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff79:	83 f8 07             	cmp    eax,0x7
c000ff7c:	7e 07                	jle    c000ff85 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff7e:	83 f8 09             	cmp    eax,0x9
c000ff81:	74 21                	je     c000ffa4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff83:	eb 3e                	jmp    c000ffc3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff85:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff8b:	89 e6                	mov    esi,esp
c000ff8d:	56                   	push   esi
c000ff8e:	68 82 00 00 c0       	push   0xc0000082
c000ff93:	e8 a6 ff ff ff       	call   c000ff3e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff98:	c1 eb 15             	shr    ebx,0x15
c000ff9b:	56                   	push   esi
c000ff9c:	83 e3 7e             	and    ebx,0x7e
c000ff9f:	6a 00                	push   0x0
c000ffa1:	53                   	push   ebx
c000ffa2:	eb 12                	jmp    c000ffb6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ffa4:	89 e3                	mov    ebx,esp
c000ffa6:	53                   	push   ebx
c000ffa7:	68 82 00 00 c0       	push   0xc0000082
c000ffac:	e8 8d ff ff ff       	call   c000ff3e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ffb1:	53                   	push   ebx
c000ffb2:	6a 00                	push   0x0
c000ffb4:	6a 00                	push   0x0
c000ffb6:	68 82 00 00 c0       	push   0xc0000082
c000ffbb:	e8 62 ff ff ff       	call   c000ff22 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ffc0:	83 c4 18             	add    esp,0x18
c000ffc3:	83 c4 10             	add    esp,0x10
c000ffc6:	5b                   	pop    ebx
c000ffc7:	5e                   	pop    esi
c000ffc8:	c3                   	ret    
c000ffc9:	90                   	nop

c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ffca:	55                   	push   ebp
c000ffcb:	57                   	push   edi
c000ffcc:	56                   	push   esi
c000ffcd:	53                   	push   ebx
c000ffce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffd2:	39 05 d8 31 02 c0    	cmp    DWORD PTR ds:0xc00231d8,eax
c000ffd8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ffdc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ffe0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ffe4:	75 23                	jne    c0010009 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ffe6:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ffeb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffef:	89 06                	mov    DWORD PTR [esi],eax
c000fff1:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000fff6:	89 07                	mov    DWORD PTR [edi],eax
c000fff8:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000fffd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010000:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c0010005:	89 02                	mov    DWORD PTR [edx],eax
c0010007:	eb 3f                	jmp    c0010048 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010009:	31 c9                	xor    ecx,ecx
c001000b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001000f:	0f a2                	cpuid  
c0010011:	89 06                	mov    DWORD PTR [esi],eax
c0010013:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010017:	89 1f                	mov    DWORD PTR [edi],ebx
c0010019:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001001c:	89 10                	mov    DWORD PTR [eax],edx
c001001e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010022:	a3 d8 31 02 c0       	mov    ds:0xc00231d8,eax
c0010027:	8b 06                	mov    eax,DWORD PTR [esi]
c0010029:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c001002e:	8b 07                	mov    eax,DWORD PTR [edi]
c0010030:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c0010035:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010038:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c001003d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010041:	8b 00                	mov    eax,DWORD PTR [eax]
c0010043:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c0010048:	5b                   	pop    ebx
c0010049:	5e                   	pop    esi
c001004a:	5f                   	pop    edi
c001004b:	5d                   	pop    ebp
c001004c:	c3                   	ret    
c001004d:	90                   	nop

c001004e <CPU::cpuidCheckEDX(unsigned int)>:
c001004e:	83 ec 10             	sub    esp,0x10
c0010051:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010055:	50                   	push   eax
c0010056:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005a:	50                   	push   eax
c001005b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005f:	50                   	push   eax
c0010060:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010064:	50                   	push   eax
c0010065:	6a 01                	push   0x1
c0010067:	e8 5e ff ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001006c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010070:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010074:	0f 95 c0             	setne  al
c0010077:	83 c4 24             	add    esp,0x24
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <CPU::cpuidCheckECX(unsigned int)>:
c001007c:	83 ec 10             	sub    esp,0x10
c001007f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010083:	50                   	push   eax
c0010084:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010088:	50                   	push   eax
c0010089:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001008d:	50                   	push   eax
c001008e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010092:	50                   	push   eax
c0010093:	6a 01                	push   0x1
c0010095:	e8 30 ff ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001009a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001009e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100a2:	0f 95 c0             	setne  al
c00100a5:	83 c4 24             	add    esp,0x24
c00100a8:	c3                   	ret    
c00100a9:	90                   	nop

c00100aa <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00100aa:	83 ec 10             	sub    esp,0x10
c00100ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b1:	50                   	push   eax
c00100b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b6:	50                   	push   eax
c00100b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100bb:	50                   	push   eax
c00100bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c0:	50                   	push   eax
c00100c1:	6a 07                	push   0x7
c00100c3:	e8 02 ff ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100cc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00100d0:	0f 95 c0             	setne  al
c00100d3:	83 c4 24             	add    esp,0x24
c00100d6:	c3                   	ret    
c00100d7:	90                   	nop

c00100d8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00100d8:	83 ec 10             	sub    esp,0x10
c00100db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100df:	50                   	push   eax
c00100e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e4:	50                   	push   eax
c00100e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e9:	50                   	push   eax
c00100ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ee:	50                   	push   eax
c00100ef:	6a 07                	push   0x7
c00100f1:	e8 d4 fe ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100fa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100fe:	0f 95 c0             	setne  al
c0010101:	83 c4 24             	add    esp,0x24
c0010104:	c3                   	ret    
c0010105:	90                   	nop

c0010106 <CPU::CPU()>:
c0010106:	83 ec 0c             	sub    esp,0xc
c0010109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010d:	83 ec 08             	sub    esp,0x8
c0010110:	68 39 1d 02 c0       	push   0xc0021d39
c0010115:	50                   	push   eax
c0010116:	e8 c9 c7 ff ff       	call   c000c8e4 <Device::Device(char const*)>
c001011b:	83 c4 10             	add    esp,0x10
c001011e:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c0010123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010127:	89 10                	mov    DWORD PTR [eax],edx
c0010129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013b:	05 78 01 00 00       	add    eax,0x178
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	50                   	push   eax
c0010144:	e8 33 72 ff ff       	call   c000737c <GDT::GDT()>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010150:	05 7c 09 00 00       	add    eax,0x97c
c0010155:	83 ec 0c             	sub    esp,0xc
c0010158:	50                   	push   eax
c0010159:	e8 6e 74 ff ff       	call   c00075cc <IDT::IDT()>
c001015e:	83 c4 10             	add    esp,0x10
c0010161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010165:	05 7c 11 00 00       	add    eax,0x117c
c001016a:	83 ec 0c             	sub    esp,0xc
c001016d:	50                   	push   eax
c001016e:	e8 b9 8d ff ff       	call   c0008f2c <TSS::TSS()>
c0010173:	83 c4 10             	add    esp,0x10
c0010176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001017a:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010185:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001018f:	90                   	nop
c0010190:	83 c4 0c             	add    esp,0xc
c0010193:	c3                   	ret    

c0010194 <CPU::displayFeatures()>:
c0010194:	c3                   	ret    
c0010195:	90                   	nop

c0010196 <CPU::detectFeatures()>:
c0010196:	55                   	push   ebp
c0010197:	57                   	push   edi
c0010198:	56                   	push   esi
c0010199:	53                   	push   ebx
c001019a:	83 ec 30             	sub    esp,0x30
c001019d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101a1:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00101ab:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00101b1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00101b8:	6a 0d                	push   0xd
c00101ba:	6a 00                	push   0x0
c00101bc:	55                   	push   ebp
c00101bd:	e8 2e 03 ff ff       	call   c00004f0 <memset>
c00101c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00101c7:	83 c4 10             	add    esp,0x10
c00101ca:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00101d1:	0f 84 db 05 00 00    	je     c00107b2 <CPU::detectFeatures()+0x61c>
c00101d7:	83 ec 0c             	sub    esp,0xc
c00101da:	89 ef                	mov    edi,ebp
c00101dc:	6a 10                	push   0x10
c00101de:	e8 6b fe ff ff       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c00101e3:	83 e0 01             	and    eax,0x1
c00101e6:	8d 14 00             	lea    edx,[eax+eax*1]
c00101e9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101ef:	83 e0 fd             	and    eax,0xfffffffd
c00101f2:	09 d0                	or     eax,edx
c00101f4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101fa:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010201:	e8 48 fe ff ff       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c0010206:	83 e0 01             	and    eax,0x1
c0010209:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010210:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010216:	83 e0 fb             	and    eax,0xfffffffb
c0010219:	09 d0                	or     eax,edx
c001021b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010221:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010228:	e8 21 fe ff ff       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c001022d:	83 e0 01             	and    eax,0x1
c0010230:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010237:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001023d:	83 e0 f7             	and    eax,0xfffffff7
c0010240:	09 d0                	or     eax,edx
c0010242:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010248:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001024f:	e8 fa fd ff ff       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c0010254:	83 e0 01             	and    eax,0x1
c0010257:	c1 e0 04             	shl    eax,0x4
c001025a:	89 c2                	mov    edx,eax
c001025c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010262:	83 e0 ef             	and    eax,0xffffffef
c0010265:	09 d0                	or     eax,edx
c0010267:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001026d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010274:	e8 d5 fd ff ff       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c0010279:	83 e0 01             	and    eax,0x1
c001027c:	c1 e0 05             	shl    eax,0x5
c001027f:	89 c2                	mov    edx,eax
c0010281:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010287:	83 e0 df             	and    eax,0xffffffdf
c001028a:	09 d0                	or     eax,edx
c001028c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010292:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010299:	e8 b0 fd ff ff       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c001029e:	83 e0 01             	and    eax,0x1
c00102a1:	8d 14 00             	lea    edx,[eax+eax*1]
c00102a4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00102aa:	83 e0 fd             	and    eax,0xfffffffd
c00102ad:	09 d0                	or     eax,edx
c00102af:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00102b5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00102bc:	e8 8d fd ff ff       	call   c001004e <CPU::cpuidCheckEDX(unsigned int)>
c00102c1:	83 e0 01             	and    eax,0x1
c00102c4:	c1 e0 06             	shl    eax,0x6
c00102c7:	89 c2                	mov    edx,eax
c00102c9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00102cf:	83 e0 bf             	and    eax,0xffffffbf
c00102d2:	09 d0                	or     eax,edx
c00102d4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00102da:	58                   	pop    eax
c00102db:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102df:	50                   	push   eax
c00102e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102e4:	50                   	push   eax
c00102e5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00102e9:	56                   	push   esi
c00102ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102ee:	50                   	push   eax
c00102ef:	6a 00                	push   0x0
c00102f1:	e8 d4 fc ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102f6:	b8 04 00 00 00       	mov    eax,0x4
c00102fb:	89 c1                	mov    ecx,eax
c00102fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102ff:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010305:	89 c1                	mov    ecx,eax
c0010307:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001030b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001030d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010313:	89 c1                	mov    ecx,eax
c0010315:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010319:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001031b:	83 c4 18             	add    esp,0x18
c001031e:	68 48 1c 02 c0       	push   0xc0021c48
c0010323:	55                   	push   ebp
c0010324:	e8 57 04 ff ff       	call   c0000780 <strcmp>
c0010329:	83 c4 10             	add    esp,0x10
c001032c:	85 c0                	test   eax,eax
c001032e:	75 0f                	jne    c001033f <CPU::detectFeatures()+0x1a9>
c0010330:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001033a:	e9 22 02 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c001033f:	50                   	push   eax
c0010340:	50                   	push   eax
c0010341:	68 55 1c 02 c0       	push   0xc0021c55
c0010346:	55                   	push   ebp
c0010347:	e8 34 04 ff ff       	call   c0000780 <strcmp>
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	85 c0                	test   eax,eax
c0010351:	74 dd                	je     c0010330 <CPU::detectFeatures()+0x19a>
c0010353:	50                   	push   eax
c0010354:	50                   	push   eax
c0010355:	68 62 1c 02 c0       	push   0xc0021c62
c001035a:	55                   	push   ebp
c001035b:	e8 20 04 ff ff       	call   c0000780 <strcmp>
c0010360:	83 c4 10             	add    esp,0x10
c0010363:	85 c0                	test   eax,eax
c0010365:	74 2a                	je     c0010391 <CPU::detectFeatures()+0x1fb>
c0010367:	50                   	push   eax
c0010368:	50                   	push   eax
c0010369:	68 6f 1c 02 c0       	push   0xc0021c6f
c001036e:	55                   	push   ebp
c001036f:	e8 0c 04 ff ff       	call   c0000780 <strcmp>
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	85 c0                	test   eax,eax
c0010379:	74 16                	je     c0010391 <CPU::detectFeatures()+0x1fb>
c001037b:	50                   	push   eax
c001037c:	50                   	push   eax
c001037d:	68 7c 1c 02 c0       	push   0xc0021c7c
c0010382:	55                   	push   ebp
c0010383:	e8 f8 03 ff ff       	call   c0000780 <strcmp>
c0010388:	83 c4 10             	add    esp,0x10
c001038b:	85 c0                	test   eax,eax
c001038d:	74 48                	je     c00103d7 <CPU::detectFeatures()+0x241>
c001038f:	eb 0f                	jmp    c00103a0 <CPU::detectFeatures()+0x20a>
c0010391:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001039b:	e9 c1 01 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c00103a0:	50                   	push   eax
c00103a1:	50                   	push   eax
c00103a2:	68 89 1c 02 c0       	push   0xc0021c89
c00103a7:	55                   	push   ebp
c00103a8:	e8 d3 03 ff ff       	call   c0000780 <strcmp>
c00103ad:	83 c4 10             	add    esp,0x10
c00103b0:	85 c0                	test   eax,eax
c00103b2:	74 23                	je     c00103d7 <CPU::detectFeatures()+0x241>
c00103b4:	57                   	push   edi
c00103b5:	57                   	push   edi
c00103b6:	68 96 1c 02 c0       	push   0xc0021c96
c00103bb:	55                   	push   ebp
c00103bc:	e8 bf 03 ff ff       	call   c0000780 <strcmp>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	85 c0                	test   eax,eax
c00103c6:	75 1e                	jne    c00103e6 <CPU::detectFeatures()+0x250>
c00103c8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00103d2:	e9 8a 01 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c00103d7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00103e1:	e9 7b 01 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c00103e6:	56                   	push   esi
c00103e7:	56                   	push   esi
c00103e8:	68 a3 1c 02 c0       	push   0xc0021ca3
c00103ed:	55                   	push   ebp
c00103ee:	e8 8d 03 ff ff       	call   c0000780 <strcmp>
c00103f3:	83 c4 10             	add    esp,0x10
c00103f6:	85 c0                	test   eax,eax
c00103f8:	75 0f                	jne    c0010409 <CPU::detectFeatures()+0x273>
c00103fa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010404:	e9 58 01 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c0010409:	51                   	push   ecx
c001040a:	51                   	push   ecx
c001040b:	68 62 1c 02 c0       	push   0xc0021c62
c0010410:	55                   	push   ebp
c0010411:	e8 6a 03 ff ff       	call   c0000780 <strcmp>
c0010416:	83 c4 10             	add    esp,0x10
c0010419:	85 c0                	test   eax,eax
c001041b:	75 0f                	jne    c001042c <CPU::detectFeatures()+0x296>
c001041d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010427:	e9 35 01 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c001042c:	52                   	push   edx
c001042d:	52                   	push   edx
c001042e:	68 b0 1c 02 c0       	push   0xc0021cb0
c0010433:	55                   	push   ebp
c0010434:	e8 47 03 ff ff       	call   c0000780 <strcmp>
c0010439:	83 c4 10             	add    esp,0x10
c001043c:	85 c0                	test   eax,eax
c001043e:	75 0f                	jne    c001044f <CPU::detectFeatures()+0x2b9>
c0010440:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001044a:	e9 12 01 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c001044f:	50                   	push   eax
c0010450:	50                   	push   eax
c0010451:	68 bd 1c 02 c0       	push   0xc0021cbd
c0010456:	55                   	push   ebp
c0010457:	e8 24 03 ff ff       	call   c0000780 <strcmp>
c001045c:	83 c4 10             	add    esp,0x10
c001045f:	85 c0                	test   eax,eax
c0010461:	75 0f                	jne    c0010472 <CPU::detectFeatures()+0x2dc>
c0010463:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001046d:	e9 ef 00 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c0010472:	50                   	push   eax
c0010473:	50                   	push   eax
c0010474:	68 ca 1c 02 c0       	push   0xc0021cca
c0010479:	55                   	push   ebp
c001047a:	e8 01 03 ff ff       	call   c0000780 <strcmp>
c001047f:	83 c4 10             	add    esp,0x10
c0010482:	85 c0                	test   eax,eax
c0010484:	75 0f                	jne    c0010495 <CPU::detectFeatures()+0x2ff>
c0010486:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010490:	e9 cc 00 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c0010495:	50                   	push   eax
c0010496:	50                   	push   eax
c0010497:	68 d7 1c 02 c0       	push   0xc0021cd7
c001049c:	55                   	push   ebp
c001049d:	e8 de 02 ff ff       	call   c0000780 <strcmp>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	85 c0                	test   eax,eax
c00104a7:	75 0f                	jne    c00104b8 <CPU::detectFeatures()+0x322>
c00104a9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00104b3:	e9 a9 00 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c00104b8:	50                   	push   eax
c00104b9:	50                   	push   eax
c00104ba:	68 e4 1c 02 c0       	push   0xc0021ce4
c00104bf:	55                   	push   ebp
c00104c0:	e8 bb 02 ff ff       	call   c0000780 <strcmp>
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	85 c0                	test   eax,eax
c00104ca:	75 0f                	jne    c00104db <CPU::detectFeatures()+0x345>
c00104cc:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00104d6:	e9 86 00 00 00       	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c00104db:	50                   	push   eax
c00104dc:	50                   	push   eax
c00104dd:	68 f1 1c 02 c0       	push   0xc0021cf1
c00104e2:	55                   	push   ebp
c00104e3:	e8 98 02 ff ff       	call   c0000780 <strcmp>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	85 c0                	test   eax,eax
c00104ed:	75 0c                	jne    c00104fb <CPU::detectFeatures()+0x365>
c00104ef:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00104f9:	eb 66                	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c00104fb:	50                   	push   eax
c00104fc:	50                   	push   eax
c00104fd:	68 fe 1c 02 c0       	push   0xc0021cfe
c0010502:	55                   	push   ebp
c0010503:	e8 78 02 ff ff       	call   c0000780 <strcmp>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	85 c0                	test   eax,eax
c001050d:	75 0c                	jne    c001051b <CPU::detectFeatures()+0x385>
c001050f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010519:	eb 46                	jmp    c0010561 <CPU::detectFeatures()+0x3cb>
c001051b:	57                   	push   edi
c001051c:	57                   	push   edi
c001051d:	68 0b 1d 02 c0       	push   0xc0021d0b
c0010522:	55                   	push   ebp
c0010523:	e8 58 02 ff ff       	call   c0000780 <strcmp>
c0010528:	83 c4 10             	add    esp,0x10
c001052b:	85 c0                	test   eax,eax
c001052d:	74 e0                	je     c001050f <CPU::detectFeatures()+0x379>
c001052f:	56                   	push   esi
c0010530:	56                   	push   esi
c0010531:	68 18 1d 02 c0       	push   0xc0021d18
c0010536:	55                   	push   ebp
c0010537:	e8 44 02 ff ff       	call   c0000780 <strcmp>
c001053c:	83 c4 10             	add    esp,0x10
c001053f:	85 c0                	test   eax,eax
c0010541:	74 cc                	je     c001050f <CPU::detectFeatures()+0x379>
c0010543:	51                   	push   ecx
c0010544:	51                   	push   ecx
c0010545:	68 25 1d 02 c0       	push   0xc0021d25
c001054a:	55                   	push   ebp
c001054b:	e8 30 02 ff ff       	call   c0000780 <strcmp>
c0010550:	83 c4 10             	add    esp,0x10
c0010553:	85 c0                	test   eax,eax
c0010555:	74 b8                	je     c001050f <CPU::detectFeatures()+0x379>
c0010557:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010561:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010566:	0f 86 be 00 00 00    	jbe    c001062a <CPU::detectFeatures()+0x494>
c001056c:	83 ec 0c             	sub    esp,0xc
c001056f:	68 80 00 00 00       	push   0x80
c0010574:	e8 31 fb ff ff       	call   c00100aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010579:	83 e0 01             	and    eax,0x1
c001057c:	c1 e0 06             	shl    eax,0x6
c001057f:	89 c2                	mov    edx,eax
c0010581:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010587:	83 e0 bf             	and    eax,0xffffffbf
c001058a:	09 d0                	or     eax,edx
c001058c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010592:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010599:	e8 0c fb ff ff       	call   c00100aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001059e:	83 e0 01             	and    eax,0x1
c00105a1:	c1 e0 04             	shl    eax,0x4
c00105a4:	89 c2                	mov    edx,eax
c00105a6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105ac:	83 e0 ef             	and    eax,0xffffffef
c00105af:	09 d0                	or     eax,edx
c00105b1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105b7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00105be:	e8 e7 fa ff ff       	call   c00100aa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105c3:	89 c2                	mov    edx,eax
c00105c5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105cb:	c1 e2 07             	shl    edx,0x7
c00105ce:	83 e0 7f             	and    eax,0x7f
c00105d1:	09 d0                	or     eax,edx
c00105d3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105d9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00105e0:	e8 f3 fa ff ff       	call   c00100d8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105e5:	83 e0 01             	and    eax,0x1
c00105e8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105ef:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105f5:	83 e0 f7             	and    eax,0xfffffff7
c00105f8:	09 d0                	or     eax,edx
c00105fa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010600:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010607:	e8 cc fa ff ff       	call   c00100d8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001060c:	83 c4 10             	add    esp,0x10
c001060f:	83 e0 01             	and    eax,0x1
c0010612:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010619:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001061f:	83 e0 fb             	and    eax,0xfffffffb
c0010622:	09 d0                	or     eax,edx
c0010624:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010631:	50                   	push   eax
c0010632:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010636:	50                   	push   eax
c0010637:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001063b:	57                   	push   edi
c001063c:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010640:	56                   	push   esi
c0010641:	6a 01                	push   0x1
c0010643:	e8 82 f9 ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010648:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001064c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010652:	89 c1                	mov    ecx,eax
c0010654:	83 e1 0f             	and    ecx,0xf
c0010657:	83 e2 f0             	and    edx,0xfffffff0
c001065a:	09 ca                	or     edx,ecx
c001065c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010662:	89 c2                	mov    edx,eax
c0010664:	c1 ea 04             	shr    edx,0x4
c0010667:	83 e2 0f             	and    edx,0xf
c001066a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001066e:	89 d1                	mov    ecx,edx
c0010670:	83 c4 20             	add    esp,0x20
c0010673:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010679:	c1 e1 06             	shl    ecx,0x6
c001067c:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010682:	09 ca                	or     edx,ecx
c0010684:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001068b:	89 c2                	mov    edx,eax
c001068d:	c1 ea 08             	shr    edx,0x8
c0010690:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010696:	83 e2 0f             	and    edx,0xf
c0010699:	89 d5                	mov    ebp,edx
c001069b:	83 e5 03             	and    ebp,0x3
c001069e:	c1 e5 06             	shl    ebp,0x6
c00106a1:	83 e1 3f             	and    ecx,0x3f
c00106a4:	09 e9                	or     ecx,ebp
c00106a6:	89 d5                	mov    ebp,edx
c00106a8:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00106ae:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00106b4:	c1 ed 02             	shr    ebp,0x2
c00106b7:	83 e1 c0             	and    ecx,0xffffffc0
c00106ba:	09 e9                	or     ecx,ebp
c00106bc:	89 c5                	mov    ebp,eax
c00106be:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00106c4:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00106ca:	c1 ed 08             	shr    ebp,0x8
c00106cd:	83 e5 30             	and    ebp,0x30
c00106d0:	83 e1 cf             	and    ecx,0xffffffcf
c00106d3:	09 e9                	or     ecx,ebp
c00106d5:	83 fa 06             	cmp    edx,0x6
c00106d8:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00106de:	74 05                	je     c00106e5 <CPU::detectFeatures()+0x54f>
c00106e0:	83 fa 0f             	cmp    edx,0xf
c00106e3:	75 64                	jne    c0010749 <CPU::detectFeatures()+0x5b3>
c00106e5:	89 c1                	mov    ecx,eax
c00106e7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00106ed:	c1 e9 10             	shr    ecx,0x10
c00106f0:	c1 e1 04             	shl    ecx,0x4
c00106f3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00106f7:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00106fd:	0f b6 c9             	movzx  ecx,cl
c0010700:	c1 e1 06             	shl    ecx,0x6
c0010703:	09 e9                	or     ecx,ebp
c0010705:	83 fa 0f             	cmp    edx,0xf
c0010708:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001070f:	75 38                	jne    c0010749 <CPU::detectFeatures()+0x5b3>
c0010711:	c1 e8 14             	shr    eax,0x14
c0010714:	83 c0 0f             	add    eax,0xf
c0010717:	0f b6 c0             	movzx  eax,al
c001071a:	89 c2                	mov    edx,eax
c001071c:	c1 e8 02             	shr    eax,0x2
c001071f:	83 e2 03             	and    edx,0x3
c0010722:	89 d1                	mov    ecx,edx
c0010724:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001072a:	c1 e1 06             	shl    ecx,0x6
c001072d:	83 e2 3f             	and    edx,0x3f
c0010730:	09 ca                	or     edx,ecx
c0010732:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010738:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001073e:	83 e2 c0             	and    edx,0xffffffc0
c0010741:	09 d0                	or     eax,edx
c0010743:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010749:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001074f:	83 ec 0c             	sub    esp,0xc
c0010752:	83 c8 07             	or     eax,0x7
c0010755:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001075b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001075f:	50                   	push   eax
c0010760:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010764:	55                   	push   ebp
c0010765:	57                   	push   edi
c0010766:	56                   	push   esi
c0010767:	68 00 00 00 80       	push   0x80000000
c001076c:	e8 59 f8 ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010771:	83 c4 20             	add    esp,0x20
c0010774:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001077c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010780:	76 1e                	jbe    c00107a0 <CPU::detectFeatures()+0x60a>
c0010782:	83 ec 0c             	sub    esp,0xc
c0010785:	50                   	push   eax
c0010786:	55                   	push   ebp
c0010787:	57                   	push   edi
c0010788:	56                   	push   esi
c0010789:	68 01 00 00 80       	push   0x80000001
c001078e:	e8 37 f8 ff ff       	call   c000ffca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010793:	83 c4 20             	add    esp,0x20
c0010796:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00107a0:	52                   	push   edx
c00107a1:	52                   	push   edx
c00107a2:	68 31 1d 02 c0       	push   0xc0021d31
c00107a7:	53                   	push   ebx
c00107a8:	e8 29 c1 ff ff       	call   c000c8d6 <Device::setName(char const*)>
c00107ad:	83 c4 10             	add    esp,0x10
c00107b0:	eb 69                	jmp    c001081b <CPU::detectFeatures()+0x685>
c00107b2:	50                   	push   eax
c00107b3:	50                   	push   eax
c00107b4:	68 96 1c 02 c0       	push   0xc0021c96
c00107b9:	55                   	push   ebp
c00107ba:	e8 91 fe fe ff       	call   c0000650 <strcpy>
c00107bf:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107c9:	e8 f5 f9 fe ff       	call   c00001c3 <is486>
c00107ce:	83 c4 10             	add    esp,0x10
c00107d1:	85 c0                	test   eax,eax
c00107d3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107d9:	74 1f                	je     c00107fa <CPU::detectFeatures()+0x664>
c00107db:	83 c8 07             	or     eax,0x7
c00107de:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107e4:	0f 20 c0             	mov    eax,cr0
c00107e7:	83 e0 14             	and    eax,0x14
c00107ea:	83 f8 04             	cmp    eax,0x4
c00107ed:	75 10                	jne    c00107ff <CPU::detectFeatures()+0x669>
c00107ef:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107f5:	83 e0 fd             	and    eax,0xfffffffd
c00107f8:	eb 1b                	jmp    c0010815 <CPU::detectFeatures()+0x67f>
c00107fa:	83 e0 f8             	and    eax,0xfffffff8
c00107fd:	eb df                	jmp    c00107de <CPU::detectFeatures()+0x648>
c00107ff:	e8 9a f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010804:	83 e0 01             	and    eax,0x1
c0010807:	8d 14 00             	lea    edx,[eax+eax*1]
c001080a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010810:	83 e0 fd             	and    eax,0xfffffffd
c0010813:	09 d0                	or     eax,edx
c0010815:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001081b:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010822:	74 17                	je     c001083b <CPU::detectFeatures()+0x6a5>
c0010824:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001082a:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010830:	83 c8 10             	or     eax,0x10
c0010833:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010839:	eb 20                	jmp    c001085b <CPU::detectFeatures()+0x6c5>
c001083b:	e8 5e f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010840:	83 e0 01             	and    eax,0x1
c0010843:	8d 14 00             	lea    edx,[eax+eax*1]
c0010846:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001084c:	83 e0 fd             	and    eax,0xfffffffd
c001084f:	09 d0                	or     eax,edx
c0010851:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010857:	a8 02                	test   al,0x2
c0010859:	75 c9                	jne    c0010824 <CPU::detectFeatures()+0x68e>
c001085b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010862:	83 c4 2c             	add    esp,0x2c
c0010865:	5b                   	pop    ebx
c0010866:	5e                   	pop    esi
c0010867:	5f                   	pop    edi
c0010868:	5d                   	pop    ebp
c0010869:	c3                   	ret    

c001086a <CPU::setupSMEP()>:
c001086a:	0f 20 e0             	mov    eax,cr4
c001086d:	0d 00 00 10 00       	or     eax,0x100000
c0010872:	0f 22 e0             	mov    cr4,eax
c0010875:	c3                   	ret    

c0010876 <CPU::setupUMIP()>:
c0010876:	0f 20 e0             	mov    eax,cr4
c0010879:	80 cc 08             	or     ah,0x8
c001087c:	0f 22 e0             	mov    cr4,eax
c001087f:	c3                   	ret    

c0010880 <CPU::setupTSC()>:
c0010880:	0f 20 e0             	mov    eax,cr4
c0010883:	83 c8 04             	or     eax,0x4
c0010886:	0f 22 e0             	mov    cr4,eax
c0010889:	c3                   	ret    

c001088a <CPU::setupLargePages()>:
c001088a:	0f 20 e0             	mov    eax,cr4
c001088d:	83 c8 10             	or     eax,0x10
c0010890:	0f 22 e0             	mov    cr4,eax
c0010893:	c3                   	ret    

c0010894 <CPU::setupPAT()>:
c0010894:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010899:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00108a0:	74 2c                	je     c00108ce <CPU::setupPAT()+0x3a>
c00108a2:	53                   	push   ebx
c00108a3:	83 ec 10             	sub    esp,0x10
c00108a6:	68 77 02 00 00       	push   0x277
c00108ab:	50                   	push   eax
c00108ac:	e8 31 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00108b1:	83 e2 f8             	and    edx,0xfffffff8
c00108b4:	83 ca 01             	or     edx,0x1
c00108b7:	52                   	push   edx
c00108b8:	50                   	push   eax
c00108b9:	68 77 02 00 00       	push   0x277
c00108be:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00108c4:	e8 45 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c00108c9:	83 c4 28             	add    esp,0x28
c00108cc:	5b                   	pop    ebx
c00108cd:	c3                   	ret    
c00108ce:	c3                   	ret    
c00108cf:	90                   	nop

c00108d0 <CPU::setupMTRR()>:
c00108d0:	c3                   	ret    
c00108d1:	90                   	nop

c00108d2 <CPU::setupGlobalPages()>:
c00108d2:	0f 20 e0             	mov    eax,cr4
c00108d5:	0c 80                	or     al,0x80
c00108d7:	0f 22 e0             	mov    cr4,eax
c00108da:	c3                   	ret    
c00108db:	90                   	nop

c00108dc <CPU::allowUsermodeDataAccess()>:
c00108dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108e7:	74 03                	je     c00108ec <CPU::allowUsermodeDataAccess()+0x10>
c00108e9:	0f 01 cb             	stac   
c00108ec:	c3                   	ret    
c00108ed:	90                   	nop

c00108ee <CPU::prohibitUsermodeDataAccess()>:
c00108ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108f9:	74 03                	je     c00108fe <CPU::prohibitUsermodeDataAccess()+0x10>
c00108fb:	0f 01 ca             	clac   
c00108fe:	c3                   	ret    
c00108ff:	90                   	nop

c0010900 <CPU::setupSMAP()>:
c0010900:	0f 20 e0             	mov    eax,cr4
c0010903:	0d 00 00 20 00       	or     eax,0x200000
c0010908:	0f 22 e0             	mov    cr4,eax
c001090b:	eb e1                	jmp    c00108ee <CPU::prohibitUsermodeDataAccess()>
c001090d:	90                   	nop

c001090e <CPU::setupFeatures()>:
c001090e:	53                   	push   ebx
c001090f:	83 ec 08             	sub    esp,0x8
c0010912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010916:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001091d:	74 18                	je     c0010937 <CPU::setupFeatures()+0x29>
c001091f:	83 ec 0c             	sub    esp,0xc
c0010922:	68 3d 1d 02 c0       	push   0xc0021d3d
c0010927:	e8 de 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001092c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001092f:	e8 42 ff ff ff       	call   c0010876 <CPU::setupUMIP()>
c0010934:	83 c4 10             	add    esp,0x10
c0010937:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001093e:	74 18                	je     c0010958 <CPU::setupFeatures()+0x4a>
c0010940:	83 ec 0c             	sub    esp,0xc
c0010943:	68 47 1d 02 c0       	push   0xc0021d47
c0010948:	e8 bd 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001094d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010950:	e8 2b ff ff ff       	call   c0010880 <CPU::setupTSC()>
c0010955:	83 c4 10             	add    esp,0x10
c0010958:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001095f:	74 18                	je     c0010979 <CPU::setupFeatures()+0x6b>
c0010961:	83 ec 0c             	sub    esp,0xc
c0010964:	68 50 1d 02 c0       	push   0xc0021d50
c0010969:	e8 9c 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001096e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010971:	e8 14 ff ff ff       	call   c001088a <CPU::setupLargePages()>
c0010976:	83 c4 10             	add    esp,0x10
c0010979:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010980:	74 18                	je     c001099a <CPU::setupFeatures()+0x8c>
c0010982:	83 ec 0c             	sub    esp,0xc
c0010985:	68 59 1d 02 c0       	push   0xc0021d59
c001098a:	e8 7b 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001098f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010992:	e8 3b ff ff ff       	call   c00108d2 <CPU::setupGlobalPages()>
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00109a1:	74 18                	je     c00109bb <CPU::setupFeatures()+0xad>
c00109a3:	83 ec 0c             	sub    esp,0xc
c00109a6:	68 6b 1d 02 c0       	push   0xc0021d6b
c00109ab:	e8 5a 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00109b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b3:	e8 dc fe ff ff       	call   c0010894 <CPU::setupPAT()>
c00109b8:	83 c4 10             	add    esp,0x10
c00109bb:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00109c2:	74 11                	je     c00109d5 <CPU::setupFeatures()+0xc7>
c00109c4:	c7 44 24 10 74 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d74
c00109cc:	83 c4 08             	add    esp,0x8
c00109cf:	5b                   	pop    ebx
c00109d0:	e9 35 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c00109d5:	83 c4 08             	add    esp,0x8
c00109d8:	5b                   	pop    ebx
c00109d9:	c3                   	ret    

c00109da <CPU::open(int, int, void*)>:
c00109da:	55                   	push   ebp
c00109db:	57                   	push   edi
c00109dc:	56                   	push   esi
c00109dd:	53                   	push   ebx
c00109de:	83 ec 18             	sub    esp,0x18
c00109e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00109e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00109ed:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00109f3:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00109f9:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00109ff:	50                   	push   eax
c0010a00:	e8 d9 69 ff ff       	call   c00073de <GDT::setup()>
c0010a05:	83 c4 0c             	add    esp,0xc
c0010a08:	6a 00                	push   0x0
c0010a0a:	68 ef be ad de       	push   0xdeadbeef
c0010a0f:	55                   	push   ebp
c0010a10:	e8 5b 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010a15:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010a18:	e8 33 85 ff ff       	call   c0008f50 <TSS::flush()>
c0010a1d:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010a23:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a26:	e8 17 6c ff ff       	call   c0007642 <IDT::setup()>
c0010a2b:	b8 00 04 00 00       	mov    eax,0x400
c0010a30:	0f 23 f8             	mov    db7,eax
c0010a33:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010a3d:	e8 a0 73 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010a42:	83 c4 10             	add    esp,0x10
c0010a45:	85 f6                	test   esi,esi
c0010a47:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010a4d:	89 38                	mov    DWORD PTR [eax],edi
c0010a4f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010a55:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a58:	74 10                	je     c0010a6a <CPU::open(int, int, void*)+0x90>
c0010a5a:	50                   	push   eax
c0010a5b:	50                   	push   eax
c0010a5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a62:	56                   	push   esi
c0010a63:	e8 24 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010a68:	eb 0d                	jmp    c0010a77 <CPU::open(int, int, void*)+0x9d>
c0010a6a:	83 ec 0c             	sub    esp,0xc
c0010a6d:	68 7e 1d 02 c0       	push   0xc0021d7e
c0010a72:	e8 72 08 00 00       	call   c00112e9 <KePanic(char const*)>
c0010a77:	83 c4 10             	add    esp,0x10
c0010a7a:	83 ec 0c             	sub    esp,0xc
c0010a7d:	68 8c 1d 02 c0       	push   0xc0021d8c
c0010a82:	e8 8e 01 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0010a87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a8a:	e8 07 f7 ff ff       	call   c0010196 <CPU::detectFeatures()>
c0010a8f:	c7 04 24 af 1d 02 c0 	mov    DWORD PTR [esp],0xc0021daf
c0010a96:	e8 7a 01 00 00       	call   c0010c15 <KeSetBootMessage(char const*)>
c0010a9b:	e8 07 72 00 00       	call   c0017ca7 <HalInitialise()>
c0010aa0:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010aa5:	83 e0 10             	and    eax,0x10
c0010aa8:	83 f8 01             	cmp    eax,0x1
c0010aab:	19 c0                	sbb    eax,eax
c0010aad:	83 e0 46             	and    eax,0x46
c0010ab0:	83 c0 1e             	add    eax,0x1e
c0010ab3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ab6:	e8 c2 d6 ff ff       	call   c000e17d <setupTimer(int)>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010ac5:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010acb:	74 0c                	je     c0010ad9 <CPU::open(int, int, void*)+0xff>
c0010acd:	83 ec 0c             	sub    esp,0xc
c0010ad0:	53                   	push   ebx
c0010ad1:	e8 38 fe ff ff       	call   c001090e <CPU::setupFeatures()>
c0010ad6:	83 c4 10             	add    esp,0x10
c0010ad9:	83 c4 0c             	add    esp,0xc
c0010adc:	31 c0                	xor    eax,eax
c0010ade:	5b                   	pop    ebx
c0010adf:	5e                   	pop    esi
c0010ae0:	5f                   	pop    edi
c0010ae1:	5d                   	pop    ebp
c0010ae2:	c3                   	ret    

c0010ae3 <KeInitialiseAtexit()>:
c0010ae3:	83 ec 10             	sub    esp,0x10
c0010ae6:	6a 60                	push   0x60
c0010ae8:	6a 00                	push   0x0
c0010aea:	68 20 8e 02 c0       	push   0xc0028e20
c0010aef:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010af9:	e8 f2 f9 fe ff       	call   c00004f0 <memset>
c0010afe:	83 c4 1c             	add    esp,0x1c
c0010b01:	c3                   	ret    

c0010b02 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010b02:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b0b:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010b12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b16:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010b1d:	40                   	inc    eax
c0010b1e:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010b23:	83 f8 17             	cmp    eax,0x17
c0010b26:	7e 0d                	jle    c0010b35 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b28:	c7 44 24 04 f0 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021df0
c0010b30:	e9 b4 07 00 00       	jmp    c00112e9 <KePanic(char const*)>
c0010b35:	c3                   	ret    

c0010b36 <KeExecuteAtexit()>:
c0010b36:	53                   	push   ebx
c0010b37:	31 db                	xor    ebx,ebx
c0010b39:	83 ec 08             	sub    esp,0x8
c0010b3c:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010b42:	7e 50                	jle    c0010b94 <KeExecuteAtexit()+0x5e>
c0010b44:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010b4b:	85 c0                	test   eax,eax
c0010b4d:	74 42                	je     c0010b91 <KeExecuteAtexit()+0x5b>
c0010b4f:	51                   	push   ecx
c0010b50:	50                   	push   eax
c0010b51:	53                   	push   ebx
c0010b52:	68 09 1e 02 c0       	push   0xc0021e09
c0010b57:	e8 ae 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b5c:	58                   	pop    eax
c0010b5d:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b64:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b6b:	c7 04 24 2b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e2b
c0010b72:	e8 93 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b77:	c7 04 24 8b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f8b
c0010b7e:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b89:	e8 7c 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b8e:	83 c4 10             	add    esp,0x10
c0010b91:	43                   	inc    ebx
c0010b92:	eb a8                	jmp    c0010b3c <KeExecuteAtexit()+0x6>
c0010b94:	83 c4 08             	add    esp,0x8
c0010b97:	5b                   	pop    ebx
c0010b98:	c3                   	ret    

c0010b99 <KeDisplaySplashScreen()>:
c0010b99:	55                   	push   ebp
c0010b9a:	bd 05 00 00 00       	mov    ebp,0x5
c0010b9f:	57                   	push   edi
c0010ba0:	bf 0a 00 00 00       	mov    edi,0xa
c0010ba5:	56                   	push   esi
c0010ba6:	31 f6                	xor    esi,esi
c0010ba8:	53                   	push   ebx
c0010ba9:	31 db                	xor    ebx,ebx
c0010bab:	83 ec 0c             	sub    esp,0xc
c0010bae:	0f b6 96 e0 31 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdce20]
c0010bb5:	85 d2                	test   edx,edx
c0010bb7:	89 d0                	mov    eax,edx
c0010bb9:	74 52                	je     c0010c0d <KeDisplaySplashScreen()+0x74>
c0010bbb:	80 bb 16 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcdea],0xdb
c0010bc2:	75 13                	jne    c0010bd7 <KeDisplaySplashScreen()+0x3e>
c0010bc4:	0f b6 8b 15 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcdeb]
c0010bcb:	83 e1 fe             	and    ecx,0xfffffffe
c0010bce:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010bd4:	75 01                	jne    c0010bd7 <KeDisplaySplashScreen()+0x3e>
c0010bd6:	47                   	inc    edi
c0010bd7:	83 fa 0d             	cmp    edx,0xd
c0010bda:	74 28                	je     c0010c04 <KeDisplaySplashScreen()+0x6b>
c0010bdc:	83 fa 0a             	cmp    edx,0xa
c0010bdf:	75 0a                	jne    c0010beb <KeDisplaySplashScreen()+0x52>
c0010be1:	45                   	inc    ebp
c0010be2:	bf 0a 00 00 00       	mov    edi,0xa
c0010be7:	31 db                	xor    ebx,ebx
c0010be9:	eb 19                	jmp    c0010c04 <KeDisplaySplashScreen()+0x6b>
c0010beb:	83 ec 0c             	sub    esp,0xc
c0010bee:	0f be c0             	movsx  eax,al
c0010bf1:	55                   	push   ebp
c0010bf2:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010bf5:	43                   	inc    ebx
c0010bf6:	52                   	push   edx
c0010bf7:	6a 00                	push   0x0
c0010bf9:	6a 0e                	push   0xe
c0010bfb:	50                   	push   eax
c0010bfc:	e8 23 7d 00 00       	call   c0018924 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010c01:	83 c4 20             	add    esp,0x20
c0010c04:	46                   	inc    esi
c0010c05:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c0b:	75 a1                	jne    c0010bae <KeDisplaySplashScreen()+0x15>
c0010c0d:	83 c4 0c             	add    esp,0xc
c0010c10:	5b                   	pop    ebx
c0010c11:	5e                   	pop    esi
c0010c12:	5f                   	pop    edi
c0010c13:	5d                   	pop    ebp
c0010c14:	c3                   	ret    

c0010c15 <KeSetBootMessage(char const*)>:
c0010c15:	57                   	push   edi
c0010c16:	56                   	push   esi
c0010c17:	53                   	push   ebx
c0010c18:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010c1e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010c25:	68 9e 00 00 00       	push   0x9e
c0010c2a:	6a 00                	push   0x0
c0010c2c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c30:	56                   	push   esi
c0010c31:	e8 ba f8 fe ff       	call   c00004f0 <memset>
c0010c36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c39:	e8 42 f9 fe ff       	call   c0000580 <strlen>
c0010c3e:	ba 50 00 00 00       	mov    edx,0x50
c0010c43:	83 c4 10             	add    esp,0x10
c0010c46:	31 c9                	xor    ecx,ecx
c0010c48:	29 c2                	sub    edx,eax
c0010c4a:	83 e2 fe             	and    edx,0xfffffffe
c0010c4d:	01 f2                	add    edx,esi
c0010c4f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010c54:	84 c0                	test   al,al
c0010c56:	74 0a                	je     c0010c62 <KeSetBootMessage(char const*)+0x4d>
c0010c58:	80 cc 0f             	or     ah,0xf
c0010c5b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c5f:	41                   	inc    ecx
c0010c60:	eb ed                	jmp    c0010c4f <KeSetBootMessage(char const*)+0x3a>
c0010c62:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c67:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c6e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c74:	5b                   	pop    ebx
c0010c75:	5e                   	pop    esi
c0010c76:	5f                   	pop    edi
c0010c77:	c3                   	ret    

c0010c78 <Krnl::handlePowerButton()>:
c0010c78:	83 ec 0c             	sub    esp,0xc
c0010c7b:	e8 c4 06 00 00       	call   c0011344 <KeHandlePowerButton()>
c0010c80:	90                   	nop
c0010c81:	83 c4 0c             	add    esp,0xc
c0010c84:	c3                   	ret    
c0010c85:	8d 76 00             	lea    esi,[esi+0x0]

c0010c88 <Krnl::handleSleepButton()>:
c0010c88:	83 ec 0c             	sub    esp,0xc
c0010c8b:	e8 e9 06 00 00       	call   c0011379 <KeHandleSleepButton()>
c0010c90:	90                   	nop
c0010c91:	83 c4 0c             	add    esp,0xc
c0010c94:	c3                   	ret    
c0010c95:	90                   	nop

c0010c96 <EnvVarContainer::getEnv(char const*)>:
c0010c96:	57                   	push   edi
c0010c97:	56                   	push   esi
c0010c98:	53                   	push   ebx
c0010c99:	31 db                	xor    ebx,ebx
c0010c9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c9f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010ca1:	7e 2b                	jle    c0010cce <EnvVarContainer::getEnv(char const*)+0x38>
c0010ca3:	50                   	push   eax
c0010ca4:	50                   	push   eax
c0010ca5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ca8:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010caf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010cb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010cb6:	e8 c5 fa fe ff       	call   c0000780 <strcmp>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	85 c0                	test   eax,eax
c0010cc0:	75 09                	jne    c0010ccb <EnvVarContainer::getEnv(char const*)+0x35>
c0010cc2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010cc5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010cc9:	eb 05                	jmp    c0010cd0 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ccb:	43                   	inc    ebx
c0010ccc:	eb d1                	jmp    c0010c9f <EnvVarContainer::getEnv(char const*)+0x9>
c0010cce:	31 c0                	xor    eax,eax
c0010cd0:	5b                   	pop    ebx
c0010cd1:	5e                   	pop    esi
c0010cd2:	5f                   	pop    edi
c0010cd3:	c3                   	ret    

c0010cd4 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010cd4:	55                   	push   ebp
c0010cd5:	57                   	push   edi
c0010cd6:	56                   	push   esi
c0010cd7:	53                   	push   ebx
c0010cd8:	83 ec 28             	sub    esp,0x28
c0010cdb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010cdf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010ce3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010ce7:	56                   	push   esi
c0010ce8:	e8 93 f8 fe ff       	call   c0000580 <strlen>
c0010ced:	40                   	inc    eax
c0010cee:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf1:	e8 dd 6d ff ff       	call   c0007ad3 <malloc>
c0010cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010cfd:	e8 7e f8 fe ff       	call   c0000580 <strlen>
c0010d02:	40                   	inc    eax
c0010d03:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d06:	e8 c8 6d ff ff       	call   c0007ad3 <malloc>
c0010d0b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d12:	e8 69 f8 fe ff       	call   c0000580 <strlen>
c0010d17:	83 c4 0c             	add    esp,0xc
c0010d1a:	40                   	inc    eax
c0010d1b:	50                   	push   eax
c0010d1c:	6a 00                	push   0x0
c0010d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010d22:	e8 c9 f7 fe ff       	call   c00004f0 <memset>
c0010d27:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d2a:	e8 51 f8 fe ff       	call   c0000580 <strlen>
c0010d2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d33:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3b:	89 de                	mov    esi,ebx
c0010d3d:	e8 3e f8 fe ff       	call   c0000580 <strlen>
c0010d42:	83 c4 0c             	add    esp,0xc
c0010d45:	40                   	inc    eax
c0010d46:	50                   	push   eax
c0010d47:	6a 00                	push   0x0
c0010d49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d4d:	e8 9e f7 fe ff       	call   c00004f0 <memset>
c0010d52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d55:	e8 26 f8 fe ff       	call   c0000580 <strlen>
c0010d5a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d5e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d66:	40                   	inc    eax
c0010d67:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d6a:	c1 e0 03             	shl    eax,0x3
c0010d6d:	5a                   	pop    edx
c0010d6e:	59                   	pop    ecx
c0010d6f:	50                   	push   eax
c0010d70:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d73:	e8 47 6d ff ff       	call   c0007abf <realloc>
c0010d78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d7b:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d7f:	b9 08 00 00 00       	mov    ecx,0x8
c0010d84:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d87:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d8d:	83 c4 2c             	add    esp,0x2c
c0010d90:	5b                   	pop    ebx
c0010d91:	5e                   	pop    esi
c0010d92:	5f                   	pop    edi
c0010d93:	5d                   	pop    ebp
c0010d94:	c3                   	ret    
c0010d95:	90                   	nop

c0010d96 <EnvVarContainer::deleteEnv(char const*)>:
c0010d96:	c3                   	ret    
c0010d97:	90                   	nop

c0010d98 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d98:	55                   	push   ebp
c0010d99:	57                   	push   edi
c0010d9a:	56                   	push   esi
c0010d9b:	53                   	push   ebx
c0010d9c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010da2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010da9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010db0:	68 14 01 00 00       	push   0x114
c0010db5:	e8 19 6d ff ff       	call   c0007ad3 <malloc>
c0010dba:	83 c4 0c             	add    esp,0xc
c0010dbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010dc0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010dc7:	89 c3                	mov    ebx,eax
c0010dc9:	50                   	push   eax
c0010dca:	e8 53 aa ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0010dcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd2:	e8 d7 ad ff ff       	call   c000bbae <File::exists()>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	84 c0                	test   al,al
c0010ddc:	75 31                	jne    c0010e0f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010dde:	50                   	push   eax
c0010ddf:	50                   	push   eax
c0010de0:	6a 12                	push   0x12
c0010de2:	53                   	push   ebx
c0010de3:	e8 02 ab ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c0010de8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dea:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010ded:	89 34 24             	mov    DWORD PTR [esp],esi
c0010df0:	e8 8b f7 fe ff       	call   c0000580 <strlen>
c0010df5:	5a                   	pop    edx
c0010df6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010dfa:	52                   	push   edx
c0010dfb:	31 d2                	xor    edx,edx
c0010dfd:	56                   	push   esi
c0010dfe:	52                   	push   edx
c0010dff:	50                   	push   eax
c0010e00:	53                   	push   ebx
c0010e01:	ff d7                	call   edi
c0010e03:	83 c4 14             	add    esp,0x14
c0010e06:	53                   	push   ebx
c0010e07:	e8 3c ab ff ff       	call   c000b948 <File::close()>
c0010e0c:	83 c4 10             	add    esp,0x10
c0010e0f:	56                   	push   esi
c0010e10:	31 f6                	xor    esi,esi
c0010e12:	68 00 01 00 00       	push   0x100
c0010e17:	6a 00                	push   0x0
c0010e19:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e1d:	50                   	push   eax
c0010e1e:	e8 cd f6 fe ff       	call   c00004f0 <memset>
c0010e23:	5f                   	pop    edi
c0010e24:	58                   	pop    eax
c0010e25:	6a 01                	push   0x1
c0010e27:	53                   	push   ebx
c0010e28:	e8 bd aa ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c0010e2d:	83 c4 10             	add    esp,0x10
c0010e30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010e47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e49:	52                   	push   edx
c0010e4a:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010e4e:	51                   	push   ecx
c0010e4f:	6a 00                	push   0x0
c0010e51:	6a 01                	push   0x1
c0010e53:	53                   	push   ebx
c0010e54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010e57:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e5c:	83 c4 20             	add    esp,0x20
c0010e5f:	85 c0                	test   eax,eax
c0010e61:	89 c1                	mov    ecx,eax
c0010e63:	0f 84 36 01 00 00    	je     c0010f9f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e69:	83 f8 0d             	cmp    eax,0xd
c0010e6c:	0f 84 22 01 00 00    	je     c0010f94 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e72:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e77:	0f 84 f0 00 00 00    	je     c0010f6d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e7d:	83 f8 0a             	cmp    eax,0xa
c0010e80:	74 13                	je     c0010e95 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e82:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e87:	74 0c                	je     c0010e95 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e89:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e8f:	0f 8e f6 00 00 00    	jle    c0010f8b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e99:	83 ec 0c             	sub    esp,0xc
c0010e9c:	8d 78 01             	lea    edi,[eax+0x1]
c0010e9f:	57                   	push   edi
c0010ea0:	e8 2e 6c ff ff       	call   c0007ad3 <malloc>
c0010ea5:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010ea9:	8d 56 04             	lea    edx,[esi+0x4]
c0010eac:	89 14 24             	mov    DWORD PTR [esp],edx
c0010eaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010eb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010eb7:	e8 17 6c ff ff       	call   c0007ad3 <malloc>
c0010ebc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010ec0:	83 c4 0c             	add    esp,0xc
c0010ec3:	57                   	push   edi
c0010ec4:	6a 00                	push   0x0
c0010ec6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eca:	e8 21 f6 fe ff       	call   c00004f0 <memset>
c0010ecf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ed3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ed7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010edb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010edd:	83 c4 0c             	add    esp,0xc
c0010ee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ee4:	52                   	push   edx
c0010ee5:	6a 00                	push   0x0
c0010ee7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010eeb:	e8 00 f6 fe ff       	call   c00004f0 <memset>
c0010ef0:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010ef4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010ef8:	89 34 24             	mov    DWORD PTR [esp],esi
c0010efb:	e8 80 f6 fe ff       	call   c0000580 <strlen>
c0010f00:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010f04:	89 c1                	mov    ecx,eax
c0010f06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f08:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f0b:	83 c4 10             	add    esp,0x10
c0010f0e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010f11:	40                   	inc    eax
c0010f12:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f15:	85 d2                	test   edx,edx
c0010f17:	75 0c                	jne    c0010f25 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010f19:	83 ec 0c             	sub    esp,0xc
c0010f1c:	6a 08                	push   0x8
c0010f1e:	e8 b0 6b ff ff       	call   c0007ad3 <malloc>
c0010f23:	eb 0c                	jmp    c0010f31 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010f25:	51                   	push   ecx
c0010f26:	51                   	push   ecx
c0010f27:	c1 e0 03             	shl    eax,0x3
c0010f2a:	50                   	push   eax
c0010f2b:	52                   	push   edx
c0010f2c:	e8 8e 6b ff ff       	call   c0007abf <realloc>
c0010f31:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010f3d:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f41:	b9 08 00 00 00       	mov    ecx,0x8
c0010f46:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010f4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f4c:	50                   	push   eax
c0010f4d:	31 f6                	xor    esi,esi
c0010f4f:	68 00 01 00 00       	push   0x100
c0010f54:	6a 00                	push   0x0
c0010f56:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f5a:	50                   	push   eax
c0010f5b:	e8 90 f5 fe ff       	call   c00004f0 <memset>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f6b:	eb 27                	jmp    c0010f94 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f6d:	83 f8 3d             	cmp    eax,0x3d
c0010f70:	74 1e                	je     c0010f90 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f72:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f78:	7f 07                	jg     c0010f81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f7a:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010f7e:	46                   	inc    esi
c0010f7f:	eb 13                	jmp    c0010f94 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f81:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f89:	eb 09                	jmp    c0010f94 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f8b:	83 f8 3d             	cmp    eax,0x3d
c0010f8e:	75 ea                	jne    c0010f7a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f90:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f99:	0f 85 99 fe ff ff    	jne    c0010e38 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f9f:	83 ec 0c             	sub    esp,0xc
c0010fa2:	53                   	push   ebx
c0010fa3:	e8 a0 a9 ff ff       	call   c000b948 <File::close()>
c0010fa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010faa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fb0:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010fb6:	5b                   	pop    ebx
c0010fb7:	5e                   	pop    esi
c0010fb8:	5f                   	pop    edi
c0010fb9:	5d                   	pop    ebp
c0010fba:	c3                   	ret    
c0010fbb:	90                   	nop

c0010fbc <EnvVarContainer::__loadSystem()>:
c0010fbc:	83 ec 10             	sub    esp,0x10
c0010fbf:	68 40 33 02 c0       	push   0xc0023340
c0010fc4:	68 30 1e 02 c0       	push   0xc0021e30
c0010fc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fcd:	e8 c6 fd ff ff       	call   c0010d98 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010fd2:	83 c4 1c             	add    esp,0x1c
c0010fd5:	c3                   	ret    

c0010fd6 <EnvVarContainer::__loadUser()>:
c0010fd6:	c3                   	ret    
c0010fd7:	90                   	nop

c0010fd8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ff1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ff8:	90                   	nop
c0010ff9:	c3                   	ret    

c0010ffa <EnvVarContainer::~EnvVarContainer()>:
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011001:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011004:	85 c0                	test   eax,eax
c0011006:	74 1d                	je     c0011025 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	8b 00                	mov    eax,DWORD PTR [eax]
c001100e:	85 c0                	test   eax,eax
c0011010:	74 13                	je     c0011025 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011016:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011019:	83 ec 0c             	sub    esp,0xc
c001101c:	50                   	push   eax
c001101d:	e8 c1 6a ff ff       	call   c0007ae3 <free>
c0011022:	83 c4 10             	add    esp,0x10
c0011025:	90                   	nop
c0011026:	83 c4 0c             	add    esp,0xc
c0011029:	c3                   	ret    

c001102a <KeGetEnv(Process*, char const*)>:
c001102a:	53                   	push   ebx
c001102b:	83 ec 08             	sub    esp,0x8
c001102e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011032:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011038:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001103c:	74 04                	je     c0011042 <KeGetEnv(Process*, char const*)+0x18>
c001103e:	85 c0                	test   eax,eax
c0011040:	75 0b                	jne    c001104d <KeGetEnv(Process*, char const*)+0x23>
c0011042:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011047:	85 c0                	test   eax,eax
c0011049:	75 19                	jne    c0011064 <KeGetEnv(Process*, char const*)+0x3a>
c001104b:	eb 27                	jmp    c0011074 <KeGetEnv(Process*, char const*)+0x4a>
c001104d:	52                   	push   edx
c001104e:	52                   	push   edx
c001104f:	53                   	push   ebx
c0011050:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011056:	e8 3b fc ff ff       	call   c0010c96 <EnvVarContainer::getEnv(char const*)>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	85 c0                	test   eax,eax
c0011060:	75 28                	jne    c001108a <KeGetEnv(Process*, char const*)+0x60>
c0011062:	eb de                	jmp    c0011042 <KeGetEnv(Process*, char const*)+0x18>
c0011064:	52                   	push   edx
c0011065:	52                   	push   edx
c0011066:	53                   	push   ebx
c0011067:	50                   	push   eax
c0011068:	e8 29 fc ff ff       	call   c0010c96 <EnvVarContainer::getEnv(char const*)>
c001106d:	83 c4 10             	add    esp,0x10
c0011070:	85 c0                	test   eax,eax
c0011072:	75 16                	jne    c001108a <KeGetEnv(Process*, char const*)+0x60>
c0011074:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011078:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001107d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011081:	83 c4 08             	add    esp,0x8
c0011084:	5b                   	pop    ebx
c0011085:	e9 0c fc ff ff       	jmp    c0010c96 <EnvVarContainer::getEnv(char const*)>
c001108a:	83 c4 08             	add    esp,0x8
c001108d:	5b                   	pop    ebx
c001108e:	c3                   	ret    

c001108f <KeSetEnvSystem(char const*, char const*)>:
c001108f:	83 ec 10             	sub    esp,0x10
c0011092:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011096:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001109a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c00110a0:	e8 2f fc ff ff       	call   c0010cd4 <EnvVarContainer::setEnv(char const*, char const*)>
c00110a5:	83 c4 1c             	add    esp,0x1c
c00110a8:	c3                   	ret    

c00110a9 <KeSetEnvUser(char const*, char const*)>:
c00110a9:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110ae:	85 c0                	test   eax,eax
c00110b0:	74 15                	je     c00110c7 <KeSetEnvUser(char const*, char const*)+0x1e>
c00110b2:	83 ec 10             	sub    esp,0x10
c00110b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110bd:	50                   	push   eax
c00110be:	e8 11 fc ff ff       	call   c0010cd4 <EnvVarContainer::setEnv(char const*, char const*)>
c00110c3:	83 c4 1c             	add    esp,0x1c
c00110c6:	c3                   	ret    
c00110c7:	c3                   	ret    

c00110c8 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00110c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110cc:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00110d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110d6:	e9 f9 fb ff ff       	jmp    c0010cd4 <EnvVarContainer::setEnv(char const*, char const*)>

c00110db <KeDeleteEnvSystem(char const*)>:
c00110db:	c3                   	ret    

c00110dc <KeDeleteEnvUser(char const*)>:
c00110dc:	c3                   	ret    

c00110dd <KeDeleteEnvProcess(Process*, char const*)>:
c00110dd:	c3                   	ret    

c00110de <KeNewProcessEnv(Process*)>:
c00110de:	83 ec 28             	sub    esp,0x28
c00110e1:	6a 0c                	push   0xc
c00110e3:	e8 eb 69 ff ff       	call   c0007ad3 <malloc>
c00110e8:	5a                   	pop    edx
c00110e9:	59                   	pop    ecx
c00110ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110ee:	50                   	push   eax
c00110ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110f3:	e8 e0 fe ff ff       	call   c0010fd8 <EnvVarContainer::EnvVarContainer(Process*)>
c00110f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fc:	83 c4 2c             	add    esp,0x2c
c00110ff:	c3                   	ret    

c0011100 <KeCopyProcessEnv(Process*, Process*)>:
c0011100:	57                   	push   edi
c0011101:	56                   	push   esi
c0011102:	53                   	push   ebx
c0011103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011107:	83 ec 0c             	sub    esp,0xc
c001110a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011110:	6a 0c                	push   0xc
c0011112:	e8 bc 69 ff ff       	call   c0007ad3 <malloc>
c0011117:	89 c3                	mov    ebx,eax
c0011119:	58                   	pop    eax
c001111a:	5a                   	pop    edx
c001111b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111f:	53                   	push   ebx
c0011120:	e8 b3 fe ff ff       	call   c0010fd8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011125:	8b 07                	mov    eax,DWORD PTR [edi]
c0011127:	89 03                	mov    DWORD PTR [ebx],eax
c0011129:	c1 e0 03             	shl    eax,0x3
c001112c:	89 04 24             	mov    DWORD PTR [esp],eax
c001112f:	e8 9f 69 ff ff       	call   c0007ad3 <malloc>
c0011134:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011137:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011139:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001113c:	89 c7                	mov    edi,eax
c001113e:	c1 e1 03             	shl    ecx,0x3
c0011141:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011143:	83 c4 10             	add    esp,0x10
c0011146:	89 d8                	mov    eax,ebx
c0011148:	5b                   	pop    ebx
c0011149:	5e                   	pop    esi
c001114a:	5f                   	pop    edi
c001114b:	c3                   	ret    

c001114c <KeLoadSystemEnv()>:
c001114c:	53                   	push   ebx
c001114d:	83 ec 14             	sub    esp,0x14
c0011150:	6a 0c                	push   0xc
c0011152:	e8 7c 69 ff ff       	call   c0007ad3 <malloc>
c0011157:	89 c3                	mov    ebx,eax
c0011159:	58                   	pop    eax
c001115a:	5a                   	pop    edx
c001115b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011161:	53                   	push   ebx
c0011162:	e8 71 fe ff ff       	call   c0010fd8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001116a:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011170:	e8 47 fe ff ff       	call   c0010fbc <EnvVarContainer::__loadSystem()>
c0011175:	83 c4 18             	add    esp,0x18
c0011178:	5b                   	pop    ebx
c0011179:	c3                   	ret    

c001117a <KeLoadUserEnv()>:
c001117a:	53                   	push   ebx
c001117b:	83 ec 14             	sub    esp,0x14
c001117e:	6a 0c                	push   0xc
c0011180:	e8 4e 69 ff ff       	call   c0007ad3 <malloc>
c0011185:	89 c3                	mov    ebx,eax
c0011187:	58                   	pop    eax
c0011188:	5a                   	pop    edx
c0011189:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001118f:	53                   	push   ebx
c0011190:	e8 43 fe ff ff       	call   c0010fd8 <EnvVarContainer::EnvVarContainer(Process*)>
c0011195:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001119b:	83 c4 18             	add    esp,0x18
c001119e:	5b                   	pop    ebx
c001119f:	c3                   	ret    

c00111a0 <KeFlushEnv()>:
c00111a0:	c3                   	ret    

c00111a1 <KeGetProcessTotalEnvCount(Process*)>:
c00111a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a5:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c00111ab:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111b1:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c00111b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00111b8:	03 01                	add    eax,DWORD PTR [ecx]
c00111ba:	85 d2                	test   edx,edx
c00111bc:	74 02                	je     c00111c0 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00111be:	03 02                	add    eax,DWORD PTR [edx]
c00111c0:	c3                   	ret    

c00111c1 <KeGetProcessEnvPair(Process*, int)>:
c00111c1:	57                   	push   edi
c00111c2:	56                   	push   esi
c00111c3:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00111c9:	53                   	push   ebx
c00111ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d2:	85 f6                	test   esi,esi
c00111d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111d8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111de:	8b 01                	mov    eax,DWORD PTR [ecx]
c00111e0:	75 16                	jne    c00111f8 <KeGetProcessEnvPair(Process*, int)+0x37>
c00111e2:	39 c2                	cmp    edx,eax
c00111e4:	7c 16                	jl     c00111fc <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111e6:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00111ec:	8b 31                	mov    esi,DWORD PTR [ecx]
c00111ee:	01 c6                	add    esi,eax
c00111f0:	39 d6                	cmp    esi,edx
c00111f2:	7e 3c                	jle    c0011230 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111f4:	29 c2                	sub    edx,eax
c00111f6:	eb 04                	jmp    c00111fc <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111f8:	39 c2                	cmp    edx,eax
c00111fa:	7d 05                	jge    c0011201 <KeGetProcessEnvPair(Process*, int)+0x40>
c00111fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00111ff:	eb 20                	jmp    c0011221 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011201:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011203:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011206:	39 d1                	cmp    ecx,edx
c0011208:	7e 04                	jle    c001120e <KeGetProcessEnvPair(Process*, int)+0x4d>
c001120a:	29 c2                	sub    edx,eax
c001120c:	eb 10                	jmp    c001121e <KeGetProcessEnvPair(Process*, int)+0x5d>
c001120e:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c0011214:	03 0e                	add    ecx,DWORD PTR [esi]
c0011216:	39 d1                	cmp    ecx,edx
c0011218:	7e 16                	jle    c0011230 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001121a:	29 c2                	sub    edx,eax
c001121c:	29 fa                	sub    edx,edi
c001121e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011221:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011224:	8b 02                	mov    eax,DWORD PTR [edx]
c0011226:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011229:	89 03                	mov    DWORD PTR [ebx],eax
c001122b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001122e:	eb 1d                	jmp    c001124d <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011230:	83 ec 0c             	sub    esp,0xc
c0011233:	68 52 1e 02 c0       	push   0xc0021e52
c0011238:	e8 ac 00 00 00       	call   c00112e9 <KePanic(char const*)>
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011246:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001124d:	89 d8                	mov    eax,ebx
c001124f:	5b                   	pop    ebx
c0011250:	5e                   	pop    esi
c0011251:	5f                   	pop    edi
c0011252:	c2 04 00             	ret    0x4

c0011255 <CPU::current()>:
c0011255:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001125a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011260:	c3                   	ret    

c0011261 <operator new(unsigned long)>:
c0011261:	e9 6d 68 ff ff       	jmp    c0007ad3 <malloc>

c0011266 <operator delete(void*)>:
c0011266:	e9 88 68 ff ff       	jmp    c0007af3 <rfree>

c001126b <disableIRQs()>:
c001126b:	fa                   	cli    
c001126c:	c3                   	ret    

c001126d <enableIRQs()>:
c001126d:	fb                   	sti    
c001126e:	c3                   	ret    

c001126f <lockScheduler()>:
c001126f:	fa                   	cli    
c0011270:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011276:	c3                   	ret    

c0011277 <unlockScheduler()>:
c0011277:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001127c:	48                   	dec    eax
c001127d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011282:	75 01                	jne    c0011285 <unlockScheduler()+0xe>
c0011284:	fb                   	sti    
c0011285:	c3                   	ret    

c0011286 <lockStuff()>:
c0011286:	fa                   	cli    
c0011287:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001128d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011293:	c3                   	ret    

c0011294 <unlockStuff()>:
c0011294:	83 ec 0c             	sub    esp,0xc
c0011297:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001129c:	48                   	dec    eax
c001129d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00112a2:	75 18                	jne    c00112bc <unlockStuff()+0x28>
c00112a4:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00112ab:	74 0f                	je     c00112bc <unlockStuff()+0x28>
c00112ad:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00112b7:	e8 2c 49 00 00       	call   c0015be8 <schedule()>
c00112bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112c1:	48                   	dec    eax
c00112c2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112c7:	75 01                	jne    c00112ca <unlockStuff()+0x36>
c00112c9:	fb                   	sti    
c00112ca:	83 c4 0c             	add    esp,0xc
c00112cd:	c3                   	ret    

c00112ce <Virt::getAKernelVAS()>:
c00112ce:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00112d3:	c3                   	ret    

c00112d4 <__not_memcpy>:
c00112d4:	57                   	push   edi
c00112d5:	56                   	push   esi
c00112d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00112e2:	89 c7                	mov    edi,eax
c00112e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112e6:	5e                   	pop    esi
c00112e7:	5f                   	pop    edi
c00112e8:	c3                   	ret    

c00112e9 <KePanic(char const*)>:
c00112e9:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00112f0:	e9 83 68 00 00       	jmp    c0017b78 <HalPanic(char const*)>

c00112f5 <KePowerThread(void*)>:
c00112f5:	83 ec 0c             	sub    esp,0xc
c00112f8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112fd:	48                   	dec    eax
c00112fe:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011303:	75 01                	jne    c0011306 <KePowerThread(void*)+0x11>
c0011305:	fb                   	sti    
c0011306:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001130d:	83 ec 0c             	sub    esp,0xc
c0011310:	6a 0a                	push   0xa
c0011312:	e8 01 4c 00 00       	call   c0015f18 <sleep(unsigned int)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011321:	eb e3                	jmp    c0011306 <KePowerThread(void*)+0x11>

c0011323 <KeChangePowerSettings(PowerSettings)>:
c0011323:	57                   	push   edi
c0011324:	b9 09 00 00 00       	mov    ecx,0x9
c0011329:	56                   	push   esi
c001132a:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c001132f:	fc                   	cld    
c0011330:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011334:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011336:	5e                   	pop    esi
c0011337:	5f                   	pop    edi
c0011338:	c3                   	ret    

c0011339 <KeUserIOReceived()>:
c0011339:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011343:	c3                   	ret    

c0011344 <KeHandlePowerButton()>:
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c001134c:	83 f8 02             	cmp    eax,0x2
c001134f:	75 10                	jne    c0011361 <KeHandlePowerButton()+0x1d>
c0011351:	83 ec 0c             	sub    esp,0xc
c0011354:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001135a:	e8 eb 5d ff ff       	call   c000714a <Computer::shutdown()>
c001135f:	eb 11                	jmp    c0011372 <KeHandlePowerButton()+0x2e>
c0011361:	48                   	dec    eax
c0011362:	75 11                	jne    c0011375 <KeHandlePowerButton()+0x31>
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001136d:	e8 08 5e ff ff       	call   c000717a <Computer::sleep()>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	83 c4 0c             	add    esp,0xc
c0011378:	c3                   	ret    

c0011379 <KeHandleSleepButton()>:
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011381:	83 f8 02             	cmp    eax,0x2
c0011384:	75 10                	jne    c0011396 <KeHandleSleepButton()+0x1d>
c0011386:	83 ec 0c             	sub    esp,0xc
c0011389:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001138f:	e8 b6 5d ff ff       	call   c000714a <Computer::shutdown()>
c0011394:	eb 11                	jmp    c00113a7 <KeHandleSleepButton()+0x2e>
c0011396:	48                   	dec    eax
c0011397:	75 11                	jne    c00113aa <KeHandleSleepButton()+0x31>
c0011399:	83 ec 0c             	sub    esp,0xc
c001139c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113a2:	e8 d3 5d ff ff       	call   c000717a <Computer::sleep()>
c00113a7:	83 c4 10             	add    esp,0x10
c00113aa:	83 c4 0c             	add    esp,0xc
c00113ad:	c3                   	ret    

c00113ae <KeSetupPowerManager()>:
c00113ae:	83 ec 0c             	sub    esp,0xc
c00113b1:	68 f0 00 00 00       	push   0xf0
c00113b6:	6a 00                	push   0x0
c00113b8:	68 f5 12 01 c0       	push   0xc00112f5
c00113bd:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00113c3:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113cd:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113d4:	e8 c3 45 00 00       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c00113d9:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00113e3:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00113ed:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00113f7:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011401:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c001140b:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c0011415:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c001141f:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011429:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c0011433:	83 c4 1c             	add    esp,0x1c
c0011436:	c3                   	ret    

c0011437 <KeRand()>:
c0011437:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011441:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c001144b:	53                   	push   ebx
c001144c:	01 c1                	add    ecx,eax
c001144e:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011453:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011459:	01 ca                	add    edx,ecx
c001145b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011460:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011465:	83 d2 00             	adc    edx,0x0
c0011468:	0f b7 da             	movzx  ebx,dx
c001146b:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011471:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011475:	5b                   	pop    ebx
c0011476:	c3                   	ret    

c0011477 <KeSeedRand(unsigned int)>:
c0011477:	53                   	push   ebx
c0011478:	83 ec 08             	sub    esp,0x8
c001147b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001147f:	e8 13 6a 00 00       	call   c0017e97 <HalGetRand()>
c0011484:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c001148e:	31 d8                	xor    eax,ebx
c0011490:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011495:	e8 9d ff ff ff       	call   c0011437 <KeRand()>
c001149a:	83 c4 08             	add    esp,0x8
c001149d:	5b                   	pop    ebx
c001149e:	eb 97                	jmp    c0011437 <KeRand()>

c00114a0 <KeInitRand()>:
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	e8 e4 67 00 00       	call   c0017c8c <HalQueryPerformanceCounter()>
c00114a8:	0f 20 da             	mov    edx,cr3
c00114ab:	0f 22 da             	mov    cr3,edx
c00114ae:	0f 20 da             	mov    edx,cr3
c00114b1:	0f 22 da             	mov    cr3,edx
c00114b4:	0f 20 da             	mov    edx,cr3
c00114b7:	0f 22 da             	mov    cr3,edx
c00114ba:	0f 20 da             	mov    edx,cr3
c00114bd:	0f 22 da             	mov    cr3,edx
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00114c8:	50                   	push   eax
c00114c9:	e8 a9 ff ff ff       	call   c0011477 <KeSeedRand(unsigned int)>
c00114ce:	83 c4 1c             	add    esp,0x1c
c00114d1:	c3                   	ret    
c00114d2:	66 90                	xchg   ax,ax

c00114d4 <KeResolveCompatibilitySymbol(char*)>:
c00114d4:	83 ec 0c             	sub    esp,0xc
c00114d7:	83 ec 08             	sub    esp,0x8
c00114da:	68 6c 1e 02 c0       	push   0xc0021e6c
c00114df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e3:	e8 98 f2 fe ff       	call   c0000780 <strcmp>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	85 c0                	test   eax,eax
c00114ed:	0f 94 c0             	sete   al
c00114f0:	0f b6 c0             	movzx  eax,al
c00114f3:	85 c0                	test   eax,eax
c00114f5:	74 0d                	je     c0011504 <KeResolveCompatibilitySymbol(char*)+0x30>
c00114f7:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00114fc:	e9 8b 01 00 00       	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011501:	8d 76 00             	lea    esi,[esi+0x0]
c0011504:	83 ec 08             	sub    esp,0x8
c0011507:	68 75 1e 02 c0       	push   0xc0021e75
c001150c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011510:	e8 6b f2 fe ff       	call   c0000780 <strcmp>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	85 c0                	test   eax,eax
c001151a:	0f 94 c0             	sete   al
c001151d:	0f b6 c0             	movzx  eax,al
c0011520:	85 c0                	test   eax,eax
c0011522:	74 0c                	je     c0011530 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011524:	b8 a0 f2 01 c0       	mov    eax,0xc001f2a0
c0011529:	e9 5e 01 00 00       	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001152e:	66 90                	xchg   ax,ax
c0011530:	83 ec 08             	sub    esp,0x8
c0011533:	68 7f 1e 02 c0       	push   0xc0021e7f
c0011538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153c:	e8 3f f2 fe ff       	call   c0000780 <strcmp>
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	85 c0                	test   eax,eax
c0011546:	0f 94 c0             	sete   al
c0011549:	0f b6 c0             	movzx  eax,al
c001154c:	85 c0                	test   eax,eax
c001154e:	74 0c                	je     c001155c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011550:	b8 d4 ef 01 c0       	mov    eax,0xc001efd4
c0011555:	e9 32 01 00 00       	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001155a:	66 90                	xchg   ax,ax
c001155c:	83 ec 08             	sub    esp,0x8
c001155f:	68 88 1e 02 c0       	push   0xc0021e88
c0011564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011568:	e8 13 f2 fe ff       	call   c0000780 <strcmp>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	85 c0                	test   eax,eax
c0011572:	0f 94 c0             	sete   al
c0011575:	0f b6 c0             	movzx  eax,al
c0011578:	85 c0                	test   eax,eax
c001157a:	74 0c                	je     c0011588 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001157c:	b8 e9 12 01 c0       	mov    eax,0xc00112e9
c0011581:	e9 06 01 00 00       	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011586:	66 90                	xchg   ax,ax
c0011588:	83 ec 08             	sub    esp,0x8
c001158b:	68 9b 1e 02 c0       	push   0xc0021e9b
c0011590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011594:	e8 e7 f1 fe ff       	call   c0000780 <strcmp>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	85 c0                	test   eax,eax
c001159e:	0f 94 c0             	sete   al
c00115a1:	0f b6 c0             	movzx  eax,al
c00115a4:	85 c0                	test   eax,eax
c00115a6:	74 0c                	je     c00115b4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00115a8:	b8 15 0c 01 c0       	mov    eax,0xc0010c15
c00115ad:	e9 da 00 00 00       	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115b2:	66 90                	xchg   ax,ax
c00115b4:	83 ec 08             	sub    esp,0x8
c00115b7:	68 b8 1e 02 c0       	push   0xc0021eb8
c00115bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c0:	e8 bb f1 fe ff       	call   c0000780 <strcmp>
c00115c5:	83 c4 10             	add    esp,0x10
c00115c8:	85 c0                	test   eax,eax
c00115ca:	0f 94 c0             	sete   al
c00115cd:	0f b6 c0             	movzx  eax,al
c00115d0:	85 c0                	test   eax,eax
c00115d2:	74 0c                	je     c00115e0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00115d4:	b8 a0 f3 01 c0       	mov    eax,0xc001f3a0
c00115d9:	e9 ae 00 00 00       	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115de:	66 90                	xchg   ax,ax
c00115e0:	83 ec 08             	sub    esp,0x8
c00115e3:	68 c2 1e 02 c0       	push   0xc0021ec2
c00115e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115ec:	e8 8f f1 fe ff       	call   c0000780 <strcmp>
c00115f1:	83 c4 10             	add    esp,0x10
c00115f4:	85 c0                	test   eax,eax
c00115f6:	0f 94 c0             	sete   al
c00115f9:	0f b6 c0             	movzx  eax,al
c00115fc:	85 c0                	test   eax,eax
c00115fe:	74 0c                	je     c001160c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011600:	b8 20 f1 01 c0       	mov    eax,0xc001f120
c0011605:	e9 82 00 00 00       	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001160a:	66 90                	xchg   ax,ax
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 cb 1e 02 c0       	push   0xc0021ecb
c0011614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011618:	e8 63 f1 fe ff       	call   c0000780 <strcmp>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	85 c0                	test   eax,eax
c0011622:	0f 94 c0             	sete   al
c0011625:	0f b6 c0             	movzx  eax,al
c0011628:	85 c0                	test   eax,eax
c001162a:	74 08                	je     c0011634 <KeResolveCompatibilitySymbol(char*)+0x160>
c001162c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011631:	eb 59                	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011633:	90                   	nop
c0011634:	83 ec 08             	sub    esp,0x8
c0011637:	68 e3 1e 02 c0       	push   0xc0021ee3
c001163c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011640:	e8 3b f1 fe ff       	call   c0000780 <strcmp>
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	85 c0                	test   eax,eax
c001164a:	0f 94 c0             	sete   al
c001164d:	0f b6 c0             	movzx  eax,al
c0011650:	85 c0                	test   eax,eax
c0011652:	74 08                	je     c001165c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011654:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011659:	eb 31                	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001165b:	90                   	nop
c001165c:	83 ec 08             	sub    esp,0x8
c001165f:	68 f0 1e 02 c0       	push   0xc0021ef0
c0011664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011668:	e8 13 f1 fe ff       	call   c0000780 <strcmp>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	85 c0                	test   eax,eax
c0011672:	0f 94 c0             	sete   al
c0011675:	0f b6 c0             	movzx  eax,al
c0011678:	85 c0                	test   eax,eax
c001167a:	74 08                	je     c0011684 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001167c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011681:	eb 09                	jmp    c001168c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011683:	90                   	nop
c0011684:	b8 00 00 00 00       	mov    eax,0x0
c0011689:	8d 76 00             	lea    esi,[esi+0x0]
c001168c:	83 c4 0c             	add    esp,0xc
c001168f:	c3                   	ret    

c0011690 <KiSigKill(int)>:
c0011690:	83 ec 0c             	sub    esp,0xc
c0011693:	6a 00                	push   0x0
c0011695:	6a 00                	push   0x0
c0011697:	6a ff                	push   0xffffffff
c0011699:	6a 01                	push   0x1
c001169b:	e8 b2 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116a0:	83 c4 1c             	add    esp,0x1c
c00116a3:	c3                   	ret    

c00116a4 <KiDefaultSignalHandlerIgnore(int)>:
c00116a4:	c3                   	ret    

c00116a5 <KiDefaultSignalHandlerPause(int)>:
c00116a5:	57                   	push   edi
c00116a6:	b9 07 00 00 00       	mov    ecx,0x7
c00116ab:	56                   	push   esi
c00116ac:	be 39 1f 02 c0       	mov    esi,0xc0021f39
c00116b1:	83 ec 24             	sub    esp,0x24
c00116b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00116b8:	fc                   	cld    
c00116b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116bb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00116bf:	50                   	push   eax
c00116c0:	6a 00                	push   0x0
c00116c2:	6a 00                	push   0x0
c00116c4:	6a 27                	push   0x27
c00116c6:	e8 87 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116cb:	83 c4 34             	add    esp,0x34
c00116ce:	5e                   	pop    esi
c00116cf:	5f                   	pop    edi
c00116d0:	c3                   	ret    

c00116d1 <KiDefaultSignalHandlerResume(int)>:
c00116d1:	57                   	push   edi
c00116d2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00116d7:	56                   	push   esi
c00116d8:	be 55 1f 02 c0       	mov    esi,0xc0021f55
c00116dd:	83 ec 24             	sub    esp,0x24
c00116e0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00116e4:	fc                   	cld    
c00116e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116e7:	8d 44 24 03          	lea    eax,[esp+0x3]
c00116eb:	50                   	push   eax
c00116ec:	6a 00                	push   0x0
c00116ee:	6a 00                	push   0x0
c00116f0:	6a 27                	push   0x27
c00116f2:	e8 5b 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116f7:	83 c4 34             	add    esp,0x34
c00116fa:	5e                   	pop    esi
c00116fb:	5f                   	pop    edi
c00116fc:	c3                   	ret    

c00116fd <KeDeinitSignals(SigHandlerBlock*)>:
c00116fd:	e9 e1 63 ff ff       	jmp    c0007ae3 <free>

c0011702 <KeInitSignals()>:
c0011702:	53                   	push   ebx
c0011703:	83 ec 14             	sub    esp,0x14
c0011706:	68 c8 00 00 00       	push   0xc8
c001170b:	e8 c3 63 ff ff       	call   c0007ad3 <malloc>
c0011710:	83 c4 0c             	add    esp,0xc
c0011713:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001171d:	89 c3                	mov    ebx,eax
c001171f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011729:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001172f:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011733:	6a 20                	push   0x20
c0011735:	6a 00                	push   0x0
c0011737:	50                   	push   eax
c0011738:	e8 b3 ed fe ff       	call   c00004f0 <memset>
c001173d:	83 c4 0c             	add    esp,0xc
c0011740:	6a 44                	push   0x44
c0011742:	6a 00                	push   0x0
c0011744:	53                   	push   ebx
c0011745:	e8 a6 ed fe ff       	call   c00004f0 <memset>
c001174a:	83 c4 18             	add    esp,0x18
c001174d:	89 d8                	mov    eax,ebx
c001174f:	5b                   	pop    ebx
c0011750:	c3                   	ret    

c0011751 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011751:	53                   	push   ebx
c0011752:	b8 01 00 00 00       	mov    eax,0x1
c0011757:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001175b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001175f:	83 f9 10             	cmp    ecx,0x10
c0011762:	7f 21                	jg     c0011785 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011768:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001176b:	89 03                	mov    DWORD PTR [ebx],eax
c001176d:	b8 01 00 00 00       	mov    eax,0x1
c0011772:	d3 e0                	shl    eax,cl
c0011774:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011778:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001177b:	31 c0                	xor    eax,eax
c001177d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011785:	5b                   	pop    ebx
c0011786:	c3                   	ret    

c0011787 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011787:	55                   	push   ebp
c0011788:	57                   	push   edi
c0011789:	bf 08 00 00 00       	mov    edi,0x8
c001178e:	56                   	push   esi
c001178f:	53                   	push   ebx
c0011790:	83 ec 18             	sub    esp,0x18
c0011793:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011797:	68 72 1f 02 c0       	push   0xc0021f72
c001179c:	e8 69 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	31 c9                	xor    ecx,ecx
c00117a6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00117ad:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00117b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00117b7:	99                   	cdq    
c00117b8:	f7 ff                	idiv   edi
c00117ba:	8d 42 24             	lea    eax,[edx+0x24]
c00117bd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00117c1:	85 f6                	test   esi,esi
c00117c3:	75 1a                	jne    c00117df <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00117c5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00117c9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00117cd:	50                   	push   eax
c00117ce:	50                   	push   eax
c00117cf:	52                   	push   edx
c00117d0:	68 83 1f 02 c0       	push   0xc0021f83
c00117d5:	e8 30 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117da:	83 c4 10             	add    esp,0x10
c00117dd:	eb 1b                	jmp    c00117fa <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00117df:	41                   	inc    ecx
c00117e0:	83 f9 08             	cmp    ecx,0x8
c00117e3:	75 ce                	jne    c00117b3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00117e5:	83 ec 0c             	sub    esp,0xc
c00117e8:	be 01 00 00 00       	mov    esi,0x1
c00117ed:	68 a4 1f 02 c0       	push   0xc0021fa4
c00117f2:	e8 13 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00117f7:	83 c4 10             	add    esp,0x10
c00117fa:	83 c4 0c             	add    esp,0xc
c00117fd:	89 f0                	mov    eax,esi
c00117ff:	5b                   	pop    ebx
c0011800:	5e                   	pop    esi
c0011801:	5f                   	pop    edi
c0011802:	5d                   	pop    ebp
c0011803:	c3                   	ret    

c0011804 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011804:	55                   	push   ebp
c0011805:	57                   	push   edi
c0011806:	56                   	push   esi
c0011807:	53                   	push   ebx
c0011808:	51                   	push   ecx
c0011809:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001180d:	85 db                	test   ebx,ebx
c001180f:	0f 84 bc 00 00 00    	je     c00118d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011815:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001181c:	0f 84 af 00 00 00    	je     c00118d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011822:	31 c9                	xor    ecx,ecx
c0011824:	bf 08 00 00 00       	mov    edi,0x8
c0011829:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001182f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011832:	99                   	cdq    
c0011833:	f7 ff                	idiv   edi
c0011835:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c001183c:	85 ed                	test   ebp,ebp
c001183e:	0f 84 9e 00 00 00    	je     c00118e2 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011844:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c001184a:	89 e9                	mov    ecx,ebp
c001184c:	bf 01 00 00 00       	mov    edi,0x1
c0011851:	d3 e7                	shl    edi,cl
c0011853:	31 c9                	xor    ecx,ecx
c0011855:	89 04 24             	mov    DWORD PTR [esp],eax
c0011858:	b8 01 00 00 00       	mov    eax,0x1
c001185d:	d3 e0                	shl    eax,cl
c001185f:	85 04 24             	test   DWORD PTR [esp],eax
c0011862:	74 06                	je     c001186a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011864:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011868:	75 67                	jne    c00118d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001186a:	41                   	inc    ecx
c001186b:	83 f9 11             	cmp    ecx,0x11
c001186e:	75 e8                	jne    c0011858 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011870:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011873:	46                   	inc    esi
c0011874:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001187a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011885:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001188c:	09 f8                	or     eax,edi
c001188e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011894:	31 c0                	xor    eax,eax
c0011896:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001189e:	74 09                	je     c00118a9 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00118a0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00118a7:	eb 06                	jmp    c00118af <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00118a9:	40                   	inc    eax
c00118aa:	83 f8 08             	cmp    eax,0x8
c00118ad:	75 e7                	jne    c0011896 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00118af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00118b3:	83 fd 09             	cmp    ebp,0x9
c00118b6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00118b9:	89 2a                	mov    DWORD PTR [edx],ebp
c00118bb:	75 07                	jne    c00118c4 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00118bd:	b8 90 16 01 c0       	mov    eax,0xc0011690
c00118c2:	eb 31                	jmp    c00118f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118c4:	83 f8 01             	cmp    eax,0x1
c00118c7:	75 0c                	jne    c00118d5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00118c9:	f7 d7                	not    edi
c00118cb:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00118d1:	31 c0                	xor    eax,eax
c00118d3:	eb 20                	jmp    c00118f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118d5:	85 c0                	test   eax,eax
c00118d7:	75 1c                	jne    c00118f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118d9:	8b 04 ad a0 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcc60]
c00118e0:	eb 13                	jmp    c00118f5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118e2:	41                   	inc    ecx
c00118e3:	46                   	inc    esi
c00118e4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118ea:	83 f9 08             	cmp    ecx,0x8
c00118ed:	0f 85 36 ff ff ff    	jne    c0011829 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00118f3:	eb dc                	jmp    c00118d1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118f5:	5a                   	pop    edx
c00118f6:	5b                   	pop    ebx
c00118f7:	5e                   	pop    esi
c00118f8:	5f                   	pop    edi
c00118f9:	5d                   	pop    ebp
c00118fa:	c3                   	ret    

c00118fb <KiCheckSignalZ>:
c00118fb:	83 ec 10             	sub    esp,0x10
c00118fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011902:	50                   	push   eax
c0011903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011908:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001190b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011911:	e8 ee fe ff ff       	call   c0011804 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011916:	5a                   	pop    edx
c0011917:	31 d2                	xor    edx,edx
c0011919:	59                   	pop    ecx
c001191a:	85 c0                	test   eax,eax
c001191c:	74 19                	je     c0011937 <KiCheckSignalZ+0x3c>
c001191e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011924:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011927:	89 02                	mov    DWORD PTR [edx],eax
c0011929:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011934:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011937:	89 d0                	mov    eax,edx
c0011939:	83 c4 10             	add    esp,0x10
c001193c:	c3                   	ret    

c001193d <KeCompleteSignal(SigHandlerBlock*, int)>:
c001193d:	56                   	push   esi
c001193e:	53                   	push   ebx
c001193f:	bb 01 00 00 00       	mov    ebx,0x1
c0011944:	52                   	push   edx
c0011945:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011949:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001194d:	d3 e3                	shl    ebx,cl
c001194f:	83 f9 10             	cmp    ecx,0x10
c0011952:	7f 08                	jg     c001195c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011954:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001195a:	75 10                	jne    c001196c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001195c:	83 ec 0c             	sub    esp,0xc
c001195f:	68 b5 1f 02 c0       	push   0xc0021fb5
c0011964:	e8 80 f9 ff ff       	call   c00112e9 <KePanic(char const*)>
c0011969:	83 c4 10             	add    esp,0x10
c001196c:	f7 d3                	not    ebx
c001196e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011974:	58                   	pop    eax
c0011975:	5b                   	pop    ebx
c0011976:	5e                   	pop    esi
c0011977:	c3                   	ret    

c0011978 <KiFinishSignalZ>:
c0011978:	53                   	push   ebx
c0011979:	83 ec 10             	sub    esp,0x10
c001197c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011980:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001198b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011991:	e8 a7 ff ff ff       	call   c001193d <KeCompleteSignal(SigHandlerBlock*, int)>
c0011996:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001199c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00119a3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00119aa:	83 c4 18             	add    esp,0x18
c00119ad:	5b                   	pop    ebx
c00119ae:	c3                   	ret    

c00119af <SysSeekDir(regs*)>:
c00119af:	31 c0                	xor    eax,eax
c00119b1:	31 d2                	xor    edx,edx
c00119b3:	c3                   	ret    

c00119b4 <SysTellDir(regs*)>:
c00119b4:	31 c0                	xor    eax,eax
c00119b6:	31 d2                	xor    edx,edx
c00119b8:	c3                   	ret    

c00119b9 <SysVerify(regs*)>:
c00119b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119bd:	31 d2                	xor    edx,edx
c00119bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119c2:	c3                   	ret    

c00119c3 <SysGetArgc(regs*)>:
c00119c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119cb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00119d1:	89 c2                	mov    edx,eax
c00119d3:	c1 fa 1f             	sar    edx,0x1f
c00119d6:	c3                   	ret    

c00119d7 <SysTTYName(regs*)>:
c00119d7:	b8 01 00 00 00       	mov    eax,0x1
c00119dc:	31 d2                	xor    edx,edx
c00119de:	c3                   	ret    

c00119df <SysFormatDisk(regs*)>:
c00119df:	56                   	push   esi
c00119e0:	53                   	push   ebx
c00119e1:	83 ec 04             	sub    esp,0x4
c00119e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119e8:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00119ee:	eb 2a                	jmp    c0011a1a <SysFormatDisk(regs*)+0x3b>
c00119f0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00119f3:	83 ec 0c             	sub    esp,0xc
c00119f6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119f9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119fb:	51                   	push   ecx
c00119fc:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00119ff:	51                   	push   ecx
c0011a00:	50                   	push   eax
c0011a01:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a08:	50                   	push   eax
c0011a09:	53                   	push   ebx
c0011a0a:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a0d:	83 c4 20             	add    esp,0x20
c0011a10:	83 f8 08             	cmp    eax,0x8
c0011a13:	89 c1                	mov    ecx,eax
c0011a15:	75 14                	jne    c0011a2b <SysFormatDisk(regs*)+0x4c>
c0011a17:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a1a:	85 db                	test   ebx,ebx
c0011a1c:	75 d2                	jne    c00119f0 <SysFormatDisk(regs*)+0x11>
c0011a1e:	b8 03 00 00 00       	mov    eax,0x3
c0011a23:	31 d2                	xor    edx,edx
c0011a25:	83 c4 04             	add    esp,0x4
c0011a28:	5b                   	pop    ebx
c0011a29:	5e                   	pop    esi
c0011a2a:	c3                   	ret    
c0011a2b:	85 c0                	test   eax,eax
c0011a2d:	74 13                	je     c0011a42 <SysFormatDisk(regs*)+0x63>
c0011a2f:	31 d2                	xor    edx,edx
c0011a31:	83 f9 09             	cmp    ecx,0x9
c0011a34:	b8 01 00 00 00       	mov    eax,0x1
c0011a39:	74 ea                	je     c0011a25 <SysFormatDisk(regs*)+0x46>
c0011a3b:	b8 02 00 00 00       	mov    eax,0x2
c0011a40:	eb e1                	jmp    c0011a23 <SysFormatDisk(regs*)+0x44>
c0011a42:	31 c0                	xor    eax,eax
c0011a44:	eb dd                	jmp    c0011a23 <SysFormatDisk(regs*)+0x44>

c0011a46 <SysSetDiskVolumeLabel(regs*)>:
c0011a46:	56                   	push   esi
c0011a47:	53                   	push   ebx
c0011a48:	83 ec 04             	sub    esp,0x4
c0011a4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a4f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a52:	83 f8 19             	cmp    eax,0x19
c0011a55:	77 33                	ja     c0011a8a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a57:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a5e:	85 c9                	test   ecx,ecx
c0011a60:	74 28                	je     c0011a8a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a62:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a65:	85 db                	test   ebx,ebx
c0011a67:	74 21                	je     c0011a8a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a69:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a6f:	85 d2                	test   edx,edx
c0011a71:	74 17                	je     c0011a8a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a73:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a75:	53                   	push   ebx
c0011a76:	50                   	push   eax
c0011a77:	51                   	push   ecx
c0011a78:	52                   	push   edx
c0011a79:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a7c:	83 c4 10             	add    esp,0x10
c0011a7f:	83 c4 04             	add    esp,0x4
c0011a82:	5b                   	pop    ebx
c0011a83:	5e                   	pop    esi
c0011a84:	89 c2                	mov    edx,eax
c0011a86:	c1 fa 1f             	sar    edx,0x1f
c0011a89:	c3                   	ret    
c0011a8a:	83 c4 04             	add    esp,0x4
c0011a8d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a92:	5b                   	pop    ebx
c0011a93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a98:	5e                   	pop    esi
c0011a99:	c3                   	ret    

c0011a9a <SysGetDiskVolumeLabel(regs*)>:
c0011a9a:	57                   	push   edi
c0011a9b:	56                   	push   esi
c0011a9c:	53                   	push   ebx
c0011a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aa1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011aa4:	83 fa 19             	cmp    edx,0x19
c0011aa7:	77 3c                	ja     c0011ae5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011aa9:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011ab0:	85 c9                	test   ecx,ecx
c0011ab2:	74 31                	je     c0011ae5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ab4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ab7:	85 db                	test   ebx,ebx
c0011ab9:	74 2a                	je     c0011ae5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011abb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011abe:	85 f6                	test   esi,esi
c0011ac0:	74 23                	je     c0011ae5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ac2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ac8:	85 c0                	test   eax,eax
c0011aca:	74 19                	je     c0011ae5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011acc:	83 ec 0c             	sub    esp,0xc
c0011acf:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ad1:	56                   	push   esi
c0011ad2:	53                   	push   ebx
c0011ad3:	52                   	push   edx
c0011ad4:	51                   	push   ecx
c0011ad5:	50                   	push   eax
c0011ad6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ad9:	83 c4 20             	add    esp,0x20
c0011adc:	5b                   	pop    ebx
c0011add:	5e                   	pop    esi
c0011ade:	89 c2                	mov    edx,eax
c0011ae0:	c1 fa 1f             	sar    edx,0x1f
c0011ae3:	5f                   	pop    edi
c0011ae4:	c3                   	ret    
c0011ae5:	5b                   	pop    ebx
c0011ae6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011aeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011af0:	5e                   	pop    esi
c0011af1:	5f                   	pop    edi
c0011af2:	c3                   	ret    

c0011af3 <SysShutdown(regs*)>:
c0011af3:	57                   	push   edi
c0011af4:	56                   	push   esi
c0011af5:	83 ec 04             	sub    esp,0x4
c0011af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011afc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011aff:	85 c0                	test   eax,eax
c0011b01:	74 1e                	je     c0011b21 <SysShutdown(regs*)+0x2e>
c0011b03:	83 f8 01             	cmp    eax,0x1
c0011b06:	74 5f                	je     c0011b67 <SysShutdown(regs*)+0x74>
c0011b08:	83 f8 02             	cmp    eax,0x2
c0011b0b:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b10:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b15:	74 32                	je     c0011b49 <SysShutdown(regs*)+0x56>
c0011b17:	83 c4 04             	add    esp,0x4
c0011b1a:	89 f0                	mov    eax,esi
c0011b1c:	5e                   	pop    esi
c0011b1d:	89 fa                	mov    edx,edi
c0011b1f:	5f                   	pop    edi
c0011b20:	c3                   	ret    
c0011b21:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b26:	be ff ff ff ff       	mov    esi,0xffffffff
c0011b2b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011b30:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b32:	6a 00                	push   0x0
c0011b34:	6a 00                	push   0x0
c0011b36:	6a 00                	push   0x0
c0011b38:	50                   	push   eax
c0011b39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b3c:	83 c4 10             	add    esp,0x10
c0011b3f:	89 f0                	mov    eax,esi
c0011b41:	83 c4 04             	add    esp,0x4
c0011b44:	89 fa                	mov    edx,edi
c0011b46:	5e                   	pop    esi
c0011b47:	5f                   	pop    edi
c0011b48:	c3                   	ret    
c0011b49:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b50:	6a 00                	push   0x0
c0011b52:	6a 00                	push   0x0
c0011b54:	6a 01                	push   0x1
c0011b56:	50                   	push   eax
c0011b57:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	89 f0                	mov    eax,esi
c0011b5f:	83 c4 04             	add    esp,0x4
c0011b62:	89 fa                	mov    edx,edi
c0011b64:	5e                   	pop    esi
c0011b65:	5f                   	pop    edi
c0011b66:	c3                   	ret    
c0011b67:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b6c:	85 c0                	test   eax,eax
c0011b6e:	74 02                	je     c0011b72 <SysShutdown(regs*)+0x7f>
c0011b70:	ff d0                	call   eax
c0011b72:	31 f6                	xor    esi,esi
c0011b74:	83 c4 04             	add    esp,0x4
c0011b77:	89 f0                	mov    eax,esi
c0011b79:	31 ff                	xor    edi,edi
c0011b7b:	5e                   	pop    esi
c0011b7c:	89 fa                	mov    edx,edi
c0011b7e:	5f                   	pop    edi
c0011b7f:	c3                   	ret    

c0011b80 <SysRealpath(regs*)>:
c0011b80:	53                   	push   ebx
c0011b81:	83 ec 08             	sub    esp,0x8
c0011b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b88:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011b8b:	85 c9                	test   ecx,ecx
c0011b8d:	74 36                	je     c0011bc5 <SysRealpath(regs*)+0x45>
c0011b8f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b92:	31 d2                	xor    edx,edx
c0011b94:	b8 01 00 00 00       	mov    eax,0x1
c0011b99:	85 db                	test   ebx,ebx
c0011b9b:	75 05                	jne    c0011ba2 <SysRealpath(regs*)+0x22>
c0011b9d:	83 c4 08             	add    esp,0x8
c0011ba0:	5b                   	pop    ebx
c0011ba1:	c3                   	ret    
c0011ba2:	6a 00                	push   0x0
c0011ba4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bac:	05 0c 01 00 00       	add    eax,0x10c
c0011bb1:	50                   	push   eax
c0011bb2:	51                   	push   ecx
c0011bb3:	53                   	push   ebx
c0011bb4:	e8 f3 99 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	31 c0                	xor    eax,eax
c0011bbe:	31 d2                	xor    edx,edx
c0011bc0:	83 c4 08             	add    esp,0x8
c0011bc3:	5b                   	pop    ebx
c0011bc4:	c3                   	ret    
c0011bc5:	b8 01 00 00 00       	mov    eax,0x1
c0011bca:	31 d2                	xor    edx,edx
c0011bcc:	eb f2                	jmp    c0011bc0 <SysRealpath(regs*)+0x40>

c0011bce <SysReadDir(regs*)>:
c0011bce:	53                   	push   ebx
c0011bcf:	83 ec 18             	sub    esp,0x18
c0011bd2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bd6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bd9:	83 f8 02             	cmp    eax,0x2
c0011bdc:	76 4f                	jbe    c0011c2d <SysReadDir(regs*)+0x5f>
c0011bde:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011be5:	77 52                	ja     c0011c39 <SysReadDir(regs*)+0x6b>
c0011be7:	83 ec 0c             	sub    esp,0xc
c0011bea:	50                   	push   eax
c0011beb:	e8 ab 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011bf0:	83 c4 10             	add    esp,0x10
c0011bf3:	85 c0                	test   eax,eax
c0011bf5:	74 42                	je     c0011c39 <SysReadDir(regs*)+0x6b>
c0011bf7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bff:	83 ec 0c             	sub    esp,0xc
c0011c02:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c06:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c08:	51                   	push   ecx
c0011c09:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c0c:	51                   	push   ecx
c0011c0d:	6a 00                	push   0x0
c0011c0f:	68 10 01 00 00       	push   0x110
c0011c14:	50                   	push   eax
c0011c15:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c18:	83 c4 20             	add    esp,0x20
c0011c1b:	85 c0                	test   eax,eax
c0011c1d:	89 c1                	mov    ecx,eax
c0011c1f:	74 27                	je     c0011c48 <SysReadDir(regs*)+0x7a>
c0011c21:	31 d2                	xor    edx,edx
c0011c23:	83 f9 07             	cmp    ecx,0x7
c0011c26:	b8 02 00 00 00       	mov    eax,0x2
c0011c2b:	75 16                	jne    c0011c43 <SysReadDir(regs*)+0x75>
c0011c2d:	b8 01 00 00 00       	mov    eax,0x1
c0011c32:	31 d2                	xor    edx,edx
c0011c34:	83 c4 18             	add    esp,0x18
c0011c37:	5b                   	pop    ebx
c0011c38:	c3                   	ret    
c0011c39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c43:	83 c4 18             	add    esp,0x18
c0011c46:	5b                   	pop    ebx
c0011c47:	c3                   	ret    
c0011c48:	31 c0                	xor    eax,eax
c0011c4a:	31 d2                	xor    edx,edx
c0011c4c:	eb e6                	jmp    c0011c34 <SysReadDir(regs*)+0x66>

c0011c4e <SysIsATTY(regs*)>:
c0011c4e:	83 ec 0c             	sub    esp,0xc
c0011c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c55:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c58:	83 f8 02             	cmp    eax,0x2
c0011c5b:	76 07                	jbe    c0011c64 <SysIsATTY(regs*)+0x16>
c0011c5d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c62:	75 26                	jne    c0011c8a <SysIsATTY(regs*)+0x3c>
c0011c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c6c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c72:	85 c0                	test   eax,eax
c0011c74:	74 24                	je     c0011c9a <SysIsATTY(regs*)+0x4c>
c0011c76:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c78:	83 ec 0c             	sub    esp,0xc
c0011c7b:	50                   	push   eax
c0011c7c:	ff 12                	call   DWORD PTR [edx]
c0011c7e:	83 c4 10             	add    esp,0x10
c0011c81:	31 d2                	xor    edx,edx
c0011c83:	83 c4 0c             	add    esp,0xc
c0011c86:	0f b6 c0             	movzx  eax,al
c0011c89:	c3                   	ret    
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	50                   	push   eax
c0011c8e:	e8 08 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c93:	83 c4 10             	add    esp,0x10
c0011c96:	85 c0                	test   eax,eax
c0011c98:	75 dc                	jne    c0011c76 <SysIsATTY(regs*)+0x28>
c0011c9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ca4:	83 c4 0c             	add    esp,0xc
c0011ca7:	c3                   	ret    

c0011ca8 <SysSeek(regs*)>:
c0011ca8:	56                   	push   esi
c0011ca9:	53                   	push   ebx
c0011caa:	83 ec 04             	sub    esp,0x4
c0011cad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cb1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cb4:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011cb7:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011cbd:	77 33                	ja     c0011cf2 <SysSeek(regs*)+0x4a>
c0011cbf:	83 ec 0c             	sub    esp,0xc
c0011cc2:	51                   	push   ecx
c0011cc3:	e8 d3 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011cc8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011ccb:	83 c4 0c             	add    esp,0xc
c0011cce:	31 db                	xor    ebx,ebx
c0011cd0:	53                   	push   ebx
c0011cd1:	51                   	push   ecx
c0011cd2:	50                   	push   eax
c0011cd3:	e8 d0 9c ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0011cd8:	83 c4 10             	add    esp,0x10
c0011cdb:	85 c0                	test   eax,eax
c0011cdd:	0f 95 c0             	setne  al
c0011ce0:	31 d2                	xor    edx,edx
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	f7 d8                	neg    eax
c0011ce7:	83 d2 00             	adc    edx,0x0
c0011cea:	83 c4 04             	add    esp,0x4
c0011ced:	5b                   	pop    ebx
c0011cee:	f7 da                	neg    edx
c0011cf0:	5e                   	pop    esi
c0011cf1:	c3                   	ret    
c0011cf2:	83 c4 04             	add    esp,0x4
c0011cf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cfa:	5b                   	pop    ebx
c0011cfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d00:	5e                   	pop    esi
c0011d01:	c3                   	ret    

c0011d02 <SysTell(regs*)>:
c0011d02:	53                   	push   ebx
c0011d03:	83 ec 08             	sub    esp,0x8
c0011d06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d0a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d0d:	83 f8 02             	cmp    eax,0x2
c0011d10:	76 4e                	jbe    c0011d60 <SysTell(regs*)+0x5e>
c0011d12:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d17:	76 19                	jbe    c0011d32 <SysTell(regs*)+0x30>
c0011d19:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d1c:	31 d2                	xor    edx,edx
c0011d1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d2b:	83 c4 08             	add    esp,0x8
c0011d2e:	31 c0                	xor    eax,eax
c0011d30:	5b                   	pop    ebx
c0011d31:	c3                   	ret    
c0011d32:	83 ec 0c             	sub    esp,0xc
c0011d35:	50                   	push   eax
c0011d36:	e8 60 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d3b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d3e:	5a                   	pop    edx
c0011d3f:	59                   	pop    ecx
c0011d40:	53                   	push   ebx
c0011d41:	50                   	push   eax
c0011d42:	e8 0d 9d ff ff       	call   c000ba54 <File::tell(unsigned long long*)>
c0011d47:	83 c4 10             	add    esp,0x10
c0011d4a:	85 c0                	test   eax,eax
c0011d4c:	0f 95 c0             	setne  al
c0011d4f:	31 d2                	xor    edx,edx
c0011d51:	0f b6 c0             	movzx  eax,al
c0011d54:	f7 d8                	neg    eax
c0011d56:	83 d2 00             	adc    edx,0x0
c0011d59:	83 c4 08             	add    esp,0x8
c0011d5c:	5b                   	pop    ebx
c0011d5d:	f7 da                	neg    edx
c0011d5f:	c3                   	ret    
c0011d60:	83 c4 08             	add    esp,0x8
c0011d63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d68:	5b                   	pop    ebx
c0011d69:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d6e:	c3                   	ret    

c0011d6f <SysSize(regs*)>:
c0011d6f:	53                   	push   ebx
c0011d70:	83 ec 18             	sub    esp,0x18
c0011d73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d77:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d7a:	83 f8 02             	cmp    eax,0x2
c0011d7d:	76 54                	jbe    c0011dd3 <SysSize(regs*)+0x64>
c0011d7f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d84:	76 19                	jbe    c0011d9f <SysSize(regs*)+0x30>
c0011d86:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d89:	31 d2                	xor    edx,edx
c0011d8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d98:	83 c4 18             	add    esp,0x18
c0011d9b:	31 c0                	xor    eax,eax
c0011d9d:	5b                   	pop    ebx
c0011d9e:	c3                   	ret    
c0011d9f:	83 ec 0c             	sub    esp,0xc
c0011da2:	50                   	push   eax
c0011da3:	e8 f3 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011da8:	83 c4 0c             	add    esp,0xc
c0011dab:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011daf:	52                   	push   edx
c0011db0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011db3:	52                   	push   edx
c0011db4:	50                   	push   eax
c0011db5:	e8 32 9e ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c0011dba:	83 c4 10             	add    esp,0x10
c0011dbd:	85 c0                	test   eax,eax
c0011dbf:	0f 95 c0             	setne  al
c0011dc2:	31 d2                	xor    edx,edx
c0011dc4:	0f b6 c0             	movzx  eax,al
c0011dc7:	f7 d8                	neg    eax
c0011dc9:	83 d2 00             	adc    edx,0x0
c0011dcc:	83 c4 18             	add    esp,0x18
c0011dcf:	5b                   	pop    ebx
c0011dd0:	f7 da                	neg    edx
c0011dd2:	c3                   	ret    
c0011dd3:	83 c4 18             	add    esp,0x18
c0011dd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ddb:	5b                   	pop    ebx
c0011ddc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011de1:	c3                   	ret    

c0011de2 <SysSizeFromFilename(regs*)>:
c0011de2:	57                   	push   edi
c0011de3:	56                   	push   esi
c0011de4:	53                   	push   ebx
c0011de5:	83 ec 10             	sub    esp,0x10
c0011de8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011dec:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011def:	83 fb 02             	cmp    ebx,0x2
c0011df2:	0f 86 83 00 00 00    	jbe    c0011e7b <SysSizeFromFilename(regs*)+0x99>
c0011df8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011dfe:	76 1b                	jbe    c0011e1b <SysSizeFromFilename(regs*)+0x39>
c0011e00:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e03:	31 d2                	xor    edx,edx
c0011e05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	31 c0                	xor    eax,eax
c0011e17:	5b                   	pop    ebx
c0011e18:	5e                   	pop    esi
c0011e19:	5f                   	pop    edi
c0011e1a:	c3                   	ret    
c0011e1b:	83 ec 0c             	sub    esp,0xc
c0011e1e:	68 14 01 00 00       	push   0x114
c0011e23:	e8 ab 5c ff ff       	call   c0007ad3 <malloc>
c0011e28:	83 c4 0c             	add    esp,0xc
c0011e2b:	89 c7                	mov    edi,eax
c0011e2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e35:	50                   	push   eax
c0011e36:	53                   	push   ebx
c0011e37:	57                   	push   edi
c0011e38:	e8 e5 99 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0011e3d:	83 c4 0c             	add    esp,0xc
c0011e40:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011e44:	50                   	push   eax
c0011e45:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011e48:	52                   	push   edx
c0011e49:	57                   	push   edi
c0011e4a:	e8 9d 9d ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	85 ff                	test   edi,edi
c0011e54:	89 c3                	mov    ebx,eax
c0011e56:	74 0c                	je     c0011e64 <SysSizeFromFilename(regs*)+0x82>
c0011e58:	8b 07                	mov    eax,DWORD PTR [edi]
c0011e5a:	83 ec 0c             	sub    esp,0xc
c0011e5d:	57                   	push   edi
c0011e5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e61:	83 c4 10             	add    esp,0x10
c0011e64:	31 c0                	xor    eax,eax
c0011e66:	85 db                	test   ebx,ebx
c0011e68:	0f 95 c0             	setne  al
c0011e6b:	31 d2                	xor    edx,edx
c0011e6d:	f7 d8                	neg    eax
c0011e6f:	83 d2 00             	adc    edx,0x0
c0011e72:	83 c4 10             	add    esp,0x10
c0011e75:	5b                   	pop    ebx
c0011e76:	f7 da                	neg    edx
c0011e78:	5e                   	pop    esi
c0011e79:	5f                   	pop    edi
c0011e7a:	c3                   	ret    
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e83:	5b                   	pop    ebx
c0011e84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e89:	5e                   	pop    esi
c0011e8a:	5f                   	pop    edi
c0011e8b:	c3                   	ret    

c0011e8c <SysClose(regs*)>:
c0011e8c:	53                   	push   ebx
c0011e8d:	83 ec 08             	sub    esp,0x8
c0011e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e97:	83 f8 02             	cmp    eax,0x2
c0011e9a:	76 41                	jbe    c0011edd <SysClose(regs*)+0x51>
c0011e9c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011ea2:	83 fa 01             	cmp    edx,0x1
c0011ea5:	76 2d                	jbe    c0011ed4 <SysClose(regs*)+0x48>
c0011ea7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011eac:	77 2f                	ja     c0011edd <SysClose(regs*)+0x51>
c0011eae:	83 ec 0c             	sub    esp,0xc
c0011eb1:	50                   	push   eax
c0011eb2:	e8 e4 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011eb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011eba:	89 c3                	mov    ebx,eax
c0011ebc:	e8 87 9a ff ff       	call   c000b948 <File::close()>
c0011ec1:	83 c4 10             	add    esp,0x10
c0011ec4:	85 db                	test   ebx,ebx
c0011ec6:	74 0c                	je     c0011ed4 <SysClose(regs*)+0x48>
c0011ec8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	53                   	push   ebx
c0011ece:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	83 c4 08             	add    esp,0x8
c0011ed7:	31 c0                	xor    eax,eax
c0011ed9:	5b                   	pop    ebx
c0011eda:	31 d2                	xor    edx,edx
c0011edc:	c3                   	ret    
c0011edd:	83 c4 08             	add    esp,0x8
c0011ee0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee5:	5b                   	pop    ebx
c0011ee6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eeb:	c3                   	ret    

c0011eec <SysOpenDir(regs*)>:
c0011eec:	56                   	push   esi
c0011eed:	53                   	push   ebx
c0011eee:	83 ec 04             	sub    esp,0x4
c0011ef1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ef5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ef8:	85 c9                	test   ecx,ecx
c0011efa:	74 5d                	je     c0011f59 <SysOpenDir(regs*)+0x6d>
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	68 14 01 00 00       	push   0x114
c0011f04:	e8 ca 5b ff ff       	call   c0007ad3 <malloc>
c0011f09:	83 c4 0c             	add    esp,0xc
c0011f0c:	89 c6                	mov    esi,eax
c0011f0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f16:	50                   	push   eax
c0011f17:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f1a:	52                   	push   edx
c0011f1b:	56                   	push   esi
c0011f1c:	e8 8b 9e ff ff       	call   c000bdac <Directory::Directory(char const*, Process*)>
c0011f21:	83 c4 10             	add    esp,0x10
c0011f24:	85 f6                	test   esi,esi
c0011f26:	74 31                	je     c0011f59 <SysOpenDir(regs*)+0x6d>
c0011f28:	83 ec 0c             	sub    esp,0xc
c0011f2b:	56                   	push   esi
c0011f2c:	e8 43 9f ff ff       	call   c000be74 <Directory::open()>
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	85 c0                	test   eax,eax
c0011f36:	75 21                	jne    c0011f59 <SysOpenDir(regs*)+0x6d>
c0011f38:	83 ec 0c             	sub    esp,0xc
c0011f3b:	56                   	push   esi
c0011f3c:	e8 5d 72 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011f41:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f44:	83 c4 10             	add    esp,0x10
c0011f47:	89 02                	mov    DWORD PTR [edx],eax
c0011f49:	c1 f8 1f             	sar    eax,0x1f
c0011f4c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f4f:	83 c4 04             	add    esp,0x4
c0011f52:	31 c0                	xor    eax,eax
c0011f54:	5b                   	pop    ebx
c0011f55:	31 d2                	xor    edx,edx
c0011f57:	5e                   	pop    esi
c0011f58:	c3                   	ret    
c0011f59:	83 c4 04             	add    esp,0x4
c0011f5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f61:	5b                   	pop    ebx
c0011f62:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f67:	5e                   	pop    esi
c0011f68:	c3                   	ret    

c0011f69 <SysMakeDir(regs*)>:
c0011f69:	56                   	push   esi
c0011f6a:	53                   	push   ebx
c0011f6b:	83 ec 10             	sub    esp,0x10
c0011f6e:	68 14 01 00 00       	push   0x114
c0011f73:	e8 5b 5b ff ff       	call   c0007ad3 <malloc>
c0011f78:	83 c4 0c             	add    esp,0xc
c0011f7b:	89 c3                	mov    ebx,eax
c0011f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f85:	50                   	push   eax
c0011f86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f8a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011f8d:	52                   	push   edx
c0011f8e:	53                   	push   ebx
c0011f8f:	e8 18 9e ff ff       	call   c000bdac <Directory::Directory(char const*, Process*)>
c0011f94:	83 c4 10             	add    esp,0x10
c0011f97:	85 db                	test   ebx,ebx
c0011f99:	74 2c                	je     c0011fc7 <SysMakeDir(regs*)+0x5e>
c0011f9b:	83 ec 0c             	sub    esp,0xc
c0011f9e:	53                   	push   ebx
c0011f9f:	e8 b0 a0 ff ff       	call   c000c054 <Directory::create()>
c0011fa4:	89 c6                	mov    esi,eax
c0011fa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011fae:	83 c4 10             	add    esp,0x10
c0011fb1:	31 c0                	xor    eax,eax
c0011fb3:	85 f6                	test   esi,esi
c0011fb5:	0f 95 c0             	setne  al
c0011fb8:	31 d2                	xor    edx,edx
c0011fba:	f7 d8                	neg    eax
c0011fbc:	83 d2 00             	adc    edx,0x0
c0011fbf:	83 c4 04             	add    esp,0x4
c0011fc2:	5b                   	pop    ebx
c0011fc3:	f7 da                	neg    edx
c0011fc5:	5e                   	pop    esi
c0011fc6:	c3                   	ret    
c0011fc7:	83 c4 04             	add    esp,0x4
c0011fca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fcf:	5b                   	pop    ebx
c0011fd0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fd5:	5e                   	pop    esi
c0011fd6:	c3                   	ret    

c0011fd7 <SysCloseDir(regs*)>:
c0011fd7:	53                   	push   ebx
c0011fd8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fdd:	83 ec 08             	sub    esp,0x8
c0011fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fe4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011fe7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fec:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011fef:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011ff5:	77 2a                	ja     c0012021 <SysCloseDir(regs*)+0x4a>
c0011ff7:	83 ec 0c             	sub    esp,0xc
c0011ffa:	51                   	push   ecx
c0011ffb:	e8 9b 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012000:	89 04 24             	mov    DWORD PTR [esp],eax
c0012003:	89 c3                	mov    ebx,eax
c0012005:	e8 c6 9e ff ff       	call   c000bed0 <Directory::close()>
c001200a:	83 c4 10             	add    esp,0x10
c001200d:	85 db                	test   ebx,ebx
c001200f:	74 0c                	je     c001201d <SysCloseDir(regs*)+0x46>
c0012011:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012013:	83 ec 0c             	sub    esp,0xc
c0012016:	53                   	push   ebx
c0012017:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001201a:	83 c4 10             	add    esp,0x10
c001201d:	31 c0                	xor    eax,eax
c001201f:	31 d2                	xor    edx,edx
c0012021:	83 c4 08             	add    esp,0x8
c0012024:	5b                   	pop    ebx
c0012025:	c3                   	ret    

c0012026 <SysWait(regs*)>:
c0012026:	83 ec 10             	sub    esp,0x10
c0012029:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001202d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012030:	52                   	push   edx
c0012031:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012034:	51                   	push   ecx
c0012035:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012038:	50                   	push   eax
c0012039:	e8 e2 3d 00 00       	call   c0015e20 <waitTask(int, int*, int)>
c001203e:	83 c4 1c             	add    esp,0x1c
c0012041:	89 c2                	mov    edx,eax
c0012043:	c1 fa 1f             	sar    edx,0x1f
c0012046:	c3                   	ret    

c0012047 <SysNotImpl(regs*)>:
c0012047:	83 ec 18             	sub    esp,0x18
c001204a:	68 c6 1f 02 c0       	push   0xc0021fc6
c001204f:	e8 95 f2 ff ff       	call   c00112e9 <KePanic(char const*)>
c0012054:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012059:	ba ff ff ff ff       	mov    edx,0xffffffff
c001205e:	83 c4 1c             	add    esp,0x1c
c0012061:	c3                   	ret    

c0012062 <SysPanic(regs*)>:
c0012062:	83 ec 18             	sub    esp,0x18
c0012065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012069:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001206c:	50                   	push   eax
c001206d:	e8 77 f2 ff ff       	call   c00112e9 <KePanic(char const*)>
c0012072:	b8 01 00 00 00       	mov    eax,0x1
c0012077:	31 d2                	xor    edx,edx
c0012079:	83 c4 1c             	add    esp,0x1c
c001207c:	c3                   	ret    

c001207d <SysRmdir(regs*)>:
c001207d:	56                   	push   esi
c001207e:	53                   	push   ebx
c001207f:	83 ec 10             	sub    esp,0x10
c0012082:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012086:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012089:	68 14 01 00 00       	push   0x114
c001208e:	e8 40 5a ff ff       	call   c0007ad3 <malloc>
c0012093:	83 c4 0c             	add    esp,0xc
c0012096:	89 c3                	mov    ebx,eax
c0012098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001209d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120a0:	50                   	push   eax
c00120a1:	56                   	push   esi
c00120a2:	53                   	push   ebx
c00120a3:	e8 7a 97 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c00120a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120ab:	e8 08 9a ff ff       	call   c000bab8 <File::unlink()>
c00120b0:	83 c4 10             	add    esp,0x10
c00120b3:	85 db                	test   ebx,ebx
c00120b5:	89 c6                	mov    esi,eax
c00120b7:	74 0c                	je     c00120c5 <SysRmdir(regs*)+0x48>
c00120b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120bb:	83 ec 0c             	sub    esp,0xc
c00120be:	53                   	push   ebx
c00120bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120c2:	83 c4 10             	add    esp,0x10
c00120c5:	31 c0                	xor    eax,eax
c00120c7:	85 f6                	test   esi,esi
c00120c9:	0f 95 c0             	setne  al
c00120cc:	31 d2                	xor    edx,edx
c00120ce:	f7 d8                	neg    eax
c00120d0:	83 d2 00             	adc    edx,0x0
c00120d3:	83 c4 04             	add    esp,0x4
c00120d6:	5b                   	pop    ebx
c00120d7:	f7 da                	neg    edx
c00120d9:	5e                   	pop    esi
c00120da:	c3                   	ret    

c00120db <SysUnlink(regs*)>:
c00120db:	56                   	push   esi
c00120dc:	53                   	push   ebx
c00120dd:	83 ec 10             	sub    esp,0x10
c00120e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00120e4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00120e7:	68 14 01 00 00       	push   0x114
c00120ec:	e8 e2 59 ff ff       	call   c0007ad3 <malloc>
c00120f1:	83 c4 0c             	add    esp,0xc
c00120f4:	89 c3                	mov    ebx,eax
c00120f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120fe:	50                   	push   eax
c00120ff:	56                   	push   esi
c0012100:	53                   	push   ebx
c0012101:	e8 1c 97 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0012106:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012109:	e8 aa 99 ff ff       	call   c000bab8 <File::unlink()>
c001210e:	83 c4 10             	add    esp,0x10
c0012111:	85 db                	test   ebx,ebx
c0012113:	89 c6                	mov    esi,eax
c0012115:	74 0c                	je     c0012123 <SysUnlink(regs*)+0x48>
c0012117:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012119:	83 ec 0c             	sub    esp,0xc
c001211c:	53                   	push   ebx
c001211d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012120:	83 c4 10             	add    esp,0x10
c0012123:	31 c0                	xor    eax,eax
c0012125:	85 f6                	test   esi,esi
c0012127:	0f 95 c0             	setne  al
c001212a:	31 d2                	xor    edx,edx
c001212c:	f7 d8                	neg    eax
c001212e:	83 d2 00             	adc    edx,0x0
c0012131:	83 c4 04             	add    esp,0x4
c0012134:	5b                   	pop    ebx
c0012135:	f7 da                	neg    edx
c0012137:	5e                   	pop    esi
c0012138:	c3                   	ret    

c0012139 <SysGetArgv(regs*)>:
c0012139:	83 ec 0c             	sub    esp,0xc
c001213c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012140:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012143:	85 c0                	test   eax,eax
c0012145:	78 2c                	js     c0012173 <SysGetArgv(regs*)+0x3a>
c0012147:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001214d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012150:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012156:	7d 1b                	jge    c0012173 <SysGetArgv(regs*)+0x3a>
c0012158:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001215f:	85 c0                	test   eax,eax
c0012161:	74 18                	je     c001217b <SysGetArgv(regs*)+0x42>
c0012163:	83 ec 08             	sub    esp,0x8
c0012166:	50                   	push   eax
c0012167:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001216a:	50                   	push   eax
c001216b:	e8 e0 e4 fe ff       	call   c0000650 <strcpy>
c0012170:	83 c4 10             	add    esp,0x10
c0012173:	31 c0                	xor    eax,eax
c0012175:	31 d2                	xor    edx,edx
c0012177:	83 c4 0c             	add    esp,0xc
c001217a:	c3                   	ret    
c001217b:	b8 01 00 00 00       	mov    eax,0x1
c0012180:	31 d2                	xor    edx,edx
c0012182:	83 c4 0c             	add    esp,0xc
c0012185:	c3                   	ret    

c0012186 <SysUSleep(regs*)>:
c0012186:	83 ec 1c             	sub    esp,0x1c
c0012189:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001218d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012190:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012193:	6a 00                	push   0x0
c0012195:	6a 64                	push   0x64
c0012197:	52                   	push   edx
c0012198:	50                   	push   eax
c0012199:	e8 02 d1 00 00       	call   c001f2a0 <__udivdi3>
c001219e:	83 c4 14             	add    esp,0x14
c00121a1:	50                   	push   eax
c00121a2:	e8 5d 3d 00 00       	call   c0015f04 <milliTenthSleep(unsigned int)>
c00121a7:	31 c0                	xor    eax,eax
c00121a9:	31 d2                	xor    edx,edx
c00121ab:	83 c4 1c             	add    esp,0x1c
c00121ae:	c3                   	ret    

c00121af <SysSpawn(regs*)>:
c00121af:	56                   	push   esi
c00121b0:	53                   	push   ebx
c00121b1:	83 ec 04             	sub    esp,0x4
c00121b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121bb:	85 f6                	test   esi,esi
c00121bd:	75 0a                	jne    c00121c9 <SysSpawn(regs*)+0x1a>
c00121bf:	83 c4 04             	add    esp,0x4
c00121c2:	31 c0                	xor    eax,eax
c00121c4:	5b                   	pop    ebx
c00121c5:	31 d2                	xor    edx,edx
c00121c7:	5e                   	pop    esi
c00121c8:	c3                   	ret    
c00121c9:	83 ec 0c             	sub    esp,0xc
c00121cc:	68 24 07 00 00       	push   0x724
c00121d1:	e8 fd 58 ff ff       	call   c0007ad3 <malloc>
c00121d6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121df:	89 c6                	mov    esi,eax
c00121e1:	31 c0                	xor    eax,eax
c00121e3:	85 c9                	test   ecx,ecx
c00121e5:	75 08                	jne    c00121ef <SysSpawn(regs*)+0x40>
c00121e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ef:	52                   	push   edx
c00121f0:	50                   	push   eax
c00121f1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121f4:	50                   	push   eax
c00121f5:	56                   	push   esi
c00121f6:	e8 71 33 00 00       	call   c001556c <Process::Process(char const*, Process*, char**)>
c00121fb:	83 c4 10             	add    esp,0x10
c00121fe:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012205:	75 b8                	jne    c00121bf <SysSpawn(regs*)+0x10>
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	56                   	push   esi
c001220b:	e8 94 38 00 00       	call   c0015aa4 <Process::createUserThread()>
c0012210:	8b 06                	mov    eax,DWORD PTR [esi]
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	83 c4 04             	add    esp,0x4
c0012218:	5b                   	pop    ebx
c0012219:	89 c2                	mov    edx,eax
c001221b:	c1 fa 1f             	sar    edx,0x1f
c001221e:	5e                   	pop    esi
c001221f:	c3                   	ret    

c0012220 <SysGetEnv(regs*)>:
c0012220:	57                   	push   edi
c0012221:	56                   	push   esi
c0012222:	53                   	push   ebx
c0012223:	83 ec 1c             	sub    esp,0x1c
c0012226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001222b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001222f:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012232:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012235:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012238:	51                   	push   ecx
c0012239:	e8 63 ef ff ff       	call   c00111a1 <KeGetProcessTotalEnvCount(Process*)>
c001223e:	83 c4 10             	add    esp,0x10
c0012241:	39 c7                	cmp    edi,eax
c0012243:	7c 12                	jl     c0012257 <SysGetEnv(regs*)+0x37>
c0012245:	31 c0                	xor    eax,eax
c0012247:	31 d2                	xor    edx,edx
c0012249:	85 f6                	test   esi,esi
c001224b:	74 03                	je     c0012250 <SysGetEnv(regs*)+0x30>
c001224d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	5b                   	pop    ebx
c0012254:	5e                   	pop    esi
c0012255:	5f                   	pop    edi
c0012256:	c3                   	ret    
c0012257:	8d 44 24 08          	lea    eax,[esp+0x8]
c001225b:	83 ec 04             	sub    esp,0x4
c001225e:	57                   	push   edi
c001225f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012265:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012268:	57                   	push   edi
c0012269:	50                   	push   eax
c001226a:	e8 52 ef ff ff       	call   c00111c1 <KeGetProcessEnvPair(Process*, int)>
c001226f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012276:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001227a:	83 c4 0c             	add    esp,0xc
c001227d:	85 d2                	test   edx,edx
c001227f:	75 23                	jne    c00122a4 <SysGetEnv(regs*)+0x84>
c0012281:	83 ec 0c             	sub    esp,0xc
c0012284:	50                   	push   eax
c0012285:	e8 f6 e2 fe ff       	call   c0000580 <strlen>
c001228a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001228d:	89 c3                	mov    ebx,eax
c001228f:	e8 ec e2 fe ff       	call   c0000580 <strlen>
c0012294:	83 c4 10             	add    esp,0x10
c0012297:	31 d2                	xor    edx,edx
c0012299:	83 c4 10             	add    esp,0x10
c001229c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00122a0:	5b                   	pop    ebx
c00122a1:	5e                   	pop    esi
c00122a2:	5f                   	pop    edi
c00122a3:	c3                   	ret    
c00122a4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122a7:	83 ec 08             	sub    esp,0x8
c00122aa:	50                   	push   eax
c00122ab:	56                   	push   esi
c00122ac:	e8 9f e3 fe ff       	call   c0000650 <strcpy>
c00122b1:	58                   	pop    eax
c00122b2:	5a                   	pop    edx
c00122b3:	68 e0 1f 02 c0       	push   0xc0021fe0
c00122b8:	56                   	push   esi
c00122b9:	e8 b2 e5 fe ff       	call   c0000870 <strcat>
c00122be:	59                   	pop    ecx
c00122bf:	5b                   	pop    ebx
c00122c0:	57                   	push   edi
c00122c1:	56                   	push   esi
c00122c2:	e8 a9 e5 fe ff       	call   c0000870 <strcat>
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	31 c0                	xor    eax,eax
c00122cc:	83 c4 10             	add    esp,0x10
c00122cf:	31 d2                	xor    edx,edx
c00122d1:	5b                   	pop    ebx
c00122d2:	5e                   	pop    esi
c00122d3:	5f                   	pop    edi
c00122d4:	c3                   	ret    

c00122d5 <SysSetFatAttrib(regs*)>:
c00122d5:	57                   	push   edi
c00122d6:	56                   	push   esi
c00122d7:	53                   	push   ebx
c00122d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122dc:	83 ec 0c             	sub    esp,0xc
c00122df:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00122e2:	68 14 01 00 00       	push   0x114
c00122e7:	e8 e7 57 ff ff       	call   c0007ad3 <malloc>
c00122ec:	83 c4 0c             	add    esp,0xc
c00122ef:	89 c3                	mov    ebx,eax
c00122f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122f9:	50                   	push   eax
c00122fa:	57                   	push   edi
c00122fb:	53                   	push   ebx
c00122fc:	e8 21 95 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0012301:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012304:	83 c4 0c             	add    esp,0xc
c0012307:	0f b6 d4             	movzx  edx,ah
c001230a:	0f b6 c0             	movzx  eax,al
c001230d:	52                   	push   edx
c001230e:	50                   	push   eax
c001230f:	53                   	push   ebx
c0012310:	e8 3d 98 ff ff       	call   c000bb52 <File::chfatattr(unsigned char, unsigned char)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	85 db                	test   ebx,ebx
c001231a:	89 c6                	mov    esi,eax
c001231c:	74 0c                	je     c001232a <SysSetFatAttrib(regs*)+0x55>
c001231e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012320:	83 ec 0c             	sub    esp,0xc
c0012323:	53                   	push   ebx
c0012324:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012327:	83 c4 10             	add    esp,0x10
c001232a:	5b                   	pop    ebx
c001232b:	31 c0                	xor    eax,eax
c001232d:	85 f6                	test   esi,esi
c001232f:	0f 95 c0             	setne  al
c0012332:	31 d2                	xor    edx,edx
c0012334:	5e                   	pop    esi
c0012335:	f7 d8                	neg    eax
c0012337:	83 d2 00             	adc    edx,0x0
c001233a:	f7 da                	neg    edx
c001233c:	5f                   	pop    edi
c001233d:	c3                   	ret    

c001233e <SysPipe(regs*)>:
c001233e:	57                   	push   edi
c001233f:	56                   	push   esi
c0012340:	53                   	push   ebx
c0012341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012345:	83 ec 0c             	sub    esp,0xc
c0012348:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001234b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001234e:	6a 20                	push   0x20
c0012350:	e8 7e 57 ff ff       	call   c0007ad3 <malloc>
c0012355:	89 c3                	mov    ebx,eax
c0012357:	58                   	pop    eax
c0012358:	5a                   	pop    edx
c0012359:	68 00 50 00 00       	push   0x5000
c001235e:	53                   	push   ebx
c001235f:	e8 da 60 ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012367:	e8 32 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001236c:	89 07                	mov    DWORD PTR [edi],eax
c001236e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012371:	e8 28 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	31 d2                	xor    edx,edx
c001237b:	89 06                	mov    DWORD PTR [esi],eax
c001237d:	31 c0                	xor    eax,eax
c001237f:	5b                   	pop    ebx
c0012380:	5e                   	pop    esi
c0012381:	5f                   	pop    edi
c0012382:	c3                   	ret    

c0012383 <SysGetUnixTime(regs*)>:
c0012383:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012388:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001238e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012392:	e9 03 9f ff ff       	jmp    c000c29a <Clock::timeInSecondsLocal()>

c0012397 <string_ends_with(char const*, char const*)>:
c0012397:	57                   	push   edi
c0012398:	56                   	push   esi
c0012399:	53                   	push   ebx
c001239a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001239e:	83 ec 0c             	sub    esp,0xc
c00123a1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00123a5:	53                   	push   ebx
c00123a6:	e8 d5 e1 fe ff       	call   c0000580 <strlen>
c00123ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123ae:	89 c6                	mov    esi,eax
c00123b0:	e8 cb e1 fe ff       	call   c0000580 <strlen>
c00123b5:	83 c4 10             	add    esp,0x10
c00123b8:	31 d2                	xor    edx,edx
c00123ba:	39 c6                	cmp    esi,eax
c00123bc:	7d 06                	jge    c00123c4 <string_ends_with(char const*, char const*)+0x2d>
c00123be:	5b                   	pop    ebx
c00123bf:	89 d0                	mov    eax,edx
c00123c1:	5e                   	pop    esi
c00123c2:	5f                   	pop    edi
c00123c3:	c3                   	ret    
c00123c4:	83 ec 08             	sub    esp,0x8
c00123c7:	29 c6                	sub    esi,eax
c00123c9:	57                   	push   edi
c00123ca:	01 f3                	add    ebx,esi
c00123cc:	53                   	push   ebx
c00123cd:	e8 ae e3 fe ff       	call   c0000780 <strcmp>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	31 d2                	xor    edx,edx
c00123d7:	5b                   	pop    ebx
c00123d8:	5e                   	pop    esi
c00123d9:	85 c0                	test   eax,eax
c00123db:	5f                   	pop    edi
c00123dc:	0f 94 c2             	sete   dl
c00123df:	89 d0                	mov    eax,edx
c00123e1:	c3                   	ret    

c00123e2 <SysOpen(regs*)>:
c00123e2:	56                   	push   esi
c00123e3:	53                   	push   ebx
c00123e4:	81 ec 04 01 00 00    	sub    esp,0x104
c00123ea:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00123f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123f4:	85 c0                	test   eax,eax
c00123f6:	0f 84 c4 01 00 00    	je     c00125c0 <SysOpen(regs*)+0x1de>
c00123fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123ff:	85 c0                	test   eax,eax
c0012401:	0f 84 b9 01 00 00    	je     c00125c0 <SysOpen(regs*)+0x1de>
c0012407:	6a 00                	push   0x0
c0012409:	68 e2 1f 02 c0       	push   0xc0021fe2
c001240e:	50                   	push   eax
c001240f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012413:	56                   	push   esi
c0012414:	e8 93 91 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012419:	89 34 24             	mov    DWORD PTR [esp],esi
c001241c:	e8 5f e1 fe ff       	call   c0000580 <strlen>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	83 e8 01             	sub    eax,0x1
c0012427:	74 29                	je     c0012452 <SysOpen(regs*)+0x70>
c0012429:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001242d:	83 fa 2e             	cmp    edx,0x2e
c0012430:	74 1c                	je     c001244e <SysOpen(regs*)+0x6c>
c0012432:	83 fa 3a             	cmp    edx,0x3a
c0012435:	74 17                	je     c001244e <SysOpen(regs*)+0x6c>
c0012437:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001243b:	83 e8 01             	sub    eax,0x1
c001243e:	74 12                	je     c0012452 <SysOpen(regs*)+0x70>
c0012440:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012444:	83 fa 3a             	cmp    edx,0x3a
c0012447:	74 05                	je     c001244e <SysOpen(regs*)+0x6c>
c0012449:	83 fa 2e             	cmp    edx,0x2e
c001244c:	75 e9                	jne    c0012437 <SysOpen(regs*)+0x55>
c001244e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012452:	83 ec 08             	sub    esp,0x8
c0012455:	68 e6 1f 02 c0       	push   0xc0021fe6
c001245a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001245d:	50                   	push   eax
c001245e:	e8 34 ff ff ff       	call   c0012397 <string_ends_with(char const*, char const*)>
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	85 c0                	test   eax,eax
c0012468:	74 1d                	je     c0012487 <SysOpen(regs*)+0xa5>
c001246a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001246d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012473:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001247a:	81 c4 04 01 00 00    	add    esp,0x104
c0012480:	31 c0                	xor    eax,eax
c0012482:	5b                   	pop    ebx
c0012483:	31 d2                	xor    edx,edx
c0012485:	5e                   	pop    esi
c0012486:	c3                   	ret    
c0012487:	83 ec 08             	sub    esp,0x8
c001248a:	68 eb 1f 02 c0       	push   0xc0021feb
c001248f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012492:	50                   	push   eax
c0012493:	e8 ff fe ff ff       	call   c0012397 <string_ends_with(char const*, char const*)>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	85 c0                	test   eax,eax
c001249d:	75 cb                	jne    c001246a <SysOpen(regs*)+0x88>
c001249f:	83 ec 08             	sub    esp,0x8
c00124a2:	68 e7 1f 02 c0       	push   0xc0021fe7
c00124a7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124aa:	50                   	push   eax
c00124ab:	e8 d0 e2 fe ff       	call   c0000780 <strcmp>
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	85 c0                	test   eax,eax
c00124b5:	74 b3                	je     c001246a <SysOpen(regs*)+0x88>
c00124b7:	83 ec 08             	sub    esp,0x8
c00124ba:	68 e6 1f 02 c0       	push   0xc0021fe6
c00124bf:	56                   	push   esi
c00124c0:	e8 d2 fe ff ff       	call   c0012397 <string_ends_with(char const*, char const*)>
c00124c5:	83 c4 10             	add    esp,0x10
c00124c8:	85 c0                	test   eax,eax
c00124ca:	75 9e                	jne    c001246a <SysOpen(regs*)+0x88>
c00124cc:	83 ec 08             	sub    esp,0x8
c00124cf:	68 f0 1f 02 c0       	push   0xc0021ff0
c00124d4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124d7:	50                   	push   eax
c00124d8:	e8 ba fe ff ff       	call   c0012397 <string_ends_with(char const*, char const*)>
c00124dd:	83 c4 10             	add    esp,0x10
c00124e0:	85 c0                	test   eax,eax
c00124e2:	0f 85 eb 00 00 00    	jne    c00125d3 <SysOpen(regs*)+0x1f1>
c00124e8:	83 ec 08             	sub    esp,0x8
c00124eb:	68 f5 1f 02 c0       	push   0xc0021ff5
c00124f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124f3:	50                   	push   eax
c00124f4:	e8 9e fe ff ff       	call   c0012397 <string_ends_with(char const*, char const*)>
c00124f9:	83 c4 10             	add    esp,0x10
c00124fc:	85 c0                	test   eax,eax
c00124fe:	0f 85 cf 00 00 00    	jne    c00125d3 <SysOpen(regs*)+0x1f1>
c0012504:	83 ec 08             	sub    esp,0x8
c0012507:	68 f1 1f 02 c0       	push   0xc0021ff1
c001250c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001250f:	51                   	push   ecx
c0012510:	e8 6b e2 fe ff       	call   c0000780 <strcmp>
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	85 c0                	test   eax,eax
c001251a:	0f 84 b3 00 00 00    	je     c00125d3 <SysOpen(regs*)+0x1f1>
c0012520:	83 ec 08             	sub    esp,0x8
c0012523:	68 f0 1f 02 c0       	push   0xc0021ff0
c0012528:	56                   	push   esi
c0012529:	e8 69 fe ff ff       	call   c0012397 <string_ends_with(char const*, char const*)>
c001252e:	83 c4 10             	add    esp,0x10
c0012531:	85 c0                	test   eax,eax
c0012533:	0f 85 9a 00 00 00    	jne    c00125d3 <SysOpen(regs*)+0x1f1>
c0012539:	83 ec 0c             	sub    esp,0xc
c001253c:	68 14 01 00 00       	push   0x114
c0012541:	e8 8d 55 ff ff       	call   c0007ad3 <malloc>
c0012546:	83 c4 0c             	add    esp,0xc
c0012549:	89 c6                	mov    esi,eax
c001254b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012550:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012553:	50                   	push   eax
c0012554:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012557:	52                   	push   edx
c0012558:	56                   	push   esi
c0012559:	e8 c4 92 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	85 f6                	test   esi,esi
c0012563:	74 5b                	je     c00125c0 <SysOpen(regs*)+0x1de>
c0012565:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012568:	0f b6 c2             	movzx  eax,dl
c001256b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001256e:	89 d0                	mov    eax,edx
c0012570:	83 e0 01             	and    eax,0x1
c0012573:	f6 c2 02             	test   dl,0x2
c0012576:	74 03                	je     c001257b <SysOpen(regs*)+0x199>
c0012578:	83 c8 02             	or     eax,0x2
c001257b:	f6 c2 04             	test   dl,0x4
c001257e:	74 03                	je     c0012583 <SysOpen(regs*)+0x1a1>
c0012580:	83 c8 04             	or     eax,0x4
c0012583:	f6 c2 08             	test   dl,0x8
c0012586:	74 03                	je     c001258b <SysOpen(regs*)+0x1a9>
c0012588:	83 c8 0a             	or     eax,0xa
c001258b:	80 e2 10             	and    dl,0x10
c001258e:	74 03                	je     c0012593 <SysOpen(regs*)+0x1b1>
c0012590:	83 c8 12             	or     eax,0x12
c0012593:	83 ec 08             	sub    esp,0x8
c0012596:	50                   	push   eax
c0012597:	56                   	push   esi
c0012598:	e8 4d 93 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c001259d:	83 c4 10             	add    esp,0x10
c00125a0:	85 c0                	test   eax,eax
c00125a2:	75 1c                	jne    c00125c0 <SysOpen(regs*)+0x1de>
c00125a4:	83 ec 0c             	sub    esp,0xc
c00125a7:	56                   	push   esi
c00125a8:	e8 f1 6b ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00125ad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00125b0:	83 c4 10             	add    esp,0x10
c00125b3:	89 02                	mov    DWORD PTR [edx],eax
c00125b5:	c1 f8 1f             	sar    eax,0x1f
c00125b8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125bb:	e9 ba fe ff ff       	jmp    c001247a <SysOpen(regs*)+0x98>
c00125c0:	81 c4 04 01 00 00    	add    esp,0x104
c00125c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125cb:	5b                   	pop    ebx
c00125cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125d1:	5e                   	pop    esi
c00125d2:	c3                   	ret    
c00125d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125d6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00125dc:	e9 92 fe ff ff       	jmp    c0012473 <SysOpen(regs*)+0x91>

c00125e1 <KeSystemCall(regs*, void*)>:
c00125e1:	53                   	push   ebx
c00125e2:	83 ec 08             	sub    esp,0x8
c00125e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00125ec:	83 f8 3b             	cmp    eax,0x3b
c00125ef:	77 16                	ja     c0012607 <KeSystemCall(regs*, void*)+0x26>
c00125f1:	8b 14 85 00 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc00]
c00125f8:	85 d2                	test   edx,edx
c00125fa:	74 0b                	je     c0012607 <KeSystemCall(regs*, void*)+0x26>
c00125fc:	83 ec 0c             	sub    esp,0xc
c00125ff:	53                   	push   ebx
c0012600:	ff d2                	call   edx
c0012602:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012605:	eb 0d                	jmp    c0012614 <KeSystemCall(regs*, void*)+0x33>
c0012607:	52                   	push   edx
c0012608:	52                   	push   edx
c0012609:	50                   	push   eax
c001260a:	68 fa 1f 02 c0       	push   0xc0021ffa
c001260f:	e8 f6 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012614:	83 c4 10             	add    esp,0x10
c0012617:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001261c:	83 c4 08             	add    esp,0x8
c001261f:	31 d2                	xor    edx,edx
c0012621:	5b                   	pop    ebx
c0012622:	c3                   	ret    
c0012623:	90                   	nop

c0012624 <KeSwitchEndian16(unsigned short)>:
c0012624:	83 ec 04             	sub    esp,0x4
c0012627:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001262b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001262f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012633:	c1 f8 08             	sar    eax,0x8
c0012636:	89 c2                	mov    edx,eax
c0012638:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001263c:	c1 e0 08             	shl    eax,0x8
c001263f:	09 d0                	or     eax,edx
c0012641:	83 c4 04             	add    esp,0x4
c0012644:	c3                   	ret    
c0012645:	8d 76 00             	lea    esi,[esi+0x0]

c0012648 <KeSwitchEndian32(unsigned int)>:
c0012648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001264c:	c1 e8 18             	shr    eax,0x18
c001264f:	89 c2                	mov    edx,eax
c0012651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012655:	c1 e0 08             	shl    eax,0x8
c0012658:	25 00 00 ff 00       	and    eax,0xff0000
c001265d:	09 c2                	or     edx,eax
c001265f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012663:	c1 e8 08             	shr    eax,0x8
c0012666:	25 00 ff 00 00       	and    eax,0xff00
c001266b:	09 c2                	or     edx,eax
c001266d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012671:	c1 e0 18             	shl    eax,0x18
c0012674:	09 d0                	or     eax,edx
c0012676:	c3                   	ret    
c0012677:	90                   	nop

c0012678 <EthernetCRC32(unsigned char*, int)>:
c0012678:	83 ec 10             	sub    esp,0x10
c001267b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012680:	75 0a                	jne    c001268c <EthernetCRC32(unsigned char*, int)+0x14>
c0012682:	b8 00 00 00 00       	mov    eax,0x0
c0012687:	e9 8c 00 00 00       	jmp    c0012718 <EthernetCRC32(unsigned char*, int)+0xa0>
c001268c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012691:	7f 09                	jg     c001269c <EthernetCRC32(unsigned char*, int)+0x24>
c0012693:	b8 00 00 00 00       	mov    eax,0x0
c0012698:	eb 7e                	jmp    c0012718 <EthernetCRC32(unsigned char*, int)+0xa0>
c001269a:	66 90                	xchg   ax,ax
c001269c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00126a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00126ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126b0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00126b4:	7d 5a                	jge    c0012710 <EthernetCRC32(unsigned char*, int)+0x98>
c00126b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126be:	01 d0                	add    eax,edx
c00126c0:	8a 00                	mov    al,BYTE PTR [eax]
c00126c2:	0f b6 c0             	movzx  eax,al
c00126c5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00126c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126d1:	8d 76 00             	lea    esi,[esi+0x0]
c00126d4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00126d9:	7f 2d                	jg     c0012708 <EthernetCRC32(unsigned char*, int)+0x90>
c00126db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126df:	83 e0 01             	and    eax,0x1
c00126e2:	74 10                	je     c00126f4 <EthernetCRC32(unsigned char*, int)+0x7c>
c00126e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e8:	d1 e8                	shr    eax,1
c00126ea:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00126ef:	eb 0b                	jmp    c00126fc <EthernetCRC32(unsigned char*, int)+0x84>
c00126f1:	8d 76 00             	lea    esi,[esi+0x0]
c00126f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f8:	d1 e8                	shr    eax,1
c00126fa:	66 90                	xchg   ax,ax
c00126fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012700:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012705:	eb cd                	jmp    c00126d4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012707:	90                   	nop
c0012708:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001270d:	eb 9d                	jmp    c00126ac <EthernetCRC32(unsigned char*, int)+0x34>
c001270f:	90                   	nop
c0012710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012714:	f7 d0                	not    eax
c0012716:	66 90                	xchg   ax,ax
c0012718:	83 c4 10             	add    esp,0x10
c001271b:	c3                   	ret    

c001271c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c001271c:	83 ec 2c             	sub    esp,0x2c
c001271f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012723:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012728:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012730:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012734:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012737:	0f b7 c0             	movzx  eax,ax
c001273a:	3d 06 08 00 00       	cmp    eax,0x806
c001273f:	75 13                	jne    c0012754 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012741:	83 ec 0c             	sub    esp,0xc
c0012744:	68 0e 20 02 c0       	push   0xc002200e
c0012749:	e8 bc 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001274e:	83 c4 10             	add    esp,0x10
c0012751:	eb 25                	jmp    c0012778 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012753:	90                   	nop
c0012754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012758:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001275b:	0f b7 c0             	movzx  eax,ax
c001275e:	3d 00 08 00 00       	cmp    eax,0x800
c0012763:	75 13                	jne    c0012778 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012765:	83 ec 0c             	sub    esp,0xc
c0012768:	68 24 20 02 c0       	push   0xc0022024
c001276d:	e8 98 81 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012772:	83 c4 10             	add    esp,0x10
c0012775:	8d 76 00             	lea    esi,[esi+0x0]
c0012778:	90                   	nop
c0012779:	83 c4 2c             	add    esp,0x2c
c001277c:	c3                   	ret    

c001277d <CmOpen(char const*)>:
c001277d:	57                   	push   edi
c001277e:	56                   	push   esi
c001277f:	53                   	push   ebx
c0012780:	83 ec 1c             	sub    esp,0x1c
c0012783:	6a 30                	push   0x30
c0012785:	e8 49 53 ff ff       	call   c0007ad3 <malloc>
c001278a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012791:	89 c3                	mov    ebx,eax
c0012793:	e8 3b 53 ff ff       	call   c0007ad3 <malloc>
c0012798:	83 c4 0c             	add    esp,0xc
c001279b:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00127a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127a5:	89 c6                	mov    esi,eax
c00127a7:	50                   	push   eax
c00127a8:	e8 75 90 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c00127ad:	83 c4 0c             	add    esp,0xc
c00127b0:	89 33                	mov    DWORD PTR [ebx],esi
c00127b2:	8d 44 24 07          	lea    eax,[esp+0x7]
c00127b6:	50                   	push   eax
c00127b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00127bb:	50                   	push   eax
c00127bc:	56                   	push   esi
c00127bd:	e8 2a 94 ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c00127c2:	5a                   	pop    edx
c00127c3:	59                   	pop    ecx
c00127c4:	6a 01                	push   0x1
c00127c6:	ff 33                	push   DWORD PTR [ebx]
c00127c8:	e8 1d 91 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c00127cd:	5e                   	pop    esi
c00127ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127d2:	e8 fc 52 ff ff       	call   c0007ad3 <malloc>
c00127d7:	5a                   	pop    edx
c00127d8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00127dc:	89 c7                	mov    edi,eax
c00127de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00127e2:	56                   	push   esi
c00127e3:	57                   	push   edi
c00127e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127ec:	50                   	push   eax
c00127ed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127f0:	83 c4 14             	add    esp,0x14
c00127f3:	ff 33                	push   DWORD PTR [ebx]
c00127f5:	e8 4e 91 ff ff       	call   c000b948 <File::close()>
c00127fa:	59                   	pop    ecx
c00127fb:	58                   	pop    eax
c00127fc:	6a 13                	push   0x13
c00127fe:	ff 33                	push   DWORD PTR [ebx]
c0012800:	e8 e5 90 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c0012805:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012807:	8b 10                	mov    edx,DWORD PTR [eax]
c0012809:	89 34 24             	mov    DWORD PTR [esp],esi
c001280c:	57                   	push   edi
c001280d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012811:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012815:	50                   	push   eax
c0012816:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012819:	83 c4 14             	add    esp,0x14
c001281c:	57                   	push   edi
c001281d:	e8 c1 52 ff ff       	call   c0007ae3 <free>
c0012822:	83 c4 10             	add    esp,0x10
c0012825:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012828:	75 10                	jne    c001283a <CmOpen(char const*)+0xbd>
c001282a:	83 ec 0c             	sub    esp,0xc
c001282d:	68 39 20 02 c0       	push   0xc0022039
c0012832:	e8 b2 ea ff ff       	call   c00112e9 <KePanic(char const*)>
c0012837:	83 c4 10             	add    esp,0x10
c001283a:	50                   	push   eax
c001283b:	6a 00                	push   0x0
c001283d:	6a 00                	push   0x0
c001283f:	ff 33                	push   DWORD PTR [ebx]
c0012841:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012844:	e8 5f 91 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0012849:	8b 03                	mov    eax,DWORD PTR [ebx]
c001284b:	8b 10                	mov    edx,DWORD PTR [eax]
c001284d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012850:	57                   	push   edi
c0012851:	6a 00                	push   0x0
c0012853:	6a 2b                	push   0x2b
c0012855:	50                   	push   eax
c0012856:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012859:	83 c4 1c             	add    esp,0x1c
c001285c:	6a 00                	push   0x0
c001285e:	6a 00                	push   0x0
c0012860:	ff 33                	push   DWORD PTR [ebx]
c0012862:	e8 41 91 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0012867:	83 c4 0c             	add    esp,0xc
c001286a:	6a 08                	push   0x8
c001286c:	68 4a 20 02 c0       	push   0xc002204a
c0012871:	57                   	push   edi
c0012872:	e8 09 db fe ff       	call   c0000380 <memcmp>
c0012877:	83 c4 10             	add    esp,0x10
c001287a:	85 c0                	test   eax,eax
c001287c:	74 10                	je     c001288e <CmOpen(char const*)+0x111>
c001287e:	83 ec 0c             	sub    esp,0xc
c0012881:	68 53 20 02 c0       	push   0xc0022053
c0012886:	e8 5e ea ff ff       	call   c00112e9 <KePanic(char const*)>
c001288b:	83 c4 10             	add    esp,0x10
c001288e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012892:	83 c4 10             	add    esp,0x10
c0012895:	89 d8                	mov    eax,ebx
c0012897:	5b                   	pop    ebx
c0012898:	5e                   	pop    esi
c0012899:	5f                   	pop    edi
c001289a:	c3                   	ret    

c001289b <CmClose(Reghive_Tag*)>:
c001289b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001289f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00128a3:	74 0b                	je     c00128b0 <CmClose(Reghive_Tag*)+0x15>
c00128a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128ab:	e9 98 90 ff ff       	jmp    c000b948 <File::close()>
c00128b0:	c3                   	ret    

c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00128b1:	53                   	push   ebx
c00128b2:	83 ec 18             	sub    esp,0x18
c00128b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128b9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128bd:	74 29                	je     c00128e8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128bf:	50                   	push   eax
c00128c0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128c5:	99                   	cdq    
c00128c6:	52                   	push   edx
c00128c7:	50                   	push   eax
c00128c8:	ff 33                	push   DWORD PTR [ebx]
c00128ca:	e8 d9 90 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c00128cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128d1:	5a                   	pop    edx
c00128d2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d8:	51                   	push   ecx
c00128d9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128dd:	6a 00                	push   0x0
c00128df:	6a 2b                	push   0x2b
c00128e1:	50                   	push   eax
c00128e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00128e5:	83 c4 20             	add    esp,0x20
c00128e8:	83 c4 18             	add    esp,0x18
c00128eb:	5b                   	pop    ebx
c00128ec:	c3                   	ret    

c00128ed <CmGetString(Reghive_Tag*, int, char*)>:
c00128ed:	55                   	push   ebp
c00128ee:	57                   	push   edi
c00128ef:	56                   	push   esi
c00128f0:	53                   	push   ebx
c00128f1:	31 db                	xor    ebx,ebx
c00128f3:	83 ec 70             	sub    esp,0x70
c00128f6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00128fa:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012901:	50                   	push   eax
c0012902:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012909:	55                   	push   ebp
c001290a:	e8 a2 ff ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012917:	c1 e0 08             	shl    eax,0x8
c001291a:	89 c2                	mov    edx,eax
c001291c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012921:	09 d0                	or     eax,edx
c0012923:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012928:	c1 e0 08             	shl    eax,0x8
c001292b:	09 d0                	or     eax,edx
c001292d:	74 25                	je     c0012954 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c001292f:	52                   	push   edx
c0012930:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012934:	52                   	push   edx
c0012935:	6b fb 0d             	imul   edi,ebx,0xd
c0012938:	50                   	push   eax
c0012939:	55                   	push   ebp
c001293a:	e8 72 ff ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001293f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012943:	b9 27 00 00 00       	mov    ecx,0x27
c0012948:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001294f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012951:	83 c4 10             	add    esp,0x10
c0012954:	83 c3 03             	add    ebx,0x3
c0012957:	83 fb 15             	cmp    ebx,0x15
c001295a:	75 b6                	jne    c0012912 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c001295c:	83 c4 6c             	add    esp,0x6c
c001295f:	5b                   	pop    ebx
c0012960:	5e                   	pop    esi
c0012961:	5f                   	pop    edi
c0012962:	5d                   	pop    ebp
c0012963:	c3                   	ret    

c0012964 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012964:	83 ec 40             	sub    esp,0x40
c0012967:	8d 44 24 09          	lea    eax,[esp+0x9]
c001296b:	50                   	push   eax
c001296c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012970:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012974:	e8 38 ff ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	83 c8 ff             	or     eax,0xffffffff
c001297f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012984:	75 19                	jne    c001299f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012986:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001298b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012990:	c1 e0 08             	shl    eax,0x8
c0012993:	09 c2                	or     edx,eax
c0012995:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001299a:	c1 e0 10             	shl    eax,0x10
c001299d:	09 d0                	or     eax,edx
c001299f:	83 c4 3c             	add    esp,0x3c
c00129a2:	c3                   	ret    

c00129a3 <CmGetNext(Reghive_Tag*, int)>:
c00129a3:	83 ec 40             	sub    esp,0x40
c00129a6:	8d 44 24 09          	lea    eax,[esp+0x9]
c00129aa:	50                   	push   eax
c00129ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129b3:	e8 f9 fe ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129b8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00129bd:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00129c2:	c1 e0 08             	shl    eax,0x8
c00129c5:	09 c2                	or     edx,eax
c00129c7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00129cc:	83 c4 4c             	add    esp,0x4c
c00129cf:	c1 e0 10             	shl    eax,0x10
c00129d2:	09 d0                	or     eax,edx
c00129d4:	c3                   	ret    

c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00129d5:	53                   	push   ebx
c00129d6:	83 ec 18             	sub    esp,0x18
c00129d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129dd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129e1:	74 29                	je     c0012a0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00129e3:	50                   	push   eax
c00129e4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00129e9:	99                   	cdq    
c00129ea:	52                   	push   edx
c00129eb:	50                   	push   eax
c00129ec:	ff 33                	push   DWORD PTR [ebx]
c00129ee:	e8 b5 8f ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c00129f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129f5:	5a                   	pop    edx
c00129f6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00129fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00129fc:	51                   	push   ecx
c00129fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012a01:	6a 00                	push   0x0
c0012a03:	6a 2b                	push   0x2b
c0012a05:	50                   	push   eax
c0012a06:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a09:	83 c4 20             	add    esp,0x20
c0012a0c:	83 c4 18             	add    esp,0x18
c0012a0f:	5b                   	pop    ebx
c0012a10:	c3                   	ret    

c0012a11 <CmFreeExtent(Reghive_Tag*, int)>:
c0012a11:	53                   	push   ebx
c0012a12:	83 ec 3c             	sub    esp,0x3c
c0012a15:	6a 2b                	push   0x2b
c0012a17:	6a 00                	push   0x0
c0012a19:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a1d:	53                   	push   ebx
c0012a1e:	e8 cd da fe ff       	call   c00004f0 <memset>
c0012a23:	83 c4 0c             	add    esp,0xc
c0012a26:	53                   	push   ebx
c0012a27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a2f:	e8 a1 ff ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a34:	83 c4 48             	add    esp,0x48
c0012a37:	5b                   	pop    ebx
c0012a38:	c3                   	ret    

c0012a39 <CmUpdateHeader(Reghive_Tag*)>:
c0012a39:	83 ec 0c             	sub    esp,0xc
c0012a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a40:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012a44:	74 10                	je     c0012a56 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012a46:	52                   	push   edx
c0012a47:	8d 50 05             	lea    edx,[eax+0x5]
c0012a4a:	52                   	push   edx
c0012a4b:	6a 00                	push   0x0
c0012a4d:	50                   	push   eax
c0012a4e:	e8 82 ff ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a53:	83 c4 10             	add    esp,0x10
c0012a56:	83 c4 0c             	add    esp,0xc
c0012a59:	c3                   	ret    

c0012a5a <CmExpand(Reghive_Tag*, int)>:
c0012a5a:	55                   	push   ebp
c0012a5b:	57                   	push   edi
c0012a5c:	83 cf ff             	or     edi,0xffffffff
c0012a5f:	56                   	push   esi
c0012a60:	53                   	push   ebx
c0012a61:	83 ec 3c             	sub    esp,0x3c
c0012a64:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a68:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a6c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a70:	74 59                	je     c0012acb <CmExpand(Reghive_Tag*, int)+0x71>
c0012a72:	50                   	push   eax
c0012a73:	31 d2                	xor    edx,edx
c0012a75:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012a79:	31 ff                	xor    edi,edi
c0012a7b:	52                   	push   edx
c0012a7c:	50                   	push   eax
c0012a7d:	ff 33                	push   DWORD PTR [ebx]
c0012a7f:	e8 24 8f ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0012a84:	83 c4 0c             	add    esp,0xc
c0012a87:	6a 2b                	push   0x2b
c0012a89:	6a 00                	push   0x0
c0012a8b:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012a8f:	55                   	push   ebp
c0012a90:	e8 5b da fe ff       	call   c00004f0 <memset>
c0012a95:	83 c4 10             	add    esp,0x10
c0012a98:	39 f7                	cmp    edi,esi
c0012a9a:	7d 1b                	jge    c0012ab7 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012a9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a9e:	83 ec 0c             	sub    esp,0xc
c0012aa1:	47                   	inc    edi
c0012aa2:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012aa6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aa8:	51                   	push   ecx
c0012aa9:	55                   	push   ebp
c0012aaa:	6a 00                	push   0x0
c0012aac:	6a 2b                	push   0x2b
c0012aae:	50                   	push   eax
c0012aaf:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ab2:	83 c4 20             	add    esp,0x20
c0012ab5:	eb e1                	jmp    c0012a98 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012ab7:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012aba:	83 ec 0c             	sub    esp,0xc
c0012abd:	01 fe                	add    esi,edi
c0012abf:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012ac2:	53                   	push   ebx
c0012ac3:	e8 71 ff ff ff       	call   c0012a39 <CmUpdateHeader(Reghive_Tag*)>
c0012ac8:	83 c4 10             	add    esp,0x10
c0012acb:	83 c4 3c             	add    esp,0x3c
c0012ace:	89 f8                	mov    eax,edi
c0012ad0:	5b                   	pop    ebx
c0012ad1:	5e                   	pop    esi
c0012ad2:	5f                   	pop    edi
c0012ad3:	5d                   	pop    ebp
c0012ad4:	c3                   	ret    

c0012ad5 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012ad5:	55                   	push   ebp
c0012ad6:	57                   	push   edi
c0012ad7:	56                   	push   esi
c0012ad8:	53                   	push   ebx
c0012ad9:	83 cb ff             	or     ebx,0xffffffff
c0012adc:	83 ec 1c             	sub    esp,0x1c
c0012adf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012ae3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012ae7:	74 68                	je     c0012b51 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ae9:	51                   	push   ecx
c0012aea:	be 2b 00 00 00       	mov    esi,0x2b
c0012aef:	6a 00                	push   0x0
c0012af1:	31 ff                	xor    edi,edi
c0012af3:	6a 00                	push   0x0
c0012af5:	31 db                	xor    ebx,ebx
c0012af7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012afa:	e8 a9 8e ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012b05:	76 3b                	jbe    c0012b42 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012b07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b0a:	83 ec 0c             	sub    esp,0xc
c0012b0d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b11:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b13:	51                   	push   ecx
c0012b14:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012b18:	51                   	push   ecx
c0012b19:	6a 00                	push   0x0
c0012b1b:	6a 01                	push   0x1
c0012b1d:	50                   	push   eax
c0012b1e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012b21:	83 c4 20             	add    esp,0x20
c0012b24:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012b29:	74 26                	je     c0012b51 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b2b:	52                   	push   edx
c0012b2c:	43                   	inc    ebx
c0012b2d:	57                   	push   edi
c0012b2e:	56                   	push   esi
c0012b2f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b32:	e8 71 8e ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0012b37:	83 c6 2b             	add    esi,0x2b
c0012b3a:	83 d7 00             	adc    edi,0x0
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	eb c0                	jmp    c0012b02 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012b42:	50                   	push   eax
c0012b43:	50                   	push   eax
c0012b44:	6a 40                	push   0x40
c0012b46:	55                   	push   ebp
c0012b47:	e8 0e ff ff ff       	call   c0012a5a <CmExpand(Reghive_Tag*, int)>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	89 c3                	mov    ebx,eax
c0012b51:	83 c4 1c             	add    esp,0x1c
c0012b54:	89 d8                	mov    eax,ebx
c0012b56:	5b                   	pop    ebx
c0012b57:	5e                   	pop    esi
c0012b58:	5f                   	pop    edi
c0012b59:	5d                   	pop    ebp
c0012b5a:	c3                   	ret    

c0012b5b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012b5b:	55                   	push   ebp
c0012b5c:	57                   	push   edi
c0012b5d:	56                   	push   esi
c0012b5e:	53                   	push   ebx
c0012b5f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b65:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012b6c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b73:	e8 5d ff ff ff       	call   c0012ad5 <CmFindUnusedExtent(Reghive_Tag*)>
c0012b78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b7c:	83 c4 0c             	add    esp,0xc
c0012b7f:	6a 2b                	push   0x2b
c0012b81:	6a 00                	push   0x0
c0012b83:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012b87:	55                   	push   ebp
c0012b88:	e8 63 d9 fe ff       	call   c00004f0 <memset>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	85 db                	test   ebx,ebx
c0012b92:	74 12                	je     c0012ba6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012b94:	51                   	push   ecx
c0012b95:	55                   	push   ebp
c0012b96:	53                   	push   ebx
c0012b97:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b9e:	e8 0e fd ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012baa:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012bb1:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012bb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012bb8:	85 db                	test   ebx,ebx
c0012bba:	74 49                	je     c0012c05 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012bbc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012bc1:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012bc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bca:	c1 e0 08             	shl    eax,0x8
c0012bcd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012bd3:	09 c8                	or     eax,ecx
c0012bd5:	74 11                	je     c0012be8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012bd7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012bdb:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012bdf:	c1 e8 10             	shr    eax,0x10
c0012be2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012be6:	eb 0f                	jmp    c0012bf7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012be8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012bed:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012bf2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012bf7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012bfb:	c1 ea 08             	shr    edx,0x8
c0012bfe:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012c03:	eb 0f                	jmp    c0012c14 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012c05:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c0a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c0f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c14:	52                   	push   edx
c0012c15:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012c19:	50                   	push   eax
c0012c1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c1e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c25:	e8 ab fd ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	85 db                	test   ebx,ebx
c0012c2f:	74 12                	je     c0012c43 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012c31:	50                   	push   eax
c0012c32:	55                   	push   ebp
c0012c33:	53                   	push   ebx
c0012c34:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c3b:	e8 95 fd ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c47:	83 c4 7c             	add    esp,0x7c
c0012c4a:	5b                   	pop    ebx
c0012c4b:	5e                   	pop    esi
c0012c4c:	5f                   	pop    edi
c0012c4d:	5d                   	pop    ebp
c0012c4e:	c3                   	ret    

c0012c4f <CmSetString(Reghive_Tag*, int, char const*)>:
c0012c4f:	55                   	push   ebp
c0012c50:	57                   	push   edi
c0012c51:	56                   	push   esi
c0012c52:	53                   	push   ebx
c0012c53:	bb 27 00 00 00       	mov    ebx,0x27
c0012c58:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c5e:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012c65:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012c6c:	e8 0f d9 fe ff       	call   c0000580 <strlen>
c0012c71:	8d 48 26             	lea    ecx,[eax+0x26]
c0012c74:	89 c8                	mov    eax,ecx
c0012c76:	99                   	cdq    
c0012c77:	f7 fb                	idiv   ebx
c0012c79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c7d:	83 c4 10             	add    esp,0x10
c0012c80:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012c86:	7e 10                	jle    c0012c98 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012c88:	83 ec 0c             	sub    esp,0xc
c0012c8b:	68 64 20 02 c0       	push   0xc0022064
c0012c90:	e8 54 e6 ff ff       	call   c00112e9 <KePanic(char const*)>
c0012c95:	83 c4 10             	add    esp,0x10
c0012c98:	53                   	push   ebx
c0012c99:	31 ed                	xor    ebp,ebp
c0012c9b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012c9f:	53                   	push   ebx
c0012ca0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ca7:	57                   	push   edi
c0012ca8:	e8 04 fc ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cad:	83 c4 10             	add    esp,0x10
c0012cb0:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012cb4:	89 f0                	mov    eax,esi
c0012cb6:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012cba:	c1 e0 08             	shl    eax,0x8
c0012cbd:	09 c6                	or     esi,eax
c0012cbf:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012cc3:	c1 e6 08             	shl    esi,0x8
c0012cc6:	09 c6                	or     esi,eax
c0012cc8:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012ccc:	7e 72                	jle    c0012d40 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012cce:	85 f6                	test   esi,esi
c0012cd0:	75 25                	jne    c0012cf7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012cd2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012cd7:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012cdb:	50                   	push   eax
c0012cdc:	6a 00                	push   0x0
c0012cde:	6a 00                	push   0x0
c0012ce0:	57                   	push   edi
c0012ce1:	e8 75 fe ff ff       	call   c0012b5b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012cec:	89 c6                	mov    esi,eax
c0012cee:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012cf1:	c1 f8 10             	sar    eax,0x10
c0012cf4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012cf7:	51                   	push   ecx
c0012cf8:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012cfc:	52                   	push   edx
c0012cfd:	56                   	push   esi
c0012cfe:	57                   	push   edi
c0012cff:	e8 ad fb ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d04:	83 c4 0c             	add    esp,0xc
c0012d07:	6a 27                	push   0x27
c0012d09:	6a 00                	push   0x0
c0012d0b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d0f:	51                   	push   ecx
c0012d10:	e8 db d7 fe ff       	call   c00004f0 <memset>
c0012d15:	6b c5 27             	imul   eax,ebp,0x27
c0012d18:	83 c4 0c             	add    esp,0xc
c0012d1b:	6a 27                	push   0x27
c0012d1d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012d24:	50                   	push   eax
c0012d25:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d29:	51                   	push   ecx
c0012d2a:	e8 61 d9 fe ff       	call   c0000690 <strncpy>
c0012d2f:	83 c4 0c             	add    esp,0xc
c0012d32:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012d36:	52                   	push   edx
c0012d37:	56                   	push   esi
c0012d38:	57                   	push   edi
c0012d39:	e8 97 fc ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d3e:	eb 19                	jmp    c0012d59 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012d40:	85 f6                	test   esi,esi
c0012d42:	74 18                	je     c0012d5c <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012d44:	52                   	push   edx
c0012d45:	52                   	push   edx
c0012d46:	56                   	push   esi
c0012d47:	57                   	push   edi
c0012d48:	e8 c4 fc ff ff       	call   c0012a11 <CmFreeExtent(Reghive_Tag*, int)>
c0012d4d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012d51:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012d55:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	45                   	inc    ebp
c0012d5d:	83 c3 03             	add    ebx,0x3
c0012d60:	83 fd 07             	cmp    ebp,0x7
c0012d63:	0f 85 47 ff ff ff    	jne    c0012cb0 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012d69:	50                   	push   eax
c0012d6a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012d6e:	50                   	push   eax
c0012d6f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d76:	57                   	push   edi
c0012d77:	e8 59 fc ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d7c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012d82:	5b                   	pop    ebx
c0012d83:	5e                   	pop    esi
c0012d84:	5f                   	pop    edi
c0012d85:	5d                   	pop    ebp
c0012d86:	c3                   	ret    

c0012d87 <CmGetMatch(char*, char*, bool, bool*)>:
c0012d87:	56                   	push   esi
c0012d88:	53                   	push   ebx
c0012d89:	50                   	push   eax
c0012d8a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012d8f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d93:	74 25                	je     c0012dba <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012d95:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d98:	31 db                	xor    ebx,ebx
c0012d9a:	50                   	push   eax
c0012d9b:	50                   	push   eax
c0012d9c:	8d 04 9d 00 35 02 c0 	lea    eax,[ebx*4-0x3ffdcb00]
c0012da3:	50                   	push   eax
c0012da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da8:	e8 d3 d9 fe ff       	call   c0000780 <strcmp>
c0012dad:	83 c4 10             	add    esp,0x10
c0012db0:	85 c0                	test   eax,eax
c0012db2:	74 2e                	je     c0012de2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012db4:	43                   	inc    ebx
c0012db5:	83 fb 3f             	cmp    ebx,0x3f
c0012db8:	75 e0                	jne    c0012d9a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012dba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012dbd:	31 db                	xor    ebx,ebx
c0012dbf:	51                   	push   ecx
c0012dc0:	51                   	push   ecx
c0012dc1:	8d 04 9d 00 35 02 c0 	lea    eax,[ebx*4-0x3ffdcb00]
c0012dc8:	50                   	push   eax
c0012dc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012dcd:	e8 ae d9 fe ff       	call   c0000780 <strcmp>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	85 c0                	test   eax,eax
c0012dd7:	74 09                	je     c0012de2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012dd9:	43                   	inc    ebx
c0012dda:	83 fb 3f             	cmp    ebx,0x3f
c0012ddd:	75 e0                	jne    c0012dbf <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012ddf:	83 cb ff             	or     ebx,0xffffffff
c0012de2:	5a                   	pop    edx
c0012de3:	89 d8                	mov    eax,ebx
c0012de5:	5b                   	pop    ebx
c0012de6:	5e                   	pop    esi
c0012de7:	c3                   	ret    

c0012de8 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012de8:	55                   	push   ebp
c0012de9:	31 c0                	xor    eax,eax
c0012deb:	57                   	push   edi
c0012dec:	56                   	push   esi
c0012ded:	53                   	push   ebx
c0012dee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012df2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012df6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012dfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012dfe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012e00:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012e03:	83 fd 1f             	cmp    ebp,0x1f
c0012e06:	7f 0b                	jg     c0012e13 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012e08:	0f b6 c2             	movzx  eax,dl
c0012e0b:	d3 e0                	shl    eax,cl
c0012e0d:	09 07                	or     DWORD PTR [edi],eax
c0012e0f:	b0 01                	mov    al,0x1
c0012e11:	01 33                	add    DWORD PTR [ebx],esi
c0012e13:	5b                   	pop    ebx
c0012e14:	5e                   	pop    esi
c0012e15:	5f                   	pop    edi
c0012e16:	5d                   	pop    ebp
c0012e17:	c3                   	ret    

c0012e18 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012e18:	57                   	push   edi
c0012e19:	56                   	push   esi
c0012e1a:	53                   	push   ebx
c0012e1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e1f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012e23:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012e27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e2b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012e2d:	7c 17                	jl     c0012e46 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012e2f:	8b 17                	mov    edx,DWORD PTR [edi]
c0012e31:	b8 01 00 00 00       	mov    eax,0x1
c0012e36:	d3 e0                	shl    eax,cl
c0012e38:	48                   	dec    eax
c0012e39:	21 d0                	and    eax,edx
c0012e3b:	d3 ea                	shr    edx,cl
c0012e3d:	89 17                	mov    DWORD PTR [edi],edx
c0012e3f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012e41:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e44:	eb 05                	jmp    c0012e4b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012e46:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e49:	31 c0                	xor    eax,eax
c0012e4b:	5b                   	pop    ebx
c0012e4c:	5e                   	pop    esi
c0012e4d:	5f                   	pop    edi
c0012e4e:	c3                   	ret    

c0012e4f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012e4f:	83 ec 40             	sub    esp,0x40
c0012e52:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e56:	50                   	push   eax
c0012e57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e5f:	e8 4d fa ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e64:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012e68:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012e6c:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012e70:	89 10                	mov    DWORD PTR [eax],edx
c0012e72:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012e75:	83 c4 4c             	add    esp,0x4c
c0012e78:	c3                   	ret    

c0012e79 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012e79:	55                   	push   ebp
c0012e7a:	57                   	push   edi
c0012e7b:	56                   	push   esi
c0012e7c:	53                   	push   ebx
c0012e7d:	83 ec 40             	sub    esp,0x40
c0012e80:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012e84:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012e88:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012e8c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012e90:	53                   	push   ebx
c0012e91:	56                   	push   esi
c0012e92:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e96:	e8 16 fa ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e9b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012e9f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012ea3:	83 c4 0c             	add    esp,0xc
c0012ea6:	53                   	push   ebx
c0012ea7:	56                   	push   esi
c0012ea8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012eac:	e8 24 fb ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012eb1:	83 c4 4c             	add    esp,0x4c
c0012eb4:	5b                   	pop    ebx
c0012eb5:	5e                   	pop    esi
c0012eb6:	5f                   	pop    edi
c0012eb7:	5d                   	pop    ebp
c0012eb8:	c3                   	ret    

c0012eb9 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012eb9:	55                   	push   ebp
c0012eba:	57                   	push   edi
c0012ebb:	56                   	push   esi
c0012ebc:	31 f6                	xor    esi,esi
c0012ebe:	53                   	push   ebx
c0012ebf:	31 db                	xor    ebx,ebx
c0012ec1:	83 ec 40             	sub    esp,0x40
c0012ec4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012ecc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ed4:	6a 12                	push   0x12
c0012ed6:	68 ee 00 00 00       	push   0xee
c0012edb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012edf:	e8 0c d6 fe ff       	call   c00004f0 <memset>
c0012ee4:	83 c4 10             	add    esp,0x10
c0012ee7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012eeb:	6a 08                	push   0x8
c0012eed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ef1:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012ef5:	50                   	push   eax
c0012ef6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012efa:	55                   	push   ebp
c0012efb:	57                   	push   edi
c0012efc:	e8 e7 fe ff ff       	call   c0012de8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012f01:	83 c4 10             	add    esp,0x10
c0012f04:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f08:	50                   	push   eax
c0012f09:	6a 06                	push   0x6
c0012f0b:	55                   	push   ebp
c0012f0c:	57                   	push   edi
c0012f0d:	e8 06 ff ff ff       	call   c0012e18 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f1a:	74 07                	je     c0012f23 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012f1c:	46                   	inc    esi
c0012f1d:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012f21:	eb e1                	jmp    c0012f04 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012f23:	43                   	inc    ebx
c0012f24:	83 fb 12             	cmp    ebx,0x12
c0012f27:	75 c2                	jne    c0012eeb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012f29:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f2d:	31 f6                	xor    esi,esi
c0012f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f32:	50                   	push   eax
c0012f33:	50                   	push   eax
c0012f34:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012f39:	46                   	inc    esi
c0012f3a:	8d 04 85 00 35 02 c0 	lea    eax,[eax*4-0x3ffdcb00]
c0012f41:	50                   	push   eax
c0012f42:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f46:	e8 25 d9 fe ff       	call   c0000870 <strcat>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	83 fe 18             	cmp    esi,0x18
c0012f51:	75 df                	jne    c0012f32 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012f53:	83 c4 3c             	add    esp,0x3c
c0012f56:	31 c0                	xor    eax,eax
c0012f58:	5b                   	pop    ebx
c0012f59:	5e                   	pop    esi
c0012f5a:	5f                   	pop    edi
c0012f5b:	5d                   	pop    ebp
c0012f5c:	c3                   	ret    

c0012f5d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012f5d:	83 ec 40             	sub    esp,0x40
c0012f60:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f64:	50                   	push   eax
c0012f65:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f6d:	e8 3f f9 ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f72:	58                   	pop    eax
c0012f73:	5a                   	pop    edx
c0012f74:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012f78:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012f7c:	50                   	push   eax
c0012f7d:	e8 37 ff ff ff       	call   c0012eb9 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012f82:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012f87:	83 c4 4c             	add    esp,0x4c
c0012f8a:	c3                   	ret    

c0012f8b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012f8b:	55                   	push   ebp
c0012f8c:	57                   	push   edi
c0012f8d:	56                   	push   esi
c0012f8e:	53                   	push   ebx
c0012f8f:	31 db                	xor    ebx,ebx
c0012f91:	83 ec 70             	sub    esp,0x70
c0012f94:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012f9b:	6a 30                	push   0x30
c0012f9d:	6a 00                	push   0x0
c0012f9f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012fa3:	56                   	push   esi
c0012fa4:	e8 47 d5 fe ff       	call   c00004f0 <memset>
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	83 ec 0c             	sub    esp,0xc
c0012faf:	57                   	push   edi
c0012fb0:	e8 cb d5 fe ff       	call   c0000580 <strlen>
c0012fb5:	83 c4 10             	add    esp,0x10
c0012fb8:	39 d8                	cmp    eax,ebx
c0012fba:	76 16                	jbe    c0012fd2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012fbc:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012fc0:	83 ec 0c             	sub    esp,0xc
c0012fc3:	50                   	push   eax
c0012fc4:	e8 97 d9 fe ff       	call   c0000960 <toupper>
c0012fc9:	83 c4 10             	add    esp,0x10
c0012fcc:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012fcf:	43                   	inc    ebx
c0012fd0:	eb da                	jmp    c0012fac <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012fd2:	52                   	push   edx
c0012fd3:	31 db                	xor    ebx,ebx
c0012fd5:	6a 18                	push   0x18
c0012fd7:	31 ff                	xor    edi,edi
c0012fd9:	6a 3f                	push   0x3f
c0012fdb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fdf:	50                   	push   eax
c0012fe0:	e8 0b d5 fe ff       	call   c00004f0 <memset>
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012fec:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012ff0:	84 c0                	test   al,al
c0012ff2:	0f 84 af 00 00 00    	je     c00130a7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012ff8:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012ffc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012fff:	83 ec 0c             	sub    esp,0xc
c0013002:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0013007:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001300b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001300f:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013014:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013018:	56                   	push   esi
c0013019:	e8 62 d5 fe ff       	call   c0000580 <strlen>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	85 c0                	test   eax,eax
c0013023:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013027:	74 0b                	je     c0013034 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013029:	50                   	push   eax
c001302a:	6a 01                	push   0x1
c001302c:	56                   	push   esi
c001302d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013031:	50                   	push   eax
c0013032:	eb 0a                	jmp    c001303e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013034:	50                   	push   eax
c0013035:	6a 00                	push   0x0
c0013037:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001303b:	50                   	push   eax
c001303c:	6a 00                	push   0x0
c001303e:	e8 44 fd ff ff       	call   c0012d87 <CmGetMatch(char*, char*, bool, bool*)>
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	83 f8 ff             	cmp    eax,0xffffffff
c0013049:	75 1a                	jne    c0013065 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001304b:	83 ec 0c             	sub    esp,0xc
c001304e:	68 79 20 02 c0       	push   0xc0022079
c0013053:	e8 91 e2 ff ff       	call   c00112e9 <KePanic(char const*)>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	b8 02 00 00 00       	mov    eax,0x2
c0013060:	e9 bb 00 00 00       	jmp    c0013120 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013065:	83 ff 18             	cmp    edi,0x18
c0013068:	75 1a                	jne    c0013084 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001306a:	83 ec 0c             	sub    esp,0xc
c001306d:	68 8e 20 02 c0       	push   0xc002208e
c0013072:	e8 72 e2 ff ff       	call   c00112e9 <KePanic(char const*)>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	b8 01 00 00 00       	mov    eax,0x1
c001307f:	e9 9c 00 00 00       	jmp    c0013120 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013084:	47                   	inc    edi
c0013085:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001308a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001308e:	0f 45 dd             	cmovne ebx,ebp
c0013091:	83 ec 0c             	sub    esp,0xc
c0013094:	56                   	push   esi
c0013095:	e8 e6 d4 fe ff       	call   c0000580 <strlen>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	85 c0                	test   eax,eax
c001309f:	74 06                	je     c00130a7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00130a1:	43                   	inc    ebx
c00130a2:	e9 41 ff ff ff       	jmp    c0012fe8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00130a7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00130af:	31 db                	xor    ebx,ebx
c00130b1:	31 ff                	xor    edi,edi
c00130b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00130bb:	50                   	push   eax
c00130bc:	6a 12                	push   0x12
c00130be:	68 ee 00 00 00       	push   0xee
c00130c3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00130ca:	e8 21 d4 fe ff       	call   c00004f0 <memset>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00130d6:	83 fb 17             	cmp    ebx,0x17
c00130d9:	7e 26                	jle    c0013101 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00130db:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130df:	50                   	push   eax
c00130e0:	6a 08                	push   0x8
c00130e2:	55                   	push   ebp
c00130e3:	56                   	push   esi
c00130e4:	e8 2f fd ff ff       	call   c0012e18 <CmGetShift(unsigned int*, int*, int, bool*)>
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130f1:	74 26                	je     c0013119 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00130f3:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00130fa:	4b                   	dec    ebx
c00130fb:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00130fe:	47                   	inc    edi
c00130ff:	eb 1c                	jmp    c001311d <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013101:	6a 06                	push   0x6
c0013103:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013108:	50                   	push   eax
c0013109:	55                   	push   ebp
c001310a:	56                   	push   esi
c001310b:	e8 d8 fc ff ff       	call   c0012de8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	84 c0                	test   al,al
c0013115:	75 06                	jne    c001311d <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013117:	eb c2                	jmp    c00130db <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013119:	31 c0                	xor    eax,eax
c001311b:	eb 03                	jmp    c0013120 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001311d:	43                   	inc    ebx
c001311e:	eb b2                	jmp    c00130d2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013120:	83 c4 6c             	add    esp,0x6c
c0013123:	5b                   	pop    ebx
c0013124:	5e                   	pop    esi
c0013125:	5f                   	pop    edi
c0013126:	5d                   	pop    ebp
c0013127:	c3                   	ret    

c0013128 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013128:	53                   	push   ebx
c0013129:	83 ec 3c             	sub    esp,0x3c
c001312c:	6a 2b                	push   0x2b
c001312e:	6a 00                	push   0x0
c0013130:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013134:	53                   	push   ebx
c0013135:	e8 b6 d3 fe ff       	call   c00004f0 <memset>
c001313a:	58                   	pop    eax
c001313b:	5a                   	pop    edx
c001313c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013140:	50                   	push   eax
c0013141:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013145:	e8 41 fe ff ff       	call   c0012f8b <CmConvertToInternalFilename(char const*, unsigned char*)>
c001314a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001314f:	83 c4 0c             	add    esp,0xc
c0013152:	6a 15                	push   0x15
c0013154:	6a 00                	push   0x0
c0013156:	8d 44 24 27          	lea    eax,[esp+0x27]
c001315a:	50                   	push   eax
c001315b:	e8 90 d3 fe ff       	call   c00004f0 <memset>
c0013160:	53                   	push   ebx
c0013161:	6a 00                	push   0x0
c0013163:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013167:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001316b:	e8 eb f9 ff ff       	call   c0012b5b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013170:	83 c4 58             	add    esp,0x58
c0013173:	5b                   	pop    ebx
c0013174:	c3                   	ret    

c0013175 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013175:	56                   	push   esi
c0013176:	53                   	push   ebx
c0013177:	83 ec 48             	sub    esp,0x48
c001317a:	6a 12                	push   0x12
c001317c:	68 ff 00 00 00       	push   0xff
c0013181:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013185:	56                   	push   esi
c0013186:	e8 65 d3 fe ff       	call   c00004f0 <memset>
c001318b:	5a                   	pop    edx
c001318c:	59                   	pop    ecx
c001318d:	56                   	push   esi
c001318e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013192:	e8 f4 fd ff ff       	call   c0012f8b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013197:	83 c4 10             	add    esp,0x10
c001319a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001319e:	85 db                	test   ebx,ebx
c00131a0:	74 42                	je     c00131e4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00131a2:	50                   	push   eax
c00131a3:	8d 44 24 19          	lea    eax,[esp+0x19]
c00131a7:	50                   	push   eax
c00131a8:	53                   	push   ebx
c00131a9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131ad:	e8 ff f6 ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131b2:	83 c4 0c             	add    esp,0xc
c00131b5:	6a 12                	push   0x12
c00131b7:	8d 44 24 21          	lea    eax,[esp+0x21]
c00131bb:	50                   	push   eax
c00131bc:	56                   	push   esi
c00131bd:	e8 be d1 fe ff       	call   c0000380 <memcmp>
c00131c2:	83 c4 10             	add    esp,0x10
c00131c5:	85 c0                	test   eax,eax
c00131c7:	74 1e                	je     c00131e7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00131c9:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00131ce:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00131d3:	c1 e3 08             	shl    ebx,0x8
c00131d6:	09 d8                	or     eax,ebx
c00131d8:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00131dd:	c1 e3 10             	shl    ebx,0x10
c00131e0:	09 c3                	or     ebx,eax
c00131e2:	eb ba                	jmp    c001319e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00131e4:	83 cb ff             	or     ebx,0xffffffff
c00131e7:	83 c4 44             	add    esp,0x44
c00131ea:	89 d8                	mov    eax,ebx
c00131ec:	5b                   	pop    ebx
c00131ed:	5e                   	pop    esi
c00131ee:	c3                   	ret    

c00131ef <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00131ef:	57                   	push   edi
c00131f0:	56                   	push   esi
c00131f1:	53                   	push   ebx
c00131f2:	83 ec 34             	sub    esp,0x34
c00131f5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00131f9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00131fd:	6a 2b                	push   0x2b
c00131ff:	6a 00                	push   0x0
c0013201:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013205:	53                   	push   ebx
c0013206:	e8 e5 d2 fe ff       	call   c00004f0 <memset>
c001320b:	58                   	pop    eax
c001320c:	5a                   	pop    edx
c001320d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013211:	50                   	push   eax
c0013212:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013216:	e8 70 fd ff ff       	call   c0012f8b <CmConvertToInternalFilename(char const*, unsigned char*)>
c001321b:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001321f:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013223:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013227:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001322b:	53                   	push   ebx
c001322c:	6a 00                	push   0x0
c001322e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013232:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013236:	e8 20 f9 ff ff       	call   c0012b5b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001323b:	83 c4 50             	add    esp,0x50
c001323e:	5b                   	pop    ebx
c001323f:	5e                   	pop    esi
c0013240:	5f                   	pop    edi
c0013241:	c3                   	ret    

c0013242 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013242:	55                   	push   ebp
c0013243:	57                   	push   edi
c0013244:	56                   	push   esi
c0013245:	53                   	push   ebx
c0013246:	83 ec 40             	sub    esp,0x40
c0013249:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001324d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013251:	6a 2b                	push   0x2b
c0013253:	6a 00                	push   0x0
c0013255:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013259:	56                   	push   esi
c001325a:	e8 91 d2 fe ff       	call   c00004f0 <memset>
c001325f:	5f                   	pop    edi
c0013260:	89 ef                	mov    edi,ebp
c0013262:	58                   	pop    eax
c0013263:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013267:	50                   	push   eax
c0013268:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001326c:	e8 1a fd ff ff       	call   c0012f8b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013271:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013276:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001327b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013280:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013285:	83 c4 10             	add    esp,0x10
c0013288:	85 ed                	test   ebp,ebp
c001328a:	74 14                	je     c00132a0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001328c:	51                   	push   ecx
c001328d:	51                   	push   ecx
c001328e:	57                   	push   edi
c001328f:	53                   	push   ebx
c0013290:	e8 0e f7 ff ff       	call   c00129a3 <CmGetNext(Reghive_Tag*, int)>
c0013295:	83 c4 10             	add    esp,0x10
c0013298:	85 c0                	test   eax,eax
c001329a:	74 04                	je     c00132a0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001329c:	89 c7                	mov    edi,eax
c001329e:	eb e8                	jmp    c0013288 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00132a0:	56                   	push   esi
c00132a1:	6a 00                	push   0x0
c00132a3:	57                   	push   edi
c00132a4:	53                   	push   ebx
c00132a5:	e8 b1 f8 ff ff       	call   c0012b5b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132aa:	83 c4 0c             	add    esp,0xc
c00132ad:	56                   	push   esi
c00132ae:	50                   	push   eax
c00132af:	89 c7                	mov    edi,eax
c00132b1:	53                   	push   ebx
c00132b2:	e8 fa f5 ff ff       	call   c00128b1 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132b7:	58                   	pop    eax
c00132b8:	5a                   	pop    edx
c00132b9:	6a 6c                	push   0x6c
c00132bb:	6a 00                	push   0x0
c00132bd:	6a 00                	push   0x0
c00132bf:	68 9f 20 02 c0       	push   0xc002209f
c00132c4:	57                   	push   edi
c00132c5:	53                   	push   ebx
c00132c6:	e8 24 ff ff ff       	call   c00131ef <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00132cb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00132cf:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00132d3:	c1 e8 10             	shr    eax,0x10
c00132d6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00132da:	83 c4 1c             	add    esp,0x1c
c00132dd:	56                   	push   esi
c00132de:	57                   	push   edi
c00132df:	53                   	push   ebx
c00132e0:	e8 f0 f6 ff ff       	call   c00129d5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00132ea:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00132ef:	c1 e0 08             	shl    eax,0x8
c00132f2:	09 c2                	or     edx,eax
c00132f4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00132f9:	83 c4 4c             	add    esp,0x4c
c00132fc:	5b                   	pop    ebx
c00132fd:	5e                   	pop    esi
c00132fe:	c1 e0 10             	shl    eax,0x10
c0013301:	09 d0                	or     eax,edx
c0013303:	5f                   	pop    edi
c0013304:	5d                   	pop    ebp
c0013305:	c3                   	ret    

c0013306 <zStrtok(char*, char const*)>:
c0013306:	55                   	push   ebp
c0013307:	57                   	push   edi
c0013308:	56                   	push   esi
c0013309:	53                   	push   ebx
c001330a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001330e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013312:	85 db                	test   ebx,ebx
c0013314:	74 2f                	je     c0013345 <zStrtok(char*, char const*)+0x3f>
c0013316:	85 c0                	test   eax,eax
c0013318:	75 09                	jne    c0013323 <zStrtok(char*, char const*)+0x1d>
c001331a:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c001331f:	85 c0                	test   eax,eax
c0013321:	74 50                	je     c0013373 <zStrtok(char*, char const*)+0x6d>
c0013323:	31 c9                	xor    ecx,ecx
c0013325:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013329:	74 03                	je     c001332e <zStrtok(char*, char const*)+0x28>
c001332b:	41                   	inc    ecx
c001332c:	eb f7                	jmp    c0013325 <zStrtok(char*, char const*)+0x1f>
c001332e:	31 d2                	xor    edx,edx
c0013330:	39 ca                	cmp    edx,ecx
c0013332:	74 15                	je     c0013349 <zStrtok(char*, char const*)+0x43>
c0013334:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013338:	8d 3c 10             	lea    edi,[eax+edx*1]
c001333b:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001333e:	39 ee                	cmp    esi,ebp
c0013340:	74 13                	je     c0013355 <zStrtok(char*, char const*)+0x4f>
c0013342:	42                   	inc    edx
c0013343:	eb eb                	jmp    c0013330 <zStrtok(char*, char const*)+0x2a>
c0013345:	31 c0                	xor    eax,eax
c0013347:	eb 2a                	jmp    c0013373 <zStrtok(char*, char const*)+0x6d>
c0013349:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013353:	eb 1e                	jmp    c0013373 <zStrtok(char*, char const*)+0x6d>
c0013355:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013358:	39 ce                	cmp    esi,ecx
c001335a:	75 0a                	jne    c0013366 <zStrtok(char*, char const*)+0x60>
c001335c:	40                   	inc    eax
c001335d:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c0013362:	89 d8                	mov    eax,ebx
c0013364:	eb 0d                	jmp    c0013373 <zStrtok(char*, char const*)+0x6d>
c0013366:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013369:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001336d:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013373:	5b                   	pop    ebx
c0013374:	5e                   	pop    esi
c0013375:	5f                   	pop    edi
c0013376:	5d                   	pop    ebp
c0013377:	c3                   	ret    

c0013378 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013378:	57                   	push   edi
c0013379:	56                   	push   esi
c001337a:	53                   	push   ebx
c001337b:	81 ec 08 01 00 00    	sub    esp,0x108
c0013381:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013388:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001338f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013393:	53                   	push   ebx
c0013394:	e8 b7 d2 fe ff       	call   c0000650 <strcpy>
c0013399:	59                   	pop    ecx
c001339a:	5e                   	pop    esi
c001339b:	68 03 24 02 c0       	push   0xc0022403
c00133a0:	53                   	push   ebx
c00133a1:	bb 01 00 00 00       	mov    ebx,0x1
c00133a6:	e8 5b ff ff ff       	call   c0013306 <zStrtok(char*, char const*)>
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	85 c0                	test   eax,eax
c00133b0:	74 3b                	je     c00133ed <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133b2:	52                   	push   edx
c00133b3:	50                   	push   eax
c00133b4:	6a 01                	push   0x1
c00133b6:	57                   	push   edi
c00133b7:	e8 b9 fd ff ff       	call   c0013175 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00133bc:	59                   	pop    ecx
c00133bd:	5e                   	pop    esi
c00133be:	89 c3                	mov    ebx,eax
c00133c0:	68 03 24 02 c0       	push   0xc0022403
c00133c5:	6a 00                	push   0x0
c00133c7:	e8 3a ff ff ff       	call   c0013306 <zStrtok(char*, char const*)>
c00133cc:	83 c4 10             	add    esp,0x10
c00133cf:	85 c0                	test   eax,eax
c00133d1:	89 c6                	mov    esi,eax
c00133d3:	74 18                	je     c00133ed <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133d5:	52                   	push   edx
c00133d6:	52                   	push   edx
c00133d7:	53                   	push   ebx
c00133d8:	57                   	push   edi
c00133d9:	e8 86 f5 ff ff       	call   c0012964 <CmEnterDirectory(Reghive_Tag*, int)>
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	83 f8 ff             	cmp    eax,0xffffffff
c00133e4:	89 c3                	mov    ebx,eax
c00133e6:	74 05                	je     c00133ed <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133e8:	50                   	push   eax
c00133e9:	56                   	push   esi
c00133ea:	53                   	push   ebx
c00133eb:	eb c9                	jmp    c00133b6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00133ed:	81 c4 00 01 00 00    	add    esp,0x100
c00133f3:	89 d8                	mov    eax,ebx
c00133f5:	5b                   	pop    ebx
c00133f6:	5e                   	pop    esi
c00133f7:	5f                   	pop    edi
c00133f8:	c3                   	ret    

c00133f9 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00133f9:	55                   	push   ebp
c00133fa:	57                   	push   edi
c00133fb:	56                   	push   esi
c00133fc:	53                   	push   ebx
c00133fd:	83 ec 5c             	sub    esp,0x5c
c0013400:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013404:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013408:	85 db                	test   ebx,ebx
c001340a:	0f 8e 84 00 00 00    	jle    c0013494 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013410:	57                   	push   edi
c0013411:	31 ed                	xor    ebp,ebp
c0013413:	6a 32                	push   0x32
c0013415:	6a 00                	push   0x0
c0013417:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001341b:	57                   	push   edi
c001341c:	e8 cf d0 fe ff       	call   c00004f0 <memset>
c0013421:	83 c4 0c             	add    esp,0xc
c0013424:	57                   	push   edi
c0013425:	53                   	push   ebx
c0013426:	56                   	push   esi
c0013427:	e8 31 fb ff ff       	call   c0012f5d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001342c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013430:	83 c4 10             	add    esp,0x10
c0013433:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013437:	7d 13                	jge    c001344c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013439:	83 ec 0c             	sub    esp,0xc
c001343c:	45                   	inc    ebp
c001343d:	68 a7 27 02 c0       	push   0xc00227a7
c0013442:	e8 c3 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	eb e7                	jmp    c0013433 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001344c:	51                   	push   ecx
c001344d:	57                   	push   edi
c001344e:	53                   	push   ebx
c001344f:	68 a5 20 02 c0       	push   0xc00220a5
c0013454:	e8 b1 74 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013459:	83 c4 10             	add    esp,0x10
c001345c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013461:	75 1e                	jne    c0013481 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013463:	52                   	push   edx
c0013464:	52                   	push   edx
c0013465:	53                   	push   ebx
c0013466:	56                   	push   esi
c0013467:	e8 f8 f4 ff ff       	call   c0012964 <CmEnterDirectory(Reghive_Tag*, int)>
c001346c:	83 c4 0c             	add    esp,0xc
c001346f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013473:	8d 51 04             	lea    edx,[ecx+0x4]
c0013476:	52                   	push   edx
c0013477:	50                   	push   eax
c0013478:	56                   	push   esi
c0013479:	e8 7b ff ff ff       	call   c00133f9 <CmDisplayTree(Reghive_Tag*, int, int)>
c001347e:	83 c4 10             	add    esp,0x10
c0013481:	50                   	push   eax
c0013482:	50                   	push   eax
c0013483:	53                   	push   ebx
c0013484:	56                   	push   esi
c0013485:	e8 19 f5 ff ff       	call   c00129a3 <CmGetNext(Reghive_Tag*, int)>
c001348a:	83 c4 10             	add    esp,0x10
c001348d:	89 c3                	mov    ebx,eax
c001348f:	e9 74 ff ff ff       	jmp    c0013408 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013494:	83 c4 5c             	add    esp,0x5c
c0013497:	5b                   	pop    ebx
c0013498:	5e                   	pop    esi
c0013499:	5f                   	pop    edi
c001349a:	5d                   	pop    ebp
c001349b:	c3                   	ret    

c001349c <CmSplitFinalSlashInPlace(char*)>:
c001349c:	53                   	push   ebx
c001349d:	83 ec 14             	sub    esp,0x14
c00134a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134a4:	53                   	push   ebx
c00134a5:	e8 d6 d0 fe ff       	call   c0000580 <strlen>
c00134aa:	83 c4 10             	add    esp,0x10
c00134ad:	48                   	dec    eax
c00134ae:	85 c0                	test   eax,eax
c00134b0:	74 15                	je     c00134c7 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00134b2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134b6:	8d 14 03             	lea    edx,[ebx+eax*1]
c00134b9:	75 09                	jne    c00134c4 <CmSplitFinalSlashInPlace(char*)+0x28>
c00134bb:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00134be:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00134c2:	eb 05                	jmp    c00134c9 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00134c4:	48                   	dec    eax
c00134c5:	eb e7                	jmp    c00134ae <CmSplitFinalSlashInPlace(char*)+0x12>
c00134c7:	31 c0                	xor    eax,eax
c00134c9:	83 c4 08             	add    esp,0x8
c00134cc:	5b                   	pop    ebx
c00134cd:	c3                   	ret    

c00134ce <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00134ce:	55                   	push   ebp
c00134cf:	57                   	push   edi
c00134d0:	56                   	push   esi
c00134d1:	53                   	push   ebx
c00134d2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00134d8:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00134df:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00134e2:	8d 43 01             	lea    eax,[ebx+0x1]
c00134e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134e9:	89 f0                	mov    eax,esi
c00134eb:	3c 40                	cmp    al,0x40
c00134ed:	75 1b                	jne    c001350a <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00134ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00134f2:	85 c0                	test   eax,eax
c00134f4:	74 08                	je     c00134fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00134f6:	83 f8 3a             	cmp    eax,0x3a
c00134f9:	74 03                	je     c00134fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00134fb:	43                   	inc    ebx
c00134fc:	eb f1                	jmp    c00134ef <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00134fe:	85 c0                	test   eax,eax
c0013500:	0f 84 45 01 00 00    	je     c001364b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013506:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013509:	43                   	inc    ebx
c001350a:	50                   	push   eax
c001350b:	6a 40                	push   0x40
c001350d:	6a 00                	push   0x0
c001350f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013513:	50                   	push   eax
c0013514:	e8 d7 cf fe ff       	call   c00004f0 <memset>
c0013519:	89 f1                	mov    ecx,esi
c001351b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013522:	31 c0                	xor    eax,eax
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	0f be f1             	movsx  esi,cl
c001352a:	0f be 17             	movsx  edx,BYTE PTR [edi]
c001352d:	85 d2                	test   edx,edx
c001352f:	89 d1                	mov    ecx,edx
c0013531:	0f 84 14 01 00 00    	je     c001364b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013537:	3d c7 00 00 00       	cmp    eax,0xc7
c001353c:	0f 8f 09 01 00 00    	jg     c001364b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013542:	83 fa 0a             	cmp    edx,0xa
c0013545:	0f 85 f1 00 00 00    	jne    c001363c <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c001354b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013550:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013555:	89 c8                	mov    eax,ecx
c0013557:	a8 df                	test   al,0xdf
c0013559:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001355e:	83 f9 23             	cmp    ecx,0x23
c0013561:	0f 94 c2             	sete   dl
c0013564:	89 d5                	mov    ebp,edx
c0013566:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001356a:	09 ea                	or     edx,ebp
c001356c:	80 e2 01             	and    dl,0x1
c001356f:	75 47                	jne    c00135b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013571:	83 e8 09             	sub    eax,0x9
c0013574:	3c 01                	cmp    al,0x1
c0013576:	76 40                	jbe    c00135b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013578:	83 f9 5b             	cmp    ecx,0x5b
c001357b:	75 42                	jne    c00135bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c001357d:	83 fe 40             	cmp    esi,0x40
c0013580:	75 36                	jne    c00135b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013589:	55                   	push   ebp
c001358a:	e8 f1 cf fe ff       	call   c0000580 <strlen>
c001358f:	83 c4 10             	add    esp,0x10
c0013592:	83 f8 3f             	cmp    eax,0x3f
c0013595:	0f 87 b0 00 00 00    	ja     c001364b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001359b:	50                   	push   eax
c001359c:	50                   	push   eax
c001359d:	55                   	push   ebp
c001359e:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c00135a2:	55                   	push   ebp
c00135a3:	e8 a8 d0 fe ff       	call   c0000650 <strcpy>
c00135a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00135ab:	e8 d0 cf fe ff       	call   c0000580 <strlen>
c00135b0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00135b5:	83 c4 10             	add    esp,0x10
c00135b8:	31 d2                	xor    edx,edx
c00135ba:	e9 84 00 00 00       	jmp    c0013643 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00135bf:	83 fe 40             	cmp    esi,0x40
c00135c2:	74 06                	je     c00135ca <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00135c4:	8d 54 24 58          	lea    edx,[esp+0x58]
c00135c8:	eb 19                	jmp    c00135e3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00135ca:	51                   	push   ecx
c00135cb:	51                   	push   ecx
c00135cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135d0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135d4:	50                   	push   eax
c00135d5:	e8 a6 d1 fe ff       	call   c0000780 <strcmp>
c00135da:	83 c4 10             	add    esp,0x10
c00135dd:	85 c0                	test   eax,eax
c00135df:	75 d7                	jne    c00135b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00135e1:	eb e1                	jmp    c00135c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00135e3:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00135e6:	85 c9                	test   ecx,ecx
c00135e8:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00135ed:	83 f9 3d             	cmp    ecx,0x3d
c00135f0:	0f 94 c0             	sete   al
c00135f3:	89 c5                	mov    ebp,eax
c00135f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135f9:	09 e8                	or     eax,ebp
c00135fb:	a8 01                	test   al,0x1
c00135fd:	89 c5                	mov    ebp,eax
c00135ff:	75 03                	jne    c0013604 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013601:	42                   	inc    edx
c0013602:	eb df                	jmp    c00135e3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013604:	85 c9                	test   ecx,ecx
c0013606:	74 43                	je     c001364b <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001360c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001360f:	52                   	push   edx
c0013610:	52                   	push   edx
c0013611:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013615:	50                   	push   eax
c0013616:	53                   	push   ebx
c0013617:	e8 64 d1 fe ff       	call   c0000780 <strcmp>
c001361c:	83 c4 10             	add    esp,0x10
c001361f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013623:	85 c0                	test   eax,eax
c0013625:	75 91                	jne    c00135b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013627:	50                   	push   eax
c0013628:	42                   	inc    edx
c0013629:	50                   	push   eax
c001362a:	52                   	push   edx
c001362b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013632:	e8 19 d0 fe ff       	call   c0000650 <strcpy>
c0013637:	83 c4 10             	add    esp,0x10
c001363a:	eb 11                	jmp    c001364d <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c001363c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013640:	8d 50 01             	lea    edx,[eax+0x1]
c0013643:	47                   	inc    edi
c0013644:	89 d0                	mov    eax,edx
c0013646:	e9 df fe ff ff       	jmp    c001352a <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c001364b:	31 ed                	xor    ebp,ebp
c001364d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013653:	89 e8                	mov    eax,ebp
c0013655:	5b                   	pop    ebx
c0013656:	5e                   	pop    esi
c0013657:	5f                   	pop    edi
c0013658:	5d                   	pop    ebp
c0013659:	c3                   	ret    

c001365a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001365a:	57                   	push   edi
c001365b:	56                   	push   esi
c001365c:	53                   	push   ebx
c001365d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013663:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001366a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013671:	53                   	push   ebx
c0013672:	e8 09 cf fe ff       	call   c0000580 <strlen>
c0013677:	89 34 24             	mov    DWORD PTR [esp],esi
c001367a:	89 c7                	mov    edi,eax
c001367c:	e8 ff ce fe ff       	call   c0000580 <strlen>
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013688:	3d ff 00 00 00       	cmp    eax,0xff
c001368d:	0f 87 d3 00 00 00    	ja     c0013766 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013693:	57                   	push   edi
c0013694:	57                   	push   edi
c0013695:	56                   	push   esi
c0013696:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001369a:	56                   	push   esi
c001369b:	e8 b0 cf fe ff       	call   c0000650 <strcpy>
c00136a0:	58                   	pop    eax
c00136a1:	5a                   	pop    edx
c00136a2:	68 03 24 02 c0       	push   0xc0022403
c00136a7:	56                   	push   esi
c00136a8:	e8 c3 d1 fe ff       	call   c0000870 <strcat>
c00136ad:	59                   	pop    ecx
c00136ae:	5f                   	pop    edi
c00136af:	53                   	push   ebx
c00136b0:	56                   	push   esi
c00136b1:	e8 ba d1 fe ff       	call   c0000870 <strcat>
c00136b6:	58                   	pop    eax
c00136b7:	5a                   	pop    edx
c00136b8:	68 af 20 02 c0       	push   0xc00220af
c00136bd:	56                   	push   esi
c00136be:	e8 ad d1 fe ff       	call   c0000870 <strcat>
c00136c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00136ca:	e8 04 44 ff ff       	call   c0007ad3 <malloc>
c00136cf:	83 c4 0c             	add    esp,0xc
c00136d2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00136d8:	56                   	push   esi
c00136d9:	50                   	push   eax
c00136da:	89 c3                	mov    ebx,eax
c00136dc:	e8 41 81 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c00136e1:	83 c4 10             	add    esp,0x10
c00136e4:	85 db                	test   ebx,ebx
c00136e6:	74 7e                	je     c0013766 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00136e8:	51                   	push   ecx
c00136e9:	51                   	push   ecx
c00136ea:	6a 01                	push   0x1
c00136ec:	53                   	push   ebx
c00136ed:	e8 f8 81 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c00136f2:	83 c4 10             	add    esp,0x10
c00136f5:	85 c0                	test   eax,eax
c00136f7:	74 08                	je     c0013701 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00136f9:	83 ec 0c             	sub    esp,0xc
c00136fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136fe:	53                   	push   ebx
c00136ff:	eb 5f                	jmp    c0013760 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013701:	52                   	push   edx
c0013702:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013706:	50                   	push   eax
c0013707:	8d 44 24 20          	lea    eax,[esp+0x20]
c001370b:	50                   	push   eax
c001370c:	53                   	push   ebx
c001370d:	e8 da 84 ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c0013712:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013716:	83 c4 10             	add    esp,0x10
c0013719:	89 c1                	mov    ecx,eax
c001371b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001371f:	74 31                	je     c0013752 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013721:	83 ec 0c             	sub    esp,0xc
c0013724:	50                   	push   eax
c0013725:	e8 a9 43 ff ff       	call   c0007ad3 <malloc>
c001372a:	89 c6                	mov    esi,eax
c001372c:	58                   	pop    eax
c001372d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001372f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013733:	52                   	push   edx
c0013734:	56                   	push   esi
c0013735:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013739:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001373d:	53                   	push   ebx
c001373e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013741:	83 c4 20             	add    esp,0x20
c0013744:	85 c0                	test   eax,eax
c0013746:	75 0a                	jne    c0013752 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001374c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013750:	74 18                	je     c001376a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013752:	83 ec 0c             	sub    esp,0xc
c0013755:	53                   	push   ebx
c0013756:	e8 ed 81 ff ff       	call   c000b948 <File::close()>
c001375b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001375d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013760:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013763:	83 c4 10             	add    esp,0x10
c0013766:	31 c0                	xor    eax,eax
c0013768:	eb 3b                	jmp    c00137a5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001376a:	83 ec 0c             	sub    esp,0xc
c001376d:	53                   	push   ebx
c001376e:	e8 d5 81 ff ff       	call   c000b948 <File::close()>
c0013773:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013775:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013778:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001377b:	83 c4 0c             	add    esp,0xc
c001377e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013785:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001378c:	56                   	push   esi
c001378d:	e8 3c fd ff ff       	call   c00134ce <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013792:	89 34 24             	mov    DWORD PTR [esp],esi
c0013795:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013799:	e8 45 43 ff ff       	call   c0007ae3 <free>
c001379e:	83 c4 10             	add    esp,0x10
c00137a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00137a5:	81 c4 20 01 00 00    	add    esp,0x120
c00137ab:	5b                   	pop    ebx
c00137ac:	5e                   	pop    esi
c00137ad:	5f                   	pop    edi
c00137ae:	c3                   	ret    

c00137af <Reg::getLine(char*, char*, char*)>:
c00137af:	57                   	push   edi
c00137b0:	56                   	push   esi
c00137b1:	53                   	push   ebx
c00137b2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137be:	57                   	push   edi
c00137bf:	56                   	push   esi
c00137c0:	53                   	push   ebx
c00137c1:	68 b4 20 02 c0       	push   0xc00220b4
c00137c6:	e8 8f fe ff ff       	call   c001365a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	84 c0                	test   al,al
c00137d0:	75 10                	jne    c00137e2 <Reg::getLine(char*, char*, char*)+0x33>
c00137d2:	57                   	push   edi
c00137d3:	56                   	push   esi
c00137d4:	53                   	push   ebx
c00137d5:	68 d9 20 02 c0       	push   0xc00220d9
c00137da:	e8 7b fe ff ff       	call   c001365a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137df:	83 c4 10             	add    esp,0x10
c00137e2:	5b                   	pop    ebx
c00137e3:	5e                   	pop    esi
c00137e4:	5f                   	pop    edi
c00137e5:	c3                   	ret    

c00137e6 <Reg::readInt(char*, char*, int*)>:
c00137e6:	55                   	push   ebp
c00137e7:	57                   	push   edi
c00137e8:	56                   	push   esi
c00137e9:	53                   	push   ebx
c00137ea:	81 ec f0 00 00 00    	sub    esp,0xf0
c00137f0:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00137f4:	55                   	push   ebp
c00137f5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00137fc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013803:	e8 a7 ff ff ff       	call   c00137af <Reg::getLine(char*, char*, char*)>
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	84 c0                	test   al,al
c001380d:	0f 84 b6 00 00 00    	je     c00138c9 <Reg::readInt(char*, char*, int*)+0xe3>
c0013813:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013818:	83 fa 2b             	cmp    edx,0x2b
c001381b:	74 0c                	je     c0013829 <Reg::readInt(char*, char*, int*)+0x43>
c001381d:	83 fa 2d             	cmp    edx,0x2d
c0013820:	75 0e                	jne    c0013830 <Reg::readInt(char*, char*, int*)+0x4a>
c0013822:	ba 01 00 00 00       	mov    edx,0x1
c0013827:	eb 0b                	jmp    c0013834 <Reg::readInt(char*, char*, int*)+0x4e>
c0013829:	ba 01 00 00 00       	mov    edx,0x1
c001382e:	eb 02                	jmp    c0013832 <Reg::readInt(char*, char*, int*)+0x4c>
c0013830:	31 d2                	xor    edx,edx
c0013832:	31 c0                	xor    eax,eax
c0013834:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013839:	be 0a 00 00 00       	mov    esi,0xa
c001383e:	75 21                	jne    c0013861 <Reg::readInt(char*, char*, int*)+0x7b>
c0013840:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013845:	83 f9 78             	cmp    ecx,0x78
c0013848:	75 0a                	jne    c0013854 <Reg::readInt(char*, char*, int*)+0x6e>
c001384a:	83 c2 02             	add    edx,0x2
c001384d:	be 10 00 00 00       	mov    esi,0x10
c0013852:	eb 0d                	jmp    c0013861 <Reg::readInt(char*, char*, int*)+0x7b>
c0013854:	83 f9 62             	cmp    ecx,0x62
c0013857:	75 08                	jne    c0013861 <Reg::readInt(char*, char*, int*)+0x7b>
c0013859:	83 c2 02             	add    edx,0x2
c001385c:	be 02 00 00 00       	mov    esi,0x2
c0013861:	01 d5                	add    ebp,edx
c0013863:	31 d2                	xor    edx,edx
c0013865:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013869:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001386d:	85 c9                	test   ecx,ecx
c001386f:	0f 94 c3             	sete   bl
c0013872:	83 f9 0d             	cmp    ecx,0xd
c0013875:	89 df                	mov    edi,ebx
c0013877:	0f 94 c3             	sete   bl
c001387a:	09 df                	or     edi,ebx
c001387c:	89 fb                	mov    ebx,edi
c001387e:	83 e7 01             	and    edi,0x1
c0013881:	75 35                	jne    c00138b8 <Reg::readInt(char*, char*, int*)+0xd2>
c0013883:	0f af d6             	imul   edx,esi
c0013886:	83 fe 10             	cmp    esi,0x10
c0013889:	75 26                	jne    c00138b1 <Reg::readInt(char*, char*, int*)+0xcb>
c001388b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001388f:	83 ef 41             	sub    edi,0x41
c0013892:	89 fb                	mov    ebx,edi
c0013894:	80 fb 05             	cmp    bl,0x5
c0013897:	77 06                	ja     c001389f <Reg::readInt(char*, char*, int*)+0xb9>
c0013899:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001389d:	eb 16                	jmp    c00138b5 <Reg::readInt(char*, char*, int*)+0xcf>
c001389f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138a3:	83 eb 61             	sub    ebx,0x61
c00138a6:	80 fb 05             	cmp    bl,0x5
c00138a9:	77 06                	ja     c00138b1 <Reg::readInt(char*, char*, int*)+0xcb>
c00138ab:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00138af:	eb 04                	jmp    c00138b5 <Reg::readInt(char*, char*, int*)+0xcf>
c00138b1:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00138b5:	45                   	inc    ebp
c00138b6:	eb ad                	jmp    c0013865 <Reg::readInt(char*, char*, int*)+0x7f>
c00138b8:	84 c0                	test   al,al
c00138ba:	74 02                	je     c00138be <Reg::readInt(char*, char*, int*)+0xd8>
c00138bc:	f7 da                	neg    edx
c00138be:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00138c5:	89 10                	mov    DWORD PTR [eax],edx
c00138c7:	88 d8                	mov    al,bl
c00138c9:	81 c4 ec 00 00 00    	add    esp,0xec
c00138cf:	5b                   	pop    ebx
c00138d0:	5e                   	pop    esi
c00138d1:	5f                   	pop    edi
c00138d2:	5d                   	pop    ebp
c00138d3:	c3                   	ret    

c00138d4 <Reg::readString(char*, char*, char*, int)>:
c00138d4:	57                   	push   edi
c00138d5:	56                   	push   esi
c00138d6:	53                   	push   ebx
c00138d7:	81 ec d4 00 00 00    	sub    esp,0xd4
c00138dd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00138e1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00138e8:	57                   	push   edi
c00138e9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00138f0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00138f7:	e8 b3 fe ff ff       	call   c00137af <Reg::getLine(char*, char*, char*)>
c00138fc:	83 c4 10             	add    esp,0x10
c00138ff:	84 c0                	test   al,al
c0013901:	89 c6                	mov    esi,eax
c0013903:	74 44                	je     c0013949 <Reg::readString(char*, char*, char*, int)+0x75>
c0013905:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001390c:	31 c0                	xor    eax,eax
c001390e:	4a                   	dec    edx
c001390f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013912:	84 c9                	test   cl,cl
c0013914:	74 0f                	je     c0013925 <Reg::readString(char*, char*, char*, int)+0x51>
c0013916:	39 c2                	cmp    edx,eax
c0013918:	7e 0b                	jle    c0013925 <Reg::readString(char*, char*, char*, int)+0x51>
c001391a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001391d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013922:	40                   	inc    eax
c0013923:	eb ea                	jmp    c001390f <Reg::readString(char*, char*, char*, int)+0x3b>
c0013925:	83 ec 0c             	sub    esp,0xc
c0013928:	53                   	push   ebx
c0013929:	e8 52 cc fe ff       	call   c0000580 <strlen>
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013936:	75 11                	jne    c0013949 <Reg::readString(char*, char*, char*, int)+0x75>
c0013938:	83 ec 0c             	sub    esp,0xc
c001393b:	53                   	push   ebx
c001393c:	e8 3f cc fe ff       	call   c0000580 <strlen>
c0013941:	83 c4 10             	add    esp,0x10
c0013944:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013949:	81 c4 d0 00 00 00    	add    esp,0xd0
c001394f:	89 f0                	mov    eax,esi
c0013951:	5b                   	pop    ebx
c0013952:	5e                   	pop    esi
c0013953:	5f                   	pop    edi
c0013954:	c3                   	ret    

c0013955 <Reg::readBool(char*, char*, bool*)>:
c0013955:	83 ec 20             	sub    esp,0x20
c0013958:	8d 44 24 10          	lea    eax,[esp+0x10]
c001395c:	50                   	push   eax
c001395d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013961:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013965:	e8 7c fe ff ff       	call   c00137e6 <Reg::readInt(char*, char*, int*)>
c001396a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001396e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013973:	0f 95 02             	setne  BYTE PTR [edx]
c0013976:	83 c4 2c             	add    esp,0x2c
c0013979:	c3                   	ret    

c001397a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001397a:	53                   	push   ebx
c001397b:	83 ec 1c             	sub    esp,0x1c
c001397e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013982:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013986:	50                   	push   eax
c0013987:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001398b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001398f:	e8 c1 ff ff ff       	call   c0013955 <Reg::readBool(char*, char*, bool*)>
c0013994:	83 c4 10             	add    esp,0x10
c0013997:	84 c0                	test   al,al
c0013999:	74 04                	je     c001399f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001399b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001399f:	83 c4 18             	add    esp,0x18
c00139a2:	88 d8                	mov    al,bl
c00139a4:	5b                   	pop    ebx
c00139a5:	c3                   	ret    

c00139a6 <Reg::readIntWithDefault(char*, char*, int)>:
c00139a6:	53                   	push   ebx
c00139a7:	83 ec 1c             	sub    esp,0x1c
c00139aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00139b2:	50                   	push   eax
c00139b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139bb:	e8 26 fe ff ff       	call   c00137e6 <Reg::readInt(char*, char*, int*)>
c00139c0:	83 c4 10             	add    esp,0x10
c00139c3:	84 c0                	test   al,al
c00139c5:	74 04                	je     c00139cb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00139c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00139cb:	83 c4 18             	add    esp,0x18
c00139ce:	89 d8                	mov    eax,ebx
c00139d0:	5b                   	pop    ebx
c00139d1:	c3                   	ret    

c00139d2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00139d2:	57                   	push   edi
c00139d3:	56                   	push   esi
c00139d4:	53                   	push   ebx
c00139d5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00139d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00139e1:	56                   	push   esi
c00139e2:	57                   	push   edi
c00139e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139eb:	e8 e4 fe ff ff       	call   c00138d4 <Reg::readString(char*, char*, char*, int)>
c00139f0:	83 c4 10             	add    esp,0x10
c00139f3:	84 c0                	test   al,al
c00139f5:	75 16                	jne    c0013a0d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00139f7:	50                   	push   eax
c00139f8:	56                   	push   esi
c00139f9:	6a 00                	push   0x0
c00139fb:	57                   	push   edi
c00139fc:	e8 ef ca fe ff       	call   c00004f0 <memset>
c0013a01:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013a04:	89 de                	mov    esi,ebx
c0013a06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a08:	83 c4 10             	add    esp,0x10
c0013a0b:	89 df                	mov    edi,ebx
c0013a0d:	5b                   	pop    ebx
c0013a0e:	89 f8                	mov    eax,edi
c0013a10:	5e                   	pop    esi
c0013a11:	5f                   	pop    edi
c0013a12:	c3                   	ret    

c0013a13 <SysEject(regs*)>:
c0013a13:	83 ec 0c             	sub    esp,0xc
c0013a16:	83 ca ff             	or     edx,0xffffffff
c0013a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013a20:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013a25:	83 e9 41             	sub    ecx,0x41
c0013a28:	83 f9 19             	cmp    ecx,0x19
c0013a2b:	77 18                	ja     c0013a45 <SysEject(regs*)+0x32>
c0013a2d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013a34:	85 c9                	test   ecx,ecx
c0013a36:	74 0d                	je     c0013a45 <SysEject(regs*)+0x32>
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	51                   	push   ecx
c0013a3c:	e8 8b a0 ff ff       	call   c000dacc <LogicalDisk::eject()>
c0013a41:	83 c4 10             	add    esp,0x10
c0013a44:	99                   	cdq    
c0013a45:	83 c4 0c             	add    esp,0xc
c0013a48:	c3                   	ret    

c0013a49 <SysExit(regs*)>:
c0013a49:	83 ec 18             	sub    esp,0x18
c0013a4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a50:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a53:	e8 10 2b 00 00       	call   c0016568 <terminateTask(int)>
c0013a58:	83 c8 ff             	or     eax,0xffffffff
c0013a5b:	83 c4 1c             	add    esp,0x1c
c0013a5e:	89 c2                	mov    edx,eax
c0013a60:	c3                   	ret    

c0013a61 <SysGetCwd(regs*)>:
c0013a61:	83 ec 10             	sub    esp,0x10
c0013a64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a68:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013a6b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a73:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a76:	e8 dd 7a ff ff       	call   c000b558 <Fs::getcwd(Process*, char*, int)>
c0013a7b:	83 c4 1c             	add    esp,0x1c
c0013a7e:	99                   	cdq    
c0013a7f:	c3                   	ret    

c0013a80 <SysGetPID(regs*)>:
c0013a80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a8a:	99                   	cdq    
c0013a8b:	c3                   	ret    

c0013a8c <SysGetRAMData(regs*)>:
c0013a8c:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013a96:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013a9c:	99                   	cdq    
c0013a9d:	f7 f9                	idiv   ecx
c0013a9f:	c1 e0 18             	shl    eax,0x18
c0013aa2:	09 c8                	or     eax,ecx
c0013aa4:	99                   	cdq    
c0013aa5:	c3                   	ret    

c0013aa6 <SysGetVGAPtr(regs*)>:
c0013aa6:	55                   	push   ebp
c0013aa7:	57                   	push   edi
c0013aa8:	56                   	push   esi
c0013aa9:	53                   	push   ebx
c0013aaa:	83 ec 18             	sub    esp,0x18
c0013aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ab1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ab4:	e8 7b 25 00 00       	call   c0016034 <Thr::processFromPID(int)>
c0013ab9:	83 c4 10             	add    esp,0x10
c0013abc:	89 c1                	mov    ecx,eax
c0013abe:	b8 01 00 00 00       	mov    eax,0x1
c0013ac3:	85 c9                	test   ecx,ecx
c0013ac5:	74 57                	je     c0013b1e <SysGetVGAPtr(regs*)+0x78>
c0013ac7:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013acb:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013ad1:	74 0c                	je     c0013adf <SysGetVGAPtr(regs*)+0x39>
c0013ad3:	83 ec 0c             	sub    esp,0xc
c0013ad6:	55                   	push   ebp
c0013ad7:	e8 93 4c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013ae2:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013ae7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013aea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013aec:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013aef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013af2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013af8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013afb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013afe:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013b04:	50                   	push   eax
c0013b05:	50                   	push   eax
c0013b06:	68 f4 20 02 c0       	push   0xc00220f4
c0013b0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b0e:	05 a8 0f 00 00       	add    eax,0xfa8
c0013b13:	50                   	push   eax
c0013b14:	e8 37 cb fe ff       	call   c0000650 <strcpy>
c0013b19:	83 c4 10             	add    esp,0x10
c0013b1c:	31 c0                	xor    eax,eax
c0013b1e:	83 c4 0c             	add    esp,0xc
c0013b21:	31 d2                	xor    edx,edx
c0013b23:	5b                   	pop    ebx
c0013b24:	5e                   	pop    esi
c0013b25:	5f                   	pop    edi
c0013b26:	5d                   	pop    ebp
c0013b27:	c3                   	ret    

c0013b28 <SysKill(regs*)>:
c0013b28:	53                   	push   ebx
c0013b29:	83 ec 08             	sub    esp,0x8
c0013b2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b30:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013b34:	75 16                	jne    c0013b4c <SysKill(regs*)+0x24>
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	68 fe 20 02 c0       	push   0xc00220fe
c0013b3e:	e8 a6 d7 ff ff       	call   c00112e9 <KePanic(char const*)>
c0013b43:	83 c4 10             	add    esp,0x10
c0013b46:	e9 89 00 00 00       	jmp    c0013bd4 <SysKill(regs*)+0xac>
c0013b4b:	90                   	nop
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	68 e4 96 02 c0       	push   0xc00296e4
c0013b54:	e8 33 bd 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b59:	8d 76 00             	lea    esi,[esi+0x0]
c0013b5c:	83 c4 10             	add    esp,0x10
c0013b5f:	85 c0                	test   eax,eax
c0013b61:	74 19                	je     c0013b7c <SysKill(regs*)+0x54>
c0013b63:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b66:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b69:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b6b:	74 33                	je     c0013ba0 <SysKill(regs*)+0x78>
c0013b6d:	52                   	push   edx
c0013b6e:	52                   	push   edx
c0013b6f:	50                   	push   eax
c0013b70:	68 e4 96 02 c0       	push   0xc00296e4
c0013b75:	e8 32 c0 00 00       	call   c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b7a:	eb e0                	jmp    c0013b5c <SysKill(regs*)+0x34>
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	68 d8 96 02 c0       	push   0xc00296d8
c0013b84:	e8 03 bd 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b89:	8d 76 00             	lea    esi,[esi+0x0]
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	85 c0                	test   eax,eax
c0013b91:	74 41                	je     c0013bd4 <SysKill(regs*)+0xac>
c0013b93:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b96:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b99:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b9b:	75 27                	jne    c0013bc4 <SysKill(regs*)+0x9c>
c0013b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013ba0:	51                   	push   ecx
c0013ba1:	51                   	push   ecx
c0013ba2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ba5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013baa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bad:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013bb3:	e8 cf db ff ff       	call   c0011787 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013bb8:	83 c4 10             	add    esp,0x10
c0013bbb:	31 c0                	xor    eax,eax
c0013bbd:	31 d2                	xor    edx,edx
c0013bbf:	eb 1b                	jmp    c0013bdc <SysKill(regs*)+0xb4>
c0013bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc4:	52                   	push   edx
c0013bc5:	52                   	push   edx
c0013bc6:	50                   	push   eax
c0013bc7:	68 d8 96 02 c0       	push   0xc00296d8
c0013bcc:	e8 db bf 00 00       	call   c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013bd1:	eb b9                	jmp    c0013b8c <SysKill(regs*)+0x64>
c0013bd3:	90                   	nop
c0013bd4:	83 c8 ff             	or     eax,0xffffffff
c0013bd7:	89 c2                	mov    edx,eax
c0013bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013bdc:	83 c4 08             	add    esp,0x8
c0013bdf:	5b                   	pop    ebx
c0013be0:	c3                   	ret    

c0013be1 <SysLoadDLL(regs*)>:
c0013be1:	56                   	push   esi
c0013be2:	31 d2                	xor    edx,edx
c0013be4:	53                   	push   ebx
c0013be5:	b8 01 00 00 00       	mov    eax,0x1
c0013bea:	51                   	push   ecx
c0013beb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bef:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013bf3:	0f 84 8c 00 00 00    	je     c0013c85 <SysLoadDLL(regs*)+0xa4>
c0013bf9:	83 ec 0c             	sub    esp,0xc
c0013bfc:	68 14 01 00 00       	push   0x114
c0013c01:	e8 cd 3e ff ff       	call   c0007ad3 <malloc>
c0013c06:	83 c4 0c             	add    esp,0xc
c0013c09:	89 c3                	mov    ebx,eax
c0013c0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c10:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c13:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c16:	53                   	push   ebx
c0013c17:	e8 06 7c ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	31 d2                	xor    edx,edx
c0013c21:	85 db                	test   ebx,ebx
c0013c23:	b8 02 00 00 00       	mov    eax,0x2
c0013c28:	74 5b                	je     c0013c85 <SysLoadDLL(regs*)+0xa4>
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	53                   	push   ebx
c0013c2e:	e8 7b 7f ff ff       	call   c000bbae <File::exists()>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	84 c0                	test   al,al
c0013c38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c3a:	75 11                	jne    c0013c4d <SysLoadDLL(regs*)+0x6c>
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	53                   	push   ebx
c0013c40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	b8 03 00 00 00       	mov    eax,0x3
c0013c4b:	eb 36                	jmp    c0013c83 <SysLoadDLL(regs*)+0xa2>
c0013c4d:	83 ec 0c             	sub    esp,0xc
c0013c50:	53                   	push   ebx
c0013c51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c54:	58                   	pop    eax
c0013c55:	5a                   	pop    edx
c0013c56:	6a 00                	push   0x0
c0013c58:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c5b:	e8 1c 15 00 00       	call   c001517c <Thr::loadDLL(char const*, bool)>
c0013c60:	83 c4 10             	add    esp,0x10
c0013c63:	31 d2                	xor    edx,edx
c0013c65:	89 c1                	mov    ecx,eax
c0013c67:	b8 04 00 00 00       	mov    eax,0x4
c0013c6c:	85 c9                	test   ecx,ecx
c0013c6e:	74 15                	je     c0013c85 <SysLoadDLL(regs*)+0xa4>
c0013c70:	53                   	push   ebx
c0013c71:	53                   	push   ebx
c0013c72:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013c78:	51                   	push   ecx
c0013c79:	e8 3e 17 00 00       	call   c00153bc <Thr::executeDLL(unsigned long, void*)>
c0013c7e:	83 c4 10             	add    esp,0x10
c0013c81:	31 c0                	xor    eax,eax
c0013c83:	31 d2                	xor    edx,edx
c0013c85:	59                   	pop    ecx
c0013c86:	5b                   	pop    ebx
c0013c87:	5e                   	pop    esi
c0013c88:	c3                   	ret    

c0013c89 <SysRead(regs*)>:
c0013c89:	57                   	push   edi
c0013c8a:	56                   	push   esi
c0013c8b:	53                   	push   ebx
c0013c8c:	83 ec 10             	sub    esp,0x10
c0013c8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c96:	83 f8 02             	cmp    eax,0x2
c0013c99:	77 10                	ja     c0013cab <SysRead(regs*)+0x22>
c0013c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ca3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ca9:	eb 0e                	jmp    c0013cb9 <SysRead(regs*)+0x30>
c0013cab:	83 ec 0c             	sub    esp,0xc
c0013cae:	50                   	push   eax
c0013caf:	e8 e7 57 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013cb4:	83 c4 10             	add    esp,0x10
c0013cb7:	89 c1                	mov    ecx,eax
c0013cb9:	83 c8 ff             	or     eax,0xffffffff
c0013cbc:	85 c9                	test   ecx,ecx
c0013cbe:	89 c2                	mov    edx,eax
c0013cc0:	74 28                	je     c0013cea <SysRead(regs*)+0x61>
c0013cc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cca:	83 ec 0c             	sub    esp,0xc
c0013ccd:	31 ff                	xor    edi,edi
c0013ccf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013cd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013cd5:	52                   	push   edx
c0013cd6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cd9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013cdc:	57                   	push   edi
c0013cdd:	56                   	push   esi
c0013cde:	51                   	push   ecx
c0013cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ce2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013ce6:	83 c4 20             	add    esp,0x20
c0013ce9:	99                   	cdq    
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	5b                   	pop    ebx
c0013cee:	5e                   	pop    esi
c0013cef:	5f                   	pop    edi
c0013cf0:	c3                   	ret    

c0013cf1 <SysRegisterSignal(regs*)>:
c0013cf1:	83 ec 18             	sub    esp,0x18
c0013cf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf8:	6a 00                	push   0x0
c0013cfa:	6a 00                	push   0x0
c0013cfc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013cff:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d0a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d10:	e8 3c da ff ff       	call   c0011751 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013d15:	83 c4 2c             	add    esp,0x2c
c0013d18:	99                   	cdq    
c0013d19:	c3                   	ret    

c0013d1a <SysRegistryGetTypeFromPath(regs*)>:
c0013d1a:	57                   	push   edi
c0013d1b:	56                   	push   esi
c0013d1c:	53                   	push   ebx
c0013d1d:	81 ec 38 01 00 00    	sub    esp,0x138
c0013d23:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013d2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d2d:	68 1f 21 02 c0       	push   0xc002211f
c0013d32:	e8 d3 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d37:	5a                   	pop    edx
c0013d38:	59                   	pop    ecx
c0013d39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d3c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d3f:	e8 34 f6 ff ff       	call   c0013378 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d44:	5f                   	pop    edi
c0013d45:	5a                   	pop    edx
c0013d46:	89 c6                	mov    esi,eax
c0013d48:	50                   	push   eax
c0013d49:	68 3f 21 02 c0       	push   0xc002213f
c0013d4e:	e8 b7 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d53:	83 c4 10             	add    esp,0x10
c0013d56:	85 f6                	test   esi,esi
c0013d58:	74 28                	je     c0013d82 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013d5a:	50                   	push   eax
c0013d5b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d5f:	57                   	push   edi
c0013d60:	56                   	push   esi
c0013d61:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d64:	e8 f4 f1 ff ff       	call   c0012f5d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d69:	83 c4 0c             	add    esp,0xc
c0013d6c:	57                   	push   edi
c0013d6d:	50                   	push   eax
c0013d6e:	89 c3                	mov    ebx,eax
c0013d70:	68 47 21 02 c0       	push   0xc0022147
c0013d75:	e8 90 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d7a:	89 d8                	mov    eax,ebx
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	99                   	cdq    
c0013d80:	eb 05                	jmp    c0013d87 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013d82:	83 c8 ff             	or     eax,0xffffffff
c0013d85:	89 c2                	mov    edx,eax
c0013d87:	81 c4 30 01 00 00    	add    esp,0x130
c0013d8d:	5b                   	pop    ebx
c0013d8e:	5e                   	pop    esi
c0013d8f:	5f                   	pop    edi
c0013d90:	c3                   	ret    

c0013d91 <SysRegistryReadExtent(regs*)>:
c0013d91:	83 ec 1c             	sub    esp,0x1c
c0013d94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d98:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013d9b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013d9e:	85 c0                	test   eax,eax
c0013da0:	79 1f                	jns    c0013dc1 <SysRegistryReadExtent(regs*)+0x30>
c0013da2:	52                   	push   edx
c0013da3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013da8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013dac:	52                   	push   edx
c0013dad:	50                   	push   eax
c0013dae:	51                   	push   ecx
c0013daf:	e8 9b f0 ff ff       	call   c0012e4f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013db4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	eb 14                	jmp    c0013dd5 <SysRegistryReadExtent(regs*)+0x44>
c0013dc1:	83 ec 04             	sub    esp,0x4
c0013dc4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013dc7:	50                   	push   eax
c0013dc8:	51                   	push   ecx
c0013dc9:	e8 1f eb ff ff       	call   c00128ed <CmGetString(Reghive_Tag*, int, char*)>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	31 c0                	xor    eax,eax
c0013dd3:	31 d2                	xor    edx,edx
c0013dd5:	83 c4 1c             	add    esp,0x1c
c0013dd8:	c3                   	ret    

c0013dd9 <SysRegistryPathToExtentLookup(regs*)>:
c0013dd9:	53                   	push   ebx
c0013dda:	83 ec 10             	sub    esp,0x10
c0013ddd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013de1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013de4:	68 5d 21 02 c0       	push   0xc002215d
c0013de9:	e8 1c 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013dee:	58                   	pop    eax
c0013def:	5a                   	pop    edx
c0013df0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013df3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013df6:	e8 7d f5 ff ff       	call   c0013378 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013dfb:	83 c4 18             	add    esp,0x18
c0013dfe:	5b                   	pop    ebx
c0013dff:	99                   	cdq    
c0013e00:	c3                   	ret    

c0013e01 <SysRegistryEnterDirectory(regs*)>:
c0013e01:	53                   	push   ebx
c0013e02:	83 ec 10             	sub    esp,0x10
c0013e05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e09:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e0c:	68 80 21 02 c0       	push   0xc0022180
c0013e11:	e8 f4 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e16:	58                   	pop    eax
c0013e17:	5a                   	pop    edx
c0013e18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e1b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e1e:	e8 41 eb ff ff       	call   c0012964 <CmEnterDirectory(Reghive_Tag*, int)>
c0013e23:	83 c4 18             	add    esp,0x18
c0013e26:	5b                   	pop    ebx
c0013e27:	99                   	cdq    
c0013e28:	c3                   	ret    

c0013e29 <SysRegistryGetNext(regs*)>:
c0013e29:	53                   	push   ebx
c0013e2a:	83 ec 10             	sub    esp,0x10
c0013e2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e31:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e34:	68 9e 21 02 c0       	push   0xc002219e
c0013e39:	e8 cc 6a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013e3e:	58                   	pop    eax
c0013e3f:	5a                   	pop    edx
c0013e40:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e43:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e46:	e8 58 eb ff ff       	call   c00129a3 <CmGetNext(Reghive_Tag*, int)>
c0013e4b:	83 c4 18             	add    esp,0x18
c0013e4e:	5b                   	pop    ebx
c0013e4f:	99                   	cdq    
c0013e50:	c3                   	ret    

c0013e51 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013e51:	57                   	push   edi
c0013e52:	56                   	push   esi
c0013e53:	53                   	push   ebx
c0013e54:	81 ec 34 01 00 00    	sub    esp,0x134
c0013e5a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013e61:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e65:	57                   	push   edi
c0013e66:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013e69:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013e6c:	e8 ec f0 ff ff       	call   c0012f5d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e71:	89 c3                	mov    ebx,eax
c0013e73:	58                   	pop    eax
c0013e74:	5a                   	pop    edx
c0013e75:	57                   	push   edi
c0013e76:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013e79:	e8 d2 c7 fe ff       	call   c0000650 <strcpy>
c0013e7e:	81 c4 40 01 00 00    	add    esp,0x140
c0013e84:	89 d8                	mov    eax,ebx
c0013e86:	5b                   	pop    ebx
c0013e87:	99                   	cdq    
c0013e88:	5e                   	pop    esi
c0013e89:	5f                   	pop    edi
c0013e8a:	c3                   	ret    

c0013e8b <SysRegistryOpen(regs*)>:
c0013e8b:	83 ec 18             	sub    esp,0x18
c0013e8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e92:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e95:	e8 e3 e8 ff ff       	call   c001277d <CmOpen(char const*)>
c0013e9a:	83 c4 1c             	add    esp,0x1c
c0013e9d:	99                   	cdq    
c0013e9e:	c3                   	ret    

c0013e9f <SysRegistryClose(regs*)>:
c0013e9f:	83 ec 18             	sub    esp,0x18
c0013ea2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ea9:	e8 ed e9 ff ff       	call   c001289b <CmClose(Reghive_Tag*)>
c0013eae:	31 c0                	xor    eax,eax
c0013eb0:	31 d2                	xor    edx,edx
c0013eb2:	83 c4 1c             	add    esp,0x1c
c0013eb5:	c3                   	ret    

c0013eb6 <SysSbrk(regs*)>:
c0013eb6:	56                   	push   esi
c0013eb7:	53                   	push   ebx
c0013eb8:	50                   	push   eax
c0013eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ebe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ec2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ec5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013ec8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013ece:	85 db                	test   ebx,ebx
c0013ed0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013ed3:	74 02                	je     c0013ed7 <SysSbrk(regs*)+0x21>
c0013ed5:	79 06                	jns    c0013edd <SysSbrk(regs*)+0x27>
c0013ed7:	89 f0                	mov    eax,esi
c0013ed9:	31 d2                	xor    edx,edx
c0013edb:	eb 2a                	jmp    c0013f07 <SysSbrk(regs*)+0x51>
c0013edd:	83 c8 ff             	or     eax,0xffffffff
c0013ee0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013ee6:	89 c2                	mov    edx,eax
c0013ee8:	77 1d                	ja     c0013f07 <SysSbrk(regs*)+0x51>
c0013eea:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013ef0:	50                   	push   eax
c0013ef1:	68 07 0c 00 00       	push   0xc07
c0013ef6:	c1 ea 0c             	shr    edx,0xc
c0013ef9:	52                   	push   edx
c0013efa:	51                   	push   ecx
c0013efb:	e8 06 5f ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013f00:	89 f0                	mov    eax,esi
c0013f02:	31 d2                	xor    edx,edx
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	59                   	pop    ecx
c0013f08:	5b                   	pop    ebx
c0013f09:	5e                   	pop    esi
c0013f0a:	c3                   	ret    

c0013f0b <SysSetCwd(regs*)>:
c0013f0b:	83 ec 14             	sub    esp,0x14
c0013f0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f1a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f1d:	e8 2b 7d ff ff       	call   c000bc4d <Fs::setcwd(Process*, char*)>
c0013f22:	83 c4 1c             	add    esp,0x1c
c0013f25:	99                   	cdq    
c0013f26:	c3                   	ret    

c0013f27 <SysSetTime(regs*)>:
c0013f27:	55                   	push   ebp
c0013f28:	31 c9                	xor    ecx,ecx
c0013f2a:	57                   	push   edi
c0013f2b:	bd 0c 00 00 00       	mov    ebp,0xc
c0013f30:	56                   	push   esi
c0013f31:	53                   	push   ebx
c0013f32:	31 db                	xor    ebx,ebx
c0013f34:	83 ec 10             	sub    esp,0x10
c0013f37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f3b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013f3e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013f41:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013f44:	89 c2                	mov    edx,eax
c0013f46:	c1 e8 05             	shr    eax,0x5
c0013f49:	83 e2 1f             	and    edx,0x1f
c0013f4c:	42                   	inc    edx
c0013f4d:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013f53:	c1 e7 10             	shl    edi,0x10
c0013f56:	88 d1                	mov    cl,dl
c0013f58:	31 d2                	xor    edx,edx
c0013f5a:	f7 f5                	div    ebp
c0013f5c:	89 dd                	mov    ebp,ebx
c0013f5e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013f64:	88 d5                	mov    ch,dl
c0013f66:	31 d2                	xor    edx,edx
c0013f68:	0f b7 c1             	movzx  eax,cx
c0013f6b:	09 f8                	or     eax,edi
c0013f6d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f72:	89 c1                	mov    ecx,eax
c0013f74:	89 f0                	mov    eax,esi
c0013f76:	f7 f7                	div    edi
c0013f78:	c1 e2 10             	shl    edx,0x10
c0013f7b:	09 d5                	or     ebp,edx
c0013f7d:	31 d2                	xor    edx,edx
c0013f7f:	f7 f7                	div    edi
c0013f81:	89 eb                	mov    ebx,ebp
c0013f83:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f88:	89 f0                	mov    eax,esi
c0013f8a:	88 d7                	mov    bh,dl
c0013f8c:	31 d2                	xor    edx,edx
c0013f8e:	f7 f7                	div    edi
c0013f90:	bf 18 00 00 00       	mov    edi,0x18
c0013f95:	31 d2                	xor    edx,edx
c0013f97:	f7 f7                	div    edi
c0013f99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013f9e:	88 d3                	mov    bl,dl
c0013fa0:	53                   	push   ebx
c0013fa1:	51                   	push   ecx
c0013fa2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013fa8:	e8 b3 84 ff ff       	call   c000c460 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013fad:	83 c4 1c             	add    esp,0x1c
c0013fb0:	31 d2                	xor    edx,edx
c0013fb2:	5b                   	pop    ebx
c0013fb3:	5e                   	pop    esi
c0013fb4:	83 f0 01             	xor    eax,0x1
c0013fb7:	5f                   	pop    edi
c0013fb8:	0f b6 c0             	movzx  eax,al
c0013fbb:	5d                   	pop    ebp
c0013fbc:	c3                   	ret    

c0013fbd <SysTimezone(regs*)>:
c0013fbd:	53                   	push   ebx
c0013fbe:	83 ec 08             	sub    esp,0x8
c0013fc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fc5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013fc9:	75 17                	jne    c0013fe2 <SysTimezone(regs*)+0x25>
c0013fcb:	83 ec 0c             	sub    esp,0xc
c0013fce:	68 b5 21 02 c0       	push   0xc00221b5
c0013fd3:	e8 32 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013fd8:	83 c8 ff             	or     eax,0xffffffff
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	89 c2                	mov    edx,eax
c0013fe0:	eb 20                	jmp    c0014002 <SysTimezone(regs*)+0x45>
c0013fe2:	83 ec 0c             	sub    esp,0xc
c0013fe5:	68 ca 21 02 c0       	push   0xc00221ca
c0013fea:	e8 1b 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013fef:	58                   	pop    eax
c0013ff0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ff3:	e8 cc 81 ff ff       	call   c000c1c4 <User::loadClockSettings(int)>
c0013ff8:	83 c4 10             	add    esp,0x10
c0013ffb:	b8 01 00 00 00       	mov    eax,0x1
c0014000:	31 d2                	xor    edx,edx
c0014002:	83 c4 08             	add    esp,0x8
c0014005:	5b                   	pop    ebx
c0014006:	c3                   	ret    

c0014007 <SysTruncate(regs*)>:
c0014007:	55                   	push   ebp
c0014008:	57                   	push   edi
c0014009:	31 ff                	xor    edi,edi
c001400b:	56                   	push   esi
c001400c:	53                   	push   ebx
c001400d:	83 ec 0c             	sub    esp,0xc
c0014010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014014:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014017:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001401b:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001401e:	89 ce                	mov    esi,ecx
c0014020:	0f 84 9a 00 00 00    	je     c00140c0 <SysTruncate(regs*)+0xb9>
c0014026:	83 ec 0c             	sub    esp,0xc
c0014029:	68 14 01 00 00       	push   0x114
c001402e:	e8 a0 3a ff ff       	call   c0007ad3 <malloc>
c0014033:	83 c4 0c             	add    esp,0xc
c0014036:	89 c3                	mov    ebx,eax
c0014038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001403d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014040:	55                   	push   ebp
c0014041:	53                   	push   ebx
c0014042:	e8 db 77 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0014047:	83 c4 10             	add    esp,0x10
c001404a:	31 d2                	xor    edx,edx
c001404c:	85 db                	test   ebx,ebx
c001404e:	b8 03 00 00 00       	mov    eax,0x3
c0014053:	0f 84 a2 00 00 00    	je     c00140fb <SysTruncate(regs*)+0xf4>
c0014059:	51                   	push   ecx
c001405a:	51                   	push   ecx
c001405b:	6a 02                	push   0x2
c001405d:	53                   	push   ebx
c001405e:	e8 87 78 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c0014063:	83 c4 10             	add    esp,0x10
c0014066:	85 c0                	test   eax,eax
c0014068:	74 13                	je     c001407d <SysTruncate(regs*)+0x76>
c001406a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001406c:	83 ec 0c             	sub    esp,0xc
c001406f:	53                   	push   ebx
c0014070:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	b8 04 00 00 00       	mov    eax,0x4
c001407b:	eb 7c                	jmp    c00140f9 <SysTruncate(regs*)+0xf2>
c001407d:	52                   	push   edx
c001407e:	57                   	push   edi
c001407f:	56                   	push   esi
c0014080:	53                   	push   ebx
c0014081:	e8 78 79 ff ff       	call   c000b9fe <File::truncate(unsigned long long)>
c0014086:	83 c4 10             	add    esp,0x10
c0014089:	85 c0                	test   eax,eax
c001408b:	74 1b                	je     c00140a8 <SysTruncate(regs*)+0xa1>
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	53                   	push   ebx
c0014091:	e8 b2 78 ff ff       	call   c000b948 <File::close()>
c0014096:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014098:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001409b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	b8 05 00 00 00       	mov    eax,0x5
c00140a6:	eb 51                	jmp    c00140f9 <SysTruncate(regs*)+0xf2>
c00140a8:	83 ec 0c             	sub    esp,0xc
c00140ab:	53                   	push   ebx
c00140ac:	e8 97 78 ff ff       	call   c000b948 <File::close()>
c00140b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	31 c0                	xor    eax,eax
c00140be:	eb 39                	jmp    c00140f9 <SysTruncate(regs*)+0xf2>
c00140c0:	31 d2                	xor    edx,edx
c00140c2:	83 fd 02             	cmp    ebp,0x2
c00140c5:	b8 01 00 00 00       	mov    eax,0x1
c00140ca:	7e 2f                	jle    c00140fb <SysTruncate(regs*)+0xf4>
c00140cc:	83 ec 0c             	sub    esp,0xc
c00140cf:	51                   	push   ecx
c00140d0:	e8 c6 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00140d5:	83 c4 10             	add    esp,0x10
c00140d8:	31 d2                	xor    edx,edx
c00140da:	89 c1                	mov    ecx,eax
c00140dc:	b8 02 00 00 00       	mov    eax,0x2
c00140e1:	85 c9                	test   ecx,ecx
c00140e3:	74 16                	je     c00140fb <SysTruncate(regs*)+0xf4>
c00140e5:	50                   	push   eax
c00140e6:	57                   	push   edi
c00140e7:	56                   	push   esi
c00140e8:	51                   	push   ecx
c00140e9:	e8 10 79 ff ff       	call   c000b9fe <File::truncate(unsigned long long)>
c00140ee:	83 c4 10             	add    esp,0x10
c00140f1:	85 c0                	test   eax,eax
c00140f3:	0f 95 c0             	setne  al
c00140f6:	0f b6 c0             	movzx  eax,al
c00140f9:	31 d2                	xor    edx,edx
c00140fb:	83 c4 0c             	add    esp,0xc
c00140fe:	5b                   	pop    ebx
c00140ff:	5e                   	pop    esi
c0014100:	5f                   	pop    edi
c0014101:	5d                   	pop    ebp
c0014102:	c3                   	ret    

c0014103 <SysWrite(regs*)>:
c0014103:	57                   	push   edi
c0014104:	56                   	push   esi
c0014105:	53                   	push   ebx
c0014106:	83 ec 10             	sub    esp,0x10
c0014109:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001410d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014110:	83 f8 02             	cmp    eax,0x2
c0014113:	77 10                	ja     c0014125 <SysWrite(regs*)+0x22>
c0014115:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001411a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001411d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014123:	eb 0e                	jmp    c0014133 <SysWrite(regs*)+0x30>
c0014125:	83 ec 0c             	sub    esp,0xc
c0014128:	50                   	push   eax
c0014129:	e8 6d 53 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001412e:	83 c4 10             	add    esp,0x10
c0014131:	89 c1                	mov    ecx,eax
c0014133:	83 c8 ff             	or     eax,0xffffffff
c0014136:	85 c9                	test   ecx,ecx
c0014138:	89 c2                	mov    edx,eax
c001413a:	74 28                	je     c0014164 <SysWrite(regs*)+0x61>
c001413c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014144:	83 ec 0c             	sub    esp,0xc
c0014147:	31 ff                	xor    edi,edi
c0014149:	8d 54 24 18          	lea    edx,[esp+0x18]
c001414d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001414f:	52                   	push   edx
c0014150:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014153:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014156:	57                   	push   edi
c0014157:	56                   	push   esi
c0014158:	51                   	push   ecx
c0014159:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001415c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014160:	83 c4 20             	add    esp,0x20
c0014163:	99                   	cdq    
c0014164:	83 c4 10             	add    esp,0x10
c0014167:	5b                   	pop    ebx
c0014168:	5e                   	pop    esi
c0014169:	5f                   	pop    edi
c001416a:	c3                   	ret    

c001416b <SysWsbe(regs*)>:
c001416b:	57                   	push   edi
c001416c:	b9 0b 00 00 00       	mov    ecx,0xb
c0014171:	56                   	push   esi
c0014172:	be 09 22 02 c0       	mov    esi,0xc0022209
c0014177:	53                   	push   ebx
c0014178:	83 ec 30             	sub    esp,0x30
c001417b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001417f:	fc                   	cld    
c0014180:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001418e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014191:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014197:	8b 06                	mov    eax,DWORD PTR [esi]
c0014199:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001419c:	57                   	push   edi
c001419d:	e8 de c3 fe ff       	call   c0000580 <strlen>
c00141a2:	5a                   	pop    edx
c00141a3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141a7:	52                   	push   edx
c00141a8:	31 d2                	xor    edx,edx
c00141aa:	57                   	push   edi
c00141ab:	52                   	push   edx
c00141ac:	50                   	push   eax
c00141ad:	56                   	push   esi
c00141ae:	ff d3                	call   ebx
c00141b0:	83 c4 14             	add    esp,0x14
c00141b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00141b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141ba:	e8 a9 23 00 00       	call   c0016568 <terminateTask(int)>
c00141bf:	83 c4 40             	add    esp,0x40
c00141c2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141c7:	5b                   	pop    ebx
c00141c8:	31 d2                	xor    edx,edx
c00141ca:	5e                   	pop    esi
c00141cb:	5f                   	pop    edi
c00141cc:	c3                   	ret    

c00141cd <SysYield(regs*)>:
c00141cd:	83 ec 0c             	sub    esp,0xc
c00141d0:	fa                   	cli    
c00141d1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00141d7:	e8 0c 1a 00 00       	call   c0015be8 <schedule()>
c00141dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00141e1:	48                   	dec    eax
c00141e2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00141e7:	75 01                	jne    c00141ea <SysYield(regs*)+0x1d>
c00141e9:	fb                   	sti    
c00141ea:	31 c0                	xor    eax,eax
c00141ec:	31 d2                	xor    edx,edx
c00141ee:	83 c4 0c             	add    esp,0xc
c00141f1:	c3                   	ret    

c00141f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00141f2:	55                   	push   ebp
c00141f3:	57                   	push   edi
c00141f4:	56                   	push   esi
c00141f5:	53                   	push   ebx
c00141f6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00141fc:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014207:	74 3b                	je     c0014244 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014209:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014211:	74 31                	je     c0014244 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014213:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001421b:	75 27                	jne    c0014244 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001421d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014224:	05 00 10 00 00       	add    eax,0x1000
c0014229:	89 c2                	mov    edx,eax
c001422b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014230:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014237:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001423d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014244:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001424b:	83 ec 0c             	sub    esp,0xc
c001424e:	6a 01                	push   0x1
c0014250:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014256:	e8 9a 53 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014264:	89 c3                	mov    ebx,eax
c0014266:	0f 86 26 01 00 00    	jbe    c0014392 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001426c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014274:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001427b:	c1 ee 0c             	shr    esi,0xc
c001427e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014282:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014289:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014290:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014294:	29 ef                	sub    edi,ebp
c0014296:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001429a:	0f 83 f9 00 00 00    	jae    c0014399 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00142a0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00142a6:	b8 00 10 00 00       	mov    eax,0x1000
c00142ab:	0f 47 f8             	cmova  edi,eax
c00142ae:	83 ec 0c             	sub    esp,0xc
c00142b1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142b8:	31 d2                	xor    edx,edx
c00142ba:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142c0:	50                   	push   eax
c00142c1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00142c5:	56                   	push   esi
c00142c6:	52                   	push   edx
c00142c7:	57                   	push   edi
c00142c8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00142cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142d2:	83 c4 20             	add    esp,0x20
c00142d5:	85 c0                	test   eax,eax
c00142d7:	75 06                	jne    c00142df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00142d9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00142dd:	74 13                	je     c00142f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	53                   	push   ebx
c00142e3:	e8 21 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	31 c0                	xor    eax,eax
c00142ed:	e9 7c 01 00 00       	jmp    c001446e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00142f2:	fa                   	cli    
c00142f3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00142f9:	e8 e4 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c00142fe:	6a 07                	push   0x7
c0014300:	53                   	push   ebx
c0014301:	50                   	push   eax
c0014302:	89 c7                	mov    edi,eax
c0014304:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014309:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001430c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014312:	e8 e7 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014317:	83 c4 0c             	add    esp,0xc
c001431a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014321:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014327:	6a 00                	push   0x0
c0014329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001432e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014331:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014337:	e8 28 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c001433c:	58                   	pop    eax
c001433d:	5a                   	pop    edx
c001433e:	68 07 0c 00 00       	push   0xc07
c0014343:	55                   	push   ebp
c0014344:	57                   	push   edi
c0014345:	89 df                	mov    edi,ebx
c0014347:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001434e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014354:	6a 00                	push   0x0
c0014356:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001435b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001435e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014364:	e8 f9 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014369:	b9 00 10 00 00       	mov    ecx,0x1000
c001436e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014370:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014375:	83 c4 20             	add    esp,0x20
c0014378:	48                   	dec    eax
c0014379:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001437e:	85 c0                	test   eax,eax
c0014380:	75 01                	jne    c0014383 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014382:	fb                   	sti    
c0014383:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014387:	81 c5 00 10 00 00    	add    ebp,0x1000
c001438d:	e9 f0 fe ff ff       	jmp    c0014282 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014392:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014399:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00143a0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00143a6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00143ac:	0f 86 ae 00 00 00    	jbe    c0014460 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00143b2:	fa                   	cli    
c00143b3:	51                   	push   ecx
c00143b4:	31 ff                	xor    edi,edi
c00143b6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143bd:	c1 ee 0c             	shr    esi,0xc
c00143c0:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143c6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143cc:	6a 00                	push   0x0
c00143ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143d6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143dc:	e8 83 57 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00143e1:	83 c4 10             	add    esp,0x10
c00143e4:	e8 f9 39 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00143e9:	47                   	inc    edi
c00143ea:	6a 07                	push   0x7
c00143ec:	53                   	push   ebx
c00143ed:	50                   	push   eax
c00143ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143f2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00143f8:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00143fb:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014401:	e8 f8 58 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014406:	58                   	pop    eax
c0014407:	5a                   	pop    edx
c0014408:	68 07 0c 00 00       	push   0xc07
c001440d:	55                   	push   ebp
c001440e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014414:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014418:	50                   	push   eax
c0014419:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014420:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014426:	6a 00                	push   0x0
c0014428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001442d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014430:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014436:	e8 27 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001443b:	83 c4 1c             	add    esp,0x1c
c001443e:	68 00 10 00 00       	push   0x1000
c0014443:	6a 00                	push   0x0
c0014445:	53                   	push   ebx
c0014446:	e8 a5 c0 fe ff       	call   c00004f0 <memset>
c001444b:	83 c4 10             	add    esp,0x10
c001444e:	39 fe                	cmp    esi,edi
c0014450:	77 92                	ja     c00143e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0014452:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014457:	48                   	dec    eax
c0014458:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001445d:	75 01                	jne    c0014460 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001445f:	fb                   	sti    
c0014460:	83 ec 0c             	sub    esp,0xc
c0014463:	53                   	push   ebx
c0014464:	e8 a0 54 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	b0 01                	mov    al,0x1
c001446e:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014474:	5b                   	pop    ebx
c0014475:	5e                   	pop    esi
c0014476:	5f                   	pop    edi
c0014477:	5d                   	pop    ebp
c0014478:	c3                   	ret    

c0014479 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014479:	55                   	push   ebp
c001447a:	57                   	push   edi
c001447b:	56                   	push   esi
c001447c:	53                   	push   ebx
c001447d:	83 ec 48             	sub    esp,0x48
c0014480:	68 14 01 00 00       	push   0x114
c0014485:	e8 49 36 ff ff       	call   c0007ad3 <malloc>
c001448a:	83 c4 0c             	add    esp,0xc
c001448d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014491:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014495:	89 c7                	mov    edi,eax
c0014497:	50                   	push   eax
c0014498:	e8 85 73 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c001449d:	58                   	pop    eax
c001449e:	5a                   	pop    edx
c001449f:	6a 01                	push   0x1
c00144a1:	57                   	push   edi
c00144a2:	e8 43 74 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c00144a7:	83 c4 10             	add    esp,0x10
c00144aa:	85 c0                	test   eax,eax
c00144ac:	0f 85 4c 01 00 00    	jne    c00145fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144b2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00144ba:	83 ec 0c             	sub    esp,0xc
c00144bd:	6a 34                	push   0x34
c00144bf:	e8 0f 36 ff ff       	call   c0007ad3 <malloc>
c00144c4:	89 c3                	mov    ebx,eax
c00144c6:	58                   	pop    eax
c00144c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00144c9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00144cd:	56                   	push   esi
c00144ce:	53                   	push   ebx
c00144cf:	6a 00                	push   0x0
c00144d1:	6a 34                	push   0x34
c00144d3:	57                   	push   edi
c00144d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144d7:	83 c4 20             	add    esp,0x20
c00144da:	85 c0                	test   eax,eax
c00144dc:	0f 85 1c 01 00 00    	jne    c00145fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144e2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00144e8:	0f 85 10 01 00 00    	jne    c00145fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144f1:	85 c0                	test   eax,eax
c00144f3:	0f 84 05 01 00 00    	je     c00145fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144f9:	31 d2                	xor    edx,edx
c00144fb:	55                   	push   ebp
c00144fc:	52                   	push   edx
c00144fd:	50                   	push   eax
c00144fe:	57                   	push   edi
c00144ff:	e8 a4 74 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014504:	83 c4 10             	add    esp,0x10
c0014507:	85 c0                	test   eax,eax
c0014509:	0f 85 ef 00 00 00    	jne    c00145fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001450f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014512:	83 ec 0c             	sub    esp,0xc
c0014515:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014519:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001451d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014521:	0f af c2             	imul   eax,edx
c0014524:	50                   	push   eax
c0014525:	e8 a9 35 ff ff       	call   c0007ad3 <malloc>
c001452a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001452c:	89 34 24             	mov    DWORD PTR [esp],esi
c001452f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014533:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014537:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001453b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001453f:	0f af c2             	imul   eax,edx
c0014542:	99                   	cdq    
c0014543:	52                   	push   edx
c0014544:	50                   	push   eax
c0014545:	57                   	push   edi
c0014546:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014549:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001454c:	83 c4 20             	add    esp,0x20
c001454f:	85 c0                	test   eax,eax
c0014551:	0f 84 a7 00 00 00    	je     c00145fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014557:	31 d2                	xor    edx,edx
c0014559:	51                   	push   ecx
c001455a:	52                   	push   edx
c001455b:	50                   	push   eax
c001455c:	57                   	push   edi
c001455d:	e8 46 74 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014562:	83 c4 10             	add    esp,0x10
c0014565:	85 c0                	test   eax,eax
c0014567:	0f 85 91 00 00 00    	jne    c00145fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001456d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014578:	0f af c2             	imul   eax,edx
c001457b:	50                   	push   eax
c001457c:	e8 52 35 ff ff       	call   c0007ad3 <malloc>
c0014581:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014583:	89 34 24             	mov    DWORD PTR [esp],esi
c0014586:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001458a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001458e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014592:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014596:	0f af c2             	imul   eax,edx
c0014599:	99                   	cdq    
c001459a:	52                   	push   edx
c001459b:	50                   	push   eax
c001459c:	57                   	push   edi
c001459d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145a0:	83 c4 20             	add    esp,0x20
c00145a3:	31 c9                	xor    ecx,ecx
c00145a5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145ad:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00145b1:	0f b7 e9             	movzx  ebp,cx
c00145b4:	0f 83 86 00 00 00    	jae    c0014640 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00145ba:	c1 e5 05             	shl    ebp,0x5
c00145bd:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00145c1:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00145c5:	75 73                	jne    c001463a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00145c7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00145cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145ce:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00145d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145d5:	52                   	push   edx
c00145d6:	31 d2                	xor    edx,edx
c00145d8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00145db:	52                   	push   edx
c00145dc:	50                   	push   eax
c00145dd:	57                   	push   edi
c00145de:	e8 c5 73 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00145ea:	85 c0                	test   eax,eax
c00145ec:	74 17                	je     c0014605 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00145ee:	83 ec 0c             	sub    esp,0xc
c00145f1:	68 35 22 02 c0       	push   0xc0022235
c00145f6:	e8 0f 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	31 c0                	xor    eax,eax
c0014600:	e9 8b 00 00 00       	jmp    c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014605:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014609:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014612:	50                   	push   eax
c0014613:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014617:	56                   	push   esi
c0014618:	57                   	push   edi
c0014619:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001461d:	e8 d0 fb ff ff       	call   c00141f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014622:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014626:	83 c4 20             	add    esp,0x20
c0014629:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001462d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014631:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014636:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001463a:	41                   	inc    ecx
c001463b:	e9 6d ff ff ff       	jmp    c00145ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014640:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014644:	83 ec 0c             	sub    esp,0xc
c0014647:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001464b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001464f:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014655:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c001465b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014660:	05 00 10 00 00       	add    eax,0x1000
c0014665:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001466c:	e8 72 34 ff ff       	call   c0007ae3 <free>
c0014671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014674:	e8 6a 34 ff ff       	call   c0007ae3 <free>
c0014679:	58                   	pop    eax
c001467a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001467e:	e8 60 34 ff ff       	call   c0007ae3 <free>
c0014683:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014686:	e8 bd 72 ff ff       	call   c000b948 <File::close()>
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	b0 01                	mov    al,0x1
c0014690:	83 c4 3c             	add    esp,0x3c
c0014693:	5b                   	pop    ebx
c0014694:	5e                   	pop    esi
c0014695:	5f                   	pop    edi
c0014696:	5d                   	pop    ebp
c0014697:	c3                   	ret    

c0014698 <Thr::runtimeReferenceHelper()>:
c0014698:	83 ec 18             	sub    esp,0x18
c001469b:	68 3d 22 02 c0       	push   0xc002223d
c00146a0:	e8 65 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00146a5:	fa                   	cli    
c00146a6:	83 c4 10             	add    esp,0x10
c00146a9:	eb fe                	jmp    c00146a9 <Thr::runtimeReferenceHelper()+0x11>

c00146ab <Thr::getAddressOfKernelSymbol(char const*)>:
c00146ab:	57                   	push   edi
c00146ac:	56                   	push   esi
c00146ad:	53                   	push   ebx
c00146ae:	31 db                	xor    ebx,ebx
c00146b0:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00146b6:	7e 3c                	jle    c00146f4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00146b8:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00146bf:	31 ff                	xor    edi,edi
c00146c1:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00146c8:	7e 27                	jle    c00146f1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00146ca:	50                   	push   eax
c00146cb:	50                   	push   eax
c00146cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00146d2:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00146d9:	50                   	push   eax
c00146da:	e8 a1 c0 fe ff       	call   c0000780 <strcmp>
c00146df:	83 c4 10             	add    esp,0x10
c00146e2:	85 c0                	test   eax,eax
c00146e4:	75 05                	jne    c00146eb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00146e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00146e9:	eb 0b                	jmp    c00146f6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00146eb:	83 c6 10             	add    esi,0x10
c00146ee:	47                   	inc    edi
c00146ef:	eb d0                	jmp    c00146c1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00146f1:	43                   	inc    ebx
c00146f2:	eb bc                	jmp    c00146b0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00146f4:	31 c0                	xor    eax,eax
c00146f6:	5b                   	pop    ebx
c00146f7:	5e                   	pop    esi
c00146f8:	5f                   	pop    edi
c00146f9:	c3                   	ret    

c00146fa <Thr::loadKernelSymbolTable(char const*)>:
c00146fa:	55                   	push   ebp
c00146fb:	57                   	push   edi
c00146fc:	56                   	push   esi
c00146fd:	53                   	push   ebx
c00146fe:	83 ec 68             	sub    esp,0x68
c0014701:	68 14 01 00 00       	push   0x114
c0014706:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c001470c:	e8 c2 33 ff ff       	call   c0007ad3 <malloc>
c0014711:	83 c4 0c             	add    esp,0xc
c0014714:	56                   	push   esi
c0014715:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014719:	89 c3                	mov    ebx,eax
c001471b:	50                   	push   eax
c001471c:	e8 01 71 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0014721:	5e                   	pop    esi
c0014722:	5f                   	pop    edi
c0014723:	6a 01                	push   0x1
c0014725:	53                   	push   ebx
c0014726:	e8 bf 71 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c001472b:	83 c4 10             	add    esp,0x10
c001472e:	85 c0                	test   eax,eax
c0014730:	74 0a                	je     c001473c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014732:	83 ec 0c             	sub    esp,0xc
c0014735:	68 5f 22 02 c0       	push   0xc002225f
c001473a:	eb 34                	jmp    c0014770 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001473c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	6a 34                	push   0x34
c0014749:	e8 85 33 ff ff       	call   c0007ad3 <malloc>
c001474e:	59                   	pop    ecx
c001474f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014753:	89 c7                	mov    edi,eax
c0014755:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014757:	56                   	push   esi
c0014758:	57                   	push   edi
c0014759:	6a 00                	push   0x0
c001475b:	6a 34                	push   0x34
c001475d:	53                   	push   ebx
c001475e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014761:	83 c4 20             	add    esp,0x20
c0014764:	85 c0                	test   eax,eax
c0014766:	74 17                	je     c001477f <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	68 76 22 02 c0       	push   0xc0022276
c0014770:	e8 74 cb ff ff       	call   c00112e9 <KePanic(char const*)>
c0014775:	83 c4 10             	add    esp,0x10
c0014778:	31 c0                	xor    eax,eax
c001477a:	e9 31 02 00 00       	jmp    c00149b0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001477f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014785:	75 e1                	jne    c0014768 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014787:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001478a:	85 c0                	test   eax,eax
c001478c:	74 da                	je     c0014768 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001478e:	52                   	push   edx
c001478f:	31 d2                	xor    edx,edx
c0014791:	52                   	push   edx
c0014792:	50                   	push   eax
c0014793:	53                   	push   ebx
c0014794:	e8 0f 72 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014799:	83 c4 10             	add    esp,0x10
c001479c:	85 c0                	test   eax,eax
c001479e:	75 c8                	jne    c0014768 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00147a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	31 ed                	xor    ebp,ebp
c00147a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147ad:	0f af c2             	imul   eax,edx
c00147b0:	50                   	push   eax
c00147b1:	e8 1d 33 ff ff       	call   c0007ad3 <malloc>
c00147b6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00147b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00147bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147c3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147cb:	0f af c2             	imul   eax,edx
c00147ce:	99                   	cdq    
c00147cf:	52                   	push   edx
c00147d0:	50                   	push   eax
c00147d1:	53                   	push   ebx
c00147d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147d5:	83 c4 20             	add    esp,0x20
c00147d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00147e0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00147e8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00147f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147f8:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00147fc:	0f b7 f5             	movzx  esi,bp
c00147ff:	0f 83 a7 00 00 00    	jae    c00148ac <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014805:	6b f6 28             	imul   esi,esi,0x28
c0014808:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001480c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001480f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014813:	50                   	push   eax
c0014814:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014818:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001481c:	8b 16                	mov    edx,DWORD PTR [esi]
c001481e:	6b c0 28             	imul   eax,eax,0x28
c0014821:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014825:	89 d0                	mov    eax,edx
c0014827:	31 d2                	xor    edx,edx
c0014829:	52                   	push   edx
c001482a:	50                   	push   eax
c001482b:	53                   	push   ebx
c001482c:	e8 77 71 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014831:	83 c4 0c             	add    esp,0xc
c0014834:	6a 20                	push   0x20
c0014836:	6a 00                	push   0x0
c0014838:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001483c:	52                   	push   edx
c001483d:	e8 ae bc fe ff       	call   c00004f0 <memset>
c0014842:	58                   	pop    eax
c0014843:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014845:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014849:	51                   	push   ecx
c001484a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001484e:	52                   	push   edx
c001484f:	6a 00                	push   0x0
c0014851:	6a 1f                	push   0x1f
c0014853:	53                   	push   ebx
c0014854:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014857:	83 c4 18             	add    esp,0x18
c001485a:	68 8d 22 02 c0       	push   0xc002228d
c001485f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014863:	52                   	push   edx
c0014864:	e8 17 bf fe ff       	call   c0000780 <strcmp>
c0014869:	83 c4 10             	add    esp,0x10
c001486c:	85 c0                	test   eax,eax
c001486e:	75 0f                	jne    c001487f <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014870:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014877:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001487b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001487f:	50                   	push   eax
c0014880:	50                   	push   eax
c0014881:	68 95 22 02 c0       	push   0xc0022295
c0014886:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001488a:	50                   	push   eax
c001488b:	e8 f0 be fe ff       	call   c0000780 <strcmp>
c0014890:	83 c4 10             	add    esp,0x10
c0014893:	85 c0                	test   eax,eax
c0014895:	75 0f                	jne    c00148a6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014897:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001489a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001489e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00148a6:	45                   	inc    ebp
c00148a7:	e9 4c ff ff ff       	jmp    c00147f8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00148ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00148b1:	75 10                	jne    c00148c3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00148b3:	83 ec 0c             	sub    esp,0xc
c00148b6:	68 9d 22 02 c0       	push   0xc002229d
c00148bb:	e8 29 ca ff ff       	call   c00112e9 <KePanic(char const*)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00148c8:	75 10                	jne    c00148da <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	68 9d 22 02 c0       	push   0xc002229d
c00148d2:	e8 12 ca ff ff       	call   c00112e9 <KePanic(char const*)>
c00148d7:	83 c4 10             	add    esp,0x10
c00148da:	50                   	push   eax
c00148db:	31 d2                	xor    edx,edx
c00148dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e1:	52                   	push   edx
c00148e2:	50                   	push   eax
c00148e3:	53                   	push   ebx
c00148e4:	e8 bf 70 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c00148e9:	5a                   	pop    edx
c00148ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148ee:	e8 e0 31 ff ff       	call   c0007ad3 <malloc>
c00148f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00148f7:	31 c9                	xor    ecx,ecx
c00148f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148ff:	5e                   	pop    esi
c0014900:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014904:	55                   	push   ebp
c0014905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014909:	51                   	push   ecx
c001490a:	52                   	push   edx
c001490b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001490f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014913:	53                   	push   ebx
c0014914:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014917:	83 c4 14             	add    esp,0x14
c001491a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001491e:	e8 b0 31 ff ff       	call   c0007ad3 <malloc>
c0014923:	89 c6                	mov    esi,eax
c0014925:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014927:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001492a:	56                   	push   esi
c001492b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001492f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014933:	51                   	push   ecx
c0014934:	52                   	push   edx
c0014935:	53                   	push   ebx
c0014936:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014939:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001493d:	83 c4 1c             	add    esp,0x1c
c0014940:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014946:	c1 e8 04             	shr    eax,0x4
c0014949:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014950:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014954:	31 d2                	xor    edx,edx
c0014956:	52                   	push   edx
c0014957:	50                   	push   eax
c0014958:	53                   	push   ebx
c0014959:	e8 4a 70 ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c001495e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014960:	31 d2                	xor    edx,edx
c0014962:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014965:	56                   	push   esi
c0014966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001496a:	52                   	push   edx
c001496b:	50                   	push   eax
c001496c:	53                   	push   ebx
c001496d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014970:	83 c4 14             	add    esp,0x14
c0014973:	53                   	push   ebx
c0014974:	e8 cf 6f ff ff       	call   c000b948 <File::close()>
c0014979:	5d                   	pop    ebp
c001497a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001497e:	e8 60 31 ff ff       	call   c0007ae3 <free>
c0014983:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014986:	e8 58 31 ff ff       	call   c0007ae3 <free>
c001498b:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014990:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014994:	83 c4 10             	add    esp,0x10
c0014997:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c001499e:	8d 50 01             	lea    edx,[eax+0x1]
c00149a1:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c00149a8:	b0 01                	mov    al,0x1
c00149aa:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c00149b0:	83 c4 5c             	add    esp,0x5c
c00149b3:	5b                   	pop    ebx
c00149b4:	5e                   	pop    esi
c00149b5:	5f                   	pop    edi
c00149b6:	5d                   	pop    ebp
c00149b7:	c3                   	ret    

c00149b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00149b8:	55                   	push   ebp
c00149b9:	57                   	push   edi
c00149ba:	56                   	push   esi
c00149bb:	53                   	push   ebx
c00149bc:	81 ec 68 03 00 00    	sub    esp,0x368
c00149c2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00149c9:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00149cf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00149d3:	68 14 01 00 00       	push   0x114
c00149d8:	e8 f6 30 ff ff       	call   c0007ad3 <malloc>
c00149dd:	83 c4 0c             	add    esp,0xc
c00149e0:	56                   	push   esi
c00149e1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00149e8:	50                   	push   eax
c00149e9:	89 c3                	mov    ebx,eax
c00149eb:	e8 32 6e ff ff       	call   c000b822 <File::File(char const*, Process*)>
c00149f0:	5f                   	pop    edi
c00149f1:	5d                   	pop    ebp
c00149f2:	6a 01                	push   0x1
c00149f4:	53                   	push   ebx
c00149f5:	e8 f0 6e ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	85 c0                	test   eax,eax
c00149ff:	0f 85 b3 06 00 00    	jne    c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a05:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014a0d:	83 ec 0c             	sub    esp,0xc
c0014a10:	6a 34                	push   0x34
c0014a12:	e8 bc 30 ff ff       	call   c0007ad3 <malloc>
c0014a17:	5e                   	pop    esi
c0014a18:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014a1c:	89 c5                	mov    ebp,eax
c0014a1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a20:	56                   	push   esi
c0014a21:	55                   	push   ebp
c0014a22:	6a 00                	push   0x0
c0014a24:	6a 34                	push   0x34
c0014a26:	53                   	push   ebx
c0014a27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a2a:	83 c4 20             	add    esp,0x20
c0014a2d:	85 c0                	test   eax,eax
c0014a2f:	0f 85 83 06 00 00    	jne    c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a35:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014a3c:	0f 85 76 06 00 00    	jne    c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a42:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014a45:	85 c0                	test   eax,eax
c0014a47:	0f 84 6b 06 00 00    	je     c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a4d:	31 d2                	xor    edx,edx
c0014a4f:	51                   	push   ecx
c0014a50:	52                   	push   edx
c0014a51:	50                   	push   eax
c0014a52:	53                   	push   ebx
c0014a53:	e8 50 6f ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014a58:	83 c4 10             	add    esp,0x10
c0014a5b:	85 c0                	test   eax,eax
c0014a5d:	0f 85 55 06 00 00    	jne    c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a63:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014a66:	83 ec 0c             	sub    esp,0xc
c0014a69:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014a6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014a71:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a75:	0f af c2             	imul   eax,edx
c0014a78:	50                   	push   eax
c0014a79:	e8 55 30 ff ff       	call   c0007ad3 <malloc>
c0014a7e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a80:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a8b:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014a8f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014a93:	0f af c2             	imul   eax,edx
c0014a96:	99                   	cdq    
c0014a97:	52                   	push   edx
c0014a98:	50                   	push   eax
c0014a99:	53                   	push   ebx
c0014a9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a9d:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014aa0:	83 c4 20             	add    esp,0x20
c0014aa3:	85 c0                	test   eax,eax
c0014aa5:	0f 84 0d 06 00 00    	je     c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014aab:	52                   	push   edx
c0014aac:	31 d2                	xor    edx,edx
c0014aae:	52                   	push   edx
c0014aaf:	50                   	push   eax
c0014ab0:	53                   	push   ebx
c0014ab1:	e8 f2 6e ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	85 c0                	test   eax,eax
c0014abb:	0f 85 f7 05 00 00    	jne    c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014ac1:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014ac5:	83 ec 0c             	sub    esp,0xc
c0014ac8:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014acc:	0f af c2             	imul   eax,edx
c0014acf:	50                   	push   eax
c0014ad0:	e8 fe 2f ff ff       	call   c0007ad3 <malloc>
c0014ad5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ad7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ada:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ade:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ae2:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014ae6:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014aea:	0f af c2             	imul   eax,edx
c0014aed:	99                   	cdq    
c0014aee:	52                   	push   edx
c0014aef:	50                   	push   eax
c0014af0:	53                   	push   ebx
c0014af1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014af4:	83 c4 20             	add    esp,0x20
c0014af7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014afd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014b00:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014b04:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014b08:	73 78                	jae    c0014b82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014b0a:	c1 e7 05             	shl    edi,0x5
c0014b0d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014b11:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b14:	75 63                	jne    c0014b79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014b16:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b19:	31 d2                	xor    edx,edx
c0014b1b:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014b1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b22:	50                   	push   eax
c0014b23:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b26:	52                   	push   edx
c0014b27:	50                   	push   eax
c0014b28:	53                   	push   ebx
c0014b29:	e8 7a 6e ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	85 c0                	test   eax,eax
c0014b33:	0f 85 7f 05 00 00    	jne    c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014b39:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014b40:	83 ec 0c             	sub    esp,0xc
c0014b43:	31 d2                	xor    edx,edx
c0014b45:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014b49:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b4b:	01 c6                	add    esi,eax
c0014b4d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b54:	50                   	push   eax
c0014b55:	56                   	push   esi
c0014b56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b5a:	52                   	push   edx
c0014b5b:	50                   	push   eax
c0014b5c:	53                   	push   ebx
c0014b5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b60:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b63:	83 c4 1c             	add    esp,0x1c
c0014b66:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b69:	50                   	push   eax
c0014b6a:	6a 00                	push   0x0
c0014b6c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014b70:	56                   	push   esi
c0014b71:	e8 7a b9 fe ff       	call   c00004f0 <memset>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	66 ff 04 24          	inc    WORD PTR [esp]
c0014b7d:	e9 7b ff ff ff       	jmp    c0014afd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014b82:	50                   	push   eax
c0014b83:	68 00 01 00 00       	push   0x100
c0014b88:	6a 00                	push   0x0
c0014b8a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014b8e:	50                   	push   eax
c0014b8f:	e8 5c b9 fe ff       	call   c00004f0 <memset>
c0014b94:	83 c4 0c             	add    esp,0xc
c0014b97:	68 00 01 00 00       	push   0x100
c0014b9c:	6a 00                	push   0x0
c0014b9e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014ba5:	50                   	push   eax
c0014ba6:	e8 45 b9 fe ff       	call   c00004f0 <memset>
c0014bab:	83 c4 10             	add    esp,0x10
c0014bae:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014bb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014bbc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bc4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014bcc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014bd4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014bdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014be0:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014be4:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014be9:	0f 83 16 01 00 00    	jae    c0014d05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014bef:	6b ff 28             	imul   edi,edi,0x28
c0014bf2:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014bf6:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014bf9:	51                   	push   ecx
c0014bfa:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014bfe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014c02:	8b 07                	mov    eax,DWORD PTR [edi]
c0014c04:	6b d2 28             	imul   edx,edx,0x28
c0014c07:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014c0b:	31 d2                	xor    edx,edx
c0014c0d:	52                   	push   edx
c0014c0e:	50                   	push   eax
c0014c0f:	53                   	push   ebx
c0014c10:	e8 93 6d ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014c15:	83 c4 0c             	add    esp,0xc
c0014c18:	6a 20                	push   0x20
c0014c1a:	6a 00                	push   0x0
c0014c1c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c23:	51                   	push   ecx
c0014c24:	e8 c7 b8 fe ff       	call   c00004f0 <memset>
c0014c29:	58                   	pop    eax
c0014c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c2c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014c30:	52                   	push   edx
c0014c31:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014c38:	51                   	push   ecx
c0014c39:	6a 00                	push   0x0
c0014c3b:	6a 1f                	push   0x1f
c0014c3d:	53                   	push   ebx
c0014c3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c41:	83 c4 1c             	add    esp,0x1c
c0014c44:	6a 09                	push   0x9
c0014c46:	68 b7 22 02 c0       	push   0xc00222b7
c0014c4b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c52:	51                   	push   ecx
c0014c53:	e8 28 b7 fe ff       	call   c0000380 <memcmp>
c0014c58:	83 c4 10             	add    esp,0x10
c0014c5b:	85 c0                	test   eax,eax
c0014c5d:	75 1a                	jne    c0014c79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014c5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c62:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014c65:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c69:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c6c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c73:	89 d0                	mov    eax,edx
c0014c75:	40                   	inc    eax
c0014c76:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c79:	52                   	push   edx
c0014c7a:	6a 09                	push   0x9
c0014c7c:	68 c1 22 02 c0       	push   0xc00222c1
c0014c81:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c88:	50                   	push   eax
c0014c89:	e8 f2 b6 fe ff       	call   c0000380 <memcmp>
c0014c8e:	83 c4 10             	add    esp,0x10
c0014c91:	85 c0                	test   eax,eax
c0014c93:	75 1a                	jne    c0014caf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014c95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014c9b:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c9f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014ca2:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014ca9:	89 c8                	mov    eax,ecx
c0014cab:	40                   	inc    eax
c0014cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0014caf:	50                   	push   eax
c0014cb0:	50                   	push   eax
c0014cb1:	68 8d 22 02 c0       	push   0xc002228d
c0014cb6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cbd:	50                   	push   eax
c0014cbe:	e8 bd ba fe ff       	call   c0000780 <strcmp>
c0014cc3:	83 c4 10             	add    esp,0x10
c0014cc6:	85 c0                	test   eax,eax
c0014cc8:	75 0b                	jne    c0014cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014cca:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014cce:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014cd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cd5:	50                   	push   eax
c0014cd6:	50                   	push   eax
c0014cd7:	68 95 22 02 c0       	push   0xc0022295
c0014cdc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ce3:	50                   	push   eax
c0014ce4:	e8 97 ba fe ff       	call   c0000780 <strcmp>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	85 c0                	test   eax,eax
c0014cee:	75 0b                	jne    c0014cfb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014cf0:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014cf4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014cf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cfb:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014d00:	e9 d7 fe ff ff       	jmp    c0014bdc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014d05:	50                   	push   eax
c0014d06:	31 d2                	xor    edx,edx
c0014d08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d0c:	52                   	push   edx
c0014d0d:	50                   	push   eax
c0014d0e:	53                   	push   ebx
c0014d0f:	e8 94 6c ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014d14:	58                   	pop    eax
c0014d15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d19:	e8 b5 2d ff ff       	call   c0007ad3 <malloc>
c0014d1e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d20:	31 d2                	xor    edx,edx
c0014d22:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014d26:	58                   	pop    eax
c0014d27:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014d2b:	56                   	push   esi
c0014d2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d34:	52                   	push   edx
c0014d35:	50                   	push   eax
c0014d36:	53                   	push   ebx
c0014d37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d3a:	83 c4 14             	add    esp,0x14
c0014d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d41:	e8 8d 2d ff ff       	call   c0007ad3 <malloc>
c0014d46:	31 d2                	xor    edx,edx
c0014d48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014d4c:	83 c4 0c             	add    esp,0xc
c0014d4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d53:	52                   	push   edx
c0014d54:	50                   	push   eax
c0014d55:	53                   	push   ebx
c0014d56:	e8 4d 6c ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014d5b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d5d:	31 d2                	xor    edx,edx
c0014d5f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d6a:	52                   	push   edx
c0014d6b:	50                   	push   eax
c0014d6c:	53                   	push   ebx
c0014d6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d70:	83 c4 20             	add    esp,0x20
c0014d73:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014d78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d80:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d84:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014d88:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014d8b:	0f 84 2b 03 00 00    	je     c00150bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014d91:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014d98:	31 d2                	xor    edx,edx
c0014d9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d9e:	c1 e8 03             	shr    eax,0x3
c0014da1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014da5:	51                   	push   ecx
c0014da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014daa:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014dae:	52                   	push   edx
c0014daf:	50                   	push   eax
c0014db0:	53                   	push   ebx
c0014db1:	e8 f2 6b ff ff       	call   c000b9a8 <File::seek(unsigned long long)>
c0014db6:	5e                   	pop    esi
c0014db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dbb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014dc2:	e8 0c 2d ff ff       	call   c0007ad3 <malloc>
c0014dc7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014dc9:	31 d2                	xor    edx,edx
c0014dcb:	89 c7                	mov    edi,eax
c0014dcd:	58                   	pop    eax
c0014dce:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014dd2:	50                   	push   eax
c0014dd3:	57                   	push   edi
c0014dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014ddf:	52                   	push   edx
c0014de0:	50                   	push   eax
c0014de1:	53                   	push   ebx
c0014de2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014de5:	83 c4 20             	add    esp,0x20
c0014de8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014df0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014df4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014df8:	0f 8d a5 02 00 00    	jge    c00150a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014dfe:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014e03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e07:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014e0a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014e0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e12:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014e16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e1a:	c1 e8 08             	shr    eax,0x8
c0014e1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e21:	89 c2                	mov    edx,eax
c0014e23:	c1 e2 04             	shl    edx,0x4
c0014e26:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014e2a:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014e2d:	85 f6                	test   esi,esi
c0014e2f:	0f 85 cf 00 00 00    	jne    c0014f04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e35:	83 ec 0c             	sub    esp,0xc
c0014e38:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e40:	03 02                	add    eax,DWORD PTR [edx]
c0014e42:	50                   	push   eax
c0014e43:	e8 63 f8 ff ff       	call   c00146ab <Thr::getAddressOfKernelSymbol(char const*)>
c0014e48:	83 c4 10             	add    esp,0x10
c0014e4b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e4f:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014e54:	85 c0                	test   eax,eax
c0014e56:	89 c6                	mov    esi,eax
c0014e58:	0f 85 a6 00 00 00    	jne    c0014f04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e5e:	83 ec 0c             	sub    esp,0xc
c0014e61:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e69:	03 02                	add    eax,DWORD PTR [edx]
c0014e6b:	50                   	push   eax
c0014e6c:	e8 63 c6 ff ff       	call   c00114d4 <KeResolveCompatibilitySymbol(char*)>
c0014e71:	83 c4 10             	add    esp,0x10
c0014e74:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014e78:	85 c0                	test   eax,eax
c0014e7a:	89 c6                	mov    esi,eax
c0014e7c:	0f 85 82 00 00 00    	jne    c0014f04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014e82:	50                   	push   eax
c0014e83:	50                   	push   eax
c0014e84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e88:	03 02                	add    eax,DWORD PTR [edx]
c0014e8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014e8e:	50                   	push   eax
c0014e8f:	68 cb 22 02 c0       	push   0xc00222cb
c0014e94:	e8 71 5a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014e99:	58                   	pop    eax
c0014e9a:	5a                   	pop    edx
c0014e9b:	68 e5 22 02 c0       	push   0xc00222e5
c0014ea0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ea7:	51                   	push   ecx
c0014ea8:	e8 a3 b7 fe ff       	call   c0000650 <strcpy>
c0014ead:	59                   	pop    ecx
c0014eae:	58                   	pop    eax
c0014eaf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014eb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014eb7:	03 02                	add    eax,DWORD PTR [edx]
c0014eb9:	50                   	push   eax
c0014eba:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ec1:	51                   	push   ecx
c0014ec2:	e8 a9 b9 fe ff       	call   c0000870 <strcat>
c0014ec7:	58                   	pop    eax
c0014ec8:	5a                   	pop    edx
c0014ec9:	68 7b 23 02 c0       	push   0xc002237b
c0014ece:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ed5:	51                   	push   ecx
c0014ed6:	e8 95 b9 fe ff       	call   c0000870 <strcat>
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ee3:	0f 84 77 01 00 00    	je     c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ee9:	83 ec 0c             	sub    esp,0xc
c0014eec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ef3:	51                   	push   ecx
c0014ef4:	e8 f0 c3 ff ff       	call   c00112e9 <KePanic(char const*)>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014f00:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014f04:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014f09:	83 f8 01             	cmp    eax,0x1
c0014f0c:	0f 85 9b 00 00 00    	jne    c0014fad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014f12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f16:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014f1d:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014f21:	01 d0                	add    eax,edx
c0014f23:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014f2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014f2f:	0f 94 c0             	sete   al
c0014f32:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014f3a:	0f 94 c1             	sete   cl
c0014f3d:	09 c1                	or     ecx,eax
c0014f3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f43:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014f48:	0f b6 c9             	movzx  ecx,cl
c0014f4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f4d:	74 41                	je     c0014f90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014f4f:	8d 14 06             	lea    edx,[esi+eax*1]
c0014f52:	85 c9                	test   ecx,ecx
c0014f54:	75 15                	jne    c0014f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014f56:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f5a:	66 83 f8 0c          	cmp    ax,0xc
c0014f5e:	76 05                	jbe    c0014f65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014f60:	b8 0c 00 00 00       	mov    eax,0xc
c0014f65:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f69:	76 37                	jbe    c0014fa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f6b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f74:	0f 84 e6 00 00 00    	je     c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f7a:	83 ec 0c             	sub    esp,0xc
c0014f7d:	68 fc 22 02 c0       	push   0xc00222fc
c0014f82:	e8 62 c3 ff ff       	call   c00112e9 <KePanic(char const*)>
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f8e:	eb 12                	jmp    c0014fa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f90:	01 c2                	add    edx,eax
c0014f92:	85 c9                	test   ecx,ecx
c0014f94:	75 0c                	jne    c0014fa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f96:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f9a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f9e:	77 02                	ja     c0014fa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014fa0:	01 f2                	add    edx,esi
c0014fa2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014fa6:	89 10                	mov    DWORD PTR [eax],edx
c0014fa8:	e9 ed 00 00 00       	jmp    c001509a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014fad:	83 f8 02             	cmp    eax,0x2
c0014fb0:	0f 85 81 00 00 00    	jne    c0015037 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014fb6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fbd:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014fc1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014fc5:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014fcd:	74 21                	je     c0014ff0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014fcf:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014fd7:	74 17                	je     c0014ff0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014fd9:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014fdd:	ba 0a 00 00 00       	mov    edx,0xa
c0014fe2:	83 f9 0e             	cmp    ecx,0xe
c0014fe5:	77 03                	ja     c0014fea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014fe7:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014fea:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014fee:	76 1f                	jbe    c001500f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014ff0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ff5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ff9:	74 65                	je     c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ffb:	83 ec 0c             	sub    esp,0xc
c0014ffe:	68 18 23 02 c0       	push   0xc0022318
c0015003:	e8 e1 c2 ff ff       	call   c00112e9 <KePanic(char const*)>
c0015008:	83 c4 10             	add    esp,0x10
c001500b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001500f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015014:	8b 10                	mov    edx,DWORD PTR [eax]
c0015016:	74 15                	je     c001502d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015018:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001501c:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015023:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015027:	01 d1                	add    ecx,edx
c0015029:	01 ce                	add    esi,ecx
c001502b:	eb 06                	jmp    c0015033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001502d:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015031:	01 d6                	add    esi,edx
c0015033:	89 30                	mov    DWORD PTR [eax],esi
c0015035:	eb 63                	jmp    c001509a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015037:	56                   	push   esi
c0015038:	56                   	push   esi
c0015039:	50                   	push   eax
c001503a:	68 34 23 02 c0       	push   0xc0022334
c001503f:	e8 c6 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015044:	83 c4 10             	add    esp,0x10
c0015047:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001504c:	74 12                	je     c0015060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001504e:	83 ec 0c             	sub    esp,0xc
c0015051:	68 3f 23 02 c0       	push   0xc002233f
c0015056:	e8 8e c2 ff ff       	call   c00112e9 <KePanic(char const*)>
c001505b:	83 c4 10             	add    esp,0x10
c001505e:	eb 3a                	jmp    c001509a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015060:	83 ec 0c             	sub    esp,0xc
c0015063:	53                   	push   ebx
c0015064:	e8 df 68 ff ff       	call   c000b948 <File::close()>
c0015069:	8b 03                	mov    eax,DWORD PTR [ebx]
c001506b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001506e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015071:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015074:	e8 6a 2a ff ff       	call   c0007ae3 <free>
c0015079:	59                   	pop    ecx
c001507a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001507e:	e8 60 2a ff ff       	call   c0007ae3 <free>
c0015083:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015086:	e8 58 2a ff ff       	call   c0007ae3 <free>
c001508b:	5b                   	pop    ebx
c001508c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015090:	e8 4e 2a ff ff       	call   c0007ae3 <free>
c0015095:	83 c4 10             	add    esp,0x10
c0015098:	eb 1e                	jmp    c00150b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001509a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001509e:	e9 4d fd ff ff       	jmp    c0014df0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00150a3:	83 ec 0c             	sub    esp,0xc
c00150a6:	57                   	push   edi
c00150a7:	e8 37 2a ff ff       	call   c0007ae3 <free>
c00150ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00150b0:	83 c4 10             	add    esp,0x10
c00150b3:	e9 cc fc ff ff       	jmp    c0014d84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00150b8:	31 c0                	xor    eax,eax
c00150ba:	eb 32                	jmp    c00150ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00150bc:	83 ec 0c             	sub    esp,0xc
c00150bf:	53                   	push   ebx
c00150c0:	e8 83 68 ff ff       	call   c000b948 <File::close()>
c00150c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150cd:	58                   	pop    eax
c00150ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150d2:	e8 0c 2a ff ff       	call   c0007ae3 <free>
c00150d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150da:	e8 04 2a ff ff       	call   c0007ae3 <free>
c00150df:	5a                   	pop    edx
c00150e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150e4:	e8 fa 29 ff ff       	call   c0007ae3 <free>
c00150e9:	83 c4 10             	add    esp,0x10
c00150ec:	b0 01                	mov    al,0x1
c00150ee:	81 c4 5c 03 00 00    	add    esp,0x35c
c00150f4:	5b                   	pop    ebx
c00150f5:	5e                   	pop    esi
c00150f6:	5f                   	pop    edi
c00150f7:	5d                   	pop    ebp
c00150f8:	c3                   	ret    

c00150f9 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00150f9:	56                   	push   esi
c00150fa:	31 d2                	xor    edx,edx
c00150fc:	53                   	push   ebx
c00150fd:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015103:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015107:	39 d3                	cmp    ebx,edx
c0015109:	7e 1b                	jle    c0015126 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001510b:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015112:	39 c8                	cmp    eax,ecx
c0015114:	77 0d                	ja     c0015123 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015116:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c001511d:	01 c6                	add    esi,eax
c001511f:	39 ce                	cmp    esi,ecx
c0015121:	77 05                	ja     c0015128 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015123:	42                   	inc    edx
c0015124:	eb e1                	jmp    c0015107 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015126:	31 c0                	xor    eax,eax
c0015128:	5b                   	pop    ebx
c0015129:	5e                   	pop    esi
c001512a:	c3                   	ret    

c001512b <Thr::getDriverNameFromAddress(unsigned long)>:
c001512b:	53                   	push   ebx
c001512c:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015132:	31 c0                	xor    eax,eax
c0015134:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015138:	39 c3                	cmp    ebx,eax
c001513a:	7e 22                	jle    c001515e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001513c:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015143:	39 ca                	cmp    edx,ecx
c0015145:	77 14                	ja     c001515b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015147:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c001514e:	39 ca                	cmp    edx,ecx
c0015150:	76 09                	jbe    c001515b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015152:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c0015159:	eb 05                	jmp    c0015160 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001515b:	40                   	inc    eax
c001515c:	eb da                	jmp    c0015138 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001515e:	31 c0                	xor    eax,eax
c0015160:	5b                   	pop    ebx
c0015161:	c3                   	ret    

c0015162 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015162:	53                   	push   ebx
c0015163:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015167:	53                   	push   ebx
c0015168:	e8 8c ff ff ff       	call   c00150f9 <Thr::getDriverBaseFromAddress(unsigned long)>
c001516d:	5a                   	pop    edx
c001516e:	31 d2                	xor    edx,edx
c0015170:	85 c0                	test   eax,eax
c0015172:	74 04                	je     c0015178 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015174:	89 da                	mov    edx,ebx
c0015176:	29 c2                	sub    edx,eax
c0015178:	5b                   	pop    ebx
c0015179:	89 d0                	mov    eax,edx
c001517b:	c3                   	ret    

c001517c <Thr::loadDLL(char const*, bool)>:
c001517c:	55                   	push   ebp
c001517d:	57                   	push   edi
c001517e:	56                   	push   esi
c001517f:	53                   	push   ebx
c0015180:	81 ec 34 01 00 00    	sub    esp,0x134
c0015186:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001518d:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015194:	56                   	push   esi
c0015195:	68 57 23 02 c0       	push   0xc0022357
c001519a:	e8 6b 57 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001519f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00151a6:	e8 28 29 ff ff       	call   c0007ad3 <malloc>
c00151ab:	83 c4 0c             	add    esp,0xc
c00151ae:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00151b4:	56                   	push   esi
c00151b5:	50                   	push   eax
c00151b6:	89 c3                	mov    ebx,eax
c00151b8:	e8 65 66 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c00151bd:	83 c4 10             	add    esp,0x10
c00151c0:	85 db                	test   ebx,ebx
c00151c2:	75 3c                	jne    c0015200 <Thr::loadDLL(char const*, bool)+0x84>
c00151c4:	89 e8                	mov    eax,ebp
c00151c6:	84 c0                	test   al,al
c00151c8:	0f 84 e1 01 00 00    	je     c00153af <Thr::loadDLL(char const*, bool)+0x233>
c00151ce:	50                   	push   eax
c00151cf:	50                   	push   eax
c00151d0:	68 68 23 02 c0       	push   0xc0022368
c00151d5:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00151d9:	57                   	push   edi
c00151da:	e8 71 b4 fe ff       	call   c0000650 <strcpy>
c00151df:	58                   	pop    eax
c00151e0:	5a                   	pop    edx
c00151e1:	56                   	push   esi
c00151e2:	57                   	push   edi
c00151e3:	e8 88 b6 fe ff       	call   c0000870 <strcat>
c00151e8:	59                   	pop    ecx
c00151e9:	58                   	pop    eax
c00151ea:	68 7b 23 02 c0       	push   0xc002237b
c00151ef:	57                   	push   edi
c00151f0:	e8 7b b6 fe ff       	call   c0000870 <strcat>
c00151f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00151f8:	e8 ec c0 ff ff       	call   c00112e9 <KePanic(char const*)>
c00151fd:	83 c4 10             	add    esp,0x10
c0015200:	50                   	push   eax
c0015201:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015205:	50                   	push   eax
c0015206:	8d 44 24 20          	lea    eax,[esp+0x20]
c001520a:	50                   	push   eax
c001520b:	53                   	push   ebx
c001520c:	e8 db 69 ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c0015211:	83 c4 10             	add    esp,0x10
c0015214:	85 db                	test   ebx,ebx
c0015216:	74 0c                	je     c0015224 <Thr::loadDLL(char const*, bool)+0xa8>
c0015218:	8b 03                	mov    eax,DWORD PTR [ebx]
c001521a:	83 ec 0c             	sub    esp,0xc
c001521d:	53                   	push   ebx
c001521e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015221:	83 c4 10             	add    esp,0x10
c0015224:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015229:	75 0a                	jne    c0015235 <Thr::loadDLL(char const*, bool)+0xb9>
c001522b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001522f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015233:	75 3e                	jne    c0015273 <Thr::loadDLL(char const*, bool)+0xf7>
c0015235:	89 e8                	mov    eax,ebp
c0015237:	31 db                	xor    ebx,ebx
c0015239:	84 c0                	test   al,al
c001523b:	0f 84 6e 01 00 00    	je     c00153af <Thr::loadDLL(char const*, bool)+0x233>
c0015241:	50                   	push   eax
c0015242:	50                   	push   eax
c0015243:	68 68 23 02 c0       	push   0xc0022368
c0015248:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001524c:	53                   	push   ebx
c001524d:	e8 fe b3 fe ff       	call   c0000650 <strcpy>
c0015252:	58                   	pop    eax
c0015253:	5a                   	pop    edx
c0015254:	56                   	push   esi
c0015255:	53                   	push   ebx
c0015256:	e8 15 b6 fe ff       	call   c0000870 <strcat>
c001525b:	59                   	pop    ecx
c001525c:	5f                   	pop    edi
c001525d:	68 7b 23 02 c0       	push   0xc002237b
c0015262:	53                   	push   ebx
c0015263:	e8 08 b6 fe ff       	call   c0000870 <strcat>
c0015268:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001526b:	e8 79 c0 ff ff       	call   c00112e9 <KePanic(char const*)>
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	53                   	push   ebx
c0015274:	6a 03                	push   0x3
c0015276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001527a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001527e:	05 ff 0f 00 00       	add    eax,0xfff
c0015283:	83 d2 00             	adc    edx,0x0
c0015286:	0f ac d0 0c          	shrd   eax,edx,0xc
c001528a:	50                   	push   eax
c001528b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015291:	e8 70 4b ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0015296:	89 c3                	mov    ebx,eax
c0015298:	58                   	pop    eax
c0015299:	5a                   	pop    edx
c001529a:	53                   	push   ebx
c001529b:	68 32 09 02 c0       	push   0xc0020932
c00152a0:	e8 65 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00152a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00152a8:	e8 d3 b2 fe ff       	call   c0000580 <strlen>
c00152ad:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c00152b3:	40                   	inc    eax
c00152b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00152b7:	e8 17 28 ff ff       	call   c0007ad3 <malloc>
c00152bc:	59                   	pop    ecx
c00152bd:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c00152c4:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152c9:	5f                   	pop    edi
c00152ca:	56                   	push   esi
c00152cb:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00152d2:	e8 79 b3 fe ff       	call   c0000650 <strcpy>
c00152d7:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152dc:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00152e3:	8d 50 01             	lea    edx,[eax+0x1]
c00152e6:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00152ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00152f0:	83 c4 0c             	add    esp,0xc
c00152f3:	6a 01                	push   0x1
c00152f5:	53                   	push   ebx
c00152f6:	56                   	push   esi
c00152f7:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00152fe:	e8 b5 f6 ff ff       	call   c00149b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	89 c7                	mov    edi,eax
c0015308:	89 f8                	mov    eax,edi
c001530a:	83 f0 01             	xor    eax,0x1
c001530d:	84 c0                	test   al,al
c001530f:	74 18                	je     c0015329 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015311:	89 e8                	mov    eax,ebp
c0015313:	84 c0                	test   al,al
c0015315:	74 12                	je     c0015329 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015317:	83 ec 0c             	sub    esp,0xc
c001531a:	68 7d 23 02 c0       	push   0xc002237d
c001531f:	e8 c5 bf ff ff       	call   c00112e9 <KePanic(char const*)>
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	eb 06                	jmp    c001532f <Thr::loadDLL(char const*, bool)+0x1b3>
c0015329:	89 f8                	mov    eax,edi
c001532b:	84 c0                	test   al,al
c001532d:	75 10                	jne    c001533f <Thr::loadDLL(char const*, bool)+0x1c3>
c001532f:	83 ec 0c             	sub    esp,0xc
c0015332:	68 9c 23 02 c0       	push   0xc002239c
c0015337:	e8 ad bf ff ff       	call   c00112e9 <KePanic(char const*)>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	31 f6                	xor    esi,esi
c0015341:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015345:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015349:	05 ff 0f 00 00       	add    eax,0xfff
c001534e:	83 d2 00             	adc    edx,0x0
c0015351:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015355:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015359:	c1 ea 0c             	shr    edx,0xc
c001535c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015360:	ba 00 00 00 00       	mov    edx,0x0
c0015365:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015369:	89 d0                	mov    eax,edx
c001536b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001536f:	73 32                	jae    c00153a3 <Thr::loadDLL(char const*, bool)+0x227>
c0015371:	50                   	push   eax
c0015372:	50                   	push   eax
c0015373:	89 f0                	mov    eax,esi
c0015375:	c1 e0 0c             	shl    eax,0xc
c0015378:	01 d8                	add    eax,ebx
c001537a:	50                   	push   eax
c001537b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015381:	e8 64 45 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0015386:	83 c4 10             	add    esp,0x10
c0015389:	8b 00                	mov    eax,DWORD PTR [eax]
c001538b:	a8 60                	test   al,0x60
c001538d:	75 11                	jne    c00153a0 <Thr::loadDLL(char const*, bool)+0x224>
c001538f:	83 ec 0c             	sub    esp,0xc
c0015392:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015397:	50                   	push   eax
c0015398:	e8 dc 29 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	46                   	inc    esi
c00153a1:	eb 9e                	jmp    c0015341 <Thr::loadDLL(char const*, bool)+0x1c5>
c00153a3:	89 f8                	mov    eax,edi
c00153a5:	84 c0                	test   al,al
c00153a7:	b8 00 00 00 00       	mov    eax,0x0
c00153ac:	0f 44 d8             	cmove  ebx,eax
c00153af:	81 c4 2c 01 00 00    	add    esp,0x12c
c00153b5:	89 d8                	mov    eax,ebx
c00153b7:	5b                   	pop    ebx
c00153b8:	5e                   	pop    esi
c00153b9:	5f                   	pop    edi
c00153ba:	5d                   	pop    ebp
c00153bb:	c3                   	ret    

c00153bc <Thr::executeDLL(unsigned long, void*)>:
c00153bc:	56                   	push   esi
c00153bd:	53                   	push   ebx
c00153be:	52                   	push   edx
c00153bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153c7:	85 db                	test   ebx,ebx
c00153c9:	75 10                	jne    c00153db <Thr::executeDLL(unsigned long, void*)+0x1f>
c00153cb:	83 ec 0c             	sub    esp,0xc
c00153ce:	68 b8 23 02 c0       	push   0xc00223b8
c00153d3:	e8 11 bf ff ff       	call   c00112e9 <KePanic(char const*)>
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	50                   	push   eax
c00153dc:	50                   	push   eax
c00153dd:	53                   	push   ebx
c00153de:	68 e2 23 02 c0       	push   0xc00223e2
c00153e3:	e8 22 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00153e8:	89 d8                	mov    eax,ebx
c00153ea:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153ee:	83 c4 14             	add    esp,0x14
c00153f1:	5b                   	pop    ebx
c00153f2:	5e                   	pop    esi
c00153f3:	ff e0                	jmp    eax
c00153f5:	66 90                	xchg   ax,ax
c00153f7:	90                   	nop

c00153f8 <userModeEntryPoint(void*)>:
c00153f8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00153fd:	83 e8 01             	sub    eax,0x1
c0015400:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015405:	75 01                	jne    c0015408 <userModeEntryPoint(void*)+0x10>
c0015407:	fb                   	sti    
c0015408:	fb                   	sti    
c0015409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015411:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015417:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001541b:	e9 1f ae fe ff       	jmp    c000023f <goToUsermode>

c0015420 <changeTSS>:
c0015420:	83 ec 14             	sub    esp,0x14
c0015423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015428:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001542b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015430:	c1 e2 15             	shl    edx,0x15
c0015433:	29 d0                	sub    eax,edx
c0015435:	50                   	push   eax
c0015436:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001543b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015441:	05 7c 11 00 00       	add    eax,0x117c
c0015446:	50                   	push   eax
c0015447:	e8 f0 3a ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c001544c:	83 c4 1c             	add    esp,0x1c
c001544f:	c3                   	ret    

c0015450 <switchToThread(ThreadControlBlock*)>:
c0015450:	57                   	push   edi
c0015451:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015457:	56                   	push   esi
c0015458:	53                   	push   ebx
c0015459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001545d:	85 c9                	test   ecx,ecx
c001545f:	0f 85 8b 00 00 00    	jne    c00154f0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015465:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015469:	81 fa ff 00 00 00    	cmp    edx,0xff
c001546f:	74 7b                	je     c00154ec <switchToThread(ThreadControlBlock*)+0x9c>
c0015471:	b8 00 04 00 00       	mov    eax,0x400
c0015476:	29 d0                	sub    eax,edx
c0015478:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001547b:	d1 f8                	sar    eax,1
c001547d:	01 d0                	add    eax,edx
c001547f:	90                   	nop
c0015480:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015483:	e8 04 28 00 00       	call   c0017c8c <HalQueryPerformanceCounter()>
c0015488:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c001548d:	89 c6                	mov    esi,eax
c001548f:	89 d7                	mov    edi,edx
c0015491:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015497:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c001549c:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00154a2:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00154a8:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00154ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154b4:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00154ba:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00154c0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00154c3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00154c6:	01 c6                	add    esi,eax
c00154c8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00154cb:	11 d7                	adc    edi,edx
c00154cd:	83 ec 0c             	sub    esp,0xc
c00154d0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00154d3:	53                   	push   ebx
c00154d4:	e8 9e ad fe ff       	call   c0000277 <switchToThreadASM>
c00154d9:	0f 20 c0             	mov    eax,cr0
c00154dc:	83 c8 08             	or     eax,0x8
c00154df:	0f 22 c0             	mov    cr0,eax
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	5b                   	pop    ebx
c00154e6:	5e                   	pop    esi
c00154e7:	5f                   	pop    edi
c00154e8:	c3                   	ret    
c00154e9:	8d 76 00             	lea    esi,[esi+0x0]
c00154ec:	31 c0                	xor    eax,eax
c00154ee:	eb 90                	jmp    c0015480 <switchToThread(ThreadControlBlock*)+0x30>
c00154f0:	5b                   	pop    ebx
c00154f1:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00154fb:	5e                   	pop    esi
c00154fc:	5f                   	pop    edi
c00154fd:	c3                   	ret    
c00154fe:	66 90                	xchg   ax,ax

c0015500 <Process::addArgs(char**)>:
c0015500:	57                   	push   edi
c0015501:	56                   	push   esi
c0015502:	53                   	push   ebx
c0015503:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015507:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001550b:	85 f6                	test   esi,esi
c001550d:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015517:	74 4f                	je     c0015568 <Process::addArgs(char**)+0x68>
c0015519:	8b 06                	mov    eax,DWORD PTR [esi]
c001551b:	85 c0                	test   eax,eax
c001551d:	74 49                	je     c0015568 <Process::addArgs(char**)+0x68>
c001551f:	31 db                	xor    ebx,ebx
c0015521:	8d 76 00             	lea    esi,[esi+0x0]
c0015524:	83 ec 0c             	sub    esp,0xc
c0015527:	50                   	push   eax
c0015528:	e8 53 b0 fe ff       	call   c0000580 <strlen>
c001552d:	83 c0 01             	add    eax,0x1
c0015530:	89 04 24             	mov    DWORD PTR [esp],eax
c0015533:	e8 9b 25 ff ff       	call   c0007ad3 <malloc>
c0015538:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c001553f:	5a                   	pop    edx
c0015540:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015543:	83 c3 01             	add    ebx,0x1
c0015546:	59                   	pop    ecx
c0015547:	52                   	push   edx
c0015548:	50                   	push   eax
c0015549:	e8 02 b1 fe ff       	call   c0000650 <strcpy>
c001554e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015554:	83 c4 10             	add    esp,0x10
c0015557:	83 c1 01             	add    ecx,0x1
c001555a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015560:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015563:	85 c0                	test   eax,eax
c0015565:	75 bd                	jne    c0015524 <Process::addArgs(char**)+0x24>
c0015567:	90                   	nop
c0015568:	5b                   	pop    ebx
c0015569:	5e                   	pop    esi
c001556a:	5f                   	pop    edi
c001556b:	c3                   	ret    

c001556c <Process::Process(char const*, Process*, char**)>:
c001556c:	56                   	push   esi
c001556d:	53                   	push   ebx
c001556e:	83 ec 14             	sub    esp,0x14
c0015571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015575:	05 0c 02 00 00       	add    eax,0x20c
c001557a:	bb 07 00 00 00       	mov    ebx,0x7
c001557f:	89 c6                	mov    esi,eax
c0015581:	8d 76 00             	lea    esi,[esi+0x0]
c0015584:	85 db                	test   ebx,ebx
c0015586:	78 14                	js     c001559c <Process::Process(char const*, Process*, char**)+0x30>
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	56                   	push   esi
c001558c:	e8 27 a6 00 00       	call   c001fbb8 <ThreadControlBlock::ThreadControlBlock()>
c0015591:	83 c4 10             	add    esp,0x10
c0015594:	83 c6 5f             	add    esi,0x5f
c0015597:	83 eb 01             	sub    ebx,0x1
c001559a:	eb e8                	jmp    c0015584 <Process::Process(char const*, Process*, char**)+0x18>
c001559c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155a0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00155a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ab:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00155b2:	83 ec 0c             	sub    esp,0xc
c00155b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155b9:	e8 20 bb ff ff       	call   c00110de <KeNewProcessEnv(Process*)>
c00155be:	83 c4 10             	add    esp,0x10
c00155c1:	89 c2                	mov    edx,eax
c00155c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00155cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155d1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00155da:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c00155df:	8d 50 01             	lea    edx,[eax+0x1]
c00155e2:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c00155e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155ec:	89 02                	mov    DWORD PTR [edx],eax
c00155ee:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00155f6:	83 ec 0c             	sub    esp,0xc
c00155f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155fd:	e8 d1 24 ff ff       	call   c0007ad3 <malloc>
c0015602:	83 c4 10             	add    esp,0x10
c0015605:	89 c3                	mov    ebx,eax
c0015607:	83 ec 08             	sub    esp,0x8
c001560a:	6a 00                	push   0x0
c001560c:	53                   	push   ebx
c001560d:	e8 40 4a ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015612:	83 c4 10             	add    esp,0x10
c0015615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015619:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001561f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015623:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001562d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015631:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015635:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001563b:	e8 c2 c0 ff ff       	call   c0011702 <KeInitSignals()>
c0015640:	89 c2                	mov    edx,eax
c0015642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015646:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001564c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015650:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015656:	85 c0                	test   eax,eax
c0015658:	74 42                	je     c001569c <Process::Process(char const*, Process*, char**)+0x130>
c001565a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015664:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001566a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001566e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015678:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001567e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015688:	05 0c 01 00 00       	add    eax,0x10c
c001568d:	83 ec 08             	sub    esp,0x8
c0015690:	52                   	push   edx
c0015691:	50                   	push   eax
c0015692:	e8 b9 af fe ff       	call   c0000650 <strcpy>
c0015697:	83 c4 10             	add    esp,0x10
c001569a:	eb 64                	jmp    c0015700 <Process::Process(char const*, Process*, char**)+0x194>
c001569c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00156a4:	83 ec 0c             	sub    esp,0xc
c00156a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00156ab:	e8 23 24 ff ff       	call   c0007ad3 <malloc>
c00156b0:	83 c4 10             	add    esp,0x10
c00156b3:	89 c3                	mov    ebx,eax
c00156b5:	83 ec 08             	sub    esp,0x8
c00156b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156bc:	53                   	push   ebx
c00156bd:	e8 aa 35 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00156c2:	83 c4 10             	add    esp,0x10
c00156c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00156cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00156d9:	83 ec 0c             	sub    esp,0xc
c00156dc:	50                   	push   eax
c00156dd:	e8 38 2e ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00156e2:	83 c4 10             	add    esp,0x10
c00156e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e9:	05 0c 01 00 00       	add    eax,0x10c
c00156ee:	83 ec 08             	sub    esp,0x8
c00156f1:	68 01 24 02 c0       	push   0xc0022401
c00156f6:	50                   	push   eax
c00156f7:	e8 54 af fe ff       	call   c0000650 <strcpy>
c00156fc:	83 c4 10             	add    esp,0x10
c00156ff:	90                   	nop
c0015700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015704:	83 c0 0c             	add    eax,0xc
c0015707:	83 ec 08             	sub    esp,0x8
c001570a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001570e:	50                   	push   eax
c001570f:	e8 3c af fe ff       	call   c0000650 <strcpy>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	83 ec 08             	sub    esp,0x8
c001571a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001571e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015722:	e8 d9 fd ff ff       	call   c0015500 <Process::addArgs(char**)>
c0015727:	83 c4 10             	add    esp,0x10
c001572a:	83 ec 08             	sub    esp,0x8
c001572d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015731:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015735:	e8 3f ed ff ff       	call   c0014479 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015741:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015745:	83 f0 01             	xor    eax,0x1
c0015748:	88 c2                	mov    dl,al
c001574a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001574e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015754:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015759:	83 ec 04             	sub    esp,0x4
c001575c:	50                   	push   eax
c001575d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015761:	68 58 24 02 c0       	push   0xc0022458
c0015766:	e8 9f 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001576b:	83 c4 10             	add    esp,0x10
c001576e:	90                   	nop
c001576f:	83 c4 14             	add    esp,0x14
c0015772:	5b                   	pop    ebx
c0015773:	5e                   	pop    esi
c0015774:	c3                   	ret    
c0015775:	90                   	nop
c0015776:	66 90                	xchg   ax,ax

c0015778 <Process::Process(bool, char const*, Process*, char**)>:
c0015778:	56                   	push   esi
c0015779:	53                   	push   ebx
c001577a:	83 ec 24             	sub    esp,0x24
c001577d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015781:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015789:	05 0c 02 00 00       	add    eax,0x20c
c001578e:	bb 07 00 00 00       	mov    ebx,0x7
c0015793:	89 c6                	mov    esi,eax
c0015795:	8d 76 00             	lea    esi,[esi+0x0]
c0015798:	85 db                	test   ebx,ebx
c001579a:	78 14                	js     c00157b0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001579c:	83 ec 0c             	sub    esp,0xc
c001579f:	56                   	push   esi
c00157a0:	e8 13 a4 00 00       	call   c001fbb8 <ThreadControlBlock::ThreadControlBlock()>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	83 c6 5f             	add    esi,0x5f
c00157ab:	83 eb 01             	sub    ebx,0x1
c00157ae:	eb e8                	jmp    c0015798 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00157b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00157bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157bf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157cd:	e8 0c b9 ff ff       	call   c00110de <KeNewProcessEnv(Process*)>
c00157d2:	83 c4 10             	add    esp,0x10
c00157d5:	89 c2                	mov    edx,eax
c00157d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157db:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00157e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157e5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00157ee:	a1 00 36 02 c0       	mov    eax,ds:0xc0023600
c00157f3:	8d 50 01             	lea    edx,[eax+0x1]
c00157f6:	89 15 00 36 02 c0    	mov    DWORD PTR ds:0xc0023600,edx
c00157fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015800:	89 02                	mov    DWORD PTR [edx],eax
c0015802:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001580a:	83 ec 0c             	sub    esp,0xc
c001580d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015811:	e8 bd 22 ff ff       	call   c0007ad3 <malloc>
c0015816:	83 c4 10             	add    esp,0x10
c0015819:	89 c3                	mov    ebx,eax
c001581b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015820:	83 ec 08             	sub    esp,0x8
c0015823:	50                   	push   eax
c0015824:	53                   	push   ebx
c0015825:	e8 28 48 ff ff       	call   c000a052 <VAS::VAS(bool)>
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015831:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001583b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015849:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001584d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015853:	e8 aa be ff ff       	call   c0011702 <KeInitSignals()>
c0015858:	89 c2                	mov    edx,eax
c001585a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001585e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015868:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001586e:	85 c0                	test   eax,eax
c0015870:	74 42                	je     c00158b4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015876:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001587c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015882:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015886:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001588c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015890:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015896:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001589c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a0:	05 0c 01 00 00       	add    eax,0x10c
c00158a5:	83 ec 08             	sub    esp,0x8
c00158a8:	52                   	push   edx
c00158a9:	50                   	push   eax
c00158aa:	e8 a1 ad fe ff       	call   c0000650 <strcpy>
c00158af:	83 c4 10             	add    esp,0x10
c00158b2:	eb 64                	jmp    c0015918 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00158b4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00158c3:	e8 0b 22 ff ff       	call   c0007ad3 <malloc>
c00158c8:	83 c4 10             	add    esp,0x10
c00158cb:	89 c3                	mov    ebx,eax
c00158cd:	83 ec 08             	sub    esp,0x8
c00158d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00158d4:	53                   	push   ebx
c00158d5:	e8 92 33 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c00158da:	83 c4 10             	add    esp,0x10
c00158dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158e1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00158e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158f1:	83 ec 0c             	sub    esp,0xc
c00158f4:	50                   	push   eax
c00158f5:	e8 20 2c ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c00158fa:	83 c4 10             	add    esp,0x10
c00158fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015901:	05 0c 01 00 00       	add    eax,0x10c
c0015906:	83 ec 08             	sub    esp,0x8
c0015909:	68 01 24 02 c0       	push   0xc0022401
c001590e:	50                   	push   eax
c001590f:	e8 3c ad fe ff       	call   c0000650 <strcpy>
c0015914:	83 c4 10             	add    esp,0x10
c0015917:	90                   	nop
c0015918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001591c:	83 c0 0c             	add    eax,0xc
c001591f:	83 ec 08             	sub    esp,0x8
c0015922:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015926:	50                   	push   eax
c0015927:	e8 24 ad fe ff       	call   c0000650 <strcpy>
c001592c:	83 c4 10             	add    esp,0x10
c001592f:	83 ec 08             	sub    esp,0x8
c0015932:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015936:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001593a:	e8 c1 fb ff ff       	call   c0015500 <Process::addArgs(char**)>
c001593f:	83 c4 10             	add    esp,0x10
c0015942:	90                   	nop
c0015943:	83 c4 24             	add    esp,0x24
c0015946:	5b                   	pop    ebx
c0015947:	5e                   	pop    esi
c0015948:	c3                   	ret    
c0015949:	8d 76 00             	lea    esi,[esi+0x0]

c001594c <taskStartupFunction>:
c001594c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015951:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015954:	c3                   	ret    
c0015955:	90                   	nop
c0015956:	66 90                	xchg   ax,ax

c0015958 <Semaphore::Semaphore(int)>:
c0015958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001595c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015960:	89 10                	mov    DWORD PTR [eax],edx
c0015962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015966:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001596d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015971:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001597c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015983:	90                   	nop
c0015984:	c3                   	ret    
c0015985:	90                   	nop
c0015986:	66 90                	xchg   ax,ax

c0015988 <Mutex::Mutex()>:
c0015988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001598c:	6a 01                	push   0x1
c001598e:	50                   	push   eax
c001598f:	e8 c4 ff ff ff       	call   c0015958 <Semaphore::Semaphore(int)>
c0015994:	83 c4 08             	add    esp,0x8
c0015997:	90                   	nop
c0015998:	c3                   	ret    
c0015999:	90                   	nop
c001599a:	66 90                	xchg   ax,ax

c001599c <Process::createThread(void (*)(void*), void*, int)>:
c001599c:	57                   	push   edi
c001599d:	31 c9                	xor    ecx,ecx
c001599f:	56                   	push   esi
c00159a0:	53                   	push   ebx
c00159a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159a5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00159ac:	89 f2                	mov    edx,esi
c00159ae:	66 90                	xchg   ax,ax
c00159b0:	0f b7 c2             	movzx  eax,dx
c00159b3:	80 e2 01             	and    dl,0x1
c00159b6:	74 14                	je     c00159cc <Process::createThread(void (*)(void*), void*, int)+0x30>
c00159b8:	d1 f8                	sar    eax,1
c00159ba:	83 c1 01             	add    ecx,0x1
c00159bd:	83 f9 10             	cmp    ecx,0x10
c00159c0:	89 c2                	mov    edx,eax
c00159c2:	75 ec                	jne    c00159b0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00159c4:	31 db                	xor    ebx,ebx
c00159c6:	89 d8                	mov    eax,ebx
c00159c8:	5b                   	pop    ebx
c00159c9:	5e                   	pop    esi
c00159ca:	5f                   	pop    edi
c00159cb:	c3                   	ret    
c00159cc:	b8 01 00 00 00       	mov    eax,0x1
c00159d1:	d3 e0                	shl    eax,cl
c00159d3:	09 c6                	or     esi,eax
c00159d5:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00159dc:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00159df:	c1 e0 05             	shl    eax,0x5
c00159e2:	29 c8                	sub    eax,ecx
c00159e4:	01 d8                	add    eax,ebx
c00159e6:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00159ed:	75 0d                	jne    c00159fc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00159ef:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00159f9:	8d 76 00             	lea    esi,[esi+0x0]
c00159fc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a02:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015a05:	83 ec 0c             	sub    esp,0xc
c0015a08:	c1 e6 05             	shl    esi,0x5
c0015a0b:	29 ce                	sub    esi,ecx
c0015a0d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015a10:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015a13:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015a19:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015a1f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015a25:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015a2c:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015a32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a36:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015a3c:	89 ca                	mov    edx,ecx
c0015a3e:	f7 da                	neg    edx
c0015a40:	c1 e2 15             	shl    edx,0x15
c0015a43:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015a49:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015a4f:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015a53:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015a5d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015a63:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a67:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015a6d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015a77:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015a81:	68 00 01 00 00       	push   0x100
c0015a86:	e8 48 20 ff ff       	call   c0007ad3 <malloc>
c0015a8b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015a8e:	58                   	pop    eax
c0015a8f:	5a                   	pop    edx
c0015a90:	53                   	push   ebx
c0015a91:	68 e4 96 02 c0       	push   0xc00296e4
c0015a96:	e8 b5 9e 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	89 d8                	mov    eax,ebx
c0015aa0:	5b                   	pop    ebx
c0015aa1:	5e                   	pop    esi
c0015aa2:	5f                   	pop    edi
c0015aa3:	c3                   	ret    

c0015aa4 <Process::createUserThread()>:
c0015aa4:	83 ec 0c             	sub    esp,0xc
c0015aa7:	68 80 00 00 00       	push   0x80
c0015aac:	6a 00                	push   0x0
c0015aae:	68 f8 53 01 c0       	push   0xc00153f8
c0015ab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ab7:	50                   	push   eax
c0015ab8:	e8 df fe ff ff       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c0015abd:	83 c4 1c             	add    esp,0x1c
c0015ac0:	c3                   	ret    
c0015ac1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ac4 <setupMultitasking(void (*)())>:
c0015ac4:	56                   	push   esi
c0015ac5:	53                   	push   ebx
c0015ac6:	83 ec 04             	sub    esp,0x4
c0015ac9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015acd:	eb 11                	jmp    c0015ae0 <setupMultitasking(void (*)())+0x1c>
c0015acf:	90                   	nop
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	68 e4 96 02 c0       	push   0xc00296e4
c0015ad8:	e8 b7 9d 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	68 e4 96 02 c0       	push   0xc00296e4
c0015ae8:	e8 83 9d 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015aed:	83 c4 10             	add    esp,0x10
c0015af0:	84 c0                	test   al,al
c0015af2:	74 dc                	je     c0015ad0 <setupMultitasking(void (*)())+0xc>
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	68 24 07 00 00       	push   0x724
c0015afc:	e8 d2 1f ff ff       	call   c0007ad3 <malloc>
c0015b01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015b08:	6a 00                	push   0x0
c0015b0a:	68 05 24 02 c0       	push   0xc0022405
c0015b0f:	6a 01                	push   0x1
c0015b11:	50                   	push   eax
c0015b12:	89 c3                	mov    ebx,eax
c0015b14:	e8 5f fc ff ff       	call   c0015778 <Process::Process(bool, char const*, Process*, char**)>
c0015b19:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015b1f:	83 c4 14             	add    esp,0x14
c0015b22:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015b28:	50                   	push   eax
c0015b29:	e8 41 2c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015b2e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015b35:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015b3f:	83 c8 01             	or     eax,0x1
c0015b42:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015b49:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015b52:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015b5c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015b62:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015b6c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015b72:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015b7c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015b86:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015b8c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015b92:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015b9c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015ba6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015bad:	e8 21 1f ff ff       	call   c0007ad3 <malloc>
c0015bb2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015bb8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015bbe:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015bc4:	5a                   	pop    edx
c0015bc5:	59                   	pop    ecx
c0015bc6:	68 01 24 02 c0       	push   0xc0022401
c0015bcb:	50                   	push   eax
c0015bcc:	e8 7f aa fe ff       	call   c0000650 <strcpy>
c0015bd1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015bd8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015bdc:	83 c4 14             	add    esp,0x14
c0015bdf:	5b                   	pop    ebx
c0015be0:	5e                   	pop    esi
c0015be1:	e9 83 a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015be6:	66 90                	xchg   ax,ax

c0015be8 <schedule()>:
c0015be8:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015bee:	85 d2                	test   edx,edx
c0015bf0:	74 0e                	je     c0015c00 <schedule()+0x18>
c0015bf2:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015bfc:	c3                   	ret    
c0015bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0015c00:	53                   	push   ebx
c0015c01:	83 ec 14             	sub    esp,0x14
c0015c04:	68 e4 96 02 c0       	push   0xc00296e4
c0015c09:	e8 62 9c 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	84 c0                	test   al,al
c0015c13:	75 3f                	jne    c0015c54 <schedule()+0x6c>
c0015c15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015c1d:	83 fa 01             	cmp    edx,0x1
c0015c20:	74 3a                	je     c0015c5c <schedule()+0x74>
c0015c22:	66 90                	xchg   ax,ax
c0015c24:	83 ec 0c             	sub    esp,0xc
c0015c27:	68 e4 96 02 c0       	push   0xc00296e4
c0015c2c:	e8 5b 9c 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c31:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015c38:	89 c3                	mov    ebx,eax
c0015c3a:	e8 55 9c 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c3f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015c46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c49:	e8 02 f8 ff ff       	call   c0015450 <switchToThread(ThreadControlBlock*)>
c0015c4e:	83 c4 10             	add    esp,0x10
c0015c51:	8d 76 00             	lea    esi,[esi+0x0]
c0015c54:	83 c4 08             	add    esp,0x8
c0015c57:	5b                   	pop    ebx
c0015c58:	c3                   	ret    
c0015c59:	8d 76 00             	lea    esi,[esi+0x0]
c0015c5c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015c63:	83 ec 08             	sub    esp,0x8
c0015c66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c6b:	50                   	push   eax
c0015c6c:	68 e4 96 02 c0       	push   0xc00296e4
c0015c71:	e8 da 9c 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	eb a9                	jmp    c0015c24 <schedule()+0x3c>
c0015c7b:	90                   	nop

c0015c7c <Semaphore::tryAcquire()>:
c0015c7c:	53                   	push   ebx
c0015c7d:	83 ec 08             	sub    esp,0x8
c0015c80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c84:	fa                   	cli    
c0015c85:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015c8b:	8d 42 01             	lea    eax,[edx+0x1]
c0015c8e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c93:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c98:	8d 58 01             	lea    ebx,[eax+0x1]
c0015c9b:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015ca1:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015ca4:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015ca6:	7c 2c                	jl     c0015cd4 <Semaphore::tryAcquire()+0x58>
c0015ca8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015cad:	85 c0                	test   eax,eax
c0015caf:	75 0b                	jne    c0015cbc <Semaphore::tryAcquire()+0x40>
c0015cb1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015cb6:	85 c0                	test   eax,eax
c0015cb8:	75 5a                	jne    c0015d14 <Semaphore::tryAcquire()+0x98>
c0015cba:	66 90                	xchg   ax,ax
c0015cbc:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015cc2:	31 c0                	xor    eax,eax
c0015cc4:	85 d2                	test   edx,edx
c0015cc6:	75 04                	jne    c0015ccc <Semaphore::tryAcquire()+0x50>
c0015cc8:	fb                   	sti    
c0015cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ccc:	83 c4 08             	add    esp,0x8
c0015ccf:	5b                   	pop    ebx
c0015cd0:	c3                   	ret    
c0015cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cd4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015cd9:	83 c3 01             	add    ebx,0x1
c0015cdc:	85 c0                	test   eax,eax
c0015cde:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015ce1:	75 21                	jne    c0015d04 <Semaphore::tryAcquire()+0x88>
c0015ce3:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015ce9:	85 c9                	test   ecx,ecx
c0015ceb:	74 17                	je     c0015d04 <Semaphore::tryAcquire()+0x88>
c0015ced:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015cf7:	e8 ec fe ff ff       	call   c0015be8 <schedule()>
c0015cfc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d01:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d04:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d0a:	85 d2                	test   edx,edx
c0015d0c:	b0 01                	mov    al,0x1
c0015d0e:	75 bc                	jne    c0015ccc <Semaphore::tryAcquire()+0x50>
c0015d10:	eb b6                	jmp    c0015cc8 <Semaphore::tryAcquire()+0x4c>
c0015d12:	66 90                	xchg   ax,ax
c0015d14:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d1e:	e8 c5 fe ff ff       	call   c0015be8 <schedule()>
c0015d23:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d28:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d2b:	31 c0                	xor    eax,eax
c0015d2d:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d33:	85 d2                	test   edx,edx
c0015d35:	75 95                	jne    c0015ccc <Semaphore::tryAcquire()+0x50>
c0015d37:	eb 8f                	jmp    c0015cc8 <Semaphore::tryAcquire()+0x4c>
c0015d39:	90                   	nop
c0015d3a:	66 90                	xchg   ax,ax

c0015d3c <Semaphore::assertLocked(char const*)>:
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d43:	fa                   	cli    
c0015d44:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015d4a:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d4f:	83 c1 01             	add    ecx,0x1
c0015d52:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015d58:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d5b:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d61:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015d63:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015d66:	7c 28                	jl     c0015d90 <Semaphore::assertLocked(char const*)+0x54>
c0015d68:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d6d:	85 c0                	test   eax,eax
c0015d6f:	75 0b                	jne    c0015d7c <Semaphore::assertLocked(char const*)+0x40>
c0015d71:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015d76:	85 c0                	test   eax,eax
c0015d78:	75 32                	jne    c0015dac <Semaphore::assertLocked(char const*)+0x70>
c0015d7a:	66 90                	xchg   ax,ax
c0015d7c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d81:	83 e8 01             	sub    eax,0x1
c0015d84:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d89:	75 01                	jne    c0015d8c <Semaphore::assertLocked(char const*)+0x50>
c0015d8b:	fb                   	sti    
c0015d8c:	83 c4 0c             	add    esp,0xc
c0015d8f:	c3                   	ret    
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d97:	52                   	push   edx
c0015d98:	e8 4c b5 ff ff       	call   c00112e9 <KePanic(char const*)>
c0015d9d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	83 e8 01             	sub    eax,0x1
c0015da8:	eb be                	jmp    c0015d68 <Semaphore::assertLocked(char const*)+0x2c>
c0015daa:	66 90                	xchg   ax,ax
c0015dac:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015db6:	e8 2d fe ff ff       	call   c0015be8 <schedule()>
c0015dbb:	eb bf                	jmp    c0015d7c <Semaphore::assertLocked(char const*)+0x40>
c0015dbd:	8d 76 00             	lea    esi,[esi+0x0]

c0015dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015dc0:	83 ec 0c             	sub    esp,0xc
c0015dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dcc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015dcf:	e8 14 fe ff ff       	call   c0015be8 <schedule()>
c0015dd4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dd9:	83 e8 01             	sub    eax,0x1
c0015ddc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015de1:	75 01                	jne    c0015de4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015de3:	fb                   	sti    
c0015de4:	83 c4 0c             	add    esp,0xc
c0015de7:	c3                   	ret    

c0015de8 <blockTask(TaskState)>:
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	fa                   	cli    
c0015dec:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015df5:	83 c0 01             	add    eax,0x1
c0015df8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e02:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e05:	e8 de fd ff ff       	call   c0015be8 <schedule()>
c0015e0a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e0f:	83 e8 01             	sub    eax,0x1
c0015e12:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e17:	75 03                	jne    c0015e1c <blockTask(TaskState)+0x34>
c0015e19:	fb                   	sti    
c0015e1a:	66 90                	xchg   ax,ax
c0015e1c:	83 c4 0c             	add    esp,0xc
c0015e1f:	c3                   	ret    

c0015e20 <waitTask(int, int*, int)>:
c0015e20:	83 ec 18             	sub    esp,0x18
c0015e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e2c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015e2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e38:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015e3b:	6a 07                	push   0x7
c0015e3d:	e8 a6 ff ff ff       	call   c0015de8 <blockTask(TaskState)>
c0015e42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015e4d:	85 d2                	test   edx,edx
c0015e4f:	74 0b                	je     c0015e5c <waitTask(int, int*, int)+0x3c>
c0015e51:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015e54:	89 02                	mov    DWORD PTR [edx],eax
c0015e56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e5b:	90                   	nop
c0015e5c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015e5f:	83 c4 0c             	add    esp,0xc
c0015e62:	c3                   	ret    
c0015e63:	90                   	nop

c0015e64 <milliTenthSleepUntil(unsigned int)>:
c0015e64:	83 ec 0c             	sub    esp,0xc
c0015e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e6b:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015e71:	76 05                	jbe    c0015e78 <milliTenthSleepUntil(unsigned int)+0x14>
c0015e73:	90                   	nop
c0015e74:	83 c4 0c             	add    esp,0xc
c0015e77:	c3                   	ret    
c0015e78:	fa                   	cli    
c0015e79:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015e7f:	83 ec 08             	sub    esp,0x8
c0015e82:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015e88:	83 c2 01             	add    edx,0x1
c0015e8b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e91:	83 c1 01             	add    ecx,0x1
c0015e94:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ea0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea8:	50                   	push   eax
c0015ea9:	68 d8 96 02 c0       	push   0xc00296d8
c0015eae:	e8 9d 9a 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eb3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015eba:	e8 29 ff ff ff       	call   c0015de8 <blockTask(TaskState)>
c0015ebf:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	83 e8 01             	sub    eax,0x1
c0015eca:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ecf:	85 c0                	test   eax,eax
c0015ed1:	75 09                	jne    c0015edc <milliTenthSleepUntil(unsigned int)+0x78>
c0015ed3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ed8:	85 c0                	test   eax,eax
c0015eda:	75 14                	jne    c0015ef0 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015edc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ee1:	83 e8 01             	sub    eax,0x1
c0015ee4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ee9:	75 89                	jne    c0015e74 <milliTenthSleepUntil(unsigned int)+0x10>
c0015eeb:	fb                   	sti    
c0015eec:	83 c4 0c             	add    esp,0xc
c0015eef:	c3                   	ret    
c0015ef0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015efa:	e8 e9 fc ff ff       	call   c0015be8 <schedule()>
c0015eff:	eb db                	jmp    c0015edc <milliTenthSleepUntil(unsigned int)+0x78>
c0015f01:	8d 76 00             	lea    esi,[esi+0x0]

c0015f04 <milliTenthSleep(unsigned int)>:
c0015f04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f08:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015f0d:	01 c2                	add    edx,eax
c0015f0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015f13:	e9 4c ff ff ff       	jmp    c0015e64 <milliTenthSleepUntil(unsigned int)>

c0015f18 <sleep(unsigned int)>:
c0015f18:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015f20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f24:	eb de                	jmp    c0015f04 <milliTenthSleep(unsigned int)>
c0015f26:	66 90                	xchg   ax,ax

c0015f28 <Semaphore::acquire()>:
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f2f:	fa                   	cli    
c0015f30:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f35:	83 c0 01             	add    eax,0x1
c0015f38:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f3d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f42:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f45:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f4b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015f4e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015f50:	7d 2e                	jge    c0015f80 <Semaphore::acquire()+0x58>
c0015f52:	83 c1 01             	add    ecx,0x1
c0015f55:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f58:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f5d:	85 c0                	test   eax,eax
c0015f5f:	75 0b                	jne    c0015f6c <Semaphore::acquire()+0x44>
c0015f61:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f66:	85 c0                	test   eax,eax
c0015f68:	75 66                	jne    c0015fd0 <Semaphore::acquire()+0xa8>
c0015f6a:	66 90                	xchg   ax,ax
c0015f6c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f71:	83 e8 01             	sub    eax,0x1
c0015f74:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f79:	75 01                	jne    c0015f7c <Semaphore::acquire()+0x54>
c0015f7b:	fb                   	sti    
c0015f7c:	83 c4 0c             	add    esp,0xc
c0015f7f:	c3                   	ret    
c0015f80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f85:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015f8c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015f8f:	85 c9                	test   ecx,ecx
c0015f91:	74 51                	je     c0015fe4 <Semaphore::acquire()+0xbc>
c0015f93:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015f96:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f9c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015f9f:	90                   	nop
c0015fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fa5:	83 ec 0c             	sub    esp,0xc
c0015fa8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015fab:	68 84 24 02 c0       	push   0xc0022484
c0015fb0:	e8 55 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015fb5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015fbc:	e8 27 fe ff ff       	call   c0015de8 <blockTask(TaskState)>
c0015fc1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015fc6:	83 c4 10             	add    esp,0x10
c0015fc9:	83 e8 01             	sub    eax,0x1
c0015fcc:	eb 8a                	jmp    c0015f58 <Semaphore::acquire()+0x30>
c0015fce:	66 90                	xchg   ax,ax
c0015fd0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015fda:	e8 09 fc ff ff       	call   c0015be8 <schedule()>
c0015fdf:	eb 8b                	jmp    c0015f6c <Semaphore::acquire()+0x44>
c0015fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0015fe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fe9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015fec:	eb b2                	jmp    c0015fa0 <Semaphore::acquire()+0x78>
c0015fee:	66 90                	xchg   ax,ax

c0015ff0 <taskReturned>:
c0015ff0:	83 ec 18             	sub    esp,0x18
c0015ff3:	68 a4 24 02 c0       	push   0xc00224a4
c0015ff8:	e8 ec b2 ff ff       	call   c00112e9 <KePanic(char const*)>
c0015ffd:	83 c4 10             	add    esp,0x10
c0016000:	83 ec 0c             	sub    esp,0xc
c0016003:	6a 02                	push   0x2
c0016005:	e8 de fd ff ff       	call   c0015de8 <blockTask(TaskState)>
c001600a:	fa                   	cli    
c001600b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016010:	83 c0 01             	add    eax,0x1
c0016013:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016018:	e8 cb fb ff ff       	call   c0015be8 <schedule()>
c001601d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016022:	83 c4 10             	add    esp,0x10
c0016025:	83 e8 01             	sub    eax,0x1
c0016028:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001602d:	85 c0                	test   eax,eax
c001602f:	75 cf                	jne    c0016000 <taskReturned+0x10>
c0016031:	fb                   	sti    
c0016032:	eb cc                	jmp    c0016000 <taskReturned+0x10>

c0016034 <Thr::processFromPID(int)>:
c0016034:	57                   	push   edi
c0016035:	56                   	push   esi
c0016036:	53                   	push   ebx
c0016037:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001603b:	fa                   	cli    
c001603c:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0016042:	83 ec 0c             	sub    esp,0xc
c0016045:	68 e4 96 02 c0       	push   0xc00296e4
c001604a:	83 c1 01             	add    ecx,0x1
c001604d:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0016053:	e8 34 98 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016058:	83 c4 10             	add    esp,0x10
c001605b:	89 c7                	mov    edi,eax
c001605d:	eb 15                	jmp    c0016074 <Thr::processFromPID(int)+0x40>
c001605f:	90                   	nop
c0016060:	83 ec 0c             	sub    esp,0xc
c0016063:	68 e4 96 02 c0       	push   0xc00296e4
c0016068:	e8 1f 98 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001606d:	83 c4 10             	add    esp,0x10
c0016070:	39 f8                	cmp    eax,edi
c0016072:	74 50                	je     c00160c4 <Thr::processFromPID(int)+0x90>
c0016074:	83 ec 0c             	sub    esp,0xc
c0016077:	68 e4 96 02 c0       	push   0xc00296e4
c001607c:	e8 0b 98 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016081:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016088:	89 c3                	mov    ebx,eax
c001608a:	e8 05 98 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001608f:	58                   	pop    eax
c0016090:	5a                   	pop    edx
c0016091:	53                   	push   ebx
c0016092:	68 e4 96 02 c0       	push   0xc00296e4
c0016097:	e8 b4 98 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001609c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001609f:	83 c4 10             	add    esp,0x10
c00160a2:	39 30                	cmp    DWORD PTR [eax],esi
c00160a4:	75 ba                	jne    c0016060 <Thr::processFromPID(int)+0x2c>
c00160a6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160ab:	83 e8 01             	sub    eax,0x1
c00160ae:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160b3:	74 0b                	je     c00160c0 <Thr::processFromPID(int)+0x8c>
c00160b5:	8d 76 00             	lea    esi,[esi+0x0]
c00160b8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160bb:	90                   	nop
c00160bc:	5b                   	pop    ebx
c00160bd:	5e                   	pop    esi
c00160be:	5f                   	pop    edi
c00160bf:	c3                   	ret    
c00160c0:	fb                   	sti    
c00160c1:	eb f5                	jmp    c00160b8 <Thr::processFromPID(int)+0x84>
c00160c3:	90                   	nop
c00160c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160c9:	8d 50 ff             	lea    edx,[eax-0x1]
c00160cc:	31 c0                	xor    eax,eax
c00160ce:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00160d4:	85 d2                	test   edx,edx
c00160d6:	75 e4                	jne    c00160bc <Thr::processFromPID(int)+0x88>
c00160d8:	fb                   	sti    
c00160d9:	5b                   	pop    ebx
c00160da:	5e                   	pop    esi
c00160db:	5f                   	pop    edi
c00160dc:	c3                   	ret    
c00160dd:	8d 76 00             	lea    esi,[esi+0x0]

c00160e0 <unblockTask(ThreadControlBlock*)>:
c00160e0:	53                   	push   ebx
c00160e1:	83 ec 08             	sub    esp,0x8
c00160e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160e8:	fa                   	cli    
c00160e9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160ee:	83 c0 01             	add    eax,0x1
c00160f1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160f6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00160f9:	85 c0                	test   eax,eax
c00160fb:	74 67                	je     c0016164 <unblockTask(ThreadControlBlock*)+0x84>
c00160fd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016100:	83 f8 01             	cmp    eax,0x1
c0016103:	74 37                	je     c001613c <unblockTask(ThreadControlBlock*)+0x5c>
c0016105:	83 ec 0c             	sub    esp,0xc
c0016108:	68 e4 96 02 c0       	push   0xc00296e4
c001610d:	e8 7a 97 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016112:	83 c4 10             	add    esp,0x10
c0016115:	85 c0                	test   eax,eax
c0016117:	75 1b                	jne    c0016134 <unblockTask(ThreadControlBlock*)+0x54>
c0016119:	eb 5d                	jmp    c0016178 <unblockTask(ThreadControlBlock*)+0x98>
c001611b:	90                   	nop
c001611c:	83 ec 08             	sub    esp,0x8
c001611f:	50                   	push   eax
c0016120:	68 e4 96 02 c0       	push   0xc00296e4
c0016125:	e8 82 9a 00 00       	call   c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001612a:	83 c4 10             	add    esp,0x10
c001612d:	85 c0                	test   eax,eax
c001612f:	74 47                	je     c0016178 <unblockTask(ThreadControlBlock*)+0x98>
c0016131:	8d 76 00             	lea    esi,[esi+0x0]
c0016134:	39 c3                	cmp    ebx,eax
c0016136:	75 e4                	jne    c001611c <unblockTask(ThreadControlBlock*)+0x3c>
c0016138:	eb 12                	jmp    c001614c <unblockTask(ThreadControlBlock*)+0x6c>
c001613a:	66 90                	xchg   ax,ax
c001613c:	83 ec 0c             	sub    esp,0xc
c001613f:	68 23 24 02 c0       	push   0xc0022423
c0016144:	e8 c1 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016149:	83 c4 10             	add    esp,0x10
c001614c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016151:	83 e8 01             	sub    eax,0x1
c0016154:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016159:	75 01                	jne    c001615c <unblockTask(ThreadControlBlock*)+0x7c>
c001615b:	fb                   	sti    
c001615c:	83 c4 08             	add    esp,0x8
c001615f:	5b                   	pop    ebx
c0016160:	c3                   	ret    
c0016161:	8d 76 00             	lea    esi,[esi+0x0]
c0016164:	83 ec 0c             	sub    esp,0xc
c0016167:	68 0c 24 02 c0       	push   0xc002240c
c001616c:	e8 99 47 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	eb d6                	jmp    c001614c <unblockTask(ThreadControlBlock*)+0x6c>
c0016176:	66 90                	xchg   ax,ax
c0016178:	83 ec 08             	sub    esp,0x8
c001617b:	53                   	push   ebx
c001617c:	68 e4 96 02 c0       	push   0xc00296e4
c0016181:	e8 ca 97 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016186:	83 c4 10             	add    esp,0x10
c0016189:	eb c1                	jmp    c001614c <unblockTask(ThreadControlBlock*)+0x6c>
c001618b:	90                   	nop

c001618c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001618c:	55                   	push   ebp
c001618d:	57                   	push   edi
c001618e:	56                   	push   esi
c001618f:	53                   	push   ebx
c0016190:	83 ec 1c             	sub    esp,0x1c
c0016193:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016197:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001619a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00161a0:	85 ed                	test   ebp,ebp
c00161a2:	7e 28                	jle    c00161cc <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00161a4:	31 f6                	xor    esi,esi
c00161a6:	66 90                	xchg   ax,ax
c00161a8:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00161af:	83 ec 0c             	sub    esp,0xc
c00161b2:	83 c6 01             	add    esi,0x1
c00161b5:	57                   	push   edi
c00161b6:	e8 28 19 ff ff       	call   c0007ae3 <free>
c00161bb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00161c7:	7f df                	jg     c00161a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00161d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00161db:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00161de:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00161e1:	d3 c0                	rol    eax,cl
c00161e3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00161ea:	21 c8                	and    eax,ecx
c00161ec:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00161f3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161f6:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00161fe:	89 f7                	mov    edi,esi
c0016200:	0f 85 72 01 00 00    	jne    c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016206:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001620c:	85 ed                	test   ebp,ebp
c001620e:	74 1c                	je     c001622c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016210:	83 ec 0c             	sub    esp,0xc
c0016213:	55                   	push   ebp
c0016214:	e8 e1 ad ff ff       	call   c0010ffa <EnvVarContainer::~EnvVarContainer()>
c0016219:	59                   	pop    ecx
c001621a:	5e                   	pop    esi
c001621b:	6a 0c                	push   0xc
c001621d:	55                   	push   ebp
c001621e:	e8 e9 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016223:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016226:	83 c4 10             	add    esp,0x10
c0016229:	89 f7                	mov    edi,esi
c001622b:	90                   	nop
c001622c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016232:	85 c0                	test   eax,eax
c0016234:	0f 84 b2 00 00 00    	je     c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001623a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001623d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016241:	31 c9                	xor    ecx,ecx
c0016243:	eb 17                	jmp    c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016245:	8d 76 00             	lea    esi,[esi+0x0]
c0016248:	83 c1 01             	add    ecx,0x1
c001624b:	83 f9 10             	cmp    ecx,0x10
c001624e:	0f 84 98 00 00 00    	je     c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016254:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001625a:	66 90                	xchg   ax,ax
c001625c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016263:	d3 fa                	sar    edx,cl
c0016265:	80 e2 01             	and    dl,0x1
c0016268:	74 de                	je     c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001626a:	8d 14 49             	lea    edx,[ecx+ecx*2]
c001626d:	c1 e2 05             	shl    edx,0x5
c0016270:	29 ca                	sub    edx,ecx
c0016272:	01 d0                	add    eax,edx
c0016274:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001627a:	83 fd 07             	cmp    ebp,0x7
c001627d:	75 c9                	jne    c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001627f:	05 40 02 00 00       	add    eax,0x240
c0016284:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016287:	83 fd ff             	cmp    ebp,0xffffffff
c001628a:	0f 8c f0 00 00 00    	jl     c0016380 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016290:	0f 84 ae 01 00 00    	je     c0016444 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016296:	85 ed                	test   ebp,ebp
c0016298:	0f 84 92 01 00 00    	je     c0016430 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001629e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00162a0:	75 a6                	jne    c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00162a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162a6:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162ac:	01 d0                	add    eax,edx
c00162ae:	66 90                	xchg   ax,ax
c00162b0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00162b4:	83 ec 0c             	sub    esp,0xc
c00162b7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00162bd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162c0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00162c6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00162cd:	50                   	push   eax
c00162ce:	e8 0d fe ff ff       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c00162d3:	83 c4 10             	add    esp,0x10
c00162d6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162d9:	89 f7                	mov    edi,esi
c00162db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162df:	83 c1 01             	add    ecx,0x1
c00162e2:	83 f9 10             	cmp    ecx,0x10
c00162e5:	0f 85 69 ff ff ff    	jne    c0016254 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00162eb:	90                   	nop
c00162ec:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00162f2:	85 c0                	test   eax,eax
c00162f4:	74 62                	je     c0016358 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00162f6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00162fc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016302:	74 54                	je     c0016358 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016304:	83 ec 0c             	sub    esp,0xc
c0016307:	68 e4 96 02 c0       	push   0xc00296e4
c001630c:	e8 7b 95 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016311:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016318:	89 c7                	mov    edi,eax
c001631a:	e8 51 95 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001631f:	83 c4 10             	add    esp,0x10
c0016322:	84 c0                	test   al,al
c0016324:	0f 84 ce 00 00 00    	je     c00163f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001632a:	66 90                	xchg   ax,ax
c001632c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001632f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016335:	85 d2                	test   edx,edx
c0016337:	74 0f                	je     c0016348 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016339:	8b 02                	mov    eax,DWORD PTR [edx]
c001633b:	83 ec 0c             	sub    esp,0xc
c001633e:	52                   	push   edx
c001633f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016342:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016345:	83 c4 10             	add    esp,0x10
c0016348:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016352:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016355:	8d 76 00             	lea    esi,[esi+0x0]
c0016358:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001635e:	85 db                	test   ebx,ebx
c0016360:	74 16                	je     c0016378 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016362:	83 ec 0c             	sub    esp,0xc
c0016365:	53                   	push   ebx
c0016366:	e8 25 38 ff ff       	call   c0009b90 <VAS::~VAS()>
c001636b:	58                   	pop    eax
c001636c:	5a                   	pop    edx
c001636d:	6a 14                	push   0x14
c001636f:	53                   	push   ebx
c0016370:	e8 97 44 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0016375:	83 c4 10             	add    esp,0x10
c0016378:	83 c4 1c             	add    esp,0x1c
c001637b:	5b                   	pop    ebx
c001637c:	5e                   	pop    esi
c001637d:	5f                   	pop    edi
c001637e:	5d                   	pop    ebp
c001637f:	c3                   	ret    
c0016380:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	68 d8 24 02 c0       	push   0xc00224d8
c001638c:	e8 58 af ff ff       	call   c00112e9 <KePanic(char const*)>
c0016391:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016394:	83 c4 10             	add    esp,0x10
c0016397:	89 f7                	mov    edi,esi
c0016399:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001639d:	e9 a6 fe ff ff       	jmp    c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00163a2:	66 90                	xchg   ax,ax
c00163a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163aa:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00163b0:	75 1e                	jne    c00163d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00163b2:	83 ec 0c             	sub    esp,0xc
c00163b5:	68 40 25 02 c0       	push   0xc0022540
c00163ba:	e8 4b 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00163bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00163c6:	e8 1d fa ff ff       	call   c0015de8 <blockTask(TaskState)>
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	66 90                	xchg   ax,ax
c00163d0:	83 ec 08             	sub    esp,0x8
c00163d3:	56                   	push   esi
c00163d4:	68 e4 96 02 c0       	push   0xc00296e4
c00163d9:	e8 72 95 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163de:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163e5:	e8 a2 94 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	39 f8                	cmp    eax,edi
c00163ef:	0f 84 37 ff ff ff    	je     c001632c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00163f5:	8d 76 00             	lea    esi,[esi+0x0]
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	68 e4 96 02 c0       	push   0xc00296e4
c0016400:	e8 87 94 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016405:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001640c:	89 c6                	mov    esi,eax
c001640e:	e8 81 94 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	39 f3                	cmp    ebx,esi
c0016418:	74 b6                	je     c00163d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001641a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001641d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016420:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016426:	75 a8                	jne    c00163d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016428:	e9 77 ff ff ff       	jmp    c00163a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001642d:	8d 76 00             	lea    esi,[esi+0x0]
c0016430:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	68 0c 25 02 c0       	push   0xc002250c
c001643c:	e9 4b ff ff ff       	jmp    c001638c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016441:	8d 76 00             	lea    esi,[esi+0x0]
c0016444:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016448:	8b 36                	mov    esi,DWORD PTR [esi]
c001644a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001644d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016450:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016456:	01 d7                	add    edi,edx
c0016458:	89 f8                	mov    eax,edi
c001645a:	e9 51 fe ff ff       	jmp    c00162b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001645f:	90                   	nop

c0016460 <cleanerTaskFunction(void*)>:
c0016460:	53                   	push   ebx
c0016461:	83 ec 08             	sub    esp,0x8
c0016464:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016469:	83 e8 01             	sub    eax,0x1
c001646c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016471:	75 01                	jne    c0016474 <cleanerTaskFunction(void*)+0x14>
c0016473:	fb                   	sti    
c0016474:	fa                   	cli    
c0016475:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001647a:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016481:	8d 50 01             	lea    edx,[eax+0x1]
c0016484:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001648a:	0f 84 c4 00 00 00    	je     c0016554 <cleanerTaskFunction(void*)+0xf4>
c0016490:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016495:	85 c0                	test   eax,eax
c0016497:	75 03                	jne    c001649c <cleanerTaskFunction(void*)+0x3c>
c0016499:	fb                   	sti    
c001649a:	66 90                	xchg   ax,ax
c001649c:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c00164a3:	fa                   	cli    
c00164a4:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164aa:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164b0:	83 c2 01             	add    edx,0x1
c00164b3:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164b9:	83 c1 01             	add    ecx,0x1
c00164bc:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164c2:	fa                   	cli    
c00164c3:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00164c9:	83 c3 01             	add    ebx,0x1
c00164cc:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00164d2:	eb 28                	jmp    c00164fc <cleanerTaskFunction(void*)+0x9c>
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	68 cc 96 02 c0       	push   0xc00296cc
c00164dc:	e8 ab 93 00 00       	call   c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164e1:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00164e8:	89 c3                	mov    ebx,eax
c00164ea:	e8 a5 93 00 00       	call   c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164f2:	e8 95 fc ff ff       	call   c001618c <cleanupTerminatedTask(ThreadControlBlock*)>
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	66 90                	xchg   ax,ax
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	68 cc 96 02 c0       	push   0xc00296cc
c0016504:	e8 67 93 00 00       	call   c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	84 c0                	test   al,al
c001650e:	74 c4                	je     c00164d4 <cleanerTaskFunction(void*)+0x74>
c0016510:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016515:	83 e8 01             	sub    eax,0x1
c0016518:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001651d:	75 01                	jne    c0016520 <cleanerTaskFunction(void*)+0xc0>
c001651f:	fb                   	sti    
c0016520:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016525:	83 e8 01             	sub    eax,0x1
c0016528:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001652d:	0f 85 31 ff ff ff    	jne    c0016464 <cleanerTaskFunction(void*)+0x4>
c0016533:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016538:	85 c0                	test   eax,eax
c001653a:	0f 84 24 ff ff ff    	je     c0016464 <cleanerTaskFunction(void*)+0x4>
c0016540:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001654a:	e8 99 f6 ff ff       	call   c0015be8 <schedule()>
c001654f:	e9 10 ff ff ff       	jmp    c0016464 <cleanerTaskFunction(void*)+0x4>
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	6a 02                	push   0x2
c0016559:	e8 62 f8 ff ff       	call   c0015dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001655e:	83 c4 10             	add    esp,0x10
c0016561:	e9 36 ff ff ff       	jmp    c001649c <cleanerTaskFunction(void*)+0x3c>
c0016566:	66 90                	xchg   ax,ax

c0016568 <terminateTask(int)>:
c0016568:	83 ec 14             	sub    esp,0x14
c001656b:	fa                   	cli    
c001656c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016572:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016578:	83 c2 01             	add    edx,0x1
c001657b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016581:	83 c1 01             	add    ecx,0x1
c0016584:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001658a:	fa                   	cli    
c001658b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016590:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016594:	83 c0 01             	add    eax,0x1
c0016597:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001659c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165a1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00165a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165a9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165ac:	50                   	push   eax
c00165ad:	68 cc 96 02 c0       	push   0xc00296cc
c00165b2:	e8 99 93 00 00       	call   c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165bc:	83 c4 10             	add    esp,0x10
c00165bf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00165c6:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00165cb:	85 c0                	test   eax,eax
c00165cd:	74 65                	je     c0016634 <terminateTask(int)+0xcc>
c00165cf:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00165d6:	83 ec 0c             	sub    esp,0xc
c00165d9:	50                   	push   eax
c00165da:	e8 01 fb ff ff       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	66 90                	xchg   ax,ax
c00165e4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165e9:	83 e8 01             	sub    eax,0x1
c00165ec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165f1:	75 01                	jne    c00165f4 <terminateTask(int)+0x8c>
c00165f3:	fb                   	sti    
c00165f4:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165f9:	83 e8 01             	sub    eax,0x1
c00165fc:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016601:	75 09                	jne    c001660c <terminateTask(int)+0xa4>
c0016603:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001660a:	75 3c                	jne    c0016648 <terminateTask(int)+0xe0>
c001660c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016611:	83 e8 01             	sub    eax,0x1
c0016614:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016619:	75 01                	jne    c001661c <terminateTask(int)+0xb4>
c001661b:	fb                   	sti    
c001661c:	fa                   	cli    
c001661d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016622:	83 c0 01             	add    eax,0x1
c0016625:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001662a:	66 90                	xchg   ax,ax
c001662c:	e8 b7 f5 ff ff       	call   c0015be8 <schedule()>
c0016631:	eb d9                	jmp    c001660c <terminateTask(int)+0xa4>
c0016633:	90                   	nop
c0016634:	83 ec 0c             	sub    esp,0xc
c0016637:	68 3a 24 02 c0       	push   0xc002243a
c001663c:	e8 c9 42 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016641:	83 c4 10             	add    esp,0x10
c0016644:	eb 9e                	jmp    c00165e4 <terminateTask(int)+0x7c>
c0016646:	66 90                	xchg   ax,ax
c0016648:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016652:	eb d8                	jmp    c001662c <terminateTask(int)+0xc4>

c0016654 <Thr::terminateFromIRQ(int)>:
c0016654:	83 ec 18             	sub    esp,0x18
c0016657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001665b:	50                   	push   eax
c001665c:	e8 07 ff ff ff       	call   c0016568 <terminateTask(int)>
c0016661:	90                   	nop
c0016662:	66 90                	xchg   ax,ax

c0016664 <Semaphore::release()>:
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001666b:	fa                   	cli    
c001666c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016671:	83 c0 01             	add    eax,0x1
c0016674:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016679:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001667e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016681:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001668a:	85 c9                	test   ecx,ecx
c001668c:	74 42                	je     c00166d0 <Semaphore::release()+0x6c>
c001668e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016691:	83 ec 0c             	sub    esp,0xc
c0016694:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016697:	51                   	push   ecx
c0016698:	e8 43 fa ff ff       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c001669d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00166a2:	83 c4 10             	add    esp,0x10
c00166a5:	83 e8 01             	sub    eax,0x1
c00166a8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00166ad:	85 c0                	test   eax,eax
c00166af:	75 0b                	jne    c00166bc <Semaphore::release()+0x58>
c00166b1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00166b6:	85 c0                	test   eax,eax
c00166b8:	75 22                	jne    c00166dc <Semaphore::release()+0x78>
c00166ba:	66 90                	xchg   ax,ax
c00166bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166c1:	83 e8 01             	sub    eax,0x1
c00166c4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166c9:	75 01                	jne    c00166cc <Semaphore::release()+0x68>
c00166cb:	fb                   	sti    
c00166cc:	83 c4 0c             	add    esp,0xc
c00166cf:	c3                   	ret    
c00166d0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00166d3:	83 e9 01             	sub    ecx,0x1
c00166d6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00166d9:	eb cd                	jmp    c00166a8 <Semaphore::release()+0x44>
c00166db:	90                   	nop
c00166dc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00166e6:	e8 fd f4 ff ff       	call   c0015be8 <schedule()>
c00166eb:	eb cf                	jmp    c00166bc <Semaphore::release()+0x58>
c00166ed:	8d 76 00             	lea    esi,[esi+0x0]

c00166f0 <__static_initialization_and_destruction_0(int, int)>:
c00166f0:	83 ec 0c             	sub    esp,0xc
c00166f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00166f8:	0f 85 8e 00 00 00    	jne    c001678c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00166fe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016706:	0f 85 80 00 00 00    	jne    c001678c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	68 e4 96 02 c0       	push   0xc00296e4
c0016714:	e8 eb 94 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	83 ec 04             	sub    esp,0x4
c001671f:	68 10 31 02 c0       	push   0xc0023110
c0016724:	68 e4 96 02 c0       	push   0xc00296e4
c0016729:	68 b4 fb 01 c0       	push   0xc001fbb4
c001672e:	e8 89 40 ff ff       	call   c000a7bc <__cxa_atexit>
c0016733:	83 c4 10             	add    esp,0x10
c0016736:	83 ec 0c             	sub    esp,0xc
c0016739:	68 d8 96 02 c0       	push   0xc00296d8
c001673e:	e8 c1 94 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016743:	83 c4 10             	add    esp,0x10
c0016746:	83 ec 04             	sub    esp,0x4
c0016749:	68 10 31 02 c0       	push   0xc0023110
c001674e:	68 d8 96 02 c0       	push   0xc00296d8
c0016753:	68 b4 fb 01 c0       	push   0xc001fbb4
c0016758:	e8 5f 40 ff ff       	call   c000a7bc <__cxa_atexit>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	83 ec 0c             	sub    esp,0xc
c0016763:	68 cc 96 02 c0       	push   0xc00296cc
c0016768:	e8 97 94 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001676d:	83 c4 10             	add    esp,0x10
c0016770:	83 ec 04             	sub    esp,0x4
c0016773:	68 10 31 02 c0       	push   0xc0023110
c0016778:	68 cc 96 02 c0       	push   0xc00296cc
c001677d:	68 b4 fb 01 c0       	push   0xc001fbb4
c0016782:	e8 35 40 ff ff       	call   c000a7bc <__cxa_atexit>
c0016787:	83 c4 10             	add    esp,0x10
c001678a:	66 90                	xchg   ax,ax
c001678c:	90                   	nop
c001678d:	83 c4 0c             	add    esp,0xc
c0016790:	c3                   	ret    
c0016791:	8d 76 00             	lea    esi,[esi+0x0]

c0016794 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	83 ec 08             	sub    esp,0x8
c001679a:	68 ff ff 00 00       	push   0xffff
c001679f:	6a 01                	push   0x1
c00167a1:	e8 4a ff ff ff       	call   c00166f0 <__static_initialization_and_destruction_0(int, int)>
c00167a6:	83 c4 10             	add    esp,0x10
c00167a9:	83 c4 0c             	add    esp,0xc
c00167ac:	c3                   	ret    

c00167ad <Vm::inbv(unsigned short)>:
c00167ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167b1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167b6:	75 06                	jne    c00167be <Vm::inbv(unsigned short)+0x11>
c00167b8:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c00167bd:	c3                   	ret    
c00167be:	ec                   	in     al,dx
c00167bf:	c3                   	ret    

c00167c0 <Vm::outbv(unsigned short, unsigned char)>:
c00167c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167c8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167cd:	75 25                	jne    c00167f4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00167cf:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00167d5:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00167db:	8d 51 01             	lea    edx,[ecx+0x1]
c00167de:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00167e4:	83 fa 20             	cmp    edx,0x20
c00167e7:	75 0c                	jne    c00167f5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00167e9:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00167f3:	c3                   	ret    
c00167f4:	ee                   	out    dx,al
c00167f5:	c3                   	ret    

c00167f6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00167f6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00167fb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016800:	c1 e0 04             	shl    eax,0x4
c0016803:	01 d0                	add    eax,edx
c0016805:	c3                   	ret    

c0016806 <Vm::getSegment(unsigned int)>:
c0016806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001680a:	c1 e8 10             	shr    eax,0x10
c001680d:	c3                   	ret    

c001680e <Vm::getOffset(unsigned int)>:
c001680e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016812:	c3                   	ret    

c0016813 <Vm::mainloop2()>:
c0016813:	83 ec 18             	sub    esp,0x18
c0016816:	fa                   	cli    
c0016817:	6a 02                	push   0x2
c0016819:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001681f:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c0016826:	e8 95 f5 ff ff       	call   c0015dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001682b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016830:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016834:	52                   	push   edx
c0016835:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016839:	52                   	push   edx
c001683a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001683e:	52                   	push   edx
c001683f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016843:	50                   	push   eax
c0016844:	e8 c6 99 fe ff       	call   c000020f <goToVM86>
c0016849:	83 c4 2c             	add    esp,0x2c
c001684c:	c3                   	ret    

c001684d <Vm::mainVm8086Loop(void*)>:
c001684d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016852:	48                   	dec    eax
c0016853:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016858:	75 01                	jne    c001685b <Vm::mainVm8086Loop(void*)+0xe>
c001685a:	fb                   	sti    
c001685b:	eb b6                	jmp    c0016813 <Vm::mainloop2()>

c001685d <Vm::mainloop3(unsigned long)>:
c001685d:	83 ec 18             	sub    esp,0x18
c0016860:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016864:	fa                   	cli    
c0016865:	6a 02                	push   0x2
c0016867:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001686d:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016874:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016879:	e8 42 f5 ff ff       	call   c0015dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001687e:	83 c4 1c             	add    esp,0x1c
c0016881:	eb 90                	jmp    c0016813 <Vm::mainloop2()>

c0016883 <Vm::initialise8086()>:
c0016883:	83 ec 0c             	sub    esp,0xc
c0016886:	68 80 00 00 00       	push   0x80
c001688b:	6a 00                	push   0x0
c001688d:	68 4d 68 01 c0       	push   0xc001684d
c0016892:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016898:	e8 ff f0 ff ff       	call   c001599c <Process::createThread(void (*)(void*), void*, int)>
c001689d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00168a4:	68 00 01 00 00       	push   0x100
c00168a9:	6a 00                	push   0x0
c00168ab:	6a 00                	push   0x0
c00168ad:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c00168b2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00168b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00168bd:	e8 46 36 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168c2:	83 c4 2c             	add    esp,0x2c
c00168c5:	c3                   	ret    

c00168c6 <Vm::finish8086()>:
c00168c6:	53                   	push   ebx
c00168c7:	83 ec 08             	sub    esp,0x8
c00168ca:	fa                   	cli    
c00168cb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168d1:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00168d8:	75 15                	jne    c00168ef <Vm::finish8086()+0x29>
c00168da:	e8 09 f3 ff ff       	call   c0015be8 <schedule()>
c00168df:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168e4:	48                   	dec    eax
c00168e5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168ea:	75 de                	jne    c00168ca <Vm::finish8086()+0x4>
c00168ec:	fb                   	sti    
c00168ed:	eb db                	jmp    c00168ca <Vm::finish8086()+0x4>
c00168ef:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00168ff:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016905:	e8 d6 f7 ff ff       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c001690a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001690f:	83 c4 10             	add    esp,0x10
c0016912:	8d 50 ff             	lea    edx,[eax-0x1]
c0016915:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001691b:	85 d2                	test   edx,edx
c001691d:	75 01                	jne    c0016920 <Vm::finish8086()+0x5a>
c001691f:	fb                   	sti    
c0016920:	83 c4 08             	add    esp,0x8
c0016923:	89 d8                	mov    eax,ebx
c0016925:	5b                   	pop    ebx
c0016926:	c3                   	ret    

c0016927 <Vm::getOutput8086(unsigned char*)>:
c0016927:	57                   	push   edi
c0016928:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001692e:	56                   	push   esi
c001692f:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016934:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016938:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001693a:	5e                   	pop    esi
c001693b:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016940:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001694a:	5f                   	pop    edi
c001694b:	c3                   	ret    

c001694c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001694c:	55                   	push   ebp
c001694d:	57                   	push   edi
c001694e:	56                   	push   esi
c001694f:	53                   	push   ebx
c0016950:	83 ec 0c             	sub    esp,0xc
c0016953:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016957:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001695b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001695f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016963:	fa                   	cli    
c0016964:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001696a:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016971:	75 15                	jne    c0016988 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016973:	e8 70 f2 ff ff       	call   c0015be8 <schedule()>
c0016978:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001697d:	48                   	dec    eax
c001697e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016983:	75 de                	jne    c0016963 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016985:	fb                   	sti    
c0016986:	eb db                	jmp    c0016963 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016988:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016992:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016997:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001699b:	0f b7 ff             	movzx  edi,di
c001699e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00169a2:	0f b7 f6             	movzx  esi,si
c00169a5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169a9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00169ad:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169b1:	50                   	push   eax
c00169b2:	6a 20                	push   0x20
c00169b4:	6a 00                	push   0x0
c00169b6:	68 40 97 02 c0       	push   0xc0029740
c00169bb:	e8 30 9b fe ff       	call   c00004f0 <memset>
c00169c0:	5a                   	pop    edx
c00169c1:	59                   	pop    ecx
c00169c2:	57                   	push   edi
c00169c3:	56                   	push   esi
c00169c4:	e8 2d fe ff ff       	call   c00167f6 <Vm::realToLinear(unsigned short, unsigned short)>
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00169d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00169d4:	89 c7                	mov    edi,eax
c00169d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169d8:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c00169df:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169e4:	48                   	dec    eax
c00169e5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169ea:	75 01                	jne    c00169ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00169ec:	fb                   	sti    
c00169ed:	83 ec 0c             	sub    esp,0xc
c00169f0:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00169f6:	e8 e5 f6 ff ff       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c00169fb:	83 c4 1c             	add    esp,0x1c
c00169fe:	b0 01                	mov    al,0x1
c0016a00:	5b                   	pop    ebx
c0016a01:	5e                   	pop    esi
c0016a02:	5f                   	pop    edi
c0016a03:	5d                   	pop    ebp
c0016a04:	c3                   	ret    

c0016a05 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a05:	55                   	push   ebp
c0016a06:	57                   	push   edi
c0016a07:	56                   	push   esi
c0016a08:	53                   	push   ebx
c0016a09:	83 ec 34             	sub    esp,0x34
c0016a0c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016a10:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016a14:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016a18:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016a1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a24:	68 68 25 02 c0       	push   0xc0022568
c0016a29:	e8 dc 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016a2e:	83 c4 10             	add    esp,0x10
c0016a31:	fa                   	cli    
c0016a32:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016a38:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a3e:	84 db                	test   bl,bl
c0016a40:	75 15                	jne    c0016a57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016a42:	e8 a1 f1 ff ff       	call   c0015be8 <schedule()>
c0016a47:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a4c:	48                   	dec    eax
c0016a4d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a52:	75 dd                	jne    c0016a31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a54:	fb                   	sti    
c0016a55:	eb da                	jmp    c0016a31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a57:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a65:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a6a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016a6e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a72:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a76:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a7a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a7e:	50                   	push   eax
c0016a7f:	6a 20                	push   0x20
c0016a81:	6a 00                	push   0x0
c0016a83:	68 40 97 02 c0       	push   0xc0029740
c0016a88:	e8 63 9a fe ff       	call   c00004f0 <memset>
c0016a8d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016a94:	e8 3a 10 ff ff       	call   c0007ad3 <malloc>
c0016a99:	83 c4 0c             	add    esp,0xc
c0016a9c:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016aa2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016aa6:	89 c5                	mov    ebp,eax
c0016aa8:	50                   	push   eax
c0016aa9:	e8 74 4d ff ff       	call   c000b822 <File::File(char const*, Process*)>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	85 ed                	test   ebp,ebp
c0016ab3:	75 0a                	jne    c0016abf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016ab5:	83 ec 0c             	sub    esp,0xc
c0016ab8:	68 8a 25 02 c0       	push   0xc002258a
c0016abd:	eb 2b                	jmp    c0016aea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016abf:	50                   	push   eax
c0016ac0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016ac4:	50                   	push   eax
c0016ac5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ac9:	50                   	push   eax
c0016aca:	55                   	push   ebp
c0016acb:	e8 1c 51 ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c0016ad0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016ad4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016ad8:	83 c4 10             	add    esp,0x10
c0016adb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016ae0:	74 27                	je     c0016b09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016ae2:	83 ec 0c             	sub    esp,0xc
c0016ae5:	68 9e 25 02 c0       	push   0xc002259e
c0016aea:	e8 fa a7 ff ff       	call   c00112e9 <KePanic(char const*)>
c0016aef:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016af4:	83 c4 10             	add    esp,0x10
c0016af7:	48                   	dec    eax
c0016af8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016afd:	85 c0                	test   eax,eax
c0016aff:	75 01                	jne    c0016b02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b01:	fb                   	sti    
c0016b02:	31 db                	xor    ebx,ebx
c0016b04:	e9 90 00 00 00       	jmp    c0016b99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b09:	51                   	push   ecx
c0016b0a:	51                   	push   ecx
c0016b0b:	6a 01                	push   0x1
c0016b0d:	55                   	push   ebp
c0016b0e:	e8 d7 4d ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c0016b13:	83 c4 10             	add    esp,0x10
c0016b16:	85 c0                	test   eax,eax
c0016b18:	74 26                	je     c0016b40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016b1a:	83 ec 0c             	sub    esp,0xc
c0016b1d:	68 b7 25 02 c0       	push   0xc00225b7
c0016b22:	e8 c2 a7 ff ff       	call   c00112e9 <KePanic(char const*)>
c0016b27:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b2c:	83 c4 10             	add    esp,0x10
c0016b2f:	48                   	dec    eax
c0016b30:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b35:	85 c0                	test   eax,eax
c0016b37:	75 c9                	jne    c0016b02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b39:	fb                   	sti    
c0016b3a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016b3e:	eb 59                	jmp    c0016b99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b40:	50                   	push   eax
c0016b41:	0f b7 ff             	movzx  edi,di
c0016b44:	50                   	push   eax
c0016b45:	0f b7 f6             	movzx  esi,si
c0016b48:	57                   	push   edi
c0016b49:	56                   	push   esi
c0016b4a:	e8 a7 fc ff ff       	call   c00167f6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b4f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016b52:	5a                   	pop    edx
c0016b53:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016b57:	56                   	push   esi
c0016b58:	50                   	push   eax
c0016b59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b61:	55                   	push   ebp
c0016b62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b65:	83 c4 14             	add    esp,0x14
c0016b68:	55                   	push   ebp
c0016b69:	e8 da 4d ff ff       	call   c000b948 <File::close()>
c0016b6e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b73:	83 c4 10             	add    esp,0x10
c0016b76:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b7d:	48                   	dec    eax
c0016b7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b83:	85 c0                	test   eax,eax
c0016b85:	75 01                	jne    c0016b88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016b87:	fb                   	sti    
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b91:	e8 4a f5 ff ff       	call   c00160e0 <unblockTask(ThreadControlBlock*)>
c0016b96:	83 c4 10             	add    esp,0x10
c0016b99:	83 c4 2c             	add    esp,0x2c
c0016b9c:	88 d8                	mov    al,bl
c0016b9e:	5b                   	pop    ebx
c0016b9f:	5e                   	pop    esi
c0016ba0:	5f                   	pop    edi
c0016ba1:	5d                   	pop    ebp
c0016ba2:	c3                   	ret    

c0016ba3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016ba3:	57                   	push   edi
c0016ba4:	56                   	push   esi
c0016ba5:	53                   	push   ebx
c0016ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016baa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016bb2:	83 e8 06             	sub    eax,0x6
c0016bb5:	0f b7 c0             	movzx  eax,ax
c0016bb8:	50                   	push   eax
c0016bb9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016bbe:	50                   	push   eax
c0016bbf:	e8 32 fc ff ff       	call   c00167f6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016bc4:	5a                   	pop    edx
c0016bc5:	59                   	pop    ecx
c0016bc6:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016bc9:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016bcc:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016bcf:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016bd5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016bd8:	8d 51 02             	lea    edx,[ecx+0x2]
c0016bdb:	66 89 10             	mov    WORD PTR [eax],dx
c0016bde:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016be2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016be6:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016bea:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016bed:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016bf1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bf7:	89 f1                	mov    ecx,esi
c0016bf9:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016bfd:	89 f2                	mov    edx,esi
c0016bff:	0f b6 d6             	movzx  edx,dh
c0016c02:	0f b6 f1             	movzx  esi,cl
c0016c05:	74 0a                	je     c0016c11 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016c07:	c1 e2 08             	shl    edx,0x8
c0016c0a:	09 f2                	or     edx,esi
c0016c0c:	80 ce 02             	or     dh,0x2
c0016c0f:	eb 08                	jmp    c0016c19 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016c11:	c1 e2 08             	shl    edx,0x8
c0016c14:	09 f2                	or     edx,esi
c0016c16:	80 e6 fd             	and    dh,0xfd
c0016c19:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c22:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016c26:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016c2e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016c31:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016c39:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016c3c:	5b                   	pop    ebx
c0016c3d:	5e                   	pop    esi
c0016c3e:	5f                   	pop    edi
c0016c3f:	c3                   	ret    

c0016c40 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016c40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c45:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c4a:	c1 e0 04             	shl    eax,0x4
c0016c4d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016c50:	c3                   	ret    

c0016c51 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016c51:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c56:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c5b:	c1 e0 04             	shl    eax,0x4
c0016c5e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016c62:	c3                   	ret    

c0016c63 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016c63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c68:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c6d:	c1 e0 04             	shl    eax,0x4
c0016c70:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016c73:	c3                   	ret    

c0016c74 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016c74:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c79:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c7e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016c82:	c1 e0 04             	shl    eax,0x4
c0016c85:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016c88:	c3                   	ret    

c0016c89 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016c89:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c8e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c97:	c1 e0 04             	shl    eax,0x4
c0016c9a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016c9e:	c3                   	ret    

c0016c9f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016c9f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ca4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ca9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cad:	c1 e0 04             	shl    eax,0x4
c0016cb0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016cb3:	c3                   	ret    

c0016cb4 <Vm::faultHandler(regs*)>:
c0016cb4:	55                   	push   ebp
c0016cb5:	57                   	push   edi
c0016cb6:	56                   	push   esi
c0016cb7:	53                   	push   ebx
c0016cb8:	83 ec 2c             	sub    esp,0x2c
c0016cbb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016cbf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016cc2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016cc6:	0f b7 f8             	movzx  edi,ax
c0016cc9:	0f b7 c0             	movzx  eax,ax
c0016ccc:	52                   	push   edx
c0016ccd:	50                   	push   eax
c0016cce:	e8 23 fb ff ff       	call   c00167f6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016cd3:	5a                   	pop    edx
c0016cd4:	59                   	pop    ecx
c0016cd5:	89 c1                	mov    ecx,eax
c0016cd7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016cda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cde:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016ce3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ce7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cee:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016cf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016cff:	e8 f2 fa ff ff       	call   c00167f6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d04:	5e                   	pop    esi
c0016d05:	be 06 00 00 00       	mov    esi,0x6
c0016d0a:	5d                   	pop    ebp
c0016d0b:	31 ed                	xor    ebp,ebp
c0016d0d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016d12:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016d15:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016d1b:	0f 84 74 02 00 00    	je     c0016f95 <Vm::faultHandler(regs*)+0x2e1>
c0016d21:	0f 87 94 00 00 00    	ja     c0016dbb <Vm::faultHandler(regs*)+0x107>
c0016d27:	83 fa 66             	cmp    edx,0x66
c0016d2a:	0f 84 e2 01 00 00    	je     c0016f12 <Vm::faultHandler(regs*)+0x25e>
c0016d30:	77 47                	ja     c0016d79 <Vm::faultHandler(regs*)+0xc5>
c0016d32:	83 fa 36             	cmp    edx,0x36
c0016d35:	0f 84 ca 01 00 00    	je     c0016f05 <Vm::faultHandler(regs*)+0x251>
c0016d3b:	77 1a                	ja     c0016d57 <Vm::faultHandler(regs*)+0xa3>
c0016d3d:	83 fa 26             	cmp    edx,0x26
c0016d40:	0f 84 98 01 00 00    	je     c0016ede <Vm::faultHandler(regs*)+0x22a>
c0016d46:	83 fa 2e             	cmp    edx,0x2e
c0016d49:	0f 85 27 06 00 00    	jne    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016d4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d52:	31 f6                	xor    esi,esi
c0016d54:	41                   	inc    ecx
c0016d55:	eb bb                	jmp    c0016d12 <Vm::faultHandler(regs*)+0x5e>
c0016d57:	83 fa 64             	cmp    edx,0x64
c0016d5a:	0f 84 8b 01 00 00    	je     c0016eeb <Vm::faultHandler(regs*)+0x237>
c0016d60:	0f 87 92 01 00 00    	ja     c0016ef8 <Vm::faultHandler(regs*)+0x244>
c0016d66:	83 fa 3e             	cmp    edx,0x3e
c0016d69:	0f 85 07 06 00 00    	jne    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016d6f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d72:	be 01 00 00 00       	mov    esi,0x1
c0016d77:	eb db                	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016d79:	83 fa 6d             	cmp    edx,0x6d
c0016d7c:	0f 84 34 03 00 00    	je     c00170b6 <Vm::faultHandler(regs*)+0x402>
c0016d82:	77 17                	ja     c0016d9b <Vm::faultHandler(regs*)+0xe7>
c0016d84:	83 fa 67             	cmp    edx,0x67
c0016d87:	0f 84 92 01 00 00    	je     c0016f1f <Vm::faultHandler(regs*)+0x26b>
c0016d8d:	83 fa 6c             	cmp    edx,0x6c
c0016d90:	0f 84 b1 02 00 00    	je     c0017047 <Vm::faultHandler(regs*)+0x393>
c0016d96:	e9 db 05 00 00       	jmp    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016d9b:	83 fa 6f             	cmp    edx,0x6f
c0016d9e:	0f 84 40 04 00 00    	je     c00171e4 <Vm::faultHandler(regs*)+0x530>
c0016da4:	0f 82 a2 03 00 00    	jb     c001714c <Vm::faultHandler(regs*)+0x498>
c0016daa:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016db0:	0f 84 76 01 00 00    	je     c0016f2c <Vm::faultHandler(regs*)+0x278>
c0016db6:	e9 bb 05 00 00       	jmp    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016dbb:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016dc1:	0f 84 57 05 00 00    	je     c001731e <Vm::faultHandler(regs*)+0x66a>
c0016dc7:	0f 87 a9 00 00 00    	ja     c0016e76 <Vm::faultHandler(regs*)+0x1c2>
c0016dcd:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016dd3:	0f 84 d6 04 00 00    	je     c00172af <Vm::faultHandler(regs*)+0x5fb>
c0016dd9:	77 78                	ja     c0016e53 <Vm::faultHandler(regs*)+0x19f>
c0016ddb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016de1:	0f 84 0e 02 00 00    	je     c0016ff5 <Vm::faultHandler(regs*)+0x341>
c0016de7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016ded:	0f 85 83 05 00 00    	jne    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016df3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016df7:	89 d1                	mov    ecx,edx
c0016df9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016dfc:	c1 e1 08             	shl    ecx,0x8
c0016dff:	09 ca                	or     edx,ecx
c0016e01:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016e04:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016e08:	89 d1                	mov    ecx,edx
c0016e0a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016e0e:	c1 e1 08             	shl    ecx,0x8
c0016e11:	09 ca                	or     edx,ecx
c0016e13:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016e16:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016e1a:	89 d1                	mov    ecx,edx
c0016e1c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016e20:	c1 e1 08             	shl    ecx,0x8
c0016e23:	09 ca                	or     edx,ecx
c0016e25:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e2b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e2e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016e32:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e38:	d1 e8                	shr    eax,1
c0016e3a:	83 e0 01             	and    eax,0x1
c0016e3d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e40:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e43:	83 c0 06             	add    eax,0x6
c0016e46:	25 ff ff 00 00       	and    eax,0xffff
c0016e4b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e4e:	e9 1f 05 00 00       	jmp    c0017372 <Vm::faultHandler(regs*)+0x6be>
c0016e53:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016e59:	0f 84 95 04 00 00    	je     c00172f4 <Vm::faultHandler(regs*)+0x640>
c0016e5f:	0f 82 66 04 00 00    	jb     c00172cb <Vm::faultHandler(regs*)+0x617>
c0016e65:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016e6b:	0f 84 9a 04 00 00    	je     c001730b <Vm::faultHandler(regs*)+0x657>
c0016e71:	e9 00 05 00 00       	jmp    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016e76:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016e7c:	0f 84 dd 04 00 00    	je     c001735f <Vm::faultHandler(regs*)+0x6ab>
c0016e82:	77 2e                	ja     c0016eb2 <Vm::faultHandler(regs*)+0x1fe>
c0016e84:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016e8a:	0f 84 aa 04 00 00    	je     c001733a <Vm::faultHandler(regs*)+0x686>
c0016e90:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016e96:	0f 85 da 04 00 00    	jne    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016e9c:	50                   	push   eax
c0016e9d:	50                   	push   eax
c0016e9e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016ea2:	50                   	push   eax
c0016ea3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ea7:	50                   	push   eax
c0016ea8:	e8 13 f9 ff ff       	call   c00167c0 <Vm::outbv(unsigned short, unsigned char)>
c0016ead:	e9 a5 04 00 00       	jmp    c0017357 <Vm::faultHandler(regs*)+0x6a3>
c0016eb2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016eb8:	0f 84 6d 01 00 00    	je     c001702b <Vm::faultHandler(regs*)+0x377>
c0016ebe:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016ec4:	0f 84 6f 01 00 00    	je     c0017039 <Vm::faultHandler(regs*)+0x385>
c0016eca:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016ed0:	0f 85 a0 04 00 00    	jne    c0017376 <Vm::faultHandler(regs*)+0x6c2>
c0016ed6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ed9:	e9 76 fe ff ff       	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016ede:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ee1:	be 02 00 00 00       	mov    esi,0x2
c0016ee6:	e9 69 fe ff ff       	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016eeb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016eee:	be 03 00 00 00       	mov    esi,0x3
c0016ef3:	e9 5c fe ff ff       	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016ef8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016efb:	be 04 00 00 00       	mov    esi,0x4
c0016f00:	e9 4f fe ff ff       	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016f05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f08:	be 05 00 00 00       	mov    esi,0x5
c0016f0d:	e9 42 fe ff ff       	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016f12:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f15:	bd 01 00 00 00       	mov    ebp,0x1
c0016f1a:	e9 35 fe ff ff       	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016f1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f22:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016f27:	e9 28 fe ff ff       	jmp    c0016d54 <Vm::faultHandler(regs*)+0xa0>
c0016f2c:	83 e5 01             	and    ebp,0x1
c0016f2f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f36:	74 30                	je     c0016f68 <Vm::faultHandler(regs*)+0x2b4>
c0016f38:	83 e9 04             	sub    ecx,0x4
c0016f3b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f41:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f47:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f4a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f4d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f53:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f57:	0f 84 12 04 00 00    	je     c001736f <Vm::faultHandler(regs*)+0x6bb>
c0016f5d:	80 ce 02             	or     dh,0x2
c0016f60:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f63:	e9 07 04 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c0016f68:	83 e9 02             	sub    ecx,0x2
c0016f6b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f71:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f74:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f78:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f7e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f82:	74 05                	je     c0016f89 <Vm::faultHandler(regs*)+0x2d5>
c0016f84:	80 ce 02             	or     dh,0x2
c0016f87:	eb 03                	jmp    c0016f8c <Vm::faultHandler(regs*)+0x2d8>
c0016f89:	80 e6 fd             	and    dh,0xfd
c0016f8c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f90:	e9 da 03 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c0016f95:	83 e5 01             	and    ebp,0x1
c0016f98:	74 2a                	je     c0016fc4 <Vm::faultHandler(regs*)+0x310>
c0016f9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f9c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016fa2:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fa8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fb3:	c1 e8 09             	shr    eax,0x9
c0016fb6:	83 e0 01             	and    eax,0x1
c0016fb9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fbc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fbf:	83 c0 04             	add    eax,0x4
c0016fc2:	eb 24                	jmp    c0016fe8 <Vm::faultHandler(regs*)+0x334>
c0016fc4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016fc7:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fcd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fd0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016fd3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fd9:	c1 e8 09             	shr    eax,0x9
c0016fdc:	83 e0 01             	and    eax,0x1
c0016fdf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fe2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fe5:	83 c0 02             	add    eax,0x2
c0016fe8:	25 ff ff 00 00       	and    eax,0xffff
c0016fed:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ff0:	e9 7a 03 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c0016ff5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ff9:	3d ee 00 00 00       	cmp    eax,0xee
c0016ffe:	75 10                	jne    c0017010 <Vm::faultHandler(regs*)+0x35c>
c0017000:	83 ec 0c             	sub    esp,0xc
c0017003:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017006:	e8 52 f8 ff ff       	call   c001685d <Vm::mainloop3(unsigned long)>
c001700b:	e9 4a 03 00 00       	jmp    c001735a <Vm::faultHandler(regs*)+0x6a6>
c0017010:	83 ec 0c             	sub    esp,0xc
c0017013:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017017:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001701b:	51                   	push   ecx
c001701c:	50                   	push   eax
c001701d:	53                   	push   ebx
c001701e:	e8 80 fb ff ff       	call   c0016ba3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017023:	83 c4 20             	add    esp,0x20
c0017026:	e9 47 03 00 00       	jmp    c0017372 <Vm::faultHandler(regs*)+0x6be>
c001702b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017030:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017034:	e9 36 03 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c0017039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001703e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017042:	e9 28 03 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c0017047:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001704c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001704f:	74 2b                	je     c001707c <Vm::faultHandler(regs*)+0x3c8>
c0017051:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017058:	76 22                	jbe    c001707c <Vm::faultHandler(regs*)+0x3c8>
c001705a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001705e:	50                   	push   eax
c001705f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017063:	50                   	push   eax
c0017064:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017068:	50                   	push   eax
c0017069:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001706d:	50                   	push   eax
c001706e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017072:	50                   	push   eax
c0017073:	6a 6c                	push   0x6c
c0017075:	6a 6c                	push   0x6c
c0017077:	e9 c0 01 00 00       	jmp    c001723c <Vm::faultHandler(regs*)+0x588>
c001707c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017080:	83 ec 0c             	sub    esp,0xc
c0017083:	0f b7 f6             	movzx  esi,si
c0017086:	50                   	push   eax
c0017087:	e8 21 f7 ff ff       	call   c00167ad <Vm::inbv(unsigned short)>
c001708c:	83 c4 0c             	add    esp,0xc
c001708f:	0f b6 c0             	movzx  eax,al
c0017092:	50                   	push   eax
c0017093:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017097:	50                   	push   eax
c0017098:	56                   	push   esi
c0017099:	e8 d6 fb ff ff       	call   c0016c74 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001709e:	83 c4 10             	add    esp,0x10
c00170a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170a8:	74 03                	je     c00170ad <Vm::faultHandler(regs*)+0x3f9>
c00170aa:	48                   	dec    eax
c00170ab:	eb 01                	jmp    c00170ae <Vm::faultHandler(regs*)+0x3fa>
c00170ad:	40                   	inc    eax
c00170ae:	0f b7 c0             	movzx  eax,ax
c00170b1:	e9 8e 00 00 00       	jmp    c0017144 <Vm::faultHandler(regs*)+0x490>
c00170b6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170bb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170c1:	74 29                	je     c00170ec <Vm::faultHandler(regs*)+0x438>
c00170c3:	3d ff ff 00 00       	cmp    eax,0xffff
c00170c8:	76 22                	jbe    c00170ec <Vm::faultHandler(regs*)+0x438>
c00170ca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170ce:	50                   	push   eax
c00170cf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170d3:	50                   	push   eax
c00170d4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170d8:	50                   	push   eax
c00170d9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170dd:	50                   	push   eax
c00170de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170e2:	50                   	push   eax
c00170e3:	6a 6d                	push   0x6d
c00170e5:	6a 6d                	push   0x6d
c00170e7:	e9 50 01 00 00       	jmp    c001723c <Vm::faultHandler(regs*)+0x588>
c00170ec:	83 e5 01             	and    ebp,0x1
c00170ef:	0f b7 c8             	movzx  ecx,ax
c00170f2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00170f5:	0f b7 f6             	movzx  esi,si
c00170f8:	74 1e                	je     c0017118 <Vm::faultHandler(regs*)+0x464>
c00170fa:	ed                   	in     eax,dx
c00170fb:	55                   	push   ebp
c00170fc:	50                   	push   eax
c00170fd:	51                   	push   ecx
c00170fe:	56                   	push   esi
c00170ff:	e8 9b fb ff ff       	call   c0016c9f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017104:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	8d 50 04             	lea    edx,[eax+0x4]
c001710d:	83 e8 04             	sub    eax,0x4
c0017110:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017116:	eb 20                	jmp    c0017138 <Vm::faultHandler(regs*)+0x484>
c0017118:	66 ed                	in     ax,dx
c001711a:	57                   	push   edi
c001711b:	0f b7 c0             	movzx  eax,ax
c001711e:	50                   	push   eax
c001711f:	51                   	push   ecx
c0017120:	56                   	push   esi
c0017121:	e8 63 fb ff ff       	call   c0016c89 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017126:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	8d 50 02             	lea    edx,[eax+0x2]
c001712f:	83 e8 02             	sub    eax,0x2
c0017132:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017138:	25 ff ff 00 00       	and    eax,0xffff
c001713d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017141:	0f 44 c2             	cmove  eax,edx
c0017144:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017147:	e9 23 02 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c001714c:	8d 46 ff             	lea    eax,[esi-0x1]
c001714f:	0f b6 f0             	movzx  esi,al
c0017152:	83 fe 05             	cmp    esi,0x5
c0017155:	77 23                	ja     c001717a <Vm::faultHandler(regs*)+0x4c6>
c0017157:	ff 24 b5 2c 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9d4]
c001715e:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017163:	eb 15                	jmp    c001717a <Vm::faultHandler(regs*)+0x4c6>
c0017165:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017169:	eb 0f                	jmp    c001717a <Vm::faultHandler(regs*)+0x4c6>
c001716b:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001716f:	eb 09                	jmp    c001717a <Vm::faultHandler(regs*)+0x4c6>
c0017171:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017175:	eb 03                	jmp    c001717a <Vm::faultHandler(regs*)+0x4c6>
c0017177:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001717a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001717f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017182:	74 29                	je     c00171ad <Vm::faultHandler(regs*)+0x4f9>
c0017184:	3d ff ff 00 00       	cmp    eax,0xffff
c0017189:	76 22                	jbe    c00171ad <Vm::faultHandler(regs*)+0x4f9>
c001718b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001718f:	50                   	push   eax
c0017190:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017194:	50                   	push   eax
c0017195:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017199:	50                   	push   eax
c001719a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001719e:	50                   	push   eax
c001719f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171a3:	50                   	push   eax
c00171a4:	6a 6e                	push   0x6e
c00171a6:	6a 6e                	push   0x6e
c00171a8:	e9 8f 00 00 00       	jmp    c001723c <Vm::faultHandler(regs*)+0x588>
c00171ad:	52                   	push   edx
c00171ae:	0f b7 c0             	movzx  eax,ax
c00171b1:	52                   	push   edx
c00171b2:	50                   	push   eax
c00171b3:	57                   	push   edi
c00171b4:	e8 87 fa ff ff       	call   c0016c40 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00171b9:	59                   	pop    ecx
c00171ba:	5e                   	pop    esi
c00171bb:	0f b6 c0             	movzx  eax,al
c00171be:	50                   	push   eax
c00171bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171c3:	50                   	push   eax
c00171c4:	e8 f7 f5 ff ff       	call   c00167c0 <Vm::outbv(unsigned short, unsigned char)>
c00171c9:	83 c4 10             	add    esp,0x10
c00171cc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00171cf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171d3:	74 03                	je     c00171d8 <Vm::faultHandler(regs*)+0x524>
c00171d5:	48                   	dec    eax
c00171d6:	eb 01                	jmp    c00171d9 <Vm::faultHandler(regs*)+0x525>
c00171d8:	40                   	inc    eax
c00171d9:	0f b7 c0             	movzx  eax,ax
c00171dc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00171df:	e9 8b 01 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c00171e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00171e7:	0f b6 f0             	movzx  esi,al
c00171ea:	83 fe 05             	cmp    esi,0x5
c00171ed:	77 1e                	ja     c001720d <Vm::faultHandler(regs*)+0x559>
c00171ef:	ff 24 b5 44 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9bc]
c00171f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171fa:	eb 11                	jmp    c001720d <Vm::faultHandler(regs*)+0x559>
c00171fc:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00171ff:	eb 0c                	jmp    c001720d <Vm::faultHandler(regs*)+0x559>
c0017201:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017204:	eb 07                	jmp    c001720d <Vm::faultHandler(regs*)+0x559>
c0017206:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017209:	eb 02                	jmp    c001720d <Vm::faultHandler(regs*)+0x559>
c001720b:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001720d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017212:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017215:	74 37                	je     c001724e <Vm::faultHandler(regs*)+0x59a>
c0017217:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001721d:	76 2f                	jbe    c001724e <Vm::faultHandler(regs*)+0x59a>
c001721f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017223:	50                   	push   eax
c0017224:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017228:	50                   	push   eax
c0017229:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001722d:	50                   	push   eax
c001722e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017232:	50                   	push   eax
c0017233:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017237:	50                   	push   eax
c0017238:	6a 6f                	push   0x6f
c001723a:	6a 6f                	push   0x6f
c001723c:	68 d0 25 02 c0       	push   0xc00225d0
c0017241:	e8 c4 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017246:	83 c4 20             	add    esp,0x20
c0017249:	e9 86 01 00 00       	jmp    c00173d4 <Vm::faultHandler(regs*)+0x720>
c001724e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017251:	0f b7 d7             	movzx  edx,di
c0017254:	0f b7 c6             	movzx  eax,si
c0017257:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001725a:	81 e1 00 04 00 00    	and    ecx,0x400
c0017260:	83 e5 01             	and    ebp,0x1
c0017263:	74 1c                	je     c0017281 <Vm::faultHandler(regs*)+0x5cd>
c0017265:	55                   	push   ebp
c0017266:	55                   	push   ebp
c0017267:	50                   	push   eax
c0017268:	52                   	push   edx
c0017269:	e8 f5 f9 ff ff       	call   c0016c63 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001726e:	83 c4 10             	add    esp,0x10
c0017271:	89 fa                	mov    edx,edi
c0017273:	ef                   	out    dx,eax
c0017274:	8d 46 04             	lea    eax,[esi+0x4]
c0017277:	83 ee 04             	sub    esi,0x4
c001727a:	25 ff ff 00 00       	and    eax,0xffff
c001727f:	eb 1b                	jmp    c001729c <Vm::faultHandler(regs*)+0x5e8>
c0017281:	55                   	push   ebp
c0017282:	55                   	push   ebp
c0017283:	50                   	push   eax
c0017284:	52                   	push   edx
c0017285:	e8 c7 f9 ff ff       	call   c0016c51 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001728a:	83 c4 10             	add    esp,0x10
c001728d:	89 fa                	mov    edx,edi
c001728f:	66 ef                	out    dx,ax
c0017291:	8d 46 02             	lea    eax,[esi+0x2]
c0017294:	83 ee 02             	sub    esi,0x2
c0017297:	25 ff ff 00 00       	and    eax,0xffff
c001729c:	81 e6 ff ff 00 00    	and    esi,0xffff
c00172a2:	85 c9                	test   ecx,ecx
c00172a4:	0f 44 f0             	cmove  esi,eax
c00172a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00172aa:	e9 c0 00 00 00       	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c00172af:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00172b6:	83 ec 0c             	sub    esp,0xc
c00172b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172bd:	50                   	push   eax
c00172be:	e8 ea f4 ff ff       	call   c00167ad <Vm::inbv(unsigned short)>
c00172c3:	0f b6 c0             	movzx  eax,al
c00172c6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00172c9:	eb 3a                	jmp    c0017305 <Vm::faultHandler(regs*)+0x651>
c00172cb:	83 e5 01             	and    ebp,0x1
c00172ce:	74 07                	je     c00172d7 <Vm::faultHandler(regs*)+0x623>
c00172d0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172d4:	ed                   	in     eax,dx
c00172d5:	eb 14                	jmp    c00172eb <Vm::faultHandler(regs*)+0x637>
c00172d7:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00172da:	66 31 f6             	xor    si,si
c00172dd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00172e0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172e4:	66 ed                	in     ax,dx
c00172e6:	0f b7 c0             	movzx  eax,ax
c00172e9:	09 f0                	or     eax,esi
c00172eb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172ee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00172f2:	eb 7e                	jmp    c0017372 <Vm::faultHandler(regs*)+0x6be>
c00172f4:	52                   	push   edx
c00172f5:	52                   	push   edx
c00172f6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00172fa:	50                   	push   eax
c00172fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172ff:	50                   	push   eax
c0017300:	e8 bb f4 ff ff       	call   c00167c0 <Vm::outbv(unsigned short, unsigned char)>
c0017305:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017309:	eb 4f                	jmp    c001735a <Vm::faultHandler(regs*)+0x6a6>
c001730b:	83 e5 01             	and    ebp,0x1
c001730e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017311:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017315:	74 03                	je     c001731a <Vm::faultHandler(regs*)+0x666>
c0017317:	ef                   	out    dx,eax
c0017318:	eb d4                	jmp    c00172ee <Vm::faultHandler(regs*)+0x63a>
c001731a:	66 ef                	out    dx,ax
c001731c:	eb d0                	jmp    c00172ee <Vm::faultHandler(regs*)+0x63a>
c001731e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017322:	83 ec 0c             	sub    esp,0xc
c0017325:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001732c:	50                   	push   eax
c001732d:	e8 7b f4 ff ff       	call   c00167ad <Vm::inbv(unsigned short)>
c0017332:	0f b6 c0             	movzx  eax,al
c0017335:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017338:	eb 1d                	jmp    c0017357 <Vm::faultHandler(regs*)+0x6a3>
c001733a:	83 e5 01             	and    ebp,0x1
c001733d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017340:	74 03                	je     c0017345 <Vm::faultHandler(regs*)+0x691>
c0017342:	ed                   	in     eax,dx
c0017343:	eb 0d                	jmp    c0017352 <Vm::faultHandler(regs*)+0x69e>
c0017345:	66 ed                	in     ax,dx
c0017347:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001734a:	0f b7 c0             	movzx  eax,ax
c001734d:	66 31 d2             	xor    dx,dx
c0017350:	09 d0                	or     eax,edx
c0017352:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017355:	eb 18                	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c0017357:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	eb 13                	jmp    c0017372 <Vm::faultHandler(regs*)+0x6be>
c001735f:	83 e5 01             	and    ebp,0x1
c0017362:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017365:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017368:	74 03                	je     c001736d <Vm::faultHandler(regs*)+0x6b9>
c001736a:	ef                   	out    dx,eax
c001736b:	eb 02                	jmp    c001736f <Vm::faultHandler(regs*)+0x6bb>
c001736d:	66 ef                	out    dx,ax
c001736f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017372:	b0 01                	mov    al,0x1
c0017374:	eb 60                	jmp    c00173d6 <Vm::faultHandler(regs*)+0x722>
c0017376:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001737a:	50                   	push   eax
c001737b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001737f:	50                   	push   eax
c0017380:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017384:	50                   	push   eax
c0017385:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017389:	50                   	push   eax
c001738a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001738e:	50                   	push   eax
c001738f:	52                   	push   edx
c0017390:	52                   	push   edx
c0017391:	68 fd 25 02 c0       	push   0xc00225fd
c0017396:	e8 6f 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001739b:	83 c4 20             	add    esp,0x20
c001739e:	83 ec 0c             	sub    esp,0xc
c00173a1:	6a 60                	push   0x60
c00173a3:	e8 05 f4 ff ff       	call   c00167ad <Vm::inbv(unsigned short)>
c00173a8:	83 c4 10             	add    esp,0x10
c00173ab:	0f b6 d0             	movzx  edx,al
c00173ae:	83 fa 1c             	cmp    edx,0x1c
c00173b1:	74 05                	je     c00173b8 <Vm::faultHandler(regs*)+0x704>
c00173b3:	83 fa 5a             	cmp    edx,0x5a
c00173b6:	75 e6                	jne    c001739e <Vm::faultHandler(regs*)+0x6ea>
c00173b8:	0f b6 c0             	movzx  eax,al
c00173bb:	83 f8 1c             	cmp    eax,0x1c
c00173be:	74 05                	je     c00173c5 <Vm::faultHandler(regs*)+0x711>
c00173c0:	83 f8 5a             	cmp    eax,0x5a
c00173c3:	75 0f                	jne    c00173d4 <Vm::faultHandler(regs*)+0x720>
c00173c5:	83 ec 0c             	sub    esp,0xc
c00173c8:	6a 60                	push   0x60
c00173ca:	e8 de f3 ff ff       	call   c00167ad <Vm::inbv(unsigned short)>
c00173cf:	83 c4 10             	add    esp,0x10
c00173d2:	eb e4                	jmp    c00173b8 <Vm::faultHandler(regs*)+0x704>
c00173d4:	31 c0                	xor    eax,eax
c00173d6:	83 c4 2c             	add    esp,0x2c
c00173d9:	5b                   	pop    ebx
c00173da:	5e                   	pop    esi
c00173db:	5f                   	pop    edi
c00173dc:	5d                   	pop    ebp
c00173dd:	c3                   	ret    

c00173de <noCopro(unsigned long)>:
c00173de:	c3                   	ret    

c00173df <nmiHandler(regs*, void*)>:
c00173df:	83 ec 0c             	sub    esp,0xc
c00173e2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00173e7:	83 ec 0c             	sub    esp,0xc
c00173ea:	50                   	push   eax
c00173eb:	e8 e6 fe fe ff       	call   c00072d6 <Computer::handleNMI()>
c00173f0:	83 c4 10             	add    esp,0x10
c00173f3:	90                   	nop
c00173f4:	83 c4 0c             	add    esp,0xc
c00173f7:	c3                   	ret    

c00173f8 <doubleFault(regs*, void*)>:
c00173f8:	55                   	push   ebp
c00173f9:	89 e5                	mov    ebp,esp
c00173fb:	83 ec 08             	sub    esp,0x8
c00173fe:	83 ec 0c             	sub    esp,0xc
c0017401:	68 5c 26 02 c0       	push   0xc002265c
c0017406:	e8 de 9e ff ff       	call   c00112e9 <KePanic(char const*)>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	90                   	nop
c001740f:	c9                   	leave  
c0017410:	c3                   	ret    

c0017411 <displayDebugInfo(regs*)>:
c0017411:	83 ec 1c             	sub    esp,0x1c
c0017414:	0f 20 c0             	mov    eax,cr0
c0017417:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001741b:	0f 20 d0             	mov    eax,cr2
c001741e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017422:	0f 20 d8             	mov    eax,cr3
c0017425:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017429:	0f 20 e0             	mov    eax,cr4
c001742c:	89 04 24             	mov    DWORD PTR [esp],eax
c001742f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017433:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017436:	83 ec 08             	sub    esp,0x8
c0017439:	50                   	push   eax
c001743a:	68 78 26 02 c0       	push   0xc0022678
c001743f:	e8 c6 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017444:	83 c4 10             	add    esp,0x10
c0017447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001744b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001744e:	83 ec 08             	sub    esp,0x8
c0017451:	50                   	push   eax
c0017452:	68 69 26 02 c0       	push   0xc0022669
c0017457:	e8 ae 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001745c:	83 c4 10             	add    esp,0x10
c001745f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017463:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017466:	83 ec 08             	sub    esp,0x8
c0017469:	50                   	push   eax
c001746a:	68 74 26 02 c0       	push   0xc0022674
c001746f:	e8 96 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001747b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001747e:	83 ec 08             	sub    esp,0x8
c0017481:	50                   	push   eax
c0017482:	68 83 26 02 c0       	push   0xc0022683
c0017487:	e8 7e 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017493:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017496:	83 ec 08             	sub    esp,0x8
c0017499:	50                   	push   eax
c001749a:	68 8e 26 02 c0       	push   0xc002268e
c001749f:	e8 66 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174a4:	83 c4 10             	add    esp,0x10
c00174a7:	83 ec 08             	sub    esp,0x8
c00174aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174ae:	68 99 26 02 c0       	push   0xc0022699
c00174b3:	e8 52 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174b8:	83 c4 10             	add    esp,0x10
c00174bb:	83 ec 08             	sub    esp,0x8
c00174be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00174c2:	68 a4 26 02 c0       	push   0xc00226a4
c00174c7:	e8 3e 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174cc:	83 c4 10             	add    esp,0x10
c00174cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174d3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00174d6:	c1 e0 05             	shl    eax,0x5
c00174d9:	8d 90 20 36 02 c0    	lea    edx,[eax-0x3ffdc9e0]
c00174df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174e3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00174e6:	83 ec 04             	sub    esp,0x4
c00174e9:	52                   	push   edx
c00174ea:	50                   	push   eax
c00174eb:	68 af 26 02 c0       	push   0xc00226af
c00174f0:	e8 15 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00174f5:	83 c4 10             	add    esp,0x10
c00174f8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017503:	83 ec 0c             	sub    esp,0xc
c0017506:	50                   	push   eax
c0017507:	e8 63 12 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c001750c:	83 c4 10             	add    esp,0x10
c001750f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017514:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001751a:	83 ec 08             	sub    esp,0x8
c001751d:	68 be 26 02 c0       	push   0xc00226be
c0017522:	50                   	push   eax
c0017523:	e8 84 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017528:	83 c4 10             	add    esp,0x10
c001752b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017530:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017536:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001753a:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001753d:	83 ec 08             	sub    esp,0x8
c0017540:	52                   	push   edx
c0017541:	50                   	push   eax
c0017542:	e8 1f 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001754f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017555:	83 ec 08             	sub    esp,0x8
c0017558:	68 cc 26 02 c0       	push   0xc00226cc
c001755d:	50                   	push   eax
c001755e:	e8 49 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001756b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017571:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017576:	8b 12                	mov    edx,DWORD PTR [edx]
c0017578:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001757b:	83 c2 0c             	add    edx,0xc
c001757e:	83 ec 08             	sub    esp,0x8
c0017581:	52                   	push   edx
c0017582:	50                   	push   eax
c0017583:	e8 24 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017588:	83 c4 10             	add    esp,0x10
c001758b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017590:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017596:	83 ec 08             	sub    esp,0x8
c0017599:	68 d5 26 02 c0       	push   0xc00226d5
c001759e:	50                   	push   eax
c001759f:	e8 08 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175a4:	83 c4 10             	add    esp,0x10
c00175a7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175b6:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00175b9:	83 ec 08             	sub    esp,0x8
c00175bc:	52                   	push   edx
c00175bd:	50                   	push   eax
c00175be:	e8 a3 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175c3:	83 c4 10             	add    esp,0x10
c00175c6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d1:	83 ec 08             	sub    esp,0x8
c00175d4:	68 dd 26 02 c0       	push   0xc00226dd
c00175d9:	50                   	push   eax
c00175da:	e8 cd 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175f1:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00175f4:	83 ec 08             	sub    esp,0x8
c00175f7:	52                   	push   edx
c00175f8:	50                   	push   eax
c00175f9:	e8 68 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175fe:	83 c4 10             	add    esp,0x10
c0017601:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017606:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001760c:	83 ec 08             	sub    esp,0x8
c001760f:	68 e5 26 02 c0       	push   0xc00226e5
c0017614:	50                   	push   eax
c0017615:	e8 92 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001761a:	83 c4 10             	add    esp,0x10
c001761d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017622:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017628:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001762c:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001762f:	83 ec 08             	sub    esp,0x8
c0017632:	52                   	push   edx
c0017633:	50                   	push   eax
c0017634:	e8 2d 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017639:	83 c4 10             	add    esp,0x10
c001763c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017641:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017647:	83 ec 08             	sub    esp,0x8
c001764a:	68 ed 26 02 c0       	push   0xc00226ed
c001764f:	50                   	push   eax
c0017650:	e8 57 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017655:	83 c4 10             	add    esp,0x10
c0017658:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001765d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017663:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017667:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001766a:	83 ec 08             	sub    esp,0x8
c001766d:	52                   	push   edx
c001766e:	50                   	push   eax
c001766f:	e8 f2 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001767c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017682:	83 ec 08             	sub    esp,0x8
c0017685:	68 f5 26 02 c0       	push   0xc00226f5
c001768a:	50                   	push   eax
c001768b:	e8 1c 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017690:	83 c4 10             	add    esp,0x10
c0017693:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017698:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001769e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176a2:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00176a5:	83 ec 08             	sub    esp,0x8
c00176a8:	52                   	push   edx
c00176a9:	50                   	push   eax
c00176aa:	e8 b7 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176af:	83 c4 10             	add    esp,0x10
c00176b2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176bd:	83 ec 08             	sub    esp,0x8
c00176c0:	68 fd 26 02 c0       	push   0xc00226fd
c00176c5:	50                   	push   eax
c00176c6:	e8 e1 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176cb:	83 c4 10             	add    esp,0x10
c00176ce:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176dd:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00176e0:	83 ec 08             	sub    esp,0x8
c00176e3:	52                   	push   edx
c00176e4:	50                   	push   eax
c00176e5:	e8 7c 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f8:	83 ec 08             	sub    esp,0x8
c00176fb:	68 05 27 02 c0       	push   0xc0022705
c0017700:	50                   	push   eax
c0017701:	e8 a6 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017706:	83 c4 10             	add    esp,0x10
c0017709:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001770e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017714:	83 ec 08             	sub    esp,0x8
c0017717:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001771b:	50                   	push   eax
c001771c:	e8 45 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017721:	83 c4 10             	add    esp,0x10
c0017724:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017729:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001772f:	83 ec 08             	sub    esp,0x8
c0017732:	68 0e 27 02 c0       	push   0xc002270e
c0017737:	50                   	push   eax
c0017738:	e8 6f 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017745:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001774b:	83 ec 08             	sub    esp,0x8
c001774e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017752:	50                   	push   eax
c0017753:	e8 0e 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017758:	83 c4 10             	add    esp,0x10
c001775b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017760:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017766:	83 ec 08             	sub    esp,0x8
c0017769:	68 16 27 02 c0       	push   0xc0022716
c001776e:	50                   	push   eax
c001776f:	e8 38 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017774:	83 c4 10             	add    esp,0x10
c0017777:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001777c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017782:	83 ec 08             	sub    esp,0x8
c0017785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017789:	50                   	push   eax
c001778a:	e8 d7 12 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001778f:	83 c4 10             	add    esp,0x10
c0017792:	fa                   	cli    
c0017793:	f4                   	hlt    
c0017794:	eb fe                	jmp    c0017794 <displayDebugInfo(regs*)+0x383>

c0017796 <HalSystemIdle()>:
c0017796:	56                   	push   esi
c0017797:	53                   	push   ebx
c0017798:	83 ec 14             	sub    esp,0x14
c001779b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177a6:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00177ac:	83 e0 04             	and    eax,0x4
c00177af:	0f b6 c0             	movzx  eax,al
c00177b2:	85 c0                	test   eax,eax
c00177b4:	0f 95 c0             	setne  al
c00177b7:	0f b6 c0             	movzx  eax,al
c00177ba:	85 c0                	test   eax,eax
c00177bc:	74 4c                	je     c001780a <HalSystemIdle()+0x74>
c00177be:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177c3:	83 ec 08             	sub    esp,0x8
c00177c6:	68 e1 00 00 00       	push   0xe1
c00177cb:	50                   	push   eax
c00177cc:	e8 11 f9 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177dc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177e5:	83 e2 02             	and    edx,0x2
c00177e8:	89 d3                	mov    ebx,edx
c00177ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177ee:	83 e2 00             	and    edx,0x0
c00177f1:	89 d6                	mov    esi,edx
c00177f3:	56                   	push   esi
c00177f4:	53                   	push   ebx
c00177f5:	68 e1 00 00 00       	push   0xe1
c00177fa:	50                   	push   eax
c00177fb:	e8 0e f9 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017800:	83 c4 10             	add    esp,0x10
c0017803:	e8 8c 89 fe ff       	call   c0000194 <doTPAUSE>
c0017808:	eb 01                	jmp    c001780b <HalSystemIdle()+0x75>
c001780a:	f4                   	hlt    
c001780b:	90                   	nop
c001780c:	83 c4 14             	add    esp,0x14
c001780f:	5b                   	pop    ebx
c0017810:	5e                   	pop    esi
c0017811:	c3                   	ret    

c0017812 <displayProgramFault(char const*)>:
c0017812:	83 ec 0c             	sub    esp,0xc
c0017815:	83 ec 0c             	sub    esp,0xc
c0017818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001781c:	e8 e9 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017821:	83 c4 10             	add    esp,0x10
c0017824:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017829:	8b 00                	mov    eax,DWORD PTR [eax]
c001782b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001782e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017834:	85 c0                	test   eax,eax
c0017836:	74 21                	je     c0017859 <displayProgramFault(char const*)+0x47>
c0017838:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001783d:	8b 00                	mov    eax,DWORD PTR [eax]
c001783f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017842:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017848:	6a 04                	push   0x4
c001784a:	6a 0f                	push   0xf
c001784c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017850:	50                   	push   eax
c0017851:	e8 c8 12 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017856:	83 c4 10             	add    esp,0x10
c0017859:	90                   	nop
c001785a:	83 c4 0c             	add    esp,0xc
c001785d:	c3                   	ret    

c001785e <gpFault(regs*, void*)>:
c001785e:	83 ec 1c             	sub    esp,0x1c
c0017861:	c7 05 74 97 02 c0 b4 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016cb4
c001786b:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017870:	85 c0                	test   eax,eax
c0017872:	74 1e                	je     c0017892 <gpFault(regs*, void*)+0x34>
c0017874:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017879:	83 ec 0c             	sub    esp,0xc
c001787c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017880:	ff d0                	call   eax
c0017882:	83 c4 10             	add    esp,0x10
c0017885:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017889:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001788e:	85 c0                	test   eax,eax
c0017890:	75 2e                	jne    c00178c0 <gpFault(regs*, void*)+0x62>
c0017892:	83 ec 0c             	sub    esp,0xc
c0017895:	68 1e 27 02 c0       	push   0xc002271e
c001789a:	e8 73 ff ff ff       	call   c0017812 <displayProgramFault(char const*)>
c001789f:	83 c4 10             	add    esp,0x10
c00178a2:	83 ec 0c             	sub    esp,0xc
c00178a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178a9:	e8 63 fb ff ff       	call   c0017411 <displayDebugInfo(regs*)>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	83 ec 0c             	sub    esp,0xc
c00178b4:	6a 00                	push   0x0
c00178b6:	e8 99 ed ff ff       	call   c0016654 <Thr::terminateFromIRQ(int)>
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	eb 01                	jmp    c00178c1 <gpFault(regs*, void*)+0x63>
c00178c0:	90                   	nop
c00178c1:	83 c4 1c             	add    esp,0x1c
c00178c4:	c3                   	ret    

c00178c5 <pgFault(regs*, void*)>:
c00178c5:	83 ec 1c             	sub    esp,0x1c
c00178c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00178cf:	0f 20 d0             	mov    eax,cr2
c00178d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178da:	83 ec 04             	sub    esp,0x4
c00178dd:	52                   	push   edx
c00178de:	50                   	push   eax
c00178df:	68 fc 27 02 c0       	push   0xc00227fc
c00178e4:	e8 21 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178e9:	83 c4 10             	add    esp,0x10
c00178ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00178f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178f6:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00178fc:	0f 20 d2             	mov    edx,cr2
c00178ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017907:	83 ec 08             	sub    esp,0x8
c001790a:	52                   	push   edx
c001790b:	50                   	push   eax
c001790c:	e8 69 2a ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	0f b6 c0             	movzx  eax,al
c0017917:	85 c0                	test   eax,eax
c0017919:	75 2e                	jne    c0017949 <pgFault(regs*, void*)+0x84>
c001791b:	83 ec 0c             	sub    esp,0xc
c001791e:	68 37 27 02 c0       	push   0xc0022737
c0017923:	e8 ea fe ff ff       	call   c0017812 <displayProgramFault(char const*)>
c0017928:	83 c4 10             	add    esp,0x10
c001792b:	83 ec 0c             	sub    esp,0xc
c001792e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017932:	e8 da fa ff ff       	call   c0017411 <displayDebugInfo(regs*)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	83 ec 0c             	sub    esp,0xc
c001793d:	6a 00                	push   0x0
c001793f:	e8 10 ed ff ff       	call   c0016654 <Thr::terminateFromIRQ(int)>
c0017944:	83 c4 10             	add    esp,0x10
c0017947:	eb 01                	jmp    c001794a <pgFault(regs*, void*)+0x85>
c0017949:	90                   	nop
c001794a:	83 c4 1c             	add    esp,0x1c
c001794d:	c3                   	ret    

c001794e <otherISRHandler(regs*, void*)>:
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	83 ec 0c             	sub    esp,0xc
c0017954:	68 24 28 02 c0       	push   0xc0022824
c0017959:	e8 b4 fe ff ff       	call   c0017812 <displayProgramFault(char const*)>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	83 ec 0c             	sub    esp,0xc
c0017964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017968:	e8 a4 fa ff ff       	call   c0017411 <displayDebugInfo(regs*)>
c001796d:	83 c4 10             	add    esp,0x10
c0017970:	83 ec 0c             	sub    esp,0xc
c0017973:	6a 00                	push   0x0
c0017975:	e8 da ec ff ff       	call   c0016654 <Thr::terminateFromIRQ(int)>
c001797a:	83 c4 10             	add    esp,0x10
c001797d:	90                   	nop
c001797e:	83 c4 0c             	add    esp,0xc
c0017981:	c3                   	ret    

c0017982 <opcodeFault(regs*, void*)>:
c0017982:	55                   	push   ebp
c0017983:	89 e5                	mov    ebp,esp
c0017985:	83 ec 08             	sub    esp,0x8
c0017988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001798b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001798e:	83 ec 08             	sub    esp,0x8
c0017991:	50                   	push   eax
c0017992:	68 42 27 02 c0       	push   0xc0022742
c0017997:	e8 6e 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001799c:	83 c4 10             	add    esp,0x10
c001799f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00179a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179aa:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00179b0:	0f b6 c0             	movzx  eax,al
c00179b3:	85 c0                	test   eax,eax
c00179b5:	74 21                	je     c00179d8 <opcodeFault(regs*, void*)+0x56>
c00179b7:	83 ec 0c             	sub    esp,0xc
c00179ba:	68 4c 28 02 c0       	push   0xc002284c
c00179bf:	e8 46 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179cd:	8d 50 19             	lea    edx,[eax+0x19]
c00179d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00179d6:	eb 2b                	jmp    c0017a03 <opcodeFault(regs*, void*)+0x81>
c00179d8:	83 ec 0c             	sub    esp,0xc
c00179db:	68 50 27 02 c0       	push   0xc0022750
c00179e0:	e8 2d fe ff ff       	call   c0017812 <displayProgramFault(char const*)>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	83 ec 0c             	sub    esp,0xc
c00179eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00179ee:	e8 1e fa ff ff       	call   c0017411 <displayDebugInfo(regs*)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	83 ec 0c             	sub    esp,0xc
c00179f9:	6a 00                	push   0x0
c00179fb:	e8 54 ec ff ff       	call   c0016654 <Thr::terminateFromIRQ(int)>
c0017a00:	83 c4 10             	add    esp,0x10
c0017a03:	c9                   	leave  
c0017a04:	c3                   	ret    

c0017a05 <i386SaveCoprocessor(void*)>:
c0017a05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a09:	83 c0 3f             	add    eax,0x3f
c0017a0c:	83 e0 c0             	and    eax,0xffffffc0
c0017a0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a13:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017a19 <i386LoadCoprocessor(void*)>:
c0017a19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a1d:	83 c0 3f             	add    eax,0x3f
c0017a20:	83 e0 c0             	and    eax,0xffffffc0
c0017a23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a27:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017a2d <x87EmulHandler(regs*, void*)>:
c0017a2d:	53                   	push   ebx
c0017a2e:	83 ec 08             	sub    esp,0x8
c0017a31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a36:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017a3a:	74 10                	je     c0017a4c <x87EmulHandler(regs*, void*)+0x1f>
c0017a3c:	83 ec 0c             	sub    esp,0xc
c0017a3f:	68 5d 27 02 c0       	push   0xc002275d
c0017a44:	e8 a0 98 ff ff       	call   c00112e9 <KePanic(char const*)>
c0017a49:	83 c4 10             	add    esp,0x10
c0017a4c:	0f 20 c0             	mov    eax,cr0
c0017a4f:	a8 08                	test   al,0x8
c0017a51:	74 59                	je     c0017aac <x87EmulHandler(regs*, void*)+0x7f>
c0017a53:	0f 06                	clts   
c0017a55:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a5a:	85 c0                	test   eax,eax
c0017a5c:	74 0e                	je     c0017a6c <x87EmulHandler(regs*, void*)+0x3f>
c0017a5e:	83 ec 0c             	sub    esp,0xc
c0017a61:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a64:	e8 9c ff ff ff       	call   c0017a05 <i386SaveCoprocessor(void*)>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017a72:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017a76:	75 12                	jne    c0017a8a <x87EmulHandler(regs*, void*)+0x5d>
c0017a78:	83 ec 0c             	sub    esp,0xc
c0017a7b:	68 40 02 00 00       	push   0x240
c0017a80:	e8 4e 00 ff ff       	call   c0007ad3 <malloc>
c0017a85:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017a88:	eb 10                	jmp    c0017a9a <x87EmulHandler(regs*, void*)+0x6d>
c0017a8a:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a8f:	83 ec 0c             	sub    esp,0xc
c0017a92:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a95:	e8 7f ff ff ff       	call   c0017a19 <i386LoadCoprocessor(void*)>
c0017a9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a9f:	83 c4 10             	add    esp,0x10
c0017aa2:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017aa7:	83 c4 08             	add    esp,0x8
c0017aaa:	5b                   	pop    ebx
c0017aab:	c3                   	ret    
c0017aac:	83 ec 0c             	sub    esp,0xc
c0017aaf:	68 71 27 02 c0       	push   0xc0022771
c0017ab4:	e8 51 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ab9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ac1:	83 c4 18             	add    esp,0x18
c0017ac4:	5b                   	pop    ebx
c0017ac5:	e9 8a eb ff ff       	jmp    c0016654 <Thr::terminateFromIRQ(int)>

c0017aca <HalInitialiseCoprocessor()>:
c0017aca:	83 ec 10             	sub    esp,0x10
c0017acd:	6a 00                	push   0x0
c0017acf:	68 2d 7a 01 c0       	push   0xc0017a2d
c0017ad4:	6a 07                	push   0x7
c0017ad6:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017ae0:	e8 9d 51 ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ae5:	e8 a6 70 00 00       	call   c001eb90 <avxDetect>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	85 c0                	test   eax,eax
c0017aef:	74 1c                	je     c0017b0d <HalInitialiseCoprocessor()+0x43>
c0017af1:	c7 05 70 97 02 c0 ba eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ebba
c0017afb:	c7 05 6c 97 02 c0 cb eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ebcb
c0017b05:	83 c4 0c             	add    esp,0xc
c0017b08:	e9 cf 70 00 00       	jmp    c001ebdc <avxInit>
c0017b0d:	e8 0e 74 00 00       	call   c001ef20 <absolutelyNoChanceInHell>
c0017b12:	85 c0                	test   eax,eax
c0017b14:	74 1c                	je     c0017b32 <HalInitialiseCoprocessor()+0x68>
c0017b16:	c7 05 70 97 02 c0 38 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef38
c0017b20:	c7 05 6c 97 02 c0 40 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef40
c0017b2a:	83 c4 0c             	add    esp,0xc
c0017b2d:	e9 16 74 00 00       	jmp    c001ef48 <sseInit>
c0017b32:	e8 2f 74 00 00       	call   c001ef66 <x87Detect>
c0017b37:	85 c0                	test   eax,eax
c0017b39:	74 1c                	je     c0017b57 <HalInitialiseCoprocessor()+0x8d>
c0017b3b:	c7 05 70 97 02 c0 81 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef81
c0017b45:	c7 05 6c 97 02 c0 88 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef88
c0017b4f:	83 c4 0c             	add    esp,0xc
c0017b52:	e9 38 74 00 00       	jmp    c001ef8f <x87Init>
c0017b57:	c7 05 70 97 02 c0 de 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00173de
c0017b61:	c7 05 6c 97 02 c0 de 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00173de
c0017b6b:	0f 20 c0             	mov    eax,cr0
c0017b6e:	83 c8 04             	or     eax,0x4
c0017b71:	0f 22 c0             	mov    cr0,eax
c0017b74:	83 c4 0c             	add    esp,0xc
c0017b77:	c3                   	ret    

c0017b78 <HalPanic(char const*)>:
c0017b78:	53                   	push   ebx
c0017b79:	83 ec 10             	sub    esp,0x10
c0017b7c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b80:	fa                   	cli    
c0017b81:	53                   	push   ebx
c0017b82:	68 87 27 02 c0       	push   0xc0022787
c0017b87:	e8 7e 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017b8c:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017b91:	83 c4 10             	add    esp,0x10
c0017b94:	85 c0                	test   eax,eax
c0017b96:	74 09                	je     c0017ba1 <HalPanic(char const*)+0x29>
c0017b98:	83 ec 0c             	sub    esp,0xc
c0017b9b:	53                   	push   ebx
c0017b9c:	ff d0                	call   eax
c0017b9e:	83 c4 10             	add    esp,0x10
c0017ba1:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017ba6:	85 c0                	test   eax,eax
c0017ba8:	0f 84 dc 00 00 00    	je     c0017c8a <HalPanic(char const*)+0x112>
c0017bae:	52                   	push   edx
c0017baf:	6a 01                	push   0x1
c0017bb1:	6a 0f                	push   0xf
c0017bb3:	50                   	push   eax
c0017bb4:	e8 11 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017bb9:	59                   	pop    ecx
c0017bba:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bc0:	e8 f5 0b ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017bc5:	58                   	pop    eax
c0017bc6:	5a                   	pop    edx
c0017bc7:	68 e4 09 02 c0       	push   0xc00209e4
c0017bcc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bd2:	e8 2b 0a ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017bd7:	83 c4 0c             	add    esp,0xc
c0017bda:	6a 01                	push   0x1
c0017bdc:	6a 0f                	push   0xf
c0017bde:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017be4:	e8 e1 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017be9:	59                   	pop    ecx
c0017bea:	58                   	pop    eax
c0017beb:	68 a0 27 02 c0       	push   0xc00227a0
c0017bf0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bf6:	e8 b1 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bfb:	83 c4 0c             	add    esp,0xc
c0017bfe:	6a 0f                	push   0xf
c0017c00:	6a 01                	push   0x1
c0017c02:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c08:	e8 bd 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c0d:	58                   	pop    eax
c0017c0e:	5a                   	pop    edx
c0017c0f:	68 a9 27 02 c0       	push   0xc00227a9
c0017c14:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c1a:	e8 8d 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c1f:	83 c4 0c             	add    esp,0xc
c0017c22:	6a 01                	push   0x1
c0017c24:	6a 0f                	push   0xf
c0017c26:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c2c:	e8 99 09 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c31:	59                   	pop    ecx
c0017c32:	58                   	pop    eax
c0017c33:	68 ed 27 02 c0       	push   0xc00227ed
c0017c38:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c3e:	e8 69 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c43:	58                   	pop    eax
c0017c44:	5a                   	pop    edx
c0017c45:	68 b6 27 02 c0       	push   0xc00227b6
c0017c4a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c50:	e8 57 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c55:	59                   	pop    ecx
c0017c56:	58                   	pop    eax
c0017c57:	68 f0 27 02 c0       	push   0xc00227f0
c0017c5c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c62:	e8 45 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c67:	58                   	pop    eax
c0017c68:	5a                   	pop    edx
c0017c69:	53                   	push   ebx
c0017c6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c70:	e8 37 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c75:	59                   	pop    ecx
c0017c76:	5b                   	pop    ebx
c0017c77:	68 ed 27 02 c0       	push   0xc00227ed
c0017c7c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c82:	e8 25 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017c87:	83 c4 10             	add    esp,0x10
c0017c8a:	eb fe                	jmp    c0017c8a <HalPanic(char const*)+0x112>

c0017c8c <HalQueryPerformanceCounter()>:
c0017c8c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c91:	31 d2                	xor    edx,edx
c0017c93:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017c99:	31 c0                	xor    eax,eax
c0017c9b:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017ca2:	74 02                	je     c0017ca6 <HalQueryPerformanceCounter()+0x1a>
c0017ca4:	0f 31                	rdtsc  
c0017ca6:	c3                   	ret    

c0017ca7 <HalInitialise()>:
c0017ca7:	53                   	push   ebx
c0017ca8:	83 ec 08             	sub    esp,0x8
c0017cab:	e8 09 52 ff ff       	call   c000ceb9 <setupINTS()>
c0017cb0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cb5:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017cbc:	75 0f                	jne    c0017ccd <HalInitialise()+0x26>
c0017cbe:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017cc4:	83 e2 fe             	and    edx,0xfffffffe
c0017cc7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017ccd:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017cd4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017cda:	83 e2 fe             	and    edx,0xfffffffe
c0017cdd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017ce3:	e8 a0 02 00 00       	call   c0017f88 <picOpen()>
c0017ce8:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017cef:	74 0a                	je     c0017cfb <HalInitialise()+0x54>
c0017cf1:	e8 e2 01 00 00       	call   c0017ed8 <picDisable()>
c0017cf6:	e8 0d 68 00 00       	call   c001e508 <apicOpen()>
c0017cfb:	50                   	push   eax
c0017cfc:	bb 0f 00 00 00       	mov    ebx,0xf
c0017d01:	6a 00                	push   0x0
c0017d03:	68 4e 79 01 c0       	push   0xc001794e
c0017d08:	6a 00                	push   0x0
c0017d0a:	e8 73 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d0f:	83 c4 0c             	add    esp,0xc
c0017d12:	6a 00                	push   0x0
c0017d14:	68 4e 79 01 c0       	push   0xc001794e
c0017d19:	6a 01                	push   0x1
c0017d1b:	e8 62 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d20:	83 c4 0c             	add    esp,0xc
c0017d23:	6a 00                	push   0x0
c0017d25:	68 df 73 01 c0       	push   0xc00173df
c0017d2a:	6a 02                	push   0x2
c0017d2c:	e8 51 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d31:	83 c4 0c             	add    esp,0xc
c0017d34:	6a 00                	push   0x0
c0017d36:	68 4e 79 01 c0       	push   0xc001794e
c0017d3b:	6a 03                	push   0x3
c0017d3d:	e8 40 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d42:	83 c4 0c             	add    esp,0xc
c0017d45:	6a 00                	push   0x0
c0017d47:	68 4e 79 01 c0       	push   0xc001794e
c0017d4c:	6a 04                	push   0x4
c0017d4e:	e8 2f 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d53:	83 c4 0c             	add    esp,0xc
c0017d56:	6a 00                	push   0x0
c0017d58:	68 4e 79 01 c0       	push   0xc001794e
c0017d5d:	6a 05                	push   0x5
c0017d5f:	e8 1e 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d64:	83 c4 0c             	add    esp,0xc
c0017d67:	6a 00                	push   0x0
c0017d69:	68 82 79 01 c0       	push   0xc0017982
c0017d6e:	6a 06                	push   0x6
c0017d70:	e8 0d 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d75:	83 c4 0c             	add    esp,0xc
c0017d78:	6a 00                	push   0x0
c0017d7a:	68 f8 73 01 c0       	push   0xc00173f8
c0017d7f:	6a 08                	push   0x8
c0017d81:	e8 fc 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d86:	83 c4 0c             	add    esp,0xc
c0017d89:	6a 00                	push   0x0
c0017d8b:	68 4e 79 01 c0       	push   0xc001794e
c0017d90:	6a 09                	push   0x9
c0017d92:	e8 eb 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d97:	83 c4 0c             	add    esp,0xc
c0017d9a:	6a 00                	push   0x0
c0017d9c:	68 4e 79 01 c0       	push   0xc001794e
c0017da1:	6a 0a                	push   0xa
c0017da3:	e8 da 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017da8:	83 c4 0c             	add    esp,0xc
c0017dab:	6a 00                	push   0x0
c0017dad:	68 4e 79 01 c0       	push   0xc001794e
c0017db2:	6a 0b                	push   0xb
c0017db4:	e8 c9 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017db9:	83 c4 0c             	add    esp,0xc
c0017dbc:	6a 00                	push   0x0
c0017dbe:	68 5e 78 01 c0       	push   0xc001785e
c0017dc3:	6a 0d                	push   0xd
c0017dc5:	e8 b8 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dca:	83 c4 0c             	add    esp,0xc
c0017dcd:	6a 00                	push   0x0
c0017dcf:	68 c5 78 01 c0       	push   0xc00178c5
c0017dd4:	6a 0e                	push   0xe
c0017dd6:	e8 a7 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	50                   	push   eax
c0017ddf:	6a 00                	push   0x0
c0017de1:	68 4e 79 01 c0       	push   0xc001794e
c0017de6:	53                   	push   ebx
c0017de7:	43                   	inc    ebx
c0017de8:	e8 95 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ded:	83 c4 10             	add    esp,0x10
c0017df0:	83 fb 1e             	cmp    ebx,0x1e
c0017df3:	75 e9                	jne    c0017dde <HalInitialise()+0x137>
c0017df5:	50                   	push   eax
c0017df6:	6a 00                	push   0x0
c0017df8:	68 e1 25 01 c0       	push   0xc00125e1
c0017dfd:	6a 60                	push   0x60
c0017dff:	e8 7e 4e ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e04:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e09:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017e13:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017e1a:	e8 b4 fc fe ff       	call   c0007ad3 <malloc>
c0017e1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e22:	89 c3                	mov    ebx,eax
c0017e24:	e8 37 09 00 00       	call   c0018760 <RTC::RTC()>
c0017e29:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017e33:	5a                   	pop    edx
c0017e34:	59                   	pop    ecx
c0017e35:	53                   	push   ebx
c0017e36:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e3c:	e8 0b 49 ff ff       	call   c000c74c <Device::addChild(Device*)>
c0017e41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e43:	6a 00                	push   0x0
c0017e45:	6a 00                	push   0x0
c0017e47:	6a 00                	push   0x0
c0017e49:	53                   	push   ebx
c0017e4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e4d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e52:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017e58:	83 c4 28             	add    esp,0x28
c0017e5b:	5b                   	pop    ebx
c0017e5c:	c3                   	ret    

c0017e5d <HalMakeBeep(int)>:
c0017e5d:	53                   	push   ebx
c0017e5e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017e62:	85 db                	test   ebx,ebx
c0017e64:	75 07                	jne    c0017e6d <HalMakeBeep(int)+0x10>
c0017e66:	e4 61                	in     al,0x61
c0017e68:	83 e0 fc             	and    eax,0xfffffffc
c0017e6b:	eb 26                	jmp    c0017e93 <HalMakeBeep(int)+0x36>
c0017e6d:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017e72:	99                   	cdq    
c0017e73:	f7 fb                	idiv   ebx
c0017e75:	89 c1                	mov    ecx,eax
c0017e77:	b0 b6                	mov    al,0xb6
c0017e79:	e6 43                	out    0x43,al
c0017e7b:	88 c8                	mov    al,cl
c0017e7d:	e6 42                	out    0x42,al
c0017e7f:	89 c8                	mov    eax,ecx
c0017e81:	c1 e8 08             	shr    eax,0x8
c0017e84:	e6 42                	out    0x42,al
c0017e86:	e4 61                	in     al,0x61
c0017e88:	89 c2                	mov    edx,eax
c0017e8a:	83 ca 03             	or     edx,0x3
c0017e8d:	38 d0                	cmp    al,dl
c0017e8f:	74 04                	je     c0017e95 <HalMakeBeep(int)+0x38>
c0017e91:	88 d0                	mov    al,dl
c0017e93:	e6 61                	out    0x61,al
c0017e95:	5b                   	pop    ebx
c0017e96:	c3                   	ret    

c0017e97 <HalGetRand()>:
c0017e97:	31 c0                	xor    eax,eax
c0017e99:	c3                   	ret    

c0017e9a <HalEndOfInterrupt(int)>:
c0017e9a:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017ea1:	74 23                	je     c0017ec6 <HalEndOfInterrupt(int)+0x2c>
c0017ea3:	83 ec 14             	sub    esp,0x14
c0017ea6:	6a 1b                	push   0x1b
c0017ea8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017eae:	e8 2f f2 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017eb3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017eb8:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017ec2:	83 c4 1c             	add    esp,0x1c
c0017ec5:	c3                   	ret    
c0017ec6:	e9 41 02 00 00       	jmp    c001810c <picEOI(int)>

c0017ecb <HalRestart()>:
c0017ecb:	c3                   	ret    

c0017ecc <HalShutdown()>:
c0017ecc:	c3                   	ret    

c0017ecd <HalSleep()>:
c0017ecd:	c3                   	ret    
c0017ece:	66 90                	xchg   ax,ax

c0017ed0 <picIoWait()>:
c0017ed0:	eb 00                	jmp    c0017ed2 <picIoWait()+0x2>
c0017ed2:	eb 00                	jmp    c0017ed4 <picIoWait()+0x4>
c0017ed4:	90                   	nop
c0017ed5:	c3                   	ret    
c0017ed6:	66 90                	xchg   ax,ax

c0017ed8 <picDisable()>:
c0017ed8:	83 ec 10             	sub    esp,0x10
c0017edb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017ee2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017ee7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017eeb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017ef0:	ee                   	out    dx,al
c0017ef1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017ef8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017efd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f01:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017f06:	ee                   	out    dx,al
c0017f07:	90                   	nop
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	c3                   	ret    

c0017f0c <picGetIRQReg(int)>:
c0017f0c:	83 ec 10             	sub    esp,0x10
c0017f0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f13:	0f b6 c0             	movzx  eax,al
c0017f16:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017f1d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017f21:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017f25:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017f2a:	ee                   	out    dx,al
c0017f2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f2f:	0f b6 c0             	movzx  eax,al
c0017f32:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017f39:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017f3d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017f41:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017f46:	ee                   	out    dx,al
c0017f47:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017f4e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017f53:	89 c2                	mov    edx,eax
c0017f55:	ec                   	in     al,dx
c0017f56:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f5a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f5e:	0f b6 c0             	movzx  eax,al
c0017f61:	c1 e0 08             	shl    eax,0x8
c0017f64:	89 c1                	mov    ecx,eax
c0017f66:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017f6d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017f72:	89 c2                	mov    edx,eax
c0017f74:	ec                   	in     al,dx
c0017f75:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017f79:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f7d:	0f b6 c0             	movzx  eax,al
c0017f80:	09 c8                	or     eax,ecx
c0017f82:	83 c4 10             	add    esp,0x10
c0017f85:	c3                   	ret    
c0017f86:	66 90                	xchg   ax,ax

c0017f88 <picOpen()>:
c0017f88:	83 ec 50             	sub    esp,0x50
c0017f8b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017f92:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f97:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f9f:	ee                   	out    dx,al
c0017fa0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017fa7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017fac:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017fb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017fb4:	ee                   	out    dx,al
c0017fb5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017fbd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017fc5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017fcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fd0:	89 c2                	mov    edx,eax
c0017fd2:	ec                   	in     al,dx
c0017fd3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017fd7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017fdb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017fdf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017fe6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fea:	89 c2                	mov    edx,eax
c0017fec:	ec                   	in     al,dx
c0017fed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017ff1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ff5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017ff9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018000:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018005:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018009:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001800d:	ee                   	out    dx,al
c001800e:	e8 bd fe ff ff       	call   c0017ed0 <picIoWait()>
c0018013:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001801a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001801f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018023:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018027:	ee                   	out    dx,al
c0018028:	e8 a3 fe ff ff       	call   c0017ed0 <picIoWait()>
c001802d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018031:	0f b6 c0             	movzx  eax,al
c0018034:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001803b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001803f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018043:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018047:	ee                   	out    dx,al
c0018048:	e8 83 fe ff ff       	call   c0017ed0 <picIoWait()>
c001804d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018051:	0f b6 c0             	movzx  eax,al
c0018054:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001805b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001805f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018063:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018067:	ee                   	out    dx,al
c0018068:	e8 63 fe ff ff       	call   c0017ed0 <picIoWait()>
c001806d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018074:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018079:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001807d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018081:	ee                   	out    dx,al
c0018082:	e8 49 fe ff ff       	call   c0017ed0 <picIoWait()>
c0018087:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001808e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018093:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018097:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001809b:	ee                   	out    dx,al
c001809c:	e8 2f fe ff ff       	call   c0017ed0 <picIoWait()>
c00180a1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00180a8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00180ad:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00180b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00180b5:	ee                   	out    dx,al
c00180b6:	e8 15 fe ff ff       	call   c0017ed0 <picIoWait()>
c00180bb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00180c2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00180c7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00180cb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180cf:	ee                   	out    dx,al
c00180d0:	e8 fb fd ff ff       	call   c0017ed0 <picIoWait()>
c00180d5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00180da:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00180e1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00180e5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00180e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180ed:	ee                   	out    dx,al
c00180ee:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00180f3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00180fa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00180fe:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018102:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018106:	ee                   	out    dx,al
c0018107:	90                   	nop
c0018108:	83 c4 50             	add    esp,0x50
c001810b:	c3                   	ret    

c001810c <picEOI(int)>:
c001810c:	83 ec 10             	sub    esp,0x10
c001810f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018114:	75 1e                	jne    c0018134 <picEOI(int)+0x28>
c0018116:	6a 0b                	push   0xb
c0018118:	e8 ef fd ff ff       	call   c0017f0c <picGetIRQReg(int)>
c001811d:	83 c4 04             	add    esp,0x4
c0018120:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018125:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001812a:	25 80 00 00 00       	and    eax,0x80
c001812f:	74 73                	je     c00181a4 <picEOI(int)+0x98>
c0018131:	8d 76 00             	lea    esi,[esi+0x0]
c0018134:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018139:	75 31                	jne    c001816c <picEOI(int)+0x60>
c001813b:	6a 0b                	push   0xb
c001813d:	e8 ca fd ff ff       	call   c0017f0c <picGetIRQReg(int)>
c0018142:	83 c4 04             	add    esp,0x4
c0018145:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001814a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001814e:	98                   	cwde   
c001814f:	85 c0                	test   eax,eax
c0018151:	78 19                	js     c001816c <picEOI(int)+0x60>
c0018153:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001815a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001815f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018163:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018168:	ee                   	out    dx,al
c0018169:	eb 3d                	jmp    c00181a8 <picEOI(int)+0x9c>
c001816b:	90                   	nop
c001816c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018171:	7e 19                	jle    c001818c <picEOI(int)+0x80>
c0018173:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001817a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001817f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018183:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018188:	ee                   	out    dx,al
c0018189:	8d 76 00             	lea    esi,[esi+0x0]
c001818c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018193:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018198:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001819c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00181a1:	ee                   	out    dx,al
c00181a2:	eb 04                	jmp    c00181a8 <picEOI(int)+0x9c>
c00181a4:	90                   	nop
c00181a5:	8d 76 00             	lea    esi,[esi+0x0]
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	c3                   	ret    

c00181ac <RTC::open(int, int, void*)>:
c00181ac:	31 c0                	xor    eax,eax
c00181ae:	c3                   	ret    
c00181af:	90                   	nop

c00181b0 <RTC::close(int, int, void*)>:
c00181b0:	31 c0                	xor    eax,eax
c00181b2:	c3                   	ret    
c00181b3:	90                   	nop

c00181b4 <RTC::timeInSecondsUTC()>:
c00181b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00181be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00181c4:	c3                   	ret    
c00181c5:	90                   	nop

c00181c6 <RTC::timeInDatetimeUTC()>:
c00181c6:	53                   	push   ebx
c00181c7:	83 ec 14             	sub    esp,0x14
c00181ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00181d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00181d4:	50                   	push   eax
c00181d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00181d8:	83 c4 0c             	add    esp,0xc
c00181db:	52                   	push   edx
c00181dc:	50                   	push   eax
c00181dd:	53                   	push   ebx
c00181de:	e8 dd 42 ff ff       	call   c000c4c0 <secondsToDatetime(unsigned long long)>
c00181e3:	89 d8                	mov    eax,ebx
c00181e5:	83 c4 14             	add    esp,0x14
c00181e8:	5b                   	pop    ebx
c00181e9:	c2 04 00             	ret    0x4

c00181ec <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00181ec:	56                   	push   esi
c00181ed:	53                   	push   ebx
c00181ee:	83 ec 14             	sub    esp,0x14
c00181f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00181f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181f7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00181fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181fe:	52                   	push   edx
c00181ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018207:	50                   	push   eax
c0018208:	e8 b3 42 ff ff       	call   c000c4c0 <secondsToDatetime(unsigned long long)>
c001820d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018211:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018215:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001821d:	89 f0                	mov    eax,esi
c001821f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018223:	83 c4 20             	add    esp,0x20
c0018226:	5b                   	pop    ebx
c0018227:	5e                   	pop    esi
c0018228:	ff e0                	jmp    eax

c001822a <RTC::~RTC()>:
c001822a:	83 ec 0c             	sub    esp,0xc
c001822d:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c0018232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018236:	89 10                	mov    DWORD PTR [eax],edx
c0018238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823c:	83 ec 0c             	sub    esp,0xc
c001823f:	50                   	push   eax
c0018240:	e8 07 40 ff ff       	call   c000c24c <Clock::~Clock()>
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	90                   	nop
c0018249:	83 c4 0c             	add    esp,0xc
c001824c:	c3                   	ret    
c001824d:	90                   	nop

c001824e <RTC::~RTC()>:
c001824e:	83 ec 0c             	sub    esp,0xc
c0018251:	83 ec 0c             	sub    esp,0xc
c0018254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018258:	e8 cd ff ff ff       	call   c001822a <RTC::~RTC()>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	83 ec 08             	sub    esp,0x8
c0018263:	68 60 01 00 00       	push   0x160
c0018268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001826c:	e8 9b 25 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018271:	83 c4 10             	add    esp,0x10
c0018274:	83 c4 0c             	add    esp,0xc
c0018277:	c3                   	ret    

c0018278 <RTC::get_update_in_progress_flag()>:
c0018278:	83 ec 14             	sub    esp,0x14
c001827b:	6a 0a                	push   0xa
c001827d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018283:	e8 12 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018288:	83 c4 1c             	add    esp,0x1c
c001828b:	0f b6 c0             	movzx  eax,al
c001828e:	c1 e8 07             	shr    eax,0x7
c0018291:	c3                   	ret    

c0018292 <RTC::completeRTCRefresh()>:
c0018292:	55                   	push   ebp
c0018293:	57                   	push   edi
c0018294:	56                   	push   esi
c0018295:	53                   	push   ebx
c0018296:	83 ec 3c             	sub    esp,0x3c
c0018299:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001829f:	83 ec 0c             	sub    esp,0xc
c00182a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00182a6:	e8 cd ff ff ff       	call   c0018278 <RTC::get_update_in_progress_flag()>
c00182ab:	83 c4 10             	add    esp,0x10
c00182ae:	84 c0                	test   al,al
c00182b0:	74 0e                	je     c00182c0 <RTC::completeRTCRefresh()+0x2e>
c00182b2:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182b8:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00182be:	73 df                	jae    c001829f <RTC::completeRTCRefresh()+0xd>
c00182c0:	50                   	push   eax
c00182c1:	50                   	push   eax
c00182c2:	6a 00                	push   0x0
c00182c4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182ca:	e8 cb ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182cf:	89 c7                	mov    edi,eax
c00182d1:	58                   	pop    eax
c00182d2:	5a                   	pop    edx
c00182d3:	6a 02                	push   0x2
c00182d5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182db:	e8 ba ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182e0:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00182e4:	59                   	pop    ecx
c00182e5:	5b                   	pop    ebx
c00182e6:	6a 04                	push   0x4
c00182e8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182ee:	e8 a7 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182f3:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00182f7:	5e                   	pop    esi
c00182f8:	5d                   	pop    ebp
c00182f9:	6a 07                	push   0x7
c00182fb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018301:	e8 94 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018306:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001830a:	58                   	pop    eax
c001830b:	5a                   	pop    edx
c001830c:	6a 08                	push   0x8
c001830e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018314:	e8 81 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018319:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001831d:	59                   	pop    ecx
c001831e:	5b                   	pop    ebx
c001831f:	6a 09                	push   0x9
c0018321:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018327:	e8 6e ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001832c:	0f b6 c0             	movzx  eax,al
c001832f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018333:	83 c4 10             	add    esp,0x10
c0018336:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001833c:	83 ec 0c             	sub    esp,0xc
c001833f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018343:	e8 30 ff ff ff       	call   c0018278 <RTC::get_update_in_progress_flag()>
c0018348:	83 c4 10             	add    esp,0x10
c001834b:	84 c0                	test   al,al
c001834d:	74 0e                	je     c001835d <RTC::completeRTCRefresh()+0xcb>
c001834f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018355:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001835b:	73 df                	jae    c001833c <RTC::completeRTCRefresh()+0xaa>
c001835d:	51                   	push   ecx
c001835e:	51                   	push   ecx
c001835f:	6a 00                	push   0x0
c0018361:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018367:	e8 2e ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001836c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018370:	5b                   	pop    ebx
c0018371:	5e                   	pop    esi
c0018372:	6a 02                	push   0x2
c0018374:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001837a:	e8 1b ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001837f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018383:	5d                   	pop    ebp
c0018384:	58                   	pop    eax
c0018385:	6a 04                	push   0x4
c0018387:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001838d:	e8 08 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018392:	88 c3                	mov    bl,al
c0018394:	58                   	pop    eax
c0018395:	5a                   	pop    edx
c0018396:	6a 07                	push   0x7
c0018398:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001839e:	e8 f7 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183a3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00183a7:	59                   	pop    ecx
c00183a8:	5e                   	pop    esi
c00183a9:	6a 08                	push   0x8
c00183ab:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183b1:	e8 e4 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183b6:	5d                   	pop    ebp
c00183b7:	89 c6                	mov    esi,eax
c00183b9:	58                   	pop    eax
c00183ba:	6a 09                	push   0x9
c00183bc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183c2:	e8 d3 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183c7:	89 f9                	mov    ecx,edi
c00183c9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00183cd:	83 c4 10             	add    esp,0x10
c00183d0:	0f b6 e8             	movzx  ebp,al
c00183d3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183d8:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00183dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00183e0:	74 27                	je     c0018409 <RTC::completeRTCRefresh()+0x177>
c00183e2:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00183e6:	89 f0                	mov    eax,esi
c00183e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00183ec:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00183f0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00183f4:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00183f8:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00183fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018400:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018404:	e9 2d ff ff ff       	jmp    c0018336 <RTC::completeRTCRefresh()+0xa4>
c0018409:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001840e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018412:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018416:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001841a:	75 c6                	jne    c00183e2 <RTC::completeRTCRefresh()+0x150>
c001841c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018421:	89 f1                	mov    ecx,esi
c0018423:	0f b6 fb             	movzx  edi,bl
c0018426:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001842a:	0f b6 c9             	movzx  ecx,cl
c001842d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018431:	89 f1                	mov    ecx,esi
c0018433:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018437:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001843b:	0f 94 c2             	sete   dl
c001843e:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018442:	0f 94 c0             	sete   al
c0018445:	21 d0                	and    eax,edx
c0018447:	31 d2                	xor    edx,edx
c0018449:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001844d:	0f 94 c2             	sete   dl
c0018450:	85 c2                	test   edx,eax
c0018452:	74 8e                	je     c00183e2 <RTC::completeRTCRefresh()+0x150>
c0018454:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018458:	75 88                	jne    c00183e2 <RTC::completeRTCRefresh()+0x150>
c001845a:	52                   	push   edx
c001845b:	52                   	push   edx
c001845c:	6a 0b                	push   0xb
c001845e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018464:	e8 31 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018469:	83 c4 10             	add    esp,0x10
c001846c:	a8 04                	test   al,0x4
c001846e:	75 7a                	jne    c00184ea <RTC::completeRTCRefresh()+0x258>
c0018470:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018474:	c1 ef 04             	shr    edi,0x4
c0018477:	83 e6 0f             	and    esi,0xf
c001847a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001847e:	c1 ed 04             	shr    ebp,0x4
c0018481:	6b ed 0a             	imul   ebp,ebp,0xa
c0018484:	c1 ea 04             	shr    edx,0x4
c0018487:	6b d2 0a             	imul   edx,edx,0xa
c001848a:	83 e1 0f             	and    ecx,0xf
c001848d:	01 d1                	add    ecx,edx
c001848f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018493:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018497:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001849b:	c1 ea 04             	shr    edx,0x4
c001849e:	6b d2 0a             	imul   edx,edx,0xa
c00184a1:	83 e1 0f             	and    ecx,0xf
c00184a4:	01 d1                	add    ecx,edx
c00184a6:	89 fa                	mov    edx,edi
c00184a8:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00184ac:	83 e2 07             	and    edx,0x7
c00184af:	89 d9                	mov    ecx,ebx
c00184b1:	6b d2 0a             	imul   edx,edx,0xa
c00184b4:	83 e1 0f             	and    ecx,0xf
c00184b7:	83 e3 80             	and    ebx,0xffffff80
c00184ba:	01 d1                	add    ecx,edx
c00184bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184c0:	09 cb                	or     ebx,ecx
c00184c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184c6:	c1 ea 04             	shr    edx,0x4
c00184c9:	6b d2 0a             	imul   edx,edx,0xa
c00184cc:	83 e1 0f             	and    ecx,0xf
c00184cf:	01 d1                	add    ecx,edx
c00184d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184d5:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00184d9:	c1 ea 04             	shr    edx,0x4
c00184dc:	6b d2 0a             	imul   edx,edx,0xa
c00184df:	01 d6                	add    esi,edx
c00184e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184e5:	83 e2 0f             	and    edx,0xf
c00184e8:	01 d5                	add    ebp,edx
c00184ea:	a8 02                	test   al,0x2
c00184ec:	75 15                	jne    c0018503 <RTC::completeRTCRefresh()+0x271>
c00184ee:	f6 c3 80             	test   bl,0x80
c00184f1:	74 10                	je     c0018503 <RTC::completeRTCRefresh()+0x271>
c00184f3:	83 e3 7f             	and    ebx,0x7f
c00184f6:	b9 18 00 00 00       	mov    ecx,0x18
c00184fb:	8d 43 0c             	lea    eax,[ebx+0xc]
c00184fe:	99                   	cdq    
c00184ff:	f7 f9                	idiv   ecx
c0018501:	88 d3                	mov    bl,dl
c0018503:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018509:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c001850f:	77 06                	ja     c0018517 <RTC::completeRTCRefresh()+0x285>
c0018511:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018517:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001851c:	31 c9                	xor    ecx,ecx
c001851e:	31 d2                	xor    edx,edx
c0018520:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018524:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018528:	89 cd                	mov    ebp,ecx
c001852a:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001852e:	c1 e7 10             	shl    edi,0x10
c0018531:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018537:	c1 e0 10             	shl    eax,0x10
c001853a:	09 c5                	or     ebp,eax
c001853c:	89 e9                	mov    ecx,ebp
c001853e:	0f b7 c2             	movzx  eax,dx
c0018541:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018545:	09 f8                	or     eax,edi
c0018547:	89 c2                	mov    edx,eax
c0018549:	50                   	push   eax
c001854a:	50                   	push   eax
c001854b:	88 d9                	mov    cl,bl
c001854d:	51                   	push   ecx
c001854e:	52                   	push   edx
c001854f:	e8 e7 3d ff ff       	call   c000c33b <datetimeToSeconds(datetime_t)>
c0018554:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018558:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001855e:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018564:	83 c4 4c             	add    esp,0x4c
c0018567:	5b                   	pop    ebx
c0018568:	5e                   	pop    esi
c0018569:	5f                   	pop    edi
c001856a:	5d                   	pop    ebp
c001856b:	c3                   	ret    

c001856c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001856c:	55                   	push   ebp
c001856d:	57                   	push   edi
c001856e:	56                   	push   esi
c001856f:	53                   	push   ebx
c0018570:	83 ec 30             	sub    esp,0x30
c0018573:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018577:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001857b:	6a 00                	push   0x0
c001857d:	6a 00                	push   0x0
c001857f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018585:	e8 28 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001858a:	83 c4 0c             	add    esp,0xc
c001858d:	6a 00                	push   0x0
c001858f:	6a 02                	push   0x2
c0018591:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018597:	e8 16 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001859c:	89 f8                	mov    eax,edi
c001859e:	89 f9                	mov    ecx,edi
c00185a0:	0f b6 c4             	movzx  eax,ah
c00185a3:	31 d2                	xor    edx,edx
c00185a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185a9:	c1 e9 10             	shr    ecx,0x10
c00185ac:	89 f0                	mov    eax,esi
c00185ae:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00185b2:	89 f0                	mov    eax,esi
c00185b4:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00185b8:	0f b6 c4             	movzx  eax,ah
c00185bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185bf:	89 f0                	mov    eax,esi
c00185c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00185c5:	c1 e8 10             	shr    eax,0x10
c00185c8:	b9 64 00 00 00       	mov    ecx,0x64
c00185cd:	f7 f1                	div    ecx
c00185cf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00185d3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00185d7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00185db:	59                   	pop    ecx
c00185dc:	5b                   	pop    ebx
c00185dd:	89 fb                	mov    ebx,edi
c00185df:	6a 0b                	push   0xb
c00185e1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185e7:	e8 ae eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00185ec:	83 c4 10             	add    esp,0x10
c00185ef:	a8 04                	test   al,0x4
c00185f1:	89 c5                	mov    ebp,eax
c00185f3:	75 6e                	jne    c0018663 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00185f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00185f9:	31 d2                	xor    edx,edx
c00185fb:	0f b6 c1             	movzx  eax,cl
c00185fe:	b9 0a 00 00 00       	mov    ecx,0xa
c0018603:	f7 f1                	div    ecx
c0018605:	c1 e0 04             	shl    eax,0x4
c0018608:	09 d0                	or     eax,edx
c001860a:	31 d2                	xor    edx,edx
c001860c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018610:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018615:	f7 f1                	div    ecx
c0018617:	c1 e0 04             	shl    eax,0x4
c001861a:	09 d0                	or     eax,edx
c001861c:	31 d2                	xor    edx,edx
c001861e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018622:	0f b6 c3             	movzx  eax,bl
c0018625:	f7 f1                	div    ecx
c0018627:	c1 e0 04             	shl    eax,0x4
c001862a:	09 d0                	or     eax,edx
c001862c:	31 d2                	xor    edx,edx
c001862e:	89 c3                	mov    ebx,eax
c0018630:	89 f0                	mov    eax,esi
c0018632:	0f b6 c0             	movzx  eax,al
c0018635:	f7 f1                	div    ecx
c0018637:	c1 e0 04             	shl    eax,0x4
c001863a:	09 d0                	or     eax,edx
c001863c:	31 d2                	xor    edx,edx
c001863e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018642:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018647:	f7 f1                	div    ecx
c0018649:	c1 e0 04             	shl    eax,0x4
c001864c:	09 d0                	or     eax,edx
c001864e:	31 d2                	xor    edx,edx
c0018650:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018654:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018658:	f7 f1                	div    ecx
c001865a:	c1 e0 04             	shl    eax,0x4
c001865d:	09 d0                	or     eax,edx
c001865f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018663:	83 e5 02             	and    ebp,0x2
c0018666:	75 1e                	jne    c0018686 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018668:	0f b6 c3             	movzx  eax,bl
c001866b:	83 f8 0b             	cmp    eax,0xb
c001866e:	76 10                	jbe    c0018680 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018670:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018673:	84 d2                	test   dl,dl
c0018675:	88 d3                	mov    bl,dl
c0018677:	75 02                	jne    c001867b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018679:	b3 0c                	mov    bl,0xc
c001867b:	83 cb 80             	or     ebx,0xffffff80
c001867e:	eb 06                	jmp    c0018686 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018680:	85 c0                	test   eax,eax
c0018682:	75 02                	jne    c0018686 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018684:	b3 0c                	mov    bl,0xc
c0018686:	50                   	push   eax
c0018687:	0f b6 db             	movzx  ebx,bl
c001868a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001868f:	52                   	push   edx
c0018690:	6a 00                	push   0x0
c0018692:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018698:	e8 15 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001869d:	83 c4 0c             	add    esp,0xc
c00186a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186a5:	50                   	push   eax
c00186a6:	6a 02                	push   0x2
c00186a8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186ae:	e8 ff eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186b3:	83 c4 0c             	add    esp,0xc
c00186b6:	53                   	push   ebx
c00186b7:	6a 04                	push   0x4
c00186b9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186bf:	e8 ee eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186c4:	83 c4 0c             	add    esp,0xc
c00186c7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00186cc:	52                   	push   edx
c00186cd:	6a 07                	push   0x7
c00186cf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186d5:	e8 d8 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186da:	83 c4 0c             	add    esp,0xc
c00186dd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00186e2:	50                   	push   eax
c00186e3:	6a 08                	push   0x8
c00186e5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186eb:	e8 c2 eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186f0:	83 c4 0c             	add    esp,0xc
c00186f3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00186f8:	55                   	push   ebp
c00186f9:	6a 09                	push   0x9
c00186fb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018701:	e8 ac eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018706:	5a                   	pop    edx
c0018707:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001870b:	e8 82 fb ff ff       	call   c0018292 <RTC::completeRTCRefresh()>
c0018710:	83 c4 3c             	add    esp,0x3c
c0018713:	b0 01                	mov    al,0x1
c0018715:	5b                   	pop    ebx
c0018716:	5e                   	pop    esi
c0018717:	5f                   	pop    edi
c0018718:	5d                   	pop    ebp
c0018719:	c3                   	ret    

c001871a <rtcIRQHandler(regs*, void*)>:
c001871a:	53                   	push   ebx
c001871b:	83 ec 10             	sub    esp,0x10
c001871e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018722:	6a 0c                	push   0xc
c0018724:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001872a:	e8 6b ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	a8 80                	test   al,0x80
c0018734:	74 24                	je     c001875a <rtcIRQHandler(regs*, void*)+0x40>
c0018736:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001873d:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018744:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c001874b:	75 0d                	jne    c001875a <rtcIRQHandler(regs*, void*)+0x40>
c001874d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018751:	83 c4 08             	add    esp,0x8
c0018754:	5b                   	pop    ebx
c0018755:	e9 38 fb ff ff       	jmp    c0018292 <RTC::completeRTCRefresh()>
c001875a:	83 c4 08             	add    esp,0x8
c001875d:	5b                   	pop    ebx
c001875e:	c3                   	ret    
c001875f:	90                   	nop

c0018760 <RTC::RTC()>:
c0018760:	83 ec 1c             	sub    esp,0x1c
c0018763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018767:	83 ec 08             	sub    esp,0x8
c001876a:	68 6f 28 02 c0       	push   0xc002286f
c001876f:	50                   	push   eax
c0018770:	e8 a1 3a ff ff       	call   c000c216 <Clock::Clock(char const*)>
c0018775:	83 c4 10             	add    esp,0x10
c0018778:	ba 8c 28 02 c0       	mov    edx,0xc002288c
c001877d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018781:	89 10                	mov    DWORD PTR [eax],edx
c0018783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878e:	6a 01                	push   0x1
c0018790:	68 1a 87 01 c0       	push   0xc001871a
c0018795:	6a 08                	push   0x8
c0018797:	50                   	push   eax
c0018798:	e8 5b 3f ff ff       	call   c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001879d:	83 c4 20             	add    esp,0x20
c00187a0:	89 c2                	mov    edx,eax
c00187a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00187ac:	fa                   	cli    
c00187ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187b2:	83 c0 01             	add    eax,0x1
c00187b5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00187ba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187bf:	83 ec 08             	sub    esp,0x8
c00187c2:	6a 0b                	push   0xb
c00187c4:	50                   	push   eax
c00187c5:	e8 d0 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187ca:	83 c4 10             	add    esp,0x10
c00187cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00187d1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187d6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00187da:	83 ca 10             	or     edx,0x10
c00187dd:	0f b6 d2             	movzx  edx,dl
c00187e0:	83 ec 04             	sub    esp,0x4
c00187e3:	52                   	push   edx
c00187e4:	6a 0b                	push   0xb
c00187e6:	50                   	push   eax
c00187e7:	e8 c6 ea fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187ec:	83 c4 10             	add    esp,0x10
c00187ef:	83 ec 0c             	sub    esp,0xc
c00187f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f6:	e8 97 fa ff ff       	call   c0018292 <RTC::completeRTCRefresh()>
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018803:	83 e8 01             	sub    eax,0x1
c0018806:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001880b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018810:	85 c0                	test   eax,eax
c0018812:	75 01                	jne    c0018815 <RTC::RTC()+0xb5>
c0018814:	fb                   	sti    
c0018815:	90                   	nop
c0018816:	83 c4 1c             	add    esp,0x1c
c0018819:	c3                   	ret    
c001881a:	66 90                	xchg   ax,ax

c001881c <HalConsoleScroll(int, int)>:
c001881c:	83 ec 10             	sub    esp,0x10
c001881f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018827:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001882f:	90                   	nop
c0018830:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018835:	0f 8f e1 00 00 00    	jg     c001891c <HalConsoleScroll(int, int)+0x100>
c001883b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018843:	90                   	nop
c0018844:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001884c:	0f 8f be 00 00 00    	jg     c0018910 <HalConsoleScroll(int, int)+0xf4>
c0018852:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018856:	89 d0                	mov    eax,edx
c0018858:	c1 e0 02             	shl    eax,0x2
c001885b:	01 d0                	add    eax,edx
c001885d:	c1 e0 05             	shl    eax,0x5
c0018860:	89 c2                	mov    edx,eax
c0018862:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018866:	01 d0                	add    eax,edx
c0018868:	89 c2                	mov    edx,eax
c001886a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001886e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018871:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018875:	89 d0                	mov    eax,edx
c0018877:	c1 e0 02             	shl    eax,0x2
c001887a:	01 d0                	add    eax,edx
c001887c:	c1 e0 05             	shl    eax,0x5
c001887f:	89 c2                	mov    edx,eax
c0018881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018885:	01 d0                	add    eax,edx
c0018887:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001888d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018891:	01 d0                	add    eax,edx
c0018893:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018895:	88 10                	mov    BYTE PTR [eax],dl
c0018897:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001889c:	75 66                	jne    c0018904 <HalConsoleScroll(int, int)+0xe8>
c001889e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188a2:	83 e0 01             	and    eax,0x1
c00188a5:	74 39                	je     c00188e0 <HalConsoleScroll(int, int)+0xc4>
c00188a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188ab:	83 e0 0f             	and    eax,0xf
c00188ae:	88 c2                	mov    dl,al
c00188b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188b4:	c1 e0 04             	shl    eax,0x4
c00188b7:	09 d0                	or     eax,edx
c00188b9:	88 c1                	mov    cl,al
c00188bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188bf:	89 d0                	mov    eax,edx
c00188c1:	c1 e0 02             	shl    eax,0x2
c00188c4:	01 d0                	add    eax,edx
c00188c6:	c1 e0 05             	shl    eax,0x5
c00188c9:	89 c2                	mov    edx,eax
c00188cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188cf:	01 d0                	add    eax,edx
c00188d1:	89 c2                	mov    edx,eax
c00188d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188d7:	01 d0                	add    eax,edx
c00188d9:	88 ca                	mov    dl,cl
c00188db:	88 10                	mov    BYTE PTR [eax],dl
c00188dd:	eb 25                	jmp    c0018904 <HalConsoleScroll(int, int)+0xe8>
c00188df:	90                   	nop
c00188e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188e4:	89 d0                	mov    eax,edx
c00188e6:	c1 e0 02             	shl    eax,0x2
c00188e9:	01 d0                	add    eax,edx
c00188eb:	c1 e0 05             	shl    eax,0x5
c00188ee:	89 c2                	mov    edx,eax
c00188f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188f4:	01 d0                	add    eax,edx
c00188f6:	89 c2                	mov    edx,eax
c00188f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188fc:	01 d0                	add    eax,edx
c00188fe:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018901:	8d 76 00             	lea    esi,[esi+0x0]
c0018904:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018909:	e9 36 ff ff ff       	jmp    c0018844 <HalConsoleScroll(int, int)+0x28>
c001890e:	66 90                	xchg   ax,ax
c0018910:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018915:	e9 16 ff ff ff       	jmp    c0018830 <HalConsoleScroll(int, int)+0x14>
c001891a:	66 90                	xchg   ax,ax
c001891c:	90                   	nop
c001891d:	83 c4 10             	add    esp,0x10
c0018920:	c3                   	ret    
c0018921:	8d 76 00             	lea    esi,[esi+0x0]

c0018924 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018924:	83 ec 14             	sub    esp,0x14
c0018927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001892b:	88 04 24             	mov    BYTE PTR [esp],al
c001892e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018931:	0f b6 c0             	movzx  eax,al
c0018934:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018938:	89 d1                	mov    ecx,edx
c001893a:	83 e1 0f             	and    ecx,0xf
c001893d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018941:	c1 e2 04             	shl    edx,0x4
c0018944:	0f b6 d2             	movzx  edx,dl
c0018947:	09 ca                	or     edx,ecx
c0018949:	c1 e2 08             	shl    edx,0x8
c001894c:	09 d0                	or     eax,edx
c001894e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018953:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001895b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001895f:	89 d0                	mov    eax,edx
c0018961:	c1 e0 02             	shl    eax,0x2
c0018964:	01 d0                	add    eax,edx
c0018966:	c1 e0 04             	shl    eax,0x4
c0018969:	89 c2                	mov    edx,eax
c001896b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001896f:	01 d0                	add    eax,edx
c0018971:	d1 e0                	shl    eax,1
c0018973:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018977:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001897b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018980:	66 89 10             	mov    WORD PTR [eax],dx
c0018983:	90                   	nop
c0018984:	83 c4 14             	add    esp,0x14
c0018987:	c3                   	ret    

c0018988 <HalConsoleCursorUpdate(int, int)>:
c0018988:	83 ec 20             	sub    esp,0x20
c001898b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001898f:	89 c2                	mov    edx,eax
c0018991:	c1 e2 02             	shl    edx,0x2
c0018994:	01 d0                	add    eax,edx
c0018996:	c1 e0 04             	shl    eax,0x4
c0018999:	89 c2                	mov    edx,eax
c001899b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001899f:	01 d0                	add    eax,edx
c00189a1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00189a6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00189ad:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00189b2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00189b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189ba:	ee                   	out    dx,al
c00189bb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189c0:	0f b6 c0             	movzx  eax,al
c00189c3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00189ca:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00189ce:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00189d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189d6:	ee                   	out    dx,al
c00189d7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00189de:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00189e3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00189e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189eb:	ee                   	out    dx,al
c00189ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00189f1:	c1 e8 08             	shr    eax,0x8
c00189f4:	0f b6 c0             	movzx  eax,al
c00189f7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00189fe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018a02:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018a06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a0a:	ee                   	out    dx,al
c0018a0b:	90                   	nop
c0018a0c:	83 c4 20             	add    esp,0x20
c0018a0f:	c3                   	ret    

c0018a10 <FAT::getName()>:
c0018a10:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0018a15:	c3                   	ret    
c0018a16:	66 90                	xchg   ax,ax

c0018a18 <FAT::tell(void*, unsigned long long*)>:
c0018a18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a1d:	75 09                	jne    c0018a28 <FAT::tell(void*, unsigned long long*)+0x10>
c0018a1f:	b8 04 00 00 00       	mov    eax,0x4
c0018a24:	c3                   	ret    
c0018a25:	8d 76 00             	lea    esi,[esi+0x0]
c0018a28:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a2d:	75 09                	jne    c0018a38 <FAT::tell(void*, unsigned long long*)+0x20>
c0018a2f:	b8 04 00 00 00       	mov    eax,0x4
c0018a34:	c3                   	ret    
c0018a35:	8d 76 00             	lea    esi,[esi+0x0]
c0018a38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a3c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018a3f:	ba 00 00 00 00       	mov    edx,0x0
c0018a44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a48:	89 01                	mov    DWORD PTR [ecx],eax
c0018a4a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a4d:	b8 00 00 00 00       	mov    eax,0x0
c0018a52:	c3                   	ret    
c0018a53:	90                   	nop

c0018a54 <FAT::stat(void*, unsigned long long*)>:
c0018a54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a59:	75 09                	jne    c0018a64 <FAT::stat(void*, unsigned long long*)+0x10>
c0018a5b:	b8 04 00 00 00       	mov    eax,0x4
c0018a60:	c3                   	ret    
c0018a61:	8d 76 00             	lea    esi,[esi+0x0]
c0018a64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a69:	75 09                	jne    c0018a74 <FAT::stat(void*, unsigned long long*)+0x20>
c0018a6b:	b8 04 00 00 00       	mov    eax,0x4
c0018a70:	c3                   	ret    
c0018a71:	8d 76 00             	lea    esi,[esi+0x0]
c0018a74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a7b:	ba 00 00 00 00       	mov    edx,0x0
c0018a80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a84:	89 01                	mov    DWORD PTR [ecx],eax
c0018a86:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a89:	b8 00 00 00 00       	mov    eax,0x0
c0018a8e:	c3                   	ret    
c0018a8f:	90                   	nop

c0018a90 <FAT::~FAT()>:
c0018a90:	83 ec 0c             	sub    esp,0xc
c0018a93:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c0018a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a9c:	89 10                	mov    DWORD PTR [eax],edx
c0018a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aa2:	83 ec 0c             	sub    esp,0xc
c0018aa5:	50                   	push   eax
c0018aa6:	e8 7b 2a ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0018aab:	83 c4 10             	add    esp,0x10
c0018aae:	90                   	nop
c0018aaf:	83 c4 0c             	add    esp,0xc
c0018ab2:	c3                   	ret    
c0018ab3:	90                   	nop

c0018ab4 <FAT::~FAT()>:
c0018ab4:	83 ec 0c             	sub    esp,0xc
c0018ab7:	83 ec 0c             	sub    esp,0xc
c0018aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018abe:	e8 cd ff ff ff       	call   c0018a90 <FAT::~FAT()>
c0018ac3:	83 c4 10             	add    esp,0x10
c0018ac6:	83 ec 08             	sub    esp,0x8
c0018ac9:	6a 08                	push   0x8
c0018acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018acf:	e8 38 1d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018ad4:	83 c4 10             	add    esp,0x10
c0018ad7:	83 c4 0c             	add    esp,0xc
c0018ada:	c3                   	ret    
c0018adb:	90                   	nop

c0018adc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018adc:	83 ec 1c             	sub    esp,0x1c
c0018adf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018ae6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018aeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aef:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018af6:	83 f8 ff             	cmp    eax,0xffffffff
c0018af9:	75 35                	jne    c0018b30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018afb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018aff:	88 c2                	mov    dl,al
c0018b01:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b06:	01 d0                	add    eax,edx
c0018b08:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b0c:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b16:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b1d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b26:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b2d:	eb 19                	jmp    c0018b48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018b2f:	90                   	nop
c0018b30:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b34:	88 c2                	mov    dl,al
c0018b36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b3a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b41:	01 d0                	add    eax,edx
c0018b43:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b47:	90                   	nop
c0018b48:	83 ec 04             	sub    esp,0x4
c0018b4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b53:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018b57:	50                   	push   eax
c0018b58:	e8 96 c4 fe ff       	call   c0004ff3 <f_getlabel>
c0018b5d:	83 c4 10             	add    esp,0x10
c0018b60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b64:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b69:	75 09                	jne    c0018b74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018b6b:	b8 00 00 00 00       	mov    eax,0x0
c0018b70:	eb 0a                	jmp    c0018b7c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018b72:	66 90                	xchg   ax,ax
c0018b74:	b8 01 00 00 00       	mov    eax,0x1
c0018b79:	8d 76 00             	lea    esi,[esi+0x0]
c0018b7c:	83 c4 1c             	add    esp,0x1c
c0018b7f:	c3                   	ret    

c0018b80 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018b80:	53                   	push   ebx
c0018b81:	83 ec 58             	sub    esp,0x58
c0018b84:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018b8c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018b90:	b9 00 00 00 00       	mov    ecx,0x0
c0018b95:	b8 3c 00 00 00       	mov    eax,0x3c
c0018b9a:	83 e0 f8             	and    eax,0xfffffff8
c0018b9d:	89 c3                	mov    ebx,eax
c0018b9f:	b8 00 00 00 00       	mov    eax,0x0
c0018ba4:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018ba8:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018bac:	83 c0 08             	add    eax,0x8
c0018baf:	39 d8                	cmp    eax,ebx
c0018bb1:	72 f1                	jb     c0018ba4 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018bb3:	01 c2                	add    edx,eax
c0018bb5:	89 0a                	mov    DWORD PTR [edx],ecx
c0018bb7:	83 c2 04             	add    edx,0x4
c0018bba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bbe:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0018bc8:	75 36                	jne    c0018c00 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018bca:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018bce:	88 c2                	mov    dl,al
c0018bd0:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bd5:	01 d0                	add    eax,edx
c0018bd7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018bdb:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018be1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018be5:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018bec:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bf1:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018bf5:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018bfc:	eb 1a                	jmp    c0018c18 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018bfe:	66 90                	xchg   ax,ax
c0018c00:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c04:	88 c2                	mov    dl,al
c0018c06:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c0a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c11:	01 d0                	add    eax,edx
c0018c13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c17:	90                   	nop
c0018c18:	83 ec 08             	sub    esp,0x8
c0018c1b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018c1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c23:	50                   	push   eax
c0018c24:	e8 47 7c fe ff       	call   c0000870 <strcat>
c0018c29:	83 c4 10             	add    esp,0x10
c0018c2c:	83 ec 0c             	sub    esp,0xc
c0018c2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c33:	50                   	push   eax
c0018c34:	e8 0e c5 fe ff       	call   c0005147 <f_setlabel>
c0018c39:	83 c4 10             	add    esp,0x10
c0018c3c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c40:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018c45:	75 09                	jne    c0018c50 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018c47:	b8 00 00 00 00       	mov    eax,0x0
c0018c4c:	eb 0a                	jmp    c0018c58 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018c4e:	66 90                	xchg   ax,ax
c0018c50:	b8 01 00 00 00       	mov    eax,0x1
c0018c55:	8d 76 00             	lea    esi,[esi+0x0]
c0018c58:	83 c4 58             	add    esp,0x58
c0018c5b:	5b                   	pop    ebx
c0018c5c:	c3                   	ret    
c0018c5d:	90                   	nop
c0018c5e:	66 90                	xchg   ax,ax

c0018c60 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018c60:	83 ec 2c             	sub    esp,0x2c
c0018c63:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c6b:	83 ec 08             	sub    esp,0x8
c0018c6e:	68 e4 28 02 c0       	push   0xc00228e4
c0018c73:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c77:	e8 04 7b fe ff       	call   c0000780 <strcmp>
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	85 c0                	test   eax,eax
c0018c81:	0f 94 c0             	sete   al
c0018c84:	0f b6 c0             	movzx  eax,al
c0018c87:	85 c0                	test   eax,eax
c0018c89:	74 0d                	je     c0018c98 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018c8b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c93:	e9 c0 00 00 00       	jmp    c0018d58 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c98:	83 ec 08             	sub    esp,0x8
c0018c9b:	68 d6 28 02 c0       	push   0xc00228d6
c0018ca0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ca4:	e8 d7 7a fe ff       	call   c0000780 <strcmp>
c0018ca9:	83 c4 10             	add    esp,0x10
c0018cac:	85 c0                	test   eax,eax
c0018cae:	0f 94 c0             	sete   al
c0018cb1:	0f b6 c0             	movzx  eax,al
c0018cb4:	85 c0                	test   eax,eax
c0018cb6:	74 10                	je     c0018cc8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018cb8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cc0:	e9 93 00 00 00       	jmp    c0018d58 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc8:	83 ec 08             	sub    esp,0x8
c0018ccb:	68 dc 28 02 c0       	push   0xc00228dc
c0018cd0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cd4:	e8 a7 7a fe ff       	call   c0000780 <strcmp>
c0018cd9:	83 c4 10             	add    esp,0x10
c0018cdc:	85 c0                	test   eax,eax
c0018cde:	0f 94 c0             	sete   al
c0018ce1:	0f b6 c0             	movzx  eax,al
c0018ce4:	85 c0                	test   eax,eax
c0018ce6:	74 0c                	je     c0018cf4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018ce8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cf0:	eb 66                	jmp    c0018d58 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cf2:	66 90                	xchg   ax,ax
c0018cf4:	83 ec 08             	sub    esp,0x8
c0018cf7:	68 9c 00 02 c0       	push   0xc002009c
c0018cfc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d00:	e8 7b 7a fe ff       	call   c0000780 <strcmp>
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	85 c0                	test   eax,eax
c0018d0a:	0f 94 c0             	sete   al
c0018d0d:	0f b6 c0             	movzx  eax,al
c0018d10:	85 c0                	test   eax,eax
c0018d12:	74 0c                	je     c0018d20 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018d14:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d1c:	eb 3a                	jmp    c0018d58 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d1e:	66 90                	xchg   ax,ax
c0018d20:	83 ec 08             	sub    esp,0x8
c0018d23:	68 e2 28 02 c0       	push   0xc00228e2
c0018d28:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d2c:	e8 4f 7a fe ff       	call   c0000780 <strcmp>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	85 c0                	test   eax,eax
c0018d36:	0f 94 c0             	sete   al
c0018d39:	0f b6 c0             	movzx  eax,al
c0018d3c:	85 c0                	test   eax,eax
c0018d3e:	74 0c                	je     c0018d4c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018d40:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018d48:	eb 0e                	jmp    c0018d58 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d4a:	66 90                	xchg   ax,ax
c0018d4c:	b8 08 00 00 00       	mov    eax,0x8
c0018d51:	e9 ea 00 00 00       	jmp    c0018e40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d56:	66 90                	xchg   ax,ax
c0018d58:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018d5f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d68:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d6f:	83 f8 ff             	cmp    eax,0xffffffff
c0018d72:	75 34                	jne    c0018da8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018d74:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d78:	88 c2                	mov    dl,al
c0018d7a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d7f:	01 d0                	add    eax,edx
c0018d81:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d85:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d8f:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d96:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d9f:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018da6:	eb 18                	jmp    c0018dc0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018da8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018dac:	88 c2                	mov    dl,al
c0018dae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018db2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018db9:	01 d0                	add    eax,edx
c0018dbb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018dbf:	90                   	nop
c0018dc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018dc4:	88 04 24             	mov    BYTE PTR [esp],al
c0018dc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018dcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018dcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018dd7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018ddc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	68 00 20 00 00       	push   0x2000
c0018dec:	e8 e2 ec fe ff       	call   c0007ad3 <malloc>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018df8:	68 00 20 00 00       	push   0x2000
c0018dfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e01:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e05:	50                   	push   eax
c0018e06:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e0a:	50                   	push   eax
c0018e0b:	e8 34 c6 fe ff       	call   c0005444 <f_mkfs>
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e1c:	75 0a                	jne    c0018e28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018e1e:	b8 00 00 00 00       	mov    eax,0x0
c0018e23:	eb 1b                	jmp    c0018e40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e25:	8d 76 00             	lea    esi,[esi+0x0]
c0018e28:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018e2d:	75 09                	jne    c0018e38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018e2f:	b8 09 00 00 00       	mov    eax,0x9
c0018e34:	eb 0a                	jmp    c0018e40 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e36:	66 90                	xchg   ax,ax
c0018e38:	b8 01 00 00 00       	mov    eax,0x1
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	83 c4 2c             	add    esp,0x2c
c0018e43:	c3                   	ret    

c0018e44 <FAT::tryMount(LogicalDisk*, int)>:
c0018e44:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018e4a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e4f:	83 f8 14             	cmp    eax,0x14
c0018e52:	75 18                	jne    c0018e6c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018e54:	83 ec 0c             	sub    esp,0xc
c0018e57:	68 e8 28 02 c0       	push   0xc00228e8
c0018e5c:	e8 88 84 ff ff       	call   c00112e9 <KePanic(char const*)>
c0018e61:	83 c4 10             	add    esp,0x10
c0018e64:	b0 00                	mov    al,0x0
c0018e66:	e9 ed 01 00 00       	jmp    c0019058 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e6b:	90                   	nop
c0018e6c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018e73:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e7f:	3d 00 02 00 00       	cmp    eax,0x200
c0018e84:	74 0a                	je     c0018e90 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018e86:	b0 00                	mov    al,0x0
c0018e88:	e9 cb 01 00 00       	jmp    c0019058 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e90:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018e98:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e9f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ea6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ea9:	74 09                	je     c0018eb4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018eab:	b0 01                	mov    al,0x1
c0018ead:	e9 a6 01 00 00       	jmp    c0019058 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018eb2:	66 90                	xchg   ax,ax
c0018eb4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018ebe:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018ec6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018ecd:	88 c2                	mov    dl,al
c0018ecf:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ed4:	01 d0                	add    eax,edx
c0018ed6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018edd:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018ee3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018eea:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ef1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ef6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018efd:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	68 34 02 00 00       	push   0x234
c0018f0c:	e8 c2 eb fe ff       	call   c0007ad3 <malloc>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018f1b:	83 ec 04             	sub    esp,0x4
c0018f1e:	6a 00                	push   0x0
c0018f20:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f27:	50                   	push   eax
c0018f28:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f2f:	e8 0a ad fe ff       	call   c0003c3e <f_mount>
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f3e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018f46:	74 1c                	je     c0018f64 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018f48:	83 ec 0c             	sub    esp,0xc
c0018f4b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f52:	e8 9c eb fe ff       	call   c0007af3 <rfree>
c0018f57:	83 c4 10             	add    esp,0x10
c0018f5a:	b0 00                	mov    al,0x0
c0018f5c:	e9 f7 00 00 00       	jmp    c0019058 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f61:	8d 76 00             	lea    esi,[esi+0x0]
c0018f64:	83 ec 04             	sub    esp,0x4
c0018f67:	68 00 01 00 00       	push   0x100
c0018f6c:	6a 00                	push   0x0
c0018f6e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f75:	50                   	push   eax
c0018f76:	e8 75 75 fe ff       	call   c00004f0 <memset>
c0018f7b:	83 c4 10             	add    esp,0x10
c0018f7e:	83 ec 08             	sub    esp,0x8
c0018f81:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f88:	50                   	push   eax
c0018f89:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f90:	50                   	push   eax
c0018f91:	e8 da 78 fe ff       	call   c0000870 <strcat>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	83 ec 08             	sub    esp,0x8
c0018f9c:	68 f6 28 02 c0       	push   0xc00228f6
c0018fa1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fa8:	50                   	push   eax
c0018fa9:	e8 c2 78 fe ff       	call   c0000870 <strcat>
c0018fae:	83 c4 10             	add    esp,0x10
c0018fb1:	83 ec 04             	sub    esp,0x4
c0018fb4:	6a 01                	push   0x1
c0018fb6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018fbd:	50                   	push   eax
c0018fbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fc2:	50                   	push   eax
c0018fc3:	e8 d8 ac fe ff       	call   c0003ca0 <f_open>
c0018fc8:	83 c4 10             	add    esp,0x10
c0018fcb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018fd2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018fd9:	85 c0                	test   eax,eax
c0018fdb:	74 0b                	je     c0018fe8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018fdd:	78 31                	js     c0019010 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fdf:	83 e8 04             	sub    eax,0x4
c0018fe2:	83 f8 01             	cmp    eax,0x1
c0018fe5:	77 29                	ja     c0019010 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fe7:	90                   	nop
c0018fe8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018ff0:	83 ec 0c             	sub    esp,0xc
c0018ff3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ff7:	50                   	push   eax
c0018ff8:	e8 53 b4 fe ff       	call   c0004450 <f_close>
c0018ffd:	83 c4 10             	add    esp,0x10
c0019000:	90                   	nop
c0019001:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019009:	85 c0                	test   eax,eax
c001900b:	74 43                	je     c0019050 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001900d:	eb 31                	jmp    c0019040 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001900f:	90                   	nop
c0019010:	83 ec 0c             	sub    esp,0xc
c0019013:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001901a:	e8 d4 ea fe ff       	call   c0007af3 <rfree>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	83 ec 04             	sub    esp,0x4
c0019025:	6a 00                	push   0x0
c0019027:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001902e:	50                   	push   eax
c001902f:	6a 00                	push   0x0
c0019031:	e8 08 ac fe ff       	call   c0003c3e <f_mount>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	b0 00                	mov    al,0x0
c001903b:	eb 1b                	jmp    c0019058 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001903d:	8d 76 00             	lea    esi,[esi+0x0]
c0019040:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019045:	83 c0 01             	add    eax,0x1
c0019048:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c001904d:	8d 76 00             	lea    esi,[esi+0x0]
c0019050:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019057:	90                   	nop
c0019058:	81 c4 4c 03 00 00    	add    esp,0x34c
c001905e:	c3                   	ret    
c001905f:	90                   	nop

c0019060 <FAT::allocateSwapfile(char const*, int)>:
c0019060:	55                   	push   ebp
c0019061:	57                   	push   edi
c0019062:	56                   	push   esi
c0019063:	53                   	push   ebx
c0019064:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001906a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019075:	83 ec 0c             	sub    esp,0xc
c0019078:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001907f:	e8 4f ea fe ff       	call   c0007ad3 <malloc>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	89 c7                	mov    edi,eax
c0019089:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001908e:	83 ec 04             	sub    esp,0x4
c0019091:	50                   	push   eax
c0019092:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019099:	57                   	push   edi
c001909a:	e8 83 27 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c001909f:	83 c4 10             	add    esp,0x10
c00190a2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00190a9:	83 ec 04             	sub    esp,0x4
c00190ac:	8d 44 24 13          	lea    eax,[esp+0x13]
c00190b0:	50                   	push   eax
c00190b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190b5:	50                   	push   eax
c00190b6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190bd:	e8 2a 2b ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c00190c2:	83 c4 10             	add    esp,0x10
c00190c5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00190cc:	c1 e0 14             	shl    eax,0x14
c00190cf:	89 c7                	mov    edi,eax
c00190d1:	89 c5                	mov    ebp,eax
c00190d3:	c1 fd 1f             	sar    ebp,0x1f
c00190d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190de:	89 f9                	mov    ecx,edi
c00190e0:	31 c1                	xor    ecx,eax
c00190e2:	89 cb                	mov    ebx,ecx
c00190e4:	89 e9                	mov    ecx,ebp
c00190e6:	31 d1                	xor    ecx,edx
c00190e8:	89 ce                	mov    esi,ecx
c00190ea:	89 f0                	mov    eax,esi
c00190ec:	09 d8                	or     eax,ebx
c00190ee:	0f 84 9c 00 00 00    	je     c0019190 <FAT::allocateSwapfile(char const*, int)+0x130>
c00190f4:	83 ec 0c             	sub    esp,0xc
c00190f7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190fe:	e8 b5 29 ff ff       	call   c000bab8 <File::unlink()>
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	83 ec 08             	sub    esp,0x8
c0019109:	6a 12                	push   0x12
c001910b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019112:	e8 d3 27 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019121:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019127:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001912e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019135:	c1 e0 14             	shl    eax,0x14
c0019138:	83 ec 04             	sub    esp,0x4
c001913b:	6a 01                	push   0x1
c001913d:	50                   	push   eax
c001913e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019145:	e8 8d c1 fe ff       	call   c00052d7 <f_expand>
c001914a:	83 c4 10             	add    esp,0x10
c001914d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019154:	8b 00                	mov    eax,DWORD PTR [eax]
c0019156:	83 c0 10             	add    eax,0x10
c0019159:	8b 00                	mov    eax,DWORD PTR [eax]
c001915b:	83 ec 0c             	sub    esp,0xc
c001915e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019162:	52                   	push   edx
c0019163:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019167:	52                   	push   edx
c0019168:	6a 00                	push   0x0
c001916a:	68 00 04 00 00       	push   0x400
c001916f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019176:	ff d0                	call   eax
c0019178:	83 c4 20             	add    esp,0x20
c001917b:	83 ec 0c             	sub    esp,0xc
c001917e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019185:	e8 be 27 ff ff       	call   c000b948 <File::close()>
c001918a:	83 c4 10             	add    esp,0x10
c001918d:	8d 76 00             	lea    esi,[esi+0x0]
c0019190:	83 ec 08             	sub    esp,0x8
c0019193:	6a 01                	push   0x1
c0019195:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001919c:	e8 49 27 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00191ad:	83 c0 0c             	add    eax,0xc
c00191b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00191b2:	83 ec 0c             	sub    esp,0xc
c00191b5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191b9:	52                   	push   edx
c00191ba:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00191be:	52                   	push   edx
c00191bf:	6a 00                	push   0x0
c00191c1:	6a 04                	push   0x4
c00191c3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00191ca:	ff d0                	call   eax
c00191cc:	83 c4 20             	add    esp,0x20
c00191cf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191d6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191dc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00191e3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00191ea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00191ed:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00191f4:	83 ec 0c             	sub    esp,0xc
c00191f7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191fe:	e8 45 27 ff ff       	call   c000b948 <File::close()>
c0019203:	83 c4 10             	add    esp,0x10
c0019206:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001920d:	ba 00 00 00 00       	mov    edx,0x0
c0019212:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019218:	5b                   	pop    ebx
c0019219:	5e                   	pop    esi
c001921a:	5f                   	pop    edi
c001921b:	5d                   	pop    ebp
c001921c:	c3                   	ret    
c001921d:	90                   	nop
c001921e:	66 90                	xchg   ax,ax

c0019220 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019220:	57                   	push   edi
c0019221:	56                   	push   esi
c0019222:	53                   	push   ebx
c0019223:	81 ec 50 02 00 00    	sub    esp,0x250
c0019229:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019231:	74 0d                	je     c0019240 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019233:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001923b:	75 0f                	jne    c001924c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001923d:	8d 76 00             	lea    esi,[esi+0x0]
c0019240:	b8 04 00 00 00       	mov    eax,0x4
c0019245:	e9 3a 01 00 00       	jmp    c0019384 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001924a:	66 90                	xchg   ax,ax
c001924c:	83 ec 08             	sub    esp,0x8
c001924f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019256:	50                   	push   eax
c0019257:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001925e:	e8 b9 b4 fe ff       	call   c000471c <f_readdir>
c0019263:	83 c4 10             	add    esp,0x10
c0019266:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001926d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019274:	83 ec 0c             	sub    esp,0xc
c0019277:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001927e:	83 c0 16             	add    eax,0x16
c0019281:	50                   	push   eax
c0019282:	e8 f9 72 fe ff       	call   c0000580 <strlen>
c0019287:	83 c4 10             	add    esp,0x10
c001928a:	ba 00 00 00 00       	mov    edx,0x0
c001928f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019293:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019297:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001929e:	0f b6 c0             	movzx  eax,al
c00192a1:	83 e0 10             	and    eax,0x10
c00192a4:	74 0a                	je     c00192b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00192a6:	b8 02 00 00 00       	mov    eax,0x2
c00192ab:	eb 0b                	jmp    c00192b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00192ad:	8d 76 00             	lea    esi,[esi+0x0]
c00192b0:	b8 01 00 00 00       	mov    eax,0x1
c00192b5:	8d 76 00             	lea    esi,[esi+0x0]
c00192b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192bc:	83 ec 08             	sub    esp,0x8
c00192bf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00192c6:	83 c0 16             	add    eax,0x16
c00192c9:	50                   	push   eax
c00192ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192ce:	83 c0 10             	add    eax,0x10
c00192d1:	50                   	push   eax
c00192d2:	e8 79 73 fe ff       	call   c0000650 <strcpy>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00192e1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00192e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192ec:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00192f3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00192fa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019301:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019308:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001930f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019316:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001931d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019324:	89 c6                	mov    esi,eax
c0019326:	89 d7                	mov    edi,edx
c0019328:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001932a:	89 c8                	mov    eax,ecx
c001932c:	89 fa                	mov    edx,edi
c001932e:	89 f3                	mov    ebx,esi
c0019330:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019337:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001933e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019345:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001934c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019352:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019359:	0f be c0             	movsx  eax,al
c001935c:	85 c0                	test   eax,eax
c001935e:	75 08                	jne    c0019368 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019360:	b8 07 00 00 00       	mov    eax,0x7
c0019365:	eb 1d                	jmp    c0019384 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019367:	90                   	nop
c0019368:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001936f:	85 c0                	test   eax,eax
c0019371:	75 09                	jne    c001937c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019373:	b8 00 00 00 00       	mov    eax,0x0
c0019378:	eb 0a                	jmp    c0019384 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001937a:	66 90                	xchg   ax,ax
c001937c:	b8 01 00 00 00       	mov    eax,0x1
c0019381:	8d 76 00             	lea    esi,[esi+0x0]
c0019384:	81 c4 50 02 00 00    	add    esp,0x250
c001938a:	5b                   	pop    ebx
c001938b:	5e                   	pop    esi
c001938c:	5f                   	pop    edi
c001938d:	c3                   	ret    
c001938e:	66 90                	xchg   ax,ax

c0019390 <FAT::read(void*, unsigned long, void*, int*)>:
c0019390:	83 ec 1c             	sub    esp,0x1c
c0019393:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019398:	74 0a                	je     c00193a4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001939a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001939f:	75 0b                	jne    c00193ac <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00193a1:	8d 76 00             	lea    esi,[esi+0x0]
c00193a4:	b8 04 00 00 00       	mov    eax,0x4
c00193a9:	eb 41                	jmp    c00193ec <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193ab:	90                   	nop
c00193ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193b0:	50                   	push   eax
c00193b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193bd:	e8 a1 ab fe ff       	call   c0003f63 <f_read>
c00193c2:	83 c4 10             	add    esp,0x10
c00193c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193cd:	89 c2                	mov    edx,eax
c00193cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193d3:	89 10                	mov    DWORD PTR [eax],edx
c00193d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193d9:	85 c0                	test   eax,eax
c00193db:	75 07                	jne    c00193e4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00193dd:	b8 00 00 00 00       	mov    eax,0x0
c00193e2:	eb 08                	jmp    c00193ec <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193e4:	b8 01 00 00 00       	mov    eax,0x1
c00193e9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ec:	83 c4 1c             	add    esp,0x1c
c00193ef:	c3                   	ret    

c00193f0 <FAT::write(void*, unsigned long, void*, int*)>:
c00193f0:	83 ec 1c             	sub    esp,0x1c
c00193f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193f8:	74 0a                	je     c0019404 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00193fa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193ff:	75 0b                	jne    c001940c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019401:	8d 76 00             	lea    esi,[esi+0x0]
c0019404:	b8 04 00 00 00       	mov    eax,0x4
c0019409:	eb 41                	jmp    c001944c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001940b:	90                   	nop
c001940c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019410:	50                   	push   eax
c0019411:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019415:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019419:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001941d:	e8 22 ad fe ff       	call   c0004144 <f_write>
c0019422:	83 c4 10             	add    esp,0x10
c0019425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001942d:	89 c2                	mov    edx,eax
c001942f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019433:	89 10                	mov    DWORD PTR [eax],edx
c0019435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019439:	85 c0                	test   eax,eax
c001943b:	75 07                	jne    c0019444 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001943d:	b8 00 00 00 00       	mov    eax,0x0
c0019442:	eb 08                	jmp    c001944c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019444:	b8 01 00 00 00       	mov    eax,0x1
c0019449:	8d 76 00             	lea    esi,[esi+0x0]
c001944c:	83 c4 1c             	add    esp,0x1c
c001944f:	c3                   	ret    

c0019450 <FAT::close(void*)>:
c0019450:	83 ec 1c             	sub    esp,0x1c
c0019453:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019458:	75 0a                	jne    c0019464 <FAT::close(void*)+0x14>
c001945a:	b8 04 00 00 00       	mov    eax,0x4
c001945f:	eb 3f                	jmp    c00194a0 <FAT::close(void*)+0x50>
c0019461:	8d 76 00             	lea    esi,[esi+0x0]
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001946b:	e8 e0 af fe ff       	call   c0004450 <f_close>
c0019470:	83 c4 10             	add    esp,0x10
c0019473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019477:	83 ec 0c             	sub    esp,0xc
c001947a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001947e:	e8 60 e6 fe ff       	call   c0007ae3 <free>
c0019483:	83 c4 10             	add    esp,0x10
c0019486:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001948a:	85 c0                	test   eax,eax
c001948c:	75 0a                	jne    c0019498 <FAT::close(void*)+0x48>
c001948e:	b8 00 00 00 00       	mov    eax,0x0
c0019493:	eb 0b                	jmp    c00194a0 <FAT::close(void*)+0x50>
c0019495:	8d 76 00             	lea    esi,[esi+0x0]
c0019498:	b8 01 00 00 00       	mov    eax,0x1
c001949d:	8d 76 00             	lea    esi,[esi+0x0]
c00194a0:	83 c4 1c             	add    esp,0x1c
c00194a3:	c3                   	ret    

c00194a4 <FAT::closeDir(void*)>:
c00194a4:	83 ec 1c             	sub    esp,0x1c
c00194a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194ac:	75 0a                	jne    c00194b8 <FAT::closeDir(void*)+0x14>
c00194ae:	b8 04 00 00 00       	mov    eax,0x4
c00194b3:	eb 3f                	jmp    c00194f4 <FAT::closeDir(void*)+0x50>
c00194b5:	8d 76 00             	lea    esi,[esi+0x0]
c00194b8:	83 ec 0c             	sub    esp,0xc
c00194bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194bf:	e8 36 b2 fe ff       	call   c00046fa <f_closedir>
c00194c4:	83 c4 10             	add    esp,0x10
c00194c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194cb:	83 ec 0c             	sub    esp,0xc
c00194ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194d2:	e8 0c e6 fe ff       	call   c0007ae3 <free>
c00194d7:	83 c4 10             	add    esp,0x10
c00194da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194de:	85 c0                	test   eax,eax
c00194e0:	75 0a                	jne    c00194ec <FAT::closeDir(void*)+0x48>
c00194e2:	b8 00 00 00 00       	mov    eax,0x0
c00194e7:	eb 0b                	jmp    c00194f4 <FAT::closeDir(void*)+0x50>
c00194e9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ec:	b8 01 00 00 00       	mov    eax,0x1
c00194f1:	8d 76 00             	lea    esi,[esi+0x0]
c00194f4:	83 c4 1c             	add    esp,0x1c
c00194f7:	c3                   	ret    

c00194f8 <FAT::truncate(void*, unsigned long long)>:
c00194f8:	83 ec 2c             	sub    esp,0x2c
c00194fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019503:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019507:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001950b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019510:	75 0a                	jne    c001951c <FAT::truncate(void*, unsigned long long)+0x24>
c0019512:	b8 04 00 00 00       	mov    eax,0x4
c0019517:	eb 47                	jmp    c0019560 <FAT::truncate(void*, unsigned long long)+0x68>
c0019519:	8d 76 00             	lea    esi,[esi+0x0]
c001951c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019520:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019523:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019527:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001952f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019533:	83 ec 08             	sub    esp,0x8
c0019536:	50                   	push   eax
c0019537:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001953b:	e8 3f af fe ff       	call   c000447f <f_lseek>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001954b:	85 c0                	test   eax,eax
c001954d:	75 09                	jne    c0019558 <FAT::truncate(void*, unsigned long long)+0x60>
c001954f:	b8 00 00 00 00       	mov    eax,0x0
c0019554:	eb 0a                	jmp    c0019560 <FAT::truncate(void*, unsigned long long)+0x68>
c0019556:	66 90                	xchg   ax,ax
c0019558:	b8 01 00 00 00       	mov    eax,0x1
c001955d:	8d 76 00             	lea    esi,[esi+0x0]
c0019560:	83 c4 2c             	add    esp,0x2c
c0019563:	c3                   	ret    

c0019564 <FAT::seek(void*, unsigned long long)>:
c0019564:	83 ec 2c             	sub    esp,0x2c
c0019567:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001956b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001956f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019577:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001957c:	75 0a                	jne    c0019588 <FAT::seek(void*, unsigned long long)+0x24>
c001957e:	b8 04 00 00 00       	mov    eax,0x4
c0019583:	eb 33                	jmp    c00195b8 <FAT::seek(void*, unsigned long long)+0x54>
c0019585:	8d 76 00             	lea    esi,[esi+0x0]
c0019588:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001958c:	83 ec 08             	sub    esp,0x8
c001958f:	50                   	push   eax
c0019590:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019594:	e8 e6 ae fe ff       	call   c000447f <f_lseek>
c0019599:	83 c4 10             	add    esp,0x10
c001959c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195a4:	85 c0                	test   eax,eax
c00195a6:	75 08                	jne    c00195b0 <FAT::seek(void*, unsigned long long)+0x4c>
c00195a8:	b8 00 00 00 00       	mov    eax,0x0
c00195ad:	eb 09                	jmp    c00195b8 <FAT::seek(void*, unsigned long long)+0x54>
c00195af:	90                   	nop
c00195b0:	b8 01 00 00 00       	mov    eax,0x1
c00195b5:	8d 76 00             	lea    esi,[esi+0x0]
c00195b8:	83 c4 2c             	add    esp,0x2c
c00195bb:	c3                   	ret    

c00195bc <fatWrapperReadDisk>:
c00195bc:	53                   	push   ebx
c00195bd:	83 ec 18             	sub    esp,0x18
c00195c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195cd:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00195d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195dc:	ba 00 00 00 00       	mov    edx,0x0
c00195e1:	83 ec 0c             	sub    esp,0xc
c00195e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195e8:	53                   	push   ebx
c00195e9:	52                   	push   edx
c00195ea:	50                   	push   eax
c00195eb:	51                   	push   ecx
c00195ec:	e8 45 45 ff ff       	call   c000db36 <LogicalDisk::read(unsigned long long, int, void*)>
c00195f1:	83 c4 20             	add    esp,0x20
c00195f4:	83 c4 18             	add    esp,0x18
c00195f7:	5b                   	pop    ebx
c00195f8:	c3                   	ret    
c00195f9:	8d 76 00             	lea    esi,[esi+0x0]

c00195fc <fatWrapperWriteDisk>:
c00195fc:	53                   	push   ebx
c00195fd:	83 ec 18             	sub    esp,0x18
c0019600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019604:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019608:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001960d:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019614:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019618:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001961c:	ba 00 00 00 00       	mov    edx,0x0
c0019621:	83 ec 0c             	sub    esp,0xc
c0019624:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019628:	53                   	push   ebx
c0019629:	52                   	push   edx
c001962a:	50                   	push   eax
c001962b:	51                   	push   ecx
c001962c:	e8 71 45 ff ff       	call   c000dba2 <LogicalDisk::write(unsigned long long, int, void*)>
c0019631:	83 c4 20             	add    esp,0x20
c0019634:	83 c4 18             	add    esp,0x18
c0019637:	5b                   	pop    ebx
c0019638:	c3                   	ret    
c0019639:	8d 76 00             	lea    esi,[esi+0x0]

c001963c <fatWrapperIoctl>:
c001963c:	53                   	push   ebx
c001963d:	83 ec 28             	sub    esp,0x28
c0019640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019644:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019648:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001964c:	88 d0                	mov    al,dl
c001964e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019652:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019657:	83 f8 02             	cmp    eax,0x2
c001965a:	75 34                	jne    c0019690 <fatWrapperIoctl+0x54>
c001965c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019660:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019664:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019669:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019670:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019676:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001967c:	89 c2                	mov    edx,eax
c001967e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019682:	66 89 10             	mov    WORD PTR [eax],dx
c0019685:	b8 00 00 00 00       	mov    eax,0x0
c001968a:	e9 c5 00 00 00       	jmp    c0019754 <fatWrapperIoctl+0x118>
c001968f:	90                   	nop
c0019690:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019695:	83 f8 01             	cmp    eax,0x1
c0019698:	75 6a                	jne    c0019704 <fatWrapperIoctl+0xc8>
c001969a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001969e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196a7:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00196ae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196b4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00196ba:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00196c0:	89 c8                	mov    eax,ecx
c00196c2:	89 da                	mov    edx,ebx
c00196c4:	0f a4 c2 0a          	shld   edx,eax,0xa
c00196c8:	c1 e0 0a             	shl    eax,0xa
c00196cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00196d0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00196d7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00196dd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00196e3:	89 cb                	mov    ebx,ecx
c00196e5:	c1 fb 1f             	sar    ebx,0x1f
c00196e8:	53                   	push   ebx
c00196e9:	51                   	push   ecx
c00196ea:	52                   	push   edx
c00196eb:	50                   	push   eax
c00196ec:	e8 af 5b 00 00       	call   c001f2a0 <__udivdi3>
c00196f1:	83 c4 10             	add    esp,0x10
c00196f4:	89 c2                	mov    edx,eax
c00196f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196fa:	89 10                	mov    DWORD PTR [eax],edx
c00196fc:	b8 00 00 00 00       	mov    eax,0x0
c0019701:	eb 51                	jmp    c0019754 <fatWrapperIoctl+0x118>
c0019703:	90                   	nop
c0019704:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019709:	85 c0                	test   eax,eax
c001970b:	75 07                	jne    c0019714 <fatWrapperIoctl+0xd8>
c001970d:	b8 00 00 00 00       	mov    eax,0x0
c0019712:	eb 40                	jmp    c0019754 <fatWrapperIoctl+0x118>
c0019714:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019719:	83 f8 03             	cmp    eax,0x3
c001971c:	75 1a                	jne    c0019738 <fatWrapperIoctl+0xfc>
c001971e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019722:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019726:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001972a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019730:	b8 00 00 00 00       	mov    eax,0x0
c0019735:	eb 1d                	jmp    c0019754 <fatWrapperIoctl+0x118>
c0019737:	90                   	nop
c0019738:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001973d:	83 f8 04             	cmp    eax,0x4
c0019740:	75 0a                	jne    c001974c <fatWrapperIoctl+0x110>
c0019742:	b8 00 00 00 00       	mov    eax,0x0
c0019747:	eb 0b                	jmp    c0019754 <fatWrapperIoctl+0x118>
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	b8 04 00 00 00       	mov    eax,0x4
c0019751:	8d 76 00             	lea    esi,[esi+0x0]
c0019754:	83 c4 28             	add    esp,0x28
c0019757:	5b                   	pop    ebx
c0019758:	c3                   	ret    
c0019759:	90                   	nop
c001975a:	66 90                	xchg   ax,ax

c001975c <FAT::FAT()>:
c001975c:	83 ec 1c             	sub    esp,0x1c
c001975f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019763:	83 ec 0c             	sub    esp,0xc
c0019766:	50                   	push   eax
c0019767:	e8 96 1d ff ff       	call   c000b502 <Filesystem::Filesystem()>
c001976c:	83 c4 10             	add    esp,0x10
c001976f:	ba 0c 29 02 c0       	mov    edx,0xc002290c
c0019774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019778:	89 10                	mov    DWORD PTR [eax],edx
c001977a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019784:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001978c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019791:	7f 19                	jg     c00197ac <FAT::FAT()+0x50>
c0019793:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019797:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00197a2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00197a7:	eb e3                	jmp    c001978c <FAT::FAT()+0x30>
c00197a9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ac:	90                   	nop
c00197ad:	83 c4 1c             	add    esp,0x1c
c00197b0:	c3                   	ret    
c00197b1:	90                   	nop
c00197b2:	66 90                	xchg   ax,ax

c00197b4 <FAT::fixFilepath(char*)>:
c00197b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197b8:	8a 00                	mov    al,BYTE PTR [eax]
c00197ba:	0f be c0             	movsx  eax,al
c00197bd:	83 f8 40             	cmp    eax,0x40
c00197c0:	7e 2e                	jle    c00197f0 <FAT::fixFilepath(char*)+0x3c>
c00197c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197c6:	8a 00                	mov    al,BYTE PTR [eax]
c00197c8:	83 e8 41             	sub    eax,0x41
c00197cb:	88 c2                	mov    dl,al
c00197cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197d1:	88 10                	mov    BYTE PTR [eax],dl
c00197d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197d7:	8a 00                	mov    al,BYTE PTR [eax]
c00197d9:	0f be c0             	movsx  eax,al
c00197dc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00197e3:	83 c0 30             	add    eax,0x30
c00197e6:	88 c2                	mov    dl,al
c00197e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197ec:	88 10                	mov    BYTE PTR [eax],dl
c00197ee:	66 90                	xchg   ax,ax
c00197f0:	90                   	nop
c00197f1:	c3                   	ret    
c00197f2:	66 90                	xchg   ax,ax

c00197f4 <FAT::open(char const*, void**, FileOpenMode)>:
c00197f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019802:	74 0c                	je     c0019810 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019804:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001980c:	75 0e                	jne    c001981c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001980e:	66 90                	xchg   ax,ax
c0019810:	b8 04 00 00 00       	mov    eax,0x4
c0019815:	e9 46 01 00 00       	jmp    c0019960 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001981a:	66 90                	xchg   ax,ax
c001981c:	83 ec 08             	sub    esp,0x8
c001981f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019826:	8d 44 24 14          	lea    eax,[esp+0x14]
c001982a:	50                   	push   eax
c001982b:	e8 20 6e fe ff       	call   c0000650 <strcpy>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	83 ec 08             	sub    esp,0x8
c0019836:	8d 44 24 10          	lea    eax,[esp+0x10]
c001983a:	50                   	push   eax
c001983b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019842:	e8 6d ff ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019847:	83 c4 10             	add    esp,0x10
c001984a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019852:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019859:	83 e0 01             	and    eax,0x1
c001985c:	74 12                	je     c0019870 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001985e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019865:	83 c8 01             	or     eax,0x1
c0019868:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001986f:	90                   	nop
c0019870:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019877:	83 e0 04             	and    eax,0x4
c001987a:	74 24                	je     c00198a0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001987c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019883:	83 c8 30             	or     eax,0x30
c0019886:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001988d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019894:	83 c8 02             	or     eax,0x2
c0019897:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001989e:	66 90                	xchg   ax,ax
c00198a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198a7:	83 e0 02             	and    eax,0x2
c00198aa:	74 14                	je     c00198c0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00198ac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198b3:	83 c8 02             	or     eax,0x2
c00198b6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198bd:	8d 76 00             	lea    esi,[esi+0x0]
c00198c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198c7:	83 e0 08             	and    eax,0x8
c00198ca:	74 14                	je     c00198e0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c00198cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198d3:	83 c8 04             	or     eax,0x4
c00198d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198dd:	8d 76 00             	lea    esi,[esi+0x0]
c00198e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198e7:	83 e0 10             	and    eax,0x10
c00198ea:	74 14                	je     c0019900 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00198ec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198f3:	83 c8 08             	or     eax,0x8
c00198f6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019900:	83 ec 0c             	sub    esp,0xc
c0019903:	68 28 02 00 00       	push   0x228
c0019908:	e8 c6 e1 fe ff       	call   c0007ad3 <malloc>
c001990d:	83 c4 10             	add    esp,0x10
c0019910:	89 c2                	mov    edx,eax
c0019912:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019919:	89 10                	mov    DWORD PTR [eax],edx
c001991b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019923:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001992a:	8b 00                	mov    eax,DWORD PTR [eax]
c001992c:	83 ec 04             	sub    esp,0x4
c001992f:	52                   	push   edx
c0019930:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019934:	52                   	push   edx
c0019935:	50                   	push   eax
c0019936:	e8 65 a3 fe ff       	call   c0003ca0 <f_open>
c001993b:	83 c4 10             	add    esp,0x10
c001993e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019945:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001994d:	74 09                	je     c0019958 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001994f:	b8 01 00 00 00       	mov    eax,0x1
c0019954:	eb 0a                	jmp    c0019960 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019956:	66 90                	xchg   ax,ax
c0019958:	b8 00 00 00 00       	mov    eax,0x0
c001995d:	8d 76 00             	lea    esi,[esi+0x0]
c0019960:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019966:	c3                   	ret    
c0019967:	90                   	nop

c0019968 <FAT::openDir(char const*, void**)>:
c0019968:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001996e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019976:	74 0c                	je     c0019984 <FAT::openDir(char const*, void**)+0x1c>
c0019978:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019980:	75 0e                	jne    c0019990 <FAT::openDir(char const*, void**)+0x28>
c0019982:	66 90                	xchg   ax,ax
c0019984:	b8 04 00 00 00       	mov    eax,0x4
c0019989:	e9 82 00 00 00       	jmp    c0019a10 <FAT::openDir(char const*, void**)+0xa8>
c001998e:	66 90                	xchg   ax,ax
c0019990:	83 ec 08             	sub    esp,0x8
c0019993:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001999a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001999e:	50                   	push   eax
c001999f:	e8 ac 6c fe ff       	call   c0000650 <strcpy>
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	83 ec 08             	sub    esp,0x8
c00199aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199ae:	50                   	push   eax
c00199af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199b6:	e8 f9 fd ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c00199bb:	83 c4 10             	add    esp,0x10
c00199be:	83 ec 0c             	sub    esp,0xc
c00199c1:	6a 30                	push   0x30
c00199c3:	e8 0b e1 fe ff       	call   c0007ad3 <malloc>
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	89 c2                	mov    edx,eax
c00199cd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199d4:	89 10                	mov    DWORD PTR [eax],edx
c00199d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00199dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00199df:	83 ec 08             	sub    esp,0x8
c00199e2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00199e6:	52                   	push   edx
c00199e7:	50                   	push   eax
c00199e8:	e8 42 ac fe ff       	call   c000462f <f_opendir>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199f7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00199ff:	74 07                	je     c0019a08 <FAT::openDir(char const*, void**)+0xa0>
c0019a01:	b8 01 00 00 00       	mov    eax,0x1
c0019a06:	eb 08                	jmp    c0019a10 <FAT::openDir(char const*, void**)+0xa8>
c0019a08:	b8 00 00 00 00       	mov    eax,0x0
c0019a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a10:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a16:	c3                   	ret    
c0019a17:	90                   	nop

c0019a18 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a18:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a1e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a26:	75 0c                	jne    c0019a34 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019a28:	b8 04 00 00 00       	mov    eax,0x4
c0019a2d:	e9 d6 00 00 00       	jmp    c0019b08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a32:	66 90                	xchg   ax,ax
c0019a34:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a3c:	75 0a                	jne    c0019a48 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019a3e:	b8 04 00 00 00       	mov    eax,0x4
c0019a43:	e9 c0 00 00 00       	jmp    c0019b08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a48:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a50:	75 0a                	jne    c0019a5c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019a52:	b8 04 00 00 00       	mov    eax,0x4
c0019a57:	e9 ac 00 00 00       	jmp    c0019b08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a5c:	83 ec 08             	sub    esp,0x8
c0019a5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a66:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a6d:	50                   	push   eax
c0019a6e:	e8 dd 6b fe ff       	call   c0000650 <strcpy>
c0019a73:	83 c4 10             	add    esp,0x10
c0019a76:	83 ec 08             	sub    esp,0x8
c0019a79:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a80:	50                   	push   eax
c0019a81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a88:	e8 27 fd ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019a8d:	83 c4 10             	add    esp,0x10
c0019a90:	83 ec 08             	sub    esp,0x8
c0019a93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019a97:	50                   	push   eax
c0019a98:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a9f:	50                   	push   eax
c0019aa0:	e8 09 ad fe ff       	call   c00047ae <f_stat>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019aaf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019ab6:	85 c0                	test   eax,eax
c0019ab8:	74 0a                	je     c0019ac4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019aba:	83 f8 04             	cmp    eax,0x4
c0019abd:	74 39                	je     c0019af8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019abf:	eb 3f                	jmp    c0019b00 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ac8:	0f b6 c0             	movzx  eax,al
c0019acb:	83 e0 10             	and    eax,0x10
c0019ace:	0f 95 c2             	setne  dl
c0019ad1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ad8:	88 10                	mov    BYTE PTR [eax],dl
c0019ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ade:	ba 00 00 00 00       	mov    edx,0x0
c0019ae3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019aea:	89 01                	mov    DWORD PTR [ecx],eax
c0019aec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019aef:	b8 00 00 00 00       	mov    eax,0x0
c0019af4:	eb 12                	jmp    c0019b08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019af6:	66 90                	xchg   ax,ax
c0019af8:	b8 02 00 00 00       	mov    eax,0x2
c0019afd:	eb 09                	jmp    c0019b08 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019aff:	90                   	nop
c0019b00:	b8 01 00 00 00       	mov    eax,0x1
c0019b05:	8d 76 00             	lea    esi,[esi+0x0]
c0019b08:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b0e:	c3                   	ret    
c0019b0f:	90                   	nop

c0019b10 <FAT::unlink(char const*)>:
c0019b10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b1e:	75 08                	jne    c0019b28 <FAT::unlink(char const*)+0x18>
c0019b20:	b8 04 00 00 00       	mov    eax,0x4
c0019b25:	eb 61                	jmp    c0019b88 <FAT::unlink(char const*)+0x78>
c0019b27:	90                   	nop
c0019b28:	83 ec 08             	sub    esp,0x8
c0019b2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b36:	50                   	push   eax
c0019b37:	e8 14 6b fe ff       	call   c0000650 <strcpy>
c0019b3c:	83 c4 10             	add    esp,0x10
c0019b3f:	83 ec 08             	sub    esp,0x8
c0019b42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b46:	50                   	push   eax
c0019b47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b4e:	e8 61 fc ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	83 ec 0c             	sub    esp,0xc
c0019b59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b5d:	50                   	push   eax
c0019b5e:	e8 bd ae fe ff       	call   c0004a20 <f_unlink>
c0019b63:	83 c4 10             	add    esp,0x10
c0019b66:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b6d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b74:	85 c0                	test   eax,eax
c0019b76:	75 08                	jne    c0019b80 <FAT::unlink(char const*)+0x70>
c0019b78:	b8 00 00 00 00       	mov    eax,0x0
c0019b7d:	eb 09                	jmp    c0019b88 <FAT::unlink(char const*)+0x78>
c0019b7f:	90                   	nop
c0019b80:	b8 01 00 00 00       	mov    eax,0x1
c0019b85:	8d 76 00             	lea    esi,[esi+0x0]
c0019b88:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b8e:	c3                   	ret    
c0019b8f:	90                   	nop

c0019b90 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b90:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b96:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019b9d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019ba4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ba8:	88 d0                	mov    al,dl
c0019baa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bae:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019bb6:	75 0c                	jne    c0019bc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019bb8:	b8 04 00 00 00       	mov    eax,0x4
c0019bbd:	e9 7e 01 00 00       	jmp    c0019d40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019bc2:	66 90                	xchg   ax,ax
c0019bc4:	83 ec 08             	sub    esp,0x8
c0019bc7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bd2:	50                   	push   eax
c0019bd3:	e8 78 6a fe ff       	call   c0000650 <strcpy>
c0019bd8:	83 c4 10             	add    esp,0x10
c0019bdb:	83 ec 08             	sub    esp,0x8
c0019bde:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019be2:	50                   	push   eax
c0019be3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019bea:	e8 c5 fb ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019bef:	83 c4 10             	add    esp,0x10
c0019bf2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019bfa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c02:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c07:	83 e0 01             	and    eax,0x1
c0019c0a:	74 14                	je     c0019c20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019c0c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c13:	83 c8 01             	or     eax,0x1
c0019c16:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c25:	83 e0 02             	and    eax,0x2
c0019c28:	74 12                	je     c0019c3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019c2a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c31:	83 c8 20             	or     eax,0x20
c0019c34:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c3b:	90                   	nop
c0019c3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c41:	83 e0 04             	and    eax,0x4
c0019c44:	74 12                	je     c0019c58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c46:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c4d:	83 c8 04             	or     eax,0x4
c0019c50:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c57:	90                   	nop
c0019c58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c5d:	83 e0 08             	and    eax,0x8
c0019c60:	74 12                	je     c0019c74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019c62:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c69:	83 c8 02             	or     eax,0x2
c0019c6c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c73:	90                   	nop
c0019c74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c79:	83 e0 01             	and    eax,0x1
c0019c7c:	74 12                	je     c0019c90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019c7e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c85:	83 c8 01             	or     eax,0x1
c0019c88:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c8f:	90                   	nop
c0019c90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c95:	83 e0 02             	and    eax,0x2
c0019c98:	74 12                	je     c0019cac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019c9a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ca1:	83 c8 20             	or     eax,0x20
c0019ca4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cab:	90                   	nop
c0019cac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cb1:	83 e0 04             	and    eax,0x4
c0019cb4:	74 12                	je     c0019cc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019cb6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cbd:	83 c8 04             	or     eax,0x4
c0019cc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cc7:	90                   	nop
c0019cc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ccd:	83 e0 08             	and    eax,0x8
c0019cd0:	74 12                	je     c0019ce4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019cd2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cd9:	83 c8 02             	or     eax,0x2
c0019cdc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ce3:	90                   	nop
c0019ce4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019ceb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cf2:	09 d0                	or     eax,edx
c0019cf4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cfb:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019d03:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d0b:	83 ec 04             	sub    esp,0x4
c0019d0e:	52                   	push   edx
c0019d0f:	50                   	push   eax
c0019d10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d14:	50                   	push   eax
c0019d15:	e8 79 b1 fe ff       	call   c0004e93 <f_chmod>
c0019d1a:	83 c4 10             	add    esp,0x10
c0019d1d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d24:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d2b:	85 c0                	test   eax,eax
c0019d2d:	75 09                	jne    c0019d38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019d2f:	b8 00 00 00 00       	mov    eax,0x0
c0019d34:	eb 0a                	jmp    c0019d40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019d36:	66 90                	xchg   ax,ax
c0019d38:	b8 01 00 00 00       	mov    eax,0x1
c0019d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d40:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d46:	c3                   	ret    
c0019d47:	90                   	nop

c0019d48 <FAT::rename(char const*, char const*)>:
c0019d48:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d4e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d56:	74 0c                	je     c0019d64 <FAT::rename(char const*, char const*)+0x1c>
c0019d58:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d60:	75 0e                	jne    c0019d70 <FAT::rename(char const*, char const*)+0x28>
c0019d62:	66 90                	xchg   ax,ax
c0019d64:	b8 04 00 00 00       	mov    eax,0x4
c0019d69:	e9 9e 00 00 00       	jmp    c0019e0c <FAT::rename(char const*, char const*)+0xc4>
c0019d6e:	66 90                	xchg   ax,ax
c0019d70:	83 ec 08             	sub    esp,0x8
c0019d73:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d7a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d81:	50                   	push   eax
c0019d82:	e8 c9 68 fe ff       	call   c0000650 <strcpy>
c0019d87:	83 c4 10             	add    esp,0x10
c0019d8a:	83 ec 08             	sub    esp,0x8
c0019d8d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d94:	50                   	push   eax
c0019d95:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d9c:	e8 13 fa ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	83 ec 08             	sub    esp,0x8
c0019da7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019dae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019db2:	50                   	push   eax
c0019db3:	e8 98 68 fe ff       	call   c0000650 <strcpy>
c0019db8:	83 c4 10             	add    esp,0x10
c0019dbb:	83 ec 08             	sub    esp,0x8
c0019dbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dc2:	50                   	push   eax
c0019dc3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019dca:	e8 e5 f9 ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019dcf:	83 c4 10             	add    esp,0x10
c0019dd2:	83 ec 08             	sub    esp,0x8
c0019dd5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dd9:	50                   	push   eax
c0019dda:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019de1:	50                   	push   eax
c0019de2:	e8 f4 ae fe ff       	call   c0004cdb <f_rename>
c0019de7:	83 c4 10             	add    esp,0x10
c0019dea:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019df1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019df8:	85 c0                	test   eax,eax
c0019dfa:	75 08                	jne    c0019e04 <FAT::rename(char const*, char const*)+0xbc>
c0019dfc:	b8 00 00 00 00       	mov    eax,0x0
c0019e01:	eb 09                	jmp    c0019e0c <FAT::rename(char const*, char const*)+0xc4>
c0019e03:	90                   	nop
c0019e04:	b8 01 00 00 00       	mov    eax,0x1
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e12:	c3                   	ret    
c0019e13:	90                   	nop

c0019e14 <FAT::mkdir(char const*)>:
c0019e14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e22:	75 08                	jne    c0019e2c <FAT::mkdir(char const*)+0x18>
c0019e24:	b8 04 00 00 00       	mov    eax,0x4
c0019e29:	eb 61                	jmp    c0019e8c <FAT::mkdir(char const*)+0x78>
c0019e2b:	90                   	nop
c0019e2c:	83 ec 08             	sub    esp,0x8
c0019e2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e36:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e3a:	50                   	push   eax
c0019e3b:	e8 10 68 fe ff       	call   c0000650 <strcpy>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	83 ec 08             	sub    esp,0x8
c0019e46:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e4a:	50                   	push   eax
c0019e4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e52:	e8 5d f9 ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019e57:	83 c4 10             	add    esp,0x10
c0019e5a:	83 ec 0c             	sub    esp,0xc
c0019e5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e61:	50                   	push   eax
c0019e62:	e8 d9 ac fe ff       	call   c0004b40 <f_mkdir>
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e71:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e78:	85 c0                	test   eax,eax
c0019e7a:	75 08                	jne    c0019e84 <FAT::mkdir(char const*)+0x70>
c0019e7c:	b8 00 00 00 00       	mov    eax,0x0
c0019e81:	eb 09                	jmp    c0019e8c <FAT::mkdir(char const*)+0x78>
c0019e83:	90                   	nop
c0019e84:	b8 01 00 00 00       	mov    eax,0x1
c0019e89:	8d 76 00             	lea    esi,[esi+0x0]
c0019e8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e92:	c3                   	ret    
c0019e93:	90                   	nop

c0019e94 <FAT::exists(char const*)>:
c0019e94:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e9a:	83 ec 08             	sub    esp,0x8
c0019e9d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ea4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ea8:	50                   	push   eax
c0019ea9:	e8 a2 67 fe ff       	call   c0000650 <strcpy>
c0019eae:	83 c4 10             	add    esp,0x10
c0019eb1:	83 ec 08             	sub    esp,0x8
c0019eb4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019eb8:	50                   	push   eax
c0019eb9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ec0:	e8 ef f8 ff ff       	call   c00197b4 <FAT::fixFilepath(char*)>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	83 ec 08             	sub    esp,0x8
c0019ecb:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019ed2:	50                   	push   eax
c0019ed3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ed7:	50                   	push   eax
c0019ed8:	e8 d1 a8 fe ff       	call   c00047ae <f_stat>
c0019edd:	83 c4 10             	add    esp,0x10
c0019ee0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ee7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019eee:	85 c0                	test   eax,eax
c0019ef0:	75 06                	jne    c0019ef8 <FAT::exists(char const*)+0x64>
c0019ef2:	b0 01                	mov    al,0x1
c0019ef4:	eb 06                	jmp    c0019efc <FAT::exists(char const*)+0x68>
c0019ef6:	66 90                	xchg   ax,ax
c0019ef8:	b0 00                	mov    al,0x0
c0019efa:	66 90                	xchg   ax,ax
c0019efc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f02:	c3                   	ret    
c0019f03:	90                   	nop

c0019f04 <isoReadDiscSectorHelper>:
c0019f04:	83 ec 2c             	sub    esp,0x2c
c0019f07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f0b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f0f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019f14:	83 e8 41             	sub    eax,0x41
c0019f17:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019f1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f22:	ba 00 00 00 00       	mov    edx,0x0
c0019f27:	83 ec 0c             	sub    esp,0xc
c0019f2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f2e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f32:	52                   	push   edx
c0019f33:	50                   	push   eax
c0019f34:	51                   	push   ecx
c0019f35:	e8 fc 3b ff ff       	call   c000db36 <LogicalDisk::read(unsigned long long, int, void*)>
c0019f3a:	83 c4 20             	add    esp,0x20
c0019f3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f41:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019f46:	74 0c                	je     c0019f54 <isoReadDiscSectorHelper+0x50>
c0019f48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f4c:	c1 e0 0b             	shl    eax,0xb
c0019f4f:	eb 0b                	jmp    c0019f5c <isoReadDiscSectorHelper+0x58>
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	b8 00 00 00 00       	mov    eax,0x0
c0019f59:	8d 76 00             	lea    esi,[esi+0x0]
c0019f5c:	83 c4 2c             	add    esp,0x2c
c0019f5f:	c3                   	ret    

c0019f60 <iso_kprintf>:
c0019f60:	83 ec 0c             	sub    esp,0xc
c0019f63:	83 ec 08             	sub    esp,0x8
c0019f66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f6a:	68 ba 26 02 c0       	push   0xc00226ba
c0019f6f:	e8 96 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f74:	83 c4 10             	add    esp,0x10
c0019f77:	90                   	nop
c0019f78:	83 c4 0c             	add    esp,0xc
c0019f7b:	c3                   	ret    

c0019f7c <iso_kprintfd>:
c0019f7c:	83 ec 0c             	sub    esp,0xc
c0019f7f:	83 ec 08             	sub    esp,0x8
c0019f82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f86:	68 7a 0e 02 c0       	push   0xc0020e7a
c0019f8b:	e8 7a 09 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019f90:	83 c4 10             	add    esp,0x10
c0019f93:	90                   	nop
c0019f94:	83 c4 0c             	add    esp,0xc
c0019f97:	c3                   	ret    

c0019f98 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019f98:	b8 08 00 00 00       	mov    eax,0x8
c0019f9d:	c3                   	ret    

c0019f9e <ISO9660::truncate(void*, unsigned long long)>:
c0019f9e:	b8 01 00 00 00       	mov    eax,0x1
c0019fa3:	c3                   	ret    

c0019fa4 <ISO9660::getName()>:
c0019fa4:	b8 70 29 02 c0       	mov    eax,0xc0022970
c0019fa9:	c3                   	ret    

c0019faa <ISO9660::closeDir(void*)>:
c0019faa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fae:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fb0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019fb3:	90                   	nop

c0019fb4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fb4:	b8 01 00 00 00       	mov    eax,0x1
c0019fb9:	c3                   	ret    

c0019fba <ISO9660::unlink(char const*)>:
c0019fba:	b8 01 00 00 00       	mov    eax,0x1
c0019fbf:	c3                   	ret    

c0019fc0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019fc0:	b8 03 00 00 00       	mov    eax,0x3
c0019fc5:	c3                   	ret    

c0019fc6 <ISO9660::rename(char const*, char const*)>:
c0019fc6:	b8 01 00 00 00       	mov    eax,0x1
c0019fcb:	c3                   	ret    

c0019fcc <ISO9660::mkdir(char const*)>:
c0019fcc:	b8 01 00 00 00       	mov    eax,0x1
c0019fd1:	c3                   	ret    

c0019fd2 <ISO9660::~ISO9660()>:
c0019fd2:	83 ec 0c             	sub    esp,0xc
c0019fd5:	ba b0 2a 02 c0       	mov    edx,0xc0022ab0
c0019fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fde:	89 10                	mov    DWORD PTR [eax],edx
c0019fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe4:	83 ec 0c             	sub    esp,0xc
c0019fe7:	50                   	push   eax
c0019fe8:	e8 39 15 ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0019fed:	83 c4 10             	add    esp,0x10
c0019ff0:	90                   	nop
c0019ff1:	83 c4 0c             	add    esp,0xc
c0019ff4:	c3                   	ret    
c0019ff5:	90                   	nop

c0019ff6 <ISO9660::~ISO9660()>:
c0019ff6:	83 ec 0c             	sub    esp,0xc
c0019ff9:	83 ec 0c             	sub    esp,0xc
c0019ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a000:	e8 cd ff ff ff       	call   c0019fd2 <ISO9660::~ISO9660()>
c001a005:	83 c4 10             	add    esp,0x10
c001a008:	83 ec 08             	sub    esp,0x8
c001a00b:	6a 08                	push   0x8
c001a00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a011:	e8 f6 07 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a016:	83 c4 10             	add    esp,0x10
c001a019:	83 c4 0c             	add    esp,0xc
c001a01c:	c3                   	ret    
c001a01d:	90                   	nop

c001a01e <ISO9660::exists(char const*)>:
c001a01e:	83 ec 18             	sub    esp,0x18
c001a021:	68 8b 29 02 c0       	push   0xc002298b
c001a026:	e8 be 72 ff ff       	call   c00112e9 <KePanic(char const*)>
c001a02b:	31 c0                	xor    eax,eax
c001a02d:	83 c4 1c             	add    esp,0x1c
c001a030:	c3                   	ret    
c001a031:	90                   	nop

c001a032 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a032:	56                   	push   esi
c001a033:	53                   	push   ebx
c001a034:	53                   	push   ebx
c001a035:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a039:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a03d:	85 db                	test   ebx,ebx
c001a03f:	0f 84 ca 00 00 00    	je     c001a10f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a045:	85 f6                	test   esi,esi
c001a047:	0f 84 c2 00 00 00    	je     c001a10f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a04d:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a052:	b8 03 00 00 00       	mov    eax,0x3
c001a057:	0f 85 b7 00 00 00    	jne    c001a114 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a05d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a05f:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a065:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a06c:	74 1b                	je     c001a089 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a06e:	85 c0                	test   eax,eax
c001a070:	74 10                	je     c001a082 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a072:	83 ec 0c             	sub    esp,0xc
c001a075:	68 a9 29 02 c0       	push   0xc00229a9
c001a07a:	e8 6a 72 ff ff       	call   c00112e9 <KePanic(char const*)>
c001a07f:	83 c4 10             	add    esp,0x10
c001a082:	8a 03                	mov    al,BYTE PTR [ebx]
c001a084:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a089:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a08c:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a093:	85 c0                	test   eax,eax
c001a095:	74 09                	je     c001a0a0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a097:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a09e:	74 48                	je     c001a0e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a0a0:	83 ec 0c             	sub    esp,0xc
c001a0a3:	68 b9 29 02 c0       	push   0xc00229b9
c001a0a8:	e8 5d 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0ad:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a0b0:	83 c4 10             	add    esp,0x10
c001a0b3:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0ba:	85 c0                	test   eax,eax
c001a0bc:	74 17                	je     c001a0d5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a0be:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a0c5:	83 ec 0c             	sub    esp,0xc
c001a0c8:	68 d9 29 02 c0       	push   0xc00229d9
c001a0cd:	e8 38 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a0d2:	83 c4 10             	add    esp,0x10
c001a0d5:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a0dc:	83 ec 0c             	sub    esp,0xc
c001a0df:	50                   	push   eax
c001a0e0:	e8 82 c9 fe ff       	call   c0006a67 <init_percd>
c001a0e5:	83 c4 10             	add    esp,0x10
c001a0e8:	51                   	push   ecx
c001a0e9:	83 c3 03             	add    ebx,0x3
c001a0ec:	51                   	push   ecx
c001a0ed:	6a 00                	push   0x0
c001a0ef:	53                   	push   ebx
c001a0f0:	e8 35 c4 fe ff       	call   c000652a <iso_open>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	89 c2                	mov    edx,eax
c001a0fa:	b8 01 00 00 00       	mov    eax,0x1
c001a0ff:	83 fa ff             	cmp    edx,0xffffffff
c001a102:	74 10                	je     c001a114 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a104:	83 c2 32             	add    edx,0x32
c001a107:	31 c0                	xor    eax,eax
c001a109:	01 d2                	add    edx,edx
c001a10b:	89 16                	mov    DWORD PTR [esi],edx
c001a10d:	eb 05                	jmp    c001a114 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a10f:	b8 04 00 00 00       	mov    eax,0x4
c001a114:	5a                   	pop    edx
c001a115:	5b                   	pop    ebx
c001a116:	5e                   	pop    esi
c001a117:	c3                   	ret    

c001a118 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a118:	53                   	push   ebx
c001a119:	83 ec 08             	sub    esp,0x8
c001a11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a120:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a124:	85 c0                	test   eax,eax
c001a126:	74 2d                	je     c001a155 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a128:	85 db                	test   ebx,ebx
c001a12a:	74 29                	je     c001a155 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a12c:	52                   	push   edx
c001a12d:	b9 02 00 00 00       	mov    ecx,0x2
c001a132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a136:	99                   	cdq    
c001a137:	f7 f9                	idiv   ecx
c001a139:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a13d:	83 e8 32             	sub    eax,0x32
c001a140:	50                   	push   eax
c001a141:	e8 8c c4 fe ff       	call   c00065d2 <iso_read>
c001a146:	83 c4 10             	add    esp,0x10
c001a149:	89 03                	mov    DWORD PTR [ebx],eax
c001a14b:	09 d0                	or     eax,edx
c001a14d:	0f 94 c0             	sete   al
c001a150:	0f b6 c0             	movzx  eax,al
c001a153:	eb 05                	jmp    c001a15a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a155:	b8 04 00 00 00       	mov    eax,0x4
c001a15a:	83 c4 08             	add    esp,0x8
c001a15d:	5b                   	pop    ebx
c001a15e:	c3                   	ret    
c001a15f:	90                   	nop

c001a160 <ISO9660::seek(void*, unsigned long long)>:
c001a160:	57                   	push   edi
c001a161:	b8 04 00 00 00       	mov    eax,0x4
c001a166:	56                   	push   esi
c001a167:	51                   	push   ecx
c001a168:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a16c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a170:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a174:	85 d2                	test   edx,edx
c001a176:	74 26                	je     c001a19e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a178:	89 d0                	mov    eax,edx
c001a17a:	b9 02 00 00 00       	mov    ecx,0x2
c001a17f:	6a 00                	push   0x0
c001a181:	99                   	cdq    
c001a182:	f7 f9                	idiv   ecx
c001a184:	57                   	push   edi
c001a185:	56                   	push   esi
c001a186:	83 e8 32             	sub    eax,0x32
c001a189:	50                   	push   eax
c001a18a:	e8 59 c5 fe ff       	call   c00066e8 <iso_seek>
c001a18f:	83 c4 10             	add    esp,0x10
c001a192:	31 f0                	xor    eax,esi
c001a194:	31 fa                	xor    edx,edi
c001a196:	09 d0                	or     eax,edx
c001a198:	0f 95 c0             	setne  al
c001a19b:	0f b6 c0             	movzx  eax,al
c001a19e:	5a                   	pop    edx
c001a19f:	5e                   	pop    esi
c001a1a0:	5f                   	pop    edi
c001a1a1:	c3                   	ret    

c001a1a2 <ISO9660::tell(void*, unsigned long long*)>:
c001a1a2:	53                   	push   ebx
c001a1a3:	83 ec 08             	sub    esp,0x8
c001a1a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1ae:	85 c0                	test   eax,eax
c001a1b0:	74 24                	je     c001a1d6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1b2:	85 db                	test   ebx,ebx
c001a1b4:	74 20                	je     c001a1d6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a1b6:	b9 02 00 00 00       	mov    ecx,0x2
c001a1bb:	99                   	cdq    
c001a1bc:	f7 f9                	idiv   ecx
c001a1be:	83 ec 0c             	sub    esp,0xc
c001a1c1:	83 e8 32             	sub    eax,0x32
c001a1c4:	50                   	push   eax
c001a1c5:	e8 a2 c5 fe ff       	call   c000676c <iso_tell>
c001a1ca:	83 c4 10             	add    esp,0x10
c001a1cd:	89 03                	mov    DWORD PTR [ebx],eax
c001a1cf:	31 c0                	xor    eax,eax
c001a1d1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a1d4:	eb 05                	jmp    c001a1db <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a1d6:	b8 04 00 00 00       	mov    eax,0x4
c001a1db:	83 c4 08             	add    esp,0x8
c001a1de:	5b                   	pop    ebx
c001a1df:	c3                   	ret    

c001a1e0 <ISO9660::stat(void*, unsigned long long*)>:
c001a1e0:	56                   	push   esi
c001a1e1:	53                   	push   ebx
c001a1e2:	83 ec 10             	sub    esp,0x10
c001a1e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a1ed:	68 fd 29 02 c0       	push   0xc00229fd
c001a1f2:	e8 13 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1f7:	83 c4 10             	add    esp,0x10
c001a1fa:	85 db                	test   ebx,ebx
c001a1fc:	74 2a                	je     c001a228 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a1fe:	85 f6                	test   esi,esi
c001a200:	74 26                	je     c001a228 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a202:	89 d8                	mov    eax,ebx
c001a204:	b9 02 00 00 00       	mov    ecx,0x2
c001a209:	99                   	cdq    
c001a20a:	83 ec 0c             	sub    esp,0xc
c001a20d:	f7 f9                	idiv   ecx
c001a20f:	83 e8 32             	sub    eax,0x32
c001a212:	50                   	push   eax
c001a213:	e8 85 c5 fe ff       	call   c000679d <iso_total>
c001a218:	83 c4 10             	add    esp,0x10
c001a21b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a222:	89 06                	mov    DWORD PTR [esi],eax
c001a224:	31 c0                	xor    eax,eax
c001a226:	eb 05                	jmp    c001a22d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a228:	b8 04 00 00 00       	mov    eax,0x4
c001a22d:	5a                   	pop    edx
c001a22e:	5b                   	pop    ebx
c001a22f:	5e                   	pop    esi
c001a230:	c3                   	ret    
c001a231:	90                   	nop

c001a232 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a232:	55                   	push   ebp
c001a233:	57                   	push   edi
c001a234:	56                   	push   esi
c001a235:	53                   	push   ebx
c001a236:	83 ec 18             	sub    esp,0x18
c001a239:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a23d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a241:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a245:	68 05 2a 02 c0       	push   0xc0022a05
c001a24a:	e8 bb 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	85 ff                	test   edi,edi
c001a254:	0f 94 c0             	sete   al
c001a257:	85 f6                	test   esi,esi
c001a259:	0f 94 c2             	sete   dl
c001a25c:	09 d0                	or     eax,edx
c001a25e:	a8 01                	test   al,0x1
c001a260:	0f 85 dd 00 00 00    	jne    c001a343 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a266:	85 db                	test   ebx,ebx
c001a268:	0f 84 d5 00 00 00    	je     c001a343 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a26e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a271:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a277:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a27e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a285:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a287:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a28d:	74 1b                	je     c001a2aa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a28f:	85 c0                	test   eax,eax
c001a291:	74 10                	je     c001a2a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a293:	83 ec 0c             	sub    esp,0xc
c001a296:	68 a9 29 02 c0       	push   0xc00229a9
c001a29b:	e8 49 70 ff ff       	call   c00112e9 <KePanic(char const*)>
c001a2a0:	83 c4 10             	add    esp,0x10
c001a2a3:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2a5:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a2aa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2ad:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2b4:	85 c0                	test   eax,eax
c001a2b6:	74 09                	je     c001a2c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a2b8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2bf:	74 51                	je     c001a312 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a2c1:	83 ec 0c             	sub    esp,0xc
c001a2c4:	68 0d 2a 02 c0       	push   0xc0022a0d
c001a2c9:	e8 3c 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2ce:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2d1:	83 c4 10             	add    esp,0x10
c001a2d4:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a2dc:	74 21                	je     c001a2ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a2de:	83 ec 0c             	sub    esp,0xc
c001a2e1:	68 2d 2a 02 c0       	push   0xc0022a2d
c001a2e6:	e8 1f 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a2eb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2ee:	83 c4 10             	add    esp,0x10
c001a2f1:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2f8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2ff:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a306:	83 ec 0c             	sub    esp,0xc
c001a309:	50                   	push   eax
c001a30a:	e8 58 c7 fe ff       	call   c0006a67 <init_percd>
c001a30f:	83 c4 10             	add    esp,0x10
c001a312:	52                   	push   edx
c001a313:	83 c3 03             	add    ebx,0x3
c001a316:	52                   	push   edx
c001a317:	6a 00                	push   0x0
c001a319:	53                   	push   ebx
c001a31a:	e8 0b c2 fe ff       	call   c000652a <iso_open>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	83 f8 ff             	cmp    eax,0xffffffff
c001a325:	89 c5                	mov    ebp,eax
c001a327:	75 21                	jne    c001a34a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a329:	50                   	push   eax
c001a32a:	50                   	push   eax
c001a32b:	6a 01                	push   0x1
c001a32d:	53                   	push   ebx
c001a32e:	e8 f7 c1 fe ff       	call   c000652a <iso_open>
c001a333:	83 c4 10             	add    esp,0x10
c001a336:	ba 02 00 00 00       	mov    edx,0x2
c001a33b:	40                   	inc    eax
c001a33c:	74 2b                	je     c001a369 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a33e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a341:	eb 24                	jmp    c001a367 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a343:	ba 04 00 00 00       	mov    edx,0x4
c001a348:	eb 1f                	jmp    c001a369 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a34a:	83 ec 0c             	sub    esp,0xc
c001a34d:	50                   	push   eax
c001a34e:	e8 4a c4 fe ff       	call   c000679d <iso_total>
c001a353:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a35a:	89 07                	mov    DWORD PTR [edi],eax
c001a35c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a35f:	e8 50 c2 fe ff       	call   c00065b4 <iso_close>
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	31 d2                	xor    edx,edx
c001a369:	83 c4 0c             	add    esp,0xc
c001a36c:	89 d0                	mov    eax,edx
c001a36e:	5b                   	pop    ebx
c001a36f:	5e                   	pop    esi
c001a370:	5f                   	pop    edi
c001a371:	5d                   	pop    ebp
c001a372:	c3                   	ret    
c001a373:	90                   	nop

c001a374 <ISO9660::close(void*)>:
c001a374:	83 ec 0c             	sub    esp,0xc
c001a377:	b8 04 00 00 00       	mov    eax,0x4
c001a37c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a380:	85 d2                	test   edx,edx
c001a382:	74 1b                	je     c001a39f <ISO9660::close(void*)+0x2b>
c001a384:	89 d0                	mov    eax,edx
c001a386:	b9 02 00 00 00       	mov    ecx,0x2
c001a38b:	99                   	cdq    
c001a38c:	83 ec 0c             	sub    esp,0xc
c001a38f:	f7 f9                	idiv   ecx
c001a391:	83 e8 32             	sub    eax,0x32
c001a394:	50                   	push   eax
c001a395:	e8 1a c2 fe ff       	call   c00065b4 <iso_close>
c001a39a:	83 c4 10             	add    esp,0x10
c001a39d:	31 c0                	xor    eax,eax
c001a39f:	83 c4 0c             	add    esp,0xc
c001a3a2:	c3                   	ret    
c001a3a3:	90                   	nop

c001a3a4 <ISO9660::openDir(char const*, void**)>:
c001a3a4:	56                   	push   esi
c001a3a5:	53                   	push   ebx
c001a3a6:	50                   	push   eax
c001a3a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3ab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a3af:	85 db                	test   ebx,ebx
c001a3b1:	0f 84 bd 00 00 00    	je     c001a474 <ISO9660::openDir(char const*, void**)+0xd0>
c001a3b7:	85 f6                	test   esi,esi
c001a3b9:	0f 84 b5 00 00 00    	je     c001a474 <ISO9660::openDir(char const*, void**)+0xd0>
c001a3bf:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a3c1:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a3c7:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3ce:	74 1b                	je     c001a3eb <ISO9660::openDir(char const*, void**)+0x47>
c001a3d0:	85 c0                	test   eax,eax
c001a3d2:	74 10                	je     c001a3e4 <ISO9660::openDir(char const*, void**)+0x40>
c001a3d4:	83 ec 0c             	sub    esp,0xc
c001a3d7:	68 a9 29 02 c0       	push   0xc00229a9
c001a3dc:	e8 08 6f ff ff       	call   c00112e9 <KePanic(char const*)>
c001a3e1:	83 c4 10             	add    esp,0x10
c001a3e4:	8a 03                	mov    al,BYTE PTR [ebx]
c001a3e6:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a3eb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3ee:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a3f5:	85 c0                	test   eax,eax
c001a3f7:	74 10                	je     c001a409 <ISO9660::openDir(char const*, void**)+0x65>
c001a3f9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a400:	74 1a                	je     c001a41c <ISO9660::openDir(char const*, void**)+0x78>
c001a402:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a409:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a410:	83 ec 0c             	sub    esp,0xc
c001a413:	50                   	push   eax
c001a414:	e8 4e c6 fe ff       	call   c0006a67 <init_percd>
c001a419:	83 c4 10             	add    esp,0x10
c001a41c:	50                   	push   eax
c001a41d:	83 c3 03             	add    ebx,0x3
c001a420:	50                   	push   eax
c001a421:	6a 01                	push   0x1
c001a423:	53                   	push   ebx
c001a424:	e8 01 c1 fe ff       	call   c000652a <iso_open>
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	83 f8 ff             	cmp    eax,0xffffffff
c001a42f:	89 c3                	mov    ebx,eax
c001a431:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a436:	75 1c                	jne    c001a454 <ISO9660::openDir(char const*, void**)+0xb0>
c001a438:	53                   	push   ebx
c001a439:	53                   	push   ebx
c001a43a:	68 51 2a 02 c0       	push   0xc0022a51
c001a43f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a445:	e8 62 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a44a:	83 c4 10             	add    esp,0x10
c001a44d:	b8 01 00 00 00       	mov    eax,0x1
c001a452:	eb 25                	jmp    c001a479 <ISO9660::openDir(char const*, void**)+0xd5>
c001a454:	51                   	push   ecx
c001a455:	01 db                	add    ebx,ebx
c001a457:	51                   	push   ecx
c001a458:	83 c3 65             	add    ebx,0x65
c001a45b:	68 64 2a 02 c0       	push   0xc0022a64
c001a460:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a466:	e8 41 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	31 c0                	xor    eax,eax
c001a470:	89 1e                	mov    DWORD PTR [esi],ebx
c001a472:	eb 05                	jmp    c001a479 <ISO9660::openDir(char const*, void**)+0xd5>
c001a474:	b8 04 00 00 00       	mov    eax,0x4
c001a479:	5a                   	pop    edx
c001a47a:	5b                   	pop    ebx
c001a47b:	5e                   	pop    esi
c001a47c:	c3                   	ret    
c001a47d:	90                   	nop

c001a47e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a47e:	55                   	push   ebp
c001a47f:	57                   	push   edi
c001a480:	56                   	push   esi
c001a481:	53                   	push   ebx
c001a482:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a488:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a48f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a496:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a49d:	85 db                	test   ebx,ebx
c001a49f:	0f 84 e4 00 00 00    	je     c001a589 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a4a5:	85 ed                	test   ebp,ebp
c001a4a7:	0f 84 dc 00 00 00    	je     c001a589 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a4ad:	83 ec 0c             	sub    esp,0xc
c001a4b0:	68 77 2a 02 c0       	push   0xc0022a77
c001a4b5:	e8 50 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4ba:	89 d8                	mov    eax,ebx
c001a4bc:	b9 02 00 00 00       	mov    ecx,0x2
c001a4c1:	99                   	cdq    
c001a4c2:	f7 f9                	idiv   ecx
c001a4c4:	83 e8 32             	sub    eax,0x32
c001a4c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4ca:	e8 20 c3 fe ff       	call   c00067ef <iso_readdir>
c001a4cf:	83 c4 10             	add    esp,0x10
c001a4d2:	85 c0                	test   eax,eax
c001a4d4:	89 c3                	mov    ebx,eax
c001a4d6:	75 38                	jne    c001a510 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a4d8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4dd:	53                   	push   ebx
c001a4de:	53                   	push   ebx
c001a4df:	68 82 2a 02 c0       	push   0xc0022a82
c001a4e4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4ea:	e8 bd e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a4ef:	83 c4 0c             	add    esp,0xc
c001a4f2:	68 10 01 00 00       	push   0x110
c001a4f7:	6a 00                	push   0x0
c001a4f9:	57                   	push   edi
c001a4fa:	e8 f1 5f fe ff       	call   c00004f0 <memset>
c001a4ff:	83 c4 10             	add    esp,0x10
c001a502:	b8 01 00 00 00       	mov    eax,0x1
c001a507:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a50e:	eb 7e                	jmp    c001a58e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a510:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a516:	8d 70 08             	lea    esi,[eax+0x8]
c001a519:	83 ec 0c             	sub    esp,0xc
c001a51c:	56                   	push   esi
c001a51d:	e8 5e 60 fe ff       	call   c0000580 <strlen>
c001a522:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a52a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a535:	75 0a                	jne    c001a541 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a537:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a53a:	b8 02 00 00 00       	mov    eax,0x2
c001a53f:	74 05                	je     c001a546 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a541:	b8 01 00 00 00       	mov    eax,0x1
c001a546:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a54a:	50                   	push   eax
c001a54b:	50                   	push   eax
c001a54c:	56                   	push   esi
c001a54d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a551:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a555:	50                   	push   eax
c001a556:	e8 f5 60 fe ff       	call   c0000650 <strcpy>
c001a55b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a562:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a564:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a56b:	5a                   	pop    edx
c001a56c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a571:	59                   	pop    ecx
c001a572:	68 95 2a 02 c0       	push   0xc0022a95
c001a577:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a57d:	e8 2a e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	31 c0                	xor    eax,eax
c001a587:	eb 05                	jmp    c001a58e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a589:	b8 04 00 00 00       	mov    eax,0x4
c001a58e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a594:	5b                   	pop    ebx
c001a595:	5e                   	pop    esi
c001a596:	5f                   	pop    edi
c001a597:	5d                   	pop    ebp
c001a598:	c3                   	ret    

c001a599 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a599:	57                   	push   edi
c001a59a:	56                   	push   esi
c001a59b:	53                   	push   ebx
c001a59c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5a4:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a5aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5ae:	0f be cb             	movsx  ecx,bl
c001a5b1:	75 0b                	jne    c001a5be <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a5b3:	0f be 05 c0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238c0
c001a5ba:	39 c8                	cmp    eax,ecx
c001a5bc:	74 47                	je     c001a605 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5be:	83 ec 0c             	sub    esp,0xc
c001a5c1:	31 d2                	xor    edx,edx
c001a5c3:	68 a0 98 02 c0       	push   0xc00298a0
c001a5c8:	6a 01                	push   0x1
c001a5ca:	52                   	push   edx
c001a5cb:	56                   	push   esi
c001a5cc:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a5d3:	e8 5e 35 ff ff       	call   c000db36 <LogicalDisk::read(unsigned long long, int, void*)>
c001a5d8:	83 c4 20             	add    esp,0x20
c001a5db:	85 c0                	test   eax,eax
c001a5dd:	75 0e                	jne    c001a5ed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a5df:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a5e5:	88 1d c0 38 02 c0    	mov    BYTE PTR ds:0xc00238c0,bl
c001a5eb:	eb 18                	jmp    c001a605 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5ed:	50                   	push   eax
c001a5ee:	68 00 08 00 00       	push   0x800
c001a5f3:	6a 00                	push   0x0
c001a5f5:	57                   	push   edi
c001a5f6:	e8 f5 5e fe ff       	call   c00004f0 <memset>
c001a5fb:	83 c4 10             	add    esp,0x10
c001a5fe:	b8 01 00 00 00       	mov    eax,0x1
c001a603:	eb 0e                	jmp    c001a613 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a605:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a60a:	b9 00 08 00 00       	mov    ecx,0x800
c001a60f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a611:	31 c0                	xor    eax,eax
c001a613:	5b                   	pop    ebx
c001a614:	5e                   	pop    esi
c001a615:	5f                   	pop    edi
c001a616:	c3                   	ret    
c001a617:	90                   	nop

c001a618 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a618:	53                   	push   ebx
c001a619:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a61f:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a629:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a630:	8d 58 41             	lea    ebx,[eax+0x41]
c001a633:	0f be db             	movsx  ebx,bl
c001a636:	53                   	push   ebx
c001a637:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a63b:	50                   	push   eax
c001a63c:	6a 10                	push   0x10
c001a63e:	e8 56 ff ff ff       	call   c001a599 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a643:	83 c4 10             	add    esp,0x10
c001a646:	31 d2                	xor    edx,edx
c001a648:	85 c0                	test   eax,eax
c001a64a:	75 33                	jne    c001a67f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a64c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a651:	75 2c                	jne    c001a67f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a653:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a658:	75 25                	jne    c001a67f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a65a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a65f:	75 1e                	jne    c001a67f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a661:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a666:	75 17                	jne    c001a67f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a668:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a66d:	75 10                	jne    c001a67f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a66f:	83 ec 0c             	sub    esp,0xc
c001a672:	53                   	push   ebx
c001a673:	e8 ef c3 fe ff       	call   c0006a67 <init_percd>
c001a678:	83 c4 10             	add    esp,0x10
c001a67b:	40                   	inc    eax
c001a67c:	0f 95 c2             	setne  dl
c001a67f:	81 c4 08 08 00 00    	add    esp,0x808
c001a685:	88 d0                	mov    al,dl
c001a687:	5b                   	pop    ebx
c001a688:	c3                   	ret    
c001a689:	90                   	nop

c001a68a <ISO9660::ISO9660()>:
c001a68a:	83 ec 0c             	sub    esp,0xc
c001a68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a691:	83 ec 0c             	sub    esp,0xc
c001a694:	50                   	push   eax
c001a695:	e8 68 0e ff ff       	call   c000b502 <Filesystem::Filesystem()>
c001a69a:	83 c4 10             	add    esp,0x10
c001a69d:	ba b0 2a 02 c0       	mov    edx,0xc0022ab0
c001a6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6a6:	89 10                	mov    DWORD PTR [eax],edx
c001a6a8:	e8 cc c4 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a6ad:	90                   	nop
c001a6ae:	83 c4 0c             	add    esp,0xc
c001a6b1:	c3                   	ret    

c001a6b2 <SoundCard::beginPlayback()>:
c001a6b2:	c7 44 24 04 14 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b14
c001a6ba:	e9 2a 6c ff ff       	jmp    c00112e9 <KePanic(char const*)>
c001a6bf:	90                   	nop

c001a6c0 <SoundCard::stopPlayback()>:
c001a6c0:	c7 44 24 04 14 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b14
c001a6c8:	e9 1c 6c ff ff       	jmp    c00112e9 <KePanic(char const*)>
c001a6cd:	90                   	nop

c001a6ce <SoundCard::SoundCard(char const*)>:
c001a6ce:	83 ec 1c             	sub    esp,0x1c
c001a6d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6d5:	83 ec 08             	sub    esp,0x8
c001a6d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6dc:	50                   	push   eax
c001a6dd:	e8 02 22 ff ff       	call   c000c8e4 <Device::Device(char const*)>
c001a6e2:	83 c4 10             	add    esp,0x10
c001a6e5:	ba 60 2b 02 c0       	mov    edx,0xc0022b60
c001a6ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ee:	89 10                	mov    DWORD PTR [eax],edx
c001a6f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6f4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ff:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a70d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a71b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a729:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a733:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a73b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a740:	7f 1a                	jg     c001a75c <SoundCard::SoundCard(char const*)+0x8e>
c001a742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a74a:	83 c2 54             	add    edx,0x54
c001a74d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a755:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a75a:	eb df                	jmp    c001a73b <SoundCard::SoundCard(char const*)+0x6d>
c001a75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a760:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a767:	90                   	nop
c001a768:	83 c4 1c             	add    esp,0x1c
c001a76b:	c3                   	ret    

c001a76c <SoundCard::~SoundCard()>:
c001a76c:	83 ec 0c             	sub    esp,0xc
c001a76f:	ba 60 2b 02 c0       	mov    edx,0xc0022b60
c001a774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a778:	89 10                	mov    DWORD PTR [eax],edx
c001a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a77e:	83 ec 0c             	sub    esp,0xc
c001a781:	50                   	push   eax
c001a782:	e8 c7 1e ff ff       	call   c000c64e <Device::~Device()>
c001a787:	83 c4 10             	add    esp,0x10
c001a78a:	90                   	nop
c001a78b:	83 c4 0c             	add    esp,0xc
c001a78e:	c3                   	ret    
c001a78f:	90                   	nop

c001a790 <SoundCard::~SoundCard()>:
c001a790:	83 ec 0c             	sub    esp,0xc
c001a793:	83 ec 0c             	sub    esp,0xc
c001a796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a79a:	e8 cd ff ff ff       	call   c001a76c <SoundCard::~SoundCard()>
c001a79f:	83 c4 10             	add    esp,0x10
c001a7a2:	83 ec 08             	sub    esp,0x8
c001a7a5:	68 e8 01 00 00       	push   0x1e8
c001a7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ae:	e8 59 00 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a7b3:	83 c4 10             	add    esp,0x10
c001a7b6:	83 c4 0c             	add    esp,0xc
c001a7b9:	c3                   	ret    

c001a7ba <SoundCard::configureRates(int, int, int)>:
c001a7ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7be:	31 c0                	xor    eax,eax
c001a7c0:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a7c7:	75 20                	jne    c001a7e9 <SoundCard::configureRates(int, int, int)+0x2f>
c001a7c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7cd:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a7d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7d7:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7e1:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a7e7:	b0 01                	mov    al,0x1
c001a7e9:	c3                   	ret    

c001a7ea <SoundCard::getSamples16(int, short*)>:
c001a7ea:	55                   	push   ebp
c001a7eb:	57                   	push   edi
c001a7ec:	31 ff                	xor    edi,edi
c001a7ee:	56                   	push   esi
c001a7ef:	53                   	push   ebx
c001a7f0:	31 db                	xor    ebx,ebx
c001a7f2:	83 ec 10             	sub    esp,0x10
c001a7f5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a7f9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a7fd:	8d 04 36             	lea    eax,[esi+esi*1]
c001a800:	50                   	push   eax
c001a801:	6a 00                	push   0x0
c001a803:	55                   	push   ebp
c001a804:	e8 e7 5c fe ff       	call   c00004f0 <memset>
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a810:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a817:	85 c0                	test   eax,eax
c001a819:	74 1a                	je     c001a835 <SoundCard::getSamples16(int, short*)+0x4b>
c001a81b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a81f:	75 14                	jne    c001a835 <SoundCard::getSamples16(int, short*)+0x4b>
c001a821:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a825:	55                   	push   ebp
c001a826:	56                   	push   esi
c001a827:	50                   	push   eax
c001a828:	e8 f3 02 00 00       	call   c001ab20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a82d:	83 c4 10             	add    esp,0x10
c001a830:	39 c3                	cmp    ebx,eax
c001a832:	0f 4c d8             	cmovl  ebx,eax
c001a835:	47                   	inc    edi
c001a836:	83 ff 20             	cmp    edi,0x20
c001a839:	75 d1                	jne    c001a80c <SoundCard::getSamples16(int, short*)+0x22>
c001a83b:	83 c4 0c             	add    esp,0xc
c001a83e:	89 d8                	mov    eax,ebx
c001a840:	5b                   	pop    ebx
c001a841:	5e                   	pop    esi
c001a842:	5f                   	pop    edi
c001a843:	5d                   	pop    ebp
c001a844:	c3                   	ret    
c001a845:	90                   	nop

c001a846 <SoundCard::getSamples32(int, int*)>:
c001a846:	55                   	push   ebp
c001a847:	57                   	push   edi
c001a848:	31 ff                	xor    edi,edi
c001a84a:	56                   	push   esi
c001a84b:	31 f6                	xor    esi,esi
c001a84d:	53                   	push   ebx
c001a84e:	83 ec 10             	sub    esp,0x10
c001a851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a855:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a859:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a85d:	c1 e0 02             	shl    eax,0x2
c001a860:	50                   	push   eax
c001a861:	6a 00                	push   0x0
c001a863:	55                   	push   ebp
c001a864:	e8 87 5c fe ff       	call   c00004f0 <memset>
c001a869:	83 c4 10             	add    esp,0x10
c001a86c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a873:	85 c0                	test   eax,eax
c001a875:	74 1a                	je     c001a891 <SoundCard::getSamples32(int, int*)+0x4b>
c001a877:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a87b:	75 14                	jne    c001a891 <SoundCard::getSamples32(int, int*)+0x4b>
c001a87d:	53                   	push   ebx
c001a87e:	55                   	push   ebp
c001a87f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a883:	50                   	push   eax
c001a884:	e8 67 03 00 00       	call   c001abf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a889:	83 c4 10             	add    esp,0x10
c001a88c:	39 c6                	cmp    esi,eax
c001a88e:	0f 4c f0             	cmovl  esi,eax
c001a891:	47                   	inc    edi
c001a892:	83 ff 20             	cmp    edi,0x20
c001a895:	75 d5                	jne    c001a86c <SoundCard::getSamples32(int, int*)+0x26>
c001a897:	85 f6                	test   esi,esi
c001a899:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a8a0:	75 0f                	jne    c001a8b1 <SoundCard::getSamples32(int, int*)+0x6b>
c001a8a2:	85 c0                	test   eax,eax
c001a8a4:	74 1b                	je     c001a8c1 <SoundCard::getSamples32(int, int*)+0x7b>
c001a8a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8a8:	83 ec 0c             	sub    esp,0xc
c001a8ab:	53                   	push   ebx
c001a8ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a8af:	eb 0d                	jmp    c001a8be <SoundCard::getSamples32(int, int*)+0x78>
c001a8b1:	85 c0                	test   eax,eax
c001a8b3:	75 0c                	jne    c001a8c1 <SoundCard::getSamples32(int, int*)+0x7b>
c001a8b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8b7:	83 ec 0c             	sub    esp,0xc
c001a8ba:	53                   	push   ebx
c001a8bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	83 c4 0c             	add    esp,0xc
c001a8c4:	89 f0                	mov    eax,esi
c001a8c6:	5b                   	pop    ebx
c001a8c7:	5e                   	pop    esi
c001a8c8:	5f                   	pop    edi
c001a8c9:	5d                   	pop    ebp
c001a8ca:	c3                   	ret    
c001a8cb:	90                   	nop

c001a8cc <SoundCard::addChannel(SoundPort*)>:
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	31 c0                	xor    eax,eax
c001a8d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8d5:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a8dd:	74 1b                	je     c001a8fa <SoundCard::addChannel(SoundPort*)+0x2e>
c001a8df:	40                   	inc    eax
c001a8e0:	83 f8 20             	cmp    eax,0x20
c001a8e3:	75 f0                	jne    c001a8d5 <SoundCard::addChannel(SoundPort*)+0x9>
c001a8e5:	83 ec 0c             	sub    esp,0xc
c001a8e8:	68 39 2b 02 c0       	push   0xc0022b39
c001a8ed:	e8 f7 69 ff ff       	call   c00112e9 <KePanic(char const*)>
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	83 c8 ff             	or     eax,0xffffffff
c001a8f8:	eb 0b                	jmp    c001a905 <SoundCard::addChannel(SoundPort*)+0x39>
c001a8fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8fe:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a905:	83 c4 0c             	add    esp,0xc
c001a908:	c3                   	ret    
c001a909:	90                   	nop

c001a90a <SoundCard::removeChannel(int)>:
c001a90a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a90e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a912:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a91d:	c3                   	ret    
c001a91e:	66 90                	xchg   ax,ax

c001a920 <SoundPort::SoundPort(int, int, int, int)>:
c001a920:	83 ec 0c             	sub    esp,0xc
c001a923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a927:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a932:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a93e:	89 10                	mov    DWORD PTR [eax],edx
c001a940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a944:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a948:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a94f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a953:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a956:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a95b:	75 13                	jne    c001a970 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a961:	8b 00                	mov    eax,DWORD PTR [eax]
c001a963:	05 a0 0f 00 00       	add    eax,0xfa0
c001a968:	d1 e0                	shl    eax,1
c001a96a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a96e:	66 90                	xchg   ax,ax
c001a970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a974:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a978:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a97f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a98a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a98d:	c1 e0 02             	shl    eax,0x2
c001a990:	83 ec 0c             	sub    esp,0xc
c001a993:	50                   	push   eax
c001a994:	e8 3a d1 fe ff       	call   c0007ad3 <malloc>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	89 c2                	mov    edx,eax
c001a99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a9a5:	90                   	nop
c001a9a6:	83 c4 0c             	add    esp,0xc
c001a9a9:	c3                   	ret    
c001a9aa:	66 90                	xchg   ax,ax

c001a9ac <SoundPort::~SoundPort()>:
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9b6:	85 c0                	test   eax,eax
c001a9b8:	74 1e                	je     c001a9d8 <SoundPort::~SoundPort()+0x2c>
c001a9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a9c1:	83 ec 0c             	sub    esp,0xc
c001a9c4:	50                   	push   eax
c001a9c5:	e8 19 d1 fe ff       	call   c0007ae3 <free>
c001a9ca:	83 c4 10             	add    esp,0x10
c001a9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a9d8:	90                   	nop
c001a9d9:	83 c4 0c             	add    esp,0xc
c001a9dc:	c3                   	ret    
c001a9dd:	90                   	nop
c001a9de:	66 90                	xchg   ax,ax

c001a9e0 <SoundPort::unpause()>:
c001a9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a9e8:	c3                   	ret    
c001a9e9:	90                   	nop
c001a9ea:	66 90                	xchg   ax,ax

c001a9ec <SoundPort::pause()>:
c001a9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a9f4:	c3                   	ret    
c001a9f5:	90                   	nop
c001a9f6:	66 90                	xchg   ax,ax

c001a9f8 <SoundPort::getBufferUsed()>:
c001a9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9ff:	c3                   	ret    

c001aa00 <SoundPort::getBufferSize()>:
c001aa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa07:	c3                   	ret    

c001aa08 <SoundPort::buffer16(short*, int)>:
c001aa08:	55                   	push   ebp
c001aa09:	57                   	push   edi
c001aa0a:	56                   	push   esi
c001aa0b:	53                   	push   ebx
c001aa0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa10:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aa14:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aa17:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aa1a:	74 68                	je     c001aa84 <SoundPort::buffer16(short*, int)+0x7c>
c001aa1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa20:	85 c9                	test   ecx,ecx
c001aa22:	7e 60                	jle    c001aa84 <SoundPort::buffer16(short*, int)+0x7c>
c001aa24:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aa28:	8d 70 01             	lea    esi,[eax+0x1]
c001aa2b:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa2e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa31:	c1 e1 0f             	shl    ecx,0xf
c001aa34:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aa37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa3a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa3d:	74 4d                	je     c001aa8c <SoundPort::buffer16(short*, int)+0x84>
c001aa3f:	31 f6                	xor    esi,esi
c001aa41:	eb 21                	jmp    c001aa64 <SoundPort::buffer16(short*, int)+0x5c>
c001aa43:	90                   	nop
c001aa44:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aa49:	8d 79 01             	lea    edi,[ecx+0x1]
c001aa4c:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aa4f:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aa52:	c1 e3 0f             	shl    ebx,0xf
c001aa55:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aa58:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa5b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa5e:	74 1c                	je     c001aa7c <SoundPort::buffer16(short*, int)+0x74>
c001aa60:	89 c6                	mov    esi,eax
c001aa62:	66 90                	xchg   ax,ax
c001aa64:	8d 46 01             	lea    eax,[esi+0x1]
c001aa67:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aa6b:	75 d7                	jne    c001aa44 <SoundPort::buffer16(short*, int)+0x3c>
c001aa6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa71:	8d 76 00             	lea    esi,[esi+0x0]
c001aa74:	5b                   	pop    ebx
c001aa75:	5e                   	pop    esi
c001aa76:	5f                   	pop    edi
c001aa77:	5d                   	pop    ebp
c001aa78:	c3                   	ret    
c001aa79:	8d 76 00             	lea    esi,[esi+0x0]
c001aa7c:	5b                   	pop    ebx
c001aa7d:	8d 46 02             	lea    eax,[esi+0x2]
c001aa80:	5e                   	pop    esi
c001aa81:	5f                   	pop    edi
c001aa82:	5d                   	pop    ebp
c001aa83:	c3                   	ret    
c001aa84:	5b                   	pop    ebx
c001aa85:	31 c0                	xor    eax,eax
c001aa87:	5e                   	pop    esi
c001aa88:	5f                   	pop    edi
c001aa89:	5d                   	pop    ebp
c001aa8a:	c3                   	ret    
c001aa8b:	90                   	nop
c001aa8c:	b8 01 00 00 00       	mov    eax,0x1
c001aa91:	eb e1                	jmp    c001aa74 <SoundPort::buffer16(short*, int)+0x6c>
c001aa93:	90                   	nop

c001aa94 <SoundPort::buffer32(int*, int)>:
c001aa94:	55                   	push   ebp
c001aa95:	57                   	push   edi
c001aa96:	56                   	push   esi
c001aa97:	53                   	push   ebx
c001aa98:	83 ec 04             	sub    esp,0x4
c001aa9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaa3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aaa7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aaaa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaad:	89 04 24             	mov    DWORD PTR [esp],eax
c001aab0:	74 5a                	je     c001ab0c <SoundPort::buffer32(int*, int)+0x78>
c001aab2:	85 c0                	test   eax,eax
c001aab4:	7e 56                	jle    c001ab0c <SoundPort::buffer32(int*, int)+0x78>
c001aab6:	8d 71 01             	lea    esi,[ecx+0x1]
c001aab9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aabc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aabf:	8b 37                	mov    esi,DWORD PTR [edi]
c001aac1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aac4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aac7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaca:	74 4c                	je     c001ab18 <SoundPort::buffer32(int*, int)+0x84>
c001aacc:	31 f6                	xor    esi,esi
c001aace:	eb 1c                	jmp    c001aaec <SoundPort::buffer32(int*, int)+0x58>
c001aad0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aad3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aad6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aad9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aadc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aae0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aae3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aae6:	74 18                	je     c001ab00 <SoundPort::buffer32(int*, int)+0x6c>
c001aae8:	89 de                	mov    esi,ebx
c001aaea:	66 90                	xchg   ax,ax
c001aaec:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aaef:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aaf2:	75 dc                	jne    c001aad0 <SoundPort::buffer32(int*, int)+0x3c>
c001aaf4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aaf7:	90                   	nop
c001aaf8:	83 c4 04             	add    esp,0x4
c001aafb:	5b                   	pop    ebx
c001aafc:	5e                   	pop    esi
c001aafd:	5f                   	pop    edi
c001aafe:	5d                   	pop    ebp
c001aaff:	c3                   	ret    
c001ab00:	8d 46 02             	lea    eax,[esi+0x2]
c001ab03:	83 c4 04             	add    esp,0x4
c001ab06:	5b                   	pop    ebx
c001ab07:	5e                   	pop    esi
c001ab08:	5f                   	pop    edi
c001ab09:	5d                   	pop    ebp
c001ab0a:	c3                   	ret    
c001ab0b:	90                   	nop
c001ab0c:	83 c4 04             	add    esp,0x4
c001ab0f:	31 c0                	xor    eax,eax
c001ab11:	5b                   	pop    ebx
c001ab12:	5e                   	pop    esi
c001ab13:	5f                   	pop    edi
c001ab14:	5d                   	pop    ebp
c001ab15:	c3                   	ret    
c001ab16:	66 90                	xchg   ax,ax
c001ab18:	b8 01 00 00 00       	mov    eax,0x1
c001ab1d:	eb d9                	jmp    c001aaf8 <SoundPort::buffer32(int*, int)+0x64>
c001ab1f:	90                   	nop

c001ab20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ab20:	55                   	push   ebp
c001ab21:	57                   	push   edi
c001ab22:	56                   	push   esi
c001ab23:	53                   	push   ebx
c001ab24:	83 ec 0c             	sub    esp,0xc
c001ab27:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab2b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ab33:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ab37:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ab3d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab3f:	74 13                	je     c001ab54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001ab41:	83 ec 0c             	sub    esp,0xc
c001ab44:	68 8c 2b 02 c0       	push   0xc0022b8c
c001ab49:	e8 9b 67 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ab4e:	83 c4 10             	add    esp,0x10
c001ab51:	8d 76 00             	lea    esi,[esi+0x0]
c001ab54:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ab5a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab5d:	74 11                	je     c001ab70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001ab5f:	83 ec 0c             	sub    esp,0xc
c001ab62:	68 cb 2b 02 c0       	push   0xc0022bcb
c001ab67:	e8 7d 67 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ab6c:	83 c4 10             	add    esp,0x10
c001ab6f:	90                   	nop
c001ab70:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ab76:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab79:	74 11                	je     c001ab8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001ab7b:	83 ec 0c             	sub    esp,0xc
c001ab7e:	68 cb 2b 02 c0       	push   0xc0022bcb
c001ab83:	e8 61 67 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	90                   	nop
c001ab8c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001ab8f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001ab93:	85 f6                	test   esi,esi
c001ab95:	7e 2d                	jle    c001abc4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ab97:	31 c0                	xor    eax,eax
c001ab99:	8d 76 00             	lea    esi,[esi+0x0]
c001ab9c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab9f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001aba2:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001aba8:	85 c9                	test   ecx,ecx
c001abaa:	0f 49 d1             	cmovns edx,ecx
c001abad:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001abb1:	c1 fa 0f             	sar    edx,0xf
c001abb4:	01 d1                	add    ecx,edx
c001abb6:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001abba:	83 c0 01             	add    eax,0x1
c001abbd:	39 f0                	cmp    eax,esi
c001abbf:	75 db                	jne    c001ab9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001abc1:	8d 76 00             	lea    esi,[esi+0x0]
c001abc4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abc7:	83 ec 04             	sub    esp,0x4
c001abca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001abcd:	29 f0                	sub    eax,esi
c001abcf:	c1 e0 02             	shl    eax,0x2
c001abd2:	50                   	push   eax
c001abd3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001abd6:	50                   	push   eax
c001abd7:	52                   	push   edx
c001abd8:	e8 f3 57 fe ff       	call   c00003d0 <memmove>
c001abdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001abe0:	29 f0                	sub    eax,esi
c001abe2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001abe5:	83 c4 1c             	add    esp,0x1c
c001abe8:	89 f0                	mov    eax,esi
c001abea:	5b                   	pop    ebx
c001abeb:	5e                   	pop    esi
c001abec:	5f                   	pop    edi
c001abed:	5d                   	pop    ebp
c001abee:	c3                   	ret    
c001abef:	90                   	nop

c001abf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001abf0:	55                   	push   ebp
c001abf1:	57                   	push   edi
c001abf2:	56                   	push   esi
c001abf3:	53                   	push   ebx
c001abf4:	83 ec 0c             	sub    esp,0xc
c001abf7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001abfb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abff:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ac03:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac07:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ac0d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ac0f:	74 13                	je     c001ac24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ac11:	83 ec 0c             	sub    esp,0xc
c001ac14:	68 ac 2b 02 c0       	push   0xc0022bac
c001ac19:	e8 cb 66 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	8d 76 00             	lea    esi,[esi+0x0]
c001ac24:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ac2a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ac2d:	74 11                	je     c001ac40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ac2f:	83 ec 0c             	sub    esp,0xc
c001ac32:	68 e7 2b 02 c0       	push   0xc0022be7
c001ac37:	e8 ad 66 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ac3c:	83 c4 10             	add    esp,0x10
c001ac3f:	90                   	nop
c001ac40:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001ac46:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ac49:	74 11                	je     c001ac5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001ac4b:	83 ec 0c             	sub    esp,0xc
c001ac4e:	68 e7 2b 02 c0       	push   0xc0022be7
c001ac53:	e8 91 66 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	90                   	nop
c001ac5c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001ac5f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001ac63:	85 ff                	test   edi,edi
c001ac65:	7e 21                	jle    c001ac88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001ac67:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ac6e:	31 c0                	xor    eax,eax
c001ac70:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac73:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001ac76:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ac79:	01 d5                	add    ebp,edx
c001ac7b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001ac7e:	83 c0 04             	add    eax,0x4
c001ac81:	39 c1                	cmp    ecx,eax
c001ac83:	75 eb                	jne    c001ac70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001ac85:	8d 76 00             	lea    esi,[esi+0x0]
c001ac88:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac8b:	83 ec 04             	sub    esp,0x4
c001ac8e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac91:	29 f8                	sub    eax,edi
c001ac93:	c1 e0 02             	shl    eax,0x2
c001ac96:	50                   	push   eax
c001ac97:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ac9a:	50                   	push   eax
c001ac9b:	52                   	push   edx
c001ac9c:	e8 2f 57 fe ff       	call   c00003d0 <memmove>
c001aca1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aca4:	29 f8                	sub    eax,edi
c001aca6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aca9:	83 c4 1c             	add    esp,0x1c
c001acac:	89 f8                	mov    eax,edi
c001acae:	5b                   	pop    ebx
c001acaf:	5e                   	pop    esi
c001acb0:	5f                   	pop    edi
c001acb1:	5d                   	pop    ebp
c001acb2:	c3                   	ret    
c001acb3:	90                   	nop

c001acb4 <PCI::open(int, int, void*)>:
c001acb4:	83 ec 18             	sub    esp,0x18
c001acb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001acbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001acc5:	8b 10                	mov    edx,DWORD PTR [eax]
c001acc7:	50                   	push   eax
c001acc8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001accb:	31 c0                	xor    eax,eax
c001accd:	83 c4 1c             	add    esp,0x1c
c001acd0:	c3                   	ret    
c001acd1:	90                   	nop

c001acd2 <PCI::close(int, int, void*)>:
c001acd2:	31 c0                	xor    eax,eax
c001acd4:	c3                   	ret    
c001acd5:	90                   	nop

c001acd6 <PCI::PCI()>:
c001acd6:	83 ec 0c             	sub    esp,0xc
c001acd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acdd:	83 ec 08             	sub    esp,0x8
c001ace0:	68 03 2c 02 c0       	push   0xc0022c03
c001ace5:	50                   	push   eax
c001ace6:	e8 bd 13 ff ff       	call   c000c0a8 <Bus::Bus(char const*)>
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c001acf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf7:	89 10                	mov    DWORD PTR [eax],edx
c001acf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ad07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0b:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ad10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad14:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad1a:	0f b6 d0             	movzx  edx,al
c001ad1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad21:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ad28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad32:	0f b6 d0             	movzx  edx,al
c001ad35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad39:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ad3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad48:	8d 50 01             	lea    edx,[eax+0x1]
c001ad4b:	88 d1                	mov    cl,dl
c001ad4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad51:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ad57:	0f b6 d0             	movzx  edx,al
c001ad5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad62:	83 c9 c0             	or     ecx,0xffffffc0
c001ad65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad69:	90                   	nop
c001ad6a:	83 c4 0c             	add    esp,0xc
c001ad6d:	c3                   	ret    

c001ad6e <PCI::readBAR8(unsigned int, int)>:
c001ad6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad76:	f6 c2 01             	test   dl,0x1
c001ad79:	74 07                	je     c001ad82 <PCI::readBAR8(unsigned int, int)+0x14>
c001ad7b:	83 e2 fc             	and    edx,0xfffffffc
c001ad7e:	01 c2                	add    edx,eax
c001ad80:	ec                   	in     al,dx
c001ad81:	c3                   	ret    
c001ad82:	83 e2 f0             	and    edx,0xfffffff0
c001ad85:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ad88:	c3                   	ret    
c001ad89:	90                   	nop

c001ad8a <PCI::readBAR16(unsigned int, int)>:
c001ad8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad92:	f6 c2 01             	test   dl,0x1
c001ad95:	74 08                	je     c001ad9f <PCI::readBAR16(unsigned int, int)+0x15>
c001ad97:	83 e2 fc             	and    edx,0xfffffffc
c001ad9a:	01 c2                	add    edx,eax
c001ad9c:	66 ed                	in     ax,dx
c001ad9e:	c3                   	ret    
c001ad9f:	83 e2 f0             	and    edx,0xfffffff0
c001ada2:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ada6:	c3                   	ret    
c001ada7:	90                   	nop

c001ada8 <PCI::readBAR32(unsigned int, int)>:
c001ada8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adb0:	f6 c2 01             	test   dl,0x1
c001adb3:	74 07                	je     c001adbc <PCI::readBAR32(unsigned int, int)+0x14>
c001adb5:	83 e2 fc             	and    edx,0xfffffffc
c001adb8:	01 c2                	add    edx,eax
c001adba:	ed                   	in     eax,dx
c001adbb:	c3                   	ret    
c001adbc:	83 e2 f0             	and    edx,0xfffffff0
c001adbf:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001adc2:	c3                   	ret    
c001adc3:	90                   	nop

c001adc4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001adc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adcc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001add0:	f6 c2 01             	test   dl,0x1
c001add3:	74 07                	je     c001addc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001add5:	83 e2 fc             	and    edx,0xfffffffc
c001add8:	01 ca                	add    edx,ecx
c001adda:	ee                   	out    dx,al
c001addb:	c3                   	ret    
c001addc:	83 e2 f0             	and    edx,0xfffffff0
c001addf:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ade2:	c3                   	ret    
c001ade3:	90                   	nop

c001ade4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ade4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ade8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adf0:	f6 c2 01             	test   dl,0x1
c001adf3:	74 08                	je     c001adfd <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001adf5:	83 e2 fc             	and    edx,0xfffffffc
c001adf8:	01 ca                	add    edx,ecx
c001adfa:	66 ef                	out    dx,ax
c001adfc:	c3                   	ret    
c001adfd:	83 e2 f0             	and    edx,0xfffffff0
c001ae00:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ae04:	c3                   	ret    
c001ae05:	90                   	nop

c001ae06 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ae06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae12:	f6 c2 01             	test   dl,0x1
c001ae15:	74 07                	je     c001ae1e <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ae17:	83 e2 fc             	and    edx,0xfffffffc
c001ae1a:	01 ca                	add    edx,ecx
c001ae1c:	ef                   	out    dx,eax
c001ae1d:	c3                   	ret    
c001ae1e:	83 e2 f0             	and    edx,0xfffffff0
c001ae21:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ae24:	c3                   	ret    
c001ae25:	90                   	nop

c001ae26 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae26:	55                   	push   ebp
c001ae27:	57                   	push   edi
c001ae28:	56                   	push   esi
c001ae29:	53                   	push   ebx
c001ae2a:	83 ec 0c             	sub    esp,0xc
c001ae2d:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ae32:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ae36:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae3a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ae3e:	83 fe 07             	cmp    esi,0x7
c001ae41:	76 10                	jbe    c001ae53 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ae43:	83 ec 0c             	sub    esp,0xc
c001ae46:	68 0b 2c 02 c0       	push   0xc0022c0b
c001ae4b:	e8 99 64 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ae50:	83 c4 10             	add    esp,0x10
c001ae53:	0f b6 db             	movzx  ebx,bl
c001ae56:	83 fb 0f             	cmp    ebx,0xf
c001ae59:	76 10                	jbe    c001ae6b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ae5b:	83 ec 0c             	sub    esp,0xc
c001ae5e:	68 3b 2c 02 c0       	push   0xc0022c3b
c001ae63:	e8 81 64 ff ff       	call   c00112e9 <KePanic(char const*)>
c001ae68:	83 c4 10             	add    esp,0x10
c001ae6b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ae6e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae73:	83 c8 f0             	or     eax,0xfffffff0
c001ae76:	ee                   	out    dx,al
c001ae77:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ae7c:	89 e8                	mov    eax,ebp
c001ae7e:	ee                   	out    dx,al
c001ae7f:	89 f9                	mov    ecx,edi
c001ae81:	89 d8                	mov    eax,ebx
c001ae83:	0f b6 d9             	movzx  ebx,cl
c001ae86:	83 c4 0c             	add    esp,0xc
c001ae89:	c1 e0 08             	shl    eax,0x8
c001ae8c:	83 e3 fc             	and    ebx,0xfffffffc
c001ae8f:	09 d8                	or     eax,ebx
c001ae91:	5b                   	pop    ebx
c001ae92:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ae97:	5e                   	pop    esi
c001ae98:	5f                   	pop    edi
c001ae99:	5d                   	pop    ebp
c001ae9a:	c3                   	ret    
c001ae9b:	90                   	nop

c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae9c:	57                   	push   edi
c001ae9d:	56                   	push   esi
c001ae9e:	53                   	push   ebx
c001ae9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aea3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aea7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aeaf:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001aeb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aeb9:	83 ff 01             	cmp    edi,0x1
c001aebc:	75 3f                	jne    c001aefd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001aebe:	89 de                	mov    esi,ebx
c001aec0:	0f b6 c0             	movzx  eax,al
c001aec3:	c1 e0 10             	shl    eax,0x10
c001aec6:	81 e6 fc 00 00 00    	and    esi,0xfc
c001aecc:	0f b6 c9             	movzx  ecx,cl
c001aecf:	09 f0                	or     eax,esi
c001aed1:	c1 e1 08             	shl    ecx,0x8
c001aed4:	0f b6 d2             	movzx  edx,dl
c001aed7:	c1 e2 0b             	shl    edx,0xb
c001aeda:	09 c8                	or     eax,ecx
c001aedc:	09 d0                	or     eax,edx
c001aede:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aee3:	0d 00 00 00 80       	or     eax,0x80000000
c001aee8:	ef                   	out    dx,eax
c001aee9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aeee:	ed                   	in     eax,dx
c001aeef:	83 e3 02             	and    ebx,0x2
c001aef2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aef9:	d3 e8                	shr    eax,cl
c001aefb:	eb 44                	jmp    c001af41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001aefd:	83 ff 02             	cmp    edi,0x2
c001af00:	75 2d                	jne    c001af2f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	0f b6 fb             	movzx  edi,bl
c001af08:	57                   	push   edi
c001af09:	0f b6 c9             	movzx  ecx,cl
c001af0c:	51                   	push   ecx
c001af0d:	0f b6 d2             	movzx  edx,dl
c001af10:	52                   	push   edx
c001af11:	0f b6 c0             	movzx  eax,al
c001af14:	50                   	push   eax
c001af15:	56                   	push   esi
c001af16:	e8 0b ff ff ff       	call   c001ae26 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af1b:	89 c2                	mov    edx,eax
c001af1d:	ed                   	in     eax,dx
c001af1e:	83 e3 02             	and    ebx,0x2
c001af21:	83 c4 20             	add    esp,0x20
c001af24:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af2b:	d3 e8                	shr    eax,cl
c001af2d:	eb 12                	jmp    c001af41 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af2f:	83 ec 0c             	sub    esp,0xc
c001af32:	68 6b 2c 02 c0       	push   0xc0022c6b
c001af37:	e8 ad 63 ff ff       	call   c00112e9 <KePanic(char const*)>
c001af3c:	83 c4 10             	add    esp,0x10
c001af3f:	31 c0                	xor    eax,eax
c001af41:	5b                   	pop    ebx
c001af42:	5e                   	pop    esi
c001af43:	5f                   	pop    edi
c001af44:	c3                   	ret    
c001af45:	90                   	nop

c001af46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001af46:	83 ec 18             	sub    esp,0x18
c001af49:	6a 00                	push   0x0
c001af4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af50:	50                   	push   eax
c001af51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af56:	50                   	push   eax
c001af57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af5c:	50                   	push   eax
c001af5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af61:	e8 36 ff ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af66:	83 c4 2c             	add    esp,0x2c
c001af69:	c3                   	ret    

c001af6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af6a:	83 ec 18             	sub    esp,0x18
c001af6d:	6a 0e                	push   0xe
c001af6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af74:	50                   	push   eax
c001af75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af7a:	50                   	push   eax
c001af7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af80:	50                   	push   eax
c001af81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af85:	e8 12 ff ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af8a:	83 c4 2c             	add    esp,0x2c
c001af8d:	0f b6 c0             	movzx  eax,al
c001af90:	c3                   	ret    
c001af91:	90                   	nop

c001af92 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af92:	55                   	push   ebp
c001af93:	57                   	push   edi
c001af94:	56                   	push   esi
c001af95:	53                   	push   ebx
c001af96:	83 ec 18             	sub    esp,0x18
c001af99:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001af9e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001afa3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001afa8:	6a 0a                	push   0xa
c001afaa:	56                   	push   esi
c001afab:	55                   	push   ebp
c001afac:	57                   	push   edi
c001afad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afb1:	e8 e6 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afb6:	83 c4 14             	add    esp,0x14
c001afb9:	6a 0a                	push   0xa
c001afbb:	56                   	push   esi
c001afbc:	55                   	push   ebp
c001afbd:	57                   	push   edi
c001afbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afc2:	89 c3                	mov    ebx,eax
c001afc4:	0f b6 db             	movzx  ebx,bl
c001afc7:	e8 d0 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afcc:	83 c4 2c             	add    esp,0x2c
c001afcf:	25 00 ff 00 00       	and    eax,0xff00
c001afd4:	09 d8                	or     eax,ebx
c001afd6:	5b                   	pop    ebx
c001afd7:	5e                   	pop    esi
c001afd8:	5f                   	pop    edi
c001afd9:	5d                   	pop    ebp
c001afda:	c3                   	ret    
c001afdb:	90                   	nop

c001afdc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001afdc:	83 ec 18             	sub    esp,0x18
c001afdf:	6a 08                	push   0x8
c001afe1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afe6:	50                   	push   eax
c001afe7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afec:	50                   	push   eax
c001afed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aff2:	50                   	push   eax
c001aff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aff7:	e8 a0 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001affc:	83 c4 2c             	add    esp,0x2c
c001afff:	0f b6 c4             	movzx  eax,ah
c001b002:	c3                   	ret    
c001b003:	90                   	nop

c001b004 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b004:	83 ec 18             	sub    esp,0x18
c001b007:	6a 08                	push   0x8
c001b009:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b00e:	50                   	push   eax
c001b00f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b014:	50                   	push   eax
c001b015:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b01a:	50                   	push   eax
c001b01b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b01f:	e8 78 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b024:	83 c4 2c             	add    esp,0x2c
c001b027:	c3                   	ret    

c001b028 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b028:	83 ec 18             	sub    esp,0x18
c001b02b:	6a 3c                	push   0x3c
c001b02d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b032:	50                   	push   eax
c001b033:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b038:	50                   	push   eax
c001b039:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b03e:	50                   	push   eax
c001b03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b043:	e8 54 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b048:	83 c4 2c             	add    esp,0x2c
c001b04b:	c3                   	ret    

c001b04c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b04c:	83 ec 18             	sub    esp,0x18
c001b04f:	6a 18                	push   0x18
c001b051:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b056:	50                   	push   eax
c001b057:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b05c:	50                   	push   eax
c001b05d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b062:	50                   	push   eax
c001b063:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b067:	e8 30 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b06c:	83 c4 2c             	add    esp,0x2c
c001b06f:	0f b6 c4             	movzx  eax,ah
c001b072:	c3                   	ret    
c001b073:	90                   	nop

c001b074 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b074:	55                   	push   ebp
c001b075:	57                   	push   edi
c001b076:	56                   	push   esi
c001b077:	53                   	push   ebx
c001b078:	83 ec 28             	sub    esp,0x28
c001b07b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b07f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b084:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b089:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b08e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b095:	8d 43 12             	lea    eax,[ebx+0x12]
c001b098:	83 c3 10             	add    ebx,0x10
c001b09b:	0f b6 c0             	movzx  eax,al
c001b09e:	0f b6 db             	movzx  ebx,bl
c001b0a1:	50                   	push   eax
c001b0a2:	51                   	push   ecx
c001b0a3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b0a7:	57                   	push   edi
c001b0a8:	55                   	push   ebp
c001b0a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0ad:	e8 ea fd ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0b2:	83 c4 14             	add    esp,0x14
c001b0b5:	53                   	push   ebx
c001b0b6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b0ba:	51                   	push   ecx
c001b0bb:	89 c6                	mov    esi,eax
c001b0bd:	57                   	push   edi
c001b0be:	55                   	push   ebp
c001b0bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0c3:	c1 e6 10             	shl    esi,0x10
c001b0c6:	e8 d1 fd ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0cb:	83 c4 3c             	add    esp,0x3c
c001b0ce:	5b                   	pop    ebx
c001b0cf:	0f b7 c0             	movzx  eax,ax
c001b0d2:	09 f0                	or     eax,esi
c001b0d4:	5e                   	pop    esi
c001b0d5:	5f                   	pop    edi
c001b0d6:	5d                   	pop    ebp
c001b0d7:	c3                   	ret    

c001b0d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b0d8:	55                   	push   ebp
c001b0d9:	57                   	push   edi
c001b0da:	56                   	push   esi
c001b0db:	53                   	push   ebx
c001b0dc:	83 ec 0c             	sub    esp,0xc
c001b0df:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b0e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0eb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b0ef:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b0f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b0fd:	83 f9 01             	cmp    ecx,0x1
c001b100:	75 5d                	jne    c001b15f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b102:	0f b6 c8             	movzx  ecx,al
c001b105:	89 f0                	mov    eax,esi
c001b107:	25 fc 00 00 00       	and    eax,0xfc
c001b10c:	0f b6 d2             	movzx  edx,dl
c001b10f:	c1 e1 10             	shl    ecx,0x10
c001b112:	c1 e2 0b             	shl    edx,0xb
c001b115:	09 c1                	or     ecx,eax
c001b117:	89 f8                	mov    eax,edi
c001b119:	0f b6 f8             	movzx  edi,al
c001b11c:	c1 e7 08             	shl    edi,0x8
c001b11f:	09 f9                	or     ecx,edi
c001b121:	09 d1                	or     ecx,edx
c001b123:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b128:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b12e:	89 c8                	mov    eax,ecx
c001b130:	ef                   	out    dx,eax
c001b131:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b136:	ed                   	in     eax,dx
c001b137:	83 e6 02             	and    esi,0x2
c001b13a:	0f b7 db             	movzx  ebx,bx
c001b13d:	74 0a                	je     c001b149 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b13f:	c1 e3 10             	shl    ebx,0x10
c001b142:	0f b7 d0             	movzx  edx,ax
c001b145:	09 d3                	or     ebx,edx
c001b147:	eb 05                	jmp    c001b14e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b149:	66 31 c0             	xor    ax,ax
c001b14c:	09 c3                	or     ebx,eax
c001b14e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b153:	89 c8                	mov    eax,ecx
c001b155:	ef                   	out    dx,eax
c001b156:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b15b:	89 d8                	mov    eax,ebx
c001b15d:	eb 41                	jmp    c001b1a0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b15f:	83 f9 02             	cmp    ecx,0x2
c001b162:	75 45                	jne    c001b1a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b164:	89 f1                	mov    ecx,esi
c001b166:	83 ec 0c             	sub    esp,0xc
c001b169:	0f b6 f1             	movzx  esi,cl
c001b16c:	89 f9                	mov    ecx,edi
c001b16e:	56                   	push   esi
c001b16f:	0f b6 f9             	movzx  edi,cl
c001b172:	57                   	push   edi
c001b173:	0f b6 d2             	movzx  edx,dl
c001b176:	52                   	push   edx
c001b177:	0f b6 c0             	movzx  eax,al
c001b17a:	50                   	push   eax
c001b17b:	55                   	push   ebp
c001b17c:	e8 a5 fc ff ff       	call   c001ae26 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b181:	89 c2                	mov    edx,eax
c001b183:	ed                   	in     eax,dx
c001b184:	83 c4 20             	add    esp,0x20
c001b187:	f6 c2 02             	test   dl,0x2
c001b18a:	0f b7 db             	movzx  ebx,bx
c001b18d:	74 0c                	je     c001b19b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b18f:	0f b7 c8             	movzx  ecx,ax
c001b192:	89 d8                	mov    eax,ebx
c001b194:	c1 e0 10             	shl    eax,0x10
c001b197:	09 c8                	or     eax,ecx
c001b199:	eb 05                	jmp    c001b1a0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b19b:	66 31 c0             	xor    ax,ax
c001b19e:	09 d8                	or     eax,ebx
c001b1a0:	ef                   	out    dx,eax
c001b1a1:	83 c4 0c             	add    esp,0xc
c001b1a4:	5b                   	pop    ebx
c001b1a5:	5e                   	pop    esi
c001b1a6:	5f                   	pop    edi
c001b1a7:	5d                   	pop    ebp
c001b1a8:	c3                   	ret    
c001b1a9:	c7 44 24 20 6b 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c6b
c001b1b1:	83 c4 0c             	add    esp,0xc
c001b1b4:	5b                   	pop    ebx
c001b1b5:	5e                   	pop    esi
c001b1b6:	5f                   	pop    edi
c001b1b7:	5d                   	pop    ebp
c001b1b8:	e9 2c 61 ff ff       	jmp    c00112e9 <KePanic(char const*)>
c001b1bd:	90                   	nop

c001b1be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b1be:	55                   	push   ebp
c001b1bf:	57                   	push   edi
c001b1c0:	56                   	push   esi
c001b1c1:	53                   	push   ebx
c001b1c2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b1c8:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b1cf:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b1d6:	0f 85 bd 00 00 00    	jne    c001b299 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	68 14 01 00 00       	push   0x114
c001b1e4:	e8 ea c8 fe ff       	call   c0007ad3 <malloc>
c001b1e9:	83 c4 0c             	add    esp,0xc
c001b1ec:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b1f2:	68 71 2c 02 c0       	push   0xc0022c71
c001b1f7:	50                   	push   eax
c001b1f8:	89 c3                	mov    ebx,eax
c001b1fa:	e8 23 06 ff ff       	call   c000b822 <File::File(char const*, Process*)>
c001b1ff:	83 c4 10             	add    esp,0x10
c001b202:	85 db                	test   ebx,ebx
c001b204:	0f 84 6b 02 00 00    	je     c001b475 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b20a:	57                   	push   edi
c001b20b:	57                   	push   edi
c001b20c:	6a 01                	push   0x1
c001b20e:	53                   	push   ebx
c001b20f:	e8 d6 06 ff ff       	call   c000b8ea <File::open(FileOpenMode)>
c001b214:	83 c4 10             	add    esp,0x10
c001b217:	85 c0                	test   eax,eax
c001b219:	0f 85 56 02 00 00    	jne    c001b475 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b21f:	52                   	push   edx
c001b220:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b224:	50                   	push   eax
c001b225:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b229:	50                   	push   eax
c001b22a:	53                   	push   ebx
c001b22b:	e8 bc 09 ff ff       	call   c000bbec <File::stat(unsigned long long*, bool*)>
c001b230:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b234:	40                   	inc    eax
c001b235:	89 04 24             	mov    DWORD PTR [esp],eax
c001b238:	e8 96 c8 fe ff       	call   c0007ad3 <malloc>
c001b23d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b241:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b245:	59                   	pop    ecx
c001b246:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b24b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b24d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b251:	51                   	push   ecx
c001b252:	50                   	push   eax
c001b253:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b257:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b25b:	53                   	push   ebx
c001b25c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b25f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b263:	83 c4 20             	add    esp,0x20
c001b266:	89 c8                	mov    eax,ecx
c001b268:	99                   	cdq    
c001b269:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b26d:	0f 85 02 02 00 00    	jne    c001b475 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b273:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b277:	0f 85 f8 01 00 00    	jne    c001b475 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b27d:	83 ec 0c             	sub    esp,0xc
c001b280:	53                   	push   ebx
c001b281:	e8 c2 06 ff ff       	call   c000b948 <File::close()>
c001b286:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b28a:	83 c4 10             	add    esp,0x10
c001b28d:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b294:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b299:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b2a1:	31 c9                	xor    ecx,ecx
c001b2a3:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b2aa:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b2b0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b2b7:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b2bd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b2c2:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b2ca:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b2cf:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b2db:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b2e3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b2e7:	39 cd                	cmp    ebp,ecx
c001b2e9:	0f 8e 86 01 00 00    	jle    c001b475 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b2ef:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b2f2:	d4 40                	aam    0x40
c001b2f4:	d5 39                	aad    0x39
c001b2f6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b2fa:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b2fe:	d4 40                	aam    0x40
c001b300:	d5 39                	aad    0x39
c001b302:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b306:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b30a:	d4 40                	aam    0x40
c001b30c:	d5 39                	aad    0x39
c001b30e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b312:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b316:	d4 40                	aam    0x40
c001b318:	d5 39                	aad    0x39
c001b31a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b31e:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b322:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b326:	3c 56                	cmp    al,0x56
c001b328:	74 47                	je     c001b371 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b32a:	d4 40                	aam    0x40
c001b32c:	d5 39                	aad    0x39
c001b32e:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b331:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b335:	0f b6 db             	movzx  ebx,bl
c001b338:	c1 e3 04             	shl    ebx,0x4
c001b33b:	d4 40                	aam    0x40
c001b33d:	d5 39                	aad    0x39
c001b33f:	83 e8 30             	sub    eax,0x30
c001b342:	0f b6 c0             	movzx  eax,al
c001b345:	09 c3                	or     ebx,eax
c001b347:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b34b:	c1 e3 04             	shl    ebx,0x4
c001b34e:	d4 40                	aam    0x40
c001b350:	d5 39                	aad    0x39
c001b352:	83 e8 30             	sub    eax,0x30
c001b355:	0f b6 c0             	movzx  eax,al
c001b358:	09 c3                	or     ebx,eax
c001b35a:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b35e:	c1 e3 04             	shl    ebx,0x4
c001b361:	d4 40                	aam    0x40
c001b363:	d5 39                	aad    0x39
c001b365:	83 e8 30             	sub    eax,0x30
c001b368:	0f b6 c0             	movzx  eax,al
c001b36b:	09 c3                	or     ebx,eax
c001b36d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b371:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b375:	80 fb 58             	cmp    bl,0x58
c001b378:	74 49                	je     c001b3c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b37a:	88 d8                	mov    al,bl
c001b37c:	d4 40                	aam    0x40
c001b37e:	d5 39                	aad    0x39
c001b380:	83 e8 30             	sub    eax,0x30
c001b383:	0f b6 f8             	movzx  edi,al
c001b386:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b38a:	c1 e7 04             	shl    edi,0x4
c001b38d:	d4 40                	aam    0x40
c001b38f:	d5 39                	aad    0x39
c001b391:	83 e8 30             	sub    eax,0x30
c001b394:	0f b6 c0             	movzx  eax,al
c001b397:	09 c7                	or     edi,eax
c001b399:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b39d:	c1 e7 04             	shl    edi,0x4
c001b3a0:	d4 40                	aam    0x40
c001b3a2:	d5 39                	aad    0x39
c001b3a4:	83 e8 30             	sub    eax,0x30
c001b3a7:	0f b6 c0             	movzx  eax,al
c001b3aa:	09 c7                	or     edi,eax
c001b3ac:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b3b0:	c1 e7 04             	shl    edi,0x4
c001b3b3:	d4 40                	aam    0x40
c001b3b5:	d5 39                	aad    0x39
c001b3b7:	83 e8 30             	sub    eax,0x30
c001b3ba:	0f b6 c0             	movzx  eax,al
c001b3bd:	09 c7                	or     edi,eax
c001b3bf:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b3c3:	8d 41 10             	lea    eax,[ecx+0x10]
c001b3c6:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b3ca:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b3ce:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b3d2:	83 f9 0a             	cmp    ecx,0xa
c001b3d5:	74 07                	je     c001b3de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b3d7:	47                   	inc    edi
c001b3d8:	39 c5                	cmp    ebp,eax
c001b3da:	75 16                	jne    c001b3f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b3dc:	89 e8                	mov    eax,ebp
c001b3de:	83 f9 0a             	cmp    ecx,0xa
c001b3e1:	0f 94 c1             	sete   cl
c001b3e4:	0f b6 c9             	movzx  ecx,cl
c001b3e7:	01 c1                	add    ecx,eax
c001b3e9:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b3ee:	75 0f                	jne    c001b3ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b3f0:	eb 1c                	jmp    c001b40e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b3f2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b3f5:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b3f9:	40                   	inc    eax
c001b3fa:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b3fd:	eb cb                	jmp    c001b3ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b3ff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b403:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b408:	0f 85 d9 fe ff ff    	jne    c001b2e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b40e:	80 fb 58             	cmp    bl,0x58
c001b411:	74 10                	je     c001b423 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b413:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b418:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b41d:	0f 85 c4 fe ff ff    	jne    c001b2e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b423:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b427:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b42b:	83 e8 30             	sub    eax,0x30
c001b42e:	c1 e0 04             	shl    eax,0x4
c001b431:	83 eb 30             	sub    ebx,0x30
c001b434:	09 d8                	or     eax,ebx
c001b436:	0f b6 c0             	movzx  eax,al
c001b439:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b43d:	0f 85 a4 fe ff ff    	jne    c001b2e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b443:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b447:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b44b:	83 e8 30             	sub    eax,0x30
c001b44e:	c1 e0 04             	shl    eax,0x4
c001b451:	83 eb 30             	sub    ebx,0x30
c001b454:	09 d8                	or     eax,ebx
c001b456:	0f b6 c0             	movzx  eax,al
c001b459:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b45d:	0f 85 84 fe ff ff    	jne    c001b2e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b463:	50                   	push   eax
c001b464:	50                   	push   eax
c001b465:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b469:	50                   	push   eax
c001b46a:	56                   	push   esi
c001b46b:	e8 e0 51 fe ff       	call   c0000650 <strcpy>
c001b470:	83 c4 10             	add    esp,0x10
c001b473:	eb 05                	jmp    c001b47a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b475:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b478:	31 f6                	xor    esi,esi
c001b47a:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b480:	89 f0                	mov    eax,esi
c001b482:	5b                   	pop    ebx
c001b483:	5e                   	pop    esi
c001b484:	5f                   	pop    edi
c001b485:	5d                   	pop    ebp
c001b486:	c3                   	ret    
c001b487:	90                   	nop

c001b488 <PCI::checkBus(unsigned char)>:
c001b488:	56                   	push   esi
c001b489:	53                   	push   ebx
c001b48a:	31 db                	xor    ebx,ebx
c001b48c:	51                   	push   ecx
c001b48d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b492:	52                   	push   edx
c001b493:	53                   	push   ebx
c001b494:	43                   	inc    ebx
c001b495:	56                   	push   esi
c001b496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b49a:	e8 0f 03 00 00       	call   c001b7ae <PCI::checkDevice(unsigned char, unsigned char)>
c001b49f:	83 c4 10             	add    esp,0x10
c001b4a2:	83 fb 20             	cmp    ebx,0x20
c001b4a5:	75 eb                	jne    c001b492 <PCI::checkBus(unsigned char)+0xa>
c001b4a7:	58                   	pop    eax
c001b4a8:	5b                   	pop    ebx
c001b4a9:	5e                   	pop    esi
c001b4aa:	c3                   	ret    
c001b4ab:	90                   	nop

c001b4ac <PCI::foundDevice(PCIDeviceInfo)>:
c001b4ac:	55                   	push   ebp
c001b4ad:	57                   	push   edi
c001b4ae:	56                   	push   esi
c001b4af:	53                   	push   ebx
c001b4b0:	83 ec 1c             	sub    esp,0x1c
c001b4b3:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b4b8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b4bc:	3d ff ff 00 00       	cmp    eax,0xffff
c001b4c1:	0f 84 63 01 00 00    	je     c001b62a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b4c7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b4cc:	66 3d 06 04          	cmp    ax,0x406
c001b4d0:	75 2c                	jne    c001b4fe <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b4d2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b4d7:	50                   	push   eax
c001b4d8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b4dd:	50                   	push   eax
c001b4de:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b4e3:	50                   	push   eax
c001b4e4:	53                   	push   ebx
c001b4e5:	e8 62 fb ff ff       	call   c001b04c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b4ea:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b4ee:	0f b6 c0             	movzx  eax,al
c001b4f1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b4f5:	83 c4 2c             	add    esp,0x2c
c001b4f8:	5b                   	pop    ebx
c001b4f9:	5e                   	pop    esi
c001b4fa:	5f                   	pop    edi
c001b4fb:	5d                   	pop    ebp
c001b4fc:	eb 8a                	jmp    c001b488 <PCI::checkBus(unsigned char)>
c001b4fe:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b503:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b509:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b50d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b511:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b515:	85 d2                	test   edx,edx
c001b517:	74 34                	je     c001b54d <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b519:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b51c:	85 c9                	test   ecx,ecx
c001b51e:	74 29                	je     c001b549 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b520:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b526:	31 f5                	xor    ebp,esi
c001b528:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b52e:	75 19                	jne    c001b549 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b530:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b536:	75 11                	jne    c001b549 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b538:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b53f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b543:	0f 84 e1 00 00 00    	je     c001b62a <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b549:	8b 12                	mov    edx,DWORD PTR [edx]
c001b54b:	eb c8                	jmp    c001b515 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b54d:	3d 01 06 00 00       	cmp    eax,0x601
c001b552:	75 19                	jne    c001b56d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b554:	83 ec 0c             	sub    esp,0xc
c001b557:	68 64 01 00 00       	push   0x164
c001b55c:	e8 72 c5 fe ff       	call   c0007ad3 <malloc>
c001b561:	89 04 24             	mov    DWORD PTR [esp],eax
c001b564:	89 c5                	mov    ebp,eax
c001b566:	e8 ab 0e 00 00       	call   c001c416 <SATABus::SATABus()>
c001b56b:	eb 1e                	jmp    c001b58b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b56d:	3d 01 01 00 00       	cmp    eax,0x101
c001b572:	75 62                	jne    c001b5d6 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b574:	83 ec 0c             	sub    esp,0xc
c001b577:	68 70 02 00 00       	push   0x270
c001b57c:	e8 52 c5 fe ff       	call   c0007ad3 <malloc>
c001b581:	89 04 24             	mov    DWORD PTR [esp],eax
c001b584:	89 c5                	mov    ebp,eax
c001b586:	e8 f3 02 00 00       	call   c001b87e <IDE::IDE()>
c001b58b:	58                   	pop    eax
c001b58c:	5a                   	pop    edx
c001b58d:	55                   	push   ebp
c001b58e:	53                   	push   ebx
c001b58f:	e8 b8 11 ff ff       	call   c000c74c <Device::addChild(Device*)>
c001b594:	83 ec 1c             	sub    esp,0x1c
c001b597:	b9 09 00 00 00       	mov    ecx,0x9
c001b59c:	fc                   	cld    
c001b59d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b5a1:	89 e7                	mov    edi,esp
c001b5a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5a5:	55                   	push   ebp
c001b5a6:	e8 e7 10 ff ff       	call   c000c692 <Device::preOpenPCI(PCIDeviceInfo)>
c001b5ab:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b5ae:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b5b2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b5ba:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b5c2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b5ca:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b5cd:	83 c4 4c             	add    esp,0x4c
c001b5d0:	5b                   	pop    ebx
c001b5d1:	5e                   	pop    esi
c001b5d2:	5f                   	pop    edi
c001b5d3:	5d                   	pop    ebp
c001b5d4:	ff e0                	jmp    eax
c001b5d6:	83 ec 0c             	sub    esp,0xc
c001b5d9:	68 58 01 00 00       	push   0x158
c001b5de:	e8 f0 c4 fe ff       	call   c0007ad3 <malloc>
c001b5e3:	5a                   	pop    edx
c001b5e4:	59                   	pop    ecx
c001b5e5:	68 8a 2c 02 c0       	push   0xc0022c8a
c001b5ea:	50                   	push   eax
c001b5eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b5ef:	e8 f6 13 ff ff       	call   c000c9ea <DriverlessDevice::DriverlessDevice(char const*)>
c001b5f4:	5e                   	pop    esi
c001b5f5:	5f                   	pop    edi
c001b5f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5fa:	50                   	push   eax
c001b5fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5ff:	53                   	push   ebx
c001b600:	e8 47 11 ff ff       	call   c000c74c <Device::addChild(Device*)>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	b9 09 00 00 00       	mov    ecx,0x9
c001b60d:	fc                   	cld    
c001b60e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b612:	89 fe                	mov    esi,edi
c001b614:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b61a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b61e:	83 c4 1c             	add    esp,0x1c
c001b621:	5b                   	pop    ebx
c001b622:	5e                   	pop    esi
c001b623:	5f                   	pop    edi
c001b624:	5d                   	pop    ebp
c001b625:	e9 68 10 ff ff       	jmp    c000c692 <Device::preOpenPCI(PCIDeviceInfo)>
c001b62a:	83 c4 1c             	add    esp,0x1c
c001b62d:	5b                   	pop    ebx
c001b62e:	5e                   	pop    esi
c001b62f:	5f                   	pop    edi
c001b630:	5d                   	pop    ebp
c001b631:	c3                   	ret    

c001b632 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b632:	55                   	push   ebp
c001b633:	57                   	push   edi
c001b634:	56                   	push   esi
c001b635:	53                   	push   ebx
c001b636:	83 ec 68             	sub    esp,0x68
c001b639:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b640:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b644:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b648:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b64f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b654:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b658:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b65f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b664:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b668:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b66d:	6a 0c                	push   0xc
c001b66f:	57                   	push   edi
c001b670:	53                   	push   ebx
c001b671:	56                   	push   esi
c001b672:	55                   	push   ebp
c001b673:	e8 24 f8 ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b678:	83 c4 20             	add    esp,0x20
c001b67b:	57                   	push   edi
c001b67c:	53                   	push   ebx
c001b67d:	56                   	push   esi
c001b67e:	55                   	push   ebp
c001b67f:	e8 0e f9 ff ff       	call   c001af92 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b684:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b689:	57                   	push   edi
c001b68a:	53                   	push   ebx
c001b68b:	56                   	push   esi
c001b68c:	55                   	push   ebp
c001b68d:	e8 96 f9 ff ff       	call   c001b028 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b692:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b696:	83 c4 14             	add    esp,0x14
c001b699:	6a 3c                	push   0x3c
c001b69b:	57                   	push   edi
c001b69c:	53                   	push   ebx
c001b69d:	56                   	push   esi
c001b69e:	55                   	push   ebp
c001b69f:	e8 f8 f7 ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6a4:	0f b6 c4             	movzx  eax,ah
c001b6a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6ab:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b6af:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b6b3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b6b8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b6be:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b6c4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6c8:	83 c4 20             	add    esp,0x20
c001b6cb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b6d0:	74 30                	je     c001b702 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6d2:	31 c0                	xor    eax,eax
c001b6d4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b6d8:	7e 28                	jle    c001b702 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b6da:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b6e2:	39 cb                	cmp    ebx,ecx
c001b6e4:	75 19                	jne    c001b6ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b6e6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b6ee:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b6f2:	75 0b                	jne    c001b6ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b6f4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b6fb:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b6ff:	40                   	inc    eax
c001b700:	eb d2                	jmp    c001b6d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b702:	31 d2                	xor    edx,edx
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	57                   	push   edi
c001b708:	53                   	push   ebx
c001b709:	56                   	push   esi
c001b70a:	52                   	push   edx
c001b70b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b70f:	55                   	push   ebp
c001b710:	e8 5f f9 ff ff       	call   c001b074 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b715:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b719:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b71d:	42                   	inc    edx
c001b71e:	83 c4 20             	add    esp,0x20
c001b721:	83 fa 06             	cmp    edx,0x6
c001b724:	75 de                	jne    c001b704 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b726:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b72a:	83 ec 0c             	sub    esp,0xc
c001b72d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b731:	c1 e2 08             	shl    edx,0x8
c001b734:	0f b6 c4             	movzx  eax,ah
c001b737:	09 d0                	or     eax,edx
c001b739:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b73e:	6a 02                	push   0x2
c001b740:	57                   	push   edi
c001b741:	53                   	push   ebx
c001b742:	56                   	push   esi
c001b743:	55                   	push   ebp
c001b744:	e8 53 f7 ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b749:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b74e:	83 c4 20             	add    esp,0x20
c001b751:	57                   	push   edi
c001b752:	53                   	push   ebx
c001b753:	56                   	push   esi
c001b754:	55                   	push   ebp
c001b755:	e8 82 f8 ff ff       	call   c001afdc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b75a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b75e:	57                   	push   edi
c001b75f:	53                   	push   ebx
c001b760:	56                   	push   esi
c001b761:	55                   	push   ebp
c001b762:	e8 df f7 ff ff       	call   c001af46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b767:	b9 09 00 00 00       	mov    ecx,0x9
c001b76c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b771:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b775:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b779:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b77d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b781:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b785:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b789:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b78d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b791:	83 ec 0c             	sub    esp,0xc
c001b794:	fc                   	cld    
c001b795:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b799:	89 e7                	mov    edi,esp
c001b79b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b79d:	55                   	push   ebp
c001b79e:	e8 09 fd ff ff       	call   c001b4ac <PCI::foundDevice(PCIDeviceInfo)>
c001b7a3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b7a9:	5b                   	pop    ebx
c001b7aa:	5e                   	pop    esi
c001b7ab:	5f                   	pop    edi
c001b7ac:	5d                   	pop    ebp
c001b7ad:	c3                   	ret    

c001b7ae <PCI::checkDevice(unsigned char, unsigned char)>:
c001b7ae:	55                   	push   ebp
c001b7af:	57                   	push   edi
c001b7b0:	56                   	push   esi
c001b7b1:	53                   	push   ebx
c001b7b2:	83 ec 0c             	sub    esp,0xc
c001b7b5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b7ba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b7bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b7c3:	6a 00                	push   0x0
c001b7c5:	56                   	push   esi
c001b7c6:	57                   	push   edi
c001b7c7:	55                   	push   ebp
c001b7c8:	e8 79 f7 ff ff       	call   c001af46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7cd:	6a 00                	push   0x0
c001b7cf:	56                   	push   esi
c001b7d0:	57                   	push   edi
c001b7d1:	55                   	push   ebp
c001b7d2:	e8 5b fe ff ff       	call   c001b632 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b7d7:	83 c4 20             	add    esp,0x20
c001b7da:	6a 00                	push   0x0
c001b7dc:	56                   	push   esi
c001b7dd:	57                   	push   edi
c001b7de:	55                   	push   ebp
c001b7df:	e8 86 f7 ff ff       	call   c001af6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b7e4:	83 c4 10             	add    esp,0x10
c001b7e7:	a8 80                	test   al,0x80
c001b7e9:	74 2d                	je     c001b818 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b7eb:	bb 01 00 00 00       	mov    ebx,0x1
c001b7f0:	53                   	push   ebx
c001b7f1:	56                   	push   esi
c001b7f2:	57                   	push   edi
c001b7f3:	55                   	push   ebp
c001b7f4:	e8 4d f7 ff ff       	call   c001af46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7f9:	83 c4 10             	add    esp,0x10
c001b7fc:	0f b7 c0             	movzx  eax,ax
c001b7ff:	3d ff ff 00 00       	cmp    eax,0xffff
c001b804:	74 0c                	je     c001b812 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b806:	53                   	push   ebx
c001b807:	56                   	push   esi
c001b808:	57                   	push   edi
c001b809:	55                   	push   ebp
c001b80a:	e8 23 fe ff ff       	call   c001b632 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	43                   	inc    ebx
c001b813:	83 fb 08             	cmp    ebx,0x8
c001b816:	75 d8                	jne    c001b7f0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b818:	83 c4 0c             	add    esp,0xc
c001b81b:	5b                   	pop    ebx
c001b81c:	5e                   	pop    esi
c001b81d:	5f                   	pop    edi
c001b81e:	5d                   	pop    ebp
c001b81f:	c3                   	ret    

c001b820 <PCI::detect()>:
c001b820:	56                   	push   esi
c001b821:	53                   	push   ebx
c001b822:	53                   	push   ebx
c001b823:	31 db                	xor    ebx,ebx
c001b825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b829:	6a 00                	push   0x0
c001b82b:	6a 00                	push   0x0
c001b82d:	6a 00                	push   0x0
c001b82f:	56                   	push   esi
c001b830:	e8 35 f7 ff ff       	call   c001af6a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b835:	83 c4 10             	add    esp,0x10
c001b838:	a8 80                	test   al,0x80
c001b83a:	75 21                	jne    c001b85d <PCI::detect()+0x3d>
c001b83c:	51                   	push   ecx
c001b83d:	51                   	push   ecx
c001b83e:	6a 00                	push   0x0
c001b840:	56                   	push   esi
c001b841:	e8 42 fc ff ff       	call   c001b488 <PCI::checkBus(unsigned char)>
c001b846:	83 c4 10             	add    esp,0x10
c001b849:	eb 2a                	jmp    c001b875 <PCI::detect()+0x55>
c001b84b:	52                   	push   edx
c001b84c:	52                   	push   edx
c001b84d:	53                   	push   ebx
c001b84e:	43                   	inc    ebx
c001b84f:	56                   	push   esi
c001b850:	e8 33 fc ff ff       	call   c001b488 <PCI::checkBus(unsigned char)>
c001b855:	83 c4 10             	add    esp,0x10
c001b858:	83 fb 08             	cmp    ebx,0x8
c001b85b:	74 18                	je     c001b875 <PCI::detect()+0x55>
c001b85d:	53                   	push   ebx
c001b85e:	6a 00                	push   0x0
c001b860:	6a 00                	push   0x0
c001b862:	56                   	push   esi
c001b863:	e8 de f6 ff ff       	call   c001af46 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b868:	83 c4 10             	add    esp,0x10
c001b86b:	0f b7 c0             	movzx  eax,ax
c001b86e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b873:	74 d6                	je     c001b84b <PCI::detect()+0x2b>
c001b875:	58                   	pop    eax
c001b876:	5b                   	pop    ebx
c001b877:	5e                   	pop    esi
c001b878:	c3                   	ret    
c001b879:	90                   	nop

c001b87a <IDE::close(int, int, void*)>:
c001b87a:	83 c8 ff             	or     eax,0xffffffff
c001b87d:	c3                   	ret    

c001b87e <IDE::IDE()>:
c001b87e:	83 ec 0c             	sub    esp,0xc
c001b881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b885:	83 ec 08             	sub    esp,0x8
c001b888:	68 d0 2c 02 c0       	push   0xc0022cd0
c001b88d:	50                   	push   eax
c001b88e:	e8 fd 11 ff ff       	call   c000ca90 <HardDiskController::HardDiskController(char const*)>
c001b893:	83 c4 10             	add    esp,0x10
c001b896:	ba 60 2d 02 c0       	mov    edx,0xc0022d60
c001b89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89f:	89 10                	mov    DWORD PTR [eax],edx
c001b8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b8ac:	90                   	nop
c001b8ad:	83 c4 0c             	add    esp,0xc
c001b8b0:	c3                   	ret    
c001b8b1:	90                   	nop

c001b8b2 <IDE::prepareInterrupt(unsigned char)>:
c001b8b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b8b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b8bb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b8c3:	c3                   	ret    

c001b8c4 <selectDrive(unsigned char, unsigned char)>:
c001b8c4:	c3                   	ret    
c001b8c5:	90                   	nop

c001b8c6 <IDE::getBase(unsigned char)>:
c001b8c6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8cf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b8d7:	c3                   	ret    

c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b8d8:	55                   	push   ebp
c001b8d9:	57                   	push   edi
c001b8da:	56                   	push   esi
c001b8db:	53                   	push   ebx
c001b8dc:	83 ec 1c             	sub    esp,0x1c
c001b8df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b8eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8ef:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b8f2:	80 f9 03             	cmp    cl,0x3
c001b8f5:	77 4f                	ja     c001b946 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b8f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8fb:	0f b6 f2             	movzx  esi,dl
c001b8fe:	0f b6 db             	movzx  ebx,bl
c001b901:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b904:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b909:	80 ca 80             	or     dl,0x80
c001b90c:	52                   	push   edx
c001b90d:	6a 0c                	push   0xc
c001b90f:	56                   	push   esi
c001b910:	57                   	push   edi
c001b911:	e8 c2 ff ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b916:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b91b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b91f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b923:	ee                   	out    dx,al
c001b924:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b929:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b92d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b931:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b939:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b93d:	83 c4 2c             	add    esp,0x2c
c001b940:	5b                   	pop    ebx
c001b941:	5e                   	pop    esi
c001b942:	5f                   	pop    edi
c001b943:	5d                   	pop    ebp
c001b944:	eb 92                	jmp    c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b946:	0f b6 cb             	movzx  ecx,bl
c001b949:	83 f9 07             	cmp    ecx,0x7
c001b94c:	77 12                	ja     c001b960 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b94e:	0f b6 d2             	movzx  edx,dl
c001b951:	0f b6 db             	movzx  ebx,bl
c001b954:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b95c:	01 da                	add    edx,ebx
c001b95e:	eb 2f                	jmp    c001b98f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b960:	83 f9 0d             	cmp    ecx,0xd
c001b963:	77 13                	ja     c001b978 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b965:	0f b6 d2             	movzx  edx,dl
c001b968:	0f b6 db             	movzx  ebx,bl
c001b96b:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b972:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b976:	eb 17                	jmp    c001b98f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b978:	83 f9 15             	cmp    ecx,0x15
c001b97b:	77 13                	ja     c001b990 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b97d:	0f b6 d2             	movzx  edx,dl
c001b980:	0f b6 db             	movzx  ebx,bl
c001b983:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b98b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b98f:	ee                   	out    dx,al
c001b990:	83 c4 1c             	add    esp,0x1c
c001b993:	5b                   	pop    ebx
c001b994:	5e                   	pop    esi
c001b995:	5f                   	pop    edi
c001b996:	5d                   	pop    ebp
c001b997:	c3                   	ret    

c001b998 <IDE::read(unsigned char, unsigned char)>:
c001b998:	57                   	push   edi
c001b999:	56                   	push   esi
c001b99a:	53                   	push   ebx
c001b99b:	83 ec 10             	sub    esp,0x10
c001b99e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9a6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9aa:	8d 42 f8             	lea    eax,[edx-0x8]
c001b9ad:	3c 03                	cmp    al,0x3
c001b9af:	77 48                	ja     c001b9f9 <IDE::read(unsigned char, unsigned char)+0x61>
c001b9b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9b5:	0f b6 f1             	movzx  esi,cl
c001b9b8:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b9bb:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b9c0:	0c 80                	or     al,0x80
c001b9c2:	50                   	push   eax
c001b9c3:	6a 0c                	push   0xc
c001b9c5:	56                   	push   esi
c001b9c6:	53                   	push   ebx
c001b9c7:	e8 0c ff ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9d0:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b9d5:	0f b6 d2             	movzx  edx,dl
c001b9d8:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b9dc:	ec                   	in     al,dx
c001b9dd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b9e1:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b9e6:	52                   	push   edx
c001b9e7:	6a 0c                	push   0xc
c001b9e9:	56                   	push   esi
c001b9ea:	53                   	push   ebx
c001b9eb:	e8 e8 fe ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9f0:	83 c4 20             	add    esp,0x20
c001b9f3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b9f7:	eb 4c                	jmp    c001ba45 <IDE::read(unsigned char, unsigned char)+0xad>
c001b9f9:	0f b6 f2             	movzx  esi,dl
c001b9fc:	83 fe 07             	cmp    esi,0x7
c001b9ff:	77 12                	ja     c001ba13 <IDE::read(unsigned char, unsigned char)+0x7b>
c001ba01:	0f b6 c9             	movzx  ecx,cl
c001ba04:	0f b6 d2             	movzx  edx,dl
c001ba07:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001ba0f:	01 c2                	add    edx,eax
c001ba11:	eb 31                	jmp    c001ba44 <IDE::read(unsigned char, unsigned char)+0xac>
c001ba13:	83 fe 0d             	cmp    esi,0xd
c001ba16:	77 13                	ja     c001ba2b <IDE::read(unsigned char, unsigned char)+0x93>
c001ba18:	0f b6 c9             	movzx  ecx,cl
c001ba1b:	0f b6 d2             	movzx  edx,dl
c001ba1e:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001ba25:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ba29:	eb 19                	jmp    c001ba44 <IDE::read(unsigned char, unsigned char)+0xac>
c001ba2b:	31 c0                	xor    eax,eax
c001ba2d:	83 fe 15             	cmp    esi,0x15
c001ba30:	77 13                	ja     c001ba45 <IDE::read(unsigned char, unsigned char)+0xad>
c001ba32:	0f b6 c9             	movzx  ecx,cl
c001ba35:	0f b6 d2             	movzx  edx,dl
c001ba38:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001ba40:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ba44:	ec                   	in     al,dx
c001ba45:	83 c4 10             	add    esp,0x10
c001ba48:	5b                   	pop    ebx
c001ba49:	5e                   	pop    esi
c001ba4a:	5f                   	pop    edi
c001ba4b:	c3                   	ret    

c001ba4c <IDE::waitInterrupt(unsigned char)>:
c001ba4c:	55                   	push   ebp
c001ba4d:	57                   	push   edi
c001ba4e:	56                   	push   esi
c001ba4f:	53                   	push   ebx
c001ba50:	31 db                	xor    ebx,ebx
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba59:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ba5e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ba66:	89 e8                	mov    eax,ebp
c001ba68:	84 c0                	test   al,al
c001ba6a:	75 30                	jne    c001ba9c <IDE::waitInterrupt(unsigned char)+0x50>
c001ba6c:	50                   	push   eax
c001ba6d:	6a 0c                	push   0xc
c001ba6f:	56                   	push   esi
c001ba70:	57                   	push   edi
c001ba71:	e8 22 ff ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001ba76:	83 c4 10             	add    esp,0x10
c001ba79:	a8 01                	test   al,0x1
c001ba7b:	75 27                	jne    c001baa4 <IDE::waitInterrupt(unsigned char)+0x58>
c001ba7d:	f6 c3 04             	test   bl,0x4
c001ba80:	75 12                	jne    c001ba94 <IDE::waitInterrupt(unsigned char)+0x48>
c001ba82:	83 fb 32             	cmp    ebx,0x32
c001ba85:	7e 0d                	jle    c001ba94 <IDE::waitInterrupt(unsigned char)+0x48>
c001ba87:	83 ec 0c             	sub    esp,0xc
c001ba8a:	6a 64                	push   0x64
c001ba8c:	e8 73 a4 ff ff       	call   c0015f04 <milliTenthSleep(unsigned int)>
c001ba91:	83 c4 10             	add    esp,0x10
c001ba94:	83 fb 3c             	cmp    ebx,0x3c
c001ba97:	74 0b                	je     c001baa4 <IDE::waitInterrupt(unsigned char)+0x58>
c001ba99:	43                   	inc    ebx
c001ba9a:	eb c2                	jmp    c001ba5e <IDE::waitInterrupt(unsigned char)+0x12>
c001ba9c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001baa4:	83 c4 0c             	add    esp,0xc
c001baa7:	89 e8                	mov    eax,ebp
c001baa9:	5b                   	pop    ebx
c001baaa:	5e                   	pop    esi
c001baab:	5f                   	pop    edi
c001baac:	5d                   	pop    ebp
c001baad:	c3                   	ret    

c001baae <ideChannel0IRQHandler(regs*, void*)>:
c001baae:	83 ec 10             	sub    esp,0x10
c001bab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bab5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001babc:	6a 07                	push   0x7
c001babe:	6a 00                	push   0x0
c001bac0:	50                   	push   eax
c001bac1:	e8 d2 fe ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001bac6:	83 c4 1c             	add    esp,0x1c
c001bac9:	c3                   	ret    

c001baca <ideChannel1IRQHandler(regs*, void*)>:
c001baca:	83 ec 10             	sub    esp,0x10
c001bacd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bad1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bad8:	6a 07                	push   0x7
c001bada:	6a 01                	push   0x1
c001badc:	50                   	push   eax
c001badd:	e8 b6 fe ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001bae2:	83 c4 1c             	add    esp,0x1c
c001bae5:	c3                   	ret    

c001bae6 <IDE::enableIRQs(unsigned char, bool)>:
c001bae6:	57                   	push   edi
c001bae7:	b8 02 00 00 00       	mov    eax,0x2
c001baec:	56                   	push   esi
c001baed:	53                   	push   ebx
c001baee:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001baf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001baf7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bafb:	74 02                	je     c001baff <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bafd:	31 c0                	xor    eax,eax
c001baff:	0f b6 db             	movzx  ebx,bl
c001bb02:	bf 04 00 00 00       	mov    edi,0x4
c001bb07:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bb0e:	50                   	push   eax
c001bb0f:	6a 0c                	push   0xc
c001bb11:	53                   	push   ebx
c001bb12:	56                   	push   esi
c001bb13:	e8 c0 fd ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	50                   	push   eax
c001bb1c:	6a 0c                	push   0xc
c001bb1e:	53                   	push   ebx
c001bb1f:	56                   	push   esi
c001bb20:	e8 73 fe ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001bb25:	83 c4 10             	add    esp,0x10
c001bb28:	4f                   	dec    edi
c001bb29:	75 f0                	jne    c001bb1b <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bb2b:	5b                   	pop    ebx
c001bb2c:	5e                   	pop    esi
c001bb2d:	5f                   	pop    edi
c001bb2e:	c3                   	ret    
c001bb2f:	90                   	nop

c001bb30 <IDE::open(int, int, void*)>:
c001bb30:	55                   	push   ebp
c001bb31:	57                   	push   edi
c001bb32:	56                   	push   esi
c001bb33:	53                   	push   ebx
c001bb34:	83 ec 1c             	sub    esp,0x1c
c001bb37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb3b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bb42:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bb4b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bb54:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bb5b:	0f 85 da 02 00 00    	jne    c001be3b <IDE::open(int, int, void*)+0x30b>
c001bb61:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bb67:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bb6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb6f:	83 e0 7f             	and    eax,0x7f
c001bb72:	83 f8 05             	cmp    eax,0x5
c001bb75:	74 05                	je     c001bb7c <IDE::open(int, int, void*)+0x4c>
c001bb77:	83 f8 0f             	cmp    eax,0xf
c001bb7a:	75 32                	jne    c001bbae <IDE::open(int, int, void*)+0x7e>
c001bb7c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bb82:	83 e0 fc             	and    eax,0xfffffffc
c001bb85:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bb8c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bb92:	83 e0 fc             	and    eax,0xfffffffc
c001bb95:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bb9c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bba2:	83 e0 fc             	and    eax,0xfffffffc
c001bba5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbac:	eb 14                	jmp    c001bbc2 <IDE::open(int, int, void*)+0x92>
c001bbae:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bbb8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bbc2:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bbc9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bbce:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bbd5:	89 fa                	mov    edx,edi
c001bbd7:	89 f1                	mov    ecx,esi
c001bbd9:	c1 e1 10             	shl    ecx,0x10
c001bbdc:	89 e8                	mov    eax,ebp
c001bbde:	c1 e0 0b             	shl    eax,0xb
c001bbe1:	09 c1                	or     ecx,eax
c001bbe3:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bbea:	c1 e0 08             	shl    eax,0x8
c001bbed:	09 c1                	or     ecx,eax
c001bbef:	89 c8                	mov    eax,ecx
c001bbf1:	0d 08 00 00 80       	or     eax,0x80000008
c001bbf6:	ef                   	out    dx,eax
c001bbf7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bbfc:	ed                   	in     eax,dx
c001bbfd:	c1 e8 10             	shr    eax,0x10
c001bc00:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc05:	0f 84 f9 00 00 00    	je     c001bd04 <IDE::open(int, int, void*)+0x1d4>
c001bc0b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc11:	89 fa                	mov    edx,edi
c001bc13:	89 c8                	mov    eax,ecx
c001bc15:	ef                   	out    dx,eax
c001bc16:	b0 fe                	mov    al,0xfe
c001bc18:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc1d:	ee                   	out    dx,al
c001bc1e:	89 c8                	mov    eax,ecx
c001bc20:	89 fa                	mov    edx,edi
c001bc22:	ef                   	out    dx,eax
c001bc23:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bc28:	ed                   	in     eax,dx
c001bc29:	3c fe                	cmp    al,0xfe
c001bc2b:	0f 85 a4 00 00 00    	jne    c001bcd5 <IDE::open(int, int, void*)+0x1a5>
c001bc31:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bc37:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bc3e:	74 30                	je     c001bc70 <IDE::open(int, int, void*)+0x140>
c001bc40:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bc46:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bc4a:	83 ec 0c             	sub    esp,0xc
c001bc4d:	40                   	inc    eax
c001bc4e:	0f b6 c0             	movzx  eax,al
c001bc51:	50                   	push   eax
c001bc52:	55                   	push   ebp
c001bc53:	56                   	push   esi
c001bc54:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bc5a:	51                   	push   ecx
c001bc5b:	e8 88 3a ff ff       	call   c000f6e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bc60:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bc65:	83 c4 1c             	add    esp,0x1c
c001bc68:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc6e:	eb 0a                	jmp    c001bc7a <IDE::open(int, int, void*)+0x14a>
c001bc70:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bc7a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bc81:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bc86:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc8d:	89 ea                	mov    edx,ebp
c001bc8f:	c1 e1 10             	shl    ecx,0x10
c001bc92:	c1 e0 08             	shl    eax,0x8
c001bc95:	09 c1                	or     ecx,eax
c001bc97:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bc9e:	c1 e0 0b             	shl    eax,0xb
c001bca1:	09 c1                	or     ecx,eax
c001bca3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bca9:	89 c8                	mov    eax,ecx
c001bcab:	ef                   	out    dx,eax
c001bcac:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bcb2:	be fc 0c 00 00       	mov    esi,0xcfc
c001bcb7:	89 f2                	mov    edx,esi
c001bcb9:	89 f8                	mov    eax,edi
c001bcbb:	ee                   	out    dx,al
c001bcbc:	89 c8                	mov    eax,ecx
c001bcbe:	89 ea                	mov    edx,ebp
c001bcc0:	ef                   	out    dx,eax
c001bcc1:	89 f2                	mov    edx,esi
c001bcc3:	ed                   	in     eax,dx
c001bcc4:	0f b6 c0             	movzx  eax,al
c001bcc7:	39 f8                	cmp    eax,edi
c001bcc9:	74 49                	je     c001bd14 <IDE::open(int, int, void*)+0x1e4>
c001bccb:	83 ec 0c             	sub    esp,0xc
c001bcce:	68 e8 2c 02 c0       	push   0xc0022ce8
c001bcd3:	eb 37                	jmp    c001bd0c <IDE::open(int, int, void*)+0x1dc>
c001bcd5:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bcde:	75 1a                	jne    c001bcfa <IDE::open(int, int, void*)+0x1ca>
c001bce0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bce5:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bcea:	74 05                	je     c001bcf1 <IDE::open(int, int, void*)+0x1c1>
c001bcec:	83 c0 80             	add    eax,0xffffff80
c001bcef:	75 09                	jne    c001bcfa <IDE::open(int, int, void*)+0x1ca>
c001bcf1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcf8:	eb 1a                	jmp    c001bd14 <IDE::open(int, int, void*)+0x1e4>
c001bcfa:	83 ec 0c             	sub    esp,0xc
c001bcfd:	68 f0 2c 02 c0       	push   0xc0022cf0
c001bd02:	eb 08                	jmp    c001bd0c <IDE::open(int, int, void*)+0x1dc>
c001bd04:	83 ec 0c             	sub    esp,0xc
c001bd07:	68 21 2d 02 c0       	push   0xc0022d21
c001bd0c:	e8 d8 55 ff ff       	call   c00112e9 <KePanic(char const*)>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bd1b:	74 1a                	je     c001bd37 <IDE::open(int, int, void*)+0x207>
c001bd1d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bd23:	83 e0 fc             	and    eax,0xfffffffc
c001bd26:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bd2d:	83 c0 08             	add    eax,0x8
c001bd30:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bd37:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bd3d:	89 c2                	mov    edx,eax
c001bd3f:	83 e2 0f             	and    edx,0xf
c001bd42:	83 fa 08             	cmp    edx,0x8
c001bd45:	75 0a                	jne    c001bd51 <IDE::open(int, int, void*)+0x221>
c001bd47:	83 e8 02             	sub    eax,0x2
c001bd4a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd51:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bd57:	89 c2                	mov    edx,eax
c001bd59:	83 e2 0f             	and    edx,0xf
c001bd5c:	83 fa 08             	cmp    edx,0x8
c001bd5f:	75 0a                	jne    c001bd6b <IDE::open(int, int, void*)+0x23b>
c001bd61:	83 e8 02             	sub    eax,0x2
c001bd64:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd6b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bd72:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bd79:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd7c:	89 d0                	mov    eax,edx
c001bd7e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd82:	8d 7a 01             	lea    edi,[edx+0x1]
c001bd85:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bd89:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd8d:	83 e1 3f             	and    ecx,0x3f
c001bd90:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd94:	89 f9                	mov    ecx,edi
c001bd96:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bd9d:	8d 78 02             	lea    edi,[eax+0x2]
c001bda0:	0f b6 c9             	movzx  ecx,cl
c001bda3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bda6:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bdaa:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bdae:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bdb2:	83 e2 3f             	and    edx,0x3f
c001bdb5:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bdb9:	89 f9                	mov    ecx,edi
c001bdbb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bdc1:	8d 78 03             	lea    edi,[eax+0x3]
c001bdc4:	0f b6 d1             	movzx  edx,cl
c001bdc7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdca:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bdce:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdd2:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bdd6:	83 e1 3f             	and    ecx,0x3f
c001bdd9:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bddd:	89 f9                	mov    ecx,edi
c001bddf:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bde5:	8d 78 04             	lea    edi,[eax+0x4]
c001bde8:	0f b6 c9             	movzx  ecx,cl
c001bdeb:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bdee:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bdf2:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bdf6:	89 fa                	mov    edx,edi
c001bdf8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bdfe:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be02:	83 e2 3f             	and    edx,0x3f
c001be05:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be09:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001be10:	66 85 f6             	test   si,si
c001be13:	74 65                	je     c001be7a <IDE::open(int, int, void*)+0x34a>
c001be15:	89 f9                	mov    ecx,edi
c001be17:	83 c0 05             	add    eax,0x5
c001be1a:	0f b6 d1             	movzx  edx,cl
c001be1d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be20:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be24:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001be28:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001be2e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001be32:	83 e0 3f             	and    eax,0x3f
c001be35:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001be39:	eb 3f                	jmp    c001be7a <IDE::open(int, int, void*)+0x34a>
c001be3b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be42:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001be48:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be4f:	05 06 02 00 00       	add    eax,0x206
c001be54:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be5b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001be62:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be69:	05 06 02 00 00       	add    eax,0x206
c001be6e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be75:	e9 bd fe ff ff       	jmp    c001bd37 <IDE::open(int, int, void*)+0x207>
c001be7a:	50                   	push   eax
c001be7b:	50                   	push   eax
c001be7c:	6a 00                	push   0x0
c001be7e:	53                   	push   ebx
c001be7f:	e8 2e fa ff ff       	call   c001b8b2 <IDE::prepareInterrupt(unsigned char)>
c001be84:	5a                   	pop    edx
c001be85:	59                   	pop    ecx
c001be86:	6a 01                	push   0x1
c001be88:	53                   	push   ebx
c001be89:	e8 24 fa ff ff       	call   c001b8b2 <IDE::prepareInterrupt(unsigned char)>
c001be8e:	83 c4 0c             	add    esp,0xc
c001be91:	6a 00                	push   0x0
c001be93:	6a 00                	push   0x0
c001be95:	53                   	push   ebx
c001be96:	e8 4b fc ff ff       	call   c001bae6 <IDE::enableIRQs(unsigned char, bool)>
c001be9b:	83 c4 0c             	add    esp,0xc
c001be9e:	6a 00                	push   0x0
c001bea0:	6a 01                	push   0x1
c001bea2:	53                   	push   ebx
c001bea3:	e8 3e fc ff ff       	call   c001bae6 <IDE::enableIRQs(unsigned char, bool)>
c001bea8:	83 c4 10             	add    esp,0x10
c001beab:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001beb2:	74 34                	je     c001bee8 <IDE::open(int, int, void*)+0x3b8>
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	53                   	push   ebx
c001beb8:	6a 01                	push   0x1
c001beba:	68 ae ba 01 c0       	push   0xc001baae
c001bebf:	6a 0e                	push   0xe
c001bec1:	53                   	push   ebx
c001bec2:	e8 31 08 ff ff       	call   c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bec7:	83 c4 14             	add    esp,0x14
c001beca:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bed0:	53                   	push   ebx
c001bed1:	6a 01                	push   0x1
c001bed3:	68 ca ba 01 c0       	push   0xc001baca
c001bed8:	6a 0f                	push   0xf
c001beda:	53                   	push   ebx
c001bedb:	e8 18 08 ff ff       	call   c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bee0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bee6:	eb 38                	jmp    c001bf20 <IDE::open(int, int, void*)+0x3f0>
c001bee8:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bef2:	83 ec 0c             	sub    esp,0xc
c001bef5:	53                   	push   ebx
c001bef6:	6a 00                	push   0x0
c001bef8:	68 ae ba 01 c0       	push   0xc001baae
c001befd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bf03:	53                   	push   ebx
c001bf04:	e8 ef 07 ff ff       	call   c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf09:	83 c4 14             	add    esp,0x14
c001bf0c:	53                   	push   ebx
c001bf0d:	6a 00                	push   0x0
c001bf0f:	68 ca ba 01 c0       	push   0xc001baca
c001bf14:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bf1a:	53                   	push   ebx
c001bf1b:	e8 d8 07 ff ff       	call   c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf22:	83 c4 20             	add    esp,0x20
c001bf25:	83 ec 0c             	sub    esp,0xc
c001bf28:	53                   	push   ebx
c001bf29:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bf2c:	83 c4 0c             	add    esp,0xc
c001bf2f:	6a 07                	push   0x7
c001bf31:	6a 00                	push   0x0
c001bf33:	53                   	push   ebx
c001bf34:	e8 5f fa ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001bf39:	83 c4 0c             	add    esp,0xc
c001bf3c:	6a 07                	push   0x7
c001bf3e:	6a 01                	push   0x1
c001bf40:	53                   	push   ebx
c001bf41:	e8 52 fa ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001bf46:	83 c4 0c             	add    esp,0xc
c001bf49:	6a 01                	push   0x1
c001bf4b:	6a 00                	push   0x0
c001bf4d:	53                   	push   ebx
c001bf4e:	e8 93 fb ff ff       	call   c001bae6 <IDE::enableIRQs(unsigned char, bool)>
c001bf53:	83 c4 0c             	add    esp,0xc
c001bf56:	6a 01                	push   0x1
c001bf58:	6a 01                	push   0x1
c001bf5a:	53                   	push   ebx
c001bf5b:	e8 86 fb ff ff       	call   c001bae6 <IDE::enableIRQs(unsigned char, bool)>
c001bf60:	83 c4 2c             	add    esp,0x2c
c001bf63:	31 c0                	xor    eax,eax
c001bf65:	5b                   	pop    ebx
c001bf66:	5e                   	pop    esi
c001bf67:	5f                   	pop    edi
c001bf68:	5d                   	pop    ebp
c001bf69:	c3                   	ret    

c001bf6a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bf6a:	55                   	push   ebp
c001bf6b:	57                   	push   edi
c001bf6c:	56                   	push   esi
c001bf6d:	53                   	push   ebx
c001bf6e:	83 ec 1c             	sub    esp,0x1c
c001bf71:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf79:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bf81:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf84:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf88:	3c 03                	cmp    al,0x3
c001bf8a:	77 5a                	ja     c001bfe6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bf8c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bf90:	0f b6 db             	movzx  ebx,bl
c001bf93:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bf97:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bf9a:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf9f:	0c 80                	or     al,0x80
c001bfa1:	50                   	push   eax
c001bfa2:	6a 0c                	push   0xc
c001bfa4:	53                   	push   ebx
c001bfa5:	56                   	push   esi
c001bfa6:	e8 2d f9 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfaf:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bfb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bfb8:	0f b6 d2             	movzx  edx,dl
c001bfbb:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bfbf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bfc1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bfc6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bfca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bfce:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bfda:	83 c4 2c             	add    esp,0x2c
c001bfdd:	5b                   	pop    ebx
c001bfde:	5e                   	pop    esi
c001bfdf:	5f                   	pop    edi
c001bfe0:	5d                   	pop    ebp
c001bfe1:	e9 f2 f8 ff ff       	jmp    c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfe6:	0f b6 c2             	movzx  eax,dl
c001bfe9:	83 f8 07             	cmp    eax,0x7
c001bfec:	77 12                	ja     c001c000 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bfee:	0f b6 db             	movzx  ebx,bl
c001bff1:	0f b6 c2             	movzx  eax,dl
c001bff4:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bffc:	01 c2                	add    edx,eax
c001bffe:	eb 2f                	jmp    c001c02f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c000:	83 f8 0d             	cmp    eax,0xd
c001c003:	77 13                	ja     c001c018 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c005:	0f b6 db             	movzx  ebx,bl
c001c008:	0f b6 d2             	movzx  edx,dl
c001c00b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c012:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c016:	eb 17                	jmp    c001c02f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c018:	83 f8 15             	cmp    eax,0x15
c001c01b:	77 14                	ja     c001c031 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c01d:	0f b6 db             	movzx  ebx,bl
c001c020:	0f b6 d2             	movzx  edx,dl
c001c023:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c02b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c02f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c031:	83 c4 1c             	add    esp,0x1c
c001c034:	5b                   	pop    ebx
c001c035:	5e                   	pop    esi
c001c036:	5f                   	pop    edi
c001c037:	5d                   	pop    ebp
c001c038:	c3                   	ret    
c001c039:	90                   	nop

c001c03a <IDE::detect()>:
c001c03a:	55                   	push   ebp
c001c03b:	57                   	push   edi
c001c03c:	56                   	push   esi
c001c03d:	53                   	push   ebx
c001c03e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c044:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c04b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c052:	0f 85 9e 02 00 00    	jne    c001c2f6 <IDE::detect()+0x2bc>
c001c058:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c05f:	31 f6                	xor    esi,esi
c001c061:	31 ff                	xor    edi,edi
c001c063:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c06b:	89 f8                	mov    eax,edi
c001c06d:	c1 e0 06             	shl    eax,0x6
c001c070:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c078:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c07c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c084:	c1 e0 04             	shl    eax,0x4
c001c087:	83 c8 a0             	or     eax,0xffffffa0
c001c08a:	0f b6 c0             	movzx  eax,al
c001c08d:	50                   	push   eax
c001c08e:	6a 06                	push   0x6
c001c090:	56                   	push   esi
c001c091:	53                   	push   ebx
c001c092:	e8 41 f8 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c097:	83 c4 0c             	add    esp,0xc
c001c09a:	6a 0c                	push   0xc
c001c09c:	56                   	push   esi
c001c09d:	53                   	push   ebx
c001c09e:	e8 f5 f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c0a3:	83 c4 0c             	add    esp,0xc
c001c0a6:	6a 0c                	push   0xc
c001c0a8:	56                   	push   esi
c001c0a9:	53                   	push   ebx
c001c0aa:	e8 e9 f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c0af:	83 c4 0c             	add    esp,0xc
c001c0b2:	6a 0c                	push   0xc
c001c0b4:	56                   	push   esi
c001c0b5:	53                   	push   ebx
c001c0b6:	e8 dd f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c0bb:	83 c4 0c             	add    esp,0xc
c001c0be:	6a 0c                	push   0xc
c001c0c0:	56                   	push   esi
c001c0c1:	53                   	push   ebx
c001c0c2:	e8 d1 f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c0c7:	68 ec 00 00 00       	push   0xec
c001c0cc:	6a 07                	push   0x7
c001c0ce:	56                   	push   esi
c001c0cf:	53                   	push   ebx
c001c0d0:	e8 03 f8 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0d5:	83 c4 1c             	add    esp,0x1c
c001c0d8:	6a 0c                	push   0xc
c001c0da:	56                   	push   esi
c001c0db:	53                   	push   ebx
c001c0dc:	e8 b7 f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c0e1:	83 c4 0c             	add    esp,0xc
c001c0e4:	6a 0c                	push   0xc
c001c0e6:	56                   	push   esi
c001c0e7:	53                   	push   ebx
c001c0e8:	e8 ab f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c0ed:	83 c4 0c             	add    esp,0xc
c001c0f0:	6a 0c                	push   0xc
c001c0f2:	56                   	push   esi
c001c0f3:	53                   	push   ebx
c001c0f4:	e8 9f f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c0f9:	83 c4 0c             	add    esp,0xc
c001c0fc:	6a 0c                	push   0xc
c001c0fe:	56                   	push   esi
c001c0ff:	53                   	push   ebx
c001c100:	e8 93 f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c105:	83 c4 0c             	add    esp,0xc
c001c108:	6a 0c                	push   0xc
c001c10a:	56                   	push   esi
c001c10b:	53                   	push   ebx
c001c10c:	e8 87 f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c111:	83 c4 10             	add    esp,0x10
c001c114:	84 c0                	test   al,al
c001c116:	0f 84 61 01 00 00    	je     c001c27d <IDE::detect()+0x243>
c001c11c:	31 ed                	xor    ebp,ebp
c001c11e:	50                   	push   eax
c001c11f:	6a 0c                	push   0xc
c001c121:	56                   	push   esi
c001c122:	53                   	push   ebx
c001c123:	e8 70 f8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c128:	83 c4 10             	add    esp,0x10
c001c12b:	a8 01                	test   al,0x1
c001c12d:	0f 85 6b 01 00 00    	jne    c001c29e <IDE::detect()+0x264>
c001c133:	a8 80                	test   al,0x80
c001c135:	75 04                	jne    c001c13b <IDE::detect()+0x101>
c001c137:	a8 08                	test   al,0x8
c001c139:	75 23                	jne    c001c15e <IDE::detect()+0x124>
c001c13b:	45                   	inc    ebp
c001c13c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c142:	7e da                	jle    c001c11e <IDE::detect()+0xe4>
c001c144:	83 ec 0c             	sub    esp,0xc
c001c147:	6a 32                	push   0x32
c001c149:	e8 b6 9d ff ff       	call   c0015f04 <milliTenthSleep(unsigned int)>
c001c14e:	83 c4 10             	add    esp,0x10
c001c151:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c157:	75 c5                	jne    c001c11e <IDE::detect()+0xe4>
c001c159:	e9 40 01 00 00       	jmp    c001c29e <IDE::detect()+0x264>
c001c15e:	31 c9                	xor    ecx,ecx
c001c160:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c164:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c168:	83 ec 0c             	sub    esp,0xc
c001c16b:	68 80 00 00 00       	push   0x80
c001c170:	55                   	push   ebp
c001c171:	6a 00                	push   0x0
c001c173:	56                   	push   esi
c001c174:	53                   	push   ebx
c001c175:	e8 f0 fd ff ff       	call   c001bf6a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c17a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c17f:	89 f8                	mov    eax,edi
c001c181:	c1 e0 06             	shl    eax,0x6
c001c184:	01 d8                	add    eax,ebx
c001c186:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c18d:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c194:	89 d1                	mov    ecx,edx
c001c196:	89 f2                	mov    edx,esi
c001c198:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c19e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c1a2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c1a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1ac:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c1b3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c1bb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c1c2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c1ca:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c1d0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c1d7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c1dd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c1e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c1e5:	83 c4 20             	add    esp,0x20
c001c1e8:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c1eb:	83 c5 02             	add    ebp,0x2
c001c1ee:	83 c0 02             	add    eax,0x2
c001c1f1:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c1f7:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c1fa:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c200:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c204:	75 e2                	jne    c001c1e8 <IDE::detect()+0x1ae>
c001c206:	89 f8                	mov    eax,edi
c001c208:	c1 e0 06             	shl    eax,0x6
c001c20b:	01 d8                	add    eax,ebx
c001c20d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c214:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c21b:	c1 ea 09             	shr    edx,0x9
c001c21e:	83 e2 01             	and    edx,0x1
c001c221:	80 e1 01             	and    cl,0x1
c001c224:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c22a:	75 22                	jne    c001c24e <IDE::detect()+0x214>
c001c22c:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c233:	74 47                	je     c001c27c <IDE::detect()+0x242>
c001c235:	83 ec 0c             	sub    esp,0xc
c001c238:	68 7c 01 00 00       	push   0x17c
c001c23d:	e8 91 b8 fe ff       	call   c0007ad3 <malloc>
c001c242:	89 04 24             	mov    DWORD PTR [esp],eax
c001c245:	89 c5                	mov    ebp,eax
c001c247:	e8 16 05 00 00       	call   c001c762 <ATA::ATA()>
c001c24c:	eb 17                	jmp    c001c265 <IDE::detect()+0x22b>
c001c24e:	83 ec 0c             	sub    esp,0xc
c001c251:	68 84 01 00 00       	push   0x184
c001c256:	e8 78 b8 fe ff       	call   c0007ad3 <malloc>
c001c25b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c25e:	89 c5                	mov    ebp,eax
c001c260:	e8 6f 0e 00 00       	call   c001d0d4 <ATAPI::ATAPI()>
c001c265:	5a                   	pop    edx
c001c266:	59                   	pop    ecx
c001c267:	55                   	push   ebp
c001c268:	53                   	push   ebx
c001c269:	e8 de 04 ff ff       	call   c000c74c <Device::addChild(Device*)>
c001c26e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c271:	53                   	push   ebx
c001c272:	57                   	push   edi
c001c273:	6a 00                	push   0x0
c001c275:	55                   	push   ebp
c001c276:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c279:	83 c4 20             	add    esp,0x20
c001c27c:	47                   	inc    edi
c001c27d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c282:	74 0d                	je     c001c291 <IDE::detect()+0x257>
c001c284:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c28c:	e9 da fd ff ff       	jmp    c001c06b <IDE::detect()+0x31>
c001c291:	4e                   	dec    esi
c001c292:	74 62                	je     c001c2f6 <IDE::detect()+0x2bc>
c001c294:	be 01 00 00 00       	mov    esi,0x1
c001c299:	e9 c5 fd ff ff       	jmp    c001c063 <IDE::detect()+0x29>
c001c29e:	50                   	push   eax
c001c29f:	6a 04                	push   0x4
c001c2a1:	56                   	push   esi
c001c2a2:	53                   	push   ebx
c001c2a3:	e8 f0 f6 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c2a8:	83 c4 0c             	add    esp,0xc
c001c2ab:	6a 05                	push   0x5
c001c2ad:	56                   	push   esi
c001c2ae:	53                   	push   ebx
c001c2af:	89 c5                	mov    ebp,eax
c001c2b1:	e8 e2 f6 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c2b6:	89 e9                	mov    ecx,ebp
c001c2b8:	83 c4 10             	add    esp,0x10
c001c2bb:	0f b6 e9             	movzx  ebp,cl
c001c2be:	83 fd 14             	cmp    ebp,0x14
c001c2c1:	74 2d                	je     c001c2f0 <IDE::detect()+0x2b6>
c001c2c3:	83 fd 69             	cmp    ebp,0x69
c001c2c6:	75 b5                	jne    c001c27d <IDE::detect()+0x243>
c001c2c8:	3c 96                	cmp    al,0x96
c001c2ca:	75 b1                	jne    c001c27d <IDE::detect()+0x243>
c001c2cc:	68 a1 00 00 00       	push   0xa1
c001c2d1:	6a 07                	push   0x7
c001c2d3:	56                   	push   esi
c001c2d4:	53                   	push   ebx
c001c2d5:	e8 fe f5 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2da:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c2e1:	e8 1e 9c ff ff       	call   c0015f04 <milliTenthSleep(unsigned int)>
c001c2e6:	83 c4 10             	add    esp,0x10
c001c2e9:	b1 01                	mov    cl,0x1
c001c2eb:	e9 70 fe ff ff       	jmp    c001c160 <IDE::detect()+0x126>
c001c2f0:	3c eb                	cmp    al,0xeb
c001c2f2:	75 cf                	jne    c001c2c3 <IDE::detect()+0x289>
c001c2f4:	eb d6                	jmp    c001c2cc <IDE::detect()+0x292>
c001c2f6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c2fc:	5b                   	pop    ebx
c001c2fd:	5e                   	pop    esi
c001c2fe:	5f                   	pop    edi
c001c2ff:	5d                   	pop    ebp
c001c300:	c3                   	ret    
c001c301:	90                   	nop

c001c302 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c302:	55                   	push   ebp
c001c303:	57                   	push   edi
c001c304:	56                   	push   esi
c001c305:	53                   	push   ebx
c001c306:	83 ec 1c             	sub    esp,0x1c
c001c309:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c30d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c311:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c315:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c319:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c31d:	88 c3                	mov    bl,al
c001c31f:	25 ff 00 00 00       	and    eax,0xff
c001c324:	0f 84 88 00 00 00    	je     c001c3b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c32a:	83 ec 0c             	sub    esp,0xc
c001c32d:	89 c7                	mov    edi,eax
c001c32f:	68 4b 2d 02 c0       	push   0xc0022d4b
c001c334:	e8 d1 e5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c339:	83 c4 10             	add    esp,0x10
c001c33c:	83 ff 01             	cmp    edi,0x1
c001c33f:	74 6b                	je     c001c3ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c341:	83 ff 02             	cmp    edi,0x2
c001c344:	75 58                	jne    c001c39e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c346:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c34b:	50                   	push   eax
c001c34c:	6a 01                	push   0x1
c001c34e:	01 ff                	add    edi,edi
c001c350:	09 fe                	or     esi,edi
c001c352:	89 f0                	mov    eax,esi
c001c354:	0f b6 f0             	movzx  esi,al
c001c357:	c1 e6 06             	shl    esi,0x6
c001c35a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c362:	50                   	push   eax
c001c363:	55                   	push   ebp
c001c364:	e8 2f f6 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c369:	83 c4 10             	add    esp,0x10
c001c36c:	a8 01                	test   al,0x1
c001c36e:	74 02                	je     c001c372 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c370:	b3 07                	mov    bl,0x7
c001c372:	a8 02                	test   al,0x2
c001c374:	74 02                	je     c001c378 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c376:	b3 03                	mov    bl,0x3
c001c378:	a8 04                	test   al,0x4
c001c37a:	74 02                	je     c001c37e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c37c:	b3 14                	mov    bl,0x14
c001c37e:	a8 08                	test   al,0x8
c001c380:	74 02                	je     c001c384 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c382:	b3 03                	mov    bl,0x3
c001c384:	a8 10                	test   al,0x10
c001c386:	74 02                	je     c001c38a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c388:	b3 15                	mov    bl,0x15
c001c38a:	a8 20                	test   al,0x20
c001c38c:	74 02                	je     c001c390 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c38e:	b3 03                	mov    bl,0x3
c001c390:	a8 40                	test   al,0x40
c001c392:	74 02                	je     c001c396 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c394:	b3 16                	mov    bl,0x16
c001c396:	a8 80                	test   al,0x80
c001c398:	74 18                	je     c001c3b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c39a:	b3 0d                	mov    bl,0xd
c001c39c:	eb 14                	jmp    c001c3b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c39e:	83 ff 03             	cmp    edi,0x3
c001c3a1:	74 0d                	je     c001c3b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c3a3:	83 ff 04             	cmp    edi,0x4
c001c3a6:	75 0a                	jne    c001c3b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3a8:	b3 08                	mov    bl,0x8
c001c3aa:	eb 06                	jmp    c001c3b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3ac:	b3 13                	mov    bl,0x13
c001c3ae:	eb 02                	jmp    c001c3b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3b0:	b3 17                	mov    bl,0x17
c001c3b2:	83 c4 1c             	add    esp,0x1c
c001c3b5:	88 d8                	mov    al,bl
c001c3b7:	5b                   	pop    ebx
c001c3b8:	5e                   	pop    esi
c001c3b9:	5f                   	pop    edi
c001c3ba:	5d                   	pop    ebp
c001c3bb:	c3                   	ret    

c001c3bc <IDE::polling(unsigned char, unsigned int)>:
c001c3bc:	57                   	push   edi
c001c3bd:	56                   	push   esi
c001c3be:	53                   	push   ebx
c001c3bf:	bb 04 00 00 00       	mov    ebx,0x4
c001c3c4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c3c8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c3cd:	52                   	push   edx
c001c3ce:	6a 0c                	push   0xc
c001c3d0:	56                   	push   esi
c001c3d1:	57                   	push   edi
c001c3d2:	e8 c1 f5 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c3d7:	83 c4 10             	add    esp,0x10
c001c3da:	4b                   	dec    ebx
c001c3db:	75 f0                	jne    c001c3cd <IDE::polling(unsigned char, unsigned int)+0x11>
c001c3dd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c3e2:	50                   	push   eax
c001c3e3:	6a 0c                	push   0xc
c001c3e5:	56                   	push   esi
c001c3e6:	57                   	push   edi
c001c3e7:	e8 ac f5 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c3ec:	83 c4 10             	add    esp,0x10
c001c3ef:	a8 01                	test   al,0x1
c001c3f1:	75 17                	jne    c001c40a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3f3:	a8 20                	test   al,0x20
c001c3f5:	75 0f                	jne    c001c406 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c3f7:	4b                   	dec    ebx
c001c3f8:	74 10                	je     c001c40a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3fa:	a8 80                	test   al,0x80
c001c3fc:	75 e4                	jne    c001c3e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3fe:	a8 08                	test   al,0x8
c001c400:	74 e0                	je     c001c3e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c402:	31 c0                	xor    eax,eax
c001c404:	eb 06                	jmp    c001c40c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c406:	b0 01                	mov    al,0x1
c001c408:	eb 02                	jmp    c001c40c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c40a:	b0 02                	mov    al,0x2
c001c40c:	5b                   	pop    ebx
c001c40d:	5e                   	pop    esi
c001c40e:	5f                   	pop    edi
c001c40f:	c3                   	ret    

c001c410 <SATABus::close(int, int, void*)>:
c001c410:	31 c0                	xor    eax,eax
c001c412:	c3                   	ret    
c001c413:	90                   	nop

c001c414 <SATABus::detect()>:
c001c414:	c3                   	ret    
c001c415:	90                   	nop

c001c416 <SATABus::SATABus()>:
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41d:	83 ec 08             	sub    esp,0x8
c001c420:	68 84 2d 02 c0       	push   0xc0022d84
c001c425:	50                   	push   eax
c001c426:	e8 65 06 ff ff       	call   c000ca90 <HardDiskController::HardDiskController(char const*)>
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	ba b0 2d 02 c0       	mov    edx,0xc0022db0
c001c433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c437:	89 10                	mov    DWORD PTR [eax],edx
c001c439:	83 ec 0c             	sub    esp,0xc
c001c43c:	6a 50                	push   0x50
c001c43e:	e8 6e ba fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c443:	83 c4 10             	add    esp,0x10
c001c446:	89 c2                	mov    edx,eax
c001c448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	6a 50                	push   0x50
c001c457:	e8 99 d1 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c45c:	83 c4 10             	add    esp,0x10
c001c45f:	89 c2                	mov    edx,eax
c001c461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c465:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c46b:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c470:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c474:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c47a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c47e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c484:	83 ec 0c             	sub    esp,0xc
c001c487:	6a 03                	push   0x3
c001c489:	6a 50                	push   0x50
c001c48b:	51                   	push   ecx
c001c48c:	52                   	push   edx
c001c48d:	50                   	push   eax
c001c48e:	e8 75 da fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c493:	83 c4 20             	add    esp,0x20
c001c496:	90                   	nop
c001c497:	83 c4 0c             	add    esp,0xc
c001c49a:	c3                   	ret    
c001c49b:	90                   	nop

c001c49c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4a0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c4a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c4a6:	09 c2                	or     edx,eax
c001c4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c4b2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c4b4:	31 c0                	xor    eax,eax
c001c4b6:	c1 e9 08             	shr    ecx,0x8
c001c4b9:	83 e1 0f             	and    ecx,0xf
c001c4bc:	39 c8                	cmp    eax,ecx
c001c4be:	74 0a                	je     c001c4ca <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c4c0:	f6 c2 01             	test   dl,0x1
c001c4c3:	74 08                	je     c001c4cd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c4c5:	d1 ea                	shr    edx,1
c001c4c7:	40                   	inc    eax
c001c4c8:	eb f2                	jmp    c001c4bc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c4ca:	83 c8 ff             	or     eax,0xffffffff
c001c4cd:	c3                   	ret    

c001c4ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c4ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4d2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c4d5:	89 c2                	mov    edx,eax
c001c4d7:	c1 ea 08             	shr    edx,0x8
c001c4da:	83 e2 0f             	and    edx,0xf
c001c4dd:	4a                   	dec    edx
c001c4de:	75 32                	jne    c001c512 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c4e0:	83 e0 0f             	and    eax,0xf
c001c4e3:	83 f8 03             	cmp    eax,0x3
c001c4e6:	75 2a                	jne    c001c512 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c4e8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c4eb:	b8 02 00 00 00       	mov    eax,0x2
c001c4f0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c4f6:	74 1c                	je     c001c514 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4f8:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c4fe:	b8 04 00 00 00       	mov    eax,0x4
c001c503:	74 0f                	je     c001c514 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c505:	31 c0                	xor    eax,eax
c001c507:	83 fa 03             	cmp    edx,0x3
c001c50a:	0f 94 c0             	sete   al
c001c50d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c511:	c3                   	ret    
c001c512:	31 c0                	xor    eax,eax
c001c514:	c3                   	ret    
c001c515:	90                   	nop

c001c516 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c51a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c51d:	0f ba e2 0f          	bt     edx,0xf
c001c521:	72 f7                	jb     c001c51a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c523:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c526:	83 ca 10             	or     edx,0x10
c001c529:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c52c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c52f:	83 ca 01             	or     edx,0x1
c001c532:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c535:	c3                   	ret    

c001c536 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c53a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c53d:	83 e2 fe             	and    edx,0xfffffffe
c001c540:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c543:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c546:	83 e2 ef             	and    edx,0xffffffef
c001c549:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c54c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c54f:	0f ba e2 0e          	bt     edx,0xe
c001c553:	72 f7                	jb     c001c54c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c555:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c558:	0f ba e2 0f          	bt     edx,0xf
c001c55c:	72 ee                	jb     c001c54c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c55e:	c3                   	ret    
c001c55f:	90                   	nop

c001c560 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c560:	55                   	push   ebp
c001c561:	57                   	push   edi
c001c562:	56                   	push   esi
c001c563:	53                   	push   ebx
c001c564:	83 ec 1c             	sub    esp,0x1c
c001c567:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c56b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c56f:	53                   	push   ebx
c001c570:	57                   	push   edi
c001c571:	e8 c0 ff ff ff       	call   c001c536 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c576:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c57a:	83 ec 0c             	sub    esp,0xc
c001c57d:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c583:	c1 e5 0a             	shl    ebp,0xa
c001c586:	01 e8                	add    eax,ebp
c001c588:	89 03                	mov    DWORD PTR [ebx],eax
c001c58a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c58c:	68 00 04 00 00       	push   0x400
c001c591:	6a 00                	push   0x0
c001c593:	50                   	push   eax
c001c594:	e8 57 3f fe ff       	call   c00004f0 <memset>
c001c599:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c59f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c5a3:	83 c4 1c             	add    esp,0x1c
c001c5a6:	01 e8                	add    eax,ebp
c001c5a8:	89 03                	mov    DWORD PTR [ebx],eax
c001c5aa:	c1 e6 08             	shl    esi,0x8
c001c5ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c5b4:	81 c6 00 80 00 00    	add    esi,0x8000
c001c5ba:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c5c0:	01 f0                	add    eax,esi
c001c5c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c5c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c5c8:	68 00 01 00 00       	push   0x100
c001c5cd:	6a 00                	push   0x0
c001c5cf:	50                   	push   eax
c001c5d0:	e8 1b 3f fe ff       	call   c00004f0 <memset>
c001c5d5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c5db:	31 d2                	xor    edx,edx
c001c5dd:	01 f0                	add    eax,esi
c001c5df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c5e2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c5e9:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c5ef:	01 ee                	add    esi,ebp
c001c5f1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c5f5:	83 c4 10             	add    esp,0x10
c001c5f8:	c1 e5 0d             	shl    ebp,0xd
c001c5fb:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c601:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c607:	83 c6 20             	add    esi,0x20
c001c60a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c60e:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c614:	01 e8                	add    eax,ebp
c001c616:	01 d0                	add    eax,edx
c001c618:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c61b:	52                   	push   edx
c001c61c:	68 00 01 00 00       	push   0x100
c001c621:	6a 00                	push   0x0
c001c623:	50                   	push   eax
c001c624:	e8 c7 3e fe ff       	call   c00004f0 <memset>
c001c629:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c62f:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c636:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c63a:	83 c4 10             	add    esp,0x10
c001c63d:	01 e8                	add    eax,ebp
c001c63f:	01 d0                	add    eax,edx
c001c641:	81 c2 00 01 00 00    	add    edx,0x100
c001c647:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c64a:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c650:	75 af                	jne    c001c601 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c652:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c659:	50                   	push   eax
c001c65a:	50                   	push   eax
c001c65b:	53                   	push   ebx
c001c65c:	57                   	push   edi
c001c65d:	e8 b4 fe ff ff       	call   c001c516 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c662:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c669:	83 c4 2c             	add    esp,0x2c
c001c66c:	5b                   	pop    ebx
c001c66d:	5e                   	pop    esi
c001c66e:	5f                   	pop    edi
c001c66f:	5d                   	pop    ebp
c001c670:	c3                   	ret    
c001c671:	90                   	nop

c001c672 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c672:	55                   	push   ebp
c001c673:	57                   	push   edi
c001c674:	56                   	push   esi
c001c675:	53                   	push   ebx
c001c676:	31 db                	xor    ebx,ebx
c001c678:	83 ec 0c             	sub    esp,0xc
c001c67b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c67f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c683:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c686:	f7 c7 01 00 00 00    	test   edi,0x1
c001c68c:	74 7a                	je     c001c708 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c68e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c692:	89 d8                	mov    eax,ebx
c001c694:	c1 e0 07             	shl    eax,0x7
c001c697:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c69e:	55                   	push   ebp
c001c69f:	56                   	push   esi
c001c6a0:	e8 29 fe ff ff       	call   c001c4ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c6a5:	5a                   	pop    edx
c001c6a6:	59                   	pop    ecx
c001c6a7:	83 f8 01             	cmp    eax,0x1
c001c6aa:	75 21                	jne    c001c6cd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c6ac:	50                   	push   eax
c001c6ad:	53                   	push   ebx
c001c6ae:	55                   	push   ebp
c001c6af:	56                   	push   esi
c001c6b0:	e8 ab fe ff ff       	call   c001c560 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6b5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c6bc:	e8 12 b4 fe ff       	call   c0007ad3 <malloc>
c001c6c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6c4:	89 c5                	mov    ebp,eax
c001c6c6:	e8 c1 10 00 00       	call   c001d78c <SATA::SATA()>
c001c6cb:	eb 24                	jmp    c001c6f1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c6cd:	83 f8 04             	cmp    eax,0x4
c001c6d0:	75 36                	jne    c001c708 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c6d2:	51                   	push   ecx
c001c6d3:	53                   	push   ebx
c001c6d4:	55                   	push   ebp
c001c6d5:	56                   	push   esi
c001c6d6:	e8 85 fe ff ff       	call   c001c560 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c6db:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c6e2:	e8 ec b3 fe ff       	call   c0007ad3 <malloc>
c001c6e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6ea:	89 c5                	mov    ebp,eax
c001c6ec:	e8 f5 17 00 00       	call   c001dee6 <SATAPI::SATAPI()>
c001c6f1:	58                   	pop    eax
c001c6f2:	5a                   	pop    edx
c001c6f3:	55                   	push   ebp
c001c6f4:	56                   	push   esi
c001c6f5:	e8 52 00 ff ff       	call   c000c74c <Device::addChild(Device*)>
c001c6fa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c6fd:	56                   	push   esi
c001c6fe:	6a 00                	push   0x0
c001c700:	53                   	push   ebx
c001c701:	55                   	push   ebp
c001c702:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c705:	83 c4 20             	add    esp,0x20
c001c708:	d1 ef                	shr    edi,1
c001c70a:	43                   	inc    ebx
c001c70b:	83 fb 20             	cmp    ebx,0x20
c001c70e:	0f 85 72 ff ff ff    	jne    c001c686 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c714:	83 c4 0c             	add    esp,0xc
c001c717:	5b                   	pop    ebx
c001c718:	5e                   	pop    esi
c001c719:	5f                   	pop    edi
c001c71a:	5d                   	pop    ebp
c001c71b:	c3                   	ret    

c001c71c <SATABus::open(int, int, void*)>:
c001c71c:	83 ec 14             	sub    esp,0x14
c001c71f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c723:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c729:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c72f:	52                   	push   edx
c001c730:	50                   	push   eax
c001c731:	e8 3c ff ff ff       	call   c001c672 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c736:	31 c0                	xor    eax,eax
c001c738:	83 c4 1c             	add    esp,0x1c
c001c73b:	c3                   	ret    

c001c73c <ATA::close(int, int, void*)>:
c001c73c:	83 ec 0c             	sub    esp,0xc
c001c73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c743:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c749:	85 c0                	test   eax,eax
c001c74b:	74 0c                	je     c001c759 <ATA::close(int, int, void*)+0x1d>
c001c74d:	8b 10                	mov    edx,DWORD PTR [eax]
c001c74f:	83 ec 0c             	sub    esp,0xc
c001c752:	50                   	push   eax
c001c753:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c756:	83 c4 10             	add    esp,0x10
c001c759:	31 c0                	xor    eax,eax
c001c75b:	83 c4 0c             	add    esp,0xc
c001c75e:	c3                   	ret    
c001c75f:	90                   	nop

c001c760 <ATA::powerSaving(PowerSavingLevel)>:
c001c760:	c3                   	ret    
c001c761:	90                   	nop

c001c762 <ATA::ATA()>:
c001c762:	83 ec 0c             	sub    esp,0xc
c001c765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c769:	83 ec 04             	sub    esp,0x4
c001c76c:	68 00 02 00 00       	push   0x200
c001c771:	68 7d 2e 02 c0       	push   0xc0022e7d
c001c776:	50                   	push   eax
c001c777:	e8 9e 03 ff ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	ba f0 2d 02 c0       	mov    edx,0xc0022df0
c001c784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c788:	89 10                	mov    DWORD PTR [eax],edx
c001c78a:	90                   	nop
c001c78b:	83 c4 0c             	add    esp,0xc
c001c78e:	c3                   	ret    
c001c78f:	90                   	nop

c001c790 <ATA::flush(bool)>:
c001c790:	53                   	push   ebx
c001c791:	83 ec 08             	sub    esp,0x8
c001c794:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c79d:	83 f8 01             	cmp    eax,0x1
c001c7a0:	19 c0                	sbb    eax,eax
c001c7a2:	83 e0 fd             	and    eax,0xfffffffd
c001c7a5:	05 ea 00 00 00       	add    eax,0xea
c001c7aa:	50                   	push   eax
c001c7ab:	6a 07                	push   0x7
c001c7ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7b4:	50                   	push   eax
c001c7b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7bb:	e8 18 f1 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7c0:	83 c4 0c             	add    esp,0xc
c001c7c3:	6a 00                	push   0x0
c001c7c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7cc:	50                   	push   eax
c001c7cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7d3:	e8 e4 fb ff ff       	call   c001c3bc <IDE::polling(unsigned char, unsigned int)>
c001c7d8:	83 c4 18             	add    esp,0x18
c001c7db:	5b                   	pop    ebx
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop

c001c7de <ATA::readyForCommand()>:
c001c7de:	56                   	push   esi
c001c7df:	53                   	push   ebx
c001c7e0:	53                   	push   ebx
c001c7e1:	31 db                	xor    ebx,ebx
c001c7e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e7:	51                   	push   ecx
c001c7e8:	6a 0c                	push   0xc
c001c7ea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7f1:	50                   	push   eax
c001c7f2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f8:	e8 9b f1 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001c7fd:	83 c4 10             	add    esp,0x10
c001c800:	a8 88                	test   al,0x88
c001c802:	74 1f                	je     c001c823 <ATA::readyForCommand()+0x45>
c001c804:	43                   	inc    ebx
c001c805:	83 fb 63             	cmp    ebx,0x63
c001c808:	7e dd                	jle    c001c7e7 <ATA::readyForCommand()+0x9>
c001c80a:	83 ec 0c             	sub    esp,0xc
c001c80d:	6a 0a                	push   0xa
c001c80f:	e8 f0 96 ff ff       	call   c0015f04 <milliTenthSleep(unsigned int)>
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c81d:	75 c8                	jne    c001c7e7 <ATA::readyForCommand()+0x9>
c001c81f:	31 c0                	xor    eax,eax
c001c821:	eb 02                	jmp    c001c825 <ATA::readyForCommand()+0x47>
c001c823:	b0 01                	mov    al,0x1
c001c825:	5a                   	pop    edx
c001c826:	5b                   	pop    ebx
c001c827:	5e                   	pop    esi
c001c828:	c3                   	ret    
c001c829:	90                   	nop

c001c82a <ATA::access(unsigned long long, int, void*, bool)>:
c001c82a:	55                   	push   ebp
c001c82b:	57                   	push   edi
c001c82c:	56                   	push   esi
c001c82d:	53                   	push   ebx
c001c82e:	83 ec 2c             	sub    esp,0x2c
c001c831:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c835:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c839:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c83d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c841:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c845:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c849:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c84d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c857:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c85d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c861:	c1 e0 06             	shl    eax,0x6
c001c864:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c86c:	74 5b                	je     c001c8c9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c86e:	89 fa                	mov    edx,edi
c001c870:	89 f0                	mov    eax,esi
c001c872:	c1 ea 1c             	shr    edx,0x1c
c001c875:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c879:	89 d1                	mov    ecx,edx
c001c87b:	09 c1                	or     ecx,eax
c001c87d:	74 25                	je     c001c8a4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c87f:	31 ed                	xor    ebp,ebp
c001c881:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c888:	89 fa                	mov    edx,edi
c001c88a:	89 f0                	mov    eax,esi
c001c88c:	0f ad d0             	shrd   eax,edx,cl
c001c88f:	d3 ea                	shr    edx,cl
c001c891:	f6 c1 20             	test   cl,0x20
c001c894:	74 02                	je     c001c898 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c896:	89 d0                	mov    eax,edx
c001c898:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c89c:	45                   	inc    ebp
c001c89d:	83 fd 06             	cmp    ebp,0x6
c001c8a0:	75 df                	jne    c001c881 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c8a2:	eb 71                	jmp    c001c915 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c8a4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c8a9:	89 f0                	mov    eax,esi
c001c8ab:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8b2:	0f ac f8 10          	shrd   eax,edi,0x10
c001c8b6:	bf 01 00 00 00       	mov    edi,0x1
c001c8bb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c8bf:	c1 ee 18             	shr    esi,0x18
c001c8c2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8c7:	eb 53                	jmp    c001c91c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c8c9:	6a 00                	push   0x0
c001c8cb:	6a 3f                	push   0x3f
c001c8cd:	57                   	push   edi
c001c8ce:	56                   	push   esi
c001c8cf:	e8 cc 2a 00 00       	call   c001f3a0 <__umoddi3>
c001c8d4:	83 c4 10             	add    esp,0x10
c001c8d7:	40                   	inc    eax
c001c8d8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c8dc:	6a 00                	push   0x0
c001c8de:	68 f0 03 00 00       	push   0x3f0
c001c8e3:	57                   	push   edi
c001c8e4:	56                   	push   esi
c001c8e5:	e8 b6 29 00 00       	call   c001f2a0 <__udivdi3>
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c8f2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8f9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8fe:	6a 00                	push   0x0
c001c900:	6a 3f                	push   0x3f
c001c902:	57                   	push   edi
c001c903:	31 ff                	xor    edi,edi
c001c905:	56                   	push   esi
c001c906:	e8 95 29 00 00       	call   c001f2a0 <__udivdi3>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	83 e0 0f             	and    eax,0xf
c001c911:	89 c6                	mov    esi,eax
c001c913:	eb 07                	jmp    c001c91c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c915:	31 f6                	xor    esi,esi
c001c917:	bf 02 00 00 00       	mov    edi,0x2
c001c91c:	50                   	push   eax
c001c91d:	6a 00                	push   0x0
c001c91f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c926:	50                   	push   eax
c001c927:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c92b:	e8 b6 f1 ff ff       	call   c001bae6 <IDE::enableIRQs(unsigned char, bool)>
c001c930:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c933:	e8 a6 fe ff ff       	call   c001c7de <ATA::readyForCommand()>
c001c938:	83 c4 10             	add    esp,0x10
c001c93b:	84 c0                	test   al,al
c001c93d:	75 0a                	jne    c001c949 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c93f:	be 01 00 00 00       	mov    esi,0x1
c001c944:	e9 9b 02 00 00       	jmp    c001cbe4 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c949:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c94f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c955:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c95c:	c1 e0 04             	shl    eax,0x4
c001c95f:	09 c6                	or     esi,eax
c001c961:	f7 c7 03 00 00 00    	test   edi,0x3
c001c967:	75 05                	jne    c001c96e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c969:	83 ce a0             	or     esi,0xffffffa0
c001c96c:	eb 03                	jmp    c001c971 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c96e:	83 ce e0             	or     esi,0xffffffe0
c001c971:	89 f0                	mov    eax,esi
c001c973:	0f b6 f0             	movzx  esi,al
c001c976:	56                   	push   esi
c001c977:	6a 06                	push   0x6
c001c979:	51                   	push   ecx
c001c97a:	52                   	push   edx
c001c97b:	e8 58 ef ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c980:	83 c4 10             	add    esp,0x10
c001c983:	6a 00                	push   0x0
c001c985:	6a 01                	push   0x1
c001c987:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98e:	50                   	push   eax
c001c98f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c995:	e8 3e ef ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99a:	89 f8                	mov    eax,edi
c001c99c:	83 c4 10             	add    esp,0x10
c001c99f:	0f b6 f0             	movzx  esi,al
c001c9a2:	83 fe 02             	cmp    esi,0x2
c001c9a5:	75 6e                	jne    c001ca15 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c9a7:	6a 00                	push   0x0
c001c9a9:	6a 08                	push   0x8
c001c9ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9b2:	50                   	push   eax
c001c9b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b9:	e8 1a ef ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9be:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c9c3:	50                   	push   eax
c001c9c4:	6a 09                	push   0x9
c001c9c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9cd:	50                   	push   eax
c001c9ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d4:	e8 ff ee ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d9:	83 c4 20             	add    esp,0x20
c001c9dc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c9e1:	50                   	push   eax
c001c9e2:	6a 0a                	push   0xa
c001c9e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9eb:	50                   	push   eax
c001c9ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f2:	e8 e1 ee ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c9fc:	50                   	push   eax
c001c9fd:	6a 0b                	push   0xb
c001c9ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca06:	50                   	push   eax
c001ca07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0d:	e8 c6 ee ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca12:	83 c4 20             	add    esp,0x20
c001ca15:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca1a:	50                   	push   eax
c001ca1b:	6a 02                	push   0x2
c001ca1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca24:	50                   	push   eax
c001ca25:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca2b:	e8 a8 ee ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca30:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca35:	50                   	push   eax
c001ca36:	6a 03                	push   0x3
c001ca38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca3f:	50                   	push   eax
c001ca40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca46:	e8 8d ee ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca4b:	83 c4 20             	add    esp,0x20
c001ca4e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca53:	50                   	push   eax
c001ca54:	6a 04                	push   0x4
c001ca56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5d:	50                   	push   eax
c001ca5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca64:	e8 6f ee ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca6e:	50                   	push   eax
c001ca6f:	6a 05                	push   0x5
c001ca71:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca78:	50                   	push   eax
c001ca79:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca7f:	e8 54 ee ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca84:	83 c4 20             	add    esp,0x20
c001ca87:	83 fe 02             	cmp    esi,0x2
c001ca8a:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001ca8f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001ca94:	85 c9                	test   ecx,ecx
c001ca96:	74 07                	je     c001ca9f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ca98:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca9d:	75 47                	jne    c001cae6 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001ca9f:	89 f8                	mov    eax,edi
c001caa1:	0f b6 f8             	movzx  edi,al
c001caa4:	31 c0                	xor    eax,eax
c001caa6:	83 ff 02             	cmp    edi,0x2
c001caa9:	0f 95 c0             	setne  al
c001caac:	89 c6                	mov    esi,eax
c001caae:	74 0c                	je     c001cabc <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001cab0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cab5:	b8 30 00 00 00       	mov    eax,0x30
c001caba:	75 2f                	jne    c001caeb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cabc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cac0:	83 f2 01             	xor    edx,0x1
c001cac3:	85 c9                	test   ecx,ecx
c001cac5:	74 09                	je     c001cad0 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001cac7:	84 d2                	test   dl,dl
c001cac9:	b8 24 00 00 00       	mov    eax,0x24
c001cace:	75 1b                	jne    c001caeb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cad0:	85 f6                	test   esi,esi
c001cad2:	0f 84 67 fe ff ff    	je     c001c93f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cad8:	84 d2                	test   dl,dl
c001cada:	b8 20 00 00 00       	mov    eax,0x20
c001cadf:	75 0a                	jne    c001caeb <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cae1:	e9 59 fe ff ff       	jmp    c001c93f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cae6:	b8 34 00 00 00       	mov    eax,0x34
c001caeb:	50                   	push   eax
c001caec:	6a 07                	push   0x7
c001caee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caf5:	50                   	push   eax
c001caf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cafc:	e8 d7 ed ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb01:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cb0d:	85 f6                	test   esi,esi
c001cb0f:	0f 84 b5 00 00 00    	je     c001cbca <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cb15:	50                   	push   eax
c001cb16:	6a 01                	push   0x1
c001cb18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb1f:	50                   	push   eax
c001cb20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb26:	e8 91 f8 ff ff       	call   c001c3bc <IDE::polling(unsigned char, unsigned int)>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb34:	0f b6 c0             	movzx  eax,al
c001cb37:	85 c0                	test   eax,eax
c001cb39:	74 1f                	je     c001cb5a <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cb3b:	50                   	push   eax
c001cb3c:	89 c6                	mov    esi,eax
c001cb3e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb45:	0f b6 d2             	movzx  edx,dl
c001cb48:	50                   	push   eax
c001cb49:	52                   	push   edx
c001cb4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb50:	e8 ad f7 ff ff       	call   c001c302 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb55:	e9 87 00 00 00       	jmp    c001cbe1 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cb5a:	85 ed                	test   ebp,ebp
c001cb5c:	74 3b                	je     c001cb99 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cb5e:	31 ff                	xor    edi,edi
c001cb60:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cb64:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cb68:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cb6d:	50                   	push   eax
c001cb6e:	50                   	push   eax
c001cb6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb76:	50                   	push   eax
c001cb77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb7d:	e8 44 ed ff ff       	call   c001b8c6 <IDE::getBase(unsigned char)>
c001cb82:	89 c2                	mov    edx,eax
c001cb84:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cb89:	66 ef                	out    dx,ax
c001cb8b:	47                   	inc    edi
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cb95:	75 c9                	jne    c001cb60 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cb97:	eb 23                	jmp    c001cbbc <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cb99:	51                   	push   ecx
c001cb9a:	0f b6 d2             	movzx  edx,dl
c001cb9d:	51                   	push   ecx
c001cb9e:	52                   	push   edx
c001cb9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cba5:	e8 1c ed ff ff       	call   c001b8c6 <IDE::getBase(unsigned char)>
c001cbaa:	b9 00 01 00 00       	mov    ecx,0x100
c001cbaf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbb3:	89 c2                	mov    edx,eax
c001cbb5:	fc                   	cld    
c001cbb6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbb9:	83 c4 10             	add    esp,0x10
c001cbbc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cbc4:	4e                   	dec    esi
c001cbc5:	e9 43 ff ff ff       	jmp    c001cb0d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cbca:	31 f6                	xor    esi,esi
c001cbcc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbd1:	74 11                	je     c001cbe4 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cbd3:	50                   	push   eax
c001cbd4:	50                   	push   eax
c001cbd5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cbda:	50                   	push   eax
c001cbdb:	53                   	push   ebx
c001cbdc:	e8 af fb ff ff       	call   c001c790 <ATA::flush(bool)>
c001cbe1:	83 c4 10             	add    esp,0x10
c001cbe4:	83 c4 2c             	add    esp,0x2c
c001cbe7:	89 f0                	mov    eax,esi
c001cbe9:	5b                   	pop    ebx
c001cbea:	5e                   	pop    esi
c001cbeb:	5f                   	pop    edi
c001cbec:	5d                   	pop    ebp
c001cbed:	c3                   	ret    

c001cbee <ATA::detectCHS()>:
c001cbee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbf2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cbf8:	c1 e0 06             	shl    eax,0x6
c001cbfb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc01:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc0b:	c7 44 24 04 d4 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022dd4
c001cc13:	e9 d1 46 ff ff       	jmp    c00112e9 <KePanic(char const*)>

c001cc18 <ATA::open(int, int, void*)>:
c001cc18:	53                   	push   ebx
c001cc19:	83 ec 08             	sub    esp,0x8
c001cc1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc28:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc2e:	c1 e0 06             	shl    eax,0x6
c001cc31:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc37:	01 d0                	add    eax,edx
c001cc39:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc40:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc46:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc4d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc57:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cc5e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc64:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc6b:	75 0c                	jne    c001cc79 <ATA::open(int, int, void*)+0x61>
c001cc6d:	83 ec 0c             	sub    esp,0xc
c001cc70:	53                   	push   ebx
c001cc71:	e8 78 ff ff ff       	call   c001cbee <ATA::detectCHS()>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc7f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cc85:	c1 e0 06             	shl    eax,0x6
c001cc88:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cc8f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cc99:	d1 e8                	shr    eax,1
c001cc9b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cca1:	6a 04                	push   0x4
c001cca3:	6a 0c                	push   0xc
c001cca5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccac:	50                   	push   eax
c001ccad:	52                   	push   edx
c001ccae:	e8 25 ec ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccb3:	90                   	nop
c001ccb4:	90                   	nop
c001ccb5:	6a 00                	push   0x0
c001ccb7:	6a 0c                	push   0xc
c001ccb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccc0:	50                   	push   eax
c001ccc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccc7:	e8 0c ec ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cccc:	83 c4 14             	add    esp,0x14
c001cccf:	53                   	push   ebx
c001ccd0:	e8 ad fe fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001ccd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccd8:	e8 f1 10 ff ff       	call   c000ddce <createPartitionsForDisk(PhysicalDisk*)>
c001ccdd:	83 c4 18             	add    esp,0x18
c001cce0:	31 c0                	xor    eax,eax
c001cce2:	5b                   	pop    ebx
c001cce3:	c3                   	ret    

c001cce4 <combineCharAndColour(char, unsigned char)>:
c001cce4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cce9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ccef:	c1 e0 08             	shl    eax,0x8
c001ccf2:	09 d0                	or     eax,edx
c001ccf4:	c3                   	ret    

c001ccf5 <combineColours(unsigned char, unsigned char)>:
c001ccf5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ccfa:	c1 e0 04             	shl    eax,0x4
c001ccfd:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cd01:	c3                   	ret    

c001cd02 <ATA::read(unsigned long long, int, void*)>:
c001cd02:	55                   	push   ebp
c001cd03:	57                   	push   edi
c001cd04:	56                   	push   esi
c001cd05:	be 04 00 00 00       	mov    esi,0x4
c001cd0a:	53                   	push   ebx
c001cd0b:	83 ec 0c             	sub    esp,0xc
c001cd0e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd1a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd1e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd21:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd27:	0f 87 a1 01 00 00    	ja     c001cece <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd2d:	85 c9                	test   ecx,ecx
c001cd2f:	be 06 00 00 00       	mov    esi,0x6
c001cd34:	0f 84 94 01 00 00    	je     c001cece <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd3a:	55                   	push   ebp
c001cd3b:	55                   	push   ebp
c001cd3c:	6a 00                	push   0x0
c001cd3e:	51                   	push   ecx
c001cd3f:	53                   	push   ebx
c001cd40:	52                   	push   edx
c001cd41:	50                   	push   eax
c001cd42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd46:	e8 df fa ff ff       	call   c001c82a <ATA::access(unsigned long long, int, void*, bool)>
c001cd4b:	83 c4 20             	add    esp,0x20
c001cd4e:	85 c0                	test   eax,eax
c001cd50:	89 c6                	mov    esi,eax
c001cd52:	0f 85 71 01 00 00    	jne    c001cec9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cd58:	50                   	push   eax
c001cd59:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd5e:	50                   	push   eax
c001cd5f:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cd65:	6a 0f                	push   0xf
c001cd67:	6a 00                	push   0x0
c001cd69:	89 da                	mov    edx,ebx
c001cd6b:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cd71:	e8 7f ff ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001cd76:	59                   	pop    ecx
c001cd77:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd7c:	5b                   	pop    ebx
c001cd7d:	0f b6 d8             	movzx  ebx,al
c001cd80:	89 d0                	mov    eax,edx
c001cd82:	53                   	push   ebx
c001cd83:	99                   	cdq    
c001cd84:	f7 fd                	idiv   ebp
c001cd86:	99                   	cdq    
c001cd87:	f7 f9                	idiv   ecx
c001cd89:	83 c2 30             	add    edx,0x30
c001cd8c:	0f b6 d2             	movzx  edx,dl
c001cd8f:	52                   	push   edx
c001cd90:	e8 4f ff ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cd95:	5f                   	pop    edi
c001cd96:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd9b:	5a                   	pop    edx
c001cd9c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cda2:	53                   	push   ebx
c001cda3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cda8:	99                   	cdq    
c001cda9:	f7 ff                	idiv   edi
c001cdab:	99                   	cdq    
c001cdac:	f7 f9                	idiv   ecx
c001cdae:	8d 42 30             	lea    eax,[edx+0x30]
c001cdb1:	0f b6 c0             	movzx  eax,al
c001cdb4:	50                   	push   eax
c001cdb5:	e8 2a ff ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cdba:	5f                   	pop    edi
c001cdbb:	bf 64 00 00 00       	mov    edi,0x64
c001cdc0:	5a                   	pop    edx
c001cdc1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cdc7:	53                   	push   ebx
c001cdc8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdcd:	99                   	cdq    
c001cdce:	f7 ff                	idiv   edi
c001cdd0:	99                   	cdq    
c001cdd1:	f7 f9                	idiv   ecx
c001cdd3:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd6:	0f b6 c0             	movzx  eax,al
c001cdd9:	50                   	push   eax
c001cdda:	e8 05 ff ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cddf:	5a                   	pop    edx
c001cde0:	5a                   	pop    edx
c001cde1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cde7:	53                   	push   ebx
c001cde8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cded:	99                   	cdq    
c001cdee:	f7 f9                	idiv   ecx
c001cdf0:	99                   	cdq    
c001cdf1:	f7 f9                	idiv   ecx
c001cdf3:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf6:	0f b6 c0             	movzx  eax,al
c001cdf9:	50                   	push   eax
c001cdfa:	e8 e5 fe ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cdff:	5a                   	pop    edx
c001ce00:	5a                   	pop    edx
c001ce01:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce07:	53                   	push   ebx
c001ce08:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce0d:	99                   	cdq    
c001ce0e:	f7 f9                	idiv   ecx
c001ce10:	83 c2 30             	add    edx,0x30
c001ce13:	0f b6 d2             	movzx  edx,dl
c001ce16:	52                   	push   edx
c001ce17:	e8 c8 fe ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001ce1c:	5a                   	pop    edx
c001ce1d:	5a                   	pop    edx
c001ce1e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce24:	53                   	push   ebx
c001ce25:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce2a:	99                   	cdq    
c001ce2b:	f7 fd                	idiv   ebp
c001ce2d:	99                   	cdq    
c001ce2e:	f7 f9                	idiv   ecx
c001ce30:	8d 42 30             	lea    eax,[edx+0x30]
c001ce33:	0f b6 c0             	movzx  eax,al
c001ce36:	50                   	push   eax
c001ce37:	e8 a8 fe ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001ce3c:	5d                   	pop    ebp
c001ce3d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce42:	5a                   	pop    edx
c001ce43:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce49:	53                   	push   ebx
c001ce4a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce4f:	99                   	cdq    
c001ce50:	f7 fd                	idiv   ebp
c001ce52:	99                   	cdq    
c001ce53:	f7 f9                	idiv   ecx
c001ce55:	8d 42 30             	lea    eax,[edx+0x30]
c001ce58:	0f b6 c0             	movzx  eax,al
c001ce5b:	50                   	push   eax
c001ce5c:	e8 83 fe ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001ce61:	5d                   	pop    ebp
c001ce62:	5a                   	pop    edx
c001ce63:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce69:	53                   	push   ebx
c001ce6a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce6f:	99                   	cdq    
c001ce70:	f7 ff                	idiv   edi
c001ce72:	99                   	cdq    
c001ce73:	f7 f9                	idiv   ecx
c001ce75:	8d 42 30             	lea    eax,[edx+0x30]
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	50                   	push   eax
c001ce7c:	e8 63 fe ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001ce81:	5f                   	pop    edi
c001ce82:	5d                   	pop    ebp
c001ce83:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ce89:	53                   	push   ebx
c001ce8a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce8f:	99                   	cdq    
c001ce90:	f7 f9                	idiv   ecx
c001ce92:	99                   	cdq    
c001ce93:	f7 f9                	idiv   ecx
c001ce95:	8d 42 30             	lea    eax,[edx+0x30]
c001ce98:	0f b6 c0             	movzx  eax,al
c001ce9b:	50                   	push   eax
c001ce9c:	e8 43 fe ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cea1:	5a                   	pop    edx
c001cea2:	5f                   	pop    edi
c001cea3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cea9:	53                   	push   ebx
c001ceaa:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ceaf:	99                   	cdq    
c001ceb0:	f7 f9                	idiv   ecx
c001ceb2:	83 c2 30             	add    edx,0x30
c001ceb5:	0f b6 d2             	movzx  edx,dl
c001ceb8:	52                   	push   edx
c001ceb9:	e8 26 fe ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cec7:	eb 05                	jmp    c001cece <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cec9:	be 01 00 00 00       	mov    esi,0x1
c001cece:	83 c4 0c             	add    esp,0xc
c001ced1:	89 f0                	mov    eax,esi
c001ced3:	5b                   	pop    ebx
c001ced4:	5e                   	pop    esi
c001ced5:	5f                   	pop    edi
c001ced6:	5d                   	pop    ebp
c001ced7:	c3                   	ret    

c001ced8 <ATA::write(unsigned long long, int, void*)>:
c001ced8:	55                   	push   ebp
c001ced9:	57                   	push   edi
c001ceda:	56                   	push   esi
c001cedb:	be 04 00 00 00       	mov    esi,0x4
c001cee0:	53                   	push   ebx
c001cee1:	83 ec 0c             	sub    esp,0xc
c001cee4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cee8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ceec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cef0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cef4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cef7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cefd:	0f 87 9c 01 00 00    	ja     c001d09f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf03:	85 c9                	test   ecx,ecx
c001cf05:	be 06 00 00 00       	mov    esi,0x6
c001cf0a:	0f 84 8f 01 00 00    	je     c001d09f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf10:	55                   	push   ebp
c001cf11:	55                   	push   ebp
c001cf12:	6a 01                	push   0x1
c001cf14:	51                   	push   ecx
c001cf15:	53                   	push   ebx
c001cf16:	52                   	push   edx
c001cf17:	50                   	push   eax
c001cf18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf1c:	e8 09 f9 ff ff       	call   c001c82a <ATA::access(unsigned long long, int, void*, bool)>
c001cf21:	83 c4 20             	add    esp,0x20
c001cf24:	85 c0                	test   eax,eax
c001cf26:	89 c6                	mov    esi,eax
c001cf28:	0f 85 6c 01 00 00    	jne    c001d09a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cf2e:	50                   	push   eax
c001cf2f:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf34:	50                   	push   eax
c001cf35:	6a 0f                	push   0xf
c001cf37:	6a 00                	push   0x0
c001cf39:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cf3f:	e8 b1 fd ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001cf44:	5a                   	pop    edx
c001cf45:	59                   	pop    ecx
c001cf46:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf4b:	0f b6 d8             	movzx  ebx,al
c001cf4e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf53:	53                   	push   ebx
c001cf54:	99                   	cdq    
c001cf55:	f7 fd                	idiv   ebp
c001cf57:	99                   	cdq    
c001cf58:	f7 f9                	idiv   ecx
c001cf5a:	8d 42 30             	lea    eax,[edx+0x30]
c001cf5d:	0f b6 c0             	movzx  eax,al
c001cf60:	50                   	push   eax
c001cf61:	e8 7e fd ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cf66:	5f                   	pop    edi
c001cf67:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf6c:	5a                   	pop    edx
c001cf6d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf73:	53                   	push   ebx
c001cf74:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf79:	99                   	cdq    
c001cf7a:	f7 ff                	idiv   edi
c001cf7c:	99                   	cdq    
c001cf7d:	f7 f9                	idiv   ecx
c001cf7f:	8d 42 30             	lea    eax,[edx+0x30]
c001cf82:	0f b6 c0             	movzx  eax,al
c001cf85:	50                   	push   eax
c001cf86:	e8 59 fd ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cf8b:	5f                   	pop    edi
c001cf8c:	bf 64 00 00 00       	mov    edi,0x64
c001cf91:	5a                   	pop    edx
c001cf92:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf98:	53                   	push   ebx
c001cf99:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf9e:	99                   	cdq    
c001cf9f:	f7 ff                	idiv   edi
c001cfa1:	99                   	cdq    
c001cfa2:	f7 f9                	idiv   ecx
c001cfa4:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa7:	0f b6 c0             	movzx  eax,al
c001cfaa:	50                   	push   eax
c001cfab:	e8 34 fd ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cfb0:	5a                   	pop    edx
c001cfb1:	5a                   	pop    edx
c001cfb2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cfb8:	53                   	push   ebx
c001cfb9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfbe:	99                   	cdq    
c001cfbf:	f7 f9                	idiv   ecx
c001cfc1:	99                   	cdq    
c001cfc2:	f7 f9                	idiv   ecx
c001cfc4:	8d 42 30             	lea    eax,[edx+0x30]
c001cfc7:	0f b6 c0             	movzx  eax,al
c001cfca:	50                   	push   eax
c001cfcb:	e8 14 fd ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cfd0:	5a                   	pop    edx
c001cfd1:	5a                   	pop    edx
c001cfd2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cfd8:	53                   	push   ebx
c001cfd9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfde:	99                   	cdq    
c001cfdf:	f7 f9                	idiv   ecx
c001cfe1:	83 c2 30             	add    edx,0x30
c001cfe4:	0f b6 d2             	movzx  edx,dl
c001cfe7:	52                   	push   edx
c001cfe8:	e8 f7 fc ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001cfed:	5a                   	pop    edx
c001cfee:	5a                   	pop    edx
c001cfef:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cff5:	53                   	push   ebx
c001cff6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cffb:	99                   	cdq    
c001cffc:	f7 fd                	idiv   ebp
c001cffe:	99                   	cdq    
c001cfff:	f7 f9                	idiv   ecx
c001d001:	8d 42 30             	lea    eax,[edx+0x30]
c001d004:	0f b6 c0             	movzx  eax,al
c001d007:	50                   	push   eax
c001d008:	e8 d7 fc ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001d00d:	5d                   	pop    ebp
c001d00e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d013:	5a                   	pop    edx
c001d014:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d01a:	53                   	push   ebx
c001d01b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d020:	99                   	cdq    
c001d021:	f7 fd                	idiv   ebp
c001d023:	99                   	cdq    
c001d024:	f7 f9                	idiv   ecx
c001d026:	8d 42 30             	lea    eax,[edx+0x30]
c001d029:	0f b6 c0             	movzx  eax,al
c001d02c:	50                   	push   eax
c001d02d:	e8 b2 fc ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001d032:	5d                   	pop    ebp
c001d033:	5a                   	pop    edx
c001d034:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d03a:	53                   	push   ebx
c001d03b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d040:	99                   	cdq    
c001d041:	f7 ff                	idiv   edi
c001d043:	99                   	cdq    
c001d044:	f7 f9                	idiv   ecx
c001d046:	8d 42 30             	lea    eax,[edx+0x30]
c001d049:	0f b6 c0             	movzx  eax,al
c001d04c:	50                   	push   eax
c001d04d:	e8 92 fc ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001d052:	5f                   	pop    edi
c001d053:	5d                   	pop    ebp
c001d054:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d05a:	53                   	push   ebx
c001d05b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d060:	99                   	cdq    
c001d061:	f7 f9                	idiv   ecx
c001d063:	99                   	cdq    
c001d064:	f7 f9                	idiv   ecx
c001d066:	8d 42 30             	lea    eax,[edx+0x30]
c001d069:	0f b6 c0             	movzx  eax,al
c001d06c:	50                   	push   eax
c001d06d:	e8 72 fc ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001d072:	5a                   	pop    edx
c001d073:	5f                   	pop    edi
c001d074:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d07a:	53                   	push   ebx
c001d07b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d080:	99                   	cdq    
c001d081:	f7 f9                	idiv   ecx
c001d083:	83 c2 30             	add    edx,0x30
c001d086:	0f b6 d2             	movzx  edx,dl
c001d089:	52                   	push   edx
c001d08a:	e8 55 fc ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d098:	eb 05                	jmp    c001d09f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d09a:	be 01 00 00 00       	mov    esi,0x1
c001d09f:	83 c4 0c             	add    esp,0xc
c001d0a2:	89 f0                	mov    eax,esi
c001d0a4:	5b                   	pop    ebx
c001d0a5:	5e                   	pop    esi
c001d0a6:	5f                   	pop    edi
c001d0a7:	5d                   	pop    ebp
c001d0a8:	c3                   	ret    
c001d0a9:	90                   	nop

c001d0aa <ATAPI::write(unsigned long long, int, void*)>:
c001d0aa:	b8 03 00 00 00       	mov    eax,0x3
c001d0af:	c3                   	ret    

c001d0b0 <ATAPI::close(int, int, void*)>:
c001d0b0:	83 ec 0c             	sub    esp,0xc
c001d0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0bd:	85 c0                	test   eax,eax
c001d0bf:	74 0c                	je     c001d0cd <ATAPI::close(int, int, void*)+0x1d>
c001d0c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0c3:	83 ec 0c             	sub    esp,0xc
c001d0c6:	50                   	push   eax
c001d0c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d0ca:	83 c4 10             	add    esp,0x10
c001d0cd:	31 c0                	xor    eax,eax
c001d0cf:	83 c4 0c             	add    esp,0xc
c001d0d2:	c3                   	ret    
c001d0d3:	90                   	nop

c001d0d4 <ATAPI::ATAPI()>:
c001d0d4:	83 ec 0c             	sub    esp,0xc
c001d0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0db:	83 ec 04             	sub    esp,0x4
c001d0de:	68 00 08 00 00       	push   0x800
c001d0e3:	68 1d 2f 02 c0       	push   0xc0022f1d
c001d0e8:	50                   	push   eax
c001d0e9:	e8 2c fa fe ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d0ee:	83 c4 10             	add    esp,0x10
c001d0f1:	ba 38 2e 02 c0       	mov    edx,0xc0022e38
c001d0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0fa:	89 10                	mov    DWORD PTR [eax],edx
c001d0fc:	90                   	nop
c001d0fd:	83 c4 0c             	add    esp,0xc
c001d100:	c3                   	ret    
c001d101:	90                   	nop

c001d102 <ATAPI::readyForCommand()>:
c001d102:	56                   	push   esi
c001d103:	53                   	push   ebx
c001d104:	53                   	push   ebx
c001d105:	31 db                	xor    ebx,ebx
c001d107:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d10b:	51                   	push   ecx
c001d10c:	6a 0c                	push   0xc
c001d10e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d115:	50                   	push   eax
c001d116:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d11c:	e8 77 e8 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001d121:	83 c4 10             	add    esp,0x10
c001d124:	a8 88                	test   al,0x88
c001d126:	74 25                	je     c001d14d <ATAPI::readyForCommand()+0x4b>
c001d128:	43                   	inc    ebx
c001d129:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d12f:	7e da                	jle    c001d10b <ATAPI::readyForCommand()+0x9>
c001d131:	83 ec 0c             	sub    esp,0xc
c001d134:	68 5e 01 00 00       	push   0x15e
c001d139:	e8 c6 8d ff ff       	call   c0015f04 <milliTenthSleep(unsigned int)>
c001d13e:	83 c4 10             	add    esp,0x10
c001d141:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d147:	75 c2                	jne    c001d10b <ATAPI::readyForCommand()+0x9>
c001d149:	31 c0                	xor    eax,eax
c001d14b:	eb 02                	jmp    c001d14f <ATAPI::readyForCommand()+0x4d>
c001d14d:	b0 01                	mov    al,0x1
c001d14f:	5a                   	pop    edx
c001d150:	5b                   	pop    ebx
c001d151:	5e                   	pop    esi
c001d152:	c3                   	ret    
c001d153:	90                   	nop

c001d154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d154:	55                   	push   ebp
c001d155:	57                   	push   edi
c001d156:	56                   	push   esi
c001d157:	53                   	push   ebx
c001d158:	83 ec 20             	sub    esp,0x20
c001d15b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d15f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d163:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d167:	6a 01                	push   0x1
c001d169:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d170:	50                   	push   eax
c001d171:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d177:	e8 6a e9 ff ff       	call   c001bae6 <IDE::enableIRQs(unsigned char, bool)>
c001d17c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d183:	59                   	pop    ecx
c001d184:	5e                   	pop    esi
c001d185:	50                   	push   eax
c001d186:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d18c:	e8 21 e7 ff ff       	call   c001b8b2 <IDE::prepareInterrupt(unsigned char)>
c001d191:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d194:	e8 69 ff ff ff       	call   c001d102 <ATAPI::readyForCommand()>
c001d199:	83 c4 10             	add    esp,0x10
c001d19c:	84 c0                	test   al,al
c001d19e:	75 0a                	jne    c001d1aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d1a0:	bb 01 00 00 00       	mov    ebx,0x1
c001d1a5:	e9 5f 02 00 00       	jmp    c001d409 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d1aa:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d1b0:	c1 e0 04             	shl    eax,0x4
c001d1b3:	0f b6 c0             	movzx  eax,al
c001d1b6:	50                   	push   eax
c001d1b7:	6a 06                	push   0x6
c001d1b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1c0:	50                   	push   eax
c001d1c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1c7:	e8 0c e7 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1cc:	6a 00                	push   0x0
c001d1ce:	6a 01                	push   0x1
c001d1d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1d7:	50                   	push   eax
c001d1d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1de:	e8 f5 e6 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1e3:	83 c4 20             	add    esp,0x20
c001d1e6:	0f b6 c3             	movzx  eax,bl
c001d1e9:	50                   	push   eax
c001d1ea:	0f b6 df             	movzx  ebx,bh
c001d1ed:	6a 04                	push   0x4
c001d1ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1f6:	50                   	push   eax
c001d1f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1fd:	e8 d6 e6 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d202:	53                   	push   ebx
c001d203:	6a 05                	push   0x5
c001d205:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d20c:	50                   	push   eax
c001d20d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d213:	e8 c0 e6 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d218:	83 c4 20             	add    esp,0x20
c001d21b:	68 a0 00 00 00       	push   0xa0
c001d220:	6a 07                	push   0x7
c001d222:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d229:	50                   	push   eax
c001d22a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d230:	e8 a3 e6 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d235:	83 c4 0c             	add    esp,0xc
c001d238:	6a 01                	push   0x1
c001d23a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d241:	50                   	push   eax
c001d242:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d248:	e8 6f f1 ff ff       	call   c001c3bc <IDE::polling(unsigned char, unsigned int)>
c001d24d:	83 c4 10             	add    esp,0x10
c001d250:	0f b6 d8             	movzx  ebx,al
c001d253:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d259:	85 db                	test   ebx,ebx
c001d25b:	74 20                	je     c001d27d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d25d:	53                   	push   ebx
c001d25e:	0f b6 c0             	movzx  eax,al
c001d261:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d268:	52                   	push   edx
c001d269:	50                   	push   eax
c001d26a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d270:	e8 8d f0 ff ff       	call   c001c302 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d275:	83 c4 10             	add    esp,0x10
c001d278:	e9 8c 01 00 00       	jmp    c001d409 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d27d:	52                   	push   edx
c001d27e:	0f b6 c0             	movzx  eax,al
c001d281:	52                   	push   edx
c001d282:	50                   	push   eax
c001d283:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d289:	e8 38 e6 ff ff       	call   c001b8c6 <IDE::getBase(unsigned char)>
c001d28e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d292:	b9 06 00 00 00       	mov    ecx,0x6
c001d297:	89 c2                	mov    edx,eax
c001d299:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d29c:	89 e8                	mov    eax,ebp
c001d29e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d2a2:	83 c4 10             	add    esp,0x10
c001d2a5:	0f b6 c0             	movzx  eax,al
c001d2a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2ac:	85 db                	test   ebx,ebx
c001d2ae:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2b4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2bb:	0f 84 eb 00 00 00    	je     c001d3ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d2c1:	55                   	push   ebp
c001d2c2:	55                   	push   ebp
c001d2c3:	52                   	push   edx
c001d2c4:	50                   	push   eax
c001d2c5:	e8 82 e7 ff ff       	call   c001ba4c <IDE::waitInterrupt(unsigned char)>
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	84 c0                	test   al,al
c001d2cf:	0f 84 cb fe ff ff    	je     c001d1a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d2d5:	56                   	push   esi
c001d2d6:	56                   	push   esi
c001d2d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2de:	50                   	push   eax
c001d2df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2e5:	e8 c8 e5 ff ff       	call   c001b8b2 <IDE::prepareInterrupt(unsigned char)>
c001d2ea:	83 c4 0c             	add    esp,0xc
c001d2ed:	6a 04                	push   0x4
c001d2ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2f6:	50                   	push   eax
c001d2f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2fd:	e8 96 e6 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001d302:	83 c4 0c             	add    esp,0xc
c001d305:	6a 05                	push   0x5
c001d307:	89 c6                	mov    esi,eax
c001d309:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d310:	50                   	push   eax
c001d311:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d317:	e8 7c e6 ff ff       	call   c001b998 <IDE::read(unsigned char, unsigned char)>
c001d31c:	83 c4 10             	add    esp,0x10
c001d31f:	0f b6 e8             	movzx  ebp,al
c001d322:	89 f0                	mov    eax,esi
c001d324:	c1 e5 08             	shl    ebp,0x8
c001d327:	0f b6 f0             	movzx  esi,al
c001d32a:	09 f5                	or     ebp,esi
c001d32c:	31 f6                	xor    esi,esi
c001d32e:	d1 fd                	sar    ebp,1
c001d330:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d335:	74 5c                	je     c001d393 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d337:	39 ee                	cmp    esi,ebp
c001d339:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d33f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d346:	75 0d                	jne    c001d355 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d348:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d34b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d34f:	4b                   	dec    ebx
c001d350:	e9 57 ff ff ff       	jmp    c001d2ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d355:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d359:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d35d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d362:	51                   	push   ecx
c001d363:	51                   	push   ecx
c001d364:	52                   	push   edx
c001d365:	50                   	push   eax
c001d366:	e8 5b e5 ff ff       	call   c001b8c6 <IDE::getBase(unsigned char)>
c001d36b:	89 c2                	mov    edx,eax
c001d36d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d372:	66 ef                	out    dx,ax
c001d374:	46                   	inc    esi
c001d375:	83 c4 10             	add    esp,0x10
c001d378:	eb bd                	jmp    c001d337 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d37a:	51                   	push   ecx
c001d37b:	51                   	push   ecx
c001d37c:	52                   	push   edx
c001d37d:	50                   	push   eax
c001d37e:	e8 43 e5 ff ff       	call   c001b8c6 <IDE::getBase(unsigned char)>
c001d383:	89 c2                	mov    edx,eax
c001d385:	66 ed                	in     ax,dx
c001d387:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d38b:	83 c4 10             	add    esp,0x10
c001d38e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d392:	46                   	inc    esi
c001d393:	39 ee                	cmp    esi,ebp
c001d395:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d39b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3a2:	75 d6                	jne    c001d37a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d3a4:	01 f6                	add    esi,esi
c001d3a6:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d3aa:	eb a3                	jmp    c001d34f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d3ac:	51                   	push   ecx
c001d3ad:	51                   	push   ecx
c001d3ae:	52                   	push   edx
c001d3af:	50                   	push   eax
c001d3b0:	e8 97 e6 ff ff       	call   c001ba4c <IDE::waitInterrupt(unsigned char)>
c001d3b5:	83 c4 10             	add    esp,0x10
c001d3b8:	84 c0                	test   al,al
c001d3ba:	0f 84 e0 fd ff ff    	je     c001d1a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d3c0:	52                   	push   edx
c001d3c1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d3c6:	52                   	push   edx
c001d3c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3ce:	50                   	push   eax
c001d3cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3d5:	e8 d8 e4 ff ff       	call   c001b8b2 <IDE::prepareInterrupt(unsigned char)>
c001d3da:	83 c4 10             	add    esp,0x10
c001d3dd:	50                   	push   eax
c001d3de:	50                   	push   eax
c001d3df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3e6:	50                   	push   eax
c001d3e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3ed:	e8 d4 e4 ff ff       	call   c001b8c6 <IDE::getBase(unsigned char)>
c001d3f2:	8d 50 07             	lea    edx,[eax+0x7]
c001d3f5:	ec                   	in     al,dx
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	a8 88                	test   al,0x88
c001d3fb:	74 0a                	je     c001d407 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d3fd:	4b                   	dec    ebx
c001d3fe:	75 dd                	jne    c001d3dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d400:	bb 02 00 00 00       	mov    ebx,0x2
c001d405:	eb 02                	jmp    c001d409 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d407:	31 db                	xor    ebx,ebx
c001d409:	83 c4 1c             	add    esp,0x1c
c001d40c:	89 d8                	mov    eax,ebx
c001d40e:	5b                   	pop    ebx
c001d40f:	5e                   	pop    esi
c001d410:	5f                   	pop    edi
c001d411:	5d                   	pop    ebp
c001d412:	c3                   	ret    
c001d413:	90                   	nop

c001d414 <ATAPI::diskRemoved()>:
c001d414:	53                   	push   ebx
c001d415:	83 ec 14             	sub    esp,0x14
c001d418:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d41c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d423:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d429:	e8 8e 06 ff ff       	call   c000dabc <LogicalDisk::unmount()>
c001d42e:	58                   	pop    eax
c001d42f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d435:	e8 66 10 ff ff       	call   c000e4a0 <VCache::writeWriteBuffer()>
c001d43a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d440:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d444:	83 c4 18             	add    esp,0x18
c001d447:	5b                   	pop    ebx
c001d448:	e9 43 10 ff ff       	jmp    c000e490 <VCache::invalidateReadBuffer()>
c001d44d:	90                   	nop

c001d44e <ATAPI::eject()>:
c001d44e:	57                   	push   edi
c001d44f:	b9 03 00 00 00       	mov    ecx,0x3
c001d454:	53                   	push   ebx
c001d455:	83 ec 14             	sub    esp,0x14
c001d458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d45c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d460:	fc                   	cld    
c001d461:	31 c0                	xor    eax,eax
c001d463:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d465:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d46a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d46f:	50                   	push   eax
c001d470:	50                   	push   eax
c001d471:	6a 00                	push   0x0
c001d473:	6a 00                	push   0x0
c001d475:	6a 00                	push   0x0
c001d477:	6a 02                	push   0x2
c001d479:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d47d:	50                   	push   eax
c001d47e:	53                   	push   ebx
c001d47f:	e8 d0 fc ff ff       	call   c001d154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d484:	83 c4 14             	add    esp,0x14
c001d487:	53                   	push   ebx
c001d488:	e8 87 ff ff ff       	call   c001d414 <ATAPI::diskRemoved()>
c001d48d:	83 c4 24             	add    esp,0x24
c001d490:	31 c0                	xor    eax,eax
c001d492:	5b                   	pop    ebx
c001d493:	5f                   	pop    edi
c001d494:	c3                   	ret    
c001d495:	90                   	nop

c001d496 <ATAPI::diskInserted()>:
c001d496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d49a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d4a1:	c3                   	ret    

c001d4a2 <ATAPI::detectMedia()>:
c001d4a2:	56                   	push   esi
c001d4a3:	53                   	push   ebx
c001d4a4:	83 ec 28             	sub    esp,0x28
c001d4a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4ab:	6a 0c                	push   0xc
c001d4ad:	6a 00                	push   0x0
c001d4af:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d4b3:	56                   	push   esi
c001d4b4:	e8 37 30 fe ff       	call   c00004f0 <memset>
c001d4b9:	58                   	pop    eax
c001d4ba:	5a                   	pop    edx
c001d4bb:	6a 00                	push   0x0
c001d4bd:	6a 00                	push   0x0
c001d4bf:	6a 00                	push   0x0
c001d4c1:	6a 00                	push   0x0
c001d4c3:	56                   	push   esi
c001d4c4:	53                   	push   ebx
c001d4c5:	e8 8a fc ff ff       	call   c001d154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4ca:	83 c4 1c             	add    esp,0x1c
c001d4cd:	6a 0c                	push   0xc
c001d4cf:	6a 00                	push   0x0
c001d4d1:	56                   	push   esi
c001d4d2:	e8 19 30 fe ff       	call   c00004f0 <memset>
c001d4d7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d4dc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d4e1:	59                   	pop    ecx
c001d4e2:	58                   	pop    eax
c001d4e3:	6a 01                	push   0x1
c001d4e5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d4e9:	50                   	push   eax
c001d4ea:	6a 00                	push   0x0
c001d4ec:	6a 12                	push   0x12
c001d4ee:	56                   	push   esi
c001d4ef:	53                   	push   ebx
c001d4f0:	e8 5f fc ff ff       	call   c001d154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4f5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d4f9:	83 c4 20             	add    esp,0x20
c001d4fc:	83 e0 7f             	and    eax,0x7f
c001d4ff:	83 f8 70             	cmp    eax,0x70
c001d502:	74 15                	je     c001d519 <ATAPI::detectMedia()+0x77>
c001d504:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d50b:	75 0c                	jne    c001d519 <ATAPI::detectMedia()+0x77>
c001d50d:	83 ec 0c             	sub    esp,0xc
c001d510:	53                   	push   ebx
c001d511:	e8 80 ff ff ff       	call   c001d496 <ATAPI::diskInserted()>
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d51d:	83 e0 0f             	and    eax,0xf
c001d520:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d525:	0f b6 c0             	movzx  eax,al
c001d528:	75 19                	jne    c001d543 <ATAPI::detectMedia()+0xa1>
c001d52a:	83 f8 02             	cmp    eax,0x2
c001d52d:	75 14                	jne    c001d543 <ATAPI::detectMedia()+0xa1>
c001d52f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d536:	74 24                	je     c001d55c <ATAPI::detectMedia()+0xba>
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	53                   	push   ebx
c001d53c:	e8 d3 fe ff ff       	call   c001d414 <ATAPI::diskRemoved()>
c001d541:	eb 16                	jmp    c001d559 <ATAPI::detectMedia()+0xb7>
c001d543:	85 c0                	test   eax,eax
c001d545:	75 15                	jne    c001d55c <ATAPI::detectMedia()+0xba>
c001d547:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d54e:	75 0c                	jne    c001d55c <ATAPI::detectMedia()+0xba>
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	53                   	push   ebx
c001d554:	e8 3d ff ff ff       	call   c001d496 <ATAPI::diskInserted()>
c001d559:	83 c4 10             	add    esp,0x10
c001d55c:	83 c4 24             	add    esp,0x24
c001d55f:	5b                   	pop    ebx
c001d560:	5e                   	pop    esi
c001d561:	c3                   	ret    

c001d562 <ATAPI::open(int, int, void*)>:
c001d562:	56                   	push   esi
c001d563:	53                   	push   ebx
c001d564:	50                   	push   eax
c001d565:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d569:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d56d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d571:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d577:	c1 e0 06             	shl    eax,0x6
c001d57a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d580:	01 d0                	add    eax,edx
c001d582:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d589:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d58f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d596:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5a0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5a7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5ad:	6a 04                	push   0x4
c001d5af:	6a 0c                	push   0xc
c001d5b1:	51                   	push   ecx
c001d5b2:	52                   	push   edx
c001d5b3:	e8 20 e3 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5b8:	90                   	nop
c001d5b9:	90                   	nop
c001d5ba:	6a 00                	push   0x0
c001d5bc:	6a 0c                	push   0xc
c001d5be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5c5:	50                   	push   eax
c001d5c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5cc:	e8 07 e3 ff ff       	call   c001b8d8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5d1:	83 c4 14             	add    esp,0x14
c001d5d4:	68 78 01 00 00       	push   0x178
c001d5d9:	e8 f5 a4 fe ff       	call   c0007ad3 <malloc>
c001d5de:	83 c4 0c             	add    esp,0xc
c001d5e1:	6a 00                	push   0x0
c001d5e3:	68 ff ff ff 7f       	push   0x7fffffff
c001d5e8:	6a 00                	push   0x0
c001d5ea:	6a 00                	push   0x0
c001d5ec:	53                   	push   ebx
c001d5ed:	68 cf 2f 02 c0       	push   0xc0022fcf
c001d5f2:	89 c6                	mov    esi,eax
c001d5f4:	50                   	push   eax
c001d5f5:	e8 00 03 ff ff       	call   c000d8fa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d5fa:	83 c4 14             	add    esp,0x14
c001d5fd:	56                   	push   esi
c001d5fe:	e8 b7 03 ff ff       	call   c000d9ba <LogicalDisk::assignDriveLetter()>
c001d603:	5a                   	pop    edx
c001d604:	59                   	pop    ecx
c001d605:	0f be c0             	movsx  eax,al
c001d608:	50                   	push   eax
c001d609:	68 20 2e 02 c0       	push   0xc0022e20
c001d60e:	e8 f7 d2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d613:	58                   	pop    eax
c001d614:	5a                   	pop    edx
c001d615:	56                   	push   esi
c001d616:	53                   	push   ebx
c001d617:	e8 30 f1 fe ff       	call   c000c74c <Device::addChild(Device*)>
c001d61c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d622:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d625:	e8 58 f5 fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001d62a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d631:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d634:	e8 69 fe ff ff       	call   c001d4a2 <ATAPI::detectMedia()>
c001d639:	83 c4 14             	add    esp,0x14
c001d63c:	31 c0                	xor    eax,eax
c001d63e:	5b                   	pop    ebx
c001d63f:	5e                   	pop    esi
c001d640:	c3                   	ret    
c001d641:	90                   	nop

c001d642 <ATAPI::read(unsigned long long, int, void*)>:
c001d642:	55                   	push   ebp
c001d643:	57                   	push   edi
c001d644:	56                   	push   esi
c001d645:	53                   	push   ebx
c001d646:	83 ec 1c             	sub    esp,0x1c
c001d649:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d64d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d651:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d655:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d65c:	74 3c                	je     c001d69a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d65e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d662:	b9 03 00 00 00       	mov    ecx,0x3
c001d667:	fc                   	cld    
c001d668:	31 c0                	xor    eax,eax
c001d66a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d66c:	89 e8                	mov    eax,ebp
c001d66e:	0f ce                	bswap  esi
c001d670:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d674:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d679:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d67d:	50                   	push   eax
c001d67e:	50                   	push   eax
c001d67f:	55                   	push   ebp
c001d680:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d684:	c1 e5 0b             	shl    ebp,0xb
c001d687:	6a 00                	push   0x0
c001d689:	55                   	push   ebp
c001d68a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d68e:	50                   	push   eax
c001d68f:	53                   	push   ebx
c001d690:	e8 bf fa ff ff       	call   c001d154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d695:	83 c4 20             	add    esp,0x20
c001d698:	eb 1a                	jmp    c001d6b4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d69a:	83 ec 0c             	sub    esp,0xc
c001d69d:	53                   	push   ebx
c001d69e:	e8 ff fd ff ff       	call   c001d4a2 <ATAPI::detectMedia()>
c001d6a3:	83 c4 10             	add    esp,0x10
c001d6a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6ad:	75 af                	jne    c001d65e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d6af:	b8 02 00 00 00       	mov    eax,0x2
c001d6b4:	83 c4 1c             	add    esp,0x1c
c001d6b7:	5b                   	pop    ebx
c001d6b8:	5e                   	pop    esi
c001d6b9:	5f                   	pop    edi
c001d6ba:	5d                   	pop    ebp
c001d6bb:	c3                   	ret    

c001d6bc <SATA::close(int, int, void*)>:
c001d6bc:	83 ec 0c             	sub    esp,0xc
c001d6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d6c9:	85 c0                	test   eax,eax
c001d6cb:	74 0c                	je     c001d6d9 <SATA::close(int, int, void*)+0x1d>
c001d6cd:	8b 10                	mov    edx,DWORD PTR [eax]
c001d6cf:	83 ec 0c             	sub    esp,0xc
c001d6d2:	50                   	push   eax
c001d6d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d6d6:	83 c4 10             	add    esp,0x10
c001d6d9:	31 c0                	xor    eax,eax
c001d6db:	83 c4 0c             	add    esp,0xc
c001d6de:	c3                   	ret    
c001d6df:	90                   	nop

c001d6e0 <SATA::powerSaving(PowerSavingLevel)>:
c001d6e0:	c3                   	ret    
c001d6e1:	90                   	nop

c001d6e2 <SATA::open(int, int, void*)>:
c001d6e2:	56                   	push   esi
c001d6e3:	53                   	push   ebx
c001d6e4:	50                   	push   eax
c001d6e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d6ed:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d6f7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d6fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d701:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d70b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d715:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d71c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d722:	e8 bb a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d727:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d72d:	89 c6                	mov    esi,eax
c001d72f:	e8 ae a6 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d734:	81 c6 00 10 00 00    	add    esi,0x1000
c001d73a:	39 c6                	cmp    esi,eax
c001d73c:	74 10                	je     c001d74e <SATA::open(int, int, void*)+0x6c>
c001d73e:	83 ec 0c             	sub    esp,0xc
c001d741:	68 68 2e 02 c0       	push   0xc0022e68
c001d746:	e8 9e 3b ff ff       	call   c00112e9 <KePanic(char const*)>
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	83 ec 0c             	sub    esp,0xc
c001d751:	6a 02                	push   0x2
c001d753:	e8 9d be fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d758:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d75e:	6a 03                	push   0x3
c001d760:	50                   	push   eax
c001d761:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d767:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d76d:	e8 8c c5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d772:	83 c4 14             	add    esp,0x14
c001d775:	53                   	push   ebx
c001d776:	e8 07 f4 fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001d77b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d77e:	e8 4b 06 ff ff       	call   c000ddce <createPartitionsForDisk(PhysicalDisk*)>
c001d783:	83 c4 14             	add    esp,0x14
c001d786:	31 c0                	xor    eax,eax
c001d788:	5b                   	pop    ebx
c001d789:	5e                   	pop    esi
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <SATA::SATA()>:
c001d78c:	83 ec 0c             	sub    esp,0xc
c001d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d793:	83 ec 04             	sub    esp,0x4
c001d796:	68 00 02 00 00       	push   0x200
c001d79b:	68 7c 2e 02 c0       	push   0xc0022e7c
c001d7a0:	50                   	push   eax
c001d7a1:	e8 74 f3 fe ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d7a6:	83 c4 10             	add    esp,0x10
c001d7a9:	ba ec 2e 02 c0       	mov    edx,0xc0022eec
c001d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b2:	89 10                	mov    DWORD PTR [eax],edx
c001d7b4:	90                   	nop
c001d7b5:	83 c4 0c             	add    esp,0xc
c001d7b8:	c3                   	ret    
c001d7b9:	90                   	nop

c001d7ba <SATA::access(unsigned long long, int, void*, bool)>:
c001d7ba:	55                   	push   ebp
c001d7bb:	57                   	push   edi
c001d7bc:	56                   	push   esi
c001d7bd:	53                   	push   ebx
c001d7be:	83 ec 2c             	sub    esp,0x2c
c001d7c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d7c5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d7ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d7ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7d2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d7d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d7de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7e2:	7e 10                	jle    c001d7f4 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d7e4:	83 ec 0c             	sub    esp,0xc
c001d7e7:	68 8c 2e 02 c0       	push   0xc0022e8c
c001d7ec:	e8 f8 3a ff ff       	call   c00112e9 <KePanic(char const*)>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d7fa:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d800:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d806:	89 e8                	mov    eax,ebp
c001d808:	c1 e0 07             	shl    eax,0x7
c001d80b:	01 d0                	add    eax,edx
c001d80d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d817:	8d 45 02             	lea    eax,[ebp+0x2]
c001d81a:	51                   	push   ecx
c001d81b:	c1 e0 07             	shl    eax,0x7
c001d81e:	51                   	push   ecx
c001d81f:	01 d0                	add    eax,edx
c001d821:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d825:	50                   	push   eax
c001d826:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d82c:	e8 6b ec ff ff       	call   c001c49c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d831:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d83d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d841:	0f 84 5b 01 00 00    	je     c001d9a2 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d847:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d84b:	c1 e0 09             	shl    eax,0x9
c001d84e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d857:	74 0e                	je     c001d867 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d859:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d85f:	89 c1                	mov    ecx,eax
c001d861:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d865:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d867:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d86b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d871:	8d 45 02             	lea    eax,[ebp+0x2]
c001d874:	c1 e0 07             	shl    eax,0x7
c001d877:	01 d0                	add    eax,edx
c001d879:	8b 00                	mov    eax,DWORD PTR [eax]
c001d87b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d881:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d887:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d88b:	c1 e1 05             	shl    ecx,0x5
c001d88e:	01 c8                	add    eax,ecx
c001d890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d894:	83 e1 01             	and    ecx,0x1
c001d897:	89 ce                	mov    esi,ecx
c001d899:	8a 08                	mov    cl,BYTE PTR [eax]
c001d89b:	c1 e6 06             	shl    esi,0x6
c001d89e:	83 e1 bf             	and    ecx,0xffffffbf
c001d8a1:	09 f1                	or     ecx,esi
c001d8a3:	88 08                	mov    BYTE PTR [eax],cl
c001d8a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8a7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d8ad:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d8b3:	89 08                	mov    DWORD PTR [eax],ecx
c001d8b5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d8bb:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d8c1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d8c7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d8ca:	50                   	push   eax
c001d8cb:	68 90 00 00 00       	push   0x90
c001d8d0:	6a 00                	push   0x0
c001d8d2:	56                   	push   esi
c001d8d3:	e8 18 2c fe ff       	call   c00004f0 <memset>
c001d8d8:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d8de:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8e8:	83 c4 10             	add    esp,0x10
c001d8eb:	48                   	dec    eax
c001d8ec:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d8f1:	89 c1                	mov    ecx,eax
c001d8f3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d8f9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d8fe:	09 c8                	or     eax,ecx
c001d900:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d906:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d90c:	83 c8 80             	or     eax,0xffffff80
c001d90f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d915:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d918:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d91c:	25 00 7f 00 00       	and    eax,0x7f00
c001d921:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d926:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d92b:	66 89 06             	mov    WORD PTR [esi],ax
c001d92e:	b0 35                	mov    al,0x35
c001d930:	75 02                	jne    c001d934 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d932:	b0 25                	mov    al,0x25
c001d934:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d93b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d93f:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d943:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d947:	c1 e8 10             	shr    eax,0x10
c001d94a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d951:	c1 e8 18             	shr    eax,0x18
c001d954:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d957:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d95b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d95e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d962:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d965:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d969:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d96d:	89 ee                	mov    esi,ebp
c001d96f:	31 c0                	xor    eax,eax
c001d971:	c1 e6 07             	shl    esi,0x7
c001d974:	01 d6                	add    esi,edx
c001d976:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d97c:	80 e1 88             	and    cl,0x88
c001d97f:	74 0a                	je     c001d98b <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d981:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d986:	74 0a                	je     c001d992 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d988:	40                   	inc    eax
c001d989:	eb eb                	jmp    c001d976 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d98b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d990:	75 17                	jne    c001d9a9 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d992:	83 ec 0c             	sub    esp,0xc
c001d995:	68 c5 2e 02 c0       	push   0xc0022ec5
c001d99a:	e8 6b cf fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d99f:	83 c4 10             	add    esp,0x10
c001d9a2:	b8 01 00 00 00       	mov    eax,0x1
c001d9a7:	eb 5b                	jmp    c001da04 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d9a9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d9ad:	c1 e5 07             	shl    ebp,0x7
c001d9b0:	b8 01 00 00 00       	mov    eax,0x1
c001d9b5:	01 ea                	add    edx,ebp
c001d9b7:	d3 e0                	shl    eax,cl
c001d9b9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d9bf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d9c5:	85 c8                	test   eax,ecx
c001d9c7:	74 16                	je     c001d9df <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d9c9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d9cf:	0f ba e1 1e          	bt     ecx,0x1e
c001d9d3:	73 ea                	jae    c001d9bf <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d9d5:	83 ec 0c             	sub    esp,0xc
c001d9d8:	68 d3 2e 02 c0       	push   0xc0022ed3
c001d9dd:	eb bb                	jmp    c001d99a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d9df:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d9e5:	0f ba e0 1e          	bt     eax,0x1e
c001d9e9:	72 b7                	jb     c001d9a2 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d9eb:	31 c0                	xor    eax,eax
c001d9ed:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d9f2:	75 10                	jne    c001da04 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d9f4:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d9fa:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d9fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da04:	83 c4 2c             	add    esp,0x2c
c001da07:	5b                   	pop    ebx
c001da08:	5e                   	pop    esi
c001da09:	5f                   	pop    edi
c001da0a:	5d                   	pop    ebp
c001da0b:	c3                   	ret    

c001da0c <SATA::read(unsigned long long, int, void*)>:
c001da0c:	55                   	push   ebp
c001da0d:	57                   	push   edi
c001da0e:	56                   	push   esi
c001da0f:	be 04 00 00 00       	mov    esi,0x4
c001da14:	53                   	push   ebx
c001da15:	83 ec 0c             	sub    esp,0xc
c001da18:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da20:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da24:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da28:	8d 7b ff             	lea    edi,[ebx-0x1]
c001da2b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001da31:	0f 87 1a 02 00 00    	ja     c001dc51 <SATA::read(unsigned long long, int, void*)+0x245>
c001da37:	85 c9                	test   ecx,ecx
c001da39:	be 06 00 00 00       	mov    esi,0x6
c001da3e:	0f 84 0d 02 00 00    	je     c001dc51 <SATA::read(unsigned long long, int, void*)+0x245>
c001da44:	56                   	push   esi
c001da45:	56                   	push   esi
c001da46:	6a 00                	push   0x0
c001da48:	51                   	push   ecx
c001da49:	53                   	push   ebx
c001da4a:	52                   	push   edx
c001da4b:	50                   	push   eax
c001da4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da50:	e8 65 fd ff ff       	call   c001d7ba <SATA::access(unsigned long long, int, void*, bool)>
c001da55:	83 c4 20             	add    esp,0x20
c001da58:	85 c0                	test   eax,eax
c001da5a:	89 c6                	mov    esi,eax
c001da5c:	0f 85 ea 01 00 00    	jne    c001dc4c <SATA::read(unsigned long long, int, void*)+0x240>
c001da62:	50                   	push   eax
c001da63:	50                   	push   eax
c001da64:	6a 0f                	push   0xf
c001da66:	6a 00                	push   0x0
c001da68:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001da6e:	bb 0a 00 00 00       	mov    ebx,0xa
c001da73:	e8 7d f2 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001da78:	5a                   	pop    edx
c001da79:	59                   	pop    ecx
c001da7a:	b9 10 27 00 00       	mov    ecx,0x2710
c001da7f:	0f b6 c0             	movzx  eax,al
c001da82:	50                   	push   eax
c001da83:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da88:	99                   	cdq    
c001da89:	f7 f9                	idiv   ecx
c001da8b:	99                   	cdq    
c001da8c:	f7 fb                	idiv   ebx
c001da8e:	8d 42 30             	lea    eax,[edx+0x30]
c001da91:	0f b6 c0             	movzx  eax,al
c001da94:	50                   	push   eax
c001da95:	e8 4a f2 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001da9a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001daa0:	5f                   	pop    edi
c001daa1:	5d                   	pop    ebp
c001daa2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001daa7:	6a 0f                	push   0xf
c001daa9:	6a 00                	push   0x0
c001daab:	e8 45 f2 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dab0:	5a                   	pop    edx
c001dab1:	59                   	pop    ecx
c001dab2:	0f b6 c0             	movzx  eax,al
c001dab5:	50                   	push   eax
c001dab6:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dabb:	99                   	cdq    
c001dabc:	f7 fd                	idiv   ebp
c001dabe:	99                   	cdq    
c001dabf:	f7 fb                	idiv   ebx
c001dac1:	8d 42 30             	lea    eax,[edx+0x30]
c001dac4:	0f b6 c0             	movzx  eax,al
c001dac7:	50                   	push   eax
c001dac8:	e8 17 f2 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dacd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dad3:	5f                   	pop    edi
c001dad4:	bf 64 00 00 00       	mov    edi,0x64
c001dad9:	58                   	pop    eax
c001dada:	6a 0f                	push   0xf
c001dadc:	6a 00                	push   0x0
c001dade:	e8 12 f2 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dae3:	5a                   	pop    edx
c001dae4:	59                   	pop    ecx
c001dae5:	0f b6 c0             	movzx  eax,al
c001dae8:	50                   	push   eax
c001dae9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001daee:	99                   	cdq    
c001daef:	f7 ff                	idiv   edi
c001daf1:	99                   	cdq    
c001daf2:	f7 fb                	idiv   ebx
c001daf4:	8d 42 30             	lea    eax,[edx+0x30]
c001daf7:	0f b6 c0             	movzx  eax,al
c001dafa:	50                   	push   eax
c001dafb:	e8 e4 f1 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001db00:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001db06:	58                   	pop    eax
c001db07:	5a                   	pop    edx
c001db08:	6a 0f                	push   0xf
c001db0a:	6a 00                	push   0x0
c001db0c:	e8 e4 f1 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001db11:	59                   	pop    ecx
c001db12:	5a                   	pop    edx
c001db13:	0f b6 c0             	movzx  eax,al
c001db16:	50                   	push   eax
c001db17:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db1c:	99                   	cdq    
c001db1d:	f7 fb                	idiv   ebx
c001db1f:	99                   	cdq    
c001db20:	f7 fb                	idiv   ebx
c001db22:	8d 42 30             	lea    eax,[edx+0x30]
c001db25:	0f b6 c0             	movzx  eax,al
c001db28:	50                   	push   eax
c001db29:	e8 b6 f1 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001db2e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001db34:	59                   	pop    ecx
c001db35:	58                   	pop    eax
c001db36:	6a 0f                	push   0xf
c001db38:	6a 00                	push   0x0
c001db3a:	e8 b6 f1 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001db3f:	5a                   	pop    edx
c001db40:	59                   	pop    ecx
c001db41:	0f b6 c0             	movzx  eax,al
c001db44:	50                   	push   eax
c001db45:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db4a:	99                   	cdq    
c001db4b:	f7 fb                	idiv   ebx
c001db4d:	83 c2 30             	add    edx,0x30
c001db50:	0f b6 d2             	movzx  edx,dl
c001db53:	52                   	push   edx
c001db54:	e8 8b f1 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001db59:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001db5f:	58                   	pop    eax
c001db60:	5a                   	pop    edx
c001db61:	6a 0f                	push   0xf
c001db63:	6a 00                	push   0x0
c001db65:	e8 8b f1 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001db6a:	59                   	pop    ecx
c001db6b:	b9 10 27 00 00       	mov    ecx,0x2710
c001db70:	5a                   	pop    edx
c001db71:	0f b6 c0             	movzx  eax,al
c001db74:	50                   	push   eax
c001db75:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db7a:	99                   	cdq    
c001db7b:	f7 f9                	idiv   ecx
c001db7d:	99                   	cdq    
c001db7e:	f7 fb                	idiv   ebx
c001db80:	8d 42 30             	lea    eax,[edx+0x30]
c001db83:	0f b6 c0             	movzx  eax,al
c001db86:	50                   	push   eax
c001db87:	e8 58 f1 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001db8c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001db92:	59                   	pop    ecx
c001db93:	58                   	pop    eax
c001db94:	6a 0f                	push   0xf
c001db96:	6a 00                	push   0x0
c001db98:	e8 58 f1 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001db9d:	5a                   	pop    edx
c001db9e:	59                   	pop    ecx
c001db9f:	0f b6 c0             	movzx  eax,al
c001dba2:	50                   	push   eax
c001dba3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dba8:	99                   	cdq    
c001dba9:	f7 fd                	idiv   ebp
c001dbab:	99                   	cdq    
c001dbac:	f7 fb                	idiv   ebx
c001dbae:	8d 42 30             	lea    eax,[edx+0x30]
c001dbb1:	0f b6 c0             	movzx  eax,al
c001dbb4:	50                   	push   eax
c001dbb5:	e8 2a f1 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dbba:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dbc0:	5d                   	pop    ebp
c001dbc1:	58                   	pop    eax
c001dbc2:	6a 0f                	push   0xf
c001dbc4:	6a 00                	push   0x0
c001dbc6:	e8 2a f1 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dbcb:	5a                   	pop    edx
c001dbcc:	59                   	pop    ecx
c001dbcd:	0f b6 c0             	movzx  eax,al
c001dbd0:	50                   	push   eax
c001dbd1:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbd6:	99                   	cdq    
c001dbd7:	f7 ff                	idiv   edi
c001dbd9:	99                   	cdq    
c001dbda:	f7 fb                	idiv   ebx
c001dbdc:	8d 42 30             	lea    eax,[edx+0x30]
c001dbdf:	0f b6 c0             	movzx  eax,al
c001dbe2:	50                   	push   eax
c001dbe3:	e8 fc f0 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dbe8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dbee:	5f                   	pop    edi
c001dbef:	5d                   	pop    ebp
c001dbf0:	6a 0f                	push   0xf
c001dbf2:	6a 00                	push   0x0
c001dbf4:	e8 fc f0 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dbf9:	5a                   	pop    edx
c001dbfa:	59                   	pop    ecx
c001dbfb:	0f b6 c0             	movzx  eax,al
c001dbfe:	50                   	push   eax
c001dbff:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc04:	99                   	cdq    
c001dc05:	f7 fb                	idiv   ebx
c001dc07:	99                   	cdq    
c001dc08:	f7 fb                	idiv   ebx
c001dc0a:	8d 42 30             	lea    eax,[edx+0x30]
c001dc0d:	0f b6 c0             	movzx  eax,al
c001dc10:	50                   	push   eax
c001dc11:	e8 ce f0 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dc16:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dc1c:	5f                   	pop    edi
c001dc1d:	5d                   	pop    ebp
c001dc1e:	6a 0f                	push   0xf
c001dc20:	6a 00                	push   0x0
c001dc22:	e8 ce f0 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dc27:	5a                   	pop    edx
c001dc28:	59                   	pop    ecx
c001dc29:	0f b6 c0             	movzx  eax,al
c001dc2c:	50                   	push   eax
c001dc2d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc32:	99                   	cdq    
c001dc33:	f7 fb                	idiv   ebx
c001dc35:	83 c2 30             	add    edx,0x30
c001dc38:	0f b6 d2             	movzx  edx,dl
c001dc3b:	52                   	push   edx
c001dc3c:	e8 a3 f0 ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dc41:	83 c4 10             	add    esp,0x10
c001dc44:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dc4a:	eb 05                	jmp    c001dc51 <SATA::read(unsigned long long, int, void*)+0x245>
c001dc4c:	be 01 00 00 00       	mov    esi,0x1
c001dc51:	83 c4 0c             	add    esp,0xc
c001dc54:	89 f0                	mov    eax,esi
c001dc56:	5b                   	pop    ebx
c001dc57:	5e                   	pop    esi
c001dc58:	5f                   	pop    edi
c001dc59:	5d                   	pop    ebp
c001dc5a:	c3                   	ret    
c001dc5b:	90                   	nop

c001dc5c <SATA::write(unsigned long long, int, void*)>:
c001dc5c:	55                   	push   ebp
c001dc5d:	57                   	push   edi
c001dc5e:	56                   	push   esi
c001dc5f:	53                   	push   ebx
c001dc60:	83 ec 0c             	sub    esp,0xc
c001dc63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dc6b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dc73:	8d 70 ff             	lea    esi,[eax-0x1]
c001dc76:	b8 04 00 00 00       	mov    eax,0x4
c001dc7b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dc81:	0f 87 2c 02 00 00    	ja     c001deb3 <SATA::write(unsigned long long, int, void*)+0x257>
c001dc87:	85 db                	test   ebx,ebx
c001dc89:	b8 06 00 00 00       	mov    eax,0x6
c001dc8e:	0f 84 1f 02 00 00    	je     c001deb3 <SATA::write(unsigned long long, int, void*)+0x257>
c001dc94:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dc98:	c1 e6 09             	shl    esi,0x9
c001dc9b:	01 de                	add    esi,ebx
c001dc9d:	50                   	push   eax
c001dc9e:	89 d7                	mov    edi,edx
c001dca0:	50                   	push   eax
c001dca1:	83 c7 01             	add    edi,0x1
c001dca4:	6a 01                	push   0x1
c001dca6:	89 cd                	mov    ebp,ecx
c001dca8:	53                   	push   ebx
c001dca9:	83 d5 00             	adc    ebp,0x0
c001dcac:	6a 01                	push   0x1
c001dcae:	81 c3 00 02 00 00    	add    ebx,0x200
c001dcb4:	51                   	push   ecx
c001dcb5:	52                   	push   edx
c001dcb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcba:	e8 fb fa ff ff       	call   c001d7ba <SATA::access(unsigned long long, int, void*, bool)>
c001dcbf:	83 c4 20             	add    esp,0x20
c001dcc2:	39 f3                	cmp    ebx,esi
c001dcc4:	89 fa                	mov    edx,edi
c001dcc6:	89 e9                	mov    ecx,ebp
c001dcc8:	75 d3                	jne    c001dc9d <SATA::write(unsigned long long, int, void*)+0x41>
c001dcca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dcce:	bd 10 27 00 00       	mov    ebp,0x2710
c001dcd3:	bb 0a 00 00 00       	mov    ebx,0xa
c001dcd8:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dcde:	50                   	push   eax
c001dcdf:	50                   	push   eax
c001dce0:	6a 0f                	push   0xf
c001dce2:	6a 00                	push   0x0
c001dce4:	e8 0c f0 ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dce9:	5a                   	pop    edx
c001dcea:	59                   	pop    ecx
c001dceb:	0f b6 c0             	movzx  eax,al
c001dcee:	50                   	push   eax
c001dcef:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcf4:	99                   	cdq    
c001dcf5:	f7 fd                	idiv   ebp
c001dcf7:	99                   	cdq    
c001dcf8:	f7 fb                	idiv   ebx
c001dcfa:	8d 42 30             	lea    eax,[edx+0x30]
c001dcfd:	0f b6 c0             	movzx  eax,al
c001dd00:	50                   	push   eax
c001dd01:	e8 de ef ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dd06:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dd0c:	5e                   	pop    esi
c001dd0d:	5f                   	pop    edi
c001dd0e:	bf e8 03 00 00       	mov    edi,0x3e8
c001dd13:	6a 0f                	push   0xf
c001dd15:	6a 00                	push   0x0
c001dd17:	e8 d9 ef ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dd1c:	5a                   	pop    edx
c001dd1d:	59                   	pop    ecx
c001dd1e:	0f b6 c0             	movzx  eax,al
c001dd21:	50                   	push   eax
c001dd22:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd27:	99                   	cdq    
c001dd28:	f7 ff                	idiv   edi
c001dd2a:	99                   	cdq    
c001dd2b:	f7 fb                	idiv   ebx
c001dd2d:	8d 42 30             	lea    eax,[edx+0x30]
c001dd30:	0f b6 c0             	movzx  eax,al
c001dd33:	50                   	push   eax
c001dd34:	e8 ab ef ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dd39:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd3f:	5e                   	pop    esi
c001dd40:	be 64 00 00 00       	mov    esi,0x64
c001dd45:	58                   	pop    eax
c001dd46:	6a 0f                	push   0xf
c001dd48:	6a 00                	push   0x0
c001dd4a:	e8 a6 ef ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dd4f:	5a                   	pop    edx
c001dd50:	59                   	pop    ecx
c001dd51:	0f b6 c0             	movzx  eax,al
c001dd54:	50                   	push   eax
c001dd55:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd5a:	99                   	cdq    
c001dd5b:	f7 fe                	idiv   esi
c001dd5d:	99                   	cdq    
c001dd5e:	f7 fb                	idiv   ebx
c001dd60:	8d 42 30             	lea    eax,[edx+0x30]
c001dd63:	0f b6 c0             	movzx  eax,al
c001dd66:	50                   	push   eax
c001dd67:	e8 78 ef ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dd6c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dd72:	58                   	pop    eax
c001dd73:	5a                   	pop    edx
c001dd74:	6a 0f                	push   0xf
c001dd76:	6a 00                	push   0x0
c001dd78:	e8 78 ef ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001dd7d:	59                   	pop    ecx
c001dd7e:	5a                   	pop    edx
c001dd7f:	0f b6 c0             	movzx  eax,al
c001dd82:	50                   	push   eax
c001dd83:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd88:	99                   	cdq    
c001dd89:	f7 fb                	idiv   ebx
c001dd8b:	99                   	cdq    
c001dd8c:	f7 fb                	idiv   ebx
c001dd8e:	8d 42 30             	lea    eax,[edx+0x30]
c001dd91:	0f b6 c0             	movzx  eax,al
c001dd94:	50                   	push   eax
c001dd95:	e8 4a ef ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dd9a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dda0:	59                   	pop    ecx
c001dda1:	58                   	pop    eax
c001dda2:	6a 0f                	push   0xf
c001dda4:	6a 00                	push   0x0
c001dda6:	e8 4a ef ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001ddab:	5a                   	pop    edx
c001ddac:	59                   	pop    ecx
c001ddad:	0f b6 c0             	movzx  eax,al
c001ddb0:	50                   	push   eax
c001ddb1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddb6:	99                   	cdq    
c001ddb7:	f7 fb                	idiv   ebx
c001ddb9:	83 c2 30             	add    edx,0x30
c001ddbc:	0f b6 d2             	movzx  edx,dl
c001ddbf:	52                   	push   edx
c001ddc0:	e8 1f ef ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001ddc5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ddcb:	58                   	pop    eax
c001ddcc:	5a                   	pop    edx
c001ddcd:	6a 0f                	push   0xf
c001ddcf:	6a 00                	push   0x0
c001ddd1:	e8 1f ef ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001ddd6:	59                   	pop    ecx
c001ddd7:	5a                   	pop    edx
c001ddd8:	0f b6 c0             	movzx  eax,al
c001dddb:	50                   	push   eax
c001dddc:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dde1:	99                   	cdq    
c001dde2:	f7 fd                	idiv   ebp
c001dde4:	99                   	cdq    
c001dde5:	f7 fb                	idiv   ebx
c001dde7:	8d 42 30             	lea    eax,[edx+0x30]
c001ddea:	0f b6 c0             	movzx  eax,al
c001dded:	50                   	push   eax
c001ddee:	e8 f1 ee ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001ddf3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ddf9:	59                   	pop    ecx
c001ddfa:	5d                   	pop    ebp
c001ddfb:	6a 0f                	push   0xf
c001ddfd:	6a 00                	push   0x0
c001ddff:	e8 f1 ee ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001de04:	5a                   	pop    edx
c001de05:	59                   	pop    ecx
c001de06:	0f b6 c0             	movzx  eax,al
c001de09:	50                   	push   eax
c001de0a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de0f:	99                   	cdq    
c001de10:	f7 ff                	idiv   edi
c001de12:	99                   	cdq    
c001de13:	f7 fb                	idiv   ebx
c001de15:	8d 42 30             	lea    eax,[edx+0x30]
c001de18:	0f b6 c0             	movzx  eax,al
c001de1b:	50                   	push   eax
c001de1c:	e8 c3 ee ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001de21:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de27:	5f                   	pop    edi
c001de28:	5d                   	pop    ebp
c001de29:	6a 0f                	push   0xf
c001de2b:	6a 00                	push   0x0
c001de2d:	e8 c3 ee ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001de32:	5a                   	pop    edx
c001de33:	59                   	pop    ecx
c001de34:	0f b6 c0             	movzx  eax,al
c001de37:	50                   	push   eax
c001de38:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de3d:	99                   	cdq    
c001de3e:	f7 fe                	idiv   esi
c001de40:	99                   	cdq    
c001de41:	f7 fb                	idiv   ebx
c001de43:	8d 42 30             	lea    eax,[edx+0x30]
c001de46:	0f b6 c0             	movzx  eax,al
c001de49:	50                   	push   eax
c001de4a:	e8 95 ee ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001de4f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001de55:	5e                   	pop    esi
c001de56:	5f                   	pop    edi
c001de57:	6a 0f                	push   0xf
c001de59:	6a 00                	push   0x0
c001de5b:	e8 95 ee ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001de60:	5d                   	pop    ebp
c001de61:	5a                   	pop    edx
c001de62:	0f b6 c0             	movzx  eax,al
c001de65:	50                   	push   eax
c001de66:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de6b:	99                   	cdq    
c001de6c:	f7 fb                	idiv   ebx
c001de6e:	99                   	cdq    
c001de6f:	f7 fb                	idiv   ebx
c001de71:	8d 42 30             	lea    eax,[edx+0x30]
c001de74:	0f b6 c0             	movzx  eax,al
c001de77:	50                   	push   eax
c001de78:	e8 67 ee ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001de7d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001de83:	59                   	pop    ecx
c001de84:	5e                   	pop    esi
c001de85:	6a 0f                	push   0xf
c001de87:	6a 00                	push   0x0
c001de89:	e8 67 ee ff ff       	call   c001ccf5 <combineColours(unsigned char, unsigned char)>
c001de8e:	5f                   	pop    edi
c001de8f:	5d                   	pop    ebp
c001de90:	0f b6 c0             	movzx  eax,al
c001de93:	50                   	push   eax
c001de94:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de99:	99                   	cdq    
c001de9a:	f7 fb                	idiv   ebx
c001de9c:	83 c2 30             	add    edx,0x30
c001de9f:	0f b6 d2             	movzx  edx,dl
c001dea2:	52                   	push   edx
c001dea3:	e8 3c ee ff ff       	call   c001cce4 <combineCharAndColour(char, unsigned char)>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001deb1:	31 c0                	xor    eax,eax
c001deb3:	83 c4 0c             	add    esp,0xc
c001deb6:	5b                   	pop    ebx
c001deb7:	5e                   	pop    esi
c001deb8:	5f                   	pop    edi
c001deb9:	5d                   	pop    ebp
c001deba:	c3                   	ret    
c001debb:	90                   	nop

c001debc <SATAPI::write(unsigned long long, int, void*)>:
c001debc:	b8 03 00 00 00       	mov    eax,0x3
c001dec1:	c3                   	ret    

c001dec2 <SATAPI::close(int, int, void*)>:
c001dec2:	83 ec 0c             	sub    esp,0xc
c001dec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001decf:	85 c0                	test   eax,eax
c001ded1:	74 0c                	je     c001dedf <SATAPI::close(int, int, void*)+0x1d>
c001ded3:	8b 10                	mov    edx,DWORD PTR [eax]
c001ded5:	83 ec 0c             	sub    esp,0xc
c001ded8:	50                   	push   eax
c001ded9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dedc:	83 c4 10             	add    esp,0x10
c001dedf:	31 c0                	xor    eax,eax
c001dee1:	83 c4 0c             	add    esp,0xc
c001dee4:	c3                   	ret    
c001dee5:	90                   	nop

c001dee6 <SATAPI::SATAPI()>:
c001dee6:	83 ec 0c             	sub    esp,0xc
c001dee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deed:	83 ec 04             	sub    esp,0x4
c001def0:	68 00 08 00 00       	push   0x800
c001def5:	68 1c 2f 02 c0       	push   0xc0022f1c
c001defa:	50                   	push   eax
c001defb:	e8 1a ec fe ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001df00:	83 c4 10             	add    esp,0x10
c001df03:	ba 10 30 02 c0       	mov    edx,0xc0023010
c001df08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0c:	89 10                	mov    DWORD PTR [eax],edx
c001df0e:	90                   	nop
c001df0f:	83 c4 0c             	add    esp,0xc
c001df12:	c3                   	ret    
c001df13:	90                   	nop

c001df14 <SATAPI::diskRemoved()>:
c001df14:	c3                   	ret    
c001df15:	90                   	nop

c001df16 <SATAPI::diskInserted()>:
c001df16:	83 ec 18             	sub    esp,0x18
c001df19:	68 28 2f 02 c0       	push   0xc0022f28
c001df1e:	e8 e7 c9 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001df23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df27:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001df2e:	83 c4 1c             	add    esp,0x1c
c001df31:	c3                   	ret    

c001df32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001df32:	55                   	push   ebp
c001df33:	57                   	push   edi
c001df34:	56                   	push   esi
c001df35:	53                   	push   ebx
c001df36:	83 ec 34             	sub    esp,0x34
c001df39:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df3d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001df41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df45:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df4d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001df53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df5d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001df63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df67:	83 c0 02             	add    eax,0x2
c001df6a:	c1 e0 07             	shl    eax,0x7
c001df6d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df79:	c1 e0 07             	shl    eax,0x7
c001df7c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df84:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001df8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df92:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df98:	e8 ff e4 ff ff       	call   c001c49c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001df9d:	83 c4 10             	add    esp,0x10
c001dfa0:	89 c2                	mov    edx,eax
c001dfa2:	b8 01 00 00 00       	mov    eax,0x1
c001dfa7:	83 fa ff             	cmp    edx,0xffffffff
c001dfaa:	0f 84 5f 02 00 00    	je     c001e20f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001dfb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dfb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dfbe:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfc0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dfc6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dfcc:	89 d1                	mov    ecx,edx
c001dfce:	c1 e1 05             	shl    ecx,0x5
c001dfd1:	01 c8                	add    eax,ecx
c001dfd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dfd5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001dfdb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001dfe1:	89 08                	mov    DWORD PTR [eax],ecx
c001dfe3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dfe9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001dfef:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001dff5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001dff8:	50                   	push   eax
c001dff9:	68 90 00 00 00       	push   0x90
c001dffe:	6a 00                	push   0x0
c001e000:	53                   	push   ebx
c001e001:	e8 ea 24 fe ff       	call   c00004f0 <memset>
c001e006:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e009:	b9 0c 00 00 00       	mov    ecx,0xc
c001e00e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e012:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e014:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e01a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e01e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e022:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e028:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e02c:	48                   	dec    eax
c001e02d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e032:	89 c1                	mov    ecx,eax
c001e034:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e03a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e03f:	09 c8                	or     eax,ecx
c001e041:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e047:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e04d:	83 c8 80             	or     eax,0xffffff80
c001e050:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e056:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e059:	25 00 7f 00 00       	and    eax,0x7f00
c001e05e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e063:	66 89 03             	mov    WORD PTR [ebx],ax
c001e066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e06a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e06e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e072:	c1 e8 10             	shr    eax,0x10
c001e075:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e07c:	c1 e8 18             	shr    eax,0x18
c001e07f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e082:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e086:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e08d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e090:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e094:	83 c4 10             	add    esp,0x10
c001e097:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e09b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e09f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e0a3:	31 c0                	xor    eax,eax
c001e0a5:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e0ab:	80 e1 88             	and    cl,0x88
c001e0ae:	74 0a                	je     c001e0ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e0b0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0b5:	74 0a                	je     c001e0c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e0b7:	40                   	inc    eax
c001e0b8:	eb eb                	jmp    c001e0a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e0ba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0bf:	75 43                	jne    c001e104 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e0c1:	83 ec 0c             	sub    esp,0xc
c001e0c4:	68 40 2f 02 c0       	push   0xc0022f40
c001e0c9:	e8 3c c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0ce:	58                   	pop    eax
c001e0cf:	5a                   	pop    edx
c001e0d0:	68 55 2f 02 c0       	push   0xc0022f55
c001e0d5:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e0db:	e8 cc a9 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e0e0:	59                   	pop    ecx
c001e0e1:	5b                   	pop    ebx
c001e0e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e0e6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0ec:	e8 45 e4 ff ff       	call   c001c536 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e0f1:	5e                   	pop    esi
c001e0f2:	5f                   	pop    edi
c001e0f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e0f7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e0fd:	e8 14 e4 ff ff       	call   c001c516 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e102:	eb 48                	jmp    c001e14c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e104:	b8 01 00 00 00       	mov    eax,0x1
c001e109:	88 d1                	mov    cl,dl
c001e10b:	d3 e0                	shl    eax,cl
c001e10d:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e112:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e118:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e11c:	89 c7                	mov    edi,eax
c001e11e:	c1 e3 07             	shl    ebx,0x7
c001e121:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e125:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e12b:	85 c7                	test   edi,eax
c001e12d:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e133:	0f 84 a3 00 00 00    	je     c001e1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e139:	0f ba e0 1e          	bt     eax,0x1e
c001e13d:	73 1a                	jae    c001e159 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e13f:	83 ec 0c             	sub    esp,0xc
c001e142:	68 67 2f 02 c0       	push   0xc0022f67
c001e147:	e8 be c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e14c:	83 c4 10             	add    esp,0x10
c001e14f:	b8 01 00 00 00       	mov    eax,0x1
c001e154:	e9 b6 00 00 00       	jmp    c001e20f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e159:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e15f:	83 f8 0d             	cmp    eax,0xd
c001e162:	77 0a                	ja     c001e16e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e164:	83 ec 0c             	sub    esp,0xc
c001e167:	68 c8 00 00 00       	push   0xc8
c001e16c:	eb 28                	jmp    c001e196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e16e:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e174:	83 f8 0d             	cmp    eax,0xd
c001e177:	77 0a                	ja     c001e183 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e179:	83 ec 0c             	sub    esp,0xc
c001e17c:	68 58 02 00 00       	push   0x258
c001e181:	eb 13                	jmp    c001e196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e183:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e189:	83 f8 06             	cmp    eax,0x6
c001e18c:	77 10                	ja     c001e19e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e18e:	83 ec 0c             	sub    esp,0xc
c001e191:	68 dc 05 00 00       	push   0x5dc
c001e196:	e8 69 7d ff ff       	call   c0015f04 <milliTenthSleep(unsigned int)>
c001e19b:	83 c4 10             	add    esp,0x10
c001e19e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1a2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e1a5:	75 06                	jne    c001e1ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e1a7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e1ab:	74 15                	je     c001e1c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e1ad:	83 fe 06             	cmp    esi,0x6
c001e1b0:	77 10                	ja     c001e1c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	68 c4 09 00 00       	push   0x9c4
c001e1ba:	e8 45 7d ff ff       	call   c0015f04 <milliTenthSleep(unsigned int)>
c001e1bf:	83 c4 10             	add    esp,0x10
c001e1c2:	46                   	inc    esi
c001e1c3:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e1c9:	0f 85 56 ff ff ff    	jne    c001e125 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e1cf:	83 ec 0c             	sub    esp,0xc
c001e1d2:	68 7a 2f 02 c0       	push   0xc0022f7a
c001e1d7:	e9 6b ff ff ff       	jmp    c001e147 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e1dc:	0f ba e0 1e          	bt     eax,0x1e
c001e1e0:	73 0d                	jae    c001e1ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e1e2:	83 ec 0c             	sub    esp,0xc
c001e1e5:	68 8e 2f 02 c0       	push   0xc0022f8e
c001e1ea:	e9 58 ff ff ff       	jmp    c001e147 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e1ef:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e1f4:	74 17                	je     c001e20d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e1f6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e1fb:	74 10                	je     c001e20d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e1fd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e203:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e207:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e20b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e20d:	31 c0                	xor    eax,eax
c001e20f:	83 c4 2c             	add    esp,0x2c
c001e212:	5b                   	pop    ebx
c001e213:	5e                   	pop    esi
c001e214:	5f                   	pop    edi
c001e215:	5d                   	pop    ebp
c001e216:	c3                   	ret    
c001e217:	90                   	nop

c001e218 <SATAPI::eject()>:
c001e218:	57                   	push   edi
c001e219:	b9 03 00 00 00       	mov    ecx,0x3
c001e21e:	83 ec 18             	sub    esp,0x18
c001e221:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e225:	fc                   	cld    
c001e226:	31 c0                	xor    eax,eax
c001e228:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e22a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e22f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e234:	50                   	push   eax
c001e235:	6a 00                	push   0x0
c001e237:	6a 00                	push   0x0
c001e239:	6a 00                	push   0x0
c001e23b:	6a 00                	push   0x0
c001e23d:	6a 02                	push   0x2
c001e23f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e243:	50                   	push   eax
c001e244:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e248:	e8 e5 fc ff ff       	call   c001df32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e24d:	83 c4 38             	add    esp,0x38
c001e250:	31 c0                	xor    eax,eax
c001e252:	5f                   	pop    edi
c001e253:	c3                   	ret    

c001e254 <SATAPI::detectMedia()>:
c001e254:	53                   	push   ebx
c001e255:	83 ec 14             	sub    esp,0x14
c001e258:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e25c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e262:	e8 39 02 ff ff       	call   c000e4a0 <VCache::writeWriteBuffer()>
c001e267:	59                   	pop    ecx
c001e268:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e26e:	e8 1d 02 ff ff       	call   c000e490 <VCache::invalidateReadBuffer()>
c001e273:	c7 04 24 a3 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fa3
c001e27a:	e8 8b c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e27f:	83 c4 10             	add    esp,0x10
c001e282:	31 c0                	xor    eax,eax
c001e284:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e28b:	85 d2                	test   edx,edx
c001e28d:	74 0f                	je     c001e29e <SATAPI::detectMedia()+0x4a>
c001e28f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e295:	75 07                	jne    c001e29e <SATAPI::detectMedia()+0x4a>
c001e297:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e29e:	40                   	inc    eax
c001e29f:	83 f8 1a             	cmp    eax,0x1a
c001e2a2:	75 e0                	jne    c001e284 <SATAPI::detectMedia()+0x30>
c001e2a4:	83 c4 08             	add    esp,0x8
c001e2a7:	5b                   	pop    ebx
c001e2a8:	c3                   	ret    
c001e2a9:	90                   	nop

c001e2aa <SATAPI::open(int, int, void*)>:
c001e2aa:	56                   	push   esi
c001e2ab:	53                   	push   ebx
c001e2ac:	51                   	push   ecx
c001e2ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e2b5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2bf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2c9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2d3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e2dd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e2e4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e2ea:	e8 f3 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e2ef:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e2f5:	89 c6                	mov    esi,eax
c001e2f7:	e8 e6 9a fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e2fc:	81 c6 00 10 00 00    	add    esi,0x1000
c001e302:	39 c6                	cmp    esi,eax
c001e304:	74 10                	je     c001e316 <SATAPI::open(int, int, void*)+0x6c>
c001e306:	83 ec 0c             	sub    esp,0xc
c001e309:	68 b8 2f 02 c0       	push   0xc0022fb8
c001e30e:	e8 d6 2f ff ff       	call   c00112e9 <KePanic(char const*)>
c001e313:	83 c4 10             	add    esp,0x10
c001e316:	83 ec 0c             	sub    esp,0xc
c001e319:	6a 02                	push   0x2
c001e31b:	e8 d5 b2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e320:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e326:	6a 03                	push   0x3
c001e328:	50                   	push   eax
c001e329:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e32f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e335:	e8 c4 b9 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e33a:	83 c4 14             	add    esp,0x14
c001e33d:	68 78 01 00 00       	push   0x178
c001e342:	e8 8c 97 fe ff       	call   c0007ad3 <malloc>
c001e347:	83 c4 0c             	add    esp,0xc
c001e34a:	6a 00                	push   0x0
c001e34c:	68 ff ff ff 7f       	push   0x7fffffff
c001e351:	6a 00                	push   0x0
c001e353:	6a 00                	push   0x0
c001e355:	53                   	push   ebx
c001e356:	68 ce 2f 02 c0       	push   0xc0022fce
c001e35b:	89 c6                	mov    esi,eax
c001e35d:	50                   	push   eax
c001e35e:	e8 97 f5 fe ff       	call   c000d8fa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e363:	83 c4 14             	add    esp,0x14
c001e366:	56                   	push   esi
c001e367:	e8 4e f6 fe ff       	call   c000d9ba <LogicalDisk::assignDriveLetter()>
c001e36c:	5a                   	pop    edx
c001e36d:	59                   	pop    ecx
c001e36e:	0f be c0             	movsx  eax,al
c001e371:	50                   	push   eax
c001e372:	68 20 2e 02 c0       	push   0xc0022e20
c001e377:	e8 8e c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e37c:	58                   	pop    eax
c001e37d:	5a                   	pop    edx
c001e37e:	56                   	push   esi
c001e37f:	53                   	push   ebx
c001e380:	e8 c7 e3 fe ff       	call   c000c74c <Device::addChild(Device*)>
c001e385:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e38b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e38e:	e8 ef e7 fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001e393:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e39a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e39d:	e8 b2 fe ff ff       	call   c001e254 <SATAPI::detectMedia()>
c001e3a2:	83 c4 14             	add    esp,0x14
c001e3a5:	31 c0                	xor    eax,eax
c001e3a7:	5b                   	pop    ebx
c001e3a8:	5e                   	pop    esi
c001e3a9:	c3                   	ret    

c001e3aa <SATAPI::read(unsigned long long, int, void*)>:
c001e3aa:	55                   	push   ebp
c001e3ab:	57                   	push   edi
c001e3ac:	56                   	push   esi
c001e3ad:	53                   	push   ebx
c001e3ae:	83 ec 3c             	sub    esp,0x3c
c001e3b1:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e3b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3b9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e3bd:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e3c1:	83 fd 04             	cmp    ebp,0x4
c001e3c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3cc:	7e 10                	jle    c001e3de <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e3ce:	83 ec 0c             	sub    esp,0xc
c001e3d1:	68 dc 2f 02 c0       	push   0xc0022fdc
c001e3d6:	e8 0e 2f ff ff       	call   c00112e9 <KePanic(char const*)>
c001e3db:	83 c4 10             	add    esp,0x10
c001e3de:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e3e4:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e3ea:	51                   	push   ecx
c001e3eb:	50                   	push   eax
c001e3ec:	83 c0 02             	add    eax,0x2
c001e3ef:	c1 e0 07             	shl    eax,0x7
c001e3f2:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e3f8:	50                   	push   eax
c001e3f9:	52                   	push   edx
c001e3fa:	e8 61 e1 ff ff       	call   c001c560 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e3ff:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e403:	b9 03 00 00 00       	mov    ecx,0x3
c001e408:	fc                   	cld    
c001e409:	31 c0                	xor    eax,eax
c001e40b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e40d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e412:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e417:	83 c4 0c             	add    esp,0xc
c001e41a:	6a 00                	push   0x0
c001e41c:	6a 00                	push   0x0
c001e41e:	6a 00                	push   0x0
c001e420:	6a 00                	push   0x0
c001e422:	6a 02                	push   0x2
c001e424:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e428:	50                   	push   eax
c001e429:	53                   	push   ebx
c001e42a:	e8 03 fb ff ff       	call   c001df32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e42f:	83 c4 20             	add    esp,0x20
c001e432:	85 c0                	test   eax,eax
c001e434:	89 c6                	mov    esi,eax
c001e436:	75 46                	jne    c001e47e <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e438:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e43c:	b9 03 00 00 00       	mov    ecx,0x3
c001e441:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e443:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e447:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e44c:	0f c8                	bswap  eax
c001e44e:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e452:	89 e8                	mov    eax,ebp
c001e454:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e458:	50                   	push   eax
c001e459:	55                   	push   ebp
c001e45a:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e45e:	c1 e5 0b             	shl    ebp,0xb
c001e461:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e465:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e469:	55                   	push   ebp
c001e46a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e46e:	50                   	push   eax
c001e46f:	53                   	push   ebx
c001e470:	e8 bd fa ff ff       	call   c001df32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e475:	83 c4 20             	add    esp,0x20
c001e478:	85 c0                	test   eax,eax
c001e47a:	89 c6                	mov    esi,eax
c001e47c:	74 0c                	je     c001e48a <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e47e:	83 ec 0c             	sub    esp,0xc
c001e481:	53                   	push   ebx
c001e482:	e8 cd fd ff ff       	call   c001e254 <SATAPI::detectMedia()>
c001e487:	83 c4 10             	add    esp,0x10
c001e48a:	83 c4 3c             	add    esp,0x3c
c001e48d:	89 f0                	mov    eax,esi
c001e48f:	5b                   	pop    ebx
c001e490:	5e                   	pop    esi
c001e491:	5f                   	pop    edi
c001e492:	5d                   	pop    ebp
c001e493:	c3                   	ret    

c001e494 <IOAPIC::close(int, int, void*)>:
c001e494:	b8 00 00 00 00       	mov    eax,0x0
c001e499:	c3                   	ret    

c001e49a <apicGetBase()>:
c001e49a:	55                   	push   ebp
c001e49b:	89 e5                	mov    ebp,esp
c001e49d:	83 ec 18             	sub    esp,0x18
c001e4a0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4a5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e4ab:	83 e0 08             	and    eax,0x8
c001e4ae:	0f b6 c0             	movzx  eax,al
c001e4b1:	85 c0                	test   eax,eax
c001e4b3:	75 07                	jne    c001e4bc <apicGetBase()+0x22>
c001e4b5:	b8 00 00 00 00       	mov    eax,0x0
c001e4ba:	eb 21                	jmp    c001e4dd <apicGetBase()+0x43>
c001e4bc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4c1:	83 ec 08             	sub    esp,0x8
c001e4c4:	6a 1b                	push   0x1b
c001e4c6:	50                   	push   eax
c001e4c7:	e8 16 8c fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4d2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e4d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4d8:	25 00 00 ff ff       	and    eax,0xffff0000
c001e4dd:	c9                   	leave  
c001e4de:	c3                   	ret    
c001e4df:	90                   	nop

c001e4e0 <IOAPIC::IOAPIC()>:
c001e4e0:	83 ec 0c             	sub    esp,0xc
c001e4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e7:	83 ec 08             	sub    esp,0x8
c001e4ea:	68 40 30 02 c0       	push   0xc0023040
c001e4ef:	50                   	push   eax
c001e4f0:	e8 ef e3 fe ff       	call   c000c8e4 <Device::Device(char const*)>
c001e4f5:	83 c4 10             	add    esp,0x10
c001e4f8:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001e4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e501:	89 10                	mov    DWORD PTR [eax],edx
c001e503:	90                   	nop
c001e504:	83 c4 0c             	add    esp,0xc
c001e507:	c3                   	ret    

c001e508 <apicOpen()>:
c001e508:	55                   	push   ebp
c001e509:	89 e5                	mov    ebp,esp
c001e50b:	53                   	push   ebx
c001e50c:	83 ec 34             	sub    esp,0x34
c001e50f:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e514:	83 f0 01             	xor    eax,0x1
c001e517:	0f b6 c0             	movzx  eax,al
c001e51a:	85 c0                	test   eax,eax
c001e51c:	0f 84 a3 00 00 00    	je     c001e5c5 <apicOpen()+0xbd>
c001e522:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e526:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e52b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e52f:	0f b6 c0             	movzx  eax,al
c001e532:	39 c2                	cmp    edx,eax
c001e534:	0f 83 84 00 00 00    	jae    c001e5be <apicOpen()+0xb6>
c001e53a:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e541:	83 ec 0c             	sub    esp,0xc
c001e544:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e547:	e8 87 95 fe ff       	call   c0007ad3 <malloc>
c001e54c:	83 c4 10             	add    esp,0x10
c001e54f:	89 c3                	mov    ebx,eax
c001e551:	83 ec 0c             	sub    esp,0xc
c001e554:	53                   	push   ebx
c001e555:	e8 86 ff ff ff       	call   c001e4e0 <IOAPIC::IOAPIC()>
c001e55a:	83 c4 10             	add    esp,0x10
c001e55d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e560:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e564:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e567:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e56e:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e573:	83 c0 01             	add    eax,0x1
c001e576:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e57b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e580:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e586:	83 ec 08             	sub    esp,0x8
c001e589:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e58c:	50                   	push   eax
c001e58d:	e8 ba e1 fe ff       	call   c000c74c <Device::addChild(Device*)>
c001e592:	83 c4 10             	add    esp,0x10
c001e595:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e598:	8b 00                	mov    eax,DWORD PTR [eax]
c001e59a:	83 c0 08             	add    eax,0x8
c001e59d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e59f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e5a3:	6a 00                	push   0x0
c001e5a5:	6a 00                	push   0x0
c001e5a7:	52                   	push   edx
c001e5a8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5ab:	ff d0                	call   eax
c001e5ad:	83 c4 10             	add    esp,0x10
c001e5b0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5b3:	83 c0 01             	add    eax,0x1
c001e5b6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e5b9:	e9 68 ff ff ff       	jmp    c001e526 <apicOpen()+0x1e>
c001e5be:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e5c5:	e8 d0 fe ff ff       	call   c001e49a <apicGetBase()>
c001e5ca:	05 f0 00 00 00       	add    eax,0xf0
c001e5cf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e5d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5d7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e5da:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e5e1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e5e8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e5eb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e5ee:	89 10                	mov    DWORD PTR [eax],edx
c001e5f0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e5f7:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e5fc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e5ff:	7d 7c                	jge    c001e67d <apicOpen()+0x175>
c001e601:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e604:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e60b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e60e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e611:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e618:	c1 e8 08             	shr    eax,0x8
c001e61b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e61f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e622:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e629:	c1 e8 18             	shr    eax,0x18
c001e62c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e62f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e633:	3d ff 00 00 00       	cmp    eax,0xff
c001e638:	75 3a                	jne    c001e674 <apicOpen()+0x16c>
c001e63a:	e8 5b fe ff ff       	call   c001e49a <apicGetBase()>
c001e63f:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e643:	83 fa 01             	cmp    edx,0x1
c001e646:	75 07                	jne    c001e64f <apicOpen()+0x147>
c001e648:	ba 60 03 00 00       	mov    edx,0x360
c001e64d:	eb 05                	jmp    c001e654 <apicOpen()+0x14c>
c001e64f:	ba 50 03 00 00       	mov    edx,0x350
c001e654:	01 d0                	add    eax,edx
c001e656:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e659:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e65c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e65e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e661:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e668:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e66c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e66f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e672:	89 10                	mov    DWORD PTR [eax],edx
c001e674:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e678:	e9 7a ff ff ff       	jmp    c001e5f7 <apicOpen()+0xef>
c001e67d:	90                   	nop
c001e67e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e681:	c9                   	leave  
c001e682:	c3                   	ret    
c001e683:	90                   	nop

c001e684 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e684:	55                   	push   ebp
c001e685:	89 e5                	mov    ebp,esp
c001e687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e68a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e690:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e693:	72 1d                	jb     c001e6b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e698:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e69e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6a1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e6a7:	01 d0                	add    eax,edx
c001e6a9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6ac:	73 04                	jae    c001e6b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6ae:	b0 01                	mov    al,0x1
c001e6b0:	eb 02                	jmp    c001e6b4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e6b2:	b0 00                	mov    al,0x0
c001e6b4:	5d                   	pop    ebp
c001e6b5:	c3                   	ret    

c001e6b6 <IOAPIC::read(int)>:
c001e6b6:	55                   	push   ebp
c001e6b7:	89 e5                	mov    ebp,esp
c001e6b9:	83 ec 10             	sub    esp,0x10
c001e6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6cb:	0f b6 d0             	movzx  edx,al
c001e6ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6d1:	89 10                	mov    DWORD PTR [eax],edx
c001e6d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6d6:	83 c0 10             	add    eax,0x10
c001e6d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6db:	c9                   	leave  
c001e6dc:	c3                   	ret    
c001e6dd:	90                   	nop

c001e6de <IOAPIC::open(int, int, void*)>:
c001e6de:	55                   	push   ebp
c001e6df:	89 e5                	mov    ebp,esp
c001e6e1:	57                   	push   edi
c001e6e2:	56                   	push   esi
c001e6e3:	53                   	push   ebx
c001e6e4:	83 ec 04             	sub    esp,0x4
c001e6e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e6ed:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e6f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6fc:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e706:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e70c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e70f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e715:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e71f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e728:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e72e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e731:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e737:	0f b6 f0             	movzx  esi,al
c001e73a:	89 d0                	mov    eax,edx
c001e73c:	ba 00 00 00 00       	mov    edx,0x0
c001e741:	89 c7                	mov    edi,eax
c001e743:	83 e7 ff             	and    edi,0xffffffff
c001e746:	89 f9                	mov    ecx,edi
c001e748:	0f b6 da             	movzx  ebx,dl
c001e74b:	89 c8                	mov    eax,ecx
c001e74d:	89 da                	mov    edx,ebx
c001e74f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e752:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e755:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e759:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e75d:	83 e0 00             	and    eax,0x0
c001e760:	09 d0                	or     eax,edx
c001e762:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e769:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e76f:	8d 50 01             	lea    edx,[eax+0x1]
c001e772:	88 d1                	mov    cl,dl
c001e774:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e777:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e77d:	0f b6 d0             	movzx  edx,al
c001e780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e783:	83 c2 08             	add    edx,0x8
c001e786:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e78a:	0f b6 c9             	movzx  ecx,cl
c001e78d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e793:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e797:	6a 01                	push   0x1
c001e799:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e79c:	e8 15 ff ff ff       	call   c001e6b6 <IOAPIC::read(int)>
c001e7a1:	83 c4 08             	add    esp,0x8
c001e7a4:	c1 f8 10             	sar    eax,0x10
c001e7a7:	0f b6 c0             	movzx  eax,al
c001e7aa:	8d 50 01             	lea    edx,[eax+0x1]
c001e7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7b0:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e7b6:	b8 00 00 00 00       	mov    eax,0x0
c001e7bb:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e7be:	5b                   	pop    ebx
c001e7bf:	5e                   	pop    esi
c001e7c0:	5f                   	pop    edi
c001e7c1:	5d                   	pop    ebp
c001e7c2:	c3                   	ret    
c001e7c3:	90                   	nop

c001e7c4 <IOAPIC::write(int, int)>:
c001e7c4:	55                   	push   ebp
c001e7c5:	89 e5                	mov    ebp,esp
c001e7c7:	83 ec 10             	sub    esp,0x10
c001e7ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e7d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e7d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7d9:	0f b6 d0             	movzx  edx,al
c001e7dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7df:	89 10                	mov    DWORD PTR [eax],edx
c001e7e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7e4:	8d 50 10             	lea    edx,[eax+0x10]
c001e7e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e7ea:	89 02                	mov    DWORD PTR [edx],eax
c001e7ec:	90                   	nop
c001e7ed:	c9                   	leave  
c001e7ee:	c3                   	ret    
c001e7ef:	90                   	nop

c001e7f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e7f0:	55                   	push   ebp
c001e7f1:	89 e5                	mov    ebp,esp
c001e7f3:	53                   	push   ebx
c001e7f4:	83 ec 2c             	sub    esp,0x2c
c001e7f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7fa:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e7fd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e800:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e803:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e806:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e809:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e80c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e80f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e812:	88 d8                	mov    al,bl
c001e814:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e817:	88 c8                	mov    al,cl
c001e819:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e81c:	88 d0                	mov    al,dl
c001e81e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e821:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e825:	83 c0 08             	add    eax,0x8
c001e828:	d1 e0                	shl    eax,1
c001e82a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e82d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e831:	83 c0 08             	add    eax,0x8
c001e834:	d1 e0                	shl    eax,1
c001e836:	83 c0 01             	add    eax,0x1
c001e839:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e83c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e83f:	50                   	push   eax
c001e840:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e843:	e8 6e fe ff ff       	call   c001e6b6 <IOAPIC::read(int)>
c001e848:	83 c4 08             	add    esp,0x8
c001e84b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e84e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e855:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e858:	c1 e0 18             	shl    eax,0x18
c001e85b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e85e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e861:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e864:	52                   	push   edx
c001e865:	50                   	push   eax
c001e866:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e869:	e8 56 ff ff ff       	call   c001e7c4 <IOAPIC::write(int, int)>
c001e86e:	83 c4 0c             	add    esp,0xc
c001e871:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e874:	50                   	push   eax
c001e875:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e878:	e8 39 fe ff ff       	call   c001e6b6 <IOAPIC::read(int)>
c001e87d:	83 c4 08             	add    esp,0x8
c001e880:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e883:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e88a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e891:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e898:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e89c:	85 c0                	test   eax,eax
c001e89e:	74 09                	je     c001e8a9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e8a0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e8a7:	eb 07                	jmp    c001e8b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e8a9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e8b0:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e8b4:	85 c0                	test   eax,eax
c001e8b6:	74 09                	je     c001e8c1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e8b8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e8bf:	eb 07                	jmp    c001e8c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e8c1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e8c8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e8cf:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e8d3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e8d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e8d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8dc:	52                   	push   edx
c001e8dd:	50                   	push   eax
c001e8de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8e1:	e8 de fe ff ff       	call   c001e7c4 <IOAPIC::write(int, int)>
c001e8e6:	83 c4 0c             	add    esp,0xc
c001e8e9:	90                   	nop
c001e8ea:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e8ed:	c9                   	leave  
c001e8ee:	c3                   	ret    
c001e8ef:	90                   	nop

c001e8f0 <APICTimer::close(int, int, void*)>:
c001e8f0:	b8 00 00 00 00       	mov    eax,0x0
c001e8f5:	c3                   	ret    
c001e8f6:	66 90                	xchg   ax,ax

c001e8f8 <apicTimerHandler(regs*, void*)>:
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e901:	b8 10 27 00 00       	mov    eax,0x2710
c001e906:	ba 00 00 00 00       	mov    edx,0x0
c001e90b:	f7 f1                	div    ecx
c001e90d:	83 ec 0c             	sub    esp,0xc
c001e910:	50                   	push   eax
c001e911:	e8 a2 f8 fe ff       	call   c000e1b8 <timerHandler(unsigned int)>
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	90                   	nop
c001e91a:	83 c4 0c             	add    esp,0xc
c001e91d:	c3                   	ret    
c001e91e:	66 90                	xchg   ax,ax

c001e920 <APICTimer::open(int, int, void*)>:
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e927:	8b 00                	mov    eax,DWORD PTR [eax]
c001e929:	83 c0 24             	add    eax,0x24
c001e92c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e92e:	83 ec 08             	sub    esp,0x8
c001e931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e935:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e939:	ff d0                	call   eax
c001e93b:	83 c4 10             	add    esp,0x10
c001e93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e942:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e946:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e950:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e954:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e95e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e964:	83 ec 0c             	sub    esp,0xc
c001e967:	51                   	push   ecx
c001e968:	6a 01                	push   0x1
c001e96a:	68 f8 e8 01 c0       	push   0xc001e8f8
c001e96f:	52                   	push   edx
c001e970:	50                   	push   eax
c001e971:	e8 82 dd fe ff       	call   c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e976:	83 c4 20             	add    esp,0x20
c001e979:	89 c2                	mov    edx,eax
c001e97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e985:	b8 00 00 00 00       	mov    eax,0x0
c001e98a:	83 c4 0c             	add    esp,0xc
c001e98d:	c3                   	ret    
c001e98e:	66 90                	xchg   ax,ax

c001e990 <APICTimer::write(int)>:
c001e990:	83 ec 0c             	sub    esp,0xc
c001e993:	83 ec 0c             	sub    esp,0xc
c001e996:	68 74 30 02 c0       	push   0xc0023074
c001e99b:	e8 49 29 ff ff       	call   c00112e9 <KePanic(char const*)>
c001e9a0:	83 c4 10             	add    esp,0x10
c001e9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9b1:	90                   	nop
c001e9b2:	83 c4 0c             	add    esp,0xc
c001e9b5:	c3                   	ret    
c001e9b6:	66 90                	xchg   ax,ax

c001e9b8 <APICTimer::APICTimer()>:
c001e9b8:	83 ec 0c             	sub    esp,0xc
c001e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bf:	83 ec 08             	sub    esp,0x8
c001e9c2:	68 84 30 02 c0       	push   0xc0023084
c001e9c7:	50                   	push   eax
c001e9c8:	e8 1f f7 fe ff       	call   c000e0ec <Timer::Timer(char const*)>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	ba 98 30 02 c0       	mov    edx,0xc0023098
c001e9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d9:	89 10                	mov    DWORD PTR [eax],edx
c001e9db:	90                   	nop
c001e9dc:	83 c4 0c             	add    esp,0xc
c001e9df:	c3                   	ret    

c001e9e0 <PIT::write(int)>:
c001e9e0:	83 ec 10             	sub    esp,0x10
c001e9e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e9eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e9f5:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e9fa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e9ff:	89 c2                	mov    edx,eax
c001ea01:	c1 fa 1f             	sar    edx,0x1f
c001ea04:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ea08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea0c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ea13:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ea18:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ea1c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ea21:	ee                   	out    dx,al
c001ea22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea26:	0f b6 c0             	movzx  eax,al
c001ea29:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ea30:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ea34:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ea38:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ea3d:	ee                   	out    dx,al
c001ea3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea42:	c1 f8 08             	sar    eax,0x8
c001ea45:	0f b6 c0             	movzx  eax,al
c001ea48:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ea4f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea53:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea57:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ea5c:	ee                   	out    dx,al
c001ea5d:	90                   	nop
c001ea5e:	83 c4 10             	add    esp,0x10
c001ea61:	c3                   	ret    
c001ea62:	66 90                	xchg   ax,ax

c001ea64 <pitHandler(regs*, void*)>:
c001ea64:	83 ec 0c             	sub    esp,0xc
c001ea67:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ea6d:	b8 10 27 00 00       	mov    eax,0x2710
c001ea72:	89 c2                	mov    edx,eax
c001ea74:	c1 fa 1f             	sar    edx,0x1f
c001ea77:	f7 f9                	idiv   ecx
c001ea79:	83 ec 0c             	sub    esp,0xc
c001ea7c:	50                   	push   eax
c001ea7d:	e8 36 f7 fe ff       	call   c000e1b8 <timerHandler(unsigned int)>
c001ea82:	83 c4 10             	add    esp,0x10
c001ea85:	90                   	nop
c001ea86:	83 c4 0c             	add    esp,0xc
c001ea89:	c3                   	ret    
c001ea8a:	66 90                	xchg   ax,ax

c001ea8c <PIT::open(int, int, void*)>:
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea93:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea95:	83 c0 24             	add    eax,0x24
c001ea98:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea9a:	83 ec 08             	sub    esp,0x8
c001ea9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaa5:	ff d0                	call   eax
c001eaa7:	83 c4 10             	add    esp,0x10
c001eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaae:	83 ec 0c             	sub    esp,0xc
c001eab1:	6a 00                	push   0x0
c001eab3:	6a 01                	push   0x1
c001eab5:	68 64 ea 01 c0       	push   0xc001ea64
c001eaba:	6a 00                	push   0x0
c001eabc:	50                   	push   eax
c001eabd:	e8 36 dc fe ff       	call   c000c6f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eac2:	83 c4 20             	add    esp,0x20
c001eac5:	89 c2                	mov    edx,eax
c001eac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ead1:	b8 00 00 00 00       	mov    eax,0x0
c001ead6:	83 c4 0c             	add    esp,0xc
c001ead9:	c3                   	ret    
c001eada:	66 90                	xchg   ax,ax

c001eadc <PIT::close(int, int, void*)>:
c001eadc:	83 ec 0c             	sub    esp,0xc
c001eadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eaed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf1:	6a 01                	push   0x1
c001eaf3:	68 64 ea 01 c0       	push   0xc001ea64
c001eaf8:	6a 00                	push   0x0
c001eafa:	50                   	push   eax
c001eafb:	e8 2e dc fe ff       	call   c000c72e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eb00:	83 c4 10             	add    esp,0x10
c001eb03:	b8 00 00 00 00       	mov    eax,0x0
c001eb08:	83 c4 0c             	add    esp,0xc
c001eb0b:	c3                   	ret    

c001eb0c <PIT::PIT()>:
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb13:	83 ec 08             	sub    esp,0x8
c001eb16:	68 c0 30 02 c0       	push   0xc00230c0
c001eb1b:	50                   	push   eax
c001eb1c:	e8 cb f5 fe ff       	call   c000e0ec <Timer::Timer(char const*)>
c001eb21:	83 c4 10             	add    esp,0x10
c001eb24:	ba e8 30 02 c0       	mov    edx,0xc00230e8
c001eb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2d:	89 10                	mov    DWORD PTR [eax],edx
c001eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb39:	0f b6 d0             	movzx  edx,al
c001eb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb40:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb51:	0f b6 d0             	movzx  edx,al
c001eb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb58:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb67:	8d 50 01             	lea    edx,[eax+0x1]
c001eb6a:	88 d1                	mov    cl,dl
c001eb6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb70:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eb76:	0f b6 d0             	movzx  edx,al
c001eb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eb81:	83 e1 3f             	and    ecx,0x3f
c001eb84:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eb88:	90                   	nop
c001eb89:	83 c4 0c             	add    esp,0xc
c001eb8c:	c3                   	ret    
c001eb8d:	66 90                	xchg   ax,ax
c001eb8f:	90                   	nop

c001eb90 <avxDetect>:
c001eb90:	b8 01 00 00 00       	mov    eax,0x1
c001eb95:	0f a2                	cpuid  
c001eb97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001eb9d:	74 15                	je     c001ebb4 <avxDetect.noAVX>
c001eb9f:	b8 01 00 00 00       	mov    eax,0x1
c001eba4:	0f a2                	cpuid  
c001eba6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ebac:	74 06                	je     c001ebb4 <avxDetect.noAVX>
c001ebae:	b8 01 00 00 00       	mov    eax,0x1
c001ebb3:	c3                   	ret    

c001ebb4 <avxDetect.noAVX>:
c001ebb4:	b8 00 00 00 00       	mov    eax,0x0
c001ebb9:	c3                   	ret    

c001ebba <avxSave>:
c001ebba:	53                   	push   ebx
c001ebbb:	52                   	push   edx
c001ebbc:	31 c0                	xor    eax,eax
c001ebbe:	48                   	dec    eax
c001ebbf:	89 c2                	mov    edx,eax
c001ebc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebc5:	0f ae 23             	xsave  [ebx]
c001ebc8:	5a                   	pop    edx
c001ebc9:	5b                   	pop    ebx
c001ebca:	c3                   	ret    

c001ebcb <avxLoad>:
c001ebcb:	53                   	push   ebx
c001ebcc:	52                   	push   edx
c001ebcd:	31 c0                	xor    eax,eax
c001ebcf:	48                   	dec    eax
c001ebd0:	89 c2                	mov    edx,eax
c001ebd2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebd6:	0f ae 2b             	xrstor [ebx]
c001ebd9:	5a                   	pop    edx
c001ebda:	5b                   	pop    ebx
c001ebdb:	c3                   	ret    

c001ebdc <avxInit>:
c001ebdc:	e8 67 03 00 00       	call   c001ef48 <sseInit>
c001ebe1:	50                   	push   eax
c001ebe2:	51                   	push   ecx
c001ebe3:	0f 20 e0             	mov    eax,cr4
c001ebe6:	0d 00 00 04 00       	or     eax,0x40000
c001ebeb:	0f 22 e0             	mov    cr4,eax
c001ebee:	31 c9                	xor    ecx,ecx
c001ebf0:	0f 01 d0             	xgetbv 
c001ebf3:	0d 07 00 00 00       	or     eax,0x7
c001ebf8:	0f 01 d1             	xsetbv 
c001ebfb:	59                   	pop    ecx
c001ebfc:	58                   	pop    eax
c001ebfd:	c3                   	ret    

c001ebfe <avxClose>:
c001ebfe:	c3                   	ret    

c001ebff <wouldSheSayYes>:
c001ebff:	c3                   	ret    
c001ec00:	49                   	dec    ecx
c001ec01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ec05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ec09:	75 20                	jne    c001ec2b <isr0+0xb>
c001ec0b:	4e                   	dec    esi
c001ec0c:	79 61                	jns    c001ec6f <isr7+0x3>
c001ec0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ec13:	66 90                	xchg   ax,ax
c001ec15:	66 90                	xchg   ax,ax
c001ec17:	66 90                	xchg   ax,ax
c001ec19:	66 90                	xchg   ax,ax
c001ec1b:	66 90                	xchg   ax,ax
c001ec1d:	66 90                	xchg   ax,ax
c001ec1f:	90                   	nop

c001ec20 <isr0>:
c001ec20:	fa                   	cli    
c001ec21:	68 00 00 00 00       	push   0x0
c001ec26:	68 00 00 00 00       	push   0x0
c001ec2b:	e9 56 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec30 <isr1>:
c001ec30:	fa                   	cli    
c001ec31:	6a 00                	push   0x0
c001ec33:	6a 01                	push   0x1
c001ec35:	e9 4c 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec3a <isr2>:
c001ec3a:	fa                   	cli    
c001ec3b:	6a 00                	push   0x0
c001ec3d:	6a 02                	push   0x2
c001ec3f:	e9 42 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec44 <isr3>:
c001ec44:	fa                   	cli    
c001ec45:	6a 00                	push   0x0
c001ec47:	6a 03                	push   0x3
c001ec49:	e9 38 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec4e <isr4>:
c001ec4e:	fa                   	cli    
c001ec4f:	6a 00                	push   0x0
c001ec51:	6a 04                	push   0x4
c001ec53:	e9 2e 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec58 <isr5>:
c001ec58:	fa                   	cli    
c001ec59:	6a 00                	push   0x0
c001ec5b:	6a 05                	push   0x5
c001ec5d:	e9 24 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec62 <isr6>:
c001ec62:	fa                   	cli    
c001ec63:	6a 00                	push   0x0
c001ec65:	6a 06                	push   0x6
c001ec67:	e9 1a 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec6c <isr7>:
c001ec6c:	fa                   	cli    
c001ec6d:	6a 00                	push   0x0
c001ec6f:	6a 07                	push   0x7
c001ec71:	e9 10 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec76 <isr8>:
c001ec76:	fa                   	cli    
c001ec77:	6a 08                	push   0x8
c001ec79:	e9 08 01 00 00       	jmp    c001ed86 <int_common_stub>

c001ec7e <isr9>:
c001ec7e:	fa                   	cli    
c001ec7f:	6a 00                	push   0x0
c001ec81:	6a 09                	push   0x9
c001ec83:	e9 fe 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ec88 <isr10>:
c001ec88:	fa                   	cli    
c001ec89:	6a 0a                	push   0xa
c001ec8b:	e9 f6 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ec90 <isr11>:
c001ec90:	fa                   	cli    
c001ec91:	6a 0b                	push   0xb
c001ec93:	e9 ee 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ec98 <isr12>:
c001ec98:	fa                   	cli    
c001ec99:	6a 0c                	push   0xc
c001ec9b:	e9 e6 00 00 00       	jmp    c001ed86 <int_common_stub>

c001eca0 <isr13>:
c001eca0:	fa                   	cli    
c001eca1:	6a 0d                	push   0xd
c001eca3:	53                   	push   ebx
c001eca4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eca8:	81 fb 76 ee 01 c0    	cmp    ebx,0xc001ee76
c001ecae:	5b                   	pop    ebx
c001ecaf:	0f 84 c3 01 00 00    	je     c001ee78 <finishSignal2>
c001ecb5:	e9 cc 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecba <isr14>:
c001ecba:	fa                   	cli    
c001ecbb:	6a 0e                	push   0xe
c001ecbd:	e9 c4 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecc2 <isr15>:
c001ecc2:	fa                   	cli    
c001ecc3:	6a 00                	push   0x0
c001ecc5:	6a 0f                	push   0xf
c001ecc7:	e9 ba 00 00 00       	jmp    c001ed86 <int_common_stub>

c001eccc <isr16>:
c001eccc:	fa                   	cli    
c001eccd:	6a 00                	push   0x0
c001eccf:	6a 10                	push   0x10
c001ecd1:	e9 b0 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecd6 <isr17>:
c001ecd6:	fa                   	cli    
c001ecd7:	6a 00                	push   0x0
c001ecd9:	6a 11                	push   0x11
c001ecdb:	e9 a6 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ece0 <isr18>:
c001ece0:	fa                   	cli    
c001ece1:	6a 00                	push   0x0
c001ece3:	6a 12                	push   0x12
c001ece5:	e9 9c 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecea <irq3>:
c001ecea:	fa                   	cli    
c001eceb:	6a 00                	push   0x0
c001eced:	6a 23                	push   0x23
c001ecef:	e9 92 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecf4 <irq4>:
c001ecf4:	fa                   	cli    
c001ecf5:	6a 00                	push   0x0
c001ecf7:	6a 24                	push   0x24
c001ecf9:	e9 88 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ecfe <irq5>:
c001ecfe:	fa                   	cli    
c001ecff:	6a 00                	push   0x0
c001ed01:	6a 25                	push   0x25
c001ed03:	e9 7e 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed08 <irq6>:
c001ed08:	fa                   	cli    
c001ed09:	6a 00                	push   0x0
c001ed0b:	6a 26                	push   0x26
c001ed0d:	e9 74 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed12 <irq7>:
c001ed12:	fa                   	cli    
c001ed13:	6a 00                	push   0x0
c001ed15:	6a 27                	push   0x27
c001ed17:	e9 6a 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed1c <irq8>:
c001ed1c:	fa                   	cli    
c001ed1d:	6a 00                	push   0x0
c001ed1f:	6a 28                	push   0x28
c001ed21:	e9 60 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed26 <irq9>:
c001ed26:	fa                   	cli    
c001ed27:	6a 00                	push   0x0
c001ed29:	6a 29                	push   0x29
c001ed2b:	e9 56 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed30 <irq10>:
c001ed30:	fa                   	cli    
c001ed31:	6a 00                	push   0x0
c001ed33:	6a 2a                	push   0x2a
c001ed35:	e9 4c 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed3a <irq11>:
c001ed3a:	fa                   	cli    
c001ed3b:	6a 00                	push   0x0
c001ed3d:	6a 2b                	push   0x2b
c001ed3f:	e9 42 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed44 <irq12>:
c001ed44:	fa                   	cli    
c001ed45:	6a 00                	push   0x0
c001ed47:	6a 2c                	push   0x2c
c001ed49:	e9 38 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed4e <irq13>:
c001ed4e:	fa                   	cli    
c001ed4f:	6a 00                	push   0x0
c001ed51:	6a 2d                	push   0x2d
c001ed53:	e9 2e 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed58 <irq14>:
c001ed58:	fa                   	cli    
c001ed59:	6a 00                	push   0x0
c001ed5b:	6a 2e                	push   0x2e
c001ed5d:	e9 24 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed62 <irq15>:
c001ed62:	fa                   	cli    
c001ed63:	6a 00                	push   0x0
c001ed65:	6a 2f                	push   0x2f
c001ed67:	e9 1a 00 00 00       	jmp    c001ed86 <int_common_stub>

c001ed6c <irq1>:
c001ed6c:	fa                   	cli    
c001ed6d:	6a 00                	push   0x0
c001ed6f:	6a 21                	push   0x21
c001ed71:	eb 13                	jmp    c001ed86 <int_common_stub>

c001ed73 <irq2>:
c001ed73:	fa                   	cli    
c001ed74:	6a 00                	push   0x0
c001ed76:	6a 22                	push   0x22
c001ed78:	eb 0c                	jmp    c001ed86 <int_common_stub>

c001ed7a <isr96>:
c001ed7a:	6a 00                	push   0x0
c001ed7c:	6a 60                	push   0x60
c001ed7e:	fb                   	sti    
c001ed7f:	eb 37                	jmp    c001edb8 <syscall_common_stub>

c001ed81 <irq0>:
c001ed81:	fa                   	cli    
c001ed82:	6a 00                	push   0x0
c001ed84:	6a 20                	push   0x20

c001ed86 <int_common_stub>:
c001ed86:	60                   	pusha  
c001ed87:	1e                   	push   ds
c001ed88:	06                   	push   es
c001ed89:	0f a0                	push   fs
c001ed8b:	0f a8                	push   gs
c001ed8d:	66 b8 10 00          	mov    ax,0x10
c001ed91:	66 8e d8             	mov    ds,ax
c001ed94:	66 8e c0             	mov    es,ax
c001ed97:	66 8e e0             	mov    fs,ax
c001ed9a:	66 8e e8             	mov    gs,ax
c001ed9d:	54                   	push   esp
c001ed9e:	fc                   	cld    
c001ed9f:	e8 54 de fe ff       	call   c000cbf8 <int_handler>
c001eda4:	81 c4 04 00 00 00    	add    esp,0x4
c001edaa:	0f a9                	pop    gs
c001edac:	0f a1                	pop    fs
c001edae:	07                   	pop    es
c001edaf:	1f                   	pop    ds
c001edb0:	61                   	popa   
c001edb1:	81 c4 08 00 00 00    	add    esp,0x8
c001edb7:	cf                   	iret   

c001edb8 <syscall_common_stub>:
c001edb8:	60                   	pusha  
c001edb9:	1e                   	push   ds
c001edba:	06                   	push   es
c001edbb:	0f a0                	push   fs
c001edbd:	0f a8                	push   gs
c001edbf:	66 b8 10 00          	mov    ax,0x10
c001edc3:	66 8e d8             	mov    ds,ax
c001edc6:	66 8e c0             	mov    es,ax
c001edc9:	66 8e e0             	mov    fs,ax
c001edcc:	66 8e e8             	mov    gs,ax
c001edcf:	54                   	push   esp
c001edd0:	fc                   	cld    
c001edd1:	e8 22 de fe ff       	call   c000cbf8 <int_handler>
c001edd6:	81 c4 04 00 00 00    	add    esp,0x4
c001eddc:	0f a9                	pop    gs
c001edde:	0f a1                	pop    fs
c001ede0:	07                   	pop    es
c001ede1:	1f                   	pop    ds
c001ede2:	e8 14 2b ff ff       	call   c00118fb <KiCheckSignalZ>
c001ede7:	3d 00 00 00 00       	cmp    eax,0x0
c001edec:	0f 84 c0 00 00 00    	je     c001eeb2 <skipSignals>
c001edf2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001edf7:	61                   	popa   
c001edf8:	53                   	push   ebx
c001edf9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001edff:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ee02:	5b                   	pop    ebx
c001ee03:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ee08:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ee0b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ee0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ee11:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ee14:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ee17:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ee1a:	81 c4 08 00 00 00    	add    esp,0x8
c001ee20:	5e                   	pop    esi
c001ee21:	5b                   	pop    ebx
c001ee22:	59                   	pop    ecx
c001ee23:	5a                   	pop    edx
c001ee24:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ee27:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ee2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ee2d:	52                   	push   edx
c001ee2e:	51                   	push   ecx
c001ee2f:	53                   	push   ebx
c001ee30:	56                   	push   esi
c001ee31:	81 ec 08 00 00 00    	sub    esp,0x8
c001ee37:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ee3a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ee3d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ee40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ee43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ee46:	60                   	pusha  
c001ee47:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ee4d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ee50:	89 e3                	mov    ebx,esp
c001ee52:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ee55:	52                   	push   edx
c001ee56:	68 76 ee 01 c0       	push   0xc001ee76
c001ee5b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ee5e:	89 dc                	mov    esp,ebx
c001ee60:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ee63:	68 23 00 00 00       	push   0x23
c001ee68:	51                   	push   ecx
c001ee69:	68 02 02 00 00       	push   0x202
c001ee6e:	68 1b 00 00 00       	push   0x1b
c001ee73:	ff 36                	push   DWORD PTR [esi]
c001ee75:	cf                   	iret   

c001ee76 <finishSignal>:
c001ee76:	cd 0f                	int    0xf

c001ee78 <finishSignal2>:
c001ee78:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ee7e:	e8 f5 2a ff ff       	call   c0011978 <KiFinishSignalZ>
c001ee83:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ee89:	68 23 00 00 00       	push   0x23
c001ee8e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ee91:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ee94:	68 1b 00 00 00       	push   0x1b
c001ee99:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ee9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ee9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eea2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eea5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eea8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001eeab:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001eeae:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001eeb1:	cf                   	iret   

c001eeb2 <skipSignals>:
c001eeb2:	61                   	popa   
c001eeb3:	81 c4 08 00 00 00    	add    esp,0x8
c001eeb9:	cf                   	iret   
c001eeba:	90                   	nop
c001eebb:	90                   	nop

c001eebc <irq16>:
c001eebc:	fa                   	cli    
c001eebd:	6a 00                	push   0x0
c001eebf:	6a 30                	push   0x30
c001eec1:	e9 c0 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eec6 <irq17>:
c001eec6:	fa                   	cli    
c001eec7:	6a 00                	push   0x0
c001eec9:	6a 31                	push   0x31
c001eecb:	e9 b6 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eed0 <irq18>:
c001eed0:	fa                   	cli    
c001eed1:	6a 00                	push   0x0
c001eed3:	6a 32                	push   0x32
c001eed5:	e9 ac fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eeda <irq19>:
c001eeda:	fa                   	cli    
c001eedb:	6a 00                	push   0x0
c001eedd:	6a 33                	push   0x33
c001eedf:	e9 a2 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eee4 <irq20>:
c001eee4:	fa                   	cli    
c001eee5:	6a 00                	push   0x0
c001eee7:	6a 34                	push   0x34
c001eee9:	e9 98 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eeee <irq21>:
c001eeee:	fa                   	cli    
c001eeef:	6a 00                	push   0x0
c001eef1:	6a 35                	push   0x35
c001eef3:	e9 8e fe ff ff       	jmp    c001ed86 <int_common_stub>

c001eef8 <irq22>:
c001eef8:	fa                   	cli    
c001eef9:	6a 00                	push   0x0
c001eefb:	6a 36                	push   0x36
c001eefd:	e9 84 fe ff ff       	jmp    c001ed86 <int_common_stub>

c001ef02 <irq23>:
c001ef02:	fa                   	cli    
c001ef03:	6a 00                	push   0x0
c001ef05:	6a 37                	push   0x37
c001ef07:	e9 7a fe ff ff       	jmp    c001ed86 <int_common_stub>
c001ef0c:	66 90                	xchg   ax,ax
c001ef0e:	66 90                	xchg   ax,ax

c001ef10 <i386GetRDRAND>:
c001ef10:	b9 64 00 00 00       	mov    ecx,0x64

c001ef15 <retry>:
c001ef15:	0f c7 f0             	rdrand eax
c001ef18:	72 05                	jb     c001ef1f <retry.done>
c001ef1a:	e2 f9                	loop   c001ef15 <retry>

c001ef1c <retry.fail>:
c001ef1c:	31 c0                	xor    eax,eax
c001ef1e:	c3                   	ret    

c001ef1f <retry.done>:
c001ef1f:	c3                   	ret    

c001ef20 <absolutelyNoChanceInHell>:
c001ef20:	b8 01 00 00 00       	mov    eax,0x1
c001ef25:	0f a2                	cpuid  
c001ef27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef2d:	74 06                	je     c001ef35 <sseDetect.noSSE>
c001ef2f:	b8 01 00 00 00       	mov    eax,0x1
c001ef34:	c3                   	ret    

c001ef35 <sseDetect.noSSE>:
c001ef35:	31 c0                	xor    eax,eax
c001ef37:	c3                   	ret    

c001ef38 <sseSave>:
c001ef38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef3c:	0f ae 00             	fxsave [eax]
c001ef3f:	c3                   	ret    

c001ef40 <sseLoad>:
c001ef40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef44:	0f ae 08             	fxrstor [eax]
c001ef47:	c3                   	ret    

c001ef48 <sseInit>:
c001ef48:	e8 42 00 00 00       	call   c001ef8f <x87Init>
c001ef4d:	0f 20 e0             	mov    eax,cr4
c001ef50:	66 0d 00 06          	or     ax,0x600
c001ef54:	0f 22 e0             	mov    cr4,eax
c001ef57:	c3                   	ret    

c001ef58 <sseClose>:
c001ef58:	c3                   	ret    
c001ef59:	66 90                	xchg   ax,ax
c001ef5b:	66 90                	xchg   ax,ax
c001ef5d:	66 90                	xchg   ax,ax
c001ef5f:	90                   	nop

c001ef60 <value_37F>:
c001ef60:	7f 03                	jg     c001ef65 <value_37A+0x1>

c001ef62 <value_37E>:
c001ef62:	7e 03                	jle    c001ef67 <x87Detect+0x1>

c001ef64 <value_37A>:
c001ef64:	7a 03                	jp     c001ef69 <x87Detect+0x3>

c001ef66 <x87Detect>:
c001ef66:	b8 01 00 00 00       	mov    eax,0x1
c001ef6b:	0f a2                	cpuid  
c001ef6d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ef73:	74 06                	je     c001ef7b <x87Detect.nox87>
c001ef75:	b8 01 00 00 00       	mov    eax,0x1
c001ef7a:	c3                   	ret    

c001ef7b <x87Detect.nox87>:
c001ef7b:	b8 00 00 00 00       	mov    eax,0x0
c001ef80:	c3                   	ret    

c001ef81 <x87Save>:
c001ef81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef85:	dd 30                	fnsave [eax]
c001ef87:	c3                   	ret    

c001ef88 <x87Load>:
c001ef88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8c:	dd 20                	frstor [eax]
c001ef8e:	c3                   	ret    

c001ef8f <x87Init>:
c001ef8f:	0f 20 c0             	mov    eax,cr0
c001ef92:	66 25 fb ff          	and    ax,0xfffb
c001ef96:	66 0d 22 00          	or     ax,0x22
c001ef9a:	0f 22 c0             	mov    cr0,eax
c001ef9d:	db e3                	fninit 
c001ef9f:	0f 06                	clts   
c001efa1:	d9 2d 64 ef 01 c0    	fldcw  WORD PTR ds:0xc001ef64
c001efa7:	c3                   	ret    

c001efa8 <x87Close>:
c001efa8:	c3                   	ret    
c001efa9:	66 90                	xchg   ax,ax
c001efab:	90                   	nop

c001efac <__do_global_ctors_aux>:
c001efac:	a1 60 ff 01 c0       	mov    eax,ds:0xc001ff60
c001efb1:	83 f8 ff             	cmp    eax,0xffffffff
c001efb4:	74 1a                	je     c001efd0 <__do_global_ctors_aux+0x24>
c001efb6:	55                   	push   ebp
c001efb7:	89 e5                	mov    ebp,esp
c001efb9:	53                   	push   ebx
c001efba:	52                   	push   edx
c001efbb:	bb 60 ff 01 c0       	mov    ebx,0xc001ff60
c001efc0:	ff d0                	call   eax
c001efc2:	83 eb 04             	sub    ebx,0x4
c001efc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001efc7:	83 f8 ff             	cmp    eax,0xffffffff
c001efca:	75 f4                	jne    c001efc0 <__do_global_ctors_aux+0x14>
c001efcc:	58                   	pop    eax
c001efcd:	5b                   	pop    ebx
c001efce:	5d                   	pop    ebp
c001efcf:	c3                   	ret    
c001efd0:	c3                   	ret    
c001efd1:	66 90                	xchg   ax,ax
c001efd3:	90                   	nop

c001efd4 <__divdi3>:
c001efd4:	55                   	push   ebp
c001efd5:	57                   	push   edi
c001efd6:	56                   	push   esi
c001efd7:	53                   	push   ebx
c001efd8:	83 ec 1c             	sub    esp,0x1c
c001efdb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001efdf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efe3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001efe6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001efea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001efee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eff2:	85 db                	test   ebx,ebx
c001eff4:	0f 88 8e 00 00 00    	js     c001f088 <__divdi3+0xb4>
c001effa:	89 dd                	mov    ebp,ebx
c001effc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f004:	89 d3                	mov    ebx,edx
c001f006:	85 d2                	test   edx,edx
c001f008:	79 0d                	jns    c001f017 <__divdi3+0x43>
c001f00a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f00e:	f7 d8                	neg    eax
c001f010:	83 d2 00             	adc    edx,0x0
c001f013:	f7 da                	neg    edx
c001f015:	89 d3                	mov    ebx,edx
c001f017:	89 c7                	mov    edi,eax
c001f019:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f01c:	85 db                	test   ebx,ebx
c001f01e:	75 48                	jne    c001f068 <__divdi3+0x94>
c001f020:	39 ef                	cmp    edi,ebp
c001f022:	76 24                	jbe    c001f048 <__divdi3+0x74>
c001f024:	89 ea                	mov    edx,ebp
c001f026:	f7 f7                	div    edi
c001f028:	89 c1                	mov    ecx,eax
c001f02a:	31 f6                	xor    esi,esi
c001f02c:	89 c8                	mov    eax,ecx
c001f02e:	89 f2                	mov    edx,esi
c001f030:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f034:	85 c9                	test   ecx,ecx
c001f036:	74 07                	je     c001f03f <__divdi3+0x6b>
c001f038:	f7 d8                	neg    eax
c001f03a:	83 d2 00             	adc    edx,0x0
c001f03d:	f7 da                	neg    edx
c001f03f:	83 c4 1c             	add    esp,0x1c
c001f042:	5b                   	pop    ebx
c001f043:	5e                   	pop    esi
c001f044:	5f                   	pop    edi
c001f045:	5d                   	pop    ebp
c001f046:	c3                   	ret    
c001f047:	90                   	nop
c001f048:	85 ff                	test   edi,edi
c001f04a:	75 0b                	jne    c001f057 <__divdi3+0x83>
c001f04c:	b8 01 00 00 00       	mov    eax,0x1
c001f051:	31 d2                	xor    edx,edx
c001f053:	f7 f3                	div    ebx
c001f055:	89 c7                	mov    edi,eax
c001f057:	31 d2                	xor    edx,edx
c001f059:	89 e8                	mov    eax,ebp
c001f05b:	f7 f7                	div    edi
c001f05d:	89 c6                	mov    esi,eax
c001f05f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f062:	f7 f7                	div    edi
c001f064:	89 c1                	mov    ecx,eax
c001f066:	eb c4                	jmp    c001f02c <__divdi3+0x58>
c001f068:	39 eb                	cmp    ebx,ebp
c001f06a:	77 3c                	ja     c001f0a8 <__divdi3+0xd4>
c001f06c:	0f bd f3             	bsr    esi,ebx
c001f06f:	83 f6 1f             	xor    esi,0x1f
c001f072:	75 40                	jne    c001f0b4 <__divdi3+0xe0>
c001f074:	39 eb                	cmp    ebx,ebp
c001f076:	72 09                	jb     c001f081 <__divdi3+0xad>
c001f078:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f07b:	0f 87 97 00 00 00    	ja     c001f118 <__divdi3+0x144>
c001f081:	b9 01 00 00 00       	mov    ecx,0x1
c001f086:	eb a4                	jmp    c001f02c <__divdi3+0x58>
c001f088:	f7 d9                	neg    ecx
c001f08a:	83 d3 00             	adc    ebx,0x0
c001f08d:	f7 db                	neg    ebx
c001f08f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f092:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f096:	89 dd                	mov    ebp,ebx
c001f098:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f0a0:	e9 5f ff ff ff       	jmp    c001f004 <__divdi3+0x30>
c001f0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0a8:	31 f6                	xor    esi,esi
c001f0aa:	31 c9                	xor    ecx,ecx
c001f0ac:	e9 7b ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0b4:	b8 20 00 00 00       	mov    eax,0x20
c001f0b9:	29 f0                	sub    eax,esi
c001f0bb:	89 f1                	mov    ecx,esi
c001f0bd:	d3 e3                	shl    ebx,cl
c001f0bf:	89 fa                	mov    edx,edi
c001f0c1:	88 c1                	mov    cl,al
c001f0c3:	d3 ea                	shr    edx,cl
c001f0c5:	09 da                	or     edx,ebx
c001f0c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0cb:	89 f1                	mov    ecx,esi
c001f0cd:	d3 e7                	shl    edi,cl
c001f0cf:	89 eb                	mov    ebx,ebp
c001f0d1:	88 c1                	mov    cl,al
c001f0d3:	d3 eb                	shr    ebx,cl
c001f0d5:	89 f1                	mov    ecx,esi
c001f0d7:	d3 e5                	shl    ebp,cl
c001f0d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f0dc:	88 c1                	mov    cl,al
c001f0de:	d3 ea                	shr    edx,cl
c001f0e0:	09 d5                	or     ebp,edx
c001f0e2:	89 e8                	mov    eax,ebp
c001f0e4:	89 da                	mov    edx,ebx
c001f0e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f0ea:	89 d3                	mov    ebx,edx
c001f0ec:	89 c5                	mov    ebp,eax
c001f0ee:	f7 e7                	mul    edi
c001f0f0:	39 d3                	cmp    ebx,edx
c001f0f2:	72 18                	jb     c001f10c <__divdi3+0x138>
c001f0f4:	74 0a                	je     c001f100 <__divdi3+0x12c>
c001f0f6:	89 e9                	mov    ecx,ebp
c001f0f8:	31 f6                	xor    esi,esi
c001f0fa:	e9 2d ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f0ff:	90                   	nop
c001f100:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f103:	89 f1                	mov    ecx,esi
c001f105:	d3 e7                	shl    edi,cl
c001f107:	39 c7                	cmp    edi,eax
c001f109:	73 eb                	jae    c001f0f6 <__divdi3+0x122>
c001f10b:	90                   	nop
c001f10c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f10f:	31 f6                	xor    esi,esi
c001f111:	e9 16 ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f116:	66 90                	xchg   ax,ax
c001f118:	31 c9                	xor    ecx,ecx
c001f11a:	e9 0d ff ff ff       	jmp    c001f02c <__divdi3+0x58>
c001f11f:	90                   	nop

c001f120 <__moddi3>:
c001f120:	55                   	push   ebp
c001f121:	57                   	push   edi
c001f122:	56                   	push   esi
c001f123:	53                   	push   ebx
c001f124:	83 ec 2c             	sub    esp,0x2c
c001f127:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f12b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f12f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f133:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f137:	85 db                	test   ebx,ebx
c001f139:	0f 88 85 00 00 00    	js     c001f1c4 <__moddi3+0xa4>
c001f13f:	89 de                	mov    esi,ebx
c001f141:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f149:	89 d7                	mov    edi,edx
c001f14b:	85 d2                	test   edx,edx
c001f14d:	79 09                	jns    c001f158 <__moddi3+0x38>
c001f14f:	f7 d8                	neg    eax
c001f151:	83 d2 00             	adc    edx,0x0
c001f154:	f7 da                	neg    edx
c001f156:	89 d7                	mov    edi,edx
c001f158:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f15c:	89 cd                	mov    ebp,ecx
c001f15e:	85 ff                	test   edi,edi
c001f160:	75 52                	jne    c001f1b4 <__moddi3+0x94>
c001f162:	89 c3                	mov    ebx,eax
c001f164:	39 f0                	cmp    eax,esi
c001f166:	76 24                	jbe    c001f18c <__moddi3+0x6c>
c001f168:	89 c8                	mov    eax,ecx
c001f16a:	89 f2                	mov    edx,esi
c001f16c:	f7 f3                	div    ebx
c001f16e:	89 d6                	mov    esi,edx
c001f170:	89 f0                	mov    eax,esi
c001f172:	31 d2                	xor    edx,edx
c001f174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f178:	85 c9                	test   ecx,ecx
c001f17a:	74 07                	je     c001f183 <__moddi3+0x63>
c001f17c:	f7 d8                	neg    eax
c001f17e:	83 d2 00             	adc    edx,0x0
c001f181:	f7 da                	neg    edx
c001f183:	83 c4 2c             	add    esp,0x2c
c001f186:	5b                   	pop    ebx
c001f187:	5e                   	pop    esi
c001f188:	5f                   	pop    edi
c001f189:	5d                   	pop    ebp
c001f18a:	c3                   	ret    
c001f18b:	90                   	nop
c001f18c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f190:	85 db                	test   ebx,ebx
c001f192:	75 0d                	jne    c001f1a1 <__moddi3+0x81>
c001f194:	b8 01 00 00 00       	mov    eax,0x1
c001f199:	31 d2                	xor    edx,edx
c001f19b:	f7 f7                	div    edi
c001f19d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1a1:	89 f0                	mov    eax,esi
c001f1a3:	31 d2                	xor    edx,edx
c001f1a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1a9:	f7 f7                	div    edi
c001f1ab:	89 e8                	mov    eax,ebp
c001f1ad:	f7 f7                	div    edi
c001f1af:	89 d6                	mov    esi,edx
c001f1b1:	eb bd                	jmp    c001f170 <__moddi3+0x50>
c001f1b3:	90                   	nop
c001f1b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1b8:	39 f7                	cmp    edi,esi
c001f1ba:	76 20                	jbe    c001f1dc <__moddi3+0xbc>
c001f1bc:	89 c8                	mov    eax,ecx
c001f1be:	89 f2                	mov    edx,esi
c001f1c0:	eb b2                	jmp    c001f174 <__moddi3+0x54>
c001f1c2:	66 90                	xchg   ax,ax
c001f1c4:	f7 d9                	neg    ecx
c001f1c6:	83 d3 00             	adc    ebx,0x0
c001f1c9:	f7 db                	neg    ebx
c001f1cb:	89 de                	mov    esi,ebx
c001f1cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f1d5:	e9 6f ff ff ff       	jmp    c001f149 <__moddi3+0x29>
c001f1da:	66 90                	xchg   ax,ax
c001f1dc:	0f bd c7             	bsr    eax,edi
c001f1df:	83 f0 1f             	xor    eax,0x1f
c001f1e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f1e6:	75 24                	jne    c001f20c <__moddi3+0xec>
c001f1e8:	39 f7                	cmp    edi,esi
c001f1ea:	72 06                	jb     c001f1f2 <__moddi3+0xd2>
c001f1ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f1f0:	77 0c                	ja     c001f1fe <__moddi3+0xde>
c001f1f2:	89 e9                	mov    ecx,ebp
c001f1f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f1f8:	19 fe                	sbb    esi,edi
c001f1fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f202:	89 f2                	mov    edx,esi
c001f204:	e9 6b ff ff ff       	jmp    c001f174 <__moddi3+0x54>
c001f209:	8d 76 00             	lea    esi,[esi+0x0]
c001f20c:	b8 20 00 00 00       	mov    eax,0x20
c001f211:	89 c2                	mov    edx,eax
c001f213:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f217:	29 da                	sub    edx,ebx
c001f219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f21d:	88 d9                	mov    cl,bl
c001f21f:	d3 e7                	shl    edi,cl
c001f221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f225:	88 d1                	mov    cl,dl
c001f227:	d3 e8                	shr    eax,cl
c001f229:	09 c7                	or     edi,eax
c001f22b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f22f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f233:	89 d8                	mov    eax,ebx
c001f235:	88 d9                	mov    cl,bl
c001f237:	d3 e7                	shl    edi,cl
c001f239:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f23d:	89 f3                	mov    ebx,esi
c001f23f:	88 d1                	mov    cl,dl
c001f241:	d3 eb                	shr    ebx,cl
c001f243:	89 c7                	mov    edi,eax
c001f245:	88 c1                	mov    cl,al
c001f247:	d3 e6                	shl    esi,cl
c001f249:	89 e8                	mov    eax,ebp
c001f24b:	88 d1                	mov    cl,dl
c001f24d:	d3 e8                	shr    eax,cl
c001f24f:	09 f0                	or     eax,esi
c001f251:	89 f9                	mov    ecx,edi
c001f253:	d3 e5                	shl    ebp,cl
c001f255:	89 da                	mov    edx,ebx
c001f257:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f25b:	89 d3                	mov    ebx,edx
c001f25d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f261:	89 c6                	mov    esi,eax
c001f263:	89 d1                	mov    ecx,edx
c001f265:	39 d3                	cmp    ebx,edx
c001f267:	72 27                	jb     c001f290 <__moddi3+0x170>
c001f269:	74 21                	je     c001f28c <__moddi3+0x16c>
c001f26b:	29 f5                	sub    ebp,esi
c001f26d:	19 cb                	sbb    ebx,ecx
c001f26f:	89 de                	mov    esi,ebx
c001f271:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f275:	d3 e6                	shl    esi,cl
c001f277:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f27b:	89 f9                	mov    ecx,edi
c001f27d:	d3 ed                	shr    ebp,cl
c001f27f:	09 ee                	or     esi,ebp
c001f281:	89 f0                	mov    eax,esi
c001f283:	d3 eb                	shr    ebx,cl
c001f285:	89 da                	mov    edx,ebx
c001f287:	e9 e8 fe ff ff       	jmp    c001f174 <__moddi3+0x54>
c001f28c:	39 c5                	cmp    ebp,eax
c001f28e:	73 db                	jae    c001f26b <__moddi3+0x14b>
c001f290:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f294:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f298:	89 d1                	mov    ecx,edx
c001f29a:	89 c6                	mov    esi,eax
c001f29c:	eb cd                	jmp    c001f26b <__moddi3+0x14b>
c001f29e:	66 90                	xchg   ax,ax

c001f2a0 <__udivdi3>:
c001f2a0:	55                   	push   ebp
c001f2a1:	57                   	push   edi
c001f2a2:	56                   	push   esi
c001f2a3:	53                   	push   ebx
c001f2a4:	83 ec 1c             	sub    esp,0x1c
c001f2a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f2af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f2b7:	85 d2                	test   edx,edx
c001f2b9:	75 41                	jne    c001f2fc <__udivdi3+0x5c>
c001f2bb:	39 f7                	cmp    edi,esi
c001f2bd:	76 15                	jbe    c001f2d4 <__udivdi3+0x34>
c001f2bf:	89 e8                	mov    eax,ebp
c001f2c1:	89 f2                	mov    edx,esi
c001f2c3:	f7 f7                	div    edi
c001f2c5:	31 db                	xor    ebx,ebx
c001f2c7:	89 da                	mov    edx,ebx
c001f2c9:	83 c4 1c             	add    esp,0x1c
c001f2cc:	5b                   	pop    ebx
c001f2cd:	5e                   	pop    esi
c001f2ce:	5f                   	pop    edi
c001f2cf:	5d                   	pop    ebp
c001f2d0:	c3                   	ret    
c001f2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2d4:	89 f9                	mov    ecx,edi
c001f2d6:	85 ff                	test   edi,edi
c001f2d8:	75 0b                	jne    c001f2e5 <__udivdi3+0x45>
c001f2da:	b8 01 00 00 00       	mov    eax,0x1
c001f2df:	31 d2                	xor    edx,edx
c001f2e1:	f7 f7                	div    edi
c001f2e3:	89 c1                	mov    ecx,eax
c001f2e5:	31 d2                	xor    edx,edx
c001f2e7:	89 f0                	mov    eax,esi
c001f2e9:	f7 f1                	div    ecx
c001f2eb:	89 c3                	mov    ebx,eax
c001f2ed:	89 e8                	mov    eax,ebp
c001f2ef:	f7 f1                	div    ecx
c001f2f1:	89 da                	mov    edx,ebx
c001f2f3:	83 c4 1c             	add    esp,0x1c
c001f2f6:	5b                   	pop    ebx
c001f2f7:	5e                   	pop    esi
c001f2f8:	5f                   	pop    edi
c001f2f9:	5d                   	pop    ebp
c001f2fa:	c3                   	ret    
c001f2fb:	90                   	nop
c001f2fc:	39 f2                	cmp    edx,esi
c001f2fe:	77 1c                	ja     c001f31c <__udivdi3+0x7c>
c001f300:	0f bd da             	bsr    ebx,edx
c001f303:	83 f3 1f             	xor    ebx,0x1f
c001f306:	75 24                	jne    c001f32c <__udivdi3+0x8c>
c001f308:	39 f2                	cmp    edx,esi
c001f30a:	72 08                	jb     c001f314 <__udivdi3+0x74>
c001f30c:	39 ef                	cmp    edi,ebp
c001f30e:	0f 87 84 00 00 00    	ja     c001f398 <__udivdi3+0xf8>
c001f314:	b8 01 00 00 00       	mov    eax,0x1
c001f319:	eb ac                	jmp    c001f2c7 <__udivdi3+0x27>
c001f31b:	90                   	nop
c001f31c:	31 db                	xor    ebx,ebx
c001f31e:	31 c0                	xor    eax,eax
c001f320:	89 da                	mov    edx,ebx
c001f322:	83 c4 1c             	add    esp,0x1c
c001f325:	5b                   	pop    ebx
c001f326:	5e                   	pop    esi
c001f327:	5f                   	pop    edi
c001f328:	5d                   	pop    ebp
c001f329:	c3                   	ret    
c001f32a:	66 90                	xchg   ax,ax
c001f32c:	b8 20 00 00 00       	mov    eax,0x20
c001f331:	29 d8                	sub    eax,ebx
c001f333:	88 d9                	mov    cl,bl
c001f335:	d3 e2                	shl    edx,cl
c001f337:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f33b:	89 fa                	mov    edx,edi
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 ea                	shr    edx,cl
c001f341:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f345:	09 d1                	or     ecx,edx
c001f347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f34b:	88 d9                	mov    cl,bl
c001f34d:	d3 e7                	shl    edi,cl
c001f34f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f353:	89 f7                	mov    edi,esi
c001f355:	88 c1                	mov    cl,al
c001f357:	d3 ef                	shr    edi,cl
c001f359:	88 d9                	mov    cl,bl
c001f35b:	d3 e6                	shl    esi,cl
c001f35d:	89 ea                	mov    edx,ebp
c001f35f:	88 c1                	mov    cl,al
c001f361:	d3 ea                	shr    edx,cl
c001f363:	09 d6                	or     esi,edx
c001f365:	89 f0                	mov    eax,esi
c001f367:	89 fa                	mov    edx,edi
c001f369:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f36d:	89 d7                	mov    edi,edx
c001f36f:	89 c6                	mov    esi,eax
c001f371:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f375:	39 d7                	cmp    edi,edx
c001f377:	72 13                	jb     c001f38c <__udivdi3+0xec>
c001f379:	74 09                	je     c001f384 <__udivdi3+0xe4>
c001f37b:	89 f0                	mov    eax,esi
c001f37d:	31 db                	xor    ebx,ebx
c001f37f:	e9 43 ff ff ff       	jmp    c001f2c7 <__udivdi3+0x27>
c001f384:	88 d9                	mov    cl,bl
c001f386:	d3 e5                	shl    ebp,cl
c001f388:	39 c5                	cmp    ebp,eax
c001f38a:	73 ef                	jae    c001f37b <__udivdi3+0xdb>
c001f38c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f38f:	31 db                	xor    ebx,ebx
c001f391:	e9 31 ff ff ff       	jmp    c001f2c7 <__udivdi3+0x27>
c001f396:	66 90                	xchg   ax,ax
c001f398:	31 c0                	xor    eax,eax
c001f39a:	e9 28 ff ff ff       	jmp    c001f2c7 <__udivdi3+0x27>
c001f39f:	90                   	nop

c001f3a0 <__umoddi3>:
c001f3a0:	55                   	push   ebp
c001f3a1:	57                   	push   edi
c001f3a2:	56                   	push   esi
c001f3a3:	53                   	push   ebx
c001f3a4:	83 ec 1c             	sub    esp,0x1c
c001f3a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f3b7:	89 da                	mov    edx,ebx
c001f3b9:	85 c0                	test   eax,eax
c001f3bb:	75 37                	jne    c001f3f4 <__umoddi3+0x54>
c001f3bd:	39 df                	cmp    edi,ebx
c001f3bf:	76 13                	jbe    c001f3d4 <__umoddi3+0x34>
c001f3c1:	89 f0                	mov    eax,esi
c001f3c3:	f7 f7                	div    edi
c001f3c5:	89 d0                	mov    eax,edx
c001f3c7:	31 d2                	xor    edx,edx
c001f3c9:	83 c4 1c             	add    esp,0x1c
c001f3cc:	5b                   	pop    ebx
c001f3cd:	5e                   	pop    esi
c001f3ce:	5f                   	pop    edi
c001f3cf:	5d                   	pop    ebp
c001f3d0:	c3                   	ret    
c001f3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3d4:	89 fd                	mov    ebp,edi
c001f3d6:	85 ff                	test   edi,edi
c001f3d8:	75 0b                	jne    c001f3e5 <__umoddi3+0x45>
c001f3da:	b8 01 00 00 00       	mov    eax,0x1
c001f3df:	31 d2                	xor    edx,edx
c001f3e1:	f7 f7                	div    edi
c001f3e3:	89 c5                	mov    ebp,eax
c001f3e5:	89 d8                	mov    eax,ebx
c001f3e7:	31 d2                	xor    edx,edx
c001f3e9:	f7 f5                	div    ebp
c001f3eb:	89 f0                	mov    eax,esi
c001f3ed:	f7 f5                	div    ebp
c001f3ef:	89 d0                	mov    eax,edx
c001f3f1:	eb d4                	jmp    c001f3c7 <__umoddi3+0x27>
c001f3f3:	90                   	nop
c001f3f4:	89 f1                	mov    ecx,esi
c001f3f6:	39 d8                	cmp    eax,ebx
c001f3f8:	76 0a                	jbe    c001f404 <__umoddi3+0x64>
c001f3fa:	89 f0                	mov    eax,esi
c001f3fc:	83 c4 1c             	add    esp,0x1c
c001f3ff:	5b                   	pop    ebx
c001f400:	5e                   	pop    esi
c001f401:	5f                   	pop    edi
c001f402:	5d                   	pop    ebp
c001f403:	c3                   	ret    
c001f404:	0f bd e8             	bsr    ebp,eax
c001f407:	83 f5 1f             	xor    ebp,0x1f
c001f40a:	75 1c                	jne    c001f428 <__umoddi3+0x88>
c001f40c:	39 d8                	cmp    eax,ebx
c001f40e:	72 04                	jb     c001f414 <__umoddi3+0x74>
c001f410:	39 f7                	cmp    edi,esi
c001f412:	77 08                	ja     c001f41c <__umoddi3+0x7c>
c001f414:	89 da                	mov    edx,ebx
c001f416:	29 fe                	sub    esi,edi
c001f418:	19 c2                	sbb    edx,eax
c001f41a:	89 f1                	mov    ecx,esi
c001f41c:	89 c8                	mov    eax,ecx
c001f41e:	83 c4 1c             	add    esp,0x1c
c001f421:	5b                   	pop    ebx
c001f422:	5e                   	pop    esi
c001f423:	5f                   	pop    edi
c001f424:	5d                   	pop    ebp
c001f425:	c3                   	ret    
c001f426:	66 90                	xchg   ax,ax
c001f428:	ba 20 00 00 00       	mov    edx,0x20
c001f42d:	29 ea                	sub    edx,ebp
c001f42f:	89 e9                	mov    ecx,ebp
c001f431:	d3 e0                	shl    eax,cl
c001f433:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f437:	89 f8                	mov    eax,edi
c001f439:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f43d:	88 d1                	mov    cl,dl
c001f43f:	d3 e8                	shr    eax,cl
c001f441:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f445:	09 c1                	or     ecx,eax
c001f447:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f44b:	89 e9                	mov    ecx,ebp
c001f44d:	d3 e7                	shl    edi,cl
c001f44f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f453:	89 d8                	mov    eax,ebx
c001f455:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f459:	88 d1                	mov    cl,dl
c001f45b:	d3 e8                	shr    eax,cl
c001f45d:	89 c7                	mov    edi,eax
c001f45f:	89 e9                	mov    ecx,ebp
c001f461:	d3 e3                	shl    ebx,cl
c001f463:	89 f0                	mov    eax,esi
c001f465:	88 d1                	mov    cl,dl
c001f467:	d3 e8                	shr    eax,cl
c001f469:	09 d8                	or     eax,ebx
c001f46b:	89 e9                	mov    ecx,ebp
c001f46d:	d3 e6                	shl    esi,cl
c001f46f:	89 f3                	mov    ebx,esi
c001f471:	89 fa                	mov    edx,edi
c001f473:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f477:	89 d1                	mov    ecx,edx
c001f479:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f47d:	89 c6                	mov    esi,eax
c001f47f:	89 d7                	mov    edi,edx
c001f481:	39 d1                	cmp    ecx,edx
c001f483:	72 27                	jb     c001f4ac <__umoddi3+0x10c>
c001f485:	74 21                	je     c001f4a8 <__umoddi3+0x108>
c001f487:	89 ca                	mov    edx,ecx
c001f489:	29 f3                	sub    ebx,esi
c001f48b:	19 fa                	sbb    edx,edi
c001f48d:	89 d0                	mov    eax,edx
c001f48f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f493:	d3 e0                	shl    eax,cl
c001f495:	89 e9                	mov    ecx,ebp
c001f497:	d3 eb                	shr    ebx,cl
c001f499:	09 d8                	or     eax,ebx
c001f49b:	d3 ea                	shr    edx,cl
c001f49d:	83 c4 1c             	add    esp,0x1c
c001f4a0:	5b                   	pop    ebx
c001f4a1:	5e                   	pop    esi
c001f4a2:	5f                   	pop    edi
c001f4a3:	5d                   	pop    ebp
c001f4a4:	c3                   	ret    
c001f4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4a8:	39 c3                	cmp    ebx,eax
c001f4aa:	73 db                	jae    c001f487 <__umoddi3+0xe7>
c001f4ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f4b4:	89 d7                	mov    edi,edx
c001f4b6:	89 c6                	mov    esi,eax
c001f4b8:	eb cd                	jmp    c001f487 <__umoddi3+0xe7>

Disassembly of section .init:

c001f4ba <_init>:
c001f4ba:	55                   	push   ebp
c001f4bb:	89 e5                	mov    ebp,esp
c001f4bd:	e8 32 0c fe ff       	call   c00000f4 <frame_dummy>
c001f4c2:	e8 e5 fa ff ff       	call   c001efac <__do_global_ctors_aux>
c001f4c7:	5d                   	pop    ebp
c001f4c8:	c3                   	ret    

Disassembly of section .fini:

c001f4c9 <_fini>:
c001f4c9:	55                   	push   ebp
c001f4ca:	89 e5                	mov    ebp,esp
c001f4cc:	e8 b3 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f4d1:	5d                   	pop    ebp
c001f4d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f4d4 <Computer::~Computer()>:
c001f4d4:	83 ec 0c             	sub    esp,0xc
c001f4d7:	ba f4 07 02 c0       	mov    edx,0xc00207f4
c001f4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e0:	89 10                	mov    DWORD PTR [eax],edx
c001f4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e6:	83 ec 0c             	sub    esp,0xc
c001f4e9:	50                   	push   eax
c001f4ea:	e8 5f d1 fe ff       	call   c000c64e <Device::~Device()>
c001f4ef:	83 c4 10             	add    esp,0x10
c001f4f2:	90                   	nop
c001f4f3:	83 c4 0c             	add    esp,0xc
c001f4f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f4f8 <Computer::~Computer()>:
c001f4f8:	83 ec 0c             	sub    esp,0xc
c001f4fb:	83 ec 0c             	sub    esp,0xc
c001f4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f502:	e8 cd ff ff ff       	call   c001f4d4 <Computer::~Computer()>
c001f507:	83 c4 10             	add    esp,0x10
c001f50a:	83 ec 08             	sub    esp,0x8
c001f50d:	68 70 01 00 00       	push   0x170
c001f512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f516:	e8 f1 b2 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f51b:	83 c4 10             	add    esp,0x10
c001f51e:	83 c4 0c             	add    esp,0xc
c001f521:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f522 <idleCommon()>:
c001f522:	83 ec 0c             	sub    esp,0xc
c001f525:	fa                   	cli    
c001f526:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f52c:	e8 b7 66 ff ff       	call   c0015be8 <schedule()>
c001f531:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f536:	48                   	dec    eax
c001f537:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f53c:	75 01                	jne    c001f53f <idleCommon()+0x1d>
c001f53e:	fb                   	sti    
c001f53f:	83 c4 0c             	add    esp,0xc
c001f542:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f544 <LinkedList<UnixFile>::~LinkedList()>:
c001f544:	90                   	nop
c001f545:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f546 <LinkedList<UnixFile>::LinkedList()>:
c001f546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f54a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f554:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f55b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f55f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f56a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f574:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f57b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f57f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f586:	90                   	nop
c001f587:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f588 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f588:	83 ec 0c             	sub    esp,0xc
c001f58b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f590:	75 10                	jne    c001f5a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f592:	83 ec 0c             	sub    esp,0xc
c001f595:	68 08 0a 02 c0       	push   0xc0020a08
c001f59a:	e8 4a 1d ff ff       	call   c00112e9 <KePanic(char const*)>
c001f59f:	83 c4 10             	add    esp,0x10
c001f5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5a8:	85 c0                	test   eax,eax
c001f5aa:	74 34                	je     c001f5e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5b3:	85 c0                	test   eax,eax
c001f5b5:	74 29                	je     c001f5e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5de:	eb 65                	jmp    c001f645 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5e6:	85 c0                	test   eax,eax
c001f5e8:	75 4b                	jne    c001f635 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5f1:	85 c0                	test   eax,eax
c001f5f3:	75 40                	jne    c001f635 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5fd:	89 10                	mov    DWORD PTR [eax],edx
c001f5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f603:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f607:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f611:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f61f:	85 c0                	test   eax,eax
c001f621:	74 22                	je     c001f645 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f623:	83 ec 0c             	sub    esp,0xc
c001f626:	68 2a 0a 02 c0       	push   0xc0020a2a
c001f62b:	e8 b9 1c ff ff       	call   c00112e9 <KePanic(char const*)>
c001f630:	83 c4 10             	add    esp,0x10
c001f633:	eb 10                	jmp    c001f645 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f635:	83 ec 0c             	sub    esp,0xc
c001f638:	68 34 0a 02 c0       	push   0xc0020a34
c001f63d:	e8 a7 1c ff ff       	call   c00112e9 <KePanic(char const*)>
c001f642:	83 c4 10             	add    esp,0x10
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f64c:	8d 50 01             	lea    edx,[eax+0x1]
c001f64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f653:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f656:	90                   	nop
c001f657:	83 c4 0c             	add    esp,0xc
c001f65a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f65c <LinkedList<UnixFile>::getFirstElement()>:
c001f65c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f660:	8b 00                	mov    eax,DWORD PTR [eax]
c001f662:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f664 <LinkedList<UnixFile>::removeFirst()>:
c001f664:	83 ec 0c             	sub    esp,0xc
c001f667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f66d:	85 c0                	test   eax,eax
c001f66f:	75 12                	jne    c001f683 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	68 40 0a 02 c0       	push   0xc0020a40
c001f679:	e8 6b 1c ff ff       	call   c00112e9 <KePanic(char const*)>
c001f67e:	83 c4 10             	add    esp,0x10
c001f681:	eb 7e                	jmp    c001f701 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f687:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f68a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f68d:	85 c0                	test   eax,eax
c001f68f:	74 10                	je     c001f6a1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f691:	83 ec 0c             	sub    esp,0xc
c001f694:	68 8b 0a 02 c0       	push   0xc0020a8b
c001f699:	e8 4b 1c ff ff       	call   c00112e9 <KePanic(char const*)>
c001f69e:	83 c4 10             	add    esp,0x10
c001f6a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6aa:	85 c0                	test   eax,eax
c001f6ac:	75 33                	jne    c001f6e1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6ca:	83 f8 01             	cmp    eax,0x1
c001f6cd:	74 21                	je     c001f6f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6cf:	83 ec 0c             	sub    esp,0xc
c001f6d2:	68 64 0a 02 c0       	push   0xc0020a64
c001f6d7:	e8 0d 1c ff ff       	call   c00112e9 <KePanic(char const*)>
c001f6dc:	83 c4 10             	add    esp,0x10
c001f6df:	eb 0f                	jmp    c001f6f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ee:	89 10                	mov    DWORD PTR [eax],edx
c001f6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f701:	83 c4 0c             	add    esp,0xc
c001f704:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f706 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f70a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f70d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f70e <DriverlessDevice::~DriverlessDevice()>:
c001f70e:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c001f713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f717:	89 10                	mov    DWORD PTR [eax],edx
c001f719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f71d:	50                   	push   eax
c001f71e:	e8 2b cf fe ff       	call   c000c64e <Device::~Device()>
c001f723:	83 c4 04             	add    esp,0x4
c001f726:	90                   	nop
c001f727:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f728 <DriverlessDevice::~DriverlessDevice()>:
c001f728:	83 ec 0c             	sub    esp,0xc
c001f72b:	83 ec 0c             	sub    esp,0xc
c001f72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f732:	e8 d7 ff ff ff       	call   c001f70e <DriverlessDevice::~DriverlessDevice()>
c001f737:	83 c4 10             	add    esp,0x10
c001f73a:	83 ec 08             	sub    esp,0x8
c001f73d:	68 58 01 00 00       	push   0x158
c001f742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f746:	e8 c1 b0 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f74b:	83 c4 10             	add    esp,0x10
c001f74e:	83 c4 0c             	add    esp,0xc
c001f751:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f752 <LinkedList<Device>::addElement(Device*)>:
c001f752:	83 ec 0c             	sub    esp,0xc
c001f755:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f75a:	75 10                	jne    c001f76c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f75c:	83 ec 0c             	sub    esp,0xc
c001f75f:	68 08 0a 02 c0       	push   0xc0020a08
c001f764:	e8 80 1b ff ff       	call   c00112e9 <KePanic(char const*)>
c001f769:	83 c4 10             	add    esp,0x10
c001f76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f770:	8b 00                	mov    eax,DWORD PTR [eax]
c001f772:	85 c0                	test   eax,eax
c001f774:	74 3a                	je     c001f7b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f77d:	85 c0                	test   eax,eax
c001f77f:	74 2f                	je     c001f7b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f785:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f788:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f78c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f796:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f79a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7ae:	eb 68                	jmp    c001f818 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7b6:	85 c0                	test   eax,eax
c001f7b8:	75 4e                	jne    c001f808 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7c1:	85 c0                	test   eax,eax
c001f7c3:	75 43                	jne    c001f808 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7cd:	89 10                	mov    DWORD PTR [eax],edx
c001f7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7f2:	85 c0                	test   eax,eax
c001f7f4:	74 22                	je     c001f818 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7f6:	83 ec 0c             	sub    esp,0xc
c001f7f9:	68 2a 0a 02 c0       	push   0xc0020a2a
c001f7fe:	e8 e6 1a ff ff       	call   c00112e9 <KePanic(char const*)>
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	eb 10                	jmp    c001f818 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	68 34 0a 02 c0       	push   0xc0020a34
c001f810:	e8 d4 1a ff ff       	call   c00112e9 <KePanic(char const*)>
c001f815:	83 c4 10             	add    esp,0x10
c001f818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81f:	8d 50 01             	lea    edx,[eax+0x1]
c001f822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f826:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f829:	90                   	nop
c001f82a:	83 c4 0c             	add    esp,0xc
c001f82d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f82e <LinkedList<Device>::LinkedList()>:
c001f82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f832:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f83c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f847:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f85c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f867:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f86e:	90                   	nop
c001f86f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f870 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f874:	8b 00                	mov    eax,DWORD PTR [eax]
c001f876:	85 c0                	test   eax,eax
c001f878:	75 0e                	jne    c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f87a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f87e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f881:	85 c0                	test   eax,eax
c001f883:	75 03                	jne    c001f888 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f885:	b0 01                	mov    al,0x1
c001f887:	c3                   	ret    
c001f888:	b0 00                	mov    al,0x0
c001f88a:	90                   	nop
c001f88b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f88c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f890:	8b 00                	mov    eax,DWORD PTR [eax]
c001f892:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f894 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f894:	83 ec 0c             	sub    esp,0xc
c001f897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f89d:	85 c0                	test   eax,eax
c001f89f:	75 17                	jne    c001f8b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f8a1:	83 ec 0c             	sub    esp,0xc
c001f8a4:	68 40 0a 02 c0       	push   0xc0020a40
c001f8a9:	e8 3b 1a ff ff       	call   c00112e9 <KePanic(char const*)>
c001f8ae:	83 c4 10             	add    esp,0x10
c001f8b1:	e9 96 00 00 00       	jmp    c001f94c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f8b6:	66 90                	xchg   ax,ax
c001f8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8c2:	85 c0                	test   eax,eax
c001f8c4:	0f 95 c0             	setne  al
c001f8c7:	0f b6 c0             	movzx  eax,al
c001f8ca:	85 c0                	test   eax,eax
c001f8cc:	74 12                	je     c001f8e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f8ce:	83 ec 0c             	sub    esp,0xc
c001f8d1:	68 8b 0a 02 c0       	push   0xc0020a8b
c001f8d6:	e8 0e 1a ff ff       	call   c00112e9 <KePanic(char const*)>
c001f8db:	83 c4 10             	add    esp,0x10
c001f8de:	66 90                	xchg   ax,ax
c001f8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8e9:	85 c0                	test   eax,eax
c001f8eb:	0f 94 c0             	sete   al
c001f8ee:	0f b6 c0             	movzx  eax,al
c001f8f1:	85 c0                	test   eax,eax
c001f8f3:	74 33                	je     c001f928 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f903:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f911:	83 f8 01             	cmp    eax,0x1
c001f914:	74 22                	je     c001f938 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f916:	83 ec 0c             	sub    esp,0xc
c001f919:	68 64 0a 02 c0       	push   0xc0020a64
c001f91e:	e8 c6 19 ff ff       	call   c00112e9 <KePanic(char const*)>
c001f923:	83 c4 10             	add    esp,0x10
c001f926:	eb 10                	jmp    c001f938 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f92e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	89 10                	mov    DWORD PTR [eax],edx
c001f937:	90                   	nop
c001f938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f93f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f949:	8d 76 00             	lea    esi,[esi+0x0]
c001f94c:	83 c4 0c             	add    esp,0xc
c001f94f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f950:	83 ec 0c             	sub    esp,0xc
c001f953:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f958:	75 12                	jne    c001f96c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f95a:	83 ec 0c             	sub    esp,0xc
c001f95d:	68 08 0a 02 c0       	push   0xc0020a08
c001f962:	e8 82 19 ff ff       	call   c00112e9 <KePanic(char const*)>
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	66 90                	xchg   ax,ax
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	85 c0                	test   eax,eax
c001f974:	74 36                	je     c001f9ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f97d:	85 c0                	test   eax,eax
c001f97f:	74 2b                	je     c001f9ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f985:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f988:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f98c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f993:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f997:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9a8:	eb 6a                	jmp    c001fa14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9aa:	66 90                	xchg   ax,ax
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b2:	85 c0                	test   eax,eax
c001f9b4:	75 4e                	jne    c001fa04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9bd:	85 c0                	test   eax,eax
c001f9bf:	75 43                	jne    c001fa04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9c9:	89 10                	mov    DWORD PTR [eax],edx
c001f9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9eb:	85 c0                	test   eax,eax
c001f9ed:	74 25                	je     c001fa14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	68 2a 0a 02 c0       	push   0xc0020a2a
c001f9f7:	e8 ed 18 ff ff       	call   c00112e9 <KePanic(char const*)>
c001f9fc:	83 c4 10             	add    esp,0x10
c001f9ff:	eb 13                	jmp    c001fa14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa01:	8d 76 00             	lea    esi,[esi+0x0]
c001fa04:	83 ec 0c             	sub    esp,0xc
c001fa07:	68 34 0a 02 c0       	push   0xc0020a34
c001fa0c:	e8 d8 18 ff ff       	call   c00112e9 <KePanic(char const*)>
c001fa11:	83 c4 10             	add    esp,0x10
c001fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa1b:	8d 50 01             	lea    edx,[eax+0x1]
c001fa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa25:	90                   	nop
c001fa26:	83 c4 0c             	add    esp,0xc
c001fa29:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa2c <ACPI::~ACPI()>:
c001fa2c:	83 ec 0c             	sub    esp,0xc
c001fa2f:	ba 24 1c 02 c0       	mov    edx,0xc0021c24
c001fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa38:	89 10                	mov    DWORD PTR [eax],edx
c001fa3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	50                   	push   eax
c001fa42:	e8 07 cc fe ff       	call   c000c64e <Device::~Device()>
c001fa47:	83 c4 10             	add    esp,0x10
c001fa4a:	90                   	nop
c001fa4b:	83 c4 0c             	add    esp,0xc
c001fa4e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa50 <ACPI::~ACPI()>:
c001fa50:	83 ec 0c             	sub    esp,0xc
c001fa53:	83 ec 0c             	sub    esp,0xc
c001fa56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa5a:	e8 cd ff ff ff       	call   c001fa2c <ACPI::~ACPI()>
c001fa5f:	83 c4 10             	add    esp,0x10
c001fa62:	83 ec 08             	sub    esp,0x8
c001fa65:	68 64 12 00 00       	push   0x1264
c001fa6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa6e:	e8 99 ad fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fa73:	83 c4 10             	add    esp,0x10
c001fa76:	83 c4 0c             	add    esp,0xc
c001fa79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fa7c <LinkedList<Device>::~LinkedList()>:
c001fa7c:	90                   	nop
c001fa7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fa80 <LinkedList<Device>::isEmpty()>:
c001fa80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa86:	85 c0                	test   eax,eax
c001fa88:	75 0e                	jne    c001fa98 <LinkedList<Device>::isEmpty()+0x18>
c001fa8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa91:	85 c0                	test   eax,eax
c001fa93:	75 03                	jne    c001fa98 <LinkedList<Device>::isEmpty()+0x18>
c001fa95:	b0 01                	mov    al,0x1
c001fa97:	c3                   	ret    
c001fa98:	b0 00                	mov    al,0x0
c001fa9a:	90                   	nop
c001fa9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fa9c <LinkedList<Device>::getFirstElement()>:
c001fa9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001faa4 <LinkedList<Device>::removeFirst()>:
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faab:	8b 00                	mov    eax,DWORD PTR [eax]
c001faad:	85 c0                	test   eax,eax
c001faaf:	75 17                	jne    c001fac8 <LinkedList<Device>::removeFirst()+0x24>
c001fab1:	83 ec 0c             	sub    esp,0xc
c001fab4:	68 40 0a 02 c0       	push   0xc0020a40
c001fab9:	e8 2b 18 ff ff       	call   c00112e9 <KePanic(char const*)>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	e9 92 00 00 00       	jmp    c001fb58 <LinkedList<Device>::removeFirst()+0xb4>
c001fac6:	66 90                	xchg   ax,ax
c001fac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001facf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fad5:	85 c0                	test   eax,eax
c001fad7:	74 13                	je     c001faec <LinkedList<Device>::removeFirst()+0x48>
c001fad9:	83 ec 0c             	sub    esp,0xc
c001fadc:	68 8b 0a 02 c0       	push   0xc0020a8b
c001fae1:	e8 03 18 ff ff       	call   c00112e9 <KePanic(char const*)>
c001fae6:	83 c4 10             	add    esp,0x10
c001fae9:	8d 76 00             	lea    esi,[esi+0x0]
c001faec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001faf8:	85 c0                	test   eax,eax
c001fafa:	75 34                	jne    c001fb30 <LinkedList<Device>::removeFirst()+0x8c>
c001fafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb18:	83 f8 01             	cmp    eax,0x1
c001fb1b:	74 27                	je     c001fb44 <LinkedList<Device>::removeFirst()+0xa0>
c001fb1d:	83 ec 0c             	sub    esp,0xc
c001fb20:	68 64 0a 02 c0       	push   0xc0020a64
c001fb25:	e8 bf 17 ff ff       	call   c00112e9 <KePanic(char const*)>
c001fb2a:	83 c4 10             	add    esp,0x10
c001fb2d:	eb 15                	jmp    c001fb44 <LinkedList<Device>::removeFirst()+0xa0>
c001fb2f:	90                   	nop
c001fb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb36:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb40:	89 10                	mov    DWORD PTR [eax],edx
c001fb42:	66 90                	xchg   ax,ax
c001fb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb4b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb55:	8d 76 00             	lea    esi,[esi+0x0]
c001fb58:	83 c4 0c             	add    esp,0xc
c001fb5b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fb5c <CPU::~CPU()>:
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c001fb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb68:	89 10                	mov    DWORD PTR [eax],edx
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	50                   	push   eax
c001fb72:	e8 d7 ca fe ff       	call   c000c64e <Device::~Device()>
c001fb77:	83 c4 10             	add    esp,0x10
c001fb7a:	90                   	nop
c001fb7b:	83 c4 0c             	add    esp,0xc
c001fb7e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fb80 <CPU::~CPU()>:
c001fb80:	83 ec 0c             	sub    esp,0xc
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb8a:	e8 cd ff ff ff       	call   c001fb5c <CPU::~CPU()>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	83 ec 08             	sub    esp,0x8
c001fb95:	68 94 11 00 00       	push   0x1194
c001fb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb9e:	e8 69 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fba3:	83 c4 10             	add    esp,0x10
c001fba6:	83 c4 0c             	add    esp,0xc
c001fba9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fbb3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fbb4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fbb4:	90                   	nop
c001fbb5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fbb8 <ThreadControlBlock::ThreadControlBlock()>:
c001fbb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbbc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbc7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fbce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fbd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbdd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fbe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fbef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fbf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbfb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fbff:	90                   	nop
c001fc00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fc04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fc04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc3d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc44:	90                   	nop
c001fc45:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fc46 <PCI::~PCI()>:
c001fc46:	83 ec 0c             	sub    esp,0xc
c001fc49:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c001fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc52:	89 10                	mov    DWORD PTR [eax],edx
c001fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	50                   	push   eax
c001fc5c:	e8 7f c4 fe ff       	call   c000c0e0 <Bus::~Bus()>
c001fc61:	83 c4 10             	add    esp,0x10
c001fc64:	90                   	nop
c001fc65:	83 c4 0c             	add    esp,0xc
c001fc68:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc6a <PCI::~PCI()>:
c001fc6a:	83 ec 0c             	sub    esp,0xc
c001fc6d:	83 ec 0c             	sub    esp,0xc
c001fc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc74:	e8 cd ff ff ff       	call   c001fc46 <PCI::~PCI()>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	83 ec 08             	sub    esp,0x8
c001fc7f:	68 5c 01 00 00       	push   0x15c
c001fc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc88:	e8 7f ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	83 c4 0c             	add    esp,0xc
c001fc93:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc94 <IDE::~IDE()>:
c001fc94:	83 ec 0c             	sub    esp,0xc
c001fc97:	ba 60 2d 02 c0       	mov    edx,0xc0022d60
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	89 10                	mov    DWORD PTR [eax],edx
c001fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca6:	83 ec 0c             	sub    esp,0xc
c001fca9:	50                   	push   eax
c001fcaa:	e8 19 ce fe ff       	call   c000cac8 <HardDiskController::~HardDiskController()>
c001fcaf:	83 c4 10             	add    esp,0x10
c001fcb2:	90                   	nop
c001fcb3:	83 c4 0c             	add    esp,0xc
c001fcb6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fcb8 <IDE::~IDE()>:
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	83 ec 0c             	sub    esp,0xc
c001fcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc2:	e8 cd ff ff ff       	call   c001fc94 <IDE::~IDE()>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	83 ec 08             	sub    esp,0x8
c001fccd:	68 70 02 00 00       	push   0x270
c001fcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd6:	e8 31 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	83 c4 0c             	add    esp,0xc
c001fce1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fce2 <SATABus::~SATABus()>:
c001fce2:	83 ec 0c             	sub    esp,0xc
c001fce5:	ba b0 2d 02 c0       	mov    edx,0xc0022db0
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	89 10                	mov    DWORD PTR [eax],edx
c001fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	50                   	push   eax
c001fcf8:	e8 cb cd fe ff       	call   c000cac8 <HardDiskController::~HardDiskController()>
c001fcfd:	83 c4 10             	add    esp,0x10
c001fd00:	90                   	nop
c001fd01:	83 c4 0c             	add    esp,0xc
c001fd04:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fd06 <SATABus::~SATABus()>:
c001fd06:	83 ec 0c             	sub    esp,0xc
c001fd09:	83 ec 0c             	sub    esp,0xc
c001fd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd10:	e8 cd ff ff ff       	call   c001fce2 <SATABus::~SATABus()>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	83 ec 08             	sub    esp,0x8
c001fd1b:	68 64 01 00 00       	push   0x164
c001fd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd24:	e8 e3 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd29:	83 c4 10             	add    esp,0x10
c001fd2c:	83 c4 0c             	add    esp,0xc
c001fd2f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd30 <ATA::~ATA()>:
c001fd30:	83 ec 0c             	sub    esp,0xc
c001fd33:	ba f0 2d 02 c0       	mov    edx,0xc0022df0
c001fd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3c:	89 10                	mov    DWORD PTR [eax],edx
c001fd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd42:	83 ec 0c             	sub    esp,0xc
c001fd45:	50                   	push   eax
c001fd46:	e8 5f ce fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001fd4b:	83 c4 10             	add    esp,0x10
c001fd4e:	90                   	nop
c001fd4f:	83 c4 0c             	add    esp,0xc
c001fd52:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fd54 <ATA::~ATA()>:
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	83 ec 0c             	sub    esp,0xc
c001fd5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd5e:	e8 cd ff ff ff       	call   c001fd30 <ATA::~ATA()>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	83 ec 08             	sub    esp,0x8
c001fd69:	68 7c 01 00 00       	push   0x17c
c001fd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd72:	e8 95 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd77:	83 c4 10             	add    esp,0x10
c001fd7a:	83 c4 0c             	add    esp,0xc
c001fd7d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fd7e <ATAPI::~ATAPI()>:
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	ba 38 2e 02 c0       	mov    edx,0xc0022e38
c001fd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8a:	89 10                	mov    DWORD PTR [eax],edx
c001fd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	50                   	push   eax
c001fd94:	e8 11 ce fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001fd99:	83 c4 10             	add    esp,0x10
c001fd9c:	90                   	nop
c001fd9d:	83 c4 0c             	add    esp,0xc
c001fda0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fda2 <ATAPI::~ATAPI()>:
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	83 ec 0c             	sub    esp,0xc
c001fda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdac:	e8 cd ff ff ff       	call   c001fd7e <ATAPI::~ATAPI()>
c001fdb1:	83 c4 10             	add    esp,0x10
c001fdb4:	83 ec 08             	sub    esp,0x8
c001fdb7:	68 84 01 00 00       	push   0x184
c001fdbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc0:	e8 47 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdc5:	83 c4 10             	add    esp,0x10
c001fdc8:	83 c4 0c             	add    esp,0xc
c001fdcb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fdcc <SATA::~SATA()>:
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	ba ec 2e 02 c0       	mov    edx,0xc0022eec
c001fdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd8:	89 10                	mov    DWORD PTR [eax],edx
c001fdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	50                   	push   eax
c001fde2:	e8 c3 cd fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001fde7:	83 c4 10             	add    esp,0x10
c001fdea:	90                   	nop
c001fdeb:	83 c4 0c             	add    esp,0xc
c001fdee:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fdf0 <SATA::~SATA()>:
c001fdf0:	83 ec 0c             	sub    esp,0xc
c001fdf3:	83 ec 0c             	sub    esp,0xc
c001fdf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfa:	e8 cd ff ff ff       	call   c001fdcc <SATA::~SATA()>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	83 ec 08             	sub    esp,0x8
c001fe05:	68 7c 01 00 00       	push   0x17c
c001fe0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe0e:	e8 f9 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe13:	83 c4 10             	add    esp,0x10
c001fe16:	83 c4 0c             	add    esp,0xc
c001fe19:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fe1a <SATAPI::~SATAPI()>:
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	ba 10 30 02 c0       	mov    edx,0xc0023010
c001fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe26:	89 10                	mov    DWORD PTR [eax],edx
c001fe28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	50                   	push   eax
c001fe30:	e8 75 cd fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001fe35:	83 c4 10             	add    esp,0x10
c001fe38:	90                   	nop
c001fe39:	83 c4 0c             	add    esp,0xc
c001fe3c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe3e <SATAPI::~SATAPI()>:
c001fe3e:	83 ec 0c             	sub    esp,0xc
c001fe41:	83 ec 0c             	sub    esp,0xc
c001fe44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe48:	e8 cd ff ff ff       	call   c001fe1a <SATAPI::~SATAPI()>
c001fe4d:	83 c4 10             	add    esp,0x10
c001fe50:	83 ec 08             	sub    esp,0x8
c001fe53:	68 84 01 00 00       	push   0x184
c001fe58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe5c:	e8 ab a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe61:	83 c4 10             	add    esp,0x10
c001fe64:	83 c4 0c             	add    esp,0xc
c001fe67:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe68 <IOAPIC::~IOAPIC()>:
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001fe70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe74:	89 10                	mov    DWORD PTR [eax],edx
c001fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	50                   	push   eax
c001fe7e:	e8 cb c7 fe ff       	call   c000c64e <Device::~Device()>
c001fe83:	83 c4 10             	add    esp,0x10
c001fe86:	90                   	nop
c001fe87:	83 c4 0c             	add    esp,0xc
c001fe8a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe8c <IOAPIC::~IOAPIC()>:
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	83 ec 0c             	sub    esp,0xc
c001fe92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe96:	e8 cd ff ff ff       	call   c001fe68 <IOAPIC::~IOAPIC()>
c001fe9b:	83 c4 10             	add    esp,0x10
c001fe9e:	83 ec 08             	sub    esp,0x8
c001fea1:	68 68 01 00 00       	push   0x168
c001fea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feaa:	e8 5d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	83 c4 0c             	add    esp,0xc
c001feb5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001feb8 <APICTimer::~APICTimer()>:
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	ba 98 30 02 c0       	mov    edx,0xc0023098
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	89 10                	mov    DWORD PTR [eax],edx
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	50                   	push   eax
c001fece:	e8 51 e2 fe ff       	call   c000e124 <Timer::~Timer()>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	90                   	nop
c001fed7:	83 c4 0c             	add    esp,0xc
c001feda:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fedc <APICTimer::~APICTimer()>:
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee6:	e8 cd ff ff ff       	call   c001feb8 <APICTimer::~APICTimer()>
c001feeb:	83 c4 10             	add    esp,0x10
c001feee:	83 ec 08             	sub    esp,0x8
c001fef1:	68 60 01 00 00       	push   0x160
c001fef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefa:	e8 0d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001feff:	83 c4 10             	add    esp,0x10
c001ff02:	83 c4 0c             	add    esp,0xc
c001ff05:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff08 <PIT::~PIT()>:
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	ba e8 30 02 c0       	mov    edx,0xc00230e8
c001ff10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff14:	89 10                	mov    DWORD PTR [eax],edx
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	50                   	push   eax
c001ff1e:	e8 01 e2 fe ff       	call   c000e124 <Timer::~Timer()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	90                   	nop
c001ff27:	83 c4 0c             	add    esp,0xc
c001ff2a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff2c <PIT::~PIT()>:
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	83 ec 0c             	sub    esp,0xc
c001ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff36:	e8 cd ff ff ff       	call   c001ff08 <PIT::~PIT()>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	83 ec 08             	sub    esp,0x8
c001ff41:	68 5c 01 00 00       	push   0x15c
c001ff46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4a:	e8 bd a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	83 c4 0c             	add    esp,0xc
c001ff55:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be fd 1e 02 c0       	mov    esi,0xc0021efd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 19 1f 02 c0       	mov    esi,0xc0021f19
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
